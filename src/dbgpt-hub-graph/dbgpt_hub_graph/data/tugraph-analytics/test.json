[
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为53的软件关联的软件,和以创造关系关联了这些软件的其他公司",
        "output": "match(a:software where a.id = '53')-[e]-(b:software)<-[e2:company_creates_software]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回用户发布的帖子, 令帖子的创建时间的值等于发布帖子的用户的名字的平均值, 再查找帖子拥有的标签",
        "output": "match(a:user)-[e:publish]->(b:post) let b.createTime = AVG((b:post)<-[e2:publish]-(c:user) => c.name) match(b:post)-[e3:has]->(d:tag) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为文艺的电影院或评论,以及与其有关的标签,并返回文艺的价值和这些标签的价值",
        "output": "match(a:cinema | comment where name = '文艺')-[e]-(b:tag) return a.value, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前38个满足条件性别是male或年龄为空,且名字不是46的person",
        "output": "match(a:person where (a.gender = 'male' or (a.age is null)) and a.name <> 46) return a limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与评论Comment_202存在属于关系且与标签悬疑存在拥有关系的电影节点，并返回这些电影的价值、评论Comment_202的字数以及标签悬疑的ID。",
        "output": "match(a:comment where a.name='Comment_202')-[e:belong]->(b:film)<-[e2:has]-(c:tag where c.name='悬疑') return a.wordCount,b.value,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与贷款loan_76有关系的账号的上次登录时间",
        "output": "match(a:loan where a.name='loan_76')-[e]-(b:account) return b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找与student赵宏有关系的university, 返回和这些university有关联的course的,courseHour的平均值对47取余的平均值",
        "output": "match(a:student where a.name= '赵宏')-[e]-(b:university)-[e2]-(c:course) return AVG(AVG(c.courseHour) % 47)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询读者喜欢的书, 令书的名字的值等于喜欢书的读者的名字的平均值, 再查找书关联的书",
        "output": "match(a:reader)-[e:likes]->(b:book) let b.name = AVG((b:book)<-[e2:likes]-(c:reader) => c.name) match(b:book)-[e3:relates]->(d:book) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高减身高的值",
        "output": "a.height - a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据area,peopleNumber分组,计算area减87151的求和值",
        "output": "return SUM(a.area - 87151) group by a.area, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询共同支付人名为郑若涵和韩建国，且标签为'person'的节点。",
        "output": "match(a where a.name = '郑若涵')-[e:pay]->(b:person)<-[e2:pay]-(c where c.name = '韩建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为马宏的人有关，或者与他们相关的人有关的评论。",
        "output": "match(a:person where n.name=马宏)-[e:relation]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,id分组,计算value的最小值除873的值",
        "output": "return MIN(a.value) / 873 group by a.value, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛的三角的环,边标签等于包含, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为defaultName的贷款点的id、金额和权重。",
        "output": "match(a:loan where a.name = 'defaultName') return a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为马若涵的点diagnose的patient",
        "output": "match(a where a.name='马若涵')-[e:diagnose]->(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与user杜轩存在creates关系,且与repository Mybatis存在belong关系的issue节点，返回这些issue的status,id,及user杜轩的salary,及repository Mybatis的stars",
        "output": "match(a:user where a.name='杜轩')-[e:creates]->(b:issue)<-[e2:belong]-(c:repository where c.name='Mybatis') return a.salary,b.status, b.id,c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询27个与孤城和悲惨世界都存在关系的作家节点",
        "output": "match(a where a.name='孤城')-[e]->(b:author)<-[e2]-(c where c.name='悲惨世界') return b limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家郑宏撰写的书,以及喜欢这些书的读者, 令书的名字等于读者的薪资对薪资取余乘163, 返回作家的id,书的创建时间,读者的id",
        "output": "match(a:author where name = '郑宏')-[e:write]->(b:book)<-[e2:likes]-(c:reader) let b.name = c.salary % c.salary * 163 return a.id,b.createTime,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value加726的值",
        "output": "a.value + 726",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前193个满足条件name是黄宏的person",
        "output": "match(a:person where a.name = '黄宏') return a limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与user杜伟有likes关系的2跳以内的环",
        "output": "match(a:user where name = '杜伟')-[e:likes]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出department的三角的环,边标签等于has, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表86,611, 源点的id等于输入表id,返回标签为person,名为李思琪的点,返回这些点的年龄,身高",
        "output": "with p as (select * from (VALUES(86),(611)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李思琪')) RETURN a.age, a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询loan deposit的account, 令account(b)的createTime的值等于transferaccount的account的isBlock的最小值, 再查找account transfer的account",
        "output": "match(a:loan)-[e:deposit]->(b:account) let b.createTime = MIN((b:account)<-[e2:transfer]-(c:account) => c.isBlock) match(b:account)-[e3:transfer]->(d:account) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary除4250的值",
        "output": "a.salary / 4250",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和公司美团有申请关系的贷款,再查询以申请关系关联了美团的贷款",
        "output": "match(a:company where a.name = '美团')-[e:apply]->(b:loan),(a:company where a.name = '美团')<-[e2:apply]-(c:loan)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,lang,name, 数据为(909,'English','Post_231'),(599,'Chinese','Post_338'),(847,'Chinese','Post_443'),(606,'Chinese','Post_457')的子查询作为输入表, 源点的lang等于输入表lang,找出label为post_has_tag,并且满足条件f1等于true的边",
        "output": "with p as (select * from (VALUES(909,'English','Post_231'),(599,'Chinese','Post_338'),(847,'Chinese','Post_443'),(606,'Chinese','Post_457')) as t(value,lang,name))MATCH (a WHERE a.lang = p.lang) -[e:post_has_tag WHERE e.f1 = TRUE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与Order_191有关联的buyer，该关联是以cancel关系建立的",
        "output": "match(a:orders where a.name='Order_191')<-[e:cancel]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有年龄小于72岁、身高大于181cm或者id大于等于0的person，然后按照身高从高到低排序。",
        "output": "match(a:person where a.age < 72 or a.height > 181 or a.id >= 0) return a order by a.height desc limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找city belong的country,返回其源点的value除193的值,以及目标点的id的平均值除95的平均值",
        "output": "match(a:city)-[e:belong]->(b:country) return a.value / 193, AVG(AVG(b.id) / 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被作家陈若涵认识的作家",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='陈若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请返回与徐雪有支付关系的所有人，以及与赵月有支付关系的所有人。",
        "output": "match(a:person where a.name = '徐雪')-[e:pay]->(b:person),(c:person where c.name = '赵月')-[e2:pay]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出卖家陈思琪回答的买家节点查看的商品",
        "output": "match(a:seller where a.name = '陈思琪')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与department生物学院有关系的course的courseHour",
        "output": "match(a:department where a.name='生物学院')-[e]-(b:course) return b.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出102个名为Post_456的点拥有的类型为标签的节点,且节点名字为文艺",
        "output": "match(a where a.name='Post_456')-[e:has]->(b:tag where b.name = '文艺') return b limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与书百年孤独有引用关系的3跳的环",
        "output": "match(a:book where name = '百年孤独')-[e:refers]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找艺术学院和物理学院部门点公共的朋友节点名单。",
        "output": "match(a:department where a.name='艺术学院')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='物理学院') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找电影院好视影院的全部相关者,的f0对549取余的平均值",
        "output": "match(a:cinema where a.name= '好视影院')-[e:relation]->(b) return AVG(e.f0 % 549)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(27932,4217,'重庆')作为请求表数据,属性分别为area,peopleNumber,name, 以属性peopleNumber作为相等条件,返回被country澳大利亚contain的city",
        "output": "with p as (select * from (VALUES(27932,4217,'重庆')) as t(area,peopleNumber,name))MATCH (a:city WHERE a.peopleNumber = p.peopleNumber) <-[e:country_contain_city ]-(b:country WHERE b.name = '澳大利亚') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为'中国'的country",
        "output": "match(a:country where a.name = '中国') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "peopleNumber除589的值",
        "output": "a.peopleNumber / 589",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f0,weight,srcId, 数据为(607,101.46,112), 源点的weight等于输入表weight,查找117个软件Spark和Geaflow,共同的伙伴",
        "output": "with p as (select * from (VALUES(607,101.46,112)) as t(f0,weight,srcId))MATCH (a:software WHERE a.weight = p.weight AND (a.name = 'Spark')) -[e:partner ]->(b) <-[e2:partner ]-(c:software WHERE c.name = 'Geaflow') RETURN b LIMIT 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被仓库XXRepo拥有的合并请求,和XXRepo拥有的合并请求",
        "output": "match(a:pullRequest)<-[e:has]-(b:repository where name = 'XXRepo')-[e2:has]->(c:pullRequest) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出部门的三角的环,边label为拥有, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与订单Order_372有关系的商品的id",
        "output": "match(a:orders where a.name='Order_372')-[e]-(b:goods) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回电影院大众影院上映的电影,以及观看这些电影的person",
        "output": "match(a:cinema where name = '大众影院')-[e:releases]->(b:film)<-[e2:watch]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间,名字分组,计算value的最小值加57的最大值",
        "output": "return MAX(MIN(a.value) + 57) group by a.createTime, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和person杜宏有3度关系的person",
        "output": "match(a:person where a.name='杜宏')-[e]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为王宏的点申请的贷款",
        "output": "match(a where a.name='王宏')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找四个与字节跳动和阿里巴巴都有关联的country节点。",
        "output": "match(a where a.name='字节')-[e]->(b:country)<-[e2]-(c where c.name='阿里') return b limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与帖子 Post_228 有发布关系的用户",
        "output": "match(a:post where a.name='Post_228')<-[e:publish]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为96的city有关的city的relation, 再返回和city有关系的relation",
        "output": "match(a:city where id = 96)-[e]-(b:city)-[e2:relation]->(c), (b:city)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到与复仇者联盟电影有相关或者相关者关系的标签。",
        "output": "match(a:film where n.name=复仇者联盟)-[e:relation]->{1,2}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家的2跳以内的环",
        "output": "match(a:buyer)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为杜红的点喜欢的所有person,并对这些person的性别进行求和",
        "output": "match(a where a.name='杜红')-[e:likes]->(b:person) return SUM(b.gender)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person陈月的全部类型为朋友的边,并根据权重从小到大排列,返回90个",
        "output": "match(a:person where a.name = '陈月')-[e:friend]->(b) return b order by e.weight asc limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表319, 源点的id等于输入表id,找出所有类型是教师的点",
        "output": "with p as (select * from (VALUES(319)) as t(id)) MATCH (a:teacher WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出陈轩和王月的共同朋友，一共有12人。",
        "output": "match(a:person where a.name='陈轩')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='王月') return b limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出 person 源点与评论目标点之间，标签为'喜欢'的边。",
        "output": "match(a:person)-[e:likes]->(b:comment) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与名为陈思思的人有朋友关系，或者有朋友的朋友关系的账户",
        "output": "match(a:person where n.name=陈思思)-[e:friend]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取北区部门的医生姓名，以及他们创建的处方名称。",
        "output": "match(a:department where a.address = '北区')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为102的patient accept的prescription, 并将prescription有关的department的name的最小值赋值给prescription的weight, 接着查询prescription的weight小于102的prescription contain的medicine",
        "output": "match(a:patient where a.id = 102)-[e:accept]->(b:prescription) let b.weight = MIN((b:prescription)-[e2]-(c:department) => c.name) match(b:prescription where b.weight < 102)-[e3:contain]->(d:medicine) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与评论Comment_211有关系的电影的价值",
        "output": "match(a:comment where a.name='Comment_211')-[e]-(b:film) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(459,'small',647),(838,'small',505)作为请求表数据,属性分别为value,scale,peopleNumber, 以属性value作为相等条件,请帮我找出标签等于person的点,返回139个",
        "output": "with p as (select * from (VALUES(459,'small',647),(838,'small',505)) as t(value,scale,peopleNumber))MATCH (a:person WHERE a.value = p.value) RETURN a LIMIT 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height加188加168乘height的值",
        "output": "return (a.height + 188 + 168) * a.height group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被university浙江大学belong的city,和浙江大学belong的city",
        "output": "match(a:city)<-[e:belong]-(b:university where name = '浙江大学')-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查一下，武汉大学所在的城市被哪些国家包含。",
        "output": "match(a:university where a.name='武汉大学')-[e:belong]->(b:city)<-[e2:contain]-(c:country) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为张国强的点认识的person",
        "output": "match(a where a.name='张国强')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与国家有关系的城市节点,且城市节点的名字不等于天津,并返回这些城市的人数减人数的个数,以及城市的peopleNumber的最大值除7447的求和值",
        "output": "match(a:country)-[e]->(b:city where b.name <> '天津') return COUNT(b.peopleNumber - b.peopleNumber), SUM(MAX(b.peopleNumber) / 7447)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找书关联的书,返回其源点的价格对价格取余对22取余的值,以及目标点的字数减289的最大值",
        "output": "match(a:book)-[e:relates]->(b:book) return a.price % a.price % 22, MAX(b.wordCount - 289)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为知网和天涯论坛的,标签为论坛的点公共的朋友节点的名单",
        "output": "match(a:forum where a.name='知网')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='天涯论坛') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为放射科的点的,身高不为空,身高为空的伙伴,返回这些伙伴的id,和边的f1",
        "output": "match(a where a.name='放射科')-[e:partner]->(b where (b.height is not null) and (b.height is null)) return b.id,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对16取余的最小值",
        "output": "MIN(a.id % 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出pullRequest PR-394 belong的repository, 令pullRequest的name等于pullRequest的id加88,令repository的stars等于repository的id对62取余, 返回pullRequest的changeFileNumber, repository的id",
        "output": "match(a:pullRequest where a.name='PR-394')-[e:belong]->(b:repository) let a.name = a.id + 88,let b.stars = b.id % 62 return a.changeFileNumber,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被doctor郑雪creates的prescription",
        "output": "match(a:prescription)<-[e:creates]-(b:doctor where b.name='郑雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户王月发布的帖子，被其他用户点赞的数量。",
        "output": "match(a:user where a.name='王月')-[e:publish]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id,年龄分组,计算年龄对8取余的值",
        "output": "return a.age % 8 group by a.name, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'kY'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('kY') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与buyer徐思思存在关系，且与seller陈建聪存在关系的每个goods节点，返回它们的id,name和price。",
        "output": "match(a:buyer where a.name='徐思思')-[e]->(b:goods)<-[e2]-(c:seller where c.name='陈建聪') return b.id, b.name, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与名为'defaultName'和'defaultName1'的节点共同存款的类型为'account'的节点。",
        "output": "match(a where a.name = 'defaultName')-[e:deposit]->(b:account)<-[e2:deposit]-(c where c.name = 'defaultName1') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为student的点有selects关系的course,以及和这些course有belong关系的department,以及和这些department有has关系的teacher",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:teacher) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找86个与华为和腾讯都存在关系的公司或国家节点",
        "output": "match(a where a.name='华为')-[e]->(b:company | country)<-[e2]-(c where c.name='腾讯') return b limit 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于商品的所有点,并根据类别降序排列",
        "output": "match(a:goods) return a order by a.category desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,value, 数据为('微软',21,521),('谷歌',10,322), 以属性id作为相等条件,返回全部源点name不是谷歌且scale是large,目标点peopleNumber小于等于3530,且标签等于company_belong_city的边",
        "output": "with p as (select * from (VALUES('微软',21,521),('谷歌',10,322)) as t(name,id,value))MATCH (a WHERE a.id = p.id AND (a.name <> '谷歌' AND a.scale = 'large')) -[e:company_belong_city ]->(b WHERE b.peopleNumber <= 3530) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生郑国强属于的部门,和郑国强创造的处方",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '郑国强')-[e2:creates]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价值分组,计算id除id的平均值",
        "output": "return AVG(a.id / a.id) group by a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找商品的2度的环",
        "output": "match(a:goods)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出Comment_113所属的电影，以及与周科有喜欢的关系的评论。",
        "output": "match(a:comment where a.name = 'Comment_113')-[e:belong]->(b:film),(c:person where c.name = '周科')-[e2:likes]->(d:comment) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从person赵若涵出发,经过类型为观看的边,走3到5跳到达的电影点",
        "output": "match(a:person where a.name='赵若涵')-[e:watch]->{3,5}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为113的点的创建时间",
        "output": "match(a where a.id = 113) return a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与处方有关的节点，这些节点的权重除以277大于等于9,并返回这些节点的权重减权重对23取余的值，以及它们ID除以9的平均值。",
        "output": "match(a:prescription)-[e]->(b:prescription where b.weight / 277 >= 9) return b.weight - b.weight % 23, AVG(b.id / 9)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被买家咨询数量大于63的卖家,记为relationCount,再查询这些卖家咨询的商品",
        "output": "match(a:seller) let a.relationCount = MAX((a:seller)<-[e:consult]-(b:buyer) => b.id) match(a where a.relationCount > 63)-[e2:consult]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出与周国强有关联，且与Flink有使用的软件节点？需要返回这些软件的ID,周国强的姓名以及Flink的评分。",
        "output": "match(a:person where a.name='周国强')-[e:buy]->(b:software)<-[e2:uses]-(c:software where c.name='Flink') return a.name,b.id,c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person Sam存在knows关系,且与person周若涵存在pay关系的person节点，返回这些person的name,height,及person Sam的gender,及person周若涵的age",
        "output": "match(a:person where a.name='Sam')-[e:knows]->(b:person)<-[e2:pay]-(c:person where c.name='周若涵') return a.gender,b.name, b.height,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与电影院有关系的电影院节点,且电影院节点的名字不等于UME,并返回这些电影院的大小乘大小的和,以及电影院的id的平均值减id的值",
        "output": "match(a:cinema)-[e]->(b:cinema where b.name <> 'UME') return SUM(b.size * b.size), AVG(b.id) - b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为'呼吸科'的部门有直接或间接关系的所有医生",
        "output": "match(a:department where n.name=呼吸科)-[e:partner]->{1,2}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person赵若涵存在观看关系,且与标签其他存在拥有关系的电影节点，返回这些电影的价值,名字,类别,及person赵若涵的id,及标签其他的id",
        "output": "match(a:person where a.name='赵若涵')-[e:watch]->(b:film)<-[e2:has]-(c:tag where c.name='其他') return a.id,b.value, b.name, b.category,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为作家的点,返回193个",
        "output": "match(a:author) return a limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以93, 42作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(93, 42) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,name,id, 数据为(900,'西虹市首富',16),(893,'绿巨人',89),(97,'泰坦尼克号',80),(700,'绿巨人',0)的子查询作为输入表, 以属性id作为相等条件,请帮我查找名为赵思思的,id为84的伙伴,返回这些伙伴的字数,和边的权重",
        "output": "with p as (select * from (VALUES(900,'西虹市首富',16),(893,'绿巨人',89),(97,'泰坦尼克号',80),(700,'绿巨人',0)) as t(value,name,id))MATCH (a WHERE a.id = p.id AND (a.name = '赵思思')) -[e:partner ]->(b WHERE b.id = 84) RETURN b.wordCount, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取按id和gender分组的所有人的年龄，并按照年龄降序排列。",
        "output": "match(a:person) return a.age group by a.id, a.gender order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回8个与韩思琪和周建聪都存在关系的用户节点",
        "output": "match(a where a.name='韩思琪')-[e]->(b:user)<-[e2]-(c where c.name='周建聪') return b limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以647作为请求点id, 源点的id等于输入表id,请帮我查找名为王思琪和马伟的,label为医生的点公共的朋友节点的名单",
        "output": "with p as (select * from (VALUES(647)) as t(id)) MATCH (a:doctor WHERE a.id = p.id AND (a.name = '王思琪')) -[e:friend ]->(b) <-[e2:friend ]-(c:doctor WHERE c.name = '马伟') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为推特和知乎的,类型为论坛的点公共的朋友节点的名单",
        "output": "match(a:forum where a.name='推特')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='知乎') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和doctor韩月之间有diagnose关系的patient",
        "output": "match(a:doctor where a.name='韩月')-[e:diagnose]->(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以662,770,289,175,593作为请求点id, 以属性id作为相等条件,找出所有和prescription Prescription_359有3度或4度关系的user",
        "output": "with p as (select * from (VALUES(662),(770),(289),(175),(593)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_359')) -[e ]->{3,4}(b:user) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与王科存在喜欢关系的评论,评论与电影存在属于关系的点,返回这些点的名字",
        "output": "match(a where a.name = '王科')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回部门的三角的环,边标签等于拥有, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与仓库Mybatis有拥有关系的3跳以内的环",
        "output": "match(a:repository where name = 'Mybatis')-[e:has]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为中国科技大学的大学有直接或间接伙伴关系的所有部门",
        "output": "match(a:university where n.name=中国科技大学)-[e:partner]->{1,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person Amily投资的公司, 令person的规格等于公司的价值乘143的最大值,令person的名字等于公司的名字, 返回person的年龄, 公司的名字",
        "output": "match(a:person where a.name='Amily')-[e:invest]->(b:company) let a.scale = MAX(b.value * 143),let a.name = b.name return a.age,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找158个用户何若涵和何建国,共同的伙伴",
        "output": "match(a:user where a.name='何若涵')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='何建国') return b limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与北京大学有归属关系的城市，以及与天津有包含关系的大学，并将它们全部返回。",
        "output": "match(a:university where a.name = '北京大学')-[e:belong]->(b:city),(c:city where c.name = '天津')-[e2:contain]->(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以包含关系关联了城市杭州的国家",
        "output": "match(a:city where a.name='杭州')<-[e:contain]-(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找关联person周科认识的person,的person",
        "output": "match(a:person where name = '周科')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签为软件,边标签为使用的边,返回这些边的权重除权重的值,和targetId的最小值加129的和",
        "output": "match(a:software)-[e:uses]->(b) return e.weight / e.weight, SUM(MIN(e.targetId) + 129)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和book白夜行有关系的book,返回这些点的salary,gender,id",
        "output": "match(a:book where a.name='白夜行')-[e]-(b:book) return b.salary, b.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部reader以id,name分组的age, 根据age从大到小排序",
        "output": "match(a:reader) return a.age group by a.id, a.name order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与帖子Post_109有关联的论坛",
        "output": "match(a:post where a.name='Post_109')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表93,40, 源点的id等于输入表id,请帮我查找全部和论坛中国诗词论坛有3到5跳关系的person",
        "output": "with p as (select * from (VALUES(93),(40)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '中国诗词论坛')) -[e ]->{3,5}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出所有标签为loan的点",
        "output": "match(a:loan) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person周轩认识的person,以及喜欢这些person的person",
        "output": "match(a:person where name = '周轩')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出publish book孤城的publisher,和这些publisher publish的book",
        "output": "match(a:book where name = '孤城')<-[e:publish]-(b:publisher)-[e2:publish]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,身高,id分组,计算薪资乘薪资的和",
        "output": "return SUM(a.salary * a.salary) group by a.salary, a.height, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为张梅和陈科的点共同申请的,label为贷款的节点",
        "output": "match(a where a.name = '张梅')-[e:apply]->(b:loan)<-[e2:apply]-(c where c.name = '陈科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询所有源点label为person,边label为person_invest_company,并且满足条件weight除106.92除665大于79且timeStamp为2030年02月17日,f0在799到949之间的边",
        "output": "match(a:person)-[e:person_invest_company where e.weight / 106.92 / 665 > 79 and e.timeStamp = '2030-02-17' and (e.f0 BETWEEN 799 AND 949)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和post Post_218有关的tag,称为X,再请帮我查找和这个X有关联的其他forum,以及和X有关联的post",
        "output": "match(a:post where a.name = 'Post_218')-[e]-(b:tag), (b:tag)-[e2]-(c:forum),(b:tag)-[e3]-(d:post) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前44个权重不为空的贷款",
        "output": "match(a:loan where (a.weight is not null)) return a limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 马思思和郑国强之间存在什么联系？",
        "output": "match(a:buyer where a.name='马思思')-[e:look]->(b)<-[e2:look]-(c:buyer where c.name='郑国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回杭州与腾讯有合作关系的大学。",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]-(b:university)-[e2:belong]-(c:city where c.name='杭州') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person徐建聪有观看关系的电影,再请帮我查找以观看关系关联了徐建聪的电影",
        "output": "match(a:person where a.name = '徐建聪')-[e:watch]->(b:film),(a:person where a.name = '徐建聪')<-[e2:watch]-(c:film)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为韩若涵和杜若涵的点共同喜欢的,标签为评论的节点",
        "output": "match(a where a.name = '韩若涵')-[e:likes]->(b:comment)<-[e2:likes]-(c where c.name = '杜若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person以名字,年龄分组的性别, 根据性别从大到小排序",
        "output": "match(a:person) return a.gender group by a.name, a.age order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person马建国之间有invest关系的company",
        "output": "match(a:person where a.name='马建国')-[e:invest]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age分组,计算age减63的值",
        "output": "return a.age - 63 group by a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询同时与蚂蚁集团和孙科有关联的人，返回他们的年龄和姓名。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e]->(b:person)<-[e2]-(c:person where c.name='孙科') return b.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被buyer creates数量大于86的orders,记为relationCount,再查询这些orders creates的orders",
        "output": "match(a:orders) let a.relationCount = MAX((a:orders)<-[e:creates]-(b:buyer) => b.id) match(a where a.relationCount > 86)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和作家黄科之间有认识关系的作家",
        "output": "match(a:author where a.name='黄科')-[e:knows]->(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为韩思思的,价值为952且名字是星际穿越的伙伴,返回这些伙伴的名字,和边的权重,源点id",
        "output": "match(a where a.name='韩思思')-[e:partner]->(b where b.value = 952 and b.name = '星际穿越') return b.name,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询和韩建聪有恋人关系的对象，以及和张月有恋人关系的对象，返回两者。",
        "output": "match(a:person where a.name = '韩建聪')-[e:lover]->(b:person),(c:person where c.name = '张月')-[e2:lover]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑思琪存在咨询关系的卖家,卖家与买家存在回答关系的点,返回这些点的身高",
        "output": "match(a where a.name = '郑思琪')-[e:consult]->(b:seller)-[e2:ask]->(c:buyer) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出23个名为何思思的点喜欢的类型为书的节点,且节点id小于等于84或id不为空",
        "output": "match(a where a.name='何思思')-[e:likes]->(b:book where b.id <= 84 or (b.id is not null)) return b limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为2的点的gender,name,salary",
        "output": "match(a where a.id = '2') return a.gender, a.name, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与赵建聪有关联的apply贷款，然后找出与赵建聪有关联的own账户",
        "output": "match(a:person where a.name = '赵建聪')-[e:apply]->(b:loan),(a:person where a.name = '赵建聪')<-[e2:own]-(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回读者的三角的环,边label为喜欢, 并返回这些点的id",
        "output": "match(a:reader)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person节点相关的person节点，并按性别和年龄进行分组，然后返回性别和年龄。",
        "output": "match(a:person)-[e:colleague]-(b:person) return b.gender, b.age group by b.gender, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李国强存在诊断关系的病人,病人与处方存在接受关系的点,返回这些点的创建时间",
        "output": "match(a where a.name = '李国强')-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出以喜欢关系关联了person王科的person",
        "output": "match(a:person where a.name='王科')<-[e:person_likes_person]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出部门计算机学院拥有的学生节点选择的课程",
        "output": "match(a:department where a.name = '计算机学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表772,763,411, 源点的id等于输入表id,返回所有名为孙轩的点认识的person",
        "output": "with p as (select * from (VALUES(772),(763),(411)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '孙轩')) -[e:knows ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询所有标签等于卖家的点",
        "output": "match(a:seller) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供所有包含在巴黎的公司，以及所有包含在俄罗斯的城市，并返回它们。",
        "output": "match(a:city where a.name = '巴黎')-[e:contain]->(b:company),(c:country where c.name = '俄罗斯')-[e2:contain]->(d:city) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表619, 源点的id等于输入表id,给出和company有关联的loan节点,并根据其amount,weight分组,返回amount,weight,以及id除87的最大值",
        "output": "with p as (select * from (VALUES(619)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_apply_loan ]-(b:loan) RETURN b.amount, b.weight, MAX(b.id / 87) GROUP BY b.amount, b.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找评论属于的电影, 令电影的价值的值等于上映电影的电影院的大小的平均值, 再查找电影拥有的标签",
        "output": "match(a:comment)-[e:belong]->(b:film) let b.value = AVG((b:film)<-[e2:releases]-(c:cinema) => c.size) match(b:film)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被作家陈建聪撰写的书,和陈建聪撰写的书",
        "output": "match(a:book)<-[e:write]-(b:author where name = '陈建聪')-[e2:write]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id,value分组,计算level除2的最小值",
        "output": "return MIN(a.level / 2) group by a.name, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与周科病人有关的医嘱节点，且与生理盐水有关。",
        "output": "match(a:patient where a.name='周科')-[e:accept]-(b:prescription)-[e2:contain]-(c:medicine where c.name='生理盐水') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出国家日本包含的城市,以及属于这些城市的大学",
        "output": "match(a:country where name = '日本')-[e:contain]->(b:city)<-[e2:belong]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以12, 'DE', 'AB'作为输入,返回运算结果",
        "output": "Call SSSP(12, 'DE', 'AB') yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按身高、薪资和年龄对person进行分组，然后按照薪资从低到高对结果进行排序并返回所有人的薪资。",
        "output": "match(a:person) return a.salary group by a.height, a.salary, a.age order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出点中类型为person的，按名字降序排序。",
        "output": "match(a:person) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与周国强和黄雪都有关联的所有46个人。",
        "output": "match(a where a.name='周国强')-[e]->(b:person)<-[e2]-(c where c.name='黄雪') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点类型是post,边类型是has,且满足条件f1等于196.59的边",
        "output": "match(a:post)-[e:has where e.f1 = 196.59]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));返回标签为company的所有点,并根据name从大到小排列",
        "output": "match(a:company) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为吴建聪的点的,星数不是335的朋友,返回这些朋友的星数,和边的目标点id,f1,源点id",
        "output": "match(a where a.name='吴建聪')-[e:friend]->(b where b.stars <> 335) return b.stars,e.targetId, e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,年龄,id分组,计算salary的最大值加1550的值",
        "output": "return MAX(a.salary) + 1550 group by a.salary, a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为华中科技大学的,大小不等于90或大小加56小于等于74的相关者,返回这些相关者的id,和边的源点id,权重,f1",
        "output": "match(a where a.name='华中科技大学')-[e:relation]->(b where b.size <> 90 or b.size + 56 <= 74) return b.id,e.srcId, e.weight, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签为company的点有cooperate关系的university,并且和这些university有cooperate关系的company,并且和这些company有cooperate关系的university",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company)-[e3:cooperate]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出买家马月创建的订单，返回订单包含的商品价值、类别和ID。",
        "output": "match(a:buyer where name = '马月')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.value, c.category, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person点有knows关系的person节点,且边满足条件targetId是49,目标person节点age在64到74之间",
        "output": "match(a:person)-[e:knows where e.targetId = 49]->(b:person where (b.age BETWEEN 64 AND 74)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回吴国强医生所在的部门，或者返回该部门拥有的医生性别。",
        "output": "match(a:doctor where name = '吴国强')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询处方Prescription_250的标签为朋友的边,并根据f1降序排列,返回40个",
        "output": "match(a:prescription where a.name = 'Prescription_250')-[e:friend]->(b) return b order by e.f1 desc limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询92个名为张月的点knows的类型是person的节点,且其age大于67,name不等于黄梅",
        "output": "match(a where a.name='张月')-[e:knows]->(b:person where b.age > 67 and b.name <> '黄梅') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前167个满足条件name等于华为的company",
        "output": "match(a:company where a.name = '华为') return a limit 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出城市东京属于的国家, 令城市的人数等于国家的价值的最大值, 返回城市的价值, 国家的面积",
        "output": "match(a:city where a.name='东京')-[e:belong]->(b:country) let a.peopleNumber = MAX(b.value) return a.value,b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表22,199,765,305,91, 源点的id等于输入表id,给出与名为杭州和巴黎的点共同属于的,类型为国家的节点",
        "output": "with p as (select * from (VALUES(22),(199),(765),(305),(91)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '杭州')) -[e:city_belong_country ]->(b:country) <-[e2:city_belong_country ]-(c WHERE c.name = '巴黎') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部标签等于company或loan或person的点",
        "output": "match(a:company | loan | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person有关系的person节点,且person节点的salary小于7609,并返回这些person的age除87除9207减4215的值,以及person的salary乘salary的最小值",
        "output": "match(a:person)-[e]->(b:person where b.salary < 7609) return b.age / 87 / 9207 - 4215, MIN(b.salary * b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为合并请求的点,返回117个",
        "output": "match(a:pullRequest) return a limit 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,年龄分组,计算身高乘188乘156的最小值",
        "output": "return MIN(a.height * 188 * 156) group by a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为Prescription_479的点contain的medicine",
        "output": "match(a where a.name='Prescription_479')-[e:contain]->(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回的部门包含关联的药品，以及包含这些药品的其他处方。",
        "output": "match(a:department where a.id = '70')-[e]-(b:medicine)<-[e2:contain]-(c:prescription) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有从prescription源点到medicine目标点，且类型为contain的边。",
        "output": "match(a:prescription)-[e:contain]->(b:medicine) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回用户吴建国喜欢的帖子,被其他论坛包含的数量",
        "output": "match(a:user where a.name='吴建国')-[e:likes]->(b:post)<-[e2:contain]-(c:forum) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为issue,名为ISSUE-432的点,返回这些点的id",
        "output": "match(a:issue where a.name = 'ISSUE-432') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,area,name, 数据为(79,29737,'北京'),(37,24777,'伦敦')的子查询作为输入表, 以属性area作为相等条件,查询label为company的所有点,并根据name升序排列",
        "output": "with p as (select * from (VALUES(79,29737,'北京'),(37,24777,'伦敦')) as t(id,area,name))MATCH (a:company WHERE a.area = p.area) RETURN a ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "price的平均值乘114乘756对228取余除225除87除92的和",
        "output": "SUM(AVG(a.price) * 114 * 756 % 228 / 225 / 87 / 92)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person徐若涵有关系的person的id",
        "output": "match(a:person where a.name='徐若涵')-[e]-(b:person) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找杜国强所有的点创造的处方和他所在的部门，并将两者一起返回。",
        "output": "match(a where a.name = '杜国强')-[e:creates]->(b:prescription),(a where a.name = '杜国强')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Spark的软件或person,以及与其有关的公司,并返回Spark的id和这些公司的名字",
        "output": "match(a:software | person where name = 'Spark')-[e]-(b:company) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,salary,age, 数据为(188,5377,71), 源点的age等于输入表age,请帮我查找全部源点label为person,边label为person_knows_person,且f0的数量为140的边",
        "output": "with p as (select * from (VALUES(188,5377,71)) as t(height,salary,age))MATCH (a:person WHERE a.age = p.age) -[e:person_knows_person WHERE COUNT(e.f0) = 140 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,height分组,计算age对age取余的值",
        "output": "return a.age % a.age group by a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与马宏和中国军事论坛有关联的人，并返回他们的年龄、工资和 ID。",
        "output": "match(a:person where a.name='马宏')-[e]->(b:person)<-[e2]-(c:forum where c.name='中国军事论坛') return b.age, b.salary, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是软件的全部点,并根据语言从大到小排列",
        "output": "match(a:software) return a order by a.lang desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询黄建聪发布的帖子，其他用户喜欢数量的信息。",
        "output": "match(a:user where a.name='黄建聪')-[e:publish]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找repay account LX001 repay的loan,的account",
        "output": "match(a:account where name = 'LX001')-[e:repay]->(b:loan)<-[e2:repay]-(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到与郑强和李轩有关的所有课程节点，共133个。",
        "output": "match(a where a.name='郑强')-[e]->(b:course)<-[e2]-(c where c.name='李轩') return b limit 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有账户名为'TheShy'的最后登录时间",
        "output": "match(a:account where a.name = 'TheShy') return a.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,srcId,targetId, 数据为(131.26,164,181),(110.66,34,162), 源点的srcId等于输入表srcId,找出与名为赵伟和王建国的点共同knows的,类型为author的节点",
        "output": "with p as (select * from (VALUES(131.26,164,181),(110.66,34,162)) as t(weight,srcId,targetId))MATCH (a WHERE a.srcId = p.srcId AND (a.name = '赵伟')) -[e:author_knows_author ]->(b:author) <-[e2:author_knows_author ]-(c WHERE c.name = '王建国') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和买家点有查看关系的商品节点,且边满足条件目标点id小于等于38,目标商品节点满足条件名字等于手机",
        "output": "match(a:buyer)-[e:look where e.targetId <= 38]->(b:goods where b.name = '手机') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找和person杜轩有关的帖子,称为X,再查找和这个X有关联的其他帖子,以及和X有关联的标签",
        "output": "match(a:person where a.name = '杜轩')-[e]-(b:post), (b:post)-[e2]-(c:post),(b:post)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表16, 以属性id作为相等条件,请帮我查找和person吴强有person_parent_person关系的person,以及和person何雪有person_lover_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(16)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴强')) -[e:person_parent_person ]->(b:person) , (c:person WHERE c.name = '何雪') -[e2:person_lover_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为TheShy和Zeus的点共同转账的,label为账号的节点",
        "output": "match(a where a.name = 'TheShy')-[e:transfer]->(b:account)<-[e2:transfer]-(c where c.name = 'Zeus') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签等于用户,边标签等于喜欢的边,返回这些边的目标点id加175的值,和源点id除199的求和值",
        "output": "match(a:user)-[e:likes]->(b) return e.targetId + 175, SUM(e.srcId / 199)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被订单包含数量大于168的商品,记为relationCount,再查询这些商品包含的买家",
        "output": "match(a:goods) let a.relationCount = SUM((a:goods)<-[e:contain]-(b:orders) => b.id) match(a where a.relationCount > 168)-[e2:contain]->(c:buyer) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和film少年足球有关系的comment或tag,返回这些点的createTime,name",
        "output": "match(a:film where a.name='少年足球')-[e]-(b:comment | tag) return b.createTime, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部作家以名字分组的薪资, 根据薪资从小到大排序",
        "output": "match(a:author) return a.salary group by a.name order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找名为马轩的点拥有的全部商品,并对这些点的名字进行求和",
        "output": "match(a where a.name='马轩')-[e:seller_has_goods]->(b:goods) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为计算机体系结构的点属于的部门",
        "output": "match(a where a.name='计算机体系结构')-[e:belong]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找91个等级大于等于28,价值为空,价值为空的大学,根据价值从小到大排列",
        "output": "match(a:university where a.level >= 28 and (a.value is null) and (a.value is null)) return a order by a.value asc limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有黄科的点创造的订单,然后找出黄科被回答的卖家,一起返回",
        "output": "match(a where a.name = '黄科')-[e:creates]->(b:orders),(a where a.name = '黄科')<-[e2:ask]-(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有country以area,value,peopleNumber分组的value, 根据value升序排序",
        "output": "match(a:country) return a.value group by a.area, a.value, a.peopleNumber order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以922,682作为请求点id, 以属性id作为相等条件,帮我查询所有和person点有own关系的account节点,且边满足条件targetId在55到138之间,目标account节点满足条件lastLoginTime等于2012年03月24日",
        "output": "with p as (select * from (VALUES(922),(682)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_own_account WHERE e.targetId BETWEEN ASYMMETRIC 55 AND 138 ]->(b:account WHERE b.lastLoginTime = '2012-03-24') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部编辑以年龄,性别,id分组的年龄, 根据年龄降序排序",
        "output": "match(a:publisher) return a.age group by a.age, a.gender, a.id order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为Hadoop的软件有伙伴关系,或有伙伴的伙伴关系的软件",
        "output": "match(a:software where n.name=Hadoop)-[e:partner]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算value除value的最小值",
        "output": "return MIN(a.value / a.value) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与大学有关联的点，再找出与这些点有关联的部门、教师，最后找出与这些部门、教师有关联的课程。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher)-[e3:teach]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与孙轩和陈梅有关联的人，并返回他们的ID、薪资和年龄。",
        "output": "match(a:person where a.name='孙轩')-[e]->(b:person)<-[e2]-(c:person where c.name='陈梅') return b.id, b.salary, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出马宏和孙建国这两个人的点对点联系人列表，他们的标签是'person'。",
        "output": "match(a:person where a.name='马宏')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='孙建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(35,'male',3563),(58,'famale',7383)作为请求表数据,属性分别为age,gender,salary, 源点的gender等于输入表gender,给出标签等于person的全部点,并根据年龄从大到小排列",
        "output": "with p as (select * from (VALUES(35,'male',3563),(58,'famale',7383)) as t(age,gender,salary))MATCH (a:person WHERE a.gender = p.gender) RETURN a ORDER BY a.age DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Amily的点invest的全部company,并对这些company的id进行求和",
        "output": "match(a where a.name='Amily')-[e:invest]->(b:company) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找合作大学武汉大学的公司,和这些公司属于的城市",
        "output": "match(a:university where name = '武汉大学')<-[e:cooperate]-(b:company)-[e2:belong]->(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与账号XXD有转账关系的账号，以及与账号LX001有还款关系的贷款。",
        "output": "match(a:account where a.name = 'XXD')-[e:transfer]->(b:account),(c:account where c.name = 'LX001')-[e2:repay]->(d:loan) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和公司美团有关的软件,再帮我查询和美团创造的其他软件,返回它们",
        "output": "match(a:company where a.name = '美团')-[e]-(b:software), (a:company)-[e2:creates]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有作家的薪资除6082的值",
        "output": "match(a:author) return a.salary / 6082",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和城市深圳有关的公司,再找出和深圳属于的其他国家,返回它们",
        "output": "match(a:city where a.name = '深圳')-[e]-(b:company), (a:city)-[e2:belong]->(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与被标记为'person'的个体有关联的所有'person'，以及与这些个体有关联的所有'person'，以及与这些个体有关联的所有'person'。",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:family]->(c:person)-[e3:family]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与读者孙强和Jack都存在喜欢关系的点",
        "output": "match(a:reader where a.name='孙强')-[e:likes]->(b)<-[e2:likes]-(c:reader where c.name='Jack') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与用户陈红有关,且与标签悬疑有关系的帖子节点",
        "output": "match(a:user where a.name='陈红')-[e:likes]-(b:post)-[e2:has]-(c:tag where c.name='悬疑') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(67,396,'物理学院'),(7,446,'文学院'),(22,565,'生物学院'),(79,480,'体育学院')作为请求表数据,属性分别为id,value,name, 以属性value作为相等条件,查找和部门有关联的学生节点,并根据其性别,名字分组,返回性别,名字,以及薪资减6945的求和值",
        "output": "with p as (select * from (VALUES(67,396,'物理学院'),(7,446,'文学院'),(22,565,'生物学院'),(79,480,'体育学院')) as t(id,value,name))MATCH (a:department WHERE a.value = p.value) -[e:department_has_student ]-(b:student) RETURN b.gender, b.name, SUM(b.salary - 6945) GROUP BY b.gender, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签为大学,边标签为属于,且满足条件目标点id大于等于144或目标点id为空,且目标点id不等于56的边",
        "output": "match(a:university)-[e:belong where (e.targetId >= 144 or (e.targetId is null)) and e.targetId <> 56]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用KHOP函数,以74作为输入,返回运算结果",
        "output": "Call KHOP(74) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别,id分组,计算薪资加6111的最大值",
        "output": "return MAX(a.salary + 6111) group by a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为person,名为吴轩的点,返回这些点的id",
        "output": "match(a:person where a.name = '吴轩') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的id的平均值加id的和",
        "output": "match(a:company) return SUM(AVG(a.id) + a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出128个名为孙思思的点选择的标签等于课程的节点,且其课时不是82或学分小于1",
        "output": "match(a where a.name='孙思思')-[e:selects]->(b:course where b.courseHour <> 82 or b.credit < 1) return b limit 128",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询41个salary大于57或height大于等于157或name等于韩红的person,根据gender从大到小排列",
        "output": "match(a:person where a.salary > 57 or a.height >= 157 or a.name = '韩红') return a order by a.gender desc limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师的2度以内的环",
        "output": "match(a:teacher)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到张轩和张雪共同写的标签为'book'的节点。",
        "output": "match(a where a.name = '张轩')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '张雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为赵国强的,创建时间为2009年01月28日或创建时间等于2010年04月14日的伙伴,返回这些伙伴的id,和边的f0",
        "output": "match(a where a.name='赵国强')-[e:partner]->(b where b.createTime = '2009-01-28' or b.createTime = '2010-04-14') return b.id,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是orders的点",
        "output": "match(a:orders) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出编辑发布的书,返回其源点的年龄除14对151取余的平均值,以及目标点的id对67取余的平均值",
        "output": "match(a:publisher)-[e:publish]->(b:book) return AVG(a.age / 14 % 151), AVG(b.id % 67)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id大于63或id小于等于7的节点",
        "output": "match(a where a.id > 63 or a.id <= 7) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与读者有关系的作家节点,且作家节点的性别为famale,并返回这些作家的id的求和值减87的最大值,以及作家的age的最大值乘71的求和值",
        "output": "match(a:reader)-[e]->(b:author where b.gender = 'famale') return MAX(SUM(b.id) - 87), SUM(MAX(b.age) * 71)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(35,'科幻',771),(36,'喜剧',88),(59,'喜剧',497),(17,'其他',75)的子查询作为输入表, 源点的name等于输入表name,返回99个名为孙建国的点喜欢的label为评论的节点,且节点创建时间不等于2002年03月23日或id在19到35之间",
        "output": "with p as (select * from (VALUES(35,'科幻',771),(36,'喜剧',88),(59,'喜剧',497),(17,'其他',75)) as t(id,name,value))MATCH (a WHERE a.name = p.name AND (a.name = '孙建国')) -[e:person_likes_comment ]->(b:comment WHERE b.createTime <> '2002-03-23' OR b.id BETWEEN ASYMMETRIC 19 AND 35) RETURN b LIMIT 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被forum中国军事论坛contain的user",
        "output": "match(a:user)<-[e:contain]-(b:forum where b.name='中国军事论坛') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找到与指定 person 关联的其他 person，以及这些 person 的共同认识者",
        "output": "match(a:person where a.id = '102')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为徐思思的节点喜欢的person",
        "output": "match(a where a.name='徐思思')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与王宏存在选择关系的课程,课程与部门存在属于关系的点,返回这些点的名字",
        "output": "match(a where a.name = '王宏')-[e:selects]->(b:course)-[e2:belong]->(c:department) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影的三角的环,边类型为拥有, 并返回这些点的id",
        "output": "match(a:film)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表474, 源点的id等于输入表id,给出标签为department的点,返回159个",
        "output": "with p as (select * from (VALUES(474)) as t(id)) MATCH (a:department WHERE a.id = p.id) RETURN a LIMIT 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为89的软件使用的软件, 并将软件有关的person的薪资的个数赋值给软件的星数, 接着查询软件的星数小于89的软件使用的软件",
        "output": "match(a:software where a.id = 89)-[e:uses]->(b:software) let b.stars = COUNT((b:software)-[e2]-(c:person) => c.salary) match(b:software where b.stars < 89)-[e3:uses]->(d:software) return b.stars, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出李强喜欢的书，返回这本书的ID、名字和字数。",
        "output": "match(a:reader where name = '李强')-[e:likes]->(b:book)-[e2:knows]->(c:book) return c.wordCount, c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减value的平均值",
        "output": "AVG(a.value - a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找观看电影建国大业的person,和这些person喜欢的评论",
        "output": "match(a:film where name = '建国大业')<-[e:watch]-(b:person)-[e2:likes]->(c:comment) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询包含公司阿里的城市,和这些城市包含的公司",
        "output": "match(a:company where name = '阿里')<-[e:contain]-(b:city)-[e2:contain]->(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找名叫何科的读者。",
        "output": "match(a:reader where a.name = '何科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据scale,peopleNumber,id分组,计算peopleNumber除838的值",
        "output": "return a.peopleNumber / 838 group by a.scale, a.peopleNumber, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点类型为person、边类型为parent的边，返回这些边中f0减去746的最大值以及targetId减去8的结果。",
        "output": "match(a:person)-[e:parent]->(b) return MAX(e.f0 - 746), e.targetId - 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与武汉和杭州都有联系的175个国家。",
        "output": "match(a where a.name='武汉')-[e]->(b:country)<-[e2]-(c where c.name='杭州') return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person黄若涵创造的评论, 令评论的名字等于评论的字数除614,令评论的身高等于person的薪资,令评论的年龄等于person的年龄的最大值, 返回person的名字, 评论的名字",
        "output": "match(a:person where a.name='黄若涵')-[e:creates]->(b:comment) let b.name = b.wordCount / 614,let b.height = a.salary,let b.age = MAX(a.age) return a.name,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有标签为账号或贷款或公司的点",
        "output": "match(a:account | loan | company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查找university以name,level,value分组的value, 根据value降序排序",
        "output": "match(a:university) return a.value group by a.name, a.level, a.value order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与事项ISSUE-444有关系的仓库的id",
        "output": "match(a:issue where a.name='ISSUE-444')-[e]-(b:repository) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表863,883, 源点的id等于输入表id,找出id为12的person有关的公司的伙伴, 再找出和公司有关系的伙伴",
        "output": "with p as (select * from (VALUES(863),(883)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (id = '12')) -[e ]-(b:company) -[e2:partner ]->(c) , (b:company) -[e3:partner ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出73个和标签为user的点有likes关系的repository,且和这些repository有has关系的pullRequest",
        "output": "match(a:user)-[e:likes]->(b:repository)-[e2:has]->(c:pullRequest) return c limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,性别,名字分组,计算薪资对5415取余乘6217的最大值",
        "output": "return MAX(a.salary % 5415 * 6217) group by a.height, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(6736,35,'吴科'),(7226,90,'周思思')作为请求表数据,属性分别为salary,age,name, 以属性name作为相等条件,请帮我找出前175个满足条件名字不是桌子,id大于等于6的商品",
        "output": "with p as (select * from (VALUES(6736,35,'吴科'),(7226,90,'周思思')) as t(salary,age,name))MATCH (a:goods WHERE a.name = p.name AND (a.name <> '桌子' AND a.id >= 6)) RETURN a LIMIT 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出user publish的post, 令post的lang的值等于publishpost的user的gender的平均值, 再查找post has的tag",
        "output": "match(a:user)-[e:publish]->(b:post) let b.lang = AVG((b:post)<-[e2:publish]-(c:user) => c.gender) match(b:post)-[e3:has]->(d:tag) return b.lang, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有年龄小于40的用户发布的帖子以及它们所包含的标签。",
        "output": "match(a:user where a.age < 40)-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为52的点的薪资,性别,身高",
        "output": "match(a where a.id = 52) return a.salary, a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为杜月和赵若涵的,标签等于doctor的点公共的friend节点的名单",
        "output": "match(a:doctor where a.name='杜月')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='赵若涵') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与Prescription_477有包含关系的药品，以及与Prescription_341有包含关系的药品，并返回它们。",
        "output": "match(a:prescription where a.name = 'Prescription_477')-[e:contain]->(b:medicine),(c:prescription where c.name = 'Prescription_341')-[e2:contain]->(d:medicine) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表161, 源点的id等于输入表id,给出user的relation,或其relation的relation",
        "output": "with p as (select * from (VALUES(161)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:relation ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和名为陈建国的user有friend关系,或有friend的friend关系的repository",
        "output": "match(a:user where n.name=陈建国)-[e:friend]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询account XXD repay的loan,返回loan deposit的account的value对449取余的值",
        "output": "match(a:account where name = 'XXD')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.value % 449",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以399,916作为请求点id, 源点的id等于输入表id,返回77个user何思思和周梅,共同的relation",
        "output": "with p as (select * from (VALUES(399),(916)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '何思思')) -[e:relation ]->(b) <-[e2:relation ]-(c:user WHERE c.name = '周梅') RETURN b LIMIT 77",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person周月有关的person,称为X,再查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '周月')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出账号Light的朋友,的weight的平均值对179.52取余的和",
        "output": "match(a:account where a.name= 'Light')-[e:friend]->(b) return SUM(AVG(e.weight) % 179.52)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,gender,age, 数据为(199,'male',18),(198,'male',36)的子查询作为输入表, 以属性height作为相等条件,查询全部和名为计算机学院的部门有朋友关系,或有朋友的朋友关系的教师",
        "output": "with p as (select * from (VALUES(199,'male',18),(198,'male',36)) as t(height,gender,age))MATCH (a:department WHERE a.height = p.height AND (n.name = 计算机学院)) -[e:friend ]->{1,2}(b:teacher) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为120的person支付的person, 并将person有关的person的名字的最大值赋值给person(b)的id, 接着查询person(b)的id小于120的person支付的person",
        "output": "match(a:person where a.id = 120)-[e:pay]->(b:person) let b.id = MAX((b:person)-[e2]-(c:person) => c.name) match(b:person where b.id < 120)-[e3:pay]->(d:person) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询年龄大于等于1的person购买的软件的名称,以及这些软件 使用的软件的名称",
        "output": "match(a:person where a.age >= 1)-[e:buy]->(b:software)-[e2:uses]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person likes数量大于30的person,记为relationCount,再查询这些person likes的person",
        "output": "match(a:person) let a.relationCount = COUNT((a:person)<-[e:likes]-(b:person) => b.id) match(a where a.relationCount > 30)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找124个forum中国诗词论坛和推特,共同的relation",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:relation]->(b)<-[e2:relation]-(c:forum where c.name='推特') return b limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找user李思思的relation的partner的partner",
        "output": "match(a:user where a.name='李思思')-[e:relation]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与ID为30的评论相关的人的朋友，以及与该人相关的其他人员。",
        "output": "match(a:comment where id = '30')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和用户杜科有发布关系的帖子,再找出以喜欢关系关联了杜科的帖子",
        "output": "match(a:user where a.name = '杜科')-[e:publish]->(b:post),(a:user where a.name = '杜科')<-[e2:likes]-(c:post)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表977,288,463, 以属性id作为相等条件,请帮我查找名为吴梅的,peopleNumber不等于766且id小于260的friend,返回这些friend的id,和边的f0",
        "output": "with p as (select * from (VALUES(977),(288),(463)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴梅')) -[e:friend ]->(b WHERE b.peopleNumber <> 766 AND b.id < 260) RETURN b.id, e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取Geaflow123repay贷款账户的存款账户信息。",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为公司的全部点,并根据规格升序排列",
        "output": "match(a:company) return a order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出那些既不是耳鼻喉科医生也不是在C栋办公的医生的名字，以及他们诊断过的病人名字。",
        "output": "match(a:department where a.name <> '耳鼻喉科' or a.address = 'C栋')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与医生何国强和李国强都存在诊断关系的点",
        "output": "match(a:doctor where a.name='何国强')-[e:diagnose]->(b)<-[e2:diagnose]-(c:doctor where c.name='李国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询查看订单Order_184包含的商品,的买家",
        "output": "match(a:orders where name = 'Order_184')-[e:contain]->(b:goods)<-[e2:look]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点name不是Geaflow,id大于59,边标签为uses,且满足条件f0不是821且f1等于false,或weight小于178.88的边,返回这些边的weight除weight的平均值",
        "output": "match(a where a.name <> 'Geaflow' and a.id > 59)-[e:uses where (e.f0 <> 821 and e.f1 = false) or e.weight < 178.88]->(b) return AVG(e.weight / e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出订单Order_115的伙伴,的f0乘f0的值",
        "output": "match(a:orders where a.name= 'Order_115')-[e:partner]->(b) return e.f0 * e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为大学物理和程序设计的点共同属于的,类型是部门的节点",
        "output": "match(a where a.name = '大学物理')-[e:belong]->(b:department)<-[e2:belong]-(c where c.name = '程序设计') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为黄思思和陈梅的,类型是person的点公共的friend节点的名单",
        "output": "match(a:person where a.name='黄思思')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈梅') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person何国强关联的person,以及认识这些person的person, 令person(b)的薪资等于person(a)的名字, 返回person(a)的id,person(b)的名字,person(c)的薪资",
        "output": "match(a:person where name = '何国强')-[e:relates]->(b:person)<-[e2:knows]-(c:person) let b.salary = a.name return a.id,b.name,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除199的数量",
        "output": "COUNT(a.height / 199)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight对weight取余的值",
        "output": "a.weight % a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询部门文学院拥有的教师,以及拥有这些教师的部门",
        "output": "match(a:department where name = '文学院')-[e:has]->(b:teacher)<-[e2:has]-(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出徐雪和陈思琪共同的伙伴节点，这些节点的标签与用户相等。",
        "output": "match(a:user where a.name='徐雪')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='陈思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找医生李伟和药品医疗酒精之间的关联，并返回这些关联的处方节点信息，包括它们的权重、ID、医生李伟的年龄以及药品医疗酒精的ID。",
        "output": "match(a:doctor where a.name='李伟')-[e:creates]->(b:prescription)<-[e2:contain]-(c:medicine where c.name='医疗酒精') return a.age,b.weight, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Mybatis的点的,创建时间不等于1997年05月09日的相关者,返回这些相关者的名字,和边的源点id",
        "output": "match(a where a.name='Mybatis')-[e:relation]->(b where b.createTime <> '1997-05-09') return b.name,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person王若涵有关系的person,返回这些点的name",
        "output": "match(a:person where a.name='王若涵')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person周强支付的person,以及支付这些person的person, 令person(a)的年龄等于person(b)的身高的求和值,令person(b)的id等于person(a)的id,令person(b)的名字等于person(a)的薪资除1430, 返回person(a)的身高,person(b)的性别,person(c)的名字",
        "output": "match(a:person where name = '周强')-[e:pay]->(b:person)<-[e2:pay]-(c:person) let a.age = SUM(b.height),let b.id = a.id,let b.name = a.salary / 1430 return a.height,b.gender,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含在美国的点和属于美国的城市，然后将它们一起返回。",
        "output": "match(a where a.name = '美国')-[e:contain]->(b:city),(a where a.name = '美国')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表686,48,578,484, 以属性id作为相等条件,给出与杜思琪存在person_knows_person关系的person,person与person存在person_knows_person关系的点,返回这些点的age",
        "output": "with p as (select * from (VALUES(686),(48),(578),(484)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '杜思琪')) -[e:person_knows_person ]->(b:person) -[e2:person_knows_person ]->(c:person) RETURN c.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被评论Comment_141属于的电影",
        "output": "match(a:film)<-[e:belong]-(b:comment where b.name='Comment_141') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询186个名为徐梅的点支付的标签为person的节点,且节点薪资为空",
        "output": "match(a where a.name='徐梅')-[e:pay]->(b:person where (b.salary is null)) return b limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有从帖子出发，到标签结束，并且拥有这条边的节点",
        "output": "match(a:post)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与订单Order_422有关系的买家的身高",
        "output": "match(a:orders where a.name='Order_422')-[e]-(b:buyer) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person韩月有关,且与person徐月有关系的person节点",
        "output": "match(a:person where a.name='韩月')-[e:family]-(b:person)-[e2:colleague]-(c:person where c.name='徐月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我按level和name对university进行分组，然后按照id升序排序并获取每个组的id",
        "output": "match(a:university) return a.id group by a.level, a.name order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为buyer且名为杜建国和陈建国的朋友的交集。",
        "output": "match(a:buyer where a.name='杜建国')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='陈建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与书和苹果都有关联的14个商品节点。",
        "output": "match(a where a.name='书')-[e]->(b:goods)<-[e2]-(c where c.name='苹果') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为90的教师教的课程, 并将课程有关的部门的大小的平均值赋值给课程的价值, 接着查询课程的价值小于90的课程属于的部门",
        "output": "match(a:teacher where a.id = 90)-[e:teach]->(b:course) let b.value = AVG((b:course)-[e2]-(c:department) => c.size) match(b:course where b.value < 90)-[e3:belong]->(d:department) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和company腾讯有关的university,称为X,再请帮我查找和这个X有关联的其他university,以及和X有关联的country",
        "output": "match(a:company where a.name = '腾讯')-[e]-(b:university), (b:university)-[e2]-(c:university),(b:university)-[e3]-(d:country) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是公司或软件的点",
        "output": "match(a:company | software) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('天涯论坛',136,9)作为请求表数据,属性分别为name,peopleNumber,id, 源点的id等于输入表id,给出178个名为吴宏的点publish的标签等于post的节点,且其lang等于Japanese或name为Post_123",
        "output": "with p as (select * from (VALUES('天涯论坛',136,9)) as t(name,peopleNumber,id))MATCH (a WHERE a.id = p.id AND (a.name = '吴宏')) -[e:user_publish_post ]->(b:post WHERE b.lang = 'Japanese' OR b.name = 'Post_123') RETURN b LIMIT 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询微软与哪些大学有合作的公司节点。",
        "output": "match(a:company where a.name = '微软')-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找城市武汉包含的公司,以及合作这些公司的大学",
        "output": "match(a:city where name = '武汉')-[e:contain]->(b:company)<-[e2:cooperate]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出course大学物理 belong的department,返回department has的student的age的最小值除95的个数",
        "output": "match(a:course where name = '大学物理')-[e:belong]->(b:department)-[e2:has]->(c:student) return COUNT(MIN(c.age) / 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否提供person韩思琪喜欢的人的name、age和salary信息？",
        "output": "match(a:person where name = '韩思琪')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.age, c.name, c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和公司美团有关系的公司或大学,返回这些点的id,价值",
        "output": "match(a:company where a.name='美团')-[e]-(b:company | university) return b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(3727,176,53)作为请求表数据,属性分别为salary,height,id, 源点的height等于输入表height,查找和person赵伟有person_parent_person关系的person,再查找以person_lover_person关系关联了赵伟的person",
        "output": "with p as (select * from (VALUES(3727,176,53)) as t(salary,height,id))MATCH (a:person WHERE a.height = p.height AND (a.name = '赵伟')) -[e:person_parent_person ]->(b:person) , (a:person WHERE a.name = '赵伟') <-[e2:person_lover_person ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出源点类型为医生,边类型为doctor_diagnose_patient,以及满足条件目标点id在119到150之间或f0不为空的边",
        "output": "match(a:doctor)-[e:doctor_diagnose_patient where (e.targetId BETWEEN 119 AND 150) or (e.f0 is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为人人影城的点releases的film",
        "output": "match(a where a.name='人人影城')-[e:releases]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为address,size,id, 数据为('南区',145,55),('西区',742,35),('B座',317,8), 源点的id等于输入表id,返回26个与历史和科幻都存在关系的电影院节点",
        "output": "with p as (select * from (VALUES('南区',145,55),('西区',742,35),('B座',317,8)) as t(address,size,id))MATCH (a WHERE a.id = p.id AND (a.name = '历史')) -[e ]->(b:cinema) <-[e2 ]-(c WHERE c.name = '科幻') RETURN b LIMIT 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(993,'文学院',56),(198,'土木学院',85),(144,'计算机学院',57)作为请求表数据,属性分别为value,name,size, 以属性size作为相等条件,找出源点id不为空,id对69取余小于等于4945,名字为徐伟,边类型是student_selects_course,且目标点id不为空或源点id小于等于40,且目标点id的最大值大于等于24的边,返回这些边的目标点id对39取余的值",
        "output": "with p as (select * from (VALUES(993,'文学院',56),(198,'土木学院',85),(144,'计算机学院',57)) as t(value,name,size))MATCH (a WHERE a.size = p.size AND (a.id IS NOT NULL AND a.id % 69 <= 4945 AND a.name = '徐伟')) -[e:student_selects_course WHERE (e.targetId IS NOT NULL OR e.srcId <= 40) AND MAX(e.targetId) >= 24 ]->(b) RETURN e.targetId % 39 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对43取余的最小值",
        "output": "MIN(a.age % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为古代的标签",
        "output": "match(a:tag where a.name = '古代') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值减63的最小值",
        "output": "MIN(MIN(a.id) - 63)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点类型为loan，边类型为deposit的边，并返回这些边的f0属性加545的结果以及f0属性的最大值。",
        "output": "match(a:loan)-[e:deposit]->(b) return e.f0 + 545, MAX(e.f0 / e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为11的点的id,名字,价值",
        "output": "match(a where a.id = 11) return a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出age不等于59或name为何伟,且id的求和值加74小于91的节点",
        "output": "match(a where (a.age <> 59 or a.name = '何伟') and SUM(a.id) + 74 < 91) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,id, 数据为('male',174,68),('famale',171,58),('famale',151,94), 以属性height作为相等条件,请帮我找出tag的1跳以内的环",
        "output": "with p as (select * from (VALUES('male',174,68),('famale',171,58),('famale',151,94)) as t(gender,height,id))MATCH (a:tag WHERE a.height = p.height) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出黄国强喜欢的帖子，并返回这些帖子拥有的标签的ID和名称。",
        "output": "match(a:user where name = '黄国强')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取一个patient的所有朋友，或者这些朋友的朋友。",
        "output": "match(a:patient)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询91个名字不是Comment_177,创建时间等于2004年03月16日的评论,根据名字降序排列",
        "output": "match(a:comment where a.name <> 'Comment_177' and a.createTime = '2004-03-16') return a order by a.name desc limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到共同为王若涵和周雪且类型为software的提交。",
        "output": "match(a where a.name = '王若涵')-[e:commits]->(b:software)<-[e2:commits]-(c where c.name = '周雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找id为179的点的薪资",
        "output": "match(a where a.id = '179') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字等于Prescription_322,名字不等于Prescription_496,或权重等于597的节点",
        "output": "match(a where (a.name = 'Prescription_322' and a.name <> 'Prescription_496') or a.weight = 597) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字,价值分组,计算价值加46的最大值",
        "output": "return MAX(a.value + 46) group by a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是company,名为华为的点,返回这些点的peopleNumber,scale,value",
        "output": "match(a:company where a.name = '华为') return a.peopleNumber, a.scale, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找城市包含的公司, 令公司的价值的值等于包含公司的城市的人数的最小值, 再查找公司属于的城市",
        "output": "match(a:city)-[e:contain]->(b:company) let b.value = MIN((b:company)<-[e2:contain]-(c:city) => c.peopleNumber) match(b:company)-[e3:belong]->(d:city) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询腾讯员工中，被其他人士知晓的数量",
        "output": "match(a:company where a.name='腾讯')-[e:employee]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部与person王宏有关系的person的薪资",
        "output": "match(a:person where a.name='王宏')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点身高在172到176之间,id在44到66之间,目标点上次登录时间等于2011年07月16日或创建时间等于2017年07月16日,且类型为拥有的边",
        "output": "match(a where (a.height BETWEEN 172 AND 176) and (a.id BETWEEN 44 AND 66))-[e:own]->(b where b.lastLoginTime = '2011-07-16' or b.createTime = '2017-07-16') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person王若涵喜欢的person,被其他person支付的数量",
        "output": "match(a:person where a.name='王若涵')-[e:likes]->(b:person)<-[e2:pay]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与作者有knows关系的作者，以及他们之间相互认识的所有作者。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author)-[e3:knows]->(d:author) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有country的value的数量除value的求和值",
        "output": "match(a:country) return SUM(COUNT(a.value) / a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值减价值的最大值",
        "output": "MAX(a.value - a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取 person 的关联人，或者关联人的关联人",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出李若涵选的课程，被其他老师教的次数",
        "output": "match(a:student where a.name='李若涵')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据规格,价值分组,计算id加80加价值对831取余的值",
        "output": "return a.id + 80 + a.value % 831 group by a.scale, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出issue ISSUE-145的全部label为relation的边,并根据f0降序排列,返回18个",
        "output": "match(a:issue where a.name = 'ISSUE-145')-[e:relation]->(b) return b order by e.f0 desc limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和名为张雪的person有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:person where n.name=张雪)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和城市上海有包含关系的公司,再查询以包含关系关联了上海的大学",
        "output": "match(a:city where a.name = '上海')-[e:contain]->(b:company),(a:city where a.name = '上海')<-[e2:contain]-(c:university)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询和company蚂蚁集团之间有company_belong_city关系的city",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:company_belong_city]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出共同包含韩国和中国这两个地名的标签为'城市'的节点。",
        "output": "match(a where a.name = '韩国')-[e:contain]->(b:city)<-[e2:contain]-(c where c.name = '中国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与周若涵有关且与贷款defaultName相关的公司。",
        "output": "match(a:person where a.name='周若涵')-[e:invest]-(b:company)-[e2:apply]-(c:loan where c.name='defaultName') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部id为81的person关联的软件,和以购买关系关联了这些软件的其他person",
        "output": "match(a:person where a.id = 81)-[e]-(b:software)<-[e2:buy]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,gender,height, 数据为(24,'famale',187),(40,'famale',193),(99,'male',164), 源点的gender等于输入表gender,请帮我查找与user陈思琪和kate都存在user_publish_post关系的点",
        "output": "with p as (select * from (VALUES(24,'famale',187),(40,'famale',193),(99,'male',164)) as t(id,gender,height))MATCH (a:user WHERE a.gender = p.gender AND (a.name = '陈思琪')) -[e:user_publish_post ]->(b) <-[e2:user_publish_post ]-(c:user WHERE c.name = 'kate') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询买家周建国的所有相关者,的目标点id加5加541的平均值",
        "output": "match(a:buyer where a.name= '周建国')-[e:relation]->(b) return AVG(e.targetId + 5 + 541)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为买家,名为陈宏的点,返回这些点的薪资",
        "output": "match(a:buyer where a.name = '陈宏') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以524作为请求点id, 以属性id作为相等条件,请帮我找出person韩轩likes的person,被其他person knows的数量",
        "output": "with p as (select * from (VALUES(524)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩轩')) -[e:person_likes_person ]->(b:person) <-[e2:person_knows_person ]-(c:person) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person张国强有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '张国强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为Alice的节点拥有的商品或订单",
        "output": "match(a where a.name='Alice')-[e:has]->(b:goods | orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person郑轩认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='郑轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询177个person马伟和李强,共同的朋友",
        "output": "match(a:person where a.name='马伟')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='李强') return b limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于company,名为蚂蚁集团的点,返回这些点的id,value,peopleNumber",
        "output": "match(a:company where a.name = '蚂蚁集团') return a.id, a.value, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出和company有关联的loan节点,并根据其amount分组,返回amount,以及weight的最大值除692的最小值",
        "output": "match(a:company)-[e:company_apply_loan]-(b:loan) return b.amount, MIN(MAX(b.weight) / 692) group by b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和person王梅之间有creates关系的comment",
        "output": "match(a:person where a.name='王梅')-[e:creates]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与标签ID为113的注释相关的合作伙伴，并查询与注释相关的关系。",
        "output": "match(a:tag where id = '113')-[e]-(b:comment)-[e2:partner]->(c), (b:comment)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为147的论坛包含的用户, 并将用户有关的论坛的名字的最大值赋值给用户的薪资, 接着查询用户的薪资小于147的用户喜欢的帖子",
        "output": "match(a:forum where a.id = 147)-[e:contain]->(b:user) let b.salary = MAX((b:user)-[e2]-(c:forum) => c.name) match(b:user where b.salary < 147)-[e3:likes]->(d:post) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签等于医生,目标点标签等于处方,标签等于部门或病人的边",
        "output": "match(a:doctor)-[e:department | patient]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(1633,187,'吴宏'),(5360,183,'吴若涵'),(8081,177,'张宏'),(4203,193,'黄雪')作为请求表数据,属性分别为salary,height,name, 源点的height等于输入表height,返回和处方Prescription_212有关的处方,称为X,再返回和这个X有关联的其他处方,以及和X有关联的处方",
        "output": "with p as (select * from (VALUES(1633,187,'吴宏'),(5360,183,'吴若涵'),(8081,177,'张宏'),(4203,193,'黄雪')) as t(salary,height,name))MATCH (a:prescription WHERE a.height = p.height AND (a.name = 'Prescription_212')) -[e ]-(b:prescription) , (b:prescription) -[e2 ]-(c:prescription) , (b:prescription) -[e3 ]-(d:prescription) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与大学有关系的教师节点,且教师节点的性别不是famale,并返回这些教师的id减78的值,以及教师的薪资乘4101减14的最大值",
        "output": "match(a:university)-[e]->(b:teacher where b.gender <> 'famale') return b.id - 78, MAX(b.salary * 4101 - 14)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出用户杜轩的全部相关者,的源点id除23的求和值",
        "output": "match(a:user where a.name= '杜轩')-[e:relation]->(b) return SUM(e.srcId / 23)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与杜建聪存在创造关系的评论,评论与电影存在属于关系的点,返回这些点的id",
        "output": "match(a where a.name = '杜建聪')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算height减169加175的值",
        "output": "return a.height - 169 + 175 group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资除5992的值",
        "output": "a.salary / 5992",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为赵伟的点认识的全部person,并对这些person的身高进行求和",
        "output": "match(a where a.name='赵伟')-[e:knows]->(b:person) return SUM(b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点类型是卖家,边类型是回答,以及源点id大于118的边",
        "output": "match(a:seller)-[e:ask where e.srcId > 118]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有国家的id的最小值减63的求和值",
        "output": "match(a:country) return SUM(MIN(a.id) - 63)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以89作为请求点id, 以属性id作为相等条件,返回与person韩思思和李轩都存在person_family_person关系的点",
        "output": "with p as (select * from (VALUES(89)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩思思')) -[e:person_family_person ]->(b) <-[e2:person_family_person ]-(c:person WHERE c.name = '李轩') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询184个名为王思思的点回答的标签等于买家的节点,且其身高大于等于156且id在87到95之间",
        "output": "match(a where a.name='王思思')-[e:ask]->(b:buyer where b.height >= 156 and (b.id BETWEEN 87 AND 95)) return b limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型为论坛的点有包含关系的用户,并且和这些用户有发布关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:publish]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘0的值",
        "output": "a.id * 0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person购买的软件, 令软件的星数的值等于购买软件的person的id的平均值, 再查找软件使用的软件",
        "output": "match(a:person)-[e:buy]->(b:software) let b.stars = AVG((b:software)<-[e2:buy]-(c:person) => c.id) match(b:software)-[e3:uses]->(d:software) return b.stars, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前118个label为拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有课程的课时除课时加97的值",
        "output": "match(a:course) return a.courseHour / a.courseHour + 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和person杜梅之间有属于关系的公司",
        "output": "match(a:person where a.name='杜梅')-[e:belong]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前119个薪资大于6181的person",
        "output": "match(a:person where a.salary > 6181) return a limit 119",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和名为赵建聪的作家有伙伴关系,或有伙伴的伙伴关系的书",
        "output": "match(a:author where n.name=赵建聪)-[e:partner]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和software Zookeeper有uses关系的software,再请帮我找出以uses关系关联了Zookeeper的software",
        "output": "match(a:software where a.name = 'Zookeeper')-[e:uses]->(b:software),(a:software where a.name = 'Zookeeper')<-[e2:uses]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影院上映的电影,返回其源点的id对27取余的值,以及目标点的价值对992取余的值",
        "output": "match(a:cinema)-[e:releases]->(b:film) return a.id % 27, b.value % 992",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 李轩和Kate的共同合作伙伴是8个人。",
        "output": "match(a:person where a.name='李轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='kate') return b limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person关联的person,返回其源点的身高加173的和,以及目标点的身高减身高的最大值",
        "output": "match(a:person)-[e:relates]->(b:person) return SUM(a.height + 173), MAX(b.height - b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为帖子,名为Post_414的点,返回这些点的创建时间,价值,id",
        "output": "match(a:post where a.name = 'Post_414') return a.createTime, a.value, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和电影院人人影城有1到3度关系的电影院",
        "output": "match(a:cinema where a.name='人人影城')-[e]->{1,3}(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和卖家黄若涵有回答关系的买家,再请帮我查找以回答关系关联了黄若涵的买家",
        "output": "match(a:seller where a.name = '黄若涵')-[e:ask]->(b:buyer),(a:seller where a.name = '黄若涵')<-[e2:ask]-(c:buyer)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签等于person,边标签等于creates的边,返回这些边的targetId的最大值乘targetId的值,和targetId的最大值除51的值",
        "output": "match(a:person)-[e:creates]->(b) return MAX(e.targetId) * e.targetId, MAX(e.targetId) / 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以677,745作为请求点id, 源点的id等于输入表id,查找源点类型是doctor,边类型是doctor_creates_prescription的边,返回这些边的srcId乘90的平均值,和weight乘130.43的值",
        "output": "with p as (select * from (VALUES(677),(745)) as t(id)) MATCH (a:doctor WHERE a.id = p.id) -[e:doctor_creates_prescription ]->(b) RETURN AVG(e.srcId * 90), e.weight * 130.43 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与腾讯公司和重庆市相关的大学节点",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]-(b:university)-[e2:belong]-(c:city where c.name='重庆') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为57的person有关的account的friend, 再查找和account有关系的friend",
        "output": "match(a:person where id = 57)-[e]-(b:account)-[e2:friend]->(c), (b:account)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回城市以id分组的面积, 根据面积降序排序",
        "output": "match(a:city) return a.area group by a.id order by a.area desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,height, 数据为(17,5634,161),(49,1222,174),(64,1682,154),(52,5609,163)的子查询作为输入表, 以属性salary作为相等条件,找出id为118的课程有关的部门的伙伴, 再找出和部门有关系的伙伴",
        "output": "with p as (select * from (VALUES(17,5634,161),(49,1222,174),(64,1682,154),(52,5609,163)) as t(id,salary,height))MATCH (a:course WHERE a.salary = p.salary AND (id = '118')) -[e ]-(b:department) -[e2:partner ]->(c) , (b:department) -[e3:partner ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person徐梅 喜欢的评论,返回评论 属于的电影的id乘80的和",
        "output": "match(a:person where name = '徐梅')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return SUM(c.id * 80)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为吴强和张建国的点共同write的,标签为book的节点",
        "output": "match(a where a.name = '吴强')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '张建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person喜欢的person,返回其源点的薪资乘6074的值,以及目标点的age的最小值减79的个数",
        "output": "match(a:person)-[e:likes]->(b:person) return a.salary * 6074, COUNT(MIN(b.age) - 79)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生周轩创造的处方, 令医生的创建时间等于处方的权重乘802乘31,令医生的薪资等于医生的身高, 返回医生的id, 处方的创建时间",
        "output": "match(a:doctor where a.name='周轩')-[e:creates]->(b:prescription) let a.createTime = b.weight * 802 * 31,let a.salary = a.height return a.id,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出和账号Zeus有关的贷款,再给出和Zeus account_repay_loan的其他贷款,返回它们",
        "output": "match(a:account where a.name = 'Zeus')-[e]-(b:loan), (a:account)-[e2:account_repay_loan]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与韩国强存在属于关系的部门,部门与医生存在拥有关系的点,返回这些点的薪资",
        "output": "match(a where a.name = '韩国强')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为23的author knows的author, 并将author有关的author的height的最小值赋值给author(b)的name, 接着查询author(b)的name小于23的author knows的author",
        "output": "match(a:author where a.id = 23)-[e:knows]->(b:author) let b.name = MIN((b:author)-[e2]-(c:author) => c.height) match(b:author where b.name < 23)-[e3:knows]->(d:author) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和大学清华大学有拥有关系的部门,再返回以拥有关系关联了清华大学的部门",
        "output": "match(a:university where a.name = '清华大学')-[e:has]->(b:department),(a:university where a.name = '清华大学')<-[e2:has]-(c:department)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出北京大学和电子科技大学之间的大学点公共伙伴节点名单。",
        "output": "match(a:university where a.name='北京大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='电子科技大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为company的点,返回44个",
        "output": "match(a:company) return a limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(30,89,'张国强'),(39,49,'韩轩'),(74,29,'王梅'),(56,3,'马若涵')作为请求表数据,属性分别为id,age,name, 以属性id作为相等条件,请帮我找出和person有关联的software节点,并根据其stars,name,id分组,返回stars,name,id,以及stars加812减40的最小值",
        "output": "with p as (select * from (VALUES(30,89,'张国强'),(39,49,'韩轩'),(74,29,'王梅'),(56,3,'马若涵')) as t(id,age,name))MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]-(b:software) RETURN b.stars, b.name, b.id, MIN(b.stars + 812 - 40) GROUP BY b.stars, b.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为121的person喜欢的person, 并将person有关的person的id的个数赋值给person(b)的身高, 接着查询person(b)的身高小于121的person喜欢的person",
        "output": "match(a:person where a.id = 121)-[e:likes]->(b:person) let b.height = COUNT((b:person)-[e2]-(c:person) => c.id) match(b:person where b.height < 121)-[e3:likes]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找订单Order_398包含的商品,以及拥有这些商品的卖家, 令订单的价格等于商品的价值减593,令订单的价格等于商品的sellerNumber的和加1246.09,令商品的身高等于卖家的id的最大值, 返回订单的id,商品的id,卖家的id",
        "output": "match(a:orders where name = 'Order_398')-[e:contain]->(b:goods)<-[e2:has]-(c:seller) let a.price = b.value - 593,let a.price = SUM(b.sellerNumber) + 1246.09,let b.height = MAX(c.id) return a.id,b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有张月知道的人，然后查询张月被喜欢的人，将两者的结果一起返回。",
        "output": "match(a where a.name = '张月')-[e:knows]->(b:person),(a where a.name = '张月')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被书呐喊关联的书,和呐喊认识的书",
        "output": "match(a:book)<-[e:relates]-(b:book where name = '呐喊')-[e2:knows]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找身高小于166,id不为空的person拥有的账号的名称,以及这些账号 转账的账号的名称",
        "output": "match(a:person where a.height < 166 and (a.id is not null))-[e:own]->(b:account)-[e2:transfer]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李建国认识的人中，有谁支付了这个人。",
        "output": "match(a:person where a.name = '李建国')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,category, 数据为(33,'星际穿越','科幻'),(23,'我不是药神','动作'),(78,'星际穿越','喜剧'),(69,'功夫','科幻')的子查询作为输入表, 源点的category等于输入表category,给出从cinema好视影院出发,经过类型为cinema_releases_film的边,走2到5度到达的film点",
        "output": "with p as (select * from (VALUES(33,'星际穿越','科幻'),(23,'我不是药神','动作'),(78,'星际穿越','喜剧'),(69,'功夫','科幻')) as t(id,name,category))MATCH (a:cinema WHERE a.category = p.category AND (a.name = '好视影院')) -[e:cinema_releases_film ]->{2,5}(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被卖家陈梅拥有的商品,和陈梅拥有的商品",
        "output": "match(a:goods)<-[e:has]-(b:seller where name = '陈梅')-[e2:has]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 有111个作家与《百年孤独》和计算机网络有关系。",
        "output": "match(a where a.name='百年孤独')-[e]->(b:author)<-[e2]-(c where c.name='计算机网络') return b limit 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id除价值的求和值",
        "output": "SUM(a.id / a.id / a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点label为person,目标点label为软件,label为person或公司或软件的边",
        "output": "match(a:person)-[e:person | company | software]->(b:software) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回孙伟选择的课程和他所属的部门。",
        "output": "match(a where a.name = '孙伟')-[e:selects]->(b:course),(a where a.name = '孙伟')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size的最小值除大小的最小值",
        "output": "MIN(MIN(a.size) / a.size)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为杜强和周伟的,标签等于买家的点公共的相关者节点的名单",
        "output": "match(a:buyer where a.name='杜强')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='周伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值对89取余的求和值",
        "output": "SUM(AVG(a.id) % 89)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为cinema,名为人人影城的点,返回这些点的name",
        "output": "match(a:cinema where a.name = '人人影城') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除8除24的最大值",
        "output": "MAX(a.id / 8 / 24)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别分组,计算age的个数对33取余的个数",
        "output": "return COUNT(COUNT(a.age) % 33) group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有公司，按名称从大到小排序。",
        "output": "match(a:company) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找buyer陈宏出发，通过look标签的边走三步到的goods点",
        "output": "match(a:buyer where a.name='陈宏')-[e:look]->{3,3}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表243,293,159,542, 以属性id作为相等条件,帮我查询全部company的partner,或其partner的partner",
        "output": "with p as (select * from (VALUES(243),(293),(159),(542)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件value小于等于548.77且id大于39的节点",
        "output": "match(a where a.value <= 548.77 and a.id > 39) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为推特的点包含的用户",
        "output": "match(a where a.name='推特')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询国家俄罗斯包含的城市节点属于的国家",
        "output": "match(a:country where a.name = '俄罗斯')-[e:contain]->(b:city)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出cinema UME的标签为relation的边,并根据f1升序排列,返回74个",
        "output": "match(a:cinema where a.name = 'UME')-[e:relation]->(b) return b order by e.f1 asc limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前76个标签等于has的边",
        "output": "match(a)-[e:has]->(b) return e limit 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减24乘身高的值",
        "output": "(a.age - 24) * a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,age, 数据为(3517,21,79),(1169,8,48),(9453,35,81),(1998,34,73)的子查询作为输入表, 源点的id等于输入表id,给出类型为电影院的所有点,并根据名字降序排列",
        "output": "with p as (select * from (VALUES(3517,21,79),(1169,8,48),(9453,35,81),(1998,34,73)) as t(salary,id,age))MATCH (a:cinema WHERE a.id = p.id) RETURN a ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点名字为百度贴吧,人数不为空,人数不为空,边标签等于包含,且满足条件目标点id大于等于991,权重大于942,或权重不为空的边,返回这些边的f0的最大值除655的值",
        "output": "match(a where a.name = '百度贴吧' and (a.peopleNumber is not null) and (a.peopleNumber is not null))-[e:contain where (e.targetId >= 991 and e.weight > 942) or (e.weight is not null)]->(b) return MAX(e.f0) / 655",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找179个与Order_277和Order_427都存在关系的seller节点",
        "output": "match(a where a.name='Order_277')-[e]->(b:seller)<-[e2]-(c where c.name='Order_427') return b limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以555,285作为请求点id, 以属性id作为相等条件,找出和部门有关联的医生节点,并根据其名字分组,返回名字,以及年龄对83取余对薪资取余乘id的值",
        "output": "with p as (select * from (VALUES(555),(285)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e:department_has_doctor ]-(b:doctor) RETURN b.name, b.age % 83 % b.salary * b.id GROUP BY b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询北京大学的点属于的城市,然后查询北京大学被包含的城市,一起返回",
        "output": "match(a where a.name = '北京大学')-[e:belong]->(b:city),(a where a.name = '北京大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person吴宏的类型为朋友的边,并根据f0从小到大排列,返回14个",
        "output": "match(a:person where a.name = '吴宏')-[e:friend]->(b) return b order by e.f0 asc limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供与北京大学有联系的城市，以及与Bilibili合作的大学。",
        "output": "match(a:university where a.name = '北京大学')-[e:belong]->(b:city),(c:company where c.name = 'Bilibili')-[e2:cooperate]->(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale','Alan',4228),('male','马月',4972),('male','王科',5380),('famale','马建聪',5781)作为请求表数据,属性分别为gender,name,salary, 以属性name作为相等条件,请帮我找出id为161的点的id,value,name",
        "output": "with p as (select * from (VALUES('famale','Alan',4228),('male','马月',4972),('male','王科',5380),('famale','马建聪',5781)) as t(gender,name,salary))MATCH (a WHERE a.name = p.name AND (a.id = '161')) RETURN a.id, a.value, a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以申请关系关联了贷款loan_15的公司",
        "output": "match(a:loan where a.name='loan_15')<-[e:apply]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Flink的点has的user",
        "output": "match(a where a.name='Flink')-[e:has]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以36作为输入,返回运算结果",
        "output": "Call TRIANGLECOUNT(36) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以956,102作为请求点id, 以属性id作为相等条件,找出person孙建聪观看的电影节点拥有的标签",
        "output": "with p as (select * from (VALUES(956),(102)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '孙建聪')) -[e:person_watch_film ]->(b:film) -[e2:film_has_tag ]->(c:tag) RETURN c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点身高不等于176,身高小于等于198,目标点薪资加7640的平均值小于196或年龄小于等于15,且类型是支付的边",
        "output": "match(a where a.height <> 176 and a.height <= 198)-[e:pay]->(b where AVG(b.salary + 7640) < 196 or b.age <= 15) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询Bilibili属于哪个城市，其他大学属于的数量。",
        "output": "match(a:company where a.name='Bilibili')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为徐伟的,age的平均值加80的最小值不是1447且age小于73的lover,返回这些lover的id,和边的targetId,weight,f1",
        "output": "match(a where a.name='徐伟')-[e:lover]->(b where MIN(AVG(b.age) + 80) <> 1447 and b.age < 73) return b.id,e.targetId, e.weight, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的id的最大值减48的值",
        "output": "match(a:company) return MAX(a.id) - 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询周红和陈宏之间共同的爱人节点，标签为'person'。",
        "output": "match(a:person where a.name='周红')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='陈宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和名为郑建聪的person有friend关系,或有friend的friend关系的person",
        "output": "match(a:person where n.name=郑建聪)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size乘96的个数",
        "output": "COUNT(a.size * 96)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "在知乎论坛中，获取包含特定标签的帖子。",
        "output": "match(a:forum where a.name = '知乎')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,weight,createTime, 数据为(57,936,2002-10-09), 以属性createTime作为相等条件,查询前180个id对96取余的平均值小于11,类别是皮肤药的药品",
        "output": "with p as (select * from (VALUES(57,936,2002-10-09)) as t(id,weight,createTime))MATCH (a:medicine WHERE a.createTime = p.createTime AND (AVG(a.id % 96) < 11 AND a.category = '皮肤药')) RETURN a LIMIT 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找包含在id为空或id等于25的country中的city名称，以及这些city所属的country名称。",
        "output": "match(a:country where (a.id is null) or a.id = 25)-[e:contain]->(b:city)-[e2:belong]->(c:country) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person认识的person,返回其源点的年龄乘29的值,以及目标点的salary的个数加9857的值",
        "output": "match(a:person)-[e:knows]->(b:person) return a.age * 29, COUNT(b.salary) + 9857",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部id为182的company关联的city,和以contain关系关联了这些city的其他country",
        "output": "match(a:company where a.id = 182)-[e]-(b:city)<-[e2:contain]-(c:country) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否帮我查一下叫微软的公司？",
        "output": "match(a:company where a.name = '微软') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出药品的2度以内的环",
        "output": "match(a:medicine)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出loan的relation,或其relation的relation",
        "output": "match(a:loan)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为targetId,timeStamp,f1, 数据为(87,2002-09-28,true),(171,1996-12-27,true),(58,2020-08-15,true),(52,2012-08-16,true), 以属性targetId作为相等条件,返回label为订单的全部点,并根据价值从大到小排列",
        "output": "with p as (select * from (VALUES(87,2002-09-28,true),(171,1996-12-27,true),(58,2020-08-15,true),(52,2012-08-16,true)) as t(targetId,timeStamp,f1))MATCH (a:orders WHERE a.targetId = p.targetId) RETURN a ORDER BY a.value DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与post Post_436有关系的tag, 返回和这些tag有关联的tag的,value乘value的值",
        "output": "match(a:post where a.name= 'Post_436')-[e]-(b:tag)-[e2]-(c:tag) return c.value * c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回王红教授的课程，再返回与王红有授课关系的课程。",
        "output": "match(a:teacher where a.name = '王红')-[e:teach]->(b:course),(a:teacher where a.name = '王红')<-[e2:teach]-(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出14个与孙月和孙思琪有关联的用户节点。",
        "output": "match(a where a.name='孙月')-[e]->(b:user)<-[e2]-(c where c.name='孙思琪') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出102个与标签为'作家'的点有联系的人，以及与这些人也有联系的其他作家。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author) return c limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询诊断病人张国强的医生,和这些医生属于的部门",
        "output": "match(a:patient where name = '张国强')<-[e:diagnose]-(b:doctor)-[e2:belong]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为推特的论坛,以及与其有关的论坛,并返回推特的创建时间和这些论坛的价值",
        "output": "match(a:forum where name = '推特')-[e]-(b:forum) return a.createTime, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person孙红认识的人",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='孙红') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前144个类型是包含的边",
        "output": "match(a)-[e:contain]->(b) return e limit 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和公司微软有关系的person或公司或软件,返回这些点的是否开源,星数,语言",
        "output": "match(a:company where a.name='微软')-[e]-(b:person | company | software) return b.openSource, b.stars, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找159个用户孙建国和何伟,共同的相关者",
        "output": "match(a:user where a.name='孙建国')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='何伟') return b limit 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'LL', 'QE', 'LF'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('LL', 'QE', 'LF') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以986作为请求点id, 以属性id作为相等条件,请帮我找出全部论坛以创建时间分组的id, 根据id从大到小排序",
        "output": "with p as (select * from (VALUES(986)) as t(id)) MATCH (a:forum WHERE a.id = p.id) RETURN a.id GROUP BY a.createTime ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按性别分组读者的年龄，然后按照年龄升序排序。",
        "output": "match(a:reader) return a.age group by a.gender order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回张月认识的其他作家。",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='张月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为4的卖家有关的卖家的相关者, 再请帮我找出和卖家有关系的朋友",
        "output": "match(a:seller where id = 4)-[e]-(b:seller)-[e2:relation]->(c), (b:seller)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出115个和label为城市的点有包含关系的大学,并且和这些大学有合作关系的公司",
        "output": "match(a:city)-[e:contain]->(b:university)-[e2:cooperate]->(c:company) return c limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的三角的环,边label为投资, 并返回这些点的id",
        "output": "match(a:person)-[e:invest]->(b)-[e2:invest]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签等于学生,目标点标签等于课程,标签等于教师或学生或课程的边",
        "output": "match(a:student)-[e:teacher | student | course]->(b:course) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出类型为seller的点,并根据name从小到大排列",
        "output": "match(a:seller) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为北京大学和华中科技大学的,类型是university的点公共的partner节点的名单",
        "output": "match(a:university where a.name='北京大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='华中科技大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与郑红和赵红都有关联的人，返回他们的年龄、身高和姓名。",
        "output": "match(a:person where a.name='郑红')-[e]->(b:person)<-[e2]-(c:person where c.name='赵红') return b.age, b.height, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为大众影院的点上映的所有电影,并对这些电影的名字进行求和",
        "output": "match(a where a.name='大众影院')-[e:releases]->(b:film) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和标签等于person的点有认识关系的person,以及和这些person有喜欢关系的person,以及和这些person有喜欢关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:likes]->(c:person)-[e3:likes]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点满足条件gender为male或salary为5874,且name不是吴轩,目标点满足条件id为空,且标签为likes的边",
        "output": "match(a where (a.gender = 'male' or a.salary = 5874) and a.name <> '吴轩')-[e:likes]->(b where (b.id is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出181个名为孙雪的点knows的类型是person的节点,且节点name不是Tom且age大于等于78",
        "output": "match(a where a.name='孙雪')-[e:knows]->(b:person where b.name <> 'Tom' and b.age >= 78) return b limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与账号BIN有关联的还款贷款，以及与人名赵国强有关联的账号。",
        "output": "match(a:account where a.name = 'BIN')-[e:repay]->(b:loan),(c:person where c.name = '赵国强')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出韩国强认识的所有其他人物。",
        "output": "match(a:person where a.name='韩国强')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与知乎存在包含关系的用户,用户与帖子存在发布关系的点,返回这些点的名字",
        "output": "match(a where a.name = '知乎')-[e:contain]->(b:user)-[e2:publish]->(c:post) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为王红的点publish的book",
        "output": "match(a where a.name='王红')-[e:publish]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点标签等于订单,目标点标签等于商品,标签等于orders_contain_goods的边",
        "output": "match(a:orders)-[e:orders_contain_goods]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为33的点的id,身高",
        "output": "match(a where a.id = 33) return a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询陈轩喜欢的帖子，返回帖子包含的标签值和标签名。",
        "output": "match(a:user where name = '陈轩')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为person的全部点,并根据年龄从大到小排列",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找赵若涵和周思思共同喜欢的帖子节点。",
        "output": "match(a where a.name = '赵若涵')-[e:likes]->(b:post)<-[e2:likes]-(c where c.name = '周思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有源点类型为person,边类型为拥有的边，并计算这些边的源点ID之和，再加上164除以117.10的结果，最后再除以f0。",
        "output": "match(a:person)-[e:own]->(b) return SUM(e.srcId + 164 % 117.10), e.f0 / e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找认识person韩宏的person,和这些person恋人的person",
        "output": "match(a:person where name = '韩宏')<-[e:knows]-(b:person)-[e2:lover]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从person徐建国出发,经过label为购买的边,走2跳或3跳到达的软件点",
        "output": "match(a:person where a.name='徐建国')-[e:buy]->{2,3}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为认识,以及源点id大于等于139的边",
        "output": "match(a)-[e:knows where e.srcId >= 139]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找63个名为何红的点接受的类型为处方的节点,且其创建时间不等于2011年09月04日或名字为Prescription_411",
        "output": "match(a where a.name='何红')-[e:accept]->(b:prescription where b.createTime <> '2011-09-04' or b.name = 'Prescription_411') return b limit 63",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('male',95,'赵若涵')作为请求表数据,属性分别为gender,age,name, 源点的gender等于输入表gender,请帮我查找名为数据结构的课程",
        "output": "with p as (select * from (VALUES('male',95,'赵若涵')) as t(gender,age,name))MATCH (a:course WHERE a.gender = p.gender AND (a.name = '数据结构')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id加23的数量",
        "output": "return COUNT(a.id + 23) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找48个名为郑建国的点knows的label为person的节点,且其salary在2524到9197之间或id不是83",
        "output": "match(a where a.name='郑建国')-[e:knows]->(b:person where (b.salary BETWEEN 2524 AND 9197) or b.id <> 83) return b limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型为仓库,边类型为拥有,且满足条件源点id在145到168之间,目标点id小于103,目标点id大于等于187的边",
        "output": "match(a:repository)-[e:has where (e.srcId BETWEEN 145 AND 168) and e.targetId < 103 and e.targetId >= 187]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以814,906,210,678,198作为请求点id, 源点的id等于输入表id,帮我查询163个person李梅和Amily,共同的lover",
        "output": "with p as (select * from (VALUES(814),(906),(210),(678),(198)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李梅')) -[e:person_lover_person ]->(b) <-[e2:person_lover_person ]-(c:person WHERE c.name = 'Amily') RETURN b LIMIT 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以has关系关联了department体育学院的university",
        "output": "match(a:department where a.name='体育学院')<-[e:has]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与university重庆大学有关系的city的peopleNumber",
        "output": "match(a:university where a.name='重庆大学')-[e]-(b:city) return b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person马宏有关系的公司, 返回和这些公司有关联的person的,id加16的平均值",
        "output": "match(a:person where a.name= '马宏')-[e]-(b:company)-[e2]-(c:person) return AVG(c.id + 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与赵梅有薪资关系且与张强有关注关系的个人节点，返回他们的身高、性别、赵梅的薪资和张国强的身高。",
        "output": "match(a:person where a.name='赵梅')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='张国强') return a.salary,b.height, b.gender,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 张强为好友或好友的好友的所有帖子。",
        "output": "match(a:user where n.name=张强)-[e:friend]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person支付的person,返回其源点的年龄加11的平均值,以及目标点的薪资加9639的值",
        "output": "match(a:person)-[e:pay]->(b:person) return AVG(a.age + 11), b.salary + 9639",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person李强认识的person,和李强认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '李强')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询仓库拥有的用户,返回其源点的星数除656的值,以及目标点的年龄对42取余的个数",
        "output": "match(a:repository)-[e:has]->(b:user) return a.stars / 656, COUNT(b.age % 42)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从读者周宏出发,经过类型是喜欢的边,走2跳到达的书点",
        "output": "match(a:reader where a.name='周宏')-[e:likes]->{2,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为张建聪的点喜欢的所有person,并对这些person的id进行求和",
        "output": "match(a where a.name='张建聪')-[e:likes]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和label为软件的点有使用关系的软件,且和这些软件有使用关系的软件,且和这些软件有使用关系的软件",
        "output": "match(a:software)-[e:uses]->(b:software)-[e2:uses]->(c:software)-[e3:uses]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找医生的三角的环,边类型是诊断, 并返回这些点的id",
        "output": "match(a:doctor)-[e:diagnose]->(b)-[e2:diagnose]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与仓库Mybatis有关,且与仓库Flink有关系的事项节点",
        "output": "match(a:repository where a.name='Mybatis')-[e:has]-(b:issue)-[e2:belong]-(c:repository where c.name='Flink') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为ISSUE-304的issue,以及与其有关的repository,并返回ISSUE-304的createTime和这些repository的weight",
        "output": "match(a:issue where name = 'ISSUE-304')-[e]-(b:repository) return a.createTime, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找company cooperate的university,返回其源点的id的和除id的值,以及目标点的id对72取余的数量",
        "output": "match(a:company)-[e:cooperate]->(b:university) return SUM(a.id) / a.id, COUNT(b.id % 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有外科部门的医生姓名和他们所在的部门名称",
        "output": "match(a:department where a.name = '外科')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为赵雪的点喜欢的所有帖子,并对这些帖子的名字进行求和",
        "output": "match(a where a.name='赵雪')-[e:likes]->(b:post) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为Prescription_348的点的,类别大于2,权重在255到514之间的朋友,返回这些朋友的权重,和边的f1,目标点id",
        "output": "match(a where a.name='Prescription_348')-[e:friend]->(b where b.category > 2 and (b.weight BETWEEN 255 AND 514)) return b.weight,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和repository JavaGuid之间有has关系的user",
        "output": "match(a:repository where a.name='JavaGuid')-[e:has]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出论坛的所有合作伙伴，或者这些合作伙伴的合作伙伴",
        "output": "match(a:forum)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出艺术学院中所有与黄若涵有关系的教师，并返回这些教师的年龄。",
        "output": "match(a:department where a.name='艺术学院')-[e]->(b:teacher)<-[e2]-(c:teacher where c.name='黄若涵') return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为重庆大学的点cooperate的company",
        "output": "match(a where a.name='重庆大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出peopleNumber不为空的节点",
        "output": "match(a where (a.peopleNumber is not null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出部门拥有的教师,返回其源点的价值除248的值,以及目标点的年龄加74的值",
        "output": "match(a:department)-[e:has]->(b:teacher) return a.value / 248, b.age + 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照credit降序排序，查找以value、name、courseHour分组的course。",
        "output": "match(a:course) return a.credit group by a.value, a.name, a.courseHour order by a.credit desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与贷款defaultName和公司字节存在关系的账号节点，并返回它们的上一次登录时间。",
        "output": "match(a:loan where a.name='defaultName')-[e]->(b:account)<-[e2]-(c:company where c.name='字节') return b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,id, 数据为(8144,'赵思琪',69),(2676,'孙国强',63), 源点的salary等于输入表salary,帮我查询前61个身高在153到190之间且身高在150到163之间的卖家",
        "output": "with p as (select * from (VALUES(8144,'赵思琪',69),(2676,'孙国强',63)) as t(salary,name,id))MATCH (a:seller WHERE a.salary = p.salary AND (a.height BETWEEN ASYMMETRIC 153 AND 190 AND a.height BETWEEN ASYMMETRIC 150 AND 163)) RETURN a LIMIT 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型为person的点有申请关系的贷款,并且和这些贷款有存款关系的账号,并且和这些账号有转账关系的账号",
        "output": "match(a:person)-[e:apply]->(b:loan)-[e2:deposit]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询127个和类型是cinema的点有releases关系的film,以及和这些film有has关系的tag",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与国家越南有包含关系的2度的环",
        "output": "match(a:country where name = '越南')-[e:contain]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询doctor belong的department,返回其源点的height加height的最大值,以及目标点的weight的平均值乘weight的平均值",
        "output": "match(a:doctor)-[e:belong]->(b:department) return MAX(a.height + a.height), AVG(AVG(b.weight) * b.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与电影相关的标签节点，按名称分组并返回。",
        "output": "match(a:film)-[e:has]-(b:tag) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与腾讯公司有归属关系，并且与微软公司有包含关系的城市节点。请返回这些城市的人口数量、腾讯公司的名称以及微软公司的价值。",
        "output": "match(a:company where a.name='腾讯')-[e:belong]->(b:city)<-[e2:contain]-(c:company where c.name='微软') return a.name,b.peopleNumber,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出40个account TheShy和Faker,共同的relation",
        "output": "match(a:account where a.name='TheShy')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='Faker') return b limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,age,gender, 数据为(73,83,'male')的子查询作为输入表, 源点的id等于输入表id,帮我查询公司的朋友,或其朋友的朋友",
        "output": "with p as (select * from (VALUES(73,83,'male')) as t(id,age,gender))MATCH (a:company WHERE a.id = p.id) -[e:friend ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查询和作家有关联的作家节点,并根据其薪资,身高,性别分组,返回薪资,身高,性别,以及身高减197的值",
        "output": "match(a:author)-[e:author_knows_author]-(b:author) return b.salary, b.height, b.gender, b.height - 197 group by b.salary, b.height, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与读者郑雪和书《呐喊》相关的所有书节点",
        "output": "match(a:reader where a.name='郑雪')-[e:likes]-(b:book)-[e2:refers]-(c:book where c.name='呐喊') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王轩所著的所有书籍，并一同提供他所认识的作家名单。",
        "output": "match(a where a.name = '王轩')-[e:write]->(b:book),(a where a.name = '王轩')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和prescription Prescription_351有关的doctor,再请帮我查找和 Prescription_351prescription_contain_medicine的其他medicine,返回它们",
        "output": "match(a:prescription where a.name = 'Prescription_351')-[e]-(b:doctor), (a:prescription)-[e2:prescription_contain_medicine]->(c:medicine) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为price,id,name, 数据为(3601.53,61,'Order_130'),(3903.51,71,'Order_321'),(2760.18,63,'Order_107'),(1798.53,13,'Order_201'), 以属性name作为相等条件,请帮我找出和订单Order_341有orders_contain_goods关系的商品,以及和买家赵建聪有buyer_cancel_orders关系的订单,将它们都返回",
        "output": "with p as (select * from (VALUES(3601.53,61,'Order_130'),(3903.51,71,'Order_321'),(2760.18,63,'Order_107'),(1798.53,13,'Order_201')) as t(price,id,name))MATCH (a:orders WHERE a.name = p.name AND (a.name = 'Order_341')) -[e:orders_contain_goods ]->(b:goods) , (c:buyer WHERE c.name = '赵建聪') -[e2:buyer_cancel_orders ]->(d:orders) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person有关联的公司节点,并根据其价值,id,名字分组,返回价值,id,名字,以及价值减320除987的值",
        "output": "match(a:person)-[e:invest]-(b:company) return b.value, b.id, b.name, (b.value - 320) / 987 group by b.value, b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,name,value分组,计算id减id的值",
        "output": "return a.id - a.id group by a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和名为计算机学院的部门有伙伴关系,或有伙伴的伙伴关系的教师",
        "output": "match(a:department where n.name=计算机学院)-[e:partner]->{1,2}(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person陈建国是朋友关系，且与person孙建国是父母关系的person节点。返回这些person的薪资、id、性别，以及person陈建国和person孙建国的性别。",
        "output": "match(a:person where a.name='陈建国')-[e:friend]->(b:person)<-[e2:parent]-(c:person where c.name='孙建国') return a.id,b.salary, b.id, b.gender,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点name不等于计算机体系结构,name的最大值为23,或courseHour在30到40之间,边类型是belong,且满足条件f0为空的边,返回这些边的weight除157.74的值",
        "output": "match(a where (a.name <> '计算机体系结构' and MAX(a.name) = 23) or (a.courseHour BETWEEN 30 AND 40))-[e:belong where (e.f0 is null)]->(b) return e.weight / 157.74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从买家孙宏出发，经过查看类型的边，走1跳或2跳可以到达哪个商品点？",
        "output": "match(a:buyer where a.name='孙宏')-[e:look]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点满足条件id大于2181且身高大于等于6823,id不为空,目标点满足条件薪资不为空或id小于63或名字不等于李强,且标签为喜欢的边",
        "output": "match(a where a.id > 2181 and a.height >= 6823 and (a.id is not null))-[e:likes]->(b where (b.salary is not null) or b.id < 63 or b.name <> '李强') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询doctor吴雪 diagnose的patient,返回patient accept的prescription的weight对994取余的值",
        "output": "match(a:doctor where name = '吴雪')-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c.weight % 994",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person徐若涵出发,经过label为支付的边,走1跳到达的person点",
        "output": "match(a:person where a.name='徐若涵')-[e:pay]->{1,1}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person认识的person,返回其源点的薪资对6278取余的最大值,以及目标点的age的最小值减10的和",
        "output": "match(a:person)-[e:knows]->(b:person) return MAX(a.salary % 6278), SUM(MIN(b.age) - 10)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和类型是doctor的点有doctor_belong_department关系的department,且和这些department有department_has_doctor关系的doctor,且和这些doctor有doctor_belong_department关系的department",
        "output": "match(a:doctor)-[e:doctor_belong_department]->(b:department)-[e2:department_has_doctor]->(c:doctor)-[e3:doctor_belong_department]->(d:department) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出标签为department的点,返回89个",
        "output": "match(a:department) return a limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签为教师的全部点,并根据薪资从小到大排列",
        "output": "match(a:teacher) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值减82对46取余的值",
        "output": "AVG(a.id) - 82 % 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为黄国强的点accept的prescription",
        "output": "match(a where a.name='黄国强')-[e:accept]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对36取余的值",
        "output": "a.id % 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person杜强有关,且与person韩思琪有关系的person节点",
        "output": "match(a:person where a.name='杜强')-[e:likes]-(b:person)-[e2:likes]-(c:person where c.name='韩思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回马若涵所有拥有的物品，以及与她联系过的买家。",
        "output": "match(a where a.name = '马若涵')-[e:has]->(b:goods),(a where a.name = '马若涵')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为数据结构的点属于的所有部门,并对这些部门的id进行求和",
        "output": "match(a where a.name='数据结构')-[e:belong]->(b:department) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师郑月教的课程, 令课程的名字等于教师的age的个数对46取余的最大值,令教师的名字等于教师的身高的最大值,令教师的性别等于教师的名字, 返回教师的id, 课程的价值",
        "output": "match(a:teacher where a.name='郑月')-[e:teach]->(b:course) let b.name = MAX(COUNT(a.age) % 46),let a.name = MAX(a.height),let a.gender = a.name return a.id,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找142个名为吴红的点认识的类型是person的节点,且其身高大于183或id在34到73之间",
        "output": "match(a where a.name='吴红')-[e:knows]->(b:person where b.height > 183 or (b.id BETWEEN 34 AND 73)) return b limit 142",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person陈雪出发,经过标签为认识的边,走2到5度到达的person点",
        "output": "match(a:person where a.name='陈雪')-[e:knows]->{2,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,gender,age, 数据为(61,'male',72)的子查询作为输入表, 以属性gender作为相等条件,查找label为person的所有点,并根据height从大到小排列",
        "output": "with p as (select * from (VALUES(61,'male',72)) as t(id,gender,age))MATCH (a:person WHERE a.gender = p.gender) RETURN a ORDER BY a.height DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和作家周轩有3到6度关系的作家",
        "output": "match(a:author where a.name='周轩')-[e]->{3,6}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于病人的所有点,并根据id降序排列",
        "output": "match(a:patient) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person以薪资,名字分组的薪资, 根据薪资从大到小排序",
        "output": "match(a:person) return a.salary group by a.salary, a.name order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回label为软件的所有点,并根据语言从小到大排列",
        "output": "match(a:software) return a order by a.lang asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Person associated tags and other posts linked by ownership relationship.",
        "output": "match(a:person where a.id = '20')-[e]-(b:tag)<-[e2:has]-(c:post) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与电影相关的评论节点，限制长度不为729,并返回这些点的ID对53取余对948取余的值，以及ID对43取余的最大值。",
        "output": "match(a:film)-[e]->(b:comment where b.wordCount <> 729) return b.id % 53 % 948, MAX(b.id % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回pullRequest PR-495 belong的repository,被其他issue belong的数量",
        "output": "match(a:pullRequest where a.name='PR-495')-[e:belong]->(b:repository)<-[e2:belong]-(c:issue) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询郑建国参与编辑的书，以及与郑建国有关联的书，并帮我查询这些书的发布情况。",
        "output": "match(a:publisher where a.name = '郑建国')-[e:publish]->(b:book),(a:publisher where a.name = '郑建国')<-[e2:publish]-(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person吴红的全部标签为relation的边,并根据targetId从大到小排列,返回51个",
        "output": "match(a:person where a.name = '吴红')-[e:relation]->(b) return b order by e.targetId desc limit 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为微软的company,以及与其有关的person,并返回微软的id和这些person的salary",
        "output": "match(a:company where name = '微软')-[e]-(b:person) return a.id, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和买家李建聪有创造关系的订单,再返回以咨询关系关联了李建聪的卖家",
        "output": "match(a:buyer where a.name = '李建聪')-[e:creates]->(b:orders),(a:buyer where a.name = '李建聪')<-[e2:consult]-(c:seller)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被company蚂蚁集团apply的loan,和蚂蚁集团apply的loan",
        "output": "match(a:loan)<-[e:apply]-(b:company where name = '蚂蚁集团')-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,age, 数据为(9837,49,58),(9622,50,73)的子查询作为输入表, 源点的age等于输入表age,查找卖家李伟拥有的商品,被其他买家查看的数量",
        "output": "with p as (select * from (VALUES(9837,49,58),(9622,50,73)) as t(salary,id,age))MATCH (a:seller WHERE a.age = p.age AND (a.name = '李伟')) -[e:seller_has_goods ]->(b:goods) <-[e2:buyer_look_goods ]-(c:buyer) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以202,111,369作为请求点id, 以属性id作为相等条件,请帮我找出用户的三角的环,边标签为user_creates_issue, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(202),(111),(369)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_creates_issue ]->(b) -[e2:user_creates_issue ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person马伟invest的company节点apply的loan",
        "output": "match(a:person where a.name = '马伟')-[e:invest]->(b:company)-[e2:apply]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与王月有关联且与杜月有关联的作家节点，返回它们的年龄、性别和 ID。",
        "output": "match(a:reader where a.name='王月')-[e]->(b:author)<-[e2]-(c:author where c.name='杜月') return b.age, b.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出取消订单Order_465的买家,和这些买家创造的订单",
        "output": "match(a:orders where name = 'Order_465')<-[e:cancel]-(b:buyer)-[e2:creates]->(c:orders) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找贷款loan_82存款的账号,被其他person拥有的数量",
        "output": "match(a:loan where a.name='loan_82')-[e:deposit]->(b:account)<-[e2:own]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "面积对56454取余的数量",
        "output": "COUNT(a.area % 56454)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person赵强有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '赵强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从作家张若涵出发，沿着认识类型的边走2到5度，到达其他作家节点。",
        "output": "match(a:author where a.name='张若涵')-[e:knows]->{2,5}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是属于,并且源点id不为空的边",
        "output": "match(a)-[e:belong where (e.srcId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(159,'male',15),(174,'famale',33),(175,'male',90)作为请求表数据,属性分别为height,gender,age, 源点的height等于输入表height,找出101个名为艺术学院的点拥有的标签等于学生的节点,且其名字不是徐红且age的最大值减89乘5075大于9398",
        "output": "with p as (select * from (VALUES(159,'male',15),(174,'famale',33),(175,'male',90)) as t(height,gender,age))MATCH (a WHERE a.height = p.height AND (a.name = '艺术学院')) -[e:department_has_student ]->(b:student WHERE b.name <> '徐红' AND (MAX(b.age) - 89) * 5075 > 9398) RETURN b LIMIT 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与订单Order_446有包含关系的1度的环",
        "output": "match(a:orders where name = 'Order_446')-[e:contain]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照年龄从大到小排序，找出所有标签为'person'的点。",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与事项ISSUE-345有关系的仓库, 返回和这些仓库有关联的用户的,年龄对27取余的平均值",
        "output": "match(a:issue where a.name= 'ISSUE-345')-[e]-(b:repository)-[e2]-(c:user) return AVG(c.age % 27)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与吴伟有顾问关系的卖家，再找出与吴伟有取消订单关系的订单。",
        "output": "match(a:buyer where a.name = '吴伟')-[e:consult]->(b:seller),(a:buyer where a.name = '吴伟')<-[e2:cancel]-(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点价值小于806或人数不等于1472或面积不是54769,目标点规格是large,规格是small,且标签为包含的边",
        "output": "match(a where a.value < 806 or a.peopleNumber <> 1472 or a.area <> 54769)-[e:contain]->(b where b.scale = 'large' and b.scale = 'small') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和帖子Post_216有关的标签,再请帮我找出和Post_216拥有的其他标签,返回它们",
        "output": "match(a:post where a.name = 'Post_216')-[e]-(b:tag), (a:post)-[e2:has]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person孙思琪likes的comment,以及creates这些comment的person, 令comment的age等于person的height,令comment的height等于person的salary, 返回person(a)的gender,comment(b)的name,person(c)的salary",
        "output": "match(a:person where name = '孙思琪')-[e:likes]->(b:comment)<-[e2:creates]-(c:person) let b.age = c.height,let b.height = c.salary return a.gender,b.name,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为处方的点,并根据id降序排列",
        "output": "match(a:prescription) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询32个人，这些人同时与人人影城和好视影院有关系。",
        "output": "match(a where a.name='人人影城')-[e]->(b:person)<-[e2]-(c where c.name='好视影院') return b limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为何建聪的卖家,以及与其有关的卖家,并返回何建聪的名字和这些卖家的名字",
        "output": "match(a:seller where name = '何建聪')-[e]-(b:seller) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 forum 关联的 post 节点，按照 id、lang、value 进行分组。",
        "output": "match(a:forum)-[e:contain]-(b:post) return b.id, b.lang, b.value group by b.id, b.lang, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有城市及其相关城市",
        "output": "match(a:city)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Qn', 'cT'作为输入调用triangleCount函数,返回运算结果",
        "output": "Call TRIANGLECOUNT('Qn', 'cT') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为59的用户关联的仓库,和以喜欢关系关联了这些仓库的其他用户",
        "output": "match(a:user where a.id = 59)-[e]-(b:repository)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与马思思存在取消关系的订单，然后找出订单中包含商品（即orders与goods存在包含关系）的点，最后返回这些点的类别（category)。",
        "output": "match(a where a.name = '马思思')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,age, 数据为('黄宏',155,44), 源点的name等于输入表name,查询从post Post_173出发,经过类型为post_has_tag的边,走2跳到达的tag点",
        "output": "with p as (select * from (VALUES('黄宏',155,44)) as t(name,height,age))MATCH (a:post WHERE a.name = p.name AND (a.name = 'Post_173')) -[e:post_has_tag ]->{2,2}(b:tag) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回边标签为'拥有',源点标签为'person',目标点标签为'账号'的边。",
        "output": "match(a:person)-[e:own]->(b:account) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于用户的点,并根据身高降序排列",
        "output": "match(a:user) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘81的值",
        "output": "a.id * 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照名称从小到大排序，同时分组按照value、name和level。",
        "output": "match(a:university) return a.name group by a.value, a.name, a.level order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为郑伟的买家,以及与其有关的买家,并返回郑伟的薪资和这些买家的名字",
        "output": "match(a:buyer where name = '郑伟')-[e]-(b:buyer) return a.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按id、价值和人数对城市进行分组，然后按照id从大到小进行排序。",
        "output": "match(a:city) return a.id group by a.id, a.value, a.peopleNumber order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person Tom和孙梅都存在朋友关系的点",
        "output": "match(a:person where a.name='Tom')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='孙梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,amount,weight分组,计算id的个数加id的最大值",
        "output": "return MAX(COUNT(a.id) + a.id) group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person李思琪有关,且与软件Spark有关系的软件节点",
        "output": "match(a:person where a.name='李思琪')-[e:buy]-(b:software)-[e2:uses]-(c:software where c.name='Spark') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为user且名为Amily的点，返回这些点的id、salary和gender。",
        "output": "match(a:user where a.name = 'Amily') return a.id, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,category,value, 数据为('泰坦尼克号','喜剧',91),('少年足球','文艺',209),('西虹市首富','科幻',916),('少年足球','动作',606), 以属性category作为相等条件,请帮我找出和cinema好视影院有cinema_releases_film关系的film,以及和person陈若涵有person_creates_comment关系的comment,将它们都返回",
        "output": "with p as (select * from (VALUES('泰坦尼克号','喜剧',91),('少年足球','文艺',209),('西虹市首富','科幻',916),('少年足球','动作',606)) as t(name,category,value))MATCH (a:cinema WHERE a.category = p.category AND (a.name = '好视影院')) -[e:cinema_releases_film ]->(b:film) , (c:person WHERE c.name = '陈若涵') -[e2:person_creates_comment ]->(d:comment) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表702,272,977, 源点的id等于输入表id,查询122个名字不是马轩或身高为空,且身高不为空的person,根据性别从大到小排列",
        "output": "with p as (select * from (VALUES(702),(272),(977)) as t(id)) MATCH (a:person WHERE a.id = p.id AND ((a.name <> '马轩' OR a.height IS NULL) AND a.height IS NOT NULL)) RETURN a ORDER BY a.gender DESC LIMIT 122",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和用户郑思琪之间有喜欢关系的帖子",
        "output": "match(a:user where a.name='郑思琪')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点id不是13,名字为韩思琪,年龄小于18,边label为选择,且满足条件f0不是555,源点id为空,f0大于等于672的边,返回这些边的f0除623的值",
        "output": "match(a where a.id <> 13 and a.name = '韩思琪' and a.age < 18)-[e:selects where e.f0 <> 555 and (e.srcId is null) and e.f0 >= 672]->(b) return e.f0 / 623",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以578,78,682,130,935作为请求点id, 以属性id作为相等条件,返回名为建国大业的film,以及与其有关的person,并返回建国大业的category和这些person的id",
        "output": "with p as (select * from (VALUES(578),(78),(682),(130),(935)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (name = '建国大业')) -[e ]-(b:person) RETURN a.category, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前5个类型是家人的边",
        "output": "match(a)-[e:family]->(b) return e limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Order_162的订单,以及与其有关的商品,并返回Order_162的id和这些商品的价值",
        "output": "match(a:orders where name = 'Order_162')-[e]-(b:goods) return a.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄分组,计算年龄对97取余的最大值",
        "output": "return MAX(a.age % 97) group by a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与软件相关的所有人，筛选出性别不为女性的，并返回这些人薪资除以5919的值，以及ID中最大值的88乘减67的值。",
        "output": "match(a:software)-[e]->(b:person where b.gender <> 'famale') return b.salary / 5919, MAX(b.id) * 88 - 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为空,身高为空的医生诊断的病人的名称,以及这些病人 接受的处方的名称",
        "output": "match(a:doctor where (a.id is null) and (a.height is null))-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与软件Hadoop创建关系的公司。",
        "output": "match(a:software where a.name='Hadoop')<-[e:creates]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查询publisher的1度的环",
        "output": "match(a:publisher)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为147的点的name,height",
        "output": "match(a where a.id = 147) return a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资乘9183减34的值",
        "output": "a.salary * 9183 - 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与读者徐科存在喜欢关系，并且被书三体引用的书籍信息，包括它们的ID、类别、名称以及读者徐科的ID和书三体的名称。",
        "output": "match(a:reader where a.name='徐科')-[e:likes]->(b:book)<-[e2:refers]-(c:book where c.name='三体') return a.id,b.id, b.category, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为杜建聪和张雪，且标签为teacher的所有共同合作伙伴。",
        "output": "match(a:teacher where a.name='杜建聪')-[e:partner]->(b)<-[e2:partner]-(c:teacher where c.name='张雪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按性别升序查找22位身高在167到169厘米之间的女性医生。",
        "output": "match(a:doctor where a.gender = 'famale' and (a.height BETWEEN 167 AND 169)) return a order by a.gender asc limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表827,36,67,721,112, 以属性id作为相等条件,找出178个名为马轩的点likes的标签等于post的节点,且其name是Post_146或lang为English",
        "output": "with p as (select * from (VALUES(827),(36),(67),(721),(112)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '马轩')) -[e:user_likes_post ]->(b:post WHERE b.name = 'Post_146' OR b.lang = 'English') RETURN b LIMIT 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最大值乘value的最大值",
        "output": "MAX(MAX(a.value) * a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被company belong数量大于190的city,记为relationCount,再查询这些city belong的city",
        "output": "match(a:city) let a.relationCount = MAX((a:city)<-[e:belong]-(b:company) => b.id) match(a where a.relationCount > 190)-[e2:belong]->(c:city) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘17的平均值",
        "output": "AVG(a.id * 17)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回person watch的film,返回其源点的height加height的值,以及目标点的value的最小值乘247的求和值",
        "output": "match(a:person)-[e:person_watch_film]->(b:film) return a.height + a.height, SUM(MIN(b.value) * 247)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点id大于等于32且价值不为空,或价值大于等于115,边类型是包含,且满足条件源点id小于等于192的边,返回这些边的f0除f0的和",
        "output": "match(a where (a.id >= 32 and (a.value is not null)) or a.value >= 115)-[e:contain where e.srcId <= 192]->(b) return SUM(e.f0 / e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出company谷歌apply的loan,以及repay这些loan的account",
        "output": "match(a:company where name = '谷歌')-[e:apply]->(b:loan)<-[e2:repay]-(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问Alan从起点出发，沿着喜欢的标签向前走1到4步，会到达哪个书点？",
        "output": "match(a:reader where a.name='Alan')-[e:likes]->{1,4}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找用户王思思创造的合并请求,以及拥有这些合并请求的仓库",
        "output": "match(a:user where name = '王思思')-[e:creates]->(b:pullRequest)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表483,854,292,629, 源点的id等于输入表id,给出与person黄若涵有person_knows_person关系的1度以内的环",
        "output": "with p as (select * from (VALUES(483),(854),(292),(629)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '黄若涵')) -[e:person_knows_person ]->{0,0}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点标签等于seller,边标签等于has的边,返回这些边的srcId乘srcId的值,和f0减f0除11的最大值",
        "output": "match(a:seller)-[e:has]->(b) return e.srcId * e.srcId, MAX((e.f0 - e.f0) / 11)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找所有从人源点流向公司目标点的边，且边标签为'belong'。",
        "output": "match(a:person)-[e:belong]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与LX001有转账关系的账号，并返回它们之间的关联点ID。",
        "output": "match(a where a.name = 'LX001')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和书百年孤独之间有book_refers_book关系的书",
        "output": "match(a:book where a.name='百年孤独')-[e:book_refers_book]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为person的点,返回152个",
        "output": "match(a:person) return a limit 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点name不是李宏且age大于等于24,目标点value大于524,name是复仇者联盟,或id大于82,且标签为watch的边",
        "output": "match(a where a.name <> '李宏' and a.age >= 24)-[e:watch]->(b where (b.value > 524 and b.name = '复仇者联盟') or b.id > 82) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与账号XXD存在转账关系,且与账号TheShy存在转账关系的账号节点，返回这些账号的名字,创建时间,是否冻结,及账号XXD的名字,及账号TheShy的id",
        "output": "match(a:account where a.name='XXD')-[e:transfer]->(b:account)<-[e2:transfer]-(c:account where c.name='TheShy') return a.name,b.name, b.createTime, b.isBlock,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表446, 源点的id等于输入表id,返回名为阿里的company",
        "output": "with p as (select * from (VALUES(446)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为52的公司有关的person的伙伴, 再帮我查询和person有关系的伙伴",
        "output": "match(a:company where id = 52)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回课程计算机体系结构属于的部门,以及拥有这些部门的大学, 令大学的大小等于部门的id减4, 返回课程的学分,部门的名字,大学的名字",
        "output": "match(a:course where name = '计算机体系结构')-[e:belong]->(b:department)<-[e2:has]-(c:university) let c.size = b.id - 4 return a.credit,b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person杜若涵有支付关系的person,再帮我查询以喜欢关系关联了杜若涵的person",
        "output": "match(a:person where a.name = '杜若涵')-[e:pay]->(b:person),(a:person where a.name = '杜若涵')<-[e2:likes]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person王红有关系的person的名字",
        "output": "match(a:person where a.name='王红')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为艺术学院的部门,以及与其有关的学生,并返回艺术学院的id和这些学生的id",
        "output": "match(a:department where name = '艺术学院')-[e]-(b:student) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与company有关系的loan节点,且loan节点的id小于79,并返回这些loan的weight的平均值减312的值,以及loan的weight乘872的平均值",
        "output": "match(a:company)-[e]->(b:loan where b.id < 79) return AVG(b.weight) - 312, AVG(b.weight * 872)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和编辑韩若涵有发布关系的书,再请帮我查找以发布关系关联了韩若涵的书",
        "output": "match(a:publisher where a.name = '韩若涵')-[e:publish]->(b:book),(a:publisher where a.name = '韩若涵')<-[e2:publish]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有员工及其朋友的朋友",
        "output": "match(a:department)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为马月的person,以及与其有关的person,并返回马月的年龄和这些person的名字",
        "output": "match(a:person where name = '马月')-[e]-(b:person) return a.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从作家郑梅出发,经过类型为认识的边,走3度或4度到达的作家点",
        "output": "match(a:author where a.name='郑梅')-[e:knows]->{3,4}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为罪与罚的点关联的所有书,并对这些书的名字进行求和",
        "output": "match(a where a.name='罪与罚')-[e:relates]->(b:book) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回42个同时与Order_280和Order_205有关系的买家节点。",
        "output": "match(a where a.name='Order_280')-[e]->(b:buyer)<-[e2]-(c where c.name='Order_205') return b limit 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为loan_9的account或loan或company,以及与其有关的person,并返回loan_9的amount和这些person的id",
        "output": "match(a:account | loan | company where name = 'loan_9')-[e]-(b:person) return a.amount, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找117个病人陈思琪和李国强,共同的朋友",
        "output": "match(a:patient where a.name='陈思琪')-[e:friend]->(b)<-[e2:friend]-(c:patient where c.name='李国强') return b limit 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person Jimmy存在colleague关系,且与person徐月存在friend关系的person节点，返回这些person的id,及person Jimmy的age,及person徐月的gender",
        "output": "match(a:person where a.name='Jimmy')-[e:colleague]->(b:person)<-[e2:friend]-(c:person where c.name='徐月') return a.age,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型是医生的点有属于关系的部门,且和这些部门有拥有关系的医生,且和这些医生有诊断关系的病人",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:diagnose]->(d:patient) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以回答关系关联了买家孙若涵的卖家",
        "output": "match(a:buyer where a.name='孙若涵')<-[e:ask]-(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与ID为35的影院有关的影院的合作伙伴，再请帮我找出与影院有关系的任何关系。",
        "output": "match(a:cinema where id = '35')-[e]-(b:cinema)-[e2:partner]->(c), (b:cinema)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'悬疑'的点，并返回它们的ID、名称和值。",
        "output": "match(a:tag where a.name = '悬疑') return a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出contain city纽约contain的company,的city",
        "output": "match(a:city where name = '纽约')-[e:contain]->(b:company)<-[e2:contain]-(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以415,843作为请求点id, 源点的id等于输入表id,返回标签为company的所有点,并根据peopleNumber升序排列",
        "output": "with p as (select * from (VALUES(415),(843)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a ORDER BY a.peopleNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询author杜月 write的book,返回book knows的book的wordCount减903的最小值",
        "output": "match(a:author where name = '杜月')-[e:write]->(b:book)-[e2:knows]->(c:book) return MIN(c.wordCount - 903)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出person的friend,或其friend的friend",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和用户杜月之间有喜欢关系的帖子",
        "output": "match(a:user where a.name='杜月')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以20, 'jv', 'Wb'作为输入调用pageRank函数,返回运算结果",
        "output": "Call PAGERANK(20, 'jv', 'Wb') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找43个名为中国的点包含的标签为城市的节点,且节点名字大于9849或价值不是506",
        "output": "match(a where a.name='中国')-[e:contain]->(b:city where b.name > 9849 or b.value <> 506) return b limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除51的最小值",
        "output": "MIN(a.id / 51)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与老师有关系的身高小于等于154的学生节点，并计算这些节点的height除以height的值，以及height除以187乘48的最小值。",
        "output": "match(a:teacher)-[e]->(b:student where b.height <= 154) return b.height / b.height, MIN(b.height / 187 * 48)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询类型为标签的全部点,并根据价值降序排列",
        "output": "match(a:tag) return a order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与马建聪有关的人，以及他认识的所有其他人。",
        "output": "match(a:person where a.name = '马建聪')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李思琪和韩建聪都有联系的59个人。",
        "output": "match(a where a.name='李思琪')-[e]->(b:person)<-[e2]-(c where c.name='韩建聪') return b limit 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与周强和陈国强相关的141人",
        "output": "match(a:person where a.name='周强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈国强') return b limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和forum百度贴吧之间有contain关系的user",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询张轩的朋友的伴侣关系",
        "output": "match(a:person where a.name='张轩')-[e:friend]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点类型是forum,边类型是contain,且满足条件targetId大于等于114的边",
        "output": "match(a:forum)-[e:contain where e.targetId >= 114]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据scale分组,计算peopleNumber的平均值加724的值",
        "output": "return AVG(a.peopleNumber) + 724 group by a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person的三角的环,边类型是申请, 并返回这些点的id",
        "output": "match(a:person)-[e:apply]->(b)-[e2:apply]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和论坛天涯论坛之间有包含关系的用户",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和person何建国有关系的person,返回这些点的薪资",
        "output": "match(a:person where a.name='何建国')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有源点标签为'论坛'，目标点标签为'person'，标签为'包含'的边。",
        "output": "match(a:forum)-[e:contain]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与软件 SprintBoot有依赖关系的软件，以及与软件 SprintBoot有依赖关系的软件。",
        "output": "match(a:software where a.name = 'SprintBoot')-[e:uses]->(b:software),(a:software where a.name = 'SprintBoot')<-[e2:uses]-(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与武汉大学相关城市及与其合作公司",
        "output": "match(a:university where a.name = '武汉大学')-[e]-(b:city), (a:university)-[e2:cooperate]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和事项ISSUE-122之间有属于关系的仓库",
        "output": "match(a:issue where a.name='ISSUE-122')-[e:belong]->(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找满足条件星数是450或星数为空的节点",
        "output": "match(a where a.stars = 450 or (a.stars is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与滴滴公司有归属关系，并且与谷歌公司有包含关系的城市节点。返回这些城市的人员数量、id、名称以及滴滴公司的名称和谷歌公司的价值。",
        "output": "match(a:company where a.name='滴滴')-[e:belong]->(b:city)<-[e2:contain]-(c:company where c.name='谷歌') return a.name,b.peopleNumber, b.id, b.name,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有从论坛出发，通过contain连接的边，并返回这些边的srcId加上151的值以及srcId的平方减去193.86的数量。",
        "output": "match(a:forum)-[e:contain]->(b) return e.srcId + 151, COUNT(e.srcId * e.srcId - 193.86)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定与国家相关的大学节点，其中大学节点的ID为11,返回这些点的level对1取余的平均值，以及level的数量减3的最小值。",
        "output": "match(a:country)-[e]->(b:university where b.id = 11) return AVG(b.level % 1), MIN(COUNT(b.level) - 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找满足条件人数为空且名字是美团,人数为空的节点",
        "output": "match(a where (a.peopleNumber is null) and a.name = '美团' and (a.peopleNumber is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找3个与孙雪和杜若涵都存在关系的person节点",
        "output": "match(a where a.name='孙雪')-[e]->(b:person)<-[e2]-(c where c.name='杜若涵') return b limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找reader郑思琪likes的book,以及relates这些book的book",
        "output": "match(a:reader where name = '郑思琪')-[e:likes]->(b:book)<-[e2:relates]-(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表262,235,591,794,588, 源点的id等于输入表id,查询电影少年足球的所有标签等于朋友的边,并根据源点id降序排列,返回123个",
        "output": "with p as (select * from (VALUES(262),(235),(591),(794),(588)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '少年足球')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId DESC LIMIT 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询用户的相关者,或其相关者的相关者",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与贷款loan_14和loan_49都存在存款关系的点",
        "output": "match(a:loan where a.name='loan_14')-[e:deposit]->(b)<-[e2:deposit]-(c:loan where c.name='loan_49') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出39个和类型是大学的点有拥有关系的部门,并且和这些部门有拥有关系的学生",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student) return c limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找事项ISSUE-315属于的仓库,以及属于这些仓库的合并请求, 令事项的语言等于仓库的星数的个数,令合并请求的语言等于仓库的id,令合并请求的变更文件数等于合并请求的变更文件数对44取余乘384, 返回事项的id,仓库的语言,合并请求的创建时间",
        "output": "match(a:issue where name = 'ISSUE-315')-[e:belong]->(b:repository)<-[e2:belong]-(c:pullRequest) let a.lang = COUNT(b.stars),let c.lang = b.id,let c.changeFileNumber = c.changeFileNumber % 44 * 384 return a.id,b.lang,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person赵梅出发，通过观看行为连接，最多跳4步到达的电影点",
        "output": "match(a:person where a.name='赵梅')-[e:watch]->{1,4}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 武汉大学和复旦大学存在共同点。",
        "output": "match(a:university where a.name='武汉大学')-[e:has]->(b)<-[e2:has]-(c:university where c.name='复旦大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与郑月有关联的人，并计算他们之间的年龄关系。",
        "output": "match(a where a.name = '郑月')-[e:likes]->(b:person)-[e2:likes]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和person Jack有2到5度关系的公司",
        "output": "match(a:person where a.name='Jack')-[e]->{2,5}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有标签为软件或person的点",
        "output": "match(a:software | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与BIN存在转账关系的账号,账号与贷款存在还款关系的点,返回这些点的id",
        "output": "match(a where a.name = 'BIN')-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询所有贷款及其关联的贷款，以及与这些贷款相关的其他申请人。",
        "output": "match(a:loan where a.id = '12')-[e]-(b:loan)<-[e2:apply]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(1999-01-25,199,'Japanese'),(2002-08-09,269,'English'),(2004-02-03,421,'Japanese')作为请求表数据,属性分别为createTime,value,lang, 源点的createTime等于输入表createTime,帮我查询名为Tom和赵思琪的,类型为user的点公共的partner节点的名单",
        "output": "with p as (select * from (VALUES(1999-01-25,199,'Japanese'),(2002-08-09,269,'English'),(2004-02-03,421,'Japanese')) as t(createTime,value,lang))MATCH (a:user WHERE a.createTime = p.createTime AND (a.name = 'Tom')) -[e:partner ]->(b) <-[e2:partner ]-(c:user WHERE c.name = '赵思琪') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找属于person郑伟属于的公司,的person",
        "output": "match(a:person where name = '郑伟')-[e:belong]->(b:company)<-[e2:belong]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回吴梅的子女或其他亲属。",
        "output": "match(a:person where a.name = '吴梅')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询182个salary大于等于8261或salary大于等于6224或age在28到29之间的person,根据id降序排列",
        "output": "match(a:person where a.salary >= 8261 or a.salary >= 6224 or (a.age BETWEEN 28 AND 29)) return a order by a.id desc limit 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Order_477的点包含的所有商品,并对这些商品的价格进行求和",
        "output": "match(a where a.name='Order_477')-[e:contain]->(b:goods) return SUM(b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和city点有contain关系的university节点,且边满足条件f1不是true,目标university节点name等于武汉大学",
        "output": "match(a:city)-[e:contain where e.f1 <> true]->(b:university where b.name = '武汉大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询150个buyer杜建国和李月,共同的partner",
        "output": "match(a:buyer where a.name='杜建国')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='李月') return b limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询54个和类型是论坛的点有包含关系的帖子,且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:post)-[e2:has]->(c:tag) return c limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为物理学院的点的,年龄不为空且性别等于63的伙伴,返回这些伙伴的薪资,和边的目标点id",
        "output": "match(a where a.name='物理学院')-[e:partner]->(b where (b.age is not null) and b.gender = 63) return b.salary,e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找teacher的1度的环",
        "output": "match(a:teacher)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person陈建聪的伙伴,的srcId的数量对163取余的值",
        "output": "match(a:person where a.name= '陈建聪')-[e:partner]->(b) return COUNT(e.srcId) % 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为buyer,名为Tom的点,返回这些点的name,age,gender",
        "output": "match(a:buyer where a.name = 'Tom') return a.name, a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有包含药品'孙红接受的药品'的处方，然后返回这些处方的权重。",
        "output": "match(a where a.name = '孙红')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签为大学,目标点标签为公司,标签为公司或大学的边",
        "output": "match(a:university)-[e:company | university]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person陈轩喜欢的person节点支付的person",
        "output": "match(a:person where a.name = '陈轩')-[e:likes]->(b:person)-[e2:pay]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找用户韩伟创造的事项, 令用户的状态等于事项的id的数量减id的最大值,令用户的id等于事项的名字, 返回用户的年龄, 事项的创建时间",
        "output": "match(a:user where a.name='韩伟')-[e:creates]->(b:issue) let a.status = MAX(COUNT(b.id) - b.id),let a.id = b.name return a.age,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与吴红和吴轩都有关联的44个标签节点",
        "output": "match(a where a.name='吴红')-[e]->(b:tag)<-[e2]-(c where c.name='吴轩') return b limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,gender,age, 数据为(7995,'male',13), 以属性gender作为相等条件,帮我查询104个user徐思思和周强,共同的friend",
        "output": "with p as (select * from (VALUES(7995,'male',13)) as t(salary,gender,age))MATCH (a:user WHERE a.gender = p.gender AND (a.name = '徐思思')) -[e:friend ]->(b) <-[e2:friend ]-(c:user WHERE c.name = '周强') RETURN b LIMIT 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,学分分组,计算价值乘131的值",
        "output": "return a.value * 131 group by a.name, a.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为lastLoginTime,name,value, 数据为(2008-09-07,'LX001',918),(2028-10-31,'XXD',646), 以属性lastLoginTime作为相等条件,给出以apply关系关联了loan defaultName的company",
        "output": "with p as (select * from (VALUES(2008-09-07,'LX001',918),(2028-10-31,'XXD',646)) as t(lastLoginTime,name,value))MATCH (a:loan WHERE a.lastLoginTime = p.lastLoginTime AND (a.name = 'defaultName')) <-[e:company_apply_loan ]-(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为商品且被名为Order_313和Order_133的点共同包含的节点",
        "output": "match(a where a.name = 'Order_313')-[e:contain]->(b:goods)<-[e2:contain]-(c where c.name = 'Order_133') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询徐轩投资的公司，并返回该公司申请的贷款的ID、金额和重量。",
        "output": "match(a:person where name = '徐轩')-[e:invest]->(b:company)-[e2:apply]->(c:loan) return c.id, c.amount, c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找name不等于Jack的person relates的person的名称,以及这些person knows的person的名称",
        "output": "match(a:person where a.name <> 'Jack')-[e:relates]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与皮肤科和急诊部相关的92个医学节点。",
        "output": "match(a where a.name='皮肤科')-[e]->(b:medicine)<-[e2]-(c where c.name='急诊部') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与部门眼科有关系的部门, 返回和这些部门有关联的药品的,价格乘291的平均值",
        "output": "match(a:department where a.name= '眼科')-[e]-(b:department)-[e2]-(c:medicine) return AVG(c.price * 291)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时使用了Geaflow和Zookeeper的软件节点，并返回它们的ID、Geaflow的评星和Zookeeper的价值。",
        "output": "match(a:software where a.name='Geaflow')-[e:uses]->(b:software)<-[e2:uses]-(c:software where c.name='Zookeeper') return a.stars,b.id,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与四川大学有隶属关系的城市，再找出这些城市与国家的关系，返回这些关系的值。",
        "output": "match(a where a.name = '四川大学')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与author黄梅存在knows关系，并且与book悲惨世界存在write关系的author节点。返回这些author的salary和height，以及author黄梅的名字和book悲惨世界的id。",
        "output": "match(a:author where a.name='黄梅')-[e:knows]->(b:author)<-[e2:write]-(c:book where c.name='悲惨世界') return a.name,b.salary, b.height,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询类型是课程的全部点,并根据学分升序排列",
        "output": "match(a:course) return a order by a.credit asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和doctor孙月有关系的patient,返回这些点的salary,name,id",
        "output": "match(a:doctor where a.name='孙月')-[e]-(b:patient) return b.salary, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为193的大学关联的公司,和以包含关系关联了这些公司的其他城市",
        "output": "match(a:university where a.id = 193)-[e]-(b:company)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马强knows的person节点knows的person",
        "output": "match(a:person where a.name = '马强')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找同时与处方Prescription_348和处方Prescription_410存在关系的节点，并返回它们的权重。",
        "output": "match(a:prescription where a.name='Prescription_348')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_410') return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下韩红这个人",
        "output": "match(a:person where a.name = '韩红') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回doctor黄雪belong的department, 令doctor的name等于doctor的age乘11, 返回doctor的id, department的address",
        "output": "match(a:doctor where a.name='黄雪')-[e:belong]->(b:department) let a.name = a.age * 11 return a.id,b.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和软件有关联的软件节点,并根据其星数,价值分组,返回星数,价值,以及id的平均值除94的值",
        "output": "match(a:software)-[e:uses]-(b:software) return b.stars, b.value, AVG(b.id) / 94 group by b.stars, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Comment_156的点的,名字不是变形金刚或名字等于星际穿越的相关者,返回这些相关者的名字,和边的f1,目标点id,f0",
        "output": "match(a where a.name='Comment_156')-[e:relation]->(b where b.name <> '变形金刚' or b.name = '星际穿越') return b.name,e.f1, e.targetId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对11取余的最大值",
        "output": "MAX(a.id % 11)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary的最大值除8667的值",
        "output": "return MAX(a.salary) / 8667 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询gender是male或age的最大值大于3310或salary小于1608的节点",
        "output": "match(a where a.gender = 'male' or MAX(a.age) > 3310 or a.salary < 1608) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点isBlock为false,目标点amount的个数对amount取余是85,weight大于等于415,或id为空,且标签等于repay的边",
        "output": "match(a where a.isBlock = false)-[e:repay]->(b where (COUNT(b.amount) % b.amount = 85 and b.weight >= 415) or (b.id is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有标签为订单或买家的点",
        "output": "match(a:orders | buyer) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以185,19,642,967,692作为请求点id, 源点的id等于输入表id,请帮我查找和buyer有关联的seller节点,并根据其id,age分组,返回id,age,以及age加36的最小值",
        "output": "with p as (select * from (VALUES(185),(19),(642),(967),(692)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_consult_seller ]-(b:seller) RETURN b.id, b.age, MIN(b.age + 36) GROUP BY b.id, b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回146个用户杜思琪和孙月,共同的相关者",
        "output": "match(a:user where a.name='杜思琪')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='孙月') return b limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与用户孙轩有喜欢关系的帖子，然后再找出与孙轩有喜欢关系的帖子。",
        "output": "match(a:user where a.name = '孙轩')-[e:likes]->(b:post),(a:user where a.name = '孙轩')<-[e2:likes]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出百度贴吧和知乎中，共同以'forum'节点标签标记的'friend'节点列表。",
        "output": "match(a:forum where a.name='百度贴吧')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='知乎') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与软件MySQL有使用关系的软件。",
        "output": "match(a:software where a.name='Mysql')<-[e:uses]-(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找黄思琪和赵月这两位作家在公共伙伴节点中的名单。",
        "output": "match(a:author where a.name='黄思琪')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='赵月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以873,117,425,813,978作为请求点id, 以属性id作为相等条件,给出所有源点label为person,边label为person_own_account,并且满足条件目标点id不等于128的边",
        "output": "with p as (select * from (VALUES(873),(117),(425),(813),(978)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_own_account WHERE e.targetId <> 128 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为黄思思的点关联的person,并对这些person的薪资进行求和",
        "output": "match(a where a.name='黄思思')-[e:relates]->(b:person) return SUM(b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的薪资加2213的值",
        "output": "match(a:person) return a.salary + 2213",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person陈雪 knows的person,返回person relates的person的age乘49的平均值",
        "output": "match(a:person where name = '陈雪')-[e:knows]->(b:person)-[e2:relates]->(c:person) return AVG(c.age * 49)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和医生李科有创造关系的处方,再找出以诊断关系关联了李科的病人",
        "output": "match(a:doctor where a.name = '李科')-[e:creates]->(b:prescription),(a:doctor where a.name = '李科')<-[e2:diagnose]-(c:patient)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从周红出发，通过观看标签的边，走2到5步到达的电影点。",
        "output": "match(a:person where a.name='周红')-[e:watch]->{2,5}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与华为公司有关联，或者其关联人有关联的大学。",
        "output": "match(a:company where n.name=华为)-[e:relation]->{1,2}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我找名叫周科的人。",
        "output": "match(a:person where a.name = '周科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与华为公司和账号'TheShy'有关联的账号节点，并返回它们的ID。",
        "output": "match(a:company where a.name='华为')-[e]->(b:account)<-[e2]-(c:account where c.name='TheShy') return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找字数大于153的节点",
        "output": "match(a where a.wordCount > 153) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与person吴科有关系的person的性别",
        "output": "match(a:person where a.name='吴科')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为74的点的id",
        "output": "match(a where a.id = 74) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为泰坦尼克号的点的,value等于509或name不等于悬疑的relation,返回这些relation的name,和边的weight,srcId",
        "output": "match(a where a.name='泰坦尼克号')-[e:relation]->(b where b.value = 509 or b.name <> '悬疑') return b.name,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查找一个名为韩若涵和吴强的人，共同取消一个orders类型的订单？",
        "output": "match(a where a.name = '韩若涵')-[e:cancel]->(b:orders)<-[e2:cancel]-(c where c.name = '吴强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与读者点有关联的书节点，按创建时间和名称分组，返回时间和名称。",
        "output": "match(a:reader)-[e:likes]-(b:book) return b.createTime, b.name group by b.createTime, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于部门,名为经管学院的点,返回这些点的id,价值,名字",
        "output": "match(a:department where a.name = '经管学院') return a.id, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id,地址分组,计算大小除988的值",
        "output": "return a.size / 988 group by a.name, a.id, a.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为张科的点diagnose的所有patient,并对这些patient的height进行求和",
        "output": "match(a where a.name='张科')-[e:diagnose]->(b:patient) return SUM(b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表79,744,716,673,827, 源点的id等于输入表id,返回前42个身高减166的最小值大于3389的作家",
        "output": "with p as (select * from (VALUES(79),(744),(716),(673),(827)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (MIN(a.height - 166) > 3389)) RETURN a LIMIT 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,height,name, 数据为('male',165,'黄月'),('famale',159,'李梅'),('male',192,'吴梅')的子查询作为输入表, 源点的gender等于输入表gender,查找和person马科有person_likes_person关系的person,以及和person韩雪有person_likes_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES('male',165,'黄月'),('famale',159,'李梅'),('male',192,'吴梅')) as t(gender,height,name))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '马科')) -[e:person_likes_person ]->(b:person) , (c:person WHERE c.name = '韩雪') -[e2:person_likes_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表158,799,492,401, 以属性id作为相等条件,找出全部和公司美团之间有company_belong_city关系的城市",
        "output": "with p as (select * from (VALUES(158),(799),(492),(401)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '美团')) -[e:company_belong_city ]->(b:city) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于喜欢,以及满足条件权重小于133.55或f1是true,且源点id在135到168之间的边",
        "output": "match(a)-[e:likes where (e.weight < 133.55 or e.f1 = true) and (e.srcId BETWEEN 135 AND 168)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以16,948,487,801,283作为请求点id, 源点的id等于输入表id,请帮我查找user何梅的所有标签为friend的边,并根据timeStamp从大到小排列,返回196个",
        "output": "with p as (select * from (VALUES(16),(948),(487),(801),(283)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '何梅')) -[e:friend ]->(b) RETURN b ORDER BY e.timeStamp DESC LIMIT 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名为郑轩和陈科的，标签为'person'的共同爱人节点列表。",
        "output": "match(a:person where a.name='郑轩')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='陈科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与生物学院有关系并选择了课程的学生的名字。",
        "output": "match(a where a.name = '生物学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点标签等于person,边标签等于parent的边,返回这些边的weight乘128.45乘188的最大值,和srcId乘17的平均值",
        "output": "match(a:person)-[e:parent]->(b) return MAX(e.weight * 128.45 * 188), AVG(e.srcId * 17)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为张伟和郑建聪的点共同创造的,标签等于合并请求的节点",
        "output": "match(a where a.name = '张伟')-[e:creates]->(b:pullRequest)<-[e2:creates]-(c where c.name = '郑建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与何思思存在friend关系的person,person与person存在parent关系的点,返回这些点的height",
        "output": "match(a where a.name = '何思思')-[e:friend]->(b:person)-[e2:parent]->(c:person) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点创建时间不等于1998年09月28日,目标点名字为李建聪,且label为拥有的边",
        "output": "match(a where a.createTime <> '1998-09-28')-[e:has]->(b where b.name = '李建聪') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回赵若涵拥有的所有账户，以及与这些账户相关的赵若涵申请的贷款。",
        "output": "match(a:person where a.name = '赵若涵')-[e:own]->(b:account),(a:person where a.name = '赵若涵')<-[e2:apply]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person何思琪认识的person,被其他person支付的数量",
        "output": "match(a:person where a.name='何思琪')-[e:knows]->(b:person)<-[e2:pay]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算权重乘696的和",
        "output": "return SUM(a.weight * 696) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与department物理学院和经管学院都存在has关系的点",
        "output": "match(a:department where a.name='物理学院')-[e:has]->(b)<-[e2:has]-(c:department where c.name='经管学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为作家的点,返回69个",
        "output": "match(a:author) return a limit 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出纽约和北京这两个城市类型的point节点所共有的partner节点列表。",
        "output": "match(a:city where a.name='纽约')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='北京') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,gender,name, 数据为(2962,'male','周雪'),(8184,'male','张月'),(8456,'famale','韩思思')的子查询作为输入表, 源点的salary等于输入表salary,返回和person何国强有关的person,再返回和何国强person_lover_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(2962,'male','周雪'),(8184,'male','张月'),(8456,'famale','韩思思')) as t(salary,gender,name))MATCH (a:person WHERE a.salary = p.salary AND (a.name = '何国强')) -[e ]-(b:person) , (a:person) -[e2:person_lover_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据'university'标签和名称'武汉大学'，获取所有相关点的'name'属性。",
        "output": "match(a:university where a.name = '武汉大学') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Person赵强从起点出发，沿着提交类型的边走了3个跳，到达了终点。",
        "output": "match(a:person where a.name='赵强')-[e:commits]->{3,3}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person点有knows关系的person节点,且边满足条件srcId为空,目标person节点height大于51",
        "output": "match(a:person)-[e:knows where (e.srcId is null)]->(b:person where b.height > 51) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表144,565,89, 源点的id等于输入表id,请帮我查找seller has的goods,返回其源点的id除id的最小值,以及目标点的value乘39的求和值",
        "output": "with p as (select * from (VALUES(144),(565),(89)) as t(id)) MATCH (a:seller WHERE a.id = p.id) -[e:seller_has_goods ]->(b:goods) RETURN MIN(a.id / a.id), SUM(b.value * 39) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与156个buyer类型的点取消了订单有关的商品。",
        "output": "match(a:buyer)-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和教师孙国强有关的大学,称为X,再请帮我找出和这个X有关联的其他教师,以及和X有关联的大学",
        "output": "match(a:teacher where a.name = '孙国强')-[e]-(b:university), (b:university)-[e2]-(c:teacher),(b:university)-[e3]-(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person relates的person,返回其源点的age的求和值减46的和,以及目标点的height除181的值",
        "output": "match(a:person)-[e:relates]->(b:person) return SUM(SUM(a.age) - 46), b.height / 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为大学的全部点,并根据id从大到小排列",
        "output": "match(a:university) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出公司蚂蚁集团的所有伙伴,的weight的最小值除183.48的最大值",
        "output": "match(a:company where a.name= '蚂蚁集团')-[e:partner]->(b) return MAX(MIN(e.weight) / 183.48)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和course马克思原理有关的course,称为X,再查找和这个X有关联的其他course,以及和X有关联的student",
        "output": "match(a:course where a.name = '马克思原理')-[e]-(b:course), (b:course)-[e2]-(c:course),(b:course)-[e3]-(d:student) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点标签为评论，边标签为属于的边，并返回这些边的权重、权重与154.43的商以及权重除以982后的余数。",
        "output": "match(a:comment)-[e:belong]->(b) return e.weight + e.weight, e.weight / 154.43 % 982",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签等于person,目标点标签等于person,标签等于person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从处方Prescription_335出发,经过标签等于包含的边,走1到3跳到达的药品点",
        "output": "match(a:prescription where a.name='Prescription_335')-[e:contain]->{1,3}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "amount的平均值对9125.89取余的值",
        "output": "AVG(a.amount) % 9125.89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加id的求和值",
        "output": "SUM(a.id + a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为卖家或订单的点",
        "output": "match(a:seller | orders) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为164的点的年龄,id",
        "output": "match(a where a.id = 164) return a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与形势与政策存在属于关系的部门,部门与学生存在拥有关系的点,返回这些点的年龄",
        "output": "match(a where a.name = '形势与政策')-[e:belong]->(b:department)-[e2:has]->(c:student) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以917,976,929作为请求点id, 源点的id等于输入表id,查询和标签悬疑有1跳关系的person",
        "output": "with p as (select * from (VALUES(917),(976),(929)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.name = '悬疑')) -[e ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据stars,id,name分组,计算id乘62的求和值",
        "output": "return SUM(a.id * 62) group by a.stars, a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出名为何梅的person",
        "output": "match(a:person where a.name = '何梅') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除92的数量",
        "output": "COUNT(a.id / 92)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value乘334的值",
        "output": "a.value * 334",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person李轩存在支付关系,且与person何梅存在认识关系的person节点，返回这些person的名字,年龄,id,及person李轩的身高,及person何梅的年龄",
        "output": "match(a:person where a.name='李轩')-[e:pay]->(b:person)<-[e2:knows]-(c:person where c.name='何梅') return a.height,b.name, b.age, b.id,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person陈思思有关的person,再查找和陈思思喜欢的其他person,返回它们",
        "output": "match(a:person where a.name = '陈思思')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,scale,name, 数据为(45,'small','华为')的子查询作为输入表, 源点的id等于输入表id,请帮我找出标签等于大学,名为华中科技大学的点,返回这些点的名字,id,价值",
        "output": "with p as (select * from (VALUES(45,'small','华为')) as t(id,scale,name))MATCH (a:university WHERE a.id = p.id AND (a.name = '华中科技大学')) RETURN a.name, a.id, a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person韩思琪存在knows关系,且与person马建国存在likes关系的person节点，返回这些person的gender,及person韩思琪的age,及person马建国的height",
        "output": "match(a:person where a.name='韩思琪')-[e:knows]->(b:person)<-[e2:likes]-(c:person where c.name='马建国') return a.age,b.gender,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为王思琪的点发布的书,并对这些书的名字进行求和",
        "output": "match(a where a.name='王思琪')-[e:publish]->(b:book) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,value,id分组,计算id的和除id的值",
        "output": "return SUM(a.id) / a.id group by a.level, a.value, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询合并请求的三角的环,边标签为属于, 并返回这些点的id",
        "output": "match(a:pullRequest)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出满足条件name不是Prescription_123或weight大于等于392的节点",
        "output": "match(a where a.name <> 'Prescription_123' or a.weight >= 392) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为历史的标签,以及与其有关的标签,并返回历史的id和这些标签的名字",
        "output": "match(a:tag where name = '历史')-[e]-(b:tag) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出我的朋友的朋友，他在滴滴公司工作。",
        "output": "match(a:company where a.name='滴滴')-[e:friend]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出id为114的部门的朋友，再给出与部门有关系的关联。",
        "output": "match(a:department where id = '114')-[e]-(b:department)-[e2:friend]->(c), (b:department)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(915,16,43)作为请求表数据,属性分别为value,peopleNumber,id, 以属性value作为相等条件,找出标签为帖子,名为Post_162的点,返回这些点的创建时间,字数",
        "output": "with p as (select * from (VALUES(915,16,43)) as t(value,peopleNumber,id))MATCH (a:post WHERE a.value = p.value AND (a.name = 'Post_162')) RETURN a.createTime, a.wordCount ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出编辑杜思思的朋友,的f0乘574的个数",
        "output": "match(a:publisher where a.name= '杜思思')-[e:friend]->(b) return COUNT(e.f0 * 574)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部person以salary,name分组的id, 根据id降序排序",
        "output": "match(a:person) return a.id group by a.salary, a.name order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与评论Comment_243有关系的评论的字数",
        "output": "match(a:comment where a.name='Comment_243')-[e]-(b:comment) return b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家Sam咨询的卖家,被其他买家咨询的数量",
        "output": "match(a:buyer where a.name='Sam')-[e:consult]->(b:seller)<-[e2:consult]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询李若涵认识的人中，被其他人喜欢的数量",
        "output": "match(a:person where a.name='李若涵')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与名为马月和Jimmy的人知道的，且类型为person的节点。",
        "output": "match(a where a.name = '马月')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = 'Jimmy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出14个与徐思思和黄强都存在关系的部门或教师节点",
        "output": "match(a where a.name='徐思思')-[e]->(b:department | teacher)<-[e2]-(c where c.name='黄强') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person吴思思有关,且与person韩梅有关系的person节点",
        "output": "match(a:person where a.name='吴思思')-[e:likes]-(b:person)-[e2:likes]-(c:person where c.name='韩梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,gender,id, 数据为(162,'male',96), 以属性gender作为相等条件,查询标签等于teacher的点,并根据gender升序排列",
        "output": "with p as (select * from (VALUES(162,'male',96)) as t(height,gender,id))MATCH (a:teacher WHERE a.gender = p.gender) RETURN a ORDER BY a.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点满足条件id大于13或名字为马雪或薪资为8679,目标点满足条件身高是184,年龄不为空,或名字等于赵科,且标签为同事的边",
        "output": "match(a where a.id > 13 or a.name = '马雪' or a.salary = 8679)-[e:colleague]->(b where (b.height = 184 and (b.age is not null)) or b.name = '赵科') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'商品'且名称为'书'的点，并返回它们的名字。",
        "output": "match(a:goods where a.name = '书') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为lastLoginTime,name,isBlock, 数据为(1995-04-23,'Geaflow123',false)的子查询作为输入表, 源点的isBlock等于输入表isBlock,请帮我查找全部源点标签为person,边标签为person_invest_company的边,返回这些边的f0减872的最大值,和目标点id对26取余的值",
        "output": "with p as (select * from (VALUES(1995-04-23,'Geaflow123',false)) as t(lastLoginTime,name,isBlock))MATCH (a:person WHERE a.isBlock = p.isBlock) -[e:person_invest_company ]->(b) RETURN MAX(e.f0 - 872), e.targetId % 26 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从郑科出发，通过他自己的标签，走3或4步到达的账户。",
        "output": "match(a:person where a.name='郑科')-[e:own]->{3,4}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,isBlock,name, 数据为(86,false,'Geaflow123'),(31,false,'BIN'),(54,false,'Faker')的子查询作为输入表, 以属性isBlock作为相等条件,返回源点id为空或名字为王建聪,且名字不等于孙强,边标签为person_own_account,且满足条件源点id大于等于91的边,返回这些边的权重乘143.91乘111.05的求和值",
        "output": "with p as (select * from (VALUES(86,false,'Geaflow123'),(31,false,'BIN'),(54,false,'Faker')) as t(id,isBlock,name))MATCH (a WHERE a.isBlock = p.isBlock AND ((a.id IS NULL OR a.name = '王建聪') AND a.name <> '孙强')) -[e:person_own_account WHERE e.srcId >= 91 ]->(b) RETURN SUM(e.weight * 143.91 * 111.05) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询34个名为周月的点申请的标签为贷款的节点,且其金额大于等于4468.78",
        "output": "match(a where a.name='周月')-[e:apply]->(b:loan where b.amount >= 4468.78) return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以224,429,723作为请求点id, 源点的id等于输入表id,请帮我找出所有源点标签等于作家,边标签等于author_write_book的边,返回这些边的f0乘671的个数,和源点id减源点id的求和值",
        "output": "with p as (select * from (VALUES(224),(429),(723)) as t(id)) MATCH (a:author WHERE a.id = p.id) -[e:author_write_book ]->(b) RETURN COUNT(e.f0 * 671), SUM(e.srcId - e.srcId) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出赵若涵的二阶关系伙伴",
        "output": "match(a:user where a.name='赵若涵')-[e:relation]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出张思思所有的选课和所属部门信息并一起返回。",
        "output": "match(a where a.name = '张思思')-[e:selects]->(b:course),(a where a.name = '张思思')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,age,id, 数据为(7372,68,60),(2939,63,77),(3686,25,9),(1706,85,43), 以属性id作为相等条件,查找salary的数量大于等于156或salary小于8835的buyer cancel的orders的名称,以及这些orders contain的goods的名称",
        "output": "with p as (select * from (VALUES(7372,68,60),(2939,63,77),(3686,25,9),(1706,85,43)) as t(salary,age,id))MATCH (a:buyer WHERE a.id = p.id AND (COUNT(a.salary) >= 156 OR a.salary < 8835)) -[e:buyer_cancel_orders ]->(b:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询197个和类型为公司的点有雇佣关系的person,且和这些person有购买关系的软件",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:buy]->(c:software) return c limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部person的friend,或其friend的friend",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘60的值",
        "output": "a.id * 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足以下条件的university：name为'武汉大学'，id在49到98之间，或者value大于397。按照level字段降序排序，并返回前102条数据。",
        "output": "match(a:university where (a.name = '武汉大学' and (a.id BETWEEN 49 AND 98)) or a.value > 397) return a order by a.level desc limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与大学华中科技大学有关系的教师的id",
        "output": "match(a:university where a.name='华中科技大学')-[e]-(b:teacher) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与ID为178的处方相关的用户关系，并查询与这些用户有关系的合作伙伴。",
        "output": "match(a:prescription where id = '178')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找教师郑科的朋友,的源点id对170取余对553取余乘104.47的值",
        "output": "match(a:teacher where a.name= '郑科')-[e:friend]->(b) return e.srcId % 170 % 553 * 104.47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据createTime,isBlock分组,计算id除89的值",
        "output": "return a.id / 89 group by a.createTime, a.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是student的全部点,并根据name从小到大排列",
        "output": "match(a:student) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person节点相关的所有person节点，然后按照它们的id进行分组，并返回这些id。",
        "output": "match(a:person)-[e:lover]-(b:person) return b.id group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价格分组,计算id减95的最小值",
        "output": "return MIN(a.id - 95) group by a.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回和department有关联的teacher节点,并根据其id,salary分组,返回id,salary,以及salary加5095的值",
        "output": "match(a:department)-[e:department_has_teacher]-(b:teacher) return b.id, b.salary, b.salary + 5095 group by b.id, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询事项属于的仓库, 令仓库的id的值等于喜欢仓库的用户的id的最小值, 再查找仓库拥有的合并请求",
        "output": "match(a:issue)-[e:belong]->(b:repository) let b.id = MIN((b:repository)<-[e2:likes]-(c:user) => c.id) match(b:repository)-[e3:has]->(d:pullRequest) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出93个与PR-76和PR-157都存在关系的合并请求或事项或仓库节点",
        "output": "match(a where a.name='PR-76')-[e]->(b:pullRequest | issue | repository)<-[e2]-(c where c.name='PR-157') return b limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和城市点有包含关系的大学节点,且边满足条件目标点id为空,目标大学节点id小于2",
        "output": "match(a:city)-[e:contain where (e.targetId is null)]->(b:university where b.id < 2) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和名为大众影院的cinema有friend关系,或有friend的friend关系的film",
        "output": "match(a:cinema where n.name=大众影院)-[e:friend]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找到叫做越南的国家",
        "output": "match(a:country where a.name = '越南') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为周若涵的doctor,以及与其有关的medicine,并返回周若涵的age和这些medicine的weight",
        "output": "match(a:doctor where name = '周若涵')-[e]-(b:medicine) return a.age, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person杜梅投资的公司",
        "output": "match(a:company)<-[e:invest]-(b:person where b.name='杜梅') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为loan_23的,id是98且lastLoginTime不等于2007年11月05日的relation,返回这些relation的lastLoginTime,和边的timeStamp,f0",
        "output": "match(a where a.name='loan_23')-[e:relation]->(b where b.id = 98 and b.lastLoginTime <> '2007-11-05') return b.lastLoginTime,e.timeStamp, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找29个人数在764到941之间的公司,根据价值降序排列",
        "output": "match(a:company where (a.peopleNumber BETWEEN 764 AND 941)) return a order by a.value desc limit 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有标签为'买家'的点，并按性别升序排序。",
        "output": "match(a:buyer) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(31,'动作',120),(15,'动作',46),(68,'古代',26),(14,'文艺',62)的子查询作为输入表, 源点的name等于输入表name,请帮我查找以belong关系关联了film神探狄仁杰的comment",
        "output": "with p as (select * from (VALUES(31,'动作',120),(15,'动作',46),(68,'古代',26),(14,'文艺',62)) as t(id,name,value))MATCH (a:film WHERE a.name = p.name AND (a.name = '神探狄仁杰')) <-[e:comment_belong_film ]-(b:comment) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "提供所有与人有关联的标签，以及那些通过拥有关系与其他电影相关联的标签。",
        "output": "match(a:person where a.id = '6')-[e]-(b:tag)<-[e2:has]-(c:film) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person吴轩 属于的公司,返回公司 创造的软件的价值乘611乘90的最大值",
        "output": "match(a:person where name = '吴轩')-[e:belong]->(b:company)-[e2:creates]->(c:software) return MAX(c.value * 611 * 90)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出大学重庆大学的标签等于伙伴的边,并根据目标点id降序排列,返回151个",
        "output": "match(a:university where a.name = '重庆大学')-[e:partner]->(b) return b order by e.targetId desc limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为处方的点,并根据名字降序排列",
        "output": "match(a:prescription) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和账号有关联的贷款节点,并根据其权重,金额分组,返回权重,金额,以及id除84的最小值",
        "output": "match(a:account)-[e:repay]-(b:loan) return b.weight, b.amount, MIN(b.id / 84) group by b.weight, b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表466,476,294, 源点的id等于输入表id,请帮我查找所有和person Alan之间有person_family_person关系的person",
        "output": "with p as (select * from (VALUES(466),(476),(294)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = 'Alan')) -[e:person_family_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "在知乎论坛中搜索person。",
        "output": "match(a:person)<-[e:contain]-(b:forum where b.name='知乎') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与陈强有支付关系且喜欢过他的两个人。",
        "output": "match(a:person where a.name = '陈强')-[e:pay]->(b:person),(a:person where a.name = '陈强')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和user有关联的post节点,并根据其lang分组,返回lang,以及value除995的最大值",
        "output": "match(a:user)-[e:publish]-(b:post) return b.lang, MAX(b.value / 995) group by b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从pullRequest PR-128出发,经过标签为belong的边,走3到6跳到达的repository点",
        "output": "match(a:pullRequest where a.name='PR-128')-[e:belong]->{3,6}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与'person'类型节点有关联的'person'节点，并进一步查询这些节点之间的关联关系。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出软件Calcite 使用的软件,返回软件 使用的软件的星数减星数的值",
        "output": "match(a:software where name = 'Calcite')-[e:uses]->(b:software)-[e2:uses]->(c:software) return c.stars - c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,性别,名字分组,计算salary的最小值乘5161的最小值",
        "output": "return MIN(MIN(a.salary) * 5161) group by a.age, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与药品有关系的药品节点,且药品节点的权重为空,并返回这些药品的id的最小值减id的值,以及药品的id减12的最小值",
        "output": "match(a:medicine)-[e]->(b:medicine where (b.weight is null)) return MIN(b.id) - b.id, MIN(b.id - 12)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(true,176.77,161)作为请求表数据,属性分别为f1,weight,srcId, 以属性f1作为相等条件,请帮我找出所有类型为person的点",
        "output": "with p as (select * from (VALUES(true,176.77,161)) as t(f1,weight,srcId))MATCH (a:person WHERE a.f1 = p.f1) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出city以area分组的peopleNumber, 根据peopleNumber升序排序",
        "output": "match(a:city) return a.peopleNumber group by a.area order by a.peopleNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以699,379作为请求点id, 以属性id作为相等条件,查找与名为孙宏和杜思思的点共同发布的,label为帖子的节点",
        "output": "with p as (select * from (VALUES(699),(379)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '孙宏')) -[e:user_publish_post ]->(b:post) <-[e2:user_publish_post ]-(c WHERE c.name = '杜思思') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为计算机学院的部门,以及与其有关的学生,并返回计算机学院的价值和这些学生的薪资",
        "output": "match(a:department where name = '计算机学院')-[e]-(b:student) return a.value, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以包含关系关联了person赵若涵的论坛",
        "output": "match(a:person where a.name='赵若涵')<-[e:forum_contain_person]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找账号Faker还款的贷款,以及申请这些贷款的公司, 令账号的上次登录时间等于账号的名字的最小值,令公司的id等于贷款的id的最小值乘90除231, 返回账号的是否冻结,贷款的金额,公司的名字",
        "output": "match(a:account where name = 'Faker')-[e:repay]->(b:loan)<-[e2:apply]-(c:company) let a.lastLoginTime = MIN(a.name),let c.id = MIN(b.id) * 90 / 231 return a.isBlock,b.amount,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找repository的partner,或其partner的partner",
        "output": "match(a:repository)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出徐国强和孙月都喜欢的点",
        "output": "match(a:user where a.name='徐国强')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='孙月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部id为155的账号关联的贷款,和以申请关系关联了这些贷款的其他公司",
        "output": "match(a:account where a.id = 155)-[e]-(b:loan)<-[e2:apply]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点id不等于99且level在2到2之间,边类型为belong,且f1不是true或f1小于152.25,且targetId大于60的边,返回这些边的weight除165.68的值",
        "output": "match(a where a.id <> 99 and (a.level BETWEEN 2 AND 2))-[e:belong where (e.f1 <> true or e.f1 < 152.25) and e.targetId > 60]->(b) return e.weight / 165.68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王若涵和何若涵共有的朋友列表，一共有29人。",
        "output": "match(a:user where a.name='王若涵')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='何若涵') return b limit 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和部门体育学院有拥有关系的学生,再给出以拥有关系关联了体育学院的学生",
        "output": "match(a:department where a.name = '体育学院')-[e:has]->(b:student),(a:department where a.name = '体育学院')<-[e2:has]-(c:student)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出认识person孙月支付的person,的person",
        "output": "match(a:person where name = '孙月')-[e:pay]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是仓库的点有拥有关系的用户,并且和这些用户有喜欢关系的仓库,并且和这些仓库有拥有关系的事项",
        "output": "match(a:repository)-[e:has]->(b:user)-[e2:likes]->(c:repository)-[e3:has]->(d:issue) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回161个处方Prescription_355和Prescription_261,共同的伙伴",
        "output": "match(a:prescription where a.name='Prescription_355')-[e:partner]->(b)<-[e2:partner]-(c:prescription where c.name='Prescription_261') return b limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber分组,计算id减52的值",
        "output": "return a.id - 52 group by a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件id大于等于20或value不为空,且value在251到359之间的节点",
        "output": "match(a where (a.id >= 20 or (a.value is not null)) and (a.value BETWEEN 251 AND 359)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为person的点,并根据身高从小到大排列",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,salary, 数据为(71,'王建国',1801),(20,'郑国强',3207),(65,'张思琪',7593),(59,'王梅',8664)的子查询作为输入表, 以属性salary作为相等条件,查询全部与吴若涵存在person_creates_comment关系的comment,comment与film存在comment_belong_film关系的点,返回这些点的value",
        "output": "with p as (select * from (VALUES(71,'王建国',1801),(20,'郑国强',3207),(65,'张思琪',7593),(59,'王梅',8664)) as t(id,name,salary))MATCH (a WHERE a.salary = p.salary AND (a.name = '吴若涵')) -[e:person_creates_comment ]->(b:comment) -[e2:comment_belong_film ]->(c:film) RETURN c.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询6个和label为person的点有喜欢关系的person,并且和这些person有支付关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person) return c limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为商品的点,返回171个",
        "output": "match(a:goods) return a limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关的人，或者这些人再往上追溯的关联人员",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回height为37的author write的book的名称,以及这些book knows的book的名称",
        "output": "match(a:author where a.height = 37)-[e:write]->(b:book)-[e2:knows]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与company腾讯存在cooperate关系,且与company阿里存在cooperate关系的university节点，返回这些university的level,id,name,及company腾讯的id,及company阿里的scale",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company where c.name='阿里') return a.id,b.level, b.id, b.name,c.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与陈轩和马雪有关联的55个人。",
        "output": "match(a where a.name='陈轩')-[e]->(b:person)<-[e2]-(c where c.name='马雪') return b limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出电影院上映的电影,返回其源点的id乘3的值,以及目标点的value的个数乘654的值",
        "output": "match(a:cinema)-[e:releases]->(b:film) return a.id * 3, COUNT(b.value) * 654",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找知网论坛",
        "output": "match(a:forum where a.name = '知网') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询183个与周雪和杜轩都存在关系的cinema节点",
        "output": "match(a where a.name='周雪')-[e]->(b:cinema)<-[e2]-(c where c.name='杜轩') return b limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询法学院和物理学院之间存在的任何has关系。",
        "output": "match(a:department where a.name='法学院')-[e:has]->(b)<-[e2:has]-(c:department where c.name='物理学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到软件合作伙伴的合作伙伴。",
        "output": "match(a:software)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有卖家的伙伴,或其伙伴的伙伴",
        "output": "match(a:seller)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person孙红拥有的账号,以及拥有这些账号的person",
        "output": "match(a:person where name = '孙红')-[e:own]->(b:account)<-[e2:own]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出满足条件语言是c,id大于45的节点",
        "output": "match(a where a.lang = 'c' and a.id > 45) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按薪水和年龄对所有患者进行分组，并根据ID从大到小排序。",
        "output": "match(a:patient) return a.id group by a.salary, a.age order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为四川大学的点belong的city",
        "output": "match(a where a.name='四川大学')-[e:belong]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到赵建国和何红都喜欢的人。",
        "output": "match(a:user where a.name='赵建国')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='何红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和用户周宏有关的标签,再请帮我找出和周宏发布的其他帖子,返回它们",
        "output": "match(a:user where a.name = '周宏')-[e]-(b:tag), (a:user)-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "金额加5885.72的值",
        "output": "a.amount + 5885.72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出37个person王雪和周国强,共同的朋友",
        "output": "match(a:person where a.name='王雪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='周国强') return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与Bob有关联的家庭成员，以及以父母关系与Bob相关的人员。",
        "output": "match(a:person where a.name = 'Bob')-[e:family]->(b:person),(a:person where a.name = 'Bob')<-[e2:parent]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回student以id,salary,height分组的name, 根据name从大到小排序",
        "output": "match(a:student) return a.name group by a.id, a.salary, a.height order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与韩强有朋友的友人，以及与韩强有同事关系的同事。",
        "output": "match(a:person where a.name = '韩强')-[e:friend]->(b:person),(a:person where a.name = '韩强')<-[e2:colleague]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Prescription_336的prescription,以及与其有关的medicine,并返回Prescription_336的createTime和这些medicine的price",
        "output": "match(a:prescription where name = 'Prescription_336')-[e]-(b:medicine) return a.createTime, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有标签为student或teacher的点",
        "output": "match(a:student | teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找软件Zookeeper使用的软件,以及提交这些软件的person, 令person的价值等于软件的名字的和,令软件(a)的语言等于软件(b)的价值的最大值,令软件的性别等于person的身高乘163, 返回软件(a)的id,软件(b)的价值,person(c)的身高",
        "output": "match(a:software where name = 'Zookeeper')-[e:uses]->(b:software)<-[e2:commits]-(c:person) let c.value = SUM(b.name),let a.lang = MAX(b.value),let a.gender = c.height * 163 return a.id,b.value,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回标签为医生的所有点,并根据id降序排列",
        "output": "match(a:doctor) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点标签为person,边标签为申请,并且满足条件权重小于等于135.99或f1不是true的边",
        "output": "match(a:person)-[e:apply where e.weight <= 135.99 or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为徐伟的,身高大于等于193的朋友,返回这些朋友的身高,和边的权重,f0,f1",
        "output": "match(a where a.name='徐伟')-[e:friend]->(b where b.height >= 193) return b.height,e.weight, e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询发布用户Jack喜欢的帖子,的用户",
        "output": "match(a:user where name = 'Jack')-[e:likes]->(b:post)<-[e2:publish]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为重庆大学的点属于的城市",
        "output": "match(a where a.name='重庆大学')-[e:belong]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,name,height分组,计算salary加salary的值",
        "output": "return a.salary + a.salary group by a.salary, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找属于部门传染部的医生,和这些医生诊断的病人",
        "output": "match(a:department where name = '传染部')<-[e:belong]-(b:doctor)-[e2:diagnose]->(c:patient) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出loan loan_41的全部relation,的weight减167.97除164.49的求和值",
        "output": "match(a:loan where a.name= 'loan_41')-[e:relation]->(b) return SUM((e.weight - 167.97) / 164.49)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有person的伙伴,或其伙伴的伙伴",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司Bilibili属于的城市,以及属于这些城市的公司, 令公司(a)的规格等于公司(c)的价值,令公司的id等于公司的规格, 返回公司(a)的规格,城市(b)的价值,公司(c)的id",
        "output": "match(a:company where name = 'Bilibili')-[e:belong]->(b:city)<-[e2:belong]-(c:company) let a.scale = c.value,let c.id = c.scale return a.scale,b.value,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与person张月存在pay关系且与person黄建聪存在knows关系的person节点的id,person张月的身高，以及person黄建聪的性别。",
        "output": "match(a:person where a.name='张月')-[e:pay]->(b:person)<-[e2:knows]-(c:person where c.name='黄建聪') return a.height,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加76的值",
        "output": "a.id + 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与腾讯和华为都有关联的贷款节点，并返回它们的ID。",
        "output": "match(a:company where a.name='腾讯')-[e]->(b:loan)<-[e2]-(c:company where c.name='华为') return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出182名身高在172到195之间或ID小于65的个人，按姓名升序排列。",
        "output": "match(a:person where a.id < 65 or (a.height BETWEEN 172 AND 195)) return a order by a.name asc limit 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找128个和标签为person的点有likes关系的person,且和这些person有likes关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person) return c limit 128",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字不等于李伟,性别不是famale的买家咨询的卖家的名称,以及这些卖家 拥有的商品的名称",
        "output": "match(a:buyer where a.name <> '李伟' and a.gender <> 'famale')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出位于美国的城市",
        "output": "match(a:city)<-[e:contain]-(b:country where b.name='美国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点height大于等于177或height大于182,边标签等于belong,且srcId减188的数量不等于162且weight为空,或weight不为空的边,返回这些边的f0除642的值",
        "output": "match(a where a.height >= 177 or a.height > 182)-[e:belong where (COUNT(e.srcId - 188) <> 162 and (e.weight is null)) or (e.weight is not null)]->(b) return e.f0 / 642",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id升序排列的，name最大值为256的37个medicine",
        "output": "match(a:medicine where MAX(a.name) = 256) return a order by a.id asc limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回company apply的loan, 令loan的amount的值等于applyloan的company的id的平均值, 再查找loan deposit的account",
        "output": "match(a:company)-[e:apply]->(b:loan) let b.amount = AVG((b:loan)<-[e2:apply]-(c:company) => c.id) match(b:loan)-[e3:deposit]->(d:account) return b.amount, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点性别等于famale,边类型是购买,且权重不为空或f0对944取余大于948,且权重大于162.58的边,返回这些边的权重除149.67的值",
        "output": "match(a where a.gender = 'famale')-[e:buy where ((e.weight is not null) or e.f0 % 944 > 948) and e.weight > 162.58]->(b) return e.weight / 149.67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为吴轩的person,以及与其有关的person,并返回吴轩的salary和这些person的age",
        "output": "match(a:person where name = '吴轩')-[e]-(b:person) return a.salary, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点salary不为空,边类型是creates,且满足条件weight减122.61的最大值小于729且weight在129.29到184.84之间,或f1为true的边,返回这些边的srcId加srcId的数量",
        "output": "match(a where (a.salary is not null))-[e:creates where (MAX(e.weight - 122.61) < 729 and (e.weight BETWEEN 129.29 AND 184.84)) or e.f1 = true]->(b) return COUNT(e.srcId + e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person张强relates的person, 令person(b)的id等于person(a)的name的最大值, 返回person(a)的height, person(b)的height",
        "output": "match(a:person where a.name='张强')-[e:relates]->(b:person) let b.id = MAX(a.name) return a.height,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从person周轩出发,经过标签等于colleague的边,走2跳到达的person点",
        "output": "match(a:person where a.name='周轩')-[e:colleague]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找与person周思思有person_watch_film关系的2跳的环",
        "output": "match(a:person where name = '周思思')-[e:person_watch_film]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为121的person有关的person的同事, 再请帮我查找和person有关系的父母",
        "output": "match(a:person where id = 121)-[e]-(b:person)-[e2:colleague]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被买家陈国强取消的订单,和陈国强取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where name = '陈国强')-[e2:cancel]->(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person周轩的全部类型为伙伴的边,并根据权重从大到小排列,返回70个",
        "output": "match(a:person where a.name = '周轩')-[e:partner]->(b) return b order by e.weight desc limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有按照id、name和value分组的tag，并根据name进行降序排序。",
        "output": "match(a:tag) return a.name group by a.id, a.name, a.value order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回中国军事论坛中喜剧标签下用户节点的年龄和名称。",
        "output": "match(a:forum where a.name='中国军事论坛')-[e]->(b:user)<-[e2]-(c:tag where c.name='喜剧') return b.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出申请person黄轩申请的贷款,的person",
        "output": "match(a:person where name = '黄轩')-[e:apply]->(b:loan)<-[e2:apply]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person李月有关系的公司或person,返回这些点的id,名字,规格",
        "output": "match(a:person where a.name='李月')-[e]-(b:company | person) return b.id, b.name, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Lj', 61作为输入调用pageRank函数,返回id, value",
        "output": "Call PAGERANK('Lj', 61) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以956,67,901作为请求点id, 以属性id作为相等条件,查询名为Light的点repay的全部loan,并对这些点的amount进行求和",
        "output": "with p as (select * from (VALUES(956),(67),(901)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Light')) -[e:account_repay_loan ]->(b:loan) RETURN SUM(b.amount) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询作家的3度的环",
        "output": "match(a:author)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用KHOP函数,以'TD'作为输入,返回id, kValue",
        "output": "Call KHOP('TD') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数对236取余的求和值",
        "output": "SUM(a.wordCount % 236)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为person,名为何宏的点,返回这些点的身高,薪资,名字",
        "output": "match(a:person where a.name = '何宏') return a.height, a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出175个和标签等于person的点有喜欢关系的person,以及和这些person有喜欢关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person) return c limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与作家类型相关的书籍，并进一步查找这些书籍之间的引用关系。",
        "output": "match(a:author)-[e:write]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询周雪的点支付的person,然后帮我查询周雪被认识的person,一起返回",
        "output": "match(a where a.name = '周雪')-[e:pay]->(b:person),(a where a.name = '周雪')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为34的forum contain的post, 并将post有关的user的height的最小值赋值给post的lang, 接着查询post的lang小于34的post has的tag",
        "output": "match(a:forum where a.id = 34)-[e:contain]->(b:post) let b.lang = MIN((b:post)-[e2]-(c:user) => c.height) match(b:post where b.lang < 34)-[e3:has]->(d:tag) return b.lang, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点满足条件id为空且name不是重庆大学,或name不等于重庆大学,目标点满足条件id小于31且value是344,且类型为has的边",
        "output": "match(a where ((a.id is null) and a.name <> '重庆大学') or a.name <> '重庆大学')-[e:has]->(b where b.id < 31 and b.value = 344) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时满足以下条件的点：标签为医生，属于某个部门，该部门拥有医生，医生对病人进行了诊断。",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:diagnose]->(d:patient) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部阿里的点creates的software,然后返回阿里被belong的person,一起返回",
        "output": "match(a where a.name = '阿里')-[e:creates]->(b:software),(a where a.name = '阿里')<-[e2:belong]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与作家马建国有撰写关系，且引用了书《呐喊》的书节点，并返回这些书的类别、ID、创建时间、马建国的年龄以及《呐喊》这本书的名称。",
        "output": "match(a:author where a.name='马建国')-[e:write]->(b:book)<-[e2:refers]-(c:book where c.name='呐喊') return a.age,b.category, b.id, b.createTime,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与买家韩国强有查看关系的商品和与买家赵伟有创造关系的订单。",
        "output": "match(a:buyer where a.name = '韩国强')-[e:look]->(b:goods),(c:buyer where c.name = '赵伟')-[e2:creates]->(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部person的相关者,或其相关者的相关者",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person黄强认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='黄强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,salary分组,计算age对8取余的值",
        "output": "return a.age % 8 group by a.name, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为病人,名为张科的点,返回这些点的身高,性别,id",
        "output": "match(a:patient where a.name = '张科') return a.height, a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和论坛CSDN之间有包含关系的帖子",
        "output": "match(a:forum where a.name='CSDN')-[e:contain]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以460,179,980,342,35作为请求点id, 源点的id等于输入表id,查找类型为person的全部点,并根据身高从大到小排列",
        "output": "with p as (select * from (VALUES(460),(179),(980),(342),(35)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ORDER BY a.height DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,height,id, 数据为('周科',170,89),('赵伟',199,67),('马建聪',169,15),('王建国',173,92)的子查询作为输入表, 以属性id作为相等条件,给出标签为student_selects_course,且满足条件f0大于682或目标点id不是15或f1不等于false的边",
        "output": "with p as (select * from (VALUES('周科',170,89),('赵伟',199,67),('马建聪',169,15),('王建国',173,92)) as t(name,height,id))MATCH (a WHERE a.id = p.id) -[e:student_selects_course WHERE e.f0 > 682 OR e.targetId <> 15 OR e.f1 <> FALSE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为has,以及targetId为空,srcId不是140且targetId大于119的边",
        "output": "match(a)-[e:has where (e.targetId is null) and e.srcId <> 140 and e.targetId > 119]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('郑梅',199,'male'),('吴月',154,'famale'),('韩若涵',153,'famale'),('周红',152,'famale')作为请求表数据,属性分别为name,height,gender, 源点的height等于输入表height,找出前150个标签等于person_parent_person的边",
        "output": "with p as (select * from (VALUES('郑梅',199,'male'),('吴月',154,'famale'),('韩若涵',153,'famale'),('周红',152,'famale')) as t(name,height,gender))MATCH (a WHERE a.height = p.height) -[e:person_parent_person ]->(b) RETURN e LIMIT 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询university has的department,返回其源点的value加414的值,以及目标点的value减value的值",
        "output": "match(a:university)-[e:has]->(b:department) return a.value + 414, b.value - b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与Alan有喜欢关系的人",
        "output": "match(a:person where a.name='Alan')<-[e:likes]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询卖家陈建国的所有伙伴,的目标点id减118的最大值",
        "output": "match(a:seller where a.name= '陈建国')-[e:partner]->(b) return MAX(e.targetId - 118)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为陈轩和周强的点共同撰写的,标签为书的节点",
        "output": "match(a where a.name = '陈轩')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '周强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以486,803,734作为请求点id, 源点的id等于输入表id,返回所有与orders有关系的buyer节点,且buyer节点的age除64加183大于等于199,并返回这些点的salary减1187除69的值,以及id加id对height取余的个数",
        "output": "with p as (select * from (VALUES(486),(803),(734)) as t(id)) MATCH (a:orders WHERE a.id = p.id) -[e ]->(b:buyer WHERE b.age / 64 + 183 >= 199) RETURN (b.salary - 1187) / 69, COUNT(b.id + b.id % b.height) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为何建聪的点选择的课程",
        "output": "match(a where a.name='何建聪')-[e:selects]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有用户的关联人，以及他们关联人的关联人",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有和名为Comment_415的评论有伙伴关系,或有伙伴的伙伴关系的电影",
        "output": "match(a:comment where n.name=Comment_415)-[e:partner]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与Kate有pay关系、与何梅有likes关系的人。这些人包括他们的性别、姓名和年龄，以及Kate的性别和何梅的薪水。",
        "output": "match(a:person where a.name='kate')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='何梅') return a.gender,b.gender, b.name, b.age,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询person的关联人或关联人的关联人。",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person孙建聪和陈梅都存在认识关系的点",
        "output": "match(a:person where a.name='孙建聪')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='陈梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "星数加137的最小值",
        "output": "MIN(a.stars + 137)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有和名为百度贴吧的论坛有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:forum where n.name=百度贴吧)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以217,452作为请求点id, 源点的id等于输入表id,帮我查询cinema好视影院releases的film,被其他comment belong的数量",
        "output": "with p as (select * from (VALUES(217),(452)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.name = '好视影院')) -[e:cinema_releases_film ]->(b:film) <-[e2:comment_belong_film ]-(c:comment) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部id为49的合并请求关联的事项,和以拥有关系关联了这些事项的其他仓库",
        "output": "match(a:pullRequest where a.id = 49)-[e]-(b:issue)<-[e2:has]-(c:repository) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和名为马宏的person有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:person where n.name=马宏)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和person郑轩之间有恋人关系的person",
        "output": "match(a:person where a.name='郑轩')-[e:lover]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从病人陈雪出发,经过标签等于接受的边,走3到5跳到达的处方点",
        "output": "match(a:patient where a.name='陈雪')-[e:accept]->{3,5}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为黄轩的,身高不等于181且名字是Sam的相关者,返回这些相关者的性别,和边的权重,源点id,f1",
        "output": "match(a where a.name='黄轩')-[e:relation]->(b where b.height <> 181 and b.name = 'Sam') return b.gender,e.weight, e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前15个薪资为空或薪资在1082到1174之间,且年龄是95的医生",
        "output": "match(a:doctor where ((a.salary is null) or (a.salary BETWEEN 1082 AND 1174)) and a.age = 95) return a limit 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找3个和类型为用户的点有发布关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:user)-[e:publish]->(b:post)-[e2:has]->(c:tag) return c limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与电影泰坦尼克号拥有关联的标签，以及以拥有关系关联了泰坦尼克号的标签。",
        "output": "match(a:film where a.name = '泰坦尼克号')-[e:has]->(b:tag),(a:film where a.name = '泰坦尼克号')<-[e2:has]-(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有满足以下条件的用户：年龄在33到81之间，名字不是赵思琪，身高不为空，并按照身高从小到大排序。这些用户的数量应该是135。",
        "output": "match(a:user where (a.age BETWEEN 33 AND 81) and a.name <> '赵思琪' and (a.height is not null)) return a order by a.height asc limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为100的点的薪资,身高,年龄",
        "output": "match(a where a.id = 100) return a.salary, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找编辑吴强发布的书, 令编辑的年龄等于编辑的年龄的个数,令编辑的薪资等于编辑的id,令书的id等于编辑的名字, 返回编辑的id, 书的id",
        "output": "match(a:publisher where a.name='吴强')-[e:publish]->(b:book) let a.age = COUNT(a.age),let a.salary = a.id,let b.id = a.name return a.id,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找书认识的书,返回其源点的id乘id的值,以及目标点的id的和乘16对70取余的个数",
        "output": "match(a:book)-[e:knows]->(b:book) return a.id * a.id, COUNT(SUM(b.id) * 16 % 70)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询郑梅和赵思思的共同朋友，共有154个。",
        "output": "match(a:person where a.name='郑梅')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵思思') return b limit 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以接受关系关联了处方Prescription_327的病人",
        "output": "match(a:prescription where a.name='Prescription_327')<-[e:accept]-(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person吴思思有关系的person的名字",
        "output": "match(a:person where a.name='吴思思')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与loan loan_99有关,且与account Faker有关系的account节点",
        "output": "match(a:loan where a.name='loan_99')-[e:deposit]-(b:account)-[e2:transfer]-(c:account where c.name='Faker') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与帖子有关系的帖子节点,且帖子节点的价值为空,并返回这些帖子的字数对619取余的平均值,以及帖子的id对95取余的平均值",
        "output": "match(a:post)-[e]->(b:post where (b.value is null)) return AVG(b.wordCount % 619), AVG(b.id % 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以194,213,245作为请求点id, 以属性id作为相等条件,返回源点height不为空,gender不是male,或salary的数量不是21,目标点name等于我不是药神且id小于36,且类型为person_watch_film的边",
        "output": "with p as (select * from (VALUES(194),(213),(245)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.height IS NOT NULL AND a.gender <> 'male' OR COUNT(a.salary) <> 21)) -[e:person_watch_film ]->(b WHERE b.name = '我不是药神' AND b.id < 36) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与company Bilibili存在creates关系,且与software Kafka存在uses关系的software节点，返回这些software的name,及company Bilibili的scale,及software Kafka的lang",
        "output": "match(a:company where a.name='Bilibili')-[e:creates]->(b:software)<-[e2:uses]-(c:software where c.name='Kafka') return a.scale,b.name,c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找地址不是西区,权重不等于315的部门拥有的医生的名称,以及这些医生 创造的处方的名称",
        "output": "match(a:department where a.address <> '西区' and a.weight <> 315)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为127的medicine关联的prescription,和以creates关系关联了这些prescription的其他doctor",
        "output": "match(a:medicine where a.id = 127)-[e]-(b:prescription)<-[e2:creates]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和prescription Prescription_190有2跳或3跳关系的prescription",
        "output": "match(a:prescription where a.name='Prescription_190')-[e]->{2,3}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为韩梅的person,以及与其有关的person,并返回韩梅的age和这些person的salary",
        "output": "match(a:person where name = '韩梅')-[e]-(b:person) return a.age, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为85的person认识的person, 并将person有关的person的身高的求和值赋值给person(b)的身高, 接着查询person(b)的身高小于85的person认识的person",
        "output": "match(a:person where a.id = 85)-[e:knows]->(b:person) let b.height = SUM((b:person)-[e2]-(c:person) => c.height) match(b:person where b.height < 85)-[e3:knows]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到company所属的城市",
        "output": "match(a:city)<-[e:belong]-(b:company where b.name='字节') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person黄思思支付的person,以及认识这些person的person",
        "output": "match(a:person where name = '黄思思')-[e:pay]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以122,225作为请求点id, 以属性id作为相等条件,返回类型为处方的所有点,并根据创建时间降序排列",
        "output": "with p as (select * from (VALUES(122),(225)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) RETURN a ORDER BY a.createTime DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person徐建国knows的person, 令person(b)的height等于person(a)的id,令person的age等于person的height对height取余,令person的salary等于person的name, 返回person(a)的gender, person(b)的salary",
        "output": "match(a:person where a.name='徐建国')-[e:knows]->(b:person) let b.height = a.id,let a.age = a.height % a.height,let a.salary = a.name return a.gender,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为13的点的类别,字数,id",
        "output": "match(a where a.id = 13) return a.category, a.wordCount, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(88,'历史',892),(77,'文艺',537),(21,'古代',304)的子查询作为输入表, 源点的id等于输入表id,查找名为Comment_494的评论",
        "output": "with p as (select * from (VALUES(88,'历史',892),(77,'文艺',537),(21,'古代',304)) as t(id,name,value))MATCH (a:comment WHERE a.id = p.id AND (a.name = 'Comment_494')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和person点有认识关系的person节点,且边满足条件源点id在13到167之间,目标person节点身高小于166",
        "output": "match(a:person)-[e:knows where (e.srcId BETWEEN 13 AND 167)]->(b:person where b.height < 166) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛天涯论坛包含的帖子节点拥有的标签",
        "output": "match(a:forum where a.name = '天涯论坛')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有与大学有关联的城市，以及这些城市所包含的所有大学。",
        "output": "match(a:university where a.id = '119')-[e]-(b:university)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于loan的点,返回71个",
        "output": "match(a:loan) return a limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和pullRequest PR-238有2度关系的pullRequest",
        "output": "match(a:pullRequest where a.name='PR-238')-[e]->{2,2}(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与用户相关的帖子，以及喜欢这些帖子的其他用户。",
        "output": "match(a:user where a.id = '52')-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司以id,名字,规格分组的人数, 根据人数从小到大排序",
        "output": "match(a:company) return a.peopleNumber group by a.id, a.name, a.scale order by a.peopleNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为Post_480和Post_376的点共同拥有的,label为标签的节点",
        "output": "match(a where a.name = 'Post_480')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_376') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前101个类型为has的边",
        "output": "match(a)-[e:has]->(b) return e limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与账号Zeus有转账关系的所有账号，以及所有与Zeus有关联的贷款还款记录。",
        "output": "match(a:account where a.name = 'Zeus')-[e:transfer]->(b:account),(a:account where a.name = 'Zeus')<-[e2:repay]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出145个和label为doctor的点有diagnose关系的patient,并且和这些patient有accept关系的prescription",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为周梅的点的,创建时间不等于2024年12月23日且类别不等于小说的朋友,返回这些朋友的id,和边的f1",
        "output": "match(a where a.name='周梅')-[e:friend]->(b where b.createTime <> '2024-12-23' and b.category <> '小说') return b.id,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为FSM的点的,创建时间不等于2015年01月17日,权重不为空的朋友,返回这些朋友的权重,和边的目标点id,f0,权重",
        "output": "match(a where a.name='FSM')-[e:friend]->(b where b.createTime <> '2015-01-17' and (b.weight is not null)) return b.weight,e.targetId, e.f0, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据weight,createTime,id分组,计算weight乘803的数量",
        "output": "return COUNT(a.weight * 803) group by a.weight, a.createTime, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找seller李建聪的relation,的targetId对30取余的和",
        "output": "match(a:seller where a.name= '李建聪')-[e:relation]->(b) return SUM(e.targetId % 30)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为药品的点,并根据id降序排列",
        "output": "match(a:medicine) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出谷歌的点属于的城市,然后给出谷歌被合作的大学,一起返回",
        "output": "match(a where a.name = '谷歌')-[e:belong]->(b:city),(a where a.name = '谷歌')<-[e2:cooperate]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(191,83,'male')作为请求表数据,属性分别为height,age,gender, 源点的age等于输入表age,查询和person有关联的公司节点,并根据其价值,名字,规格分组,返回价值,名字,规格,以及value的最小值加512的值",
        "output": "with p as (select * from (VALUES(191,83,'male')) as t(height,age,gender))MATCH (a:person WHERE a.age = p.age) -[e:person_belong_company ]-(b:company) RETURN b.value, b.name, b.scale, MIN(b.value) + 512 GROUP BY b.value, b.name, b.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person支付的person, 令person(b)的身高的值等于认识person的person的薪资的最大值, 再查找person喜欢的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.height = MAX((b:person)<-[e2:knows]-(c:person) => c.salary) match(b:person)-[e3:likes]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person孙月有关的软件,称为X,再请帮我找出和这个X有关联的其他公司,以及和X有关联的person",
        "output": "match(a:person where a.name = '孙月')-[e]-(b:software), (b:software)-[e2]-(c:company),(b:software)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回咨询卖家李轩的买家,和这些买家查看的商品",
        "output": "match(a:seller where name = '李轩')<-[e:consult]-(b:buyer)-[e2:look]->(c:goods) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与大学有合作关系的公司，以及这些公司与哪些大学有合作关系，以及这些大学又与哪些公司有合作关系。",
        "output": "match(a:university)-[e:cooperate]->(b:company)-[e2:cooperate]->(c:university)-[e3:cooperate]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询id小于等于28,名字不等于眼科且权重在16到885之间的节点",
        "output": "match(a where a.id <= 28 and a.name <> '眼科' and (a.weight BETWEEN 16 AND 885)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与城市广州存在包含关系,且与大学复旦大学存在合作关系的公司节点，返回这些公司的价值,及城市广州的价值,及大学复旦大学的名字",
        "output": "match(a:city where a.name='广州')-[e:contain]->(b:company)<-[e2:cooperate]-(c:university where c.name='复旦大学') return a.value,b.value,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询徐若涵认识的人，以及徐若涵有关系的人，一并返回。",
        "output": "match(a where a.name = '徐若涵')-[e:knows]->(b:person),(a where a.name = '徐若涵')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出李宏和徐思思的共同同学。",
        "output": "match(a:student where a.name='李宏')-[e:relation]->(b)<-[e2:relation]-(c:student where c.name='徐思思') return b limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部用户以id分组的身高, 根据身高从小到大排序",
        "output": "match(a:user) return a.height group by a.id order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部标签等于商品或买家的点",
        "output": "match(a:goods | buyer) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为何轩的点的,id大于71或身高不是85的伙伴,返回这些伙伴的薪资,和边的f0",
        "output": "match(a where a.name='何轩')-[e:partner]->(b where b.id > 71 or b.height <> 85) return b.salary,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找两个学院（法学院和土木学院）的共同教师节点。",
        "output": "match(a where a.name = '法学院')-[e:has]->(b:teacher)<-[e2:has]-(c where c.name = '土木学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为李思思的person,以及与其有关的person,并返回李思思的薪资和这些person的身高",
        "output": "match(a:person where name = '李思思')-[e]-(b:person) return a.salary, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person徐红 支付的person,返回person 认识的person的id加3的最大值",
        "output": "match(a:person where name = '徐红')-[e:pay]->(b:person)-[e2:knows]->(c:person) return MAX(c.id + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,salary,gender, 数据为(153,6861,'famale'),(171,8607,'male')的子查询作为输入表, 以属性salary作为相等条件,给出名为计算机网络的book",
        "output": "with p as (select * from (VALUES(153,6861,'famale'),(171,8607,'male')) as t(height,salary,gender))MATCH (a:book WHERE a.salary = p.salary AND (a.name = '计算机网络')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到源点标签为人，边标签为likes的边，返回这些边的f0的和以及f0的最大值减去948。",
        "output": "match(a:person)-[e:likes]->(b) return e.f0 + e.f0, MAX(e.f0) - 948",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(false,47,2016-05-10),(false,29,2018-01-02)作为请求表数据,属性分别为isBlock,id,lastLoginTime, 以属性lastLoginTime作为相等条件,返回所有id为15的person关联的account,和以deposit关系关联了这些account的其他loan",
        "output": "with p as (select * from (VALUES(false,47,2016-05-10),(false,29,2018-01-02)) as t(isBlock,id,lastLoginTime))MATCH (a:person WHERE a.lastLoginTime = p.lastLoginTime AND (a.id = '15')) -[e ]-(b:account) <-[e2:loan_deposit_account ]-(c:loan) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高从大到小排序，查询用户分组的身高信息。",
        "output": "match(a:user) return a.height group by a.height order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和帖子Post_484有关系的用户,返回这些点的字数,id,名字",
        "output": "match(a:post where a.name='Post_484')-[e]-(b:user) return b.wordCount, b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与椅子和苹果都有关联的seller节点，数量为87。",
        "output": "match(a where a.name='椅子')-[e]->(b:seller)<-[e2]-(c where c.name='苹果') return b limit 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和reader孙国强有likes关系的book,再查找以likes关系关联了孙国强的book",
        "output": "match(a:reader where a.name = '孙国强')-[e:likes]->(b:book),(a:reader where a.name = '孙国强')<-[e2:likes]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 其他买家看了张宏所看的商品数量",
        "output": "match(a:buyer where a.name='张宏')-[e:look]->(b:goods)<-[e2:look]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和label为论坛的点有包含关系的用户,并且和这些用户有喜欢关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:likes]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据createTime,lastLoginTime,value分组,计算id减19的最大值",
        "output": "return MAX(a.id - 19) group by a.createTime, a.lastLoginTime, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回130个名为陈建国的点关联的标签为person的节点,且其年龄不为空",
        "output": "match(a where a.name='陈建国')-[e:relates]->(b:person where (b.age is not null)) return b limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找156个名为孙雪的点own的标签为account的节点,且其id不为空且id对20取余不是18",
        "output": "match(a where a.name='孙雪')-[e:own]->(b:account where (b.id is not null) and b.id % 20 <> 18) return b limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person徐思思和张思思都存在own关系的点",
        "output": "match(a:person where a.name='徐思思')-[e:own]->(b)<-[e2:own]-(c:person where c.name='张思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与buyer郑建国有关,且与goods书有关系的orders节点",
        "output": "match(a:buyer where a.name='郑建国')-[e:creates]-(b:orders)-[e2:contain]-(c:goods where c.name='书') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和城市有关联的大学节点,并根据其id分组,返回id,以及等级除3的值",
        "output": "match(a:city)-[e:contain]-(b:university) return b.id, b.level / 3 group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生周雪诊断的病人,以及诊断这些病人的医生",
        "output": "match(a:doctor where name = '周雪')-[e:diagnose]->(b:patient)<-[e2:diagnose]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有用户之间的关系，或关系之间的关系。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点类型是person,目标点类型是person,类型是person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点label为forum,边label为contain,以及满足条件weight小于等于198.33的边",
        "output": "match(a:forum)-[e:contain where e.weight <= 198.33]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出医生张雪的朋友,的f0除f0的值",
        "output": "match(a:doctor where a.name= '张雪')-[e:friend]->(b) return e.f0 / e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,id, 数据为(9424,150,5),(6176,163,81), 源点的id等于输入表id,查找person黄宏的所有标签等于伙伴的边,并根据f1升序排列,返回19个",
        "output": "with p as (select * from (VALUES(9424,150,5),(6176,163,81)) as t(salary,height,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '黄宏')) -[e:partner ]->(b) RETURN b ORDER BY e.f1 LIMIT 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找city巴黎 belong的country,返回country contain的city的peopleNumber对6372取余的值",
        "output": "match(a:city where name = '巴黎')-[e:belong]->(b:country)-[e2:contain]->(c:city) return c.peopleNumber % 6372",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,amount,weight, 数据为(38,7994.05,635),(28,8511.41,150),(10,3251.77,494),(85,9242.40,204)的子查询作为输入表, 以属性id作为相等条件,请帮我查找所有类型是贷款的点",
        "output": "with p as (select * from (VALUES(38,7994.05,635),(28,8511.41,150),(10,3251.77,494),(85,9242.40,204)) as t(id,amount,weight))MATCH (a:loan WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以979,722作为请求点id, 以属性id作为相等条件,查找以认识关系关联了作家杜思思的作家",
        "output": "with p as (select * from (VALUES(979),(722)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.name = '杜思思')) <-[e:author_knows_author ]-(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为吴若涵的person,以及与其有关的person,并返回吴若涵的gender和这些person的height",
        "output": "match(a:person where name = '吴若涵')-[e]-(b:person) return a.gender, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为杜红的person,以及与其有关的person,并返回杜红的id和这些person的gender",
        "output": "match(a:person where name = '杜红')-[e]-(b:person) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回徐宏的伙伴的伙伴的关系",
        "output": "match(a:user where a.name='徐宏')-[e:partner]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边标签等于恋人, 并返回这些点的id",
        "output": "match(a:person)-[e:lover]->(b)-[e2:lover]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以拥有关系关联了账号Faker的person",
        "output": "match(a:account where a.name='Faker')<-[e:own]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回reader的1跳的环",
        "output": "match(a:reader)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找doctor徐宏belong的department, 令department的id等于department的name,令doctor的gender等于doctor的height加198,令department的id等于department的name, 返回doctor的height, department的id",
        "output": "match(a:doctor where a.name='徐宏')-[e:belong]->(b:department) let b.id = b.name,let a.gender = a.height + 198,let b.id = b.name return a.height,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有用户的关系，或者这些关系中的关系。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点类型是person,边类型是own的边,返回这些边的srcId的最大值除185的平均值,和targetId加19的平均值",
        "output": "match(a:person)-[e:own]->(b) return AVG(MAX(e.srcId) / 185), AVG(e.targetId + 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出名为'知网'和'中国军事论坛'的论坛公共节点。",
        "output": "match(a:forum where a.name='知网')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='中国军事论坛') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与university重庆大学有关,且与country越南有关系的city节点",
        "output": "match(a:university where a.name='重庆大学')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='越南') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为82的点的年龄",
        "output": "match(a where a.id = 82) return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询和标记为'person'的节点有父母关系的节点，并且这些节点有家人关系，并且这些节点有朋友关系。",
        "output": "match(a:person)-[e:parent]->(b:person)-[e2:family]->(c:person)-[e3:friend]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与张国强和马建国有发布关系的所有书籍。",
        "output": "match(a:publisher where a.name = '张国强')-[e:publish]->(b:book),(c:publisher where c.name = '马建国')-[e2:publish]->(d:book) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与repository Mybatis存在has关系,且与issue ISSUE-177存在creates关系的user节点，返回这些user的gender,salary,age,及repository Mybatis的id,及issue ISSUE-177的id",
        "output": "match(a:repository where a.name='Mybatis')-[e:has]->(b:user)<-[e2:creates]-(c:issue where c.name='ISSUE-177') return a.id,b.gender, b.salary, b.age,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点类型为user,边类型为user_creates_issue的边,返回这些边的f0的求和值减990减115乘68对129取余的值,和targetId乘196的值",
        "output": "match(a:user)-[e:user_creates_issue]->(b) return (SUM(e.f0) - 990 - 115) * 68 % 129, e.targetId * 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从person王思思出发,经过标签为喜欢的边,走2到4跳到达的person点",
        "output": "match(a:person where a.name='王思思')-[e:likes]->{2,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减319的数量",
        "output": "COUNT(a.value - 319)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出类型是author,名为赵轩的点,返回这些点的name,id,age",
        "output": "match(a:author where a.name = '赵轩') return a.name, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以751,696,116作为请求点id, 源点的id等于输入表id,给出名为呐喊的书,以及与其有关的读者,并返回呐喊的id和这些读者的性别",
        "output": "with p as (select * from (VALUES(751),(696),(116)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (name = '呐喊')) -[e ]-(b:reader) RETURN a.id, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与孙建国和吴建聪有关系的34位教师。",
        "output": "match(a where a.name='孙建国')-[e]->(b:teacher)<-[e2]-(c where c.name='吴建聪') return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找标签为orders_contain_goods,并且目标点id不等于165或f1不是true的边",
        "output": "match(a)-[e:orders_contain_goods where e.targetId <> 165 or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,gender, 数据为('吴国强',80,'male'),('吴雪',38,'male'),('黄宏',95,'male'), 以属性id作为相等条件,找出名为孙若涵和吴月的,标签等于person的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES('吴国强',80,'male'),('吴雪',38,'male'),('黄宏',95,'male')) as t(name,id,gender))MATCH (a:person WHERE a.id = p.id AND (a.name = '孙若涵')) -[e:friend ]->(b) <-[e2:friend ]-(c:person WHERE c.name = '吴月') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找男性且身高不为159或薪水大于等于197的54个人，并按年龄降序排列。",
        "output": "match(a:person where (a.gender = 'male' and a.height <> 159) or COUNT(a.salary * 7179 / a.id / 4214) >= 197) return a order by a.age desc limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出123个person赵思思和韩红,共同的parent",
        "output": "match(a:person where a.name='赵思思')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='韩红') return b limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为内科的点的,薪资不为空的朋友,返回这些朋友的id,和边的目标点id,源点id",
        "output": "match(a where a.name='内科')-[e:friend]->(b where (b.salary is not null)) return b.id,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找age在20到50之间且age小于等于63且id大于等于91的节点",
        "output": "match(a where (a.age BETWEEN 20 AND 50) and a.age <= 63 and a.id >= 91) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减73的最小值",
        "output": "MIN(a.id - 73)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出贷款loan_51存款的账号,以及转账这些账号的账号, 令账号(b)的id等于账号(c)的id的和, 返回贷款(a)的权重,账号(b)的名字,账号(c)的是否冻结",
        "output": "match(a:loan where name = 'loan_51')-[e:deposit]->(b:account)<-[e2:transfer]-(c:account) let b.id = SUM(c.id) return a.weight,b.name,c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与这些帖子相关的论坛和喜欢这些帖子的其他用户。",
        "output": "match(a:forum where a.id = '75')-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与用户张梅有关系的事项, 返回和这些事项有关联的事项的,权重除权重的值",
        "output": "match(a:user where a.name= '张梅')-[e]-(b:issue)-[e2]-(c:issue) return c.weight / c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以981,470,965,943作为请求点id, 源点的id等于输入表id,查找和book孤城有关的author,称为X,再查找和这个X有关联的其他publisher,以及和X有关联的author",
        "output": "with p as (select * from (VALUES(981),(470),(965),(943)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.name = '孤城')) -[e ]-(b:author) , (b:author) -[e2 ]-(c:publisher) , (b:author) -[e3 ]-(d:author) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和书罪与罚有关系的读者或编辑或作家,返回这些点的id,性别,薪资",
        "output": "match(a:book where a.name='罪与罚')-[e]-(b:reader | publisher | author) return b.id, b.gender, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出59个非男性编辑，按性别升序排列。",
        "output": "match(a:publisher where a.gender <> 'male') return a order by a.gender asc limit 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为属于,且目标点id在19到131之间的边",
        "output": "match(a)-[e:belong where (e.targetId BETWEEN 19 AND 131)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表963,932,875, 以属性id作为相等条件,请帮我查找名为李思琪的,id为空或语言不是French的朋友,返回这些朋友的价值,和边的时间戳,f0,目标点id",
        "output": "with p as (select * from (VALUES(963),(932),(875)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '李思琪')) -[e:friend ]->(b WHERE b.id IS NULL OR b.lang <> 'French') RETURN b.value, e.timeStamp, e.f0, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与部门传染部有关系的处方的id",
        "output": "match(a:department where a.name='传染部')-[e]-(b:prescription) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表554,820,50, 源点的id等于输入表id,查找所有名为Light的点转账的账号",
        "output": "with p as (select * from (VALUES(554),(820),(50)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Light')) -[e:account_transfer_account ]->(b:account) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与王建国有关联的投资公司，以及与王建国有关联的贷款申请。",
        "output": "match(a:person where a.name = '王建国')-[e:invest]->(b:company),(a:person where a.name = '王建国')<-[e2:apply]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以598,156作为请求点id, 源点的id等于输入表id,帮我查询等级在1到3之间,名字不是复旦大学且id小于42的节点",
        "output": "with p as (select * from (VALUES(598),(156)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.level BETWEEN ASYMMETRIC 1 AND 3 AND a.name <> '复旦大学' AND a.id < 42)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和名为陈雪的学生有朋友关系,或有朋友的朋友关系的课程",
        "output": "match(a:student where n.name=陈雪)-[e:friend]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型是课程,边类型是属于,并且权重为空,目标点id大于101且权重大于等于124.76的边",
        "output": "match(a:course)-[e:belong where (e.weight is null) and e.targetId > 101 and e.weight >= 124.76]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与Bilibili有合作关系的软件，再找出与Bilibili合作的软件。",
        "output": "match(a:company where a.name = 'Bilibili')-[e:creates]->(b:software),(a:company where a.name = 'Bilibili')<-[e2:creates]-(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是用户,名为韩建国的点,返回这些点的id,性别",
        "output": "match(a:user where a.name = '韩建国') return a.id, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出薪资加2046乘1023大于197,身高为空的person认识的person的名称,以及这些person 关联的person的名称",
        "output": "match(a:person where (a.salary + 2046) * 1023 > 197 and (a.height is null))-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对id取余的值",
        "output": "a.id % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表781, 以属性id作为相等条件,给出源点满足条件lang大于等于672,目标点满足条件value小于48,且类型是post_has_tag的边",
        "output": "with p as (select * from (VALUES(781)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.lang >= 672)) -[e:post_has_tag ]->(b WHERE b.value < 48) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与张思琪相关的评论，以及张思琪创建的其他评论，并将它们返回。",
        "output": "match(a:person where a.name = '张思琪')-[e]-(b:comment), (a:person)-[e2:creates]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,age, 数据为(5,8638,83),(2,8425,3),(85,9416,40),(93,7284,89)的子查询作为输入表, 源点的age等于输入表age,帮我查询和person有关联的person节点,并根据其薪资分组,返回薪资,以及年龄减28的值",
        "output": "with p as (select * from (VALUES(5,8638,83),(2,8425,3),(85,9416,40),(93,7284,89)) as t(id,salary,age))MATCH (a:person WHERE a.age = p.age) -[e:person_family_person ]-(b:person) RETURN b.salary, b.age - 28 GROUP BY b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回仓库XXRepo拥有的用户,以及拥有这些用户的仓库",
        "output": "match(a:repository where name = 'XXRepo')-[e:has]->(b:user)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询学生陈轩选择的课程,以及选择这些课程的学生",
        "output": "match(a:student where name = '陈轩')-[e:selects]->(b:course)<-[e2:selects]-(c:student) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为教师的点,并根据id从小到大排列",
        "output": "match(a:teacher) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为deposit,且满足条件f1不是false且f1等于true,srcId是73的边",
        "output": "match(a)-[e:deposit where e.f1 <> false and e.f1 = true and e.srcId = 73]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出155个和标签为person的点有喜欢关系的评论,以及和这些评论有属于关系的电影",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部和大学华中科技大学之间有university_has_department关系的部门",
        "output": "match(a:university where a.name='华中科技大学')-[e:university_has_department]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 卖家和买家之间建立的订单是一种创造性的关系。",
        "output": "match(a:buyer)-[e:creates]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找电影伙伴，或伙伴的伙伴。",
        "output": "match(a:film)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家的三角的环,边标签等于创造, 并返回这些点的id",
        "output": "match(a:buyer)-[e:creates]->(b)-[e2:creates]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前185个weight大于627的prescription",
        "output": "match(a:prescription where a.weight > 627) return a limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为65的company cooperate的university, 并将university有关的city的value的和赋值给university的level, 接着查询university的level小于65的university belong的city",
        "output": "match(a:company where a.id = 65)-[e:cooperate]->(b:university) let b.level = SUM((b:university)-[e2]-(c:city) => c.value) match(b:university where b.level < 65)-[e3:belong]->(d:city) return b.level, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询吴思琪观看的电影，返回每部电影的标签名称和值。",
        "output": "match(a:person where name = '吴思琪')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.name, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('腾讯',754,'medium'),('阿里',126,'large')作为请求表数据,属性分别为name,value,scale, 源点的name等于输入表name,返回和loan有关联的account节点,并根据其lastLoginTime,value分组,返回lastLoginTime,value,以及value减value的和",
        "output": "with p as (select * from (VALUES('腾讯',754,'medium'),('阿里',126,'large')) as t(name,value,scale))MATCH (a:loan WHERE a.name = p.name) -[e:loan_deposit_account ]-(b:account) RETURN b.lastLoginTime, b.value, SUM(b.value - b.value) GROUP BY b.lastLoginTime, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以拥有关系关联了事项ISSUE-143的仓库",
        "output": "match(a:issue where a.name='ISSUE-143')<-[e:has]-(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有与名为何伟的读者有联系或相关联的书。",
        "output": "match(a:reader where n.name=何伟)-[e:relation]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为徐伟的,名字不是周强且薪资大于等于58的伙伴,返回这些伙伴的身高,和边的目标点id,权重",
        "output": "match(a where a.name='徐伟')-[e:partner]->(b where b.name <> '周强' and b.salary >= 58) return b.height,e.targetId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与患者孙思琪有关联，且与处方Prescription_115有关联的医生节点，返回它们的ID和年龄。",
        "output": "match(a:patient where a.name='孙思琪')-[e]->(b:doctor)<-[e2]-(c:prescription where c.name='Prescription_115') return b.id, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age乘15的个数",
        "output": "COUNT(a.age * 15)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出publisher吴若涵publish的book节点relates的book",
        "output": "match(a:publisher where a.name = '吴若涵')-[e:publish]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询课程程序设计的全部朋友,的srcId的平均值除45的值",
        "output": "match(a:course where a.name= '程序设计')-[e:friend]->(b) return AVG(e.srcId) / 45",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询61个id小于等于73或name等于孙伟的person,根据id从小到大排列",
        "output": "match(a:person where a.id <= 73 or a.name = '孙伟') return a order by a.id asc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与杜国强有关的人，以及杜国强认识的所有其他人的列表。",
        "output": "match(a:person where a.name = '杜国强')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为孙梅的,name不等于谷歌,id不为空的partner,返回这些partner的peopleNumber,和边的f0,f1",
        "output": "match(a where a.name='孙梅')-[e:partner]->(b where b.name <> '谷歌' and (b.id is not null)) return b.peopleNumber,e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回性别为male或身高小于等于172或id乘80小于7763的节点",
        "output": "match(a where a.gender = 'male' or a.height <= 172 or a.id * 80 < 7763) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前6个满足条件价格不是59的书",
        "output": "match(a:book where a.price <> 59) return a limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('吴宏','famale',86)作为请求表数据,属性分别为name,gender,age, 以属性name作为相等条件,找出所有源点label为person,目标点label为person,label为person_family_person的边",
        "output": "with p as (select * from (VALUES('吴宏','famale',86)) as t(name,gender,age))MATCH (a:person WHERE a.name = p.name) -[e:person_family_person ]->(b:person) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与forum知网有关,且与post Post_176有关系的user节点",
        "output": "match(a:forum where a.name='知网')-[e:contain]-(b:user)-[e2:publish]-(c:post where c.name='Post_176') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和公司华为有1跳关系的公司",
        "output": "match(a:company where a.name='华为')-[e]->{1,1}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以581作为请求点id, 以属性id作为相等条件,请帮我查找id为45的点的createTime",
        "output": "with p as (select * from (VALUES(581)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '45')) RETURN a.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为PR-50的合并请求,以及与其有关的仓库,并返回PR-50的名字和这些仓库的id",
        "output": "match(a:pullRequest where name = 'PR-50')-[e]-(b:repository) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询华中科技大学合作伙伴的相关合作伙伴",
        "output": "match(a:university where a.name='华中科技大学')-[e:partner]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供生理盐水药品",
        "output": "match(a:medicine where a.name = '生理盐水') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从事项ISSUE-194出发,经过标签为属于的边,走3到5跳到达的仓库点",
        "output": "match(a:issue where a.name='ISSUE-194')-[e:belong]->{3,5}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以喜欢关系关联了person孙强的person",
        "output": "match(a:person where a.name='孙强')<-[e:likes]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有与腾讯存在company_belong_city关系的城市,城市与大学存在city_contain_university关系的点,返回这些点的价值",
        "output": "match(a where a.name = '腾讯')-[e:company_belong_city]->(b:city)-[e2:city_contain_university]->(c:university) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回课程的1跳以内的环",
        "output": "match(a:course)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回按id从大到小排序的国家点列表",
        "output": "match(a:country) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前8个标签等于上映的边",
        "output": "match(a)-[e:releases]->(b) return e limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与用户吴建国有publish关系的post，以及那些与吴建国有publish关系的post。",
        "output": "match(a:user where a.name = '吴建国')-[e:publish]->(b:post),(a:user where a.name = '吴建国')<-[e2:publish]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找164个与Prescription_221和Prescription_127都存在关系的医生或药品或病人节点",
        "output": "match(a where a.name='Prescription_221')-[e]->(b:doctor | medicine | patient)<-[e2]-(c where c.name='Prescription_127') return b limit 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和标签等于person的点有colleague关系的person,并且和这些person有friend关系的person,并且和这些person有parent关系的person",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:friend]->(c:person)-[e3:parent]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与教师Tom有关,且与部门文学院有关系的课程节点",
        "output": "match(a:teacher where a.name='Tom')-[e:teach]-(b:course)-[e2:belong]-(c:department where c.name='文学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是商品或卖家的点",
        "output": "match(a:goods | seller) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出Kate所知的作者，返回该作者的姓名、年龄、性别。",
        "output": "match(a:author where name = 'kate')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c.name, c.age, c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家郑雪取消的订单,以及创造这些订单的买家",
        "output": "match(a:buyer where name = '郑雪')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找仓库拥有的合并请求,返回其源点的星数除星数的最小值,以及目标点的id加94的值",
        "output": "match(a:repository)-[e:has]->(b:pullRequest) return MIN(a.stars / a.stars), b.id + 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询company cooperate的university, 令university的level的值等于containuniversity的city的name的平均值, 再查找university cooperate的company",
        "output": "match(a:company)-[e:cooperate]->(b:university) let b.level = AVG((b:university)<-[e2:contain]-(c:city) => c.name) match(b:university)-[e3:cooperate]->(d:company) return b.level, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person赵建聪的label为parent的边,并根据f1升序排列,返回151个",
        "output": "match(a:person where a.name = '赵建聪')-[e:person_parent_person]->(b) return b order by e.f1 asc limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为size,name,value, 数据为(63,'计算机学院',89), 以属性name作为相等条件,查找teacher何轩的所有标签等于friend的边,并根据srcId从小到大排列,返回2个",
        "output": "with p as (select * from (VALUES(63,'计算机学院',89)) as t(size,name,value))MATCH (a:teacher WHERE a.name = p.name AND (a.name = '何轩')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId LIMIT 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资减薪资的值",
        "output": "a.salary - a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为58的标签有关的用户的相关者, 再给出和用户有关系的伙伴",
        "output": "match(a:tag where id = 58)-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与大学中国科技大学有关系的大学, 返回和这些大学有关联的国家的,面积乘面积的最大值",
        "output": "match(a:university where a.name= '中国科技大学')-[e]-(b:university)-[e2]-(c:country) return MAX(c.area * c.area)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李强存在likes关系的comment,comment与film存在belong关系的点,返回这些点的category",
        "output": "match(a where a.name = '李强')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为BIN的account,以及与其有关的company,并返回BIN的lastLoginTime和这些company的scale",
        "output": "match(a:account where name = 'BIN')-[e]-(b:company) return a.lastLoginTime, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找存款账户，被其他贷款存款的数量，其中存款账户名是defaultName。",
        "output": "match(a:loan where a.name='defaultName')-[e:deposit]->(b:account)<-[e2:deposit]-(c:loan) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出71个与Prescription_221和Prescription_229都存在关系的部门节点",
        "output": "match(a where a.name='Prescription_221')-[e]->(b:department)<-[e2]-(c where c.name='Prescription_229') return b limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点类型是订单,边类型是orders_contain_goods,且满足条件f0乘706除27的个数不是630,目标点id不等于542,f1不是107.54的边",
        "output": "match(a:orders)-[e:orders_contain_goods where COUNT(e.f0 * 706 / 27) <> 630 and e.targetId <> 542 and e.f1 <> 107.54]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "大小乘971的值",
        "output": "a.size * 971",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(158,4614,6),(183,8831,94)作为请求表数据,属性分别为height,salary,id, 源点的salary等于输入表salary,查询前198个名字不是1091.22且销量不为空的商品",
        "output": "with p as (select * from (VALUES(158,4614,6),(183,8831,94)) as t(height,salary,id))MATCH (a:goods WHERE a.salary = p.salary AND (a.name <> 1091.22 AND a.sellerNumber IS NOT NULL)) RETURN a LIMIT 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为陈若涵的买家为朋友，或者与该买家的朋友为朋友的订单。",
        "output": "match(a:buyer where n.name=陈若涵)-[e:friend]->{1,2}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为黄伟的repository,以及与其有关的pullRequest,并返回黄伟的name和这些pullRequest的createTime",
        "output": "match(a:repository where name = '黄伟')-[e]-(b:pullRequest) return a.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标注为人的人有支付关系的人，以及他们喜欢的人，还有与他们有支付关系的人。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:likes]->(c:person)-[e3:pay]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点年龄大于47,id等于82,id的数量对28取余大于等于159,目标点学分为空,且标签等于选择的边",
        "output": "match(a where a.age > 47 and a.id = 82 and COUNT(a.id) % 28 >= 159)-[e:selects]->(b where (b.credit is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为35的前113个国家，按照价值从低到高排序。",
        "output": "match(a:country where a.id = 35) return a order by a.value asc limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与user吴雪有关系的repository, 返回和这些repository有关联的user的,height减199乘1444的平均值",
        "output": "match(a:user where a.name= '吴雪')-[e]-(b:repository)-[e2]-(c:user) return AVG((c.height - 199) * 1444)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person何宏的所有标签等于伙伴的边,并根据目标点id升序排列,返回194个",
        "output": "match(a:person where a.name = '何宏')-[e:partner]->(b) return b order by e.targetId asc limit 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找155到157身高的人喜欢的人，以及他们认识的人的名称。",
        "output": "match(a:person where (a.height BETWEEN 155 AND 157))-[e:likes]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回陈科的朋友的朋友的朋友",
        "output": "match(a:person where a.name='陈科')-[e:friend]->(b)-[e2:colleague]->(c)-[e3:colleague]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为person,名为韩建聪的点,返回这些点的height,name,id",
        "output": "match(a:person where a.name = '韩建聪') return a.height, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表327,921, 以属性id作为相等条件,查找以使用关系关联了软件Hadoop的软件",
        "output": "with p as (select * from (VALUES(327),(921)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.name = 'Hadoop')) <-[e:software_uses_software ]-(b:software) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有从country类型的源点到city类型的target点，且类型为contain的边。",
        "output": "match(a:country)-[e:contain]->(b:city) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于商品的点,返回168个",
        "output": "match(a:goods) return a limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部Post_265的点has的tag,然后找出Post_265被contain的forum,一起返回",
        "output": "match(a where a.name = 'Post_265')-[e:has]->(b:tag),(a where a.name = 'Post_265')<-[e2:contain]-(c:forum) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出由医生李梅和马伟共同创建的点",
        "output": "match(a:doctor where a.name='李梅')-[e:creates]->(b)<-[e2:creates]-(c:doctor where c.name='马伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询账号Geaflow123还款的贷款,被其他person申请的数量",
        "output": "match(a:account where a.name='Geaflow123')-[e:repay]->(b:loan)<-[e2:apply]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "area的最大值加67976的值",
        "output": "MAX(a.area) + 67976",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,age,height, 数据为(97,67,182)的子查询作为输入表, 源点的height等于输入表height,给出和company微软之间有company_employee_person关系的person",
        "output": "with p as (select * from (VALUES(97,67,182)) as t(id,age,height))MATCH (a:company WHERE a.height = p.height AND (a.name = '微软')) -[e:company_employee_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有film的id减94的值",
        "output": "match(a:film) return a.id - 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和名为计算机学院的部门有朋友关系,或有朋友的朋友关系的学生",
        "output": "match(a:department where n.name=计算机学院)-[e:friend]->{1,2}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回订单Order_231包含的商品, 令订单的价格等于订单的id的最小值,令商品的id等于订单的名字, 返回订单的id, 商品的价格",
        "output": "match(a:orders where a.name='Order_231')-[e:contain]->(b:goods) let a.price = MIN(a.id),let b.id = a.name return a.id,b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值加524减面积加77313的最小值",
        "output": "MIN(a.value + 524 - a.area + 77313)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表993,154, 源点的id等于输入表id,给出和person黄思琪有person_commits_software关系的软件,以及和公司美团有company_creates_software关系的软件,将它们都返回",
        "output": "with p as (select * from (VALUES(993),(154)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '黄思琪')) -[e:person_commits_software ]->(b:software) , (c:company WHERE c.name = '美团') -[e2:company_creates_software ]->(d:software) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出商品的3度的环",
        "output": "match(a:goods)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与仓库FSM有关系的仓库的创建时间",
        "output": "match(a:repository where a.name='FSM')-[e]-(b:repository) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王国强的点创造的合并请求,然后请帮我找出王国强被拥有的仓库,一起返回",
        "output": "match(a where a.name = '王国强')-[e:creates]->(b:pullRequest),(a where a.name = '王国强')<-[e2:has]-(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和用户郑国强有关的用户,再返回和郑国强发布的其他帖子,返回它们",
        "output": "match(a:user where a.name = '郑国强')-[e]-(b:user), (a:user)-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(699,61,71),(443,72,29),(163,88,46),(916,76,2)作为请求表数据,属性分别为value,size,id, 源点的id等于输入表id,请帮我找出所有徐梅的点教的课程,然后请帮我找出徐梅被拥有的部门,一起返回",
        "output": "with p as (select * from (VALUES(699,61,71),(443,72,29),(163,88,46),(916,76,2)) as t(value,size,id))MATCH (a WHERE a.id = p.id AND (a.name = '徐梅')) -[e:teacher_teach_course ]->(b:course) , (a WHERE a.name = '徐梅') <-[e2:department_has_teacher ]-(c:department) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与某人有关联的其他人，以及这些人之间的关联关系。",
        "output": "match(a:person where a.id = '51')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按地址升序排列，找出南区中权重大于或等于393的前31个地址",
        "output": "match(a:department where a.address = '南区' and a.weight >= 393) return a order by a.address asc limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点类型是用户,边类型是喜欢,且满足条件时间戳不等于2005年11月02日,f1为102,f0不是897的边",
        "output": "match(a:user)-[e:likes where e.timeStamp <> '2005-11-02' and e.f1 = 102 and e.f0 <> 897]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与id为139的物品相关的买家的朋友，再查找与买家有关系的关联。",
        "output": "match(a:goods where id = '139')-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询以contain关系关联了goods键盘的orders",
        "output": "match(a:goods where a.name='键盘')<-[e:orders_contain_goods]-(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和中国科技大学有合作或伙伴关系的公司。",
        "output": "match(a:university where n.name=中国科技大学)-[e:partner]->{1,2}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为156的用户有关的用户的相关者, 再请帮我查找和用户有关系的伙伴",
        "output": "match(a:user where id = 156)-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为103的标签关联的帖子,和以包含关系关联了这些帖子的其他论坛",
        "output": "match(a:tag where a.id = 103)-[e]-(b:post)<-[e2:contain]-(c:forum) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,credit,courseHour, 数据为(13,2,43),(64,2,22),(36,1,27),(55,1,36)的子查询作为输入表, 以属性credit作为相等条件,返回和大学华中科技大学有关的部门,称为X,再返回和这个X有关联的其他学生,以及和X有关联的部门",
        "output": "with p as (select * from (VALUES(13,2,43),(64,2,22),(36,1,27),(55,1,36)) as t(id,credit,courseHour))MATCH (a:university WHERE a.credit = p.credit AND (a.name = '华中科技大学')) -[e ]-(b:department) , (b:department) -[e2 ]-(c:student) , (b:department) -[e3 ]-(d:department) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有作家以id,薪资,年龄分组的薪资, 根据薪资从大到小排序",
        "output": "match(a:author) return a.salary group by a.id, a.salary, a.age order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与巴黎和上海都相关的事物。",
        "output": "match(a:city where a.name='巴黎')-[e:relation]->(b)<-[e2:relation]-(c:city where c.name='上海') return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表410, 以属性id作为相等条件,查询用户李伟的标签等于朋友的边,并根据源点id从大到小排列,返回99个",
        "output": "with p as (select * from (VALUES(410)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '李伟')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId DESC LIMIT 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出国家澳大利亚包含的城市,以及包含这些城市的国家, 令国家的面积等于国家的面积乘52436加88587乘70453, 返回国家(a)的名字,城市(b)的id,国家(c)的面积",
        "output": "match(a:country where name = '澳大利亚')-[e:contain]->(b:city)<-[e2:contain]-(c:country) let c.area = (c.area * 52436 + 88587) * 70453 return a.name,b.id,c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询黄思琪和孙雪之间存在喜欢关系的共同点。",
        "output": "match(a:person where a.name='黄思琪')-[e:likes]->(b)<-[e2:likes]-(c:person where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和名为法学院的部门有相关者关系,或有相关者的相关者关系的教师",
        "output": "match(a:department where n.name=法学院)-[e:relation]->{1,2}(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,weight, 数据为('Prescription_315',21,836),('Prescription_326',34,206), 源点的id等于输入表id,请帮我找出全部孙若涵的点接受的处方,然后请帮我找出孙若涵被诊断的医生,一起返回",
        "output": "with p as (select * from (VALUES('Prescription_315',21,836),('Prescription_326',34,206)) as t(name,id,weight))MATCH (a WHERE a.id = p.id AND (a.name = '孙若涵')) -[e:patient_accept_prescription ]->(b:prescription) , (a WHERE a.name = '孙若涵') <-[e2:doctor_diagnose_patient ]-(c:doctor) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和doctor点有creates关系的prescription节点,且边满足条件f0不为空,目标prescription节点name不是Prescription_376",
        "output": "match(a:doctor)-[e:creates where (e.f0 is not null)]->(b:prescription where b.name <> 'Prescription_376') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为reader,名为李国强的点,返回这些点的height",
        "output": "match(a:reader where a.name = '李国强') return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回卖家陈建国回答的买家节点创造的订单",
        "output": "match(a:seller where a.name = '陈建国')-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询处方笺编号为401的处方。",
        "output": "match(a:prescription where a.name = 'Prescription_401') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为马梅的点喜欢的评论",
        "output": "match(a where a.name='马梅')-[e:likes]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary减3154的值",
        "output": "a.salary - 3154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有和comment点有belong关系的film节点,且边满足条件srcId小于138,目标film节点满足条件value为空",
        "output": "match(a:comment)-[e:comment_belong_film where e.srcId < 138]->(b:film where (b.value is null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被作家认识数量大于187的作家,记为relationCount,再查询这些作家认识的编辑",
        "output": "match(a:author) let a.relationCount = MIN((a:author)<-[e:knows]-(b:author) => b.id) match(a where a.relationCount > 187)-[e2:knows]->(c:publisher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与买家张月购买过的手机相关的卖家节点。",
        "output": "match(a:buyer where a.name='张月')-[e:consult]-(b:seller)-[e2:has]-(c:goods where c.name='手机') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询黄科接受的处方",
        "output": "match(a:prescription)<-[e:accept]-(b:patient where b.name='黄科') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(945,2,'北京大学'),(893,3,'北京大学'),(991,1,'中国科技大学')作为请求表数据,属性分别为value,level,name, 以属性level作为相等条件,帮我查询前161个value不是195或peopleNumber大于等于2617或name不是东京的city",
        "output": "with p as (select * from (VALUES(945,2,'北京大学'),(893,3,'北京大学'),(991,1,'中国科技大学')) as t(value,level,name))MATCH (a:city WHERE a.level = p.level AND (a.value <> 195 OR a.peopleNumber >= 2617 OR a.name <> '东京')) RETURN a LIMIT 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为马建聪的节点购买的person或公司",
        "output": "match(a where a.name='马建聪')-[e:buy]->(b:person | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person张建国喜欢的person,和张建国喜欢的person",
        "output": "match(a:person)<-[e:likes]-(b:person where name = '张建国')-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标签为'person'且具有'family'关系的115个点有关联的'person'，以及与这些'person'具有'parent'关系的'person'。",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person) return c limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签等于person,目标点标签等于person,标签等于软件或公司的边",
        "output": "match(a:person)-[e:software | company]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询111个名为孙宏的点认识的标签为person的节点,且其身高乘187大于179且名字为黄科",
        "output": "match(a where a.name='孙宏')-[e:knows]->(b:person where b.height * 187 > 179 and b.name = '黄科') return b limit 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出城市中所有ID小于等于9的大学节点，并统计这些节点所属的等级对等级取余的个数，以及level的最小值对3取余的最小值。",
        "output": "match(a:city)-[e]->(b:university where b.id <= 9) return COUNT(b.level % b.level), MIN(MIN(b.level) % 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person杜月有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '杜月')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以744,714,62,845作为请求点id, 源点的id等于输入表id,请帮我找出147个规格等于761,规格不是large且规格不等于small的公司,根据价值从大到小排列",
        "output": "with p as (select * from (VALUES(744),(714),(62),(845)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.scale = 761 AND a.scale <> 'large' AND a.scale <> 'small')) RETURN a ORDER BY a.value DESC LIMIT 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和医生Amily有关系的药品,返回这些点的价格,名字,权重",
        "output": "match(a:doctor where a.name='Amily')-[e]-(b:medicine) return b.price, b.name, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与韩建聪和何思琪有关联的人。",
        "output": "match(a:person where a.name='韩建聪')-[e:friend]-(b:person)-[e2:parent]-(c:person where c.name='何思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出175个与Redis和SprintBoot都存在关系的person或公司或软件节点",
        "output": "match(a where a.name='Redis')-[e]->(b:person | company | software)<-[e2]-(c where c.name='SprintBoot') return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询value在277到553之间或name不等于其他的节点",
        "output": "match(a where (a.value BETWEEN 277 AND 553) or a.name <> '其他') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "amount减9181.18的值",
        "output": "a.amount - 9181.18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘96的值",
        "output": "a.id * 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以contain关系关联了company美团的city",
        "output": "match(a:company where a.name='美团')<-[e:contain]-(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出杜月的关系关系",
        "output": "match(a:person where a.name='杜月')-[e:relation]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以6, 'VA'作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(6, 'VA') yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,address, 数据为(30,'UME','C栋'),(71,'大众影院','东区')的子查询作为输入表, 源点的name等于输入表name,查找label为电影的点,返回144个",
        "output": "with p as (select * from (VALUES(30,'UME','C栋'),(71,'大众影院','东区')) as t(id,name,address))MATCH (a:film WHERE a.name = p.name) RETURN a LIMIT 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为person，边标签为knows的边。计算这些边的targetId的和加103的平均值，以及targetId减去74的最小值。",
        "output": "match(a:person)-[e:knows]->(b) return AVG(SUM(e.targetId) + 103), MIN(e.targetId - 74)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点label为seller,目标点label为buyer,label为seller或goods或orders的边",
        "output": "match(a:seller)-[e:seller | goods | orders]->(b:buyer) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与仓库Kafka和Flink都存在拥有关系的点",
        "output": "match(a:repository where a.name='Kafka')-[e:has]->(b)<-[e2:has]-(c:repository where c.name='Flink') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为张若涵的点的,名字不等于Comment_260,字数小于572的相关者,返回这些相关者的id,和边的f1,源点id",
        "output": "match(a where a.name='张若涵')-[e:relation]->(b where b.name <> 'Comment_260' and b.wordCount < 572) return b.id,e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询185个person孙强和陈梅,共同的parent",
        "output": "match(a:person where a.name='孙强')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='陈梅') return b limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和作家马雪有1到3跳关系的编辑",
        "output": "match(a:author where a.name='马雪')-[e]->{1,3}(b:publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从person王宏出发,经过类型为属于的边,走3到5度到达的公司点",
        "output": "match(a:person where a.name='王宏')-[e:belong]->{3,5}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与医生有隶属关系（belong)的部门，以及与这些部门有拥有关系（has)的医生，并且这些医生还创建过处方（creates prescription)。",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:creates]->(d:prescription) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出年龄小于等于39且名字是杜伟的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:user where a.age <= 39 and a.name = '杜伟')-[e:user_likes_post]->(b:post)-[e2:post_has_tag]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Post_157和Post_229都相关的前123个人",
        "output": "match(a:post where a.name='Post_157')-[e:relation]->(b)<-[e2:relation]-(c:post where c.name='Post_229') return b limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与徐科和陈宏都相关联的27个用户",
        "output": "match(a:user where a.name='徐科')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='陈宏') return b limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与软件Zookeeper有关系的公司的价值",
        "output": "match(a:software where a.name='Zookeeper')-[e]-(b:company) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值除88的个数",
        "output": "COUNT(a.value / 88)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点salary小于等于8332或gender不等于male,目标点name不是杜月或salary小于等于1690,且salary不为空,且label为family的边",
        "output": "match(a where a.salary <= 8332 or a.gender <> 'male')-[e:family]->(b where (b.name <> '杜月' or b.salary <= 1690) and (b.salary is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为人，目标点标签也为人的，并且带有'喜欢'标签的边。",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为中国军事论坛和推特的,标签等于论坛的点公共的朋友节点的名单",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='推特') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person有关联的person节点,并根据其id,名字分组,返回id,名字,以及薪资加薪资的最小值",
        "output": "match(a:person)-[e:likes]-(b:person) return b.id, b.name, MIN(b.salary + b.salary) group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person吴建聪关联的person节点认识的person",
        "output": "match(a:person where a.name = '吴建聪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和公司腾讯有雇佣关系的person,再返回以创造关系关联了腾讯的软件",
        "output": "match(a:company where a.name = '腾讯')-[e:employee]->(b:person),(a:company where a.name = '腾讯')<-[e2:creates]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与书有关联的书节点，过滤掉名字为'三体'的节点，并统计这些节点ID的余数对58取余加53的个数，以及ID减77对40取余的最大值。",
        "output": "match(a:book)-[e]->(b:book where b.name <> '三体') return COUNT(AVG(b.id) % 58 + 53), MAX(b.id - 77 % 40)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按照id升序，列出所有部门点。",
        "output": "match(a:department) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与李若涵存在喜欢关系的仓库,仓库与用户存在拥有关系的点,返回这些点的薪资",
        "output": "match(a where a.name = '李若涵')-[e:likes]->(b:repository)-[e2:has]->(c:user) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person杜伟观看的电影节点拥有的标签",
        "output": "match(a:person where a.name = '杜伟')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(69,158,1553),(57,176,3924)作为请求表数据,属性分别为age,height,salary, 以属性salary作为相等条件,查询所有源点满足条件age的最小值除age小于47且gender不是famale,age大于等于62,目标点满足条件age为84,height不是168,且标签等于person_colleague_person的边",
        "output": "with p as (select * from (VALUES(69,158,1553),(57,176,3924)) as t(age,height,salary))MATCH (a WHERE a.salary = p.salary AND (MIN(a.age) / a.age < 47 AND a.gender <> 'famale' AND a.age >= 62)) -[e:person_colleague_person ]->(b WHERE b.age = 84 AND b.height <> 168) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为167的点的id,名字,价值",
        "output": "match(a where a.id = 167) return a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person韩强的全部label为伙伴的边,并根据权重从小到大排列,返回151个",
        "output": "match(a:person where a.name = '韩强')-[e:partner]->(b) return b order by e.weight asc limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出价值小于等于644的节点",
        "output": "match(a where a.value <= 644) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和'吴雪'以及'三体'相关的作者信息",
        "output": "match(a:author where a.name='吴雪')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='三体') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出buyer赵国强look的goods,以及contain这些goods的orders, 令goods的name等于goods的category,令orders的name等于buyer的height,令goods的value等于orders的value, 返回buyer的name,goods的price,orders的value",
        "output": "match(a:buyer where name = '赵国强')-[e:look]->(b:goods)<-[e2:contain]-(c:orders) let b.name = b.category,let c.name = a.height,let b.value = c.value return a.name,b.price,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被作家张宏认识的作家,和张宏认识的作家",
        "output": "match(a:author)<-[e:knows]-(b:author where name = '张宏')-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person认识的person, 令person(b)的性别的值等于认识person的person的身高的求和值, 再查找person认识的person",
        "output": "match(a:person)-[e:knows]->(b:person) let b.gender = SUM((b:person)<-[e2:knows]-(c:person) => c.height) match(b:person)-[e3:knows]->(d:person) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person点有支付关系的person节点,且边满足条件源点id在36到192之间,目标person节点满足条件薪资为空",
        "output": "match(a:person)-[e:pay where (e.srcId BETWEEN 36 AND 192)]->(b:person where (b.salary is null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出113个名为孙科的点relates的类型是person的节点,且其gender不是famale或height大于等于167",
        "output": "match(a where a.name='孙科')-[e:relates]->(b:person where b.gender <> 'famale' or b.height >= 167) return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出198位女性，她们的名字是赵建聪或者身高不为179，并按照性别进行升序排序。",
        "output": "match(a:person where (a.name = '赵建聪' or a.height <> 179) and a.gender = 'famale') return a order by a.gender asc limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前181个标签等于拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是用户的点有创造关系的事项,并且和这些事项有属于关系的仓库,并且和这些仓库有拥有关系的事项",
        "output": "match(a:user)-[e:creates]->(b:issue)-[e2:belong]->(c:repository)-[e3:has]->(d:issue) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person有关联的film节点,并根据其value,category,name分组,返回value,category,name,以及id除59的最大值",
        "output": "match(a:person)-[e:watch]-(b:film) return b.value, b.category, b.name, MAX(b.id / 59) group by b.value, b.category, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person徐轩有关,且与person马轩有关系的person节点",
        "output": "match(a:person where a.name='徐轩')-[e:pay]-(b:person)-[e2:pay]-(c:person where c.name='马轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与贷款违约名关联的账户，这些账户与偿还关系有关。",
        "output": "match(a:loan where a.name='defaultName')<-[e:repay]-(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询徐伟和孙科之间共同的买家关系。",
        "output": "match(a:buyer where a.name='徐伟')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='孙科') return b limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型是医生,名为王若涵的点,返回这些点的id",
        "output": "match(a:doctor where a.name = '王若涵') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与标签为person的点有family关系的71个人，以及他们各自的lover。",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:lover]->(c:person) return c limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为BIN的点repay的loan",
        "output": "match(a where a.name='BIN')-[e:repay]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以319,762作为请求点id, 以属性id作为相等条件,帮我查询所有名为徐强的点喜欢的person",
        "output": "with p as (select * from (VALUES(319),(762)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐强')) -[e:person_likes_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高分组,计算salary的平均值对8723取余乘194的值",
        "output": "return AVG(a.salary) % 8723 * 194 group by a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(54,'悬疑',614),(85,'其他',926),(58,'喜剧',569), 以属性name作为相等条件,查询166个名为百度贴吧的点contain的标签等于person的节点,且其salary减7617减8减id大于等于16,age在38到55之间",
        "output": "with p as (select * from (VALUES(54,'悬疑',614),(85,'其他',926),(58,'喜剧',569)) as t(id,name,value))MATCH (a WHERE a.name = p.name AND (a.name = '百度贴吧')) -[e:forum_contain_person ]->(b:person WHERE b.salary - 7617 - 8 - b.id >= 16 AND b.age BETWEEN ASYMMETRIC 38 AND 55) RETURN b LIMIT 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回重庆大学。",
        "output": "match(a:university where a.name = '重庆大学') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为74的person有关的person的partner, 再找出和person有关系的friend",
        "output": "match(a:person where id = 74)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回郑科喜欢的帖子，再返回与郑科有发布关系的帖子。",
        "output": "match(a:user where a.name = '郑科')-[e:likes]->(b:post),(a:user where a.name = '郑科')<-[e2:publish]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找评论Comment_161属于的电影节点拥有的标签",
        "output": "match(a:comment where a.name = 'Comment_161')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person赵建聪喜欢的person,被其他person认识的数量",
        "output": "match(a:person where a.name='赵建聪')-[e:person_likes_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出141个名为李伟的点创造的类型为事项的节点,且其权重不为空,状态等于Running",
        "output": "match(a where a.name='李伟')-[e:creates]->(b:issue where (b.weight is not null) and b.status = 'Running') return b limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出薪资不等于41的person提交的软件的名称,以及这些软件 使用的软件的名称",
        "output": "match(a:person where a.salary <> 41)-[e:commits]->(b:software)-[e2:uses]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,scale,value分组,计算peopleNumber对619取余的数量",
        "output": "return COUNT(a.peopleNumber % 619) group by a.id, a.scale, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为software的点,返回19个",
        "output": "match(a:software) return a limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(95,140,'中国诗词论坛')作为请求表数据,属性分别为peopleNumber,value,name, 源点的peopleNumber等于输入表peopleNumber,给出被post Post_303has的tag",
        "output": "with p as (select * from (VALUES(95,140,'中国诗词论坛')) as t(peopleNumber,value,name))MATCH (a:tag WHERE a.peopleNumber = p.peopleNumber) <-[e:post_has_tag ]-(b:post WHERE b.name = 'Post_303') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person韩轩存在同事关系,且与person韩科存在同事关系的person节点，返回这些person的年龄,名字,id,及person韩轩的名字,及person韩科的性别",
        "output": "match(a:person where a.name='韩轩')-[e:colleague]->(b:person)<-[e2:colleague]-(c:person where c.name='韩科') return a.name,b.age, b.name, b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为黄科的点buy的software",
        "output": "match(a where a.name='黄科')-[e:buy]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与订单Order_224和Order_441有关的商品，返回它们的类别、价格和销量。",
        "output": "match(a:orders where a.name='Order_224')-[e]->(b:goods)<-[e2]-(c:orders where c.name='Order_441') return b.category, b.price, b.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与标签为'person'的点有'knows'关系的'person'，以及这些'person'之间的'knows'关系，以及这些'person'与'company'之间的'belong'关系。",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person)-[e3:belong]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与病人相关的处方节点，并按其权重、ID、创建时间分组，返回每个节点的权重、ID和创建时间。",
        "output": "match(a:patient)-[e:accept]-(b:prescription) return b.weight, b.id, b.createTime group by b.weight, b.id, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与city杭州有关系的company的id",
        "output": "match(a:city where a.name='杭州')-[e]-(b:company) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出person赵伟的friend,的f0对880取余的数量",
        "output": "match(a:person where a.name= '赵伟')-[e:friend]->(b) return COUNT(e.f0 % 880)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询id不等于26的节点",
        "output": "match(a where a.id <> 26) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询58个权重大于等于206或地址等于西区或权重小于63的部门,根据地址从大到小排列",
        "output": "match(a:department where a.weight >= 206 or a.address = '西区' or a.weight < 63) return a order by a.address desc limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与reader韩梅有关系的reader的gender",
        "output": "match(a:reader where a.name='韩梅')-[e]-(b:reader) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以134,620,497,350,932作为请求点id, 以属性id作为相等条件,找出所有源点类型是用户,边类型是user_publish_post的边,返回这些边的权重对138.95取余的平均值,和f0对793取余的值",
        "output": "with p as (select * from (VALUES(134),(620),(497),(350),(932)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_publish_post ]->(b) RETURN AVG(e.weight % 138.95), e.f0 % 793 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点标签为买家,目标点标签为卖家,标签为商品的边",
        "output": "match(a:buyer)-[e:goods]->(b:seller) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回191个名为Kafka的点has的标签等于pullRequest的节点,且其id对75取余大于等于959",
        "output": "match(a where a.name='Kafka')-[e:has]->(b:pullRequest where b.id % 75 >= 959) return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询论坛中国诗词论坛包含的用户节点发布的帖子",
        "output": "match(a:forum where a.name = '中国诗词论坛')-[e:contain]->(b:user)-[e2:publish]->(c:post) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person认识的person,返回其源点的身高减182的值,以及目标点的薪资加2583的值",
        "output": "match(a:person)-[e:knows]->(b:person) return a.height - 182, b.salary + 2583",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为Bob的点的,身高为空或身高等于166的朋友,返回这些朋友的薪资,和边的f1,目标点id",
        "output": "match(a where a.name='Bob')-[e:friend]->(b where (b.height is null) or b.height = 166) return b.salary,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person赵宏存在喜欢关系,且与电影我不是药神存在属于关系的评论节点，返回这些评论的字数,id,创建时间,及person赵宏的名字,及电影我不是药神的类别",
        "output": "match(a:person where a.name='赵宏')-[e:likes]->(b:comment)<-[e2:belong]-(c:film where c.name='我不是药神') return a.name,b.wordCount, b.id, b.createTime,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为孙红的节点creates的seller或goods或orders",
        "output": "match(a where a.name='孙红')-[e:creates]->(b:seller | goods | orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为王轩和何轩的,标签为author的点公共的partner节点的名单",
        "output": "match(a:author where a.name='王轩')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='何轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司申请的贷款, 令贷款的权重的值等于还款贷款的账号的是否冻结的最大值, 再查找贷款存款的账号",
        "output": "match(a:company)-[e:apply]->(b:loan) let b.weight = MAX((b:loan)<-[e2:repay]-(c:account) => c.isBlock) match(b:loan)-[e3:deposit]->(d:account) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为145的person关联的person,和以支付关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 145)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找徐科这个人。",
        "output": "match(a:person where a.name = '徐科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 筛选出标签为'person'的点，然后按照性别（gender)从大到小进行排序。",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和城市杭州之间有包含关系的大学",
        "output": "match(a:city where a.name='杭州')-[e:contain]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按字数分组查询所有评论的创建时间，并按照创建时间降序排序。",
        "output": "match(a:comment) return a.createTime group by a.wordCount order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与Geaflow123和LX001有转账关系的账号，返回这些账号的上次登录时间、创建时间，以及Geaflow123是否冻结和LX001的上次登录时间。",
        "output": "match(a:account where a.name='Geaflow123')-[e:transfer]->(b:account)<-[e2:transfer]-(c:account where c.name='LX001') return a.isBlock,b.lastLoginTime, b.createTime,c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以458,293,919,610,379作为请求点id, 源点的id等于输入表id,查找和person有关联的person节点,并根据其gender,age,id分组,返回gender,age,id,以及height的最大值减191的最小值",
        "output": "with p as (select * from (VALUES(458),(293),(919),(610),(379)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_lover_person ]-(b:person) RETURN b.gender, b.age, b.id, MIN(MAX(b.height) - 191) GROUP BY b.gender, b.age, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出university的三角的环,边类型是cooperate, 并返回这些点的id",
        "output": "match(a:university)-[e:cooperate]->(b)-[e2:cooperate]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为何建聪的person,以及与其有关的person,并返回何建聪的名字和这些person的年龄",
        "output": "match(a:person where name = '何建聪')-[e]-(b:person) return a.name, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和名为UME的电影院有伙伴关系,或有伙伴的伙伴关系的电影",
        "output": "match(a:cinema where n.name=UME)-[e:partner]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person杜思琪申请的贷款,以及申请这些贷款的person",
        "output": "match(a:person where name = '杜思琪')-[e:apply]->(b:loan)<-[e2:apply]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和帖子Post_231有关系的用户,返回这些点的薪资",
        "output": "match(a:post where a.name='Post_231')-[e]-(b:user) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,name,age, 数据为(2488,'徐建聪',56)的子查询作为输入表, 源点的name等于输入表name,帮我查询109个名为徐雪的点selects的类型是course的节点,且节点courseHour为空",
        "output": "with p as (select * from (VALUES(2488,'徐建聪',56)) as t(salary,name,age))MATCH (a WHERE a.name = p.name AND (a.name = '徐雪')) -[e:student_selects_course ]->(b:course WHERE b.courseHour IS NULL) RETURN b LIMIT 109",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询89个和标签为person的点有认识关系的person,且和这些person有购买关系的软件",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:buy]->(c:software) return c limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有issue的partner,或其partner的partner",
        "output": "match(a:issue)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点类型是教师,边类型是教的边,返回这些边的源点id加源点id的值,和f0加894的值",
        "output": "match(a:teacher)-[e:teach]->(b) return e.srcId + e.srcId, e.f0 + 894",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为123的goods有关的buyer的friend, 再返回和buyer有关系的relation",
        "output": "match(a:goods where id = 123)-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前95个label为发布的边",
        "output": "match(a)-[e:publish]->(b) return e limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出4个和标签等于person的点有认识关系的person,以及和这些person有购买关系的软件",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:buy]->(c:software) return c limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点类型是person,目标点类型是评论,类型是电影或电影院或评论的边",
        "output": "match(a:person)-[e:film | cinema | comment]->(b:comment) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找赵建聪的合作伙伴的朋友。",
        "output": "match(a:person where a.name='赵建聪')-[e:friend]->(b)-[e2:partner]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为杜梅和徐宏的,label为读者的点公共的朋友节点的名单",
        "output": "match(a:reader where a.name='杜梅')-[e:friend]->(b)<-[e2:friend]-(c:reader where c.name='徐宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和买家何宏之间有创造关系的订单",
        "output": "match(a:buyer where a.name='何宏')-[e:creates]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以639,832作为请求点id, 源点的id等于输入表id,找出和film有关联的tag节点,并根据其name分组,返回name,以及id减25的值",
        "output": "with p as (select * from (VALUES(639),(832)) as t(id)) MATCH (a:film WHERE a.id = p.id) -[e:film_has_tag ]-(b:tag) RETURN b.name, b.id - 25 GROUP BY b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与大学标签相关的37个城市，以及这些城市的包含公司的列表。",
        "output": "match(a:university)-[e:belong]->(b:city)-[e2:contain]->(c:company) return c limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询loan loan_70 deposit的account,返回account transfer的account的id的平均值除id乘936的值",
        "output": "match(a:loan where name = 'loan_70')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return AVG(c.id) / c.id * 936",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为医生,目标点label为处方,label为药品或医生的边",
        "output": "match(a:doctor)-[e:medicine | doctor]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出作家马月撰写的书,以及撰写这些书的作家",
        "output": "match(a:author where name = '马月')-[e:write]->(b:book)<-[e2:write]-(c:author) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询价值小于118的城市包含的公司的名称,以及这些公司 属于的城市的名称",
        "output": "match(a:city where a.value < 118)-[e:contain]->(b:company)-[e2:belong]->(c:city) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person孙轩有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '孙轩')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为Prescription_152的处方信息",
        "output": "match(a:prescription where a.name = 'Prescription_152') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age对9取余的值",
        "output": "a.age % 9",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和名为PR-212的合并请求有朋友关系,或有朋友的朋友关系的仓库",
        "output": "match(a:pullRequest where n.name=PR-212)-[e:friend]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回171个和标签等于university的点有belong关系的city,以及和这些city有contain关系的company",
        "output": "match(a:university)-[e:belong]->(b:city)-[e2:contain]->(c:company) return c limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出黄强和赵科的朋友节点，它们都是人的类型。",
        "output": "match(a:person where a.name='黄强')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询包含公司节点的重庆和巴黎之间的共同点。",
        "output": "match(a where a.name = '重庆')-[e:contain]->(b:company)<-[e2:contain]-(c where c.name = '巴黎') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找病人杜月接受的处方, 令病人的id等于处方的id的和除93的和,令病人的id等于处方的权重加425的数量,令病人的身高等于病人的薪资, 返回病人的年龄, 处方的权重",
        "output": "match(a:patient where a.name='杜月')-[e:accept]->(b:prescription) let a.id = SUM(SUM(b.id) / 93),let a.id = COUNT(b.weight + 425),let a.height = a.salary return a.age,b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减504的个数",
        "output": "COUNT(a.value - 504)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被编辑发布数量大于91的书,记为relationCount,再查询这些书发布的书",
        "output": "match(a:book) let a.relationCount = AVG((a:book)<-[e:publish]-(b:publisher) => b.id) match(a where a.relationCount > 91)-[e2:publish]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person李轩和孙雪都存在watch关系的点",
        "output": "match(a:person where a.name='李轩')-[e:watch]->(b)<-[e2:watch]-(c:person where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减44加72的值",
        "output": "a.id - 44 + 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,id,salary, 数据为(179,40,3647),(197,39,2336),(183,3,9467),(171,64,7056), 以属性id作为相等条件,请帮我找出前190个类型是author_knows_author的边",
        "output": "with p as (select * from (VALUES(179,40,3647),(197,39,2336),(183,3,9467),(171,64,7056)) as t(height,id,salary))MATCH (a WHERE a.id = p.id) -[e:author_knows_author ]->(b) RETURN e LIMIT 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和评论点有属于关系的电影节点,且边满足条件权重不等于165.30,目标电影节点满足条件价值乘695的最大值小于88",
        "output": "match(a:comment)-[e:belong where e.weight <> 165.30]->(b:film where MAX(b.value * 695) < 88) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出177个id不为空或price的最小值加127大于等于18或类别不等于80的药品,根据名字降序排列",
        "output": "match(a:medicine where (a.id is not null) or MIN(a.price) + 127 >= 18 or a.category <> 80) return a order by a.name desc limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person马雪 认识的person,返回person 购买的软件的value的最小值减478的值",
        "output": "match(a:person where name = '马雪')-[e:knows]->(b:person)-[e2:buy]->(c:software) return MIN(c.value) - 478",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以446作为请求点id, 以属性id作为相等条件,帮我查询label为department_has_teacher,且满足条件f1为true,f0为空,或f1等于true的边",
        "output": "with p as (select * from (VALUES(446)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:department_has_teacher WHERE e.f1 = TRUE AND e.f0 IS NULL OR e.f1 = TRUE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回日本某个城市与天津的节点，并返回该城市的人口数量和名称。",
        "output": "match(a:country where a.name='日本')-[e]->(b:city)<-[e2]-(c:city where c.name='天津') return b.peopleNumber, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找医生和患者之间标签为'diagnosis'的边。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点value的求和值对120取余减935小于等于538,边类型是雇佣,且目标点id小于41的边,返回这些边的f0乘512的值",
        "output": "match(a where SUM(a.value) % 120 - 935 <= 538)-[e:employee where e.targetId < 41]->(b) return e.f0 * 512",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与person李思琪有关系的person的gender",
        "output": "match(a:person where a.name='李思琪')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为周伟的,weight大于581的relation,返回这些relation的weight,和边的f1,targetId",
        "output": "match(a where a.name='周伟')-[e:relation]->(b where b.weight > 581) return b.weight,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与《三体》有关联的书籍，以及那些被《三体》引用的书籍。",
        "output": "match(a:book where a.name = '三体')-[e:refers]->(b:book),(a:book where a.name = '三体')<-[e2:refers]-(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回person标签的所有点，按salary从大到小排序。",
        "output": "match(a:person) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和名为杜伟的病人有朋友关系,或有朋友的朋友关系的处方",
        "output": "match(a:patient where n.name=杜伟)-[e:friend]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与ID为183的用户相关的其他用户，然后找出这些相关用户的合作伙伴。",
        "output": "match(a:user where id = '183')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为孙伟的,学分小于1的相关者,返回这些相关者的价值,和边的源点id,f1,权重",
        "output": "match(a where a.name='孙伟')-[e:relation]->(b where b.credit < 1) return b.value,e.srcId, e.f1, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(164,141,true),(72,97,false),(180,53,false),(143,122,false)作为请求表数据,属性分别为targetId,srcId,f1, 源点的f1等于输入表f1,帮我查询被person马思思喜欢的person",
        "output": "with p as (select * from (VALUES(164,141,true),(72,97,false),(180,53,false),(143,122,false)) as t(targetId,srcId,f1))MATCH (a:person WHERE a.f1 = p.f1) <-[e:person_likes_person ]-(b:person WHERE b.name = '马思思') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person吴月关联的person节点关联的person",
        "output": "match(a:person where a.name = '吴月')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person张雪认识的person,被其他公司雇佣的数量",
        "output": "match(a:person where a.name='张雪')-[e:knows]->(b:person)<-[e2:employee]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表255, 以属性id作为相等条件,查找与名为浙江大学和四川大学的点共同合作的,类型为公司的节点",
        "output": "with p as (select * from (VALUES(255)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '浙江大学')) -[e:university_cooperate_company ]->(b:company) <-[e2:university_cooperate_company ]-(c WHERE c.name = '四川大学') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person何国强之间有invest关系的company",
        "output": "match(a:person where a.name='何国强')-[e:invest]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出杜强喜欢且被付费的人。",
        "output": "match(a where a.name = '杜强')-[e:likes]->(b:person),(a where a.name = '杜强')<-[e2:pay]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部prescription的partner,或其partner的partner",
        "output": "match(a:prescription)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找height大于198,height为空的doctor belong的department的名称,以及这些department has的doctor的名称",
        "output": "match(a:doctor where a.height > 198 and (a.height is null))-[e:doctor_belong_department]->(b:department)-[e2:department_has_doctor]->(c:doctor) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询buyer孙思思的partner,的weight对weight取余乘106.47的个数",
        "output": "match(a:buyer where a.name= '孙思思')-[e:partner]->(b) return COUNT(e.weight % e.weight * 106.47)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和名为滴滴的公司有朋友关系,或有朋友的朋友关系的贷款",
        "output": "match(a:company where n.name=滴滴)-[e:friend]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "TheShy和Zeus有82个共同的伙伴账户。",
        "output": "match(a:account where a.name='TheShy')-[e:partner]->(b)<-[e2:partner]-(c:account where c.name='Zeus') return b limit 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和patient点有accept关系的prescription节点,且边满足条件f1不等于false,目标prescription节点name是Prescription_171",
        "output": "match(a:patient)-[e:accept where e.f1 <> false]->(b:prescription where b.name = 'Prescription_171') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出上映评论Comment_239属于的电影,的电影院",
        "output": "match(a:comment where name = 'Comment_239')-[e:belong]->(b:film)<-[e2:releases]-(c:cinema) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出buyer look的goods,返回其源点的height对height取余减95的值,以及目标点的price减3666.10减1666.25的值",
        "output": "match(a:buyer)-[e:look]->(b:goods) return a.height % a.height - 95, b.price - 3666.10 - 1666.25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与person节点有关联的person节点，按salary、height、age分组返回。",
        "output": "match(a:person)-[e:family]-(b:person) return b.salary, b.height, b.age group by b.salary, b.height, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与徐科存在购买关系的软件,软件与软件存在使用关系的点,返回这些点的是否开源",
        "output": "match(a where a.name = '徐科')-[e:buy]->(b:software)-[e2:uses]->(c:software) return c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出何建聪认识的人，并统计他们所在公司的人数。",
        "output": "match(a:person where name = '何建聪')-[e:knows]->(b:person)-[e2:belong]->(c:company) return c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名字不等于数学学院且大小不是83的部门拥有的学生的名称,以及这些学生 选择的课程的名称",
        "output": "match(a:department where a.name <> '数学学院' and a.size <> 83)-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以766,967,829,617,711作为请求点id, 源点的id等于输入表id,查询forum天涯论坛 contain的post,返回post has的tag的id乘30的最大值 ",
        "output": "with p as (select * from (VALUES(766),(967),(829),(617),(711)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (name = '天涯论坛')) -[e:forum_contain_post ]->(b:post) -[e2:post_has_tag ]->(c:tag) RETURN MAX(c.id * 30) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值加726对价值取余的个数",
        "output": "COUNT(a.value + 726 % a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找7个权重为空或语言是python或星数小于等于747的仓库,根据创建时间升序排列",
        "output": "match(a:repository where (a.weight is null) or a.lang = 'python' or a.stars <= 747) return a order by a.createTime asc limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询height小于163或height不为空的person pay的person的名称,以及这些person likes的person的名称",
        "output": "match(a:person where a.height < 163 or (a.height is not null))-[e:pay]->(b:person)-[e2:likes]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出身高大于等于189且小于等于9939的个人账户名称，以及这些账户偿还的贷款名称。",
        "output": "match(a:person where MAX(a.height) <> 9939 and a.height = 189)-[e:own]->(b:account)-[e2:repay]->(c:loan) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary减2576的值",
        "output": "a.salary - 2576",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出公司与其它软件之间的关联，以及这些软件之间的uses关系。",
        "output": "match(a:company where a.id = '99')-[e]-(b:software)<-[e2:uses]-(c:software) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名叫何科的病人",
        "output": "match(a:patient where a.name = '何科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为192的电影院上映的电影, 并将电影有关的电影院的大小的最小值赋值给电影的类别, 接着查询电影的类别小于192的电影拥有的标签",
        "output": "match(a:cinema where a.id = 192)-[e:releases]->(b:film) let b.category = MIN((b:film)-[e2]-(c:cinema) => c.size) match(b:film where b.category < 192)-[e3:has]->(d:tag) return b.category, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点类型是处方,边类型是包含的边,返回这些边的f0乘921的值,和f0的数量减f0的最小值",
        "output": "match(a:prescription)-[e:contain]->(b) return e.f0 * 921, MIN(COUNT(e.f0) - e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找的物品（goods)以及与这些物品以包含关系关联的其他订单（orders),同时查找这些物品所关联的物品。",
        "output": "match(a:goods where a.id = '104')-[e]-(b:goods)<-[e2:contain]-(c:orders) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出王建聪喜欢的人",
        "output": "match(a:person)<-[e:likes]-(b:person where b.name='王建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有编辑类型的源点和发布类型的边，然后计算这些边的权重乘以196.42的数量以及目标点ID乘以29的最小值。",
        "output": "match(a:publisher)-[e:publish]->(b) return COUNT(e.weight * 196.42), MIN(e.targetId * 29)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前146个满足条件名字为黄科且年龄不为空,或名字等于何宏的person",
        "output": "match(a:person where (a.name = '黄科' and (a.age is not null)) or a.name = '何宏') return a limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与张建国和周轩有关的人，共有183个。",
        "output": "match(a where a.name='张建国')-[e]->(b:person)<-[e2]-(c where c.name='周轩') return b limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加76的值",
        "output": "a.id + 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出age不等于43且salary不等于4160的person knows的person的名称",
        "output": "match(a:person where a.age <> 43 and a.salary <> 4160)-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person pay的person,返回其源点的height的最大值乘191除187的平均值,以及目标点的salary加7543的最大值",
        "output": "match(a:person)-[e:pay]->(b:person) return AVG(MAX(a.height) * 191 / 187), MAX(b.salary + 7543)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与法学院有关联的教师，然后再找出这些教师与部门法学院的关系。",
        "output": "match(a:department where a.name = '法学院')-[e:has]->(b:teacher),(a:department where a.name = '法学院')<-[e2:has]-(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部英国的点包含的城市,然后请帮我查找英国被属于的城市,一起返回",
        "output": "match(a where a.name = '英国')-[e:contain]->(b:city),(a where a.name = '英国')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找被person孙伟关联的person",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='孙伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和repository Kafka有has关系的pullRequest,再查询以has关系关联了Kafka的pullRequest",
        "output": "match(a:repository where a.name = 'Kafka')-[e:has]->(b:pullRequest),(a:repository where a.name = 'Kafka')<-[e2:has]-(c:pullRequest)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出拥有订单Order_181包含的商品,的卖家",
        "output": "match(a:orders where name = 'Order_181')-[e:contain]->(b:goods)<-[e2:has]-(c:seller) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找创造处方Prescription_317的医生,和这些医生属于的部门",
        "output": "match(a:prescription where name = 'Prescription_317')<-[e:creates]-(b:doctor)-[e2:belong]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和user郑思思之间有creates关系的pullRequest",
        "output": "match(a:user where a.name='郑思思')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询拥有大学四川大学拥有的部门,的大学",
        "output": "match(a:university where name = '四川大学')-[e:has]->(b:department)<-[e2:has]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,age分组,计算id加50的值",
        "output": "return a.id + 50 group by a.salary, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出seller以gender分组的salary, 根据salary升序排序",
        "output": "match(a:seller) return a.salary group by a.gender order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询和医生相关的处方节点，并按重量分组，返回重量。",
        "output": "match(a:doctor)-[e:creates]-(b:prescription) return b.weight group by b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与部门标签为department的点有has关系的医生，以及这些医生属于的部门，并且这些部门又与有has关系的医生。",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department)-[e3:has]->(d:doctor) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表361, 以属性id作为相等条件,返回全部与person有关系的person节点,且person节点的age不为空,并返回这些点的salary的最小值乘5902的平均值,以及salary减1755的平均值",
        "output": "with p as (select * from (VALUES(361)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e ]->(b:person WHERE b.age IS NOT NULL) RETURN AVG(MIN(b.salary) * 5902), AVG(b.salary - 1755) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与张红和黄伟都存在朋友关系的点",
        "output": "match(a:person where a.name='张红')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='黄伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person认识数量大于74的person,记为relationCount,再查询这些person关联的person",
        "output": "match(a:person) let a.relationCount = AVG((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 74)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点类型为loan,边类型为deposit,以及满足条件timeStamp为2001年06月25日的边",
        "output": "match(a:loan)-[e:deposit where e.timeStamp = '2001-06-25']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与部门数学学院存在拥有关系,且与课程大学英语存在选择关系的学生节点，返回这些学生的性别,名字,及部门数学学院的价值,及课程大学英语的课时",
        "output": "match(a:department where a.name='数学学院')-[e:has]->(b:student)<-[e2:selects]-(c:course where c.name='大学英语') return a.value,b.gender, b.name,c.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为46的账号有关的账号的相关者, 再查找和账号有关系的伙伴",
        "output": "match(a:account where id = 46)-[e]-(b:account)-[e2:relation]->(c), (b:account)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与部门放射科存在拥有关系,且与处方Prescription_194存在创造关系的医生节点，返回这些医生的名字,及部门放射科的权重,及处方Prescription_194的权重",
        "output": "match(a:department where a.name='放射科')-[e:has]->(b:doctor)<-[e2:creates]-(c:prescription where c.name='Prescription_194') return a.weight,b.name,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出183个名为北京大学的点cooperate的类型为company的节点,且其name不是华为,scale等于large",
        "output": "match(a where a.name='北京大学')-[e:cooperate]->(b:company where b.name <> '华为' and b.scale = 'large') return b limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为PR-415的点belong的repository,并对这些repository的id进行求和",
        "output": "match(a where a.name='PR-415')-[e:belong]->(b:repository) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找包含东京的大学，再查找与东京有包含关系的大学。",
        "output": "match(a:city where a.name = '东京')-[e:contain]->(b:university),(a:city where a.name = '东京')<-[e2:contain]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 横店影院上映的电影有多少部被其他评论提及了？",
        "output": "match(a:cinema where a.name='横店影院')-[e:releases]->(b:film)<-[e2:belong]-(c:comment) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person Amily认识的person,以及关联这些person的person",
        "output": "match(a:person where name = 'Amily')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找与person吴若涵有person_lover_person关系的3跳以内的环",
        "output": "match(a:person where name = '吴若涵')-[e:person_lover_person]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对12取余的数量",
        "output": "COUNT(a.id % 12)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价值分组,计算价值对818取余的值",
        "output": "return a.value % 818 group by a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被用户吴思思发布的帖子,和吴思思喜欢的帖子",
        "output": "match(a:post)<-[e:publish]-(b:user where name = '吴思思')-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄加年龄的值",
        "output": "a.age + a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按id分组的所有人的年龄，按照年龄升序排列。",
        "output": "match(a:person) return a.age group by a.id order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和国家中国有关系的公司或国家或大学,返回这些点的id,价值,等级",
        "output": "match(a:country where a.name='中国')-[e]-(b:company | country | university) return b.id, b.value, b.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight加296的最小值",
        "output": "MIN(a.weight + 296)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询118个名为徐月的点publish的label为book的节点,且节点id大于等于18,category不等于84",
        "output": "match(a where a.name='徐月')-[e:publisher_publish_book]->(b:book where b.id >= 18 and b.category <> 84) return b limit 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出以喜欢关系关联了person周月的person",
        "output": "match(a:person where a.name='周月')<-[e:person_likes_person]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算面积加25256的数量",
        "output": "return COUNT(a.area + 25256) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和医生周建国之间有创造关系的处方",
        "output": "match(a:doctor where a.name='周建国')-[e:creates]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是person的点,返回174个",
        "output": "match(a:person) return a limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回处方Prescription_161包含的药品,以及包含这些药品的处方, 令药品的名字等于药品的名字的数量,令处方(a)的名字等于处方(c)的名字, 返回处方(a)的id,药品(b)的价格,处方(c)的创建时间",
        "output": "match(a:prescription where name = 'Prescription_161')-[e:contain]->(b:medicine)<-[e2:contain]-(c:prescription) let b.name = COUNT(b.name),let a.name = c.name return a.id,b.price,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有周思思的点咨询的卖家,然后查找周思思被回答的卖家,一起返回",
        "output": "match(a where a.name = '周思思')-[e:consult]->(b:seller),(a where a.name = '周思思')<-[e2:ask]-(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为孙建国的person,以及与其有关的标签,并返回孙建国的年龄和这些标签的id",
        "output": "match(a:person where name = '孙建国')-[e]-(b:tag) return a.age, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为Comment_398的,id小于等于61或类别为悬疑的朋友,返回这些朋友的id,和边的目标点id",
        "output": "match(a where a.name='Comment_398')-[e:friend]->(b where b.id <= 61 or b.category = '悬疑') return b.id,e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的2跳的环",
        "output": "match(a:person)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部id为17的买家关联的买家,和以回答关系关联了这些买家的其他卖家",
        "output": "match(a:buyer where a.id = 17)-[e]-(b:buyer)<-[e2:ask]-(c:seller) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,age, 数据为(7168,154,85),(6630,171,30),(4961,198,62), 源点的height等于输入表height,查找所有名为韩强的点属于的公司",
        "output": "with p as (select * from (VALUES(7168,154,85),(6630,171,30),(4961,198,62)) as t(salary,height,age))MATCH (a WHERE a.height = p.height AND (a.name = '韩强')) -[e:person_belong_company ]->(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点标签为person,边标签为认识的边,返回这些边的权重对171.88取余的值,和f0除f0的平均值",
        "output": "match(a:person)-[e:knows]->(b) return e.weight % 171.88, AVG(e.f0 / e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点标签为用户,边标签为发布,且满足条件源点id不是174的边",
        "output": "match(a:user)-[e:publish where e.srcId <> 174]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,id, 数据为('male',197,27),('famale',158,27),('famale',155,23), 源点的id等于输入表id,查询和reader张科有reader_likes_book关系的book,以及和book百年孤独有book_refers_book关系的book,将它们都返回",
        "output": "with p as (select * from (VALUES('male',197,27),('famale',158,27),('famale',155,23)) as t(gender,height,id))MATCH (a:reader WHERE a.id = p.id AND (a.name = '张科')) -[e:reader_likes_book ]->(b:book) , (c:book WHERE c.name = '百年孤独') -[e2:book_refers_book ]->(d:book) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出174个与何轩和周伟都存在关系的person或comment节点",
        "output": "match(a where a.name='何轩')-[e]->(b:person | comment)<-[e2]-(c where c.name='周伟') return b limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有公司的伙伴,或其伙伴的伙伴",
        "output": "match(a:company)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person李建国支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='李建国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person李伟relates的person, 令person(b)的name等于person(a)的salary乘9692除24的个数, 返回person(a)的height, person(b)的height",
        "output": "match(a:person where a.name='李伟')-[e:relates]->(b:person) let b.name = COUNT(a.salary * 9692 / 24) return a.height,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,wordCount,value, 数据为(61,835,107),(30,345,745), 以属性value作为相等条件,查询所有和帖子Post_147有2度关系的论坛",
        "output": "with p as (select * from (VALUES(61,835,107),(30,345,745)) as t(id,wordCount,value))MATCH (a:post WHERE a.value = p.value AND (a.name = 'Post_147')) -[e ]->{2,2}(b:forum) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有类型为person的点，并按照名字进行升序排列。",
        "output": "match(a:person) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部id为194的publisher关联的book,和以relates关系关联了这些book的其他book",
        "output": "match(a:publisher where a.id = 194)-[e]-(b:book)<-[e2:relates]-(c:book) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和名为Post_397的帖子有相关者关系,或有相关者的相关者关系的标签",
        "output": "match(a:post where n.name=Post_397)-[e:relation]->{1,2}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以816,648作为请求点id, 以属性id作为相等条件,请帮我找出与徐轩存在person_likes_comment关系的comment,comment与film存在comment_belong_film关系的点,返回这些点的id",
        "output": "with p as (select * from (VALUES(816),(648)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐轩')) -[e:person_likes_comment ]->(b:comment) -[e2:comment_belong_film ]->(c:film) RETURN c.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找源点和目标点标签都是书，而引用的边标签也是书。",
        "output": "match(a:book)-[e:refers]->(b:book) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出年龄小于等于34岁或薪资大于等于89的买家创建的订单及其包含的商品名称",
        "output": "match(a:buyer where a.age <= 34 or a.salary >= 89)-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找名为'Java程序设计'的书，并返回这些书的wordCount和ID。",
        "output": "match(a:book where a.name = 'java程序设计') return a.wordCount, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和书java程序设计有2到4跳关系的作家",
        "output": "match(a:book where a.name='java程序设计')-[e]->{2,4}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司美团有雇佣关系的person,再找出以雇佣关系关联了美团的person",
        "output": "match(a:company where a.name = '美团')-[e:employee]->(b:person),(a:company where a.name = '美团')<-[e2:employee]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和prescription有关联的medicine节点,并根据其price,id,name分组,返回price,id,name,以及id的个数对71取余的最大值",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.price, b.id, b.name, MAX(COUNT(b.id) % 71) group by b.price, b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与Order_371有关联的包含商品，以及与买家郑思琪有关联的取消订单。",
        "output": "match(a:orders where a.name = 'Order_371')-[e:contain]->(b:goods),(c:buyer where c.name = '郑思琪')-[e2:cancel]->(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以67作为请求点id, 源点的id等于输入表id,帮我查询前154个标签等于person_parent_person的边",
        "output": "with p as (select * from (VALUES(67)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_parent_person ]->(b) RETURN e LIMIT 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出106个与皮肤科和耳鼻喉科相关的医学节点。",
        "output": "match(a where a.name='皮肤科')-[e]->(b:medicine)<-[e2]-(c where c.name='耳鼻喉科') return b limit 106",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有标记为用户的点，然后按照性别从高到低排序。",
        "output": "match(a:user) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为70的医生创造的处方, 并将处方有关的药品的名字的求和值赋值给处方的id, 接着查询处方的id小于70的处方包含的药品",
        "output": "match(a:doctor where a.id = 70)-[e:creates]->(b:prescription) let b.id = SUM((b:prescription)-[e2]-(c:medicine) => c.name) match(b:prescription where b.id < 70)-[e3:contain]->(d:medicine) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和person点有创造关系的评论节点,且边满足条件源点id大于等于113,目标评论节点满足条件字数的最大值大于等于26",
        "output": "match(a:person)-[e:creates where e.srcId >= 113]->(b:comment where MAX(b.wordCount) >= 26) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找作家何红撰写的书,以及喜欢这些书的读者",
        "output": "match(a:author where name = '何红')-[e:write]->(b:book)<-[e2:likes]-(c:reader) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与华为和谷歌有关系的107个城市节点。",
        "output": "match(a where a.name='华为')-[e]->(b:city)<-[e2]-(c where c.name='谷歌') return b limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点标签等于person,边标签等于观看,并且目标点id小于等于193,目标点id为空,或时间戳不等于2001年06月28日的边",
        "output": "match(a:person)-[e:watch where (e.targetId <= 193 and (e.targetId is null)) or e.timeStamp <> '2001-06-28']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出Alice和吴宏共同的朋友列表，这些朋友标记为读者。",
        "output": "match(a:reader where a.name='Alice')-[e:friend]->(b)<-[e2:friend]-(c:reader where c.name='吴宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为郑若涵的节点喜欢的编辑或读者或书",
        "output": "match(a where a.name='郑若涵')-[e:likes]->(b:publisher | reader | book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为28的doctor belong的department, 并将department有关的patient的gender的最大值赋值给department的id, 接着查询department的id小于28的department has的doctor",
        "output": "match(a:doctor where a.id = 28)-[e:belong]->(b:department) let b.id = MAX((b:department)-[e2]-(c:patient) => c.gender) match(b:department where b.id < 28)-[e3:has]->(d:doctor) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(179,9865,'陈红'),(167,8493,'陈轩')作为请求表数据,属性分别为height,salary,name, 源点的salary等于输入表salary,查询与person有关系的person节点,且person节点的身高小于164,并返回这些点的id加57的值,以及身高乘182的值",
        "output": "with p as (select * from (VALUES(179,9865,'陈红'),(167,8493,'陈轩')) as t(height,salary,name))MATCH (a:person WHERE a.salary = p.salary) -[e ]->(b:person WHERE b.height < 164) RETURN b.id + 57, b.height * 182 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出company cooperate中value不大于414的university的名称，以及这些university所在的城市名称。",
        "output": "match(a:company where a.value <= 414)-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与user相关的post节点，按id和lang进行分组，并返回id和lang。",
        "output": "match(a:user)-[e:publish]-(b:post) return b.id, b.lang group by b.id, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,height, 数据为(96,5,151),(13,89,172)的子查询作为输入表, 源点的height等于输入表height,找出全部郑科的点支付的person,然后找出郑科被认识的person,一起返回",
        "output": "with p as (select * from (VALUES(96,5,151),(13,89,172)) as t(age,id,height))MATCH (a WHERE a.height = p.height AND (a.name = '郑科')) -[e:person_pay_person ]->(b:person) , (a WHERE a.name = '郑科') <-[e2:person_knows_person ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以29作为请求点id, 以属性id作为相等条件,查找42个名为赵月的点拥有的类型是商品的节点,且其价值大于等于57且价值大于等于649",
        "output": "with p as (select * from (VALUES(29)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '赵月')) -[e:seller_has_goods ]->(b:goods WHERE b.value >= 57 AND b.value >= 649) RETURN b LIMIT 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为160的repository has的user, 并将user有关的user的salary的和赋值给user(b)的name, 接着查询user(b)的name小于160的user likes的repository",
        "output": "match(a:repository where a.id = 160)-[e:has]->(b:user) let b.name = SUM((b:user)-[e2]-(c:user) => c.salary) match(b:user where b.name < 160)-[e3:likes]->(d:repository) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前139个满足条件id不是57或id不等于1338.98的商品",
        "output": "match(a:goods where a.id <> 57 or a.id <> 1338.98) return a limit 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为66的person knows的person, 并将person有关的person的gender的平均值赋值给person(b)的salary, 接着查询person(b)的salary小于66的person knows的person",
        "output": "match(a:person where a.id = 66)-[e:knows]->(b:person) let b.salary = AVG((b:person)-[e2]-(c:person) => c.gender) match(b:person where b.salary < 66)-[e3:knows]->(d:person) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点名字不是张若涵或薪资大于等于8229,且名字为郑若涵,边类型是申请,且权重小于等于188.59的边,返回这些边的源点id加139除757的最大值",
        "output": "match(a where (a.name <> '张若涵' or a.salary >= 8229) and a.name = '郑若涵')-[e:apply where e.weight <= 188.59]->(b) return MAX((e.srcId + 139) / 757)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找150个名为郑轩的点创造的类型是合并请求的节点,且节点id大于等于94",
        "output": "match(a where a.name='郑轩')-[e:creates]->(b:pullRequest where b.id >= 94) return b limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找103个身高乘194大于等于8且薪资减7930乘170大于等于29,或薪资在9053到9181之间的学生,根据名字从大到小排列",
        "output": "match(a:student where (a.height * 194 >= 8 and (a.salary - 7930) * 170 >= 29) or (a.salary BETWEEN 9053 AND 9181)) return a order by a.name desc limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名叫周轩的用户。",
        "output": "match(a:user where a.name = '周轩') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出郑雪医生创建的处方",
        "output": "match(a:prescription)<-[e:creates]-(b:doctor where b.name='郑雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回salary大于4032,salary不是8179,或height不等于151的节点",
        "output": "match(a where (a.salary > 4032 and a.salary <> 8179) or a.height <> 151) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与帖子Post_309有关系的论坛, 返回和这些论坛有关联的帖子的,字数乘229的值",
        "output": "match(a:post where a.name= 'Post_309')-[e]-(b:forum)-[e2]-(c:post) return c.wordCount * 229",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与ID为99的留言相关的人的关联，再给出与该人有关的朋友。",
        "output": "match(a:comment where id = '99')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出徐若涵和郑思思之间存在选择关系的点。",
        "output": "match(a:student where a.name='徐若涵')-[e:selects]->(b)<-[e2:selects]-(c:student where c.name='郑思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询薪资不为空,性别不等于famale的用户创造的合并请求的名称,以及这些合并请求 属于的仓库的名称",
        "output": "match(a:user where (a.salary is not null) and a.gender <> 'famale')-[e:creates]->(b:pullRequest)-[e2:belong]->(c:repository) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和买家点有查看关系的商品节点,且边满足条件权重在103.55到160.99之间,目标商品节点销量等于1340.42",
        "output": "match(a:buyer)-[e:look where (e.weight BETWEEN 103.55 AND 160.99)]->(b:goods where b.sellerNumber = 1340.42) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与买家何梅取消订单和与买家孙建聪查看商品有关的记录，然后把它们都发给我。",
        "output": "match(a:buyer where a.name = '何梅')-[e:cancel]->(b:orders),(c:buyer where c.name = '孙建聪')-[e2:look]->(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有医生（type为doctor）中名为周思思的点的id、name和height。",
        "output": "match(a:doctor where a.name = '周思思') return a.id, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表414, 以属性id作为相等条件,找出全部与部门经管学院有关系的大学的名字",
        "output": "with p as (select * from (VALUES(414)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '经管学院')) -[e ]-(b:university) RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为医生,名为李科的点,返回这些点的id,名字",
        "output": "match(a:doctor where a.name = '李科') return a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询按性别和名字分组的人的薪资，并按从小到大的顺序排序。",
        "output": "match(a:person) return a.salary group by a.gender, a.name order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出马若涵和周月共同的39个爱人。",
        "output": "match(a:person where a.name='马若涵')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='周月') return b limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为属于,且f0小于91的边",
        "output": "match(a)-[e:belong where e.f0 < 91]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,salary, 数据为(93,164,3404),(67,185,7494),(8,179,1137),(81,158,7684)的子查询作为输入表, 源点的age等于输入表age,帮我查询所有和company字节有1到4跳关系的loan",
        "output": "with p as (select * from (VALUES(93,164,3404),(67,185,7494),(8,179,1137),(81,158,7684)) as t(age,height,salary))MATCH (a:company WHERE a.age = p.age AND (a.name = '字节')) -[e ]->{1,4}(b:loan) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出salary在6179到7401之间，或者id除以85的余数小于等于184，同时height小于等于171的reader，并按照id从大到小排序。",
        "output": "match(a:reader where ((a.salary BETWEEN 6179 AND 7401) or a.id % 85 <= 184) and a.height <= 171) return a order by a.id desc limit 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找城市东京属于的国家节点包含的城市",
        "output": "match(a:city where a.name = '东京')-[e:belong]->(b:country)-[e2:contain]->(c:city) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,age, 数据为('famale',157,65), 源点的age等于输入表age,计算所有部门的id除id的值",
        "output": "with p as (select * from (VALUES('famale',157,65)) as t(gender,height,age))MATCH (a:department WHERE a.age = p.age) RETURN a.id / a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找软件Kafka使用的软件,被其他person购买的数量",
        "output": "match(a:software where a.name='Kafka')-[e:uses]->(b:software)<-[e2:buy]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否帮我查一下《白夜行》这本书被谁引用了？",
        "output": "match(a:book where a.name='白夜行')-[e:refers]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出software节点中与software有关联的节点，按value和stars分组并返回。",
        "output": "match(a:software)-[e:uses]-(b:software) return b.value, b.stars group by b.value, b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值减289乘4的值",
        "output": "(AVG(a.value) - 289) * 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与部门经管学院有拥有关系的2跳的环",
        "output": "match(a:department where name = '经管学院')-[e:has]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与何强存在knows关系的person,person与person存在pay关系的点,返回这些点的gender",
        "output": "match(a where a.name = '何强')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为53的person knows的person, 并将person有关的person的id的求和值赋值给person(b)的id, 接着查询person(b)的id小于53的person knows的person",
        "output": "match(a:person where a.id = 53)-[e:knows]->(b:person) let b.id = SUM((b:person)-[e2]-(c:person) => c.id) match(b:person where b.id < 53)-[e3:knows]->(d:person) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值除69的值",
        "output": "MIN(a.id) / 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和doctor郑科之间有diagnose关系的patient",
        "output": "match(a:doctor where a.name='郑科')-[e:diagnose]->(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和电影复仇者联盟有关的电影院,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的标签",
        "output": "match(a:film where a.name = '复仇者联盟')-[e]-(b:cinema), (b:cinema)-[e2]-(c:person),(b:cinema)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person周思琪relates的person",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='周思琪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与何思思和周科都认识的人，并返回他们的年龄、姓名、何思思的性别和周科的姓名。",
        "output": "match(a:person where a.name='何思思')-[e:knows]->(b:person)<-[e2:knows]-(c:person where c.name='周科') return a.gender,b.age, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部id为36的电影关联的电影,和以属于关系关联了这些电影的其他评论",
        "output": "match(a:film where a.id = 36)-[e]-(b:film)<-[e2:belong]-(c:comment) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从post Post_453出发,经过label为has的边,走1跳到达的tag点",
        "output": "match(a:post where a.name='Post_453')-[e:has]->{1,1}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为JavaGuid的节点拥有的合并请求或用户",
        "output": "match(a where a.name='JavaGuid')-[e:has]->(b:pullRequest | user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表982, 以属性id作为相等条件,查找与person黄若涵和王科都存在person_knows_person关系的点",
        "output": "with p as (select * from (VALUES(982)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '黄若涵')) -[e:person_knows_person ]->(b) <-[e2:person_knows_person ]-(c:person WHERE c.name = '王科') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,age, 数据为(2583,157,15),(7931,172,64),(5038,154,61), 以属性age作为相等条件,返回与person有关系的person节点,且person节点的性别不等于male,并返回这些点的薪资对9920取余的值,以及身高除164的值",
        "output": "with p as (select * from (VALUES(2583,157,15),(7931,172,64),(5038,154,61)) as t(salary,height,age))MATCH (a:person WHERE a.age = p.age) -[e ]->(b:person WHERE b.gender <> 'male') RETURN b.salary % 9920, b.height / 164 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为南京大学的点的,名字的和大于1249的相关者,返回这些相关者的人数,和边的权重",
        "output": "match(a where a.name='南京大学')-[e:relation]->(b where SUM(b.name) > 1249) return b.peopleNumber,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为中国军事论坛的点的,薪资不为空的朋友,返回这些朋友的薪资,和边的目标点id,f0",
        "output": "match(a where a.name='中国军事论坛')-[e:friend]->(b where (b.salary is not null)) return b.salary,e.targetId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,age, 数据为(6318,155,71),(2053,156,34),(5486,181,72), 以属性height作为相等条件,帮我查询id为105的读者关联的书,和以关联关系关联了这些书的其他书",
        "output": "with p as (select * from (VALUES(6318,155,71),(2053,156,34),(5486,181,72)) as t(salary,height,age))MATCH (a:reader WHERE a.height = p.height AND (a.id = '105')) -[e ]-(b:book) <-[e2:relates ]-(c:book) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表378, 以属性id作为相等条件,查找193个规格等于medium或id大于等于91或id在4到9之间的公司,根据价值降序排列",
        "output": "with p as (select * from (VALUES(378)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.scale = 'medium' OR a.id >= 91 OR a.id BETWEEN ASYMMETRIC 4 AND 9)) RETURN a ORDER BY a.value DESC LIMIT 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈宏老师从标签为'teach'的边出发，走了2到4个单位到达点'course'。",
        "output": "match(a:teacher where a.name='陈宏')-[e:teach]->{2,4}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下和用户王若涵有关，且带有'科幻'标签的帖子",
        "output": "match(a:user where a.name='王若涵')-[e:likes]-(b:post)-[e2:has]-(c:tag where c.name='科幻') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回源点薪资的个数小于198且id不为空,边标签等于person_invest_company,且f1等于false或时间戳为2013年09月22日的边,返回这些边的权重除权重的值",
        "output": "match(a where COUNT(a.salary) < 198 and (a.id is not null))-[e:person_invest_company where e.f1 = false or e.timeStamp = '2013-09-22']->(b) return e.weight / e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和person有关联的评论节点,并根据其名字,创建时间,id分组,返回名字,创建时间,id,以及字数对352取余的最大值",
        "output": "match(a:person)-[e:person_creates_comment]-(b:comment) return b.name, b.createTime, b.id, MAX(b.wordCount % 352) group by b.name, b.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表105,330,650, 以属性id作为相等条件,找出116个价值不是289的大学,根据名字升序排列",
        "output": "with p as (select * from (VALUES(105),(330),(650)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.value <> 289)) RETURN a ORDER BY a.name LIMIT 116",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为level,name,value, 数据为(3,'南京大学',487),(4,'华中科技大学',323),(1,'四川大学',231), 以属性level作为相等条件,给出和国家中国有关的大学,再给出和中国country_contain_city的其他城市,返回它们",
        "output": "with p as (select * from (VALUES(3,'南京大学',487),(4,'华中科技大学',323),(1,'四川大学',231)) as t(level,name,value))MATCH (a:country WHERE a.level = p.level AND (a.name = '中国')) -[e ]-(b:university) , (a:country) -[e2:country_contain_city ]->(c:city) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资乘2025的平均值",
        "output": "AVG(a.salary * 2025)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出company以id,scale,value分组的scale, 根据scale升序排序",
        "output": "match(a:company) return a.scale group by a.id, a.scale, a.value order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出115个名为韩国强的点认识的label为person的节点,且其名字等于吴梅或年龄大于等于63",
        "output": "match(a where a.name='韩国强')-[e:knows]->(b:person where b.name = '吴梅' or b.age >= 63) return b limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与XiaoHu和Light都有关联的5个账号节点。",
        "output": "match(a where a.name='XiaoHu')-[e]->(b:account)<-[e2]-(c where c.name='Light') return b limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回100个医生，这些医生与类型为'部门'的点有'拥有'关系，并且与这些医生有'诊断'关系的患者。",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return c limit 100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与157个有咨询关系且与标签为买家的点有拥有关系的卖家和商品。",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c limit 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为Order_469的点包含的商品",
        "output": "match(a where a.name='Order_469')-[e:contain]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出88个person Alice和陈宏,共同的friend",
        "output": "match(a:person where a.name='Alice')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈宏') return b limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与买家Sam有关,且与买家徐梅有关系的卖家节点",
        "output": "match(a:buyer where a.name='Sam')-[e:consult]-(b:seller)-[e2:ask]-(c:buyer where c.name='徐梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询一个人到另一个人的同事关系。",
        "output": "match(a:person)-[e:colleague]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从大学重庆大学出发,经过类型为合作的边,走3到5度到达的公司点",
        "output": "match(a:university where a.name='重庆大学')-[e:cooperate]->{3,5}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出department has的doctor,返回其源点的id对46取余对95取余对308取余的值,以及目标点的height的和对height取余的值",
        "output": "match(a:department)-[e:has]->(b:doctor) return a.id % 46 % 95 % 308, SUM(b.height) % b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 点名吴雪和韩建聪，他们是卖家伙伴节点的公共名。",
        "output": "match(a:seller where a.name='吴雪')-[e:partner]->(b)<-[e2:partner]-(c:seller where c.name='韩建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询label为person_parent_person,且满足条件weight大于101.75的边",
        "output": "match(a)-[e:person_parent_person where e.weight > 101.75]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person黄月关联的person,和黄月关联的person",
        "output": "match(a:person)<-[e:relates]-(b:person where name = '黄月')-[e2:relates]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和买家周国强之间有创造关系的订单",
        "output": "match(a:buyer where a.name='周国强')-[e:creates]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与王思琪和杜月都认识，并且标签为author的节点",
        "output": "match(a where a.name = '王思琪')-[e:knows]->(b:author)<-[e2:knows]-(c where c.name = '杜月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型是loan,名为loan_89的点,返回这些点的weight",
        "output": "match(a:loan where a.name = 'loan_89') return a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,weight, 数据为('Prescription_244',31,821),('Prescription_368',56,650), 源点的name等于输入表name,请帮我找出所有user的partner,或其partner的partner",
        "output": "with p as (select * from (VALUES('Prescription_244',31,821),('Prescription_368',56,650)) as t(name,id,weight))MATCH (a:user WHERE a.name = p.name) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取id在50到78之间，性别不为male的买家咨询的卖家的名称和他们拥有的商品的名称。",
        "output": "match(a:buyer where (a.id BETWEEN 50 AND 78) and a.gender <> 'male')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为weight,name,createTime, 数据为(847,'Prescription_197',2008-09-20)的子查询作为输入表, 源点的createTime等于输入表createTime,找出全部与prescription Prescription_420有关系的prescription的createTime",
        "output": "with p as (select * from (VALUES(847,'Prescription_197',2008-09-20)) as t(weight,name,createTime))MATCH (a:prescription WHERE a.createTime = p.createTime AND (a.name = 'Prescription_420')) -[e ]-(b:prescription) RETURN b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为用户，边label为创造的边，并返回这些边的权重减去148.15后最小的那个值，以及f0除以749后的余数之和。",
        "output": "match(a:user)-[e:creates]->(b) return MIN(e.weight - 148.15), SUM(e.f0 % 749)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为韩轩和王伟的,类型为person的点公共的伙伴节点的名单",
        "output": "match(a:person where a.name='韩轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='王伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边标签等于likes, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,size,value, 数据为(0,51,347)的子查询作为输入表, 以属性id作为相等条件,请帮我查找标签为university_has_department,以及满足条件f1的求和值大于19且源点id为空,或目标点id在74到135之间的边",
        "output": "with p as (select * from (VALUES(0,51,347)) as t(id,size,value))MATCH (a WHERE a.id = p.id) -[e:university_has_department WHERE SUM(e.f1) > 19 AND e.srcId IS NULL OR e.targetId BETWEEN ASYMMETRIC 74 AND 135 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以7,602,679,169作为请求点id, 源点的id等于输入表id,帮我查询orders的三角的环,边类型为orders_contain_goods, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(7),(602),(679),(169)) as t(id)) MATCH (a:orders WHERE a.id = p.id) -[e:orders_contain_goods ]->(b) -[e2:orders_contain_goods ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与软件相关的公司节点，并返回这些节点中scale为medium的点的value乘630的值，以及人数除以946的数量。",
        "output": "match(a:software)-[e]->(b:company where b.scale = 'medium') return b.value * 630, COUNT(b.peopleNumber / 946)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和doctor杜思思有关的medicine,再请帮我查找和杜思思diagnose的其他patient,返回它们",
        "output": "match(a:doctor where a.name = '杜思思')-[e]-(b:medicine), (a:doctor)-[e2:diagnose]->(c:patient) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person李雪有关,且与person黄强有关系的person节点",
        "output": "match(a:person where a.name='李雪')-[e:pay]-(b:person)-[e2:knows]-(c:person where c.name='黄强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出id为178的点的名字",
        "output": "match(a where a.id = '178') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为孙红的点回答的买家",
        "output": "match(a where a.name='孙红')-[e:ask]->(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前132个label为knows的边",
        "output": "match(a)-[e:knows]->(b) return e limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您需要我帮您找出复旦大学所属的城市，以及复旦大学包含的城市吗？然后把它们一起返回给我。",
        "output": "match(a where a.name = '复旦大学')-[e:belong]->(b:city),(a where a.name = '复旦大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与论坛推特有关,且与帖子Post_437有关系的用户节点",
        "output": "match(a:forum where a.name='推特')-[e:contain]-(b:user)-[e2:publish]-(c:post where c.name='Post_437') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以151,962作为请求点id, 以属性id作为相等条件,返回和student马国强有student_selects_course关系的course,再返回以student_selects_course关系关联了马国强的course",
        "output": "with p as (select * from (VALUES(151),(962)) as t(id)) MATCH (a:student WHERE a.id = p.id AND (a.name = '马国强')) -[e:student_selects_course ]->(b:course) , (a:student WHERE a.name = '马国强') <-[e2:student_selects_course ]-(c:course) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点类型为person,目标点类型为person,类型为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表375,402,61,626,80, 源点的id等于输入表id,查找全部名为Bilibili的,语言不是java的朋友,返回这些朋友的价值,和边的权重",
        "output": "with p as (select * from (VALUES(375),(402),(61),(626),(80)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Bilibili')) -[e:friend ]->(b WHERE b.lang <> 'java') RETURN b.value, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回buyer黄建聪与seller节点之间的consult关系，并且这些seller节点拥有'香蕉'这个has-one关系，然后返回这些seller节点的height,buyer黄建聪的age以及'香蕉'的price。",
        "output": "match(a:buyer where a.name='黄建聪')-[e:consult]->(b:seller)<-[e2:has]-(c:goods where c.name='香蕉') return a.age,b.height,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与华为有合作关系的大学，并返回这些大学所在城市的名字。",
        "output": "match(a where a.name = '华为')-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出用户徐红发布的帖子所包含的标签。",
        "output": "match(a:user where a.name = '徐红')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与处方有关的用户节点，这些用户的年龄不为3，并返回这些节点的高度总和乘以182加上183的结果，以及这些用户的年龄除以他们的年龄。",
        "output": "match(a:prescription)-[e]->(b:user where b.age <> 3) return SUM(b.height) * 182 + 183, b.age / b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(1,221,'武汉大学'),(2,801,'四川大学'),(2,415,'复旦大学'),(2,51,'复旦大学')作为请求表数据,属性分别为level,value,name, 源点的level等于输入表level,找出名为韩建聪的学生,以及与其有关的部门,并返回韩建聪的id和这些部门的id",
        "output": "with p as (select * from (VALUES(1,221,'武汉大学'),(2,801,'四川大学'),(2,415,'复旦大学'),(2,51,'复旦大学')) as t(level,value,name))MATCH (a:student WHERE a.level = p.level AND (name = '韩建聪')) -[e ]-(b:department) RETURN a.id, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前158个salary为空或name不等于Alan或height是199的patient",
        "output": "match(a:patient where (a.salary is null) or a.name <> 'Alan' or a.height = 199) return a limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为病人，边标签为接受的边。返回这些边的f0之和与目标点id除以97的结果的最大值。",
        "output": "match(a:patient)-[e:accept]->(b) return MAX(e.f0 + e.f0), COUNT(e.targetId / 97)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,price,id, 数据为('Order_159',2554.38,62),('Order_233',3771.83,2),('Order_257',515.59,55), 以属性id作为相等条件,帮我查询和订单Order_233有关的订单,称为X,再帮我查询和这个X有关联的其他订单,以及和X有关联的商品",
        "output": "with p as (select * from (VALUES('Order_159',2554.38,62),('Order_233',3771.83,2),('Order_257',515.59,55)) as t(name,price,id))MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_233')) -[e ]-(b:orders) , (b:orders) -[e2 ]-(c:orders) , (b:orders) -[e3 ]-(d:goods) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找孙强买家创建的订单，并返回包含的商品ID和类别。",
        "output": "match(a:buyer where name = '孙强')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.id, c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找80个和label为person的点有家人关系的person,并且和这些person有朋友关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:friend]->(c:person) return c limit 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找department以id,weight分组的id, 根据id降序排序",
        "output": "match(a:department) return a.id group by a.id, a.weight order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和卖家点有拥有关系的商品节点,且边满足条件源点id不为空,目标商品节点满足条件id不为空",
        "output": "match(a:seller)-[e:has where (e.srcId is not null)]->(b:goods where (b.id is not null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算id减1的值",
        "output": "return a.id - 1 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问何若涵老师教的课程，有多少其他老师也教过？",
        "output": "match(a:teacher where a.name='何若涵')-[e:teach]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以715,867,368,956作为请求点id, 源点的id等于输入表id,请帮我查找id为151的大学有关的城市的朋友, 再请帮我查找和城市有关系的朋友",
        "output": "with p as (select * from (VALUES(715),(867),(368),(956)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (id = '151')) -[e ]-(b:city) -[e2:friend ]->(c) , (b:city) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与陈梅有雇佣关系的个人，再给出与陈梅有喜欢的关系的个人。",
        "output": "match(a:person where a.name = '陈梅')-[e:pay]->(b:person),(a:person where a.name = '陈梅')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为lastLoginTime,value,name, 数据为(2006-11-05,312,'BIN'),(1999-03-09,161,'TheShy'),(2010-01-16,632,'Light')的子查询作为输入表, 以属性name作为相等条件,给出前66个满足条件peopleNumber在554到934之间且name不等于美团,或scale等于medium的company",
        "output": "with p as (select * from (VALUES(2006-11-05,312,'BIN'),(1999-03-09,161,'TheShy'),(2010-01-16,632,'Light')) as t(lastLoginTime,value,name))MATCH (a:company WHERE a.name = p.name AND (a.peopleNumber BETWEEN ASYMMETRIC 554 AND 934 AND a.name <> '美团' OR a.scale = 'medium')) RETURN a LIMIT 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和名为马建聪的person有相关者关系,或有相关者的相关者关系的评论",
        "output": "match(a:person where n.name=马建聪)-[e:relation]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签为company的点有apply关系的loan,并且和这些loan有deposit关系的account,并且和这些account有transfer关系的account",
        "output": "match(a:company)-[e:apply]->(b:loan)-[e2:deposit]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找所有类型是person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以创造关系关联了订单Order_120的买家",
        "output": "match(a:orders where a.name='Order_120')<-[e:creates]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出徐思思的订单中包含的商品。",
        "output": "match(a:buyer where a.name = '徐思思')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 筛选出标签为'patient'的点，然后按照'gender'属性进行升序排序。",
        "output": "match(a:patient) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找38个软件Redis和Spark,共同的朋友",
        "output": "match(a:software where a.name='Redis')-[e:friend]->(b)<-[e2:friend]-(c:software where c.name='Spark') return b limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有论坛的id加4的值",
        "output": "match(a:forum) return a.id + 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出selects course大学物理的student,和这些student selects的course",
        "output": "match(a:course where name = '大学物理')<-[e:selects]-(b:student)-[e2:selects]->(c:course) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 与郑红有关且与《白夜行》相关的书籍节点。",
        "output": "match(a:author where a.name='郑红')-[e:write]-(b:book)-[e2:refers]-(c:book where c.name='白夜行') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资减8357的值",
        "output": "a.salary - 8357",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询133个名为Prescription_168的点contain的label为medicine的节点,且其category不是止痛药",
        "output": "match(a where a.name='Prescription_168')-[e:contain]->(b:medicine where b.category <> '止痛药') return b limit 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为person，边标签为申请的边。返回这些边的weight最大值加181.83以及weight的平均值乘以155.46。",
        "output": "match(a:person)-[e:apply]->(b) return MAX(e.weight) + 181.83, AVG(e.weight) * 155.46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被film has数量大于107的tag,记为relationCount,再查询这些tag has的tag",
        "output": "match(a:tag) let a.relationCount = MIN((a:tag)<-[e:has]-(b:film) => b.id) match(a where a.relationCount > 107)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(1233,192,'famale'),(5710,165,'male'),(8033,165,'male')作为请求表数据,属性分别为salary,height,gender, 以属性height作为相等条件,找出和doctor有关联的prescription节点,并根据其name,id,createTime分组,返回name,id,createTime,以及id的数量除77的最大值",
        "output": "with p as (select * from (VALUES(1233,192,'famale'),(5710,165,'male'),(8033,165,'male')) as t(salary,height,gender))MATCH (a:doctor WHERE a.height = p.height) -[e:doctor_creates_prescription ]-(b:prescription) RETURN b.name, b.id, b.createTime, MAX(COUNT(b.id) / 77) GROUP BY b.name, b.id, b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询共同认识周建国和马建聪的人，标签为'person'的节点。",
        "output": "match(a where a.name = '周建国')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '马建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有书籍之间的关联，以及这些书籍与其他作家之间的撰写关系。",
        "output": "match(a:book where a.id = '129')-[e]-(b:book)<-[e2:write]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与清华大学和谷歌有关系的大学的名称。",
        "output": "match(a:university where a.name='清华大学')-[e]->(b:university)<-[e2]-(c:company where c.name='谷歌') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签为seller的点有ask关系的buyer,并且和这些buyer有cancel关系的orders,并且和这些orders有contain关系的goods",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders)-[e3:contain]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵红同学选的所有课程中，由其他老师教的课程数量。",
        "output": "match(a:student where a.name='赵红')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以teach关系关联了course程序设计的teacher",
        "output": "match(a:course where a.name='程序设计')<-[e:teach]-(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点满足条件salary不是4271,目标点满足条件wordCount大于770,id是51,且标签等于likes的边",
        "output": "match(a where a.salary <> 4271)-[e:likes]->(b where b.wordCount > 770 and b.id = 51) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点满足条件名字不等于清华大学,目标点满足条件大小减75除25为76且名字等于数学学院,或id不为空,且类型为拥有的边",
        "output": "match(a where a.name <> '清华大学')-[e:has]->(b where ((b.size - 75) / 25 = 76 and b.name = '数学学院') or (b.id is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与哪些公司有合作关系的大学，以及这些大学位于哪些城市。",
        "output": "match(a:city where a.id = '164')-[e]-(b:company)<-[e2:cooperate]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为wordCount,name,id, 数据为(801,'Comment_128',54),(852,'Comment_287',58),(932,'Comment_418',28),(294,'Comment_309',19), 以属性id作为相等条件,查找所有与person李梅有关系的comment的id",
        "output": "with p as (select * from (VALUES(801,'Comment_128',54),(852,'Comment_287',58),(932,'Comment_418',28),(294,'Comment_309',19)) as t(wordCount,name,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '李梅')) -[e ]-(b:comment) RETURN b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出仓库Tugraph拥有的事项, 令仓库的名字等于事项的名字, 返回仓库的id, 事项的id",
        "output": "match(a:repository where a.name='Tugraph')-[e:has]->(b:issue) let a.name = b.name return a.id,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为黄雪的点接受的所有处方,并对这些处方的id进行求和",
        "output": "match(a where a.name='黄雪')-[e:accept]->(b:prescription) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有人与人之间的边，如果它们属于'喜欢'的类型，并且源点类型是'人'，目标点类型也是'人'。",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出city contain的company, 令company的peopleNumber的值等于containcompany的city的name的最大值, 再查找company belong的city",
        "output": "match(a:city)-[e:contain]->(b:company) let b.peopleNumber = MAX((b:company)<-[e2:contain]-(c:city) => c.name) match(b:company)-[e3:belong]->(d:city) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出陈梅认识的人中，被其他人也认识的人数。",
        "output": "match(a:person where a.name='陈梅')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "stars对223取余的最小值",
        "output": "MIN(a.stars % 223)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从company微软出发,经过类型是apply的边,走3度到达的loan点",
        "output": "match(a:company where a.name='微软')-[e:apply]->{3,3}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出郑宏喜欢的书，以及孙伟写的书，一并返回。",
        "output": "match(a:reader where a.name = '郑宏')-[e:likes]->(b:book),(c:author where c.name = '孙伟')-[e2:write]->(d:book) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,createTime, 数据为('推特',74,2016-06-08),('百度贴吧',58,1996-02-17),('中国军事论坛',98,1996-05-17), 以属性name作为相等条件,找出与user马思琪有关,且与tag悬疑有关系的post节点",
        "output": "with p as (select * from (VALUES('推特',74,2016-06-08),('百度贴吧',58,1996-02-17),('中国军事论坛',98,1996-05-17)) as t(name,id,createTime))MATCH (a:user WHERE a.name = p.name AND (a.name = '马思琪')) -[e:user_publish_post ]-(b:post) -[e2:post_has_tag ]-(c:tag WHERE c.name = '悬疑') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表821,44,145, 源点的id等于输入表id,返回以relates关系关联了person王雪的person",
        "output": "with p as (select * from (VALUES(821),(44),(145)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '王雪')) <-[e:relates ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回年龄小于等于23,年龄小于12,或名字等于何梅的节点",
        "output": "match(a where (a.age <= 23 and a.age < 12) or a.name = '何梅') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为王建聪的点接受的所有处方,并对这些处方的名字进行求和",
        "output": "match(a where a.name='王建聪')-[e:accept]->(b:prescription) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找university复旦大学has的department节点has的teacher",
        "output": "match(a:university where a.name = '复旦大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与张建聪和杜伟都有关联的buyer节点，共147个。",
        "output": "match(a where a.name='张建聪')-[e]->(b:buyer)<-[e2]-(c where c.name='杜伟') return b limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和repository Tugraph有关系的repository,返回这些点的name",
        "output": "match(a:repository where a.name='Tugraph')-[e]-(b:repository) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从用户何宏出发,经过label为创造的边,走2到5度到达的合并请求点",
        "output": "match(a:user where a.name='何宏')-[e:creates]->{2,5}(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询一个人的家庭成员，以及这些家庭成员的家庭成员。",
        "output": "match(a:person)-[e:family]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于comment,名为Comment_132的点,返回这些点的name",
        "output": "match(a:comment where a.name = 'Comment_132') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部马红的点consult的seller,然后请帮我查找马红被ask的seller,一起返回",
        "output": "match(a where a.name = '马红')-[e:consult]->(b:seller),(a where a.name = '马红')<-[e2:ask]-(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以90, 37, 'xn'作为输入,返回运算结果",
        "output": "Call PAGERANK(90, 37, 'xn') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与loan loan_34有关系的account的isBlock",
        "output": "match(a:loan where a.name='loan_34')-[e]-(b:account) return b.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为郑月和黄国强的,label为用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='郑月')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='黄国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的数量减价值的平均值",
        "output": "AVG(COUNT(a.value) - a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找105个名为郑若涵的点creates的标签等于prescription的节点,且节点name不是Prescription_464且createTime的平均值等于695",
        "output": "match(a where a.name='郑若涵')-[e:creates]->(b:prescription where b.name <> 'Prescription_464' and AVG(b.createTime) = 695) return b limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出publisher类型节点下所有publish的book,以及这些book下所有refers的book,以及这些book下所有refers的book。",
        "output": "match(a:publisher)-[e:publish]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "寻找通过名为'has'标签的边，从电影'变形金刚'出发并跳转2次或3次后到达的标记节点。",
        "output": "match(a:film where a.name='变形金刚')-[e:has]->{2,3}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出197个销量在798.03到1021.21之间,价格为空且销量大于等于1251.84的商品,根据类别从小到大排列",
        "output": "match(a:goods where (a.sellerNumber BETWEEN 798.03 AND 1021.21) and (a.price is null) and a.sellerNumber >= 1251.84) return a order by a.category asc limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回loan loan_92 deposit的account,被其他person own的数量",
        "output": "match(a:loan where a.name='loan_92')-[e:deposit]->(b:account)<-[e2:own]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和department体育学院有关系的course或department或student,返回这些点的name,height,salary",
        "output": "match(a:department where a.name='体育学院')-[e]-(b:course | department | student) return b.name, b.height, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id除16的最小值大于等于4136,名字不是王国强的person认识的person的名称,以及这些person 关联的person的名称",
        "output": "match(a:person where MIN(a.id / 16) >= 4136 and a.name <> '王国强')-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为person,边label为likes,以及f0在629到896之间或f1不等于true的边",
        "output": "match(a:person)-[e:likes where (e.f0 BETWEEN 629 AND 896) or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张梅和赵思思的,类型为作家的点公共的伙伴节点的名单",
        "output": "match(a:author where a.name='张梅')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='赵思思') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杜建国认识的所有人的公司，并返回这些人的ID。",
        "output": "match(a where a.name = '杜建国')-[e:knows]->(b:person)-[e2:belong]->(c:company) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,age, 数据为('何强',73,78),('郑国强',7,15),('杜科',24,41), 源点的age等于输入表age,请帮我查找所有和person赵月之间有person_parent_person关系的person",
        "output": "with p as (select * from (VALUES('何强',73,78),('郑国强',7,15),('杜科',24,41)) as t(name,id,age))MATCH (a:person WHERE a.age = p.age AND (a.name = '赵月')) -[e:person_parent_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询value在227到955之间,name不是Zeus的account repay的loan的名称,以及这些loan deposit的account的名称",
        "output": "match(a:account where (a.value BETWEEN 227 AND 955) and a.name <> 'Zeus')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于person的点,返回32个",
        "output": "match(a:person) return a limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点标签等于department,边标签等于department_has_teacher,且满足条件srcId小于等于132或f0小于等于944或weight减113.33大于等于187.65的边",
        "output": "match(a:department)-[e:department_has_teacher where e.srcId <= 132 or e.f0 <= 944 or e.weight - 113.33 >= 187.65]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和公司有合作关系的大学，以及这些大学所在的城市，以及这些城市所在的国家。",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:belong]->(c:city)-[e3:belong]->(d:country) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被department放射科has的doctor,和放射科has的doctor",
        "output": "match(a:doctor)<-[e:has]-(b:department where name = '放射科')-[e2:has]->(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是consult,以及weight不等于157.07且f0为空,或timeStamp不是2012年07月15日的边",
        "output": "match(a)-[e:consult where (e.weight <> 157.07 and (e.f0 is null)) or e.timeStamp <> '2012-07-15']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被账号Light还款的贷款,和Light转账的账号",
        "output": "match(a:loan)<-[e:repay]-(b:account where name = 'Light')-[e2:transfer]->(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出用户源点类型为user、边类型为creates的边，并返回这些边中目标ID除以172取余的结果，以及f0乘以983的最大值。",
        "output": "match(a:user)-[e:creates]->(b) return e.targetId % 172, MAX(e.f0 * 983)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以has关系关联了doctor赵建聪的department",
        "output": "match(a:doctor where a.name='赵建聪')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为medicine且被Prescription_358和Prescription_410共同包含的所有节点",
        "output": "match(a where a.name = 'Prescription_358')-[e:contain]->(b:medicine)<-[e2:contain]-(c where c.name = 'Prescription_410') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和仓库JavaGuid有拥有关系的用户,再找出以拥有关系关联了JavaGuid的用户",
        "output": "match(a:repository where a.name = 'JavaGuid')-[e:has]->(b:user),(a:repository where a.name = 'JavaGuid')<-[e2:has]-(c:user)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回155个与Mybatis和Kafka都存在关系的repository或user节点",
        "output": "match(a where a.name='Mybatis')-[e]->(b:repository | user)<-[e2]-(c where c.name='Kafka') return b limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以308,773,869作为请求点id, 源点的id等于输入表id,查找被person赵雪knows的person",
        "output": "with p as (select * from (VALUES(308),(773),(869)) as t(id)) MATCH (a:person WHERE a.id = p.id) <-[e:knows ]-(b:person WHERE b.name = '赵雪') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有四川大学的点合作的公司,然后查询四川大学被包含的城市,一起返回",
        "output": "match(a where a.name = '四川大学')-[e:cooperate]->(b:company),(a where a.name = '四川大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询loan deposit的account, 令account的name的值等于ownaccount的person的gender的数量, 再查找account transfer的account",
        "output": "match(a:loan)-[e:deposit]->(b:account) let b.name = COUNT((b:account)<-[e2:own]-(c:person) => c.gender) match(b:account)-[e3:transfer]->(d:account) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出百度贴吧中帖子节点包含的标签。",
        "output": "match(a:forum where a.name = '百度贴吧')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与李轩患者有关联的accept关系，并且与医疗酒精药物有关联的prescription节点。返回这些prescription的weight、name以及李轩患者的gender和医疗酒精药物的价格。",
        "output": "match(a:patient where a.name='李轩')-[e:accept]->(b:prescription)<-[e2:contain]-(c:medicine where c.name='医疗酒精') return a.gender,b.weight, b.name,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,salary,age, 数据为(175,1298,46),(172,9325,63),(179,9080,4),(175,3066,89)的子查询作为输入表, 以属性age作为相等条件,查找杜思思的点支付的person,然后查找杜思思被喜欢的person,一起返回",
        "output": "with p as (select * from (VALUES(175,1298,46),(172,9325,63),(179,9080,4),(175,3066,89)) as t(height,salary,age))MATCH (a WHERE a.age = p.age AND (a.name = '杜思思')) -[e:person_pay_person ]->(b:person) , (a WHERE a.name = '杜思思') <-[e2:person_likes_person ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为计算机网络的书",
        "output": "match(a:book where a.name = '计算机网络') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出seller张伟has的goods,以及has这些goods的seller",
        "output": "match(a:seller where name = '张伟')-[e:has]->(b:goods)<-[e2:has]-(c:seller) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询33个名为建国大业的点拥有的label为标签的节点,且其id大于等于49,名字不等于古代",
        "output": "match(a where a.name='建国大业')-[e:has]->(b:tag where b.id >= 49 and b.name <> '古代') return b limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与ID为114的账号有关联的账号及其相关者。",
        "output": "match(a:account where id = '114')-[e]-(b:account)-[e2:partner]->(c), (b:account)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,gender, 数据为(6600,64,'famale'),(6799,55,'male'),(6893,11,'male')的子查询作为输入表, 源点的id等于输入表id,返回和orders Order_290有关的seller,称为X,再返回和这个X有关联的其他seller,以及和X有关联的orders",
        "output": "with p as (select * from (VALUES(6600,64,'famale'),(6799,55,'male'),(6893,11,'male')) as t(salary,id,gender))MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_290')) -[e ]-(b:seller) , (b:seller) -[e2 ]-(c:seller) , (b:seller) -[e3 ]-(d:orders) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(37,'三体',98),(9,'java程序设计',94),(90,'罪与罚',24),(92,'三体',71)作为请求表数据,属性分别为id,name,id, 以属性id作为相等条件,返回标签为书的所有点,并根据id从大到小排列",
        "output": "with p as (select * from (VALUES(37,'三体',98),(9,'java程序设计',94),(90,'罪与罚',24),(92,'三体',71)) as t(id,name,id))MATCH (a:book WHERE a.id = p.id) RETURN a ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "杜梅和赵建聪是合作伙伴，共有150人。",
        "output": "match(a:person where a.name='杜梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='赵建聪') return b limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为68的publisher有关的author的partner, 再帮我查询和author有关系的relation",
        "output": "match(a:publisher where id = 68)-[e]-(b:author)-[e2:partner]->(c), (b:author)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person何梅存在观看关系,且与标签古代存在拥有关系的电影节点，返回这些电影的价值,类别,id,及person何梅的名字,及标签古代的id",
        "output": "match(a:person where a.name='何梅')-[e:watch]->(b:film)<-[e2:has]-(c:tag where c.name='古代') return a.name,b.value, b.category, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出仓库拥有的事项,返回其源点的星数加645的值,以及目标点的id除id除68的最小值",
        "output": "match(a:repository)-[e:has]->(b:issue) return a.stars + 645, MIN(b.id / b.id / 68)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找139个部门计算机学院和文学院,共同的伙伴",
        "output": "match(a:department where a.name='计算机学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='文学院') return b limit 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为136的商品有关的买家的伙伴, 再查询和买家有关系的朋友",
        "output": "match(a:goods where id = 136)-[e]-(b:buyer)-[e2:partner]->(c), (b:buyer)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出薪资除1073的平均值为2169的节点",
        "output": "match(a where AVG(a.salary / 1073) = 2169) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先查找与部门ID为188的部门有关的朋友，然后再查找这些朋友所认识的朋友。",
        "output": "match(a:department where id = '188')-[e]-(b:department)-[e2:friend]->(c), (b:department)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵红认识的person,以及认识这些person的person",
        "output": "match(a:person where name = '赵红')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表675,592, 源点的id等于输入表id,请帮我查找和company有关联的university节点,并根据其name,level,id分组,返回name,level,id,以及id对53取余的最大值",
        "output": "with p as (select * from (VALUES(675),(592)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_cooperate_university ]-(b:university) RETURN b.name, b.level, b.id, MAX(b.id % 53) GROUP BY b.name, b.level, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以207,630作为请求点id, 以属性id作为相等条件,帮我查询处方的三角的环,边标签为prescription_contain_medicine, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(207),(630)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) -[e:prescription_contain_medicine ]->(b) -[e2:prescription_contain_medicine ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与韩雪存在创造关系的事项,事项与仓库存在属于关系的点,返回这些点的权重",
        "output": "match(a where a.name = '韩雪')-[e:creates]->(b:issue)-[e2:belong]->(c:repository) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于公司的点,返回16个",
        "output": "match(a:company) return a limit 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值乘17的数量",
        "output": "COUNT(MAX(a.id) * 17)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出188个和标签为person的点有own关系的account,且和这些account有repay关系的loan",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan) return c limit 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为PR-153的合并请求有相关者关系,或有相关者的相关者关系的仓库",
        "output": "match(a:pullRequest where n.name=PR-153)-[e:relation]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person郑宏有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '郑宏')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出height等于153的节点",
        "output": "match(a where a.height = 153) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出订单Order_178包含的商品,以及包含这些商品的订单",
        "output": "match(a:orders where name = 'Order_178')-[e:contain]->(b:goods)<-[e2:contain]-(c:orders) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与用户王月有创造关系的1跳以内的环",
        "output": "match(a:user where name = '王月')-[e:creates]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height对height取余的最大值",
        "output": "MAX(a.height % a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出ID为73的人的父母，再找出与这些人有关的人（如恋人）。",
        "output": "match(a:person where id = '73')-[e]-(b:person)-[e2:parent]->(c), (b:person)-[e3:lover]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有源点类型为读者，边类型为喜欢的边，并计算这些边的源点ID求和，以及所有权重乘权重的最小值。",
        "output": "match(a:reader)-[e:likes]->(b) return SUM(e.srcId / 0), MIN(e.weight * e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是person的点,并根据身高从大到小排列",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person有关联的person节点,并根据其gender分组,返回gender,以及id减20的最大值",
        "output": "match(a:person)-[e:family]-(b:person) return b.gender, MAX(b.id - 20) group by b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找publisher为郑梅，且book为《罪与罚》的节点，返回它们的name和id。",
        "output": "match(a:publisher where a.name='郑梅')-[e]->(b:book)<-[e2]-(c:book where c.name='罪与罚') return b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于student,名为孙月的点,返回这些点的name,age,gender",
        "output": "match(a:student where a.name = '孙月') return a.name, a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司雇佣的person, 令person(b)的性别的值等于认识person的person的性别的求和值, 再查找person属于的公司",
        "output": "match(a:company)-[e:employee]->(b:person) let b.gender = SUM((b:person)<-[e2:knows]-(c:person) => c.gender) match(b:person)-[e3:belong]->(d:company) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和department文学院有关的department,再请帮我查找和文学院has的其他student,返回它们",
        "output": "match(a:department where a.name = '文学院')-[e]-(b:department), (a:department)-[e2:has]->(c:student) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出满足条件id不是13或创建时间的和为33或创建时间不是2014年06月20日的节点",
        "output": "match(a where a.id <> 13 or SUM(a.createTime) = 33 or a.createTime <> '2014-06-20') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为reader的点,返回89个",
        "output": "match(a:reader) return a limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找百度贴吧中包含标签的帖子，并返回这些帖子所拥有的标签的ID、名称和价值。",
        "output": "match(a:forum where name = '百度贴吧')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c.id, c.name, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为159的贷款存款的账号, 并将账号有关的贷款的金额的最小值赋值给账号的上次登录时间, 接着查询账号的上次登录时间小于159的账号转账的账号",
        "output": "match(a:loan where a.id = 159)-[e:deposit]->(b:account) let b.lastLoginTime = MIN((b:account)-[e2]-(c:loan) => c.amount) match(b:account where b.lastLoginTime < 159)-[e3:transfer]->(d:account) return b.lastLoginTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部和药品阿司匹林有2跳或3跳关系的医生",
        "output": "match(a:medicine where a.name='阿司匹林')-[e]->{2,3}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和公司有关联的贷款节点,并根据其权重分组,返回权重,以及id对66取余的平均值",
        "output": "match(a:company)-[e:apply]-(b:loan) return b.weight, AVG(b.id % 66) group by b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与大学北京大学有关系的大学的价值",
        "output": "match(a:university where a.name='北京大学')-[e]-(b:university) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出同时被标记为买家且名字分别为李思思和杜强的人的共同联系人列表。",
        "output": "match(a:buyer where a.name='李思思')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='杜强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与部门文学院有拥有关系的3跳的环",
        "output": "match(a:department where name = '文学院')-[e:has]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间,id,字数分组,计算id的求和值加44的个数",
        "output": "return COUNT(SUM(a.id) + 44) group by a.createTime, a.id, a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时包含'person'标签和'喜欢'关系的评论，以及与这些评论有'属于'关系的电影。",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵红和何梅的共同朋友，他们各有64个。",
        "output": "match(a:person where a.name='赵红')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='何梅') return b limit 64",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));找出city伦敦contain的university,被其他company cooperate的数量",
        "output": "match(a:city where a.name='伦敦')-[e:city_contain_university]->(b:university)<-[e2:company_cooperate_university]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与大学相关的部门节点，按ID和价值进行分组，并返回ID和价值。",
        "output": "match(a:university)-[e:has]-(b:department) return b.id, b.value group by b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前60个满足条件薪资除4780的数量是2376的person",
        "output": "match(a:person where COUNT(a.salary / 4780) = 2376) return a limit 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询126个名为马科的点认识的类型为person的节点,且节点性别不等于famale",
        "output": "match(a where a.name='马科')-[e:knows]->(b:person where b.gender <> 'famale') return b limit 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表286,76,495,566,925, 以属性id作为相等条件,帮我查询与编辑吴强有publisher_publish_book关系的2度以内的环",
        "output": "with p as (select * from (VALUES(286),(76),(495),(566),(925)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (name = '吴强')) -[e:publisher_publish_book ]->{0,1}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,address,size分组,计算size对size取余的值",
        "output": "return a.size % a.size group by a.id, a.address, a.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被读者何国强喜欢的书",
        "output": "match(a:book)<-[e:likes]-(b:reader where b.name='何国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回88个名为马思思的点支付的标签等于person的节点,且节点性别不是male,薪资不是4577",
        "output": "match(a where a.name='马思思')-[e:pay]->(b:person where b.gender <> 'male' and b.salary <> 4577) return b limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出订单日期，返回订单中商品的价值、名称和销量。",
        "output": "match(a:buyer where name = '何月')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.value, c.name, c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(14,'徐建聪',196)作为请求表数据,属性分别为age,name,height, 源点的height等于输入表height,查找和person李国强有person_lover_person关系的person,以及和person陈轩有person_friend_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(14,'徐建聪',196)) as t(age,name,height))MATCH (a:person WHERE a.height = p.height AND (a.name = '李国强')) -[e:person_lover_person ]->(b:person) , (c:person WHERE c.name = '陈轩') -[e2:person_friend_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵红和郑思琪这两位作家的共同合作伙伴。",
        "output": "match(a:author where a.name='赵红')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='郑思琪') return b limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出169个名为黄梅的点咨询的类型是卖家的节点,且节点id不等于82且id大于95",
        "output": "match(a where a.name='黄梅')-[e:consult]->(b:seller where b.id <> 82 and b.id > 95) return b limit 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person赵思思喜欢的person,和赵思思喜欢的person",
        "output": "match(a:person)<-[e:likes]-(b:person where name = '赵思思')-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与仓库Tugraph和Mybatis都存在拥有关系的点",
        "output": "match(a:repository where a.name='Tugraph')-[e:has]->(b)<-[e2:has]-(c:repository where c.name='Mybatis') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与医生周思琪有关系的处方的名字",
        "output": "match(a:doctor where a.name='周思琪')-[e]-(b:prescription) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与电影《泰坦尼克号》有watch关系的人",
        "output": "match(a:film where a.name='泰坦尼克号')<-[e:watch]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询部门拥有的教师,返回其源点的value的平均值除421乘51的最大值,以及目标点的薪资对7300取余加178的值",
        "output": "match(a:department)-[e:has]->(b:teacher) return MAX(AVG(a.value) / 421 * 51), b.salary % 7300 + 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为推特的点的,age为空或gender的最小值小于等于190的friend,返回这些friend的name,和边的f0,srcId",
        "output": "match(a where a.name='推特')-[e:friend]->(b where (b.age is null) or MIN(b.gender) <= 190) return b.name,e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为SprintBoot的点uses的所有software,并对这些software的lang进行求和",
        "output": "match(a where a.name='SprintBoot')-[e:uses]->(b:software) return SUM(b.lang)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和电影星际穿越之间有拥有关系的标签",
        "output": "match(a:film where a.name='星际穿越')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与CSDN论坛有相关关系，或与有相关者的相关者有关联的人。",
        "output": "match(a:forum where n.name=CSDN)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出buyer黄思思的friend,的f0的平均值减599乘weight的值",
        "output": "match(a:buyer where a.name= '黄思思')-[e:friend]->(b) return (AVG(e.f0) - 599) * e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为马思思的person,以及与其有关的person,并返回马思思的id和这些person的id",
        "output": "match(a:person where name = '马思思')-[e]-(b:person) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为139的点的权重,创建时间",
        "output": "match(a where a.id = 139) return a.weight, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回university的2跳以内的环",
        "output": "match(a:university)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出city重庆的所有relation,的srcId除36对srcId取余的值",
        "output": "match(a:city where a.name= '重庆')-[e:relation]->(b) return e.srcId / 36 % e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,height,gender, 数据为(1374,164,'famale')的子查询作为输入表, 以属性salary作为相等条件,查询贷款defaultName的伙伴的朋友的伙伴",
        "output": "with p as (select * from (VALUES(1374,164,'famale')) as t(salary,height,gender))MATCH (a:loan WHERE a.salary = p.salary AND (a.name = 'defaultName')) -[e:partner ]->(b) -[e2:friend ]->(c) -[e3:partner ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家黄雪撰写的书,被其他读者喜欢的数量",
        "output": "match(a:author where a.name='黄雪')-[e:write]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出company阿里belong的city,被其他university belong的数量",
        "output": "match(a:company where a.name='阿里')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有标签为'person'的点，并按性别升序排序。",
        "output": "match(a:person) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 与李梅有同事关系或同事同事关系的人。",
        "output": "match(a:person where n.name=李梅)-[e:colleague]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与李宏有购买关系的软件，以及与李宏有关联的已知人物。",
        "output": "match(a:person where a.name = '李宏')-[e:buy]->(b:software),(a:person where a.name = '李宏')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('male',4802,22),('male',1072,70),('male',4097,80)作为请求表数据,属性分别为gender,salary,age, 以属性salary作为相等条件,返回label为处方的点,返回164个",
        "output": "with p as (select * from (VALUES('male',4802,22),('male',1072,70),('male',4097,80)) as t(gender,salary,age))MATCH (a:prescription WHERE a.salary = p.salary) RETURN a LIMIT 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为10的点的薪资",
        "output": "match(a where a.id = 10) return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为32的company关联的loan,和以apply关系关联了这些loan的其他person",
        "output": "match(a:company where a.id = 32)-[e]-(b:loan)<-[e2:apply]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询账号Light的所有伙伴,的权重除权重的最小值",
        "output": "match(a:account where a.name= 'Light')-[e:partner]->(b) return MIN(e.weight / e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部名为悲惨世界的,类别不是小说的引用,返回这些引用的价格,和边的源点id,权重",
        "output": "match(a where a.name='悲惨世界')-[e:book_refers_book]->(b where b.category <> '小说') return b.price,e.srcId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是喜欢,且满足条件目标点id不等于96且f1不等于false且权重不等于151.65的边",
        "output": "match(a)-[e:likes where e.targetId <> 96 and e.f1 <> false and e.weight <> 151.65]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,price,value, 数据为(12,3211.23,459),(9,1034.30,582), 以属性id作为相等条件,帮我查询buyer以gender,height,age分组的id, 根据id从大到小排序",
        "output": "with p as (select * from (VALUES(12,3211.23,459),(9,1034.30,582)) as t(id,price,value))MATCH (a:buyer WHERE a.id = p.id) RETURN a.id GROUP BY a.gender, a.height, a.age ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出姓杜的人。",
        "output": "match(a:person where a.name = '杜宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出类型是company的点,返回145个",
        "output": "match(a:company) return a limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "这个句子可以被简化为：一个人与另一个人有关联，而这个人又与其他一些人有关联。",
        "output": "match(a:person where a.id = '98')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出大学北京大学拥有的部门, 令部门的价值等于大学的价值,令部门的id等于大学的id, 返回大学的价值, 部门的名字",
        "output": "match(a:university where a.name='北京大学')-[e:has]->(b:department) let b.value = a.value,let b.id = a.id return a.value,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与武汉大学有合作关系的公司，再找出与这些公司有合作关系的公司。",
        "output": "match(a:university where a.name = '武汉大学')-[e:cooperate]->(b:company),(a:university where a.name = '武汉大学')<-[e2:cooperate]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为王建国的点取消的订单",
        "output": "match(a where a.name='王建国')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(23,'Order_468',439),(77,'Order_333',919)的子查询作为输入表, 以属性name作为相等条件,给出被seller郑科has的goods",
        "output": "with p as (select * from (VALUES(23,'Order_468',439),(77,'Order_333',919)) as t(id,name,value))MATCH (a:goods WHERE a.name = p.name) <-[e:seller_has_goods ]-(b:seller WHERE b.name = '郑科') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款存款的账号, 令账号(b)的是否冻结的值等于转账账号的账号的上次登录时间的平均值, 再查找账号还款的贷款",
        "output": "match(a:loan)-[e:deposit]->(b:account) let b.isBlock = AVG((b:account)<-[e2:transfer]-(c:account) => c.lastLoginTime) match(b:account)-[e3:repay]->(d:loan) return b.isBlock, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为王轩的点的,性别的最小值小于等于191的父母,返回这些父母的性别,和边的目标点id,源点id",
        "output": "match(a where a.name='王轩')-[e:parent]->(b where MIN(b.gender) <= 191) return b.gender,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与帖子Post_114和Post_202有关系的论坛节点，并返回它们的价值和人数。",
        "output": "match(a:post where a.name='Post_114')-[e]->(b:forum)<-[e2]-(c:post where c.name='Post_202') return b.value, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与蚂蚁集团有关系的人。",
        "output": "match(a:company where a.name='蚂蚁集团')<-[e:belong]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与杜国强存在接受关系的处方,处方与药品存在包含关系的点,返回这些点的类别",
        "output": "match(a where a.name = '杜国强')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(12,556,3)作为请求表数据,属性分别为id,value,level, 源点的id等于输入表id,给出和公司腾讯有2到4跳关系的大学",
        "output": "with p as (select * from (VALUES(12,556,3)) as t(id,value,level))MATCH (a:company WHERE a.id = p.id AND (a.name = '腾讯')) -[e ]->{2,4}(b:university) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和读者周伟有1到4度关系的书",
        "output": "match(a:reader where a.name='周伟')-[e]->{1,4}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与company Bilibili有关系的company的scale",
        "output": "match(a:company where a.name='Bilibili')-[e]-(b:company) return b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为苹果的商品,以及与其有关的卖家,并返回苹果的销量和这些卖家的年龄",
        "output": "match(a:goods where name = '苹果')-[e]-(b:seller) return a.sellerNumber, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被编辑发布数量大于40的书,记为relationCount,再查询这些书发布的编辑",
        "output": "match(a:book) let a.relationCount = MAX((a:book)<-[e:publish]-(b:publisher) => b.id) match(a where a.relationCount > 40)-[e2:publish]->(c:publisher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,名字,id分组,计算id减33的最大值",
        "output": "return MAX(a.id - 33) group by a.age, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表373,623,952, 源点的id等于输入表id,帮我查询和person有关联的company节点,并根据其name,peopleNumber分组,返回name,peopleNumber,以及value加724加609的值",
        "output": "with p as (select * from (VALUES(373),(623),(952)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_belong_company ]-(b:company) RETURN b.name, b.peopleNumber, b.value + 724 + 609 GROUP BY b.name, b.peopleNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点满足条件age的最大值小于7728或age小于92,目标点满足条件value在302到763之间且openSource不是false,或id小于等于54,且label为commits的边",
        "output": "match(a where MAX(a.age) < 7728 or a.age < 92)-[e:commits]->(b where ((b.value BETWEEN 302 AND 763) and b.openSource <> false) or b.id <= 54) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点label为仓库,目标点label为合并请求,label为合并请求或事项的边",
        "output": "match(a:repository)-[e:pullRequest | issue]->(b:pullRequest) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为吴红的点的,age不等于75或gender的平均值为53的relation,返回这些relation的height,和边的f0,weight",
        "output": "match(a where a.name='吴红')-[e:relation]->(b where b.age <> 75 or AVG(b.gender) = 53) return b.height,e.f0, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被作家张月认识的作家",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='张月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与person杜轩有关系的person的薪资",
        "output": "match(a:person where a.name='杜轩')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与公司滴滴存在company_belong_city关系,且与大学四川大学存在city_contain_university关系的城市节点，返回这些城市的id,人数,面积,及公司滴滴的id,及大学四川大学的等级",
        "output": "match(a:company where a.name='滴滴')-[e:company_belong_city]->(b:city)<-[e2:city_contain_university]-(c:university where c.name='四川大学') return a.id,b.id, b.peopleNumber, b.area,c.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找orders Order_368的全部label为friend的边,并根据weight升序排列,返回194个",
        "output": "match(a:orders where a.name = 'Order_368')-[e:friend]->(b) return b order by e.weight asc limit 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person郑轩有关的person,再查找和郑轩喜欢的其他person,返回它们",
        "output": "match(a:person where a.name = '郑轩')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person支付的person, 令person(b)的性别的值等于支付person的person的性别的最小值, 再查找person喜欢的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.gender = MIN((b:person)<-[e2:pay]-(c:person) => c.gender) match(b:person)-[e3:likes]->(d:person) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点类型是person,目标点类型是公司,类型是账号或person的边",
        "output": "match(a:person)-[e:account | person]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与微软公司有关且与Zeus账户有关的贷款节点，并返回它们的ID、金额和重量。",
        "output": "match(a:company where a.name='微软')-[e]->(b:loan)<-[e2]-(c:account where c.name='Zeus') return b.id, b.amount, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出王科的点creates的点prescription,然后请帮我找出王科被has的点department,一起返回。",
        "output": "match(a where a.name = '王科')-[e:creates]->(b:prescription),(a where a.name = '王科')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person pay的person, 令person(b)的gender的值等于payperson的person的id的最小值, 再查找person pay的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.gender = MIN((b:person)<-[e2:pay]-(c:person) => c.id) match(b:person)-[e3:pay]->(d:person) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和部门数学学院之间有拥有关系的学生",
        "output": "match(a:department where a.name='数学学院')-[e:has]->(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为ISSUE-423的点属于的所有仓库,并对这些仓库的语言进行求和",
        "output": "match(a where a.name='ISSUE-423')-[e:belong]->(b:repository) return SUM(b.lang)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与订单Order_183有关系的卖家的性别",
        "output": "match(a:orders where a.name='Order_183')-[e]-(b:seller) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "area的个数加11232的平均值",
        "output": "AVG(COUNT(a.area) + 11232)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询158个读者赵宏和李建聪,共同的相关者",
        "output": "match(a:reader where a.name='赵宏')-[e:relation]->(b)<-[e2:relation]-(c:reader where c.name='李建聪') return b limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person黄思思有关系的person,返回这些点的性别,年龄",
        "output": "match(a:person where a.name='黄思思')-[e]-(b:person) return b.gender, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person赵思琪有own关系的1跳以内的环",
        "output": "match(a:person where name = '赵思琪')-[e:own]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和buyer点有creates关系的orders节点,且边满足条件f0为空,目标orders节点value小于994",
        "output": "match(a:buyer)-[e:creates where (e.f0 is null)]->(b:orders where b.value < 994) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张红的点的,名字等于何建聪的恋人,返回这些恋人的性别,和边的目标点id,权重",
        "output": "match(a where a.name='张红')-[e:lover]->(b where b.name = '何建聪') return b.gender,e.targetId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'tq', 'oK'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('tq', 'oK') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为'阿莫新林',标签为'medicine'的点，并返回它们的weight,price和name。",
        "output": "match(a:medicine where a.name = '阿莫新林') return a.weight, a.price, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以包含关系关联了药品散利痛的处方",
        "output": "match(a:medicine where a.name='散利痛')<-[e:contain]-(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 158个人物节点与LX001和XXD有关。",
        "output": "match(a where a.name='LX001')-[e]->(b:person)<-[e2]-(c where c.name='XXD') return b limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有源点类型为person,边类型为belong的边，计算这些边的f0乘811的值和f0加f0除657的值。",
        "output": "match(a:person)-[e:belong]->(b) return e.f0 * 811, (e.f0 + e.f0) / 657",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与郑伟和周宏都有关联的人，并返回他们的ID和姓名。",
        "output": "match(a:person where a.name='郑伟')-[e]->(b:person)<-[e2]-(c:person where c.name='周宏') return b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有从论坛出发，到帖子结束，并且类型为包含的边。",
        "output": "match(a:forum)-[e:contain]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找同时与陈国强和李雪有关联的人。",
        "output": "match(a:person where a.name='陈国强')-[e:pay]-(b:person)-[e2:likes]-(c:person where c.name='李雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出user郑雪和何强都喜欢的点",
        "output": "match(a:user where a.name='郑雪')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='何强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从卖家周思思出发,经过label为拥有的边,走3到6度到达的商品点",
        "output": "match(a:seller where a.name='周思思')-[e:has]->{3,6}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与用户马思思有喜欢关系的帖子，然后返回与马思思有发布关系的帖子。",
        "output": "match(a:user where a.name = '马思思')-[e:likes]->(b:post),(a:user where a.name = '马思思')<-[e2:publish]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,薪资分组,计算id对90取余的和",
        "output": "return SUM(a.id % 90) group by a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点类型是user,边类型是likes的边,返回这些边的weight的和乘weight的平均值,和srcId对75取余的值",
        "output": "match(a:user)-[e:likes]->(b) return AVG(SUM(e.weight) * e.weight), e.srcId % 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于部门或学生或教师的点",
        "output": "match(a:department | student | teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 在电影院和上映的电影之间查找边。",
        "output": "match(a:cinema)-[e:releases]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与法学院有相关者关系或相关者相关者关系的所有学生。",
        "output": "match(a:department where n.name=法学院)-[e:relation]->{1,2}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和软件Redis有关的软件,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的软件",
        "output": "match(a:software where a.name = 'Redis')-[e]-(b:software), (b:software)-[e2]-(c:person),(b:software)-[e3]-(d:software) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回城市节点标签为city,边标签为contain的边，并计算这些边weight乘175.08的求和值，以及f0对523取余的平均值。",
        "output": "match(a:city)-[e:contain]->(b) return SUM(e.weight * 175.08), AVG(e.f0 % 523)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为person的点,返回189个",
        "output": "match(a:person) return a limit 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被帖子Post_469拥有的标签,和Post_469拥有的标签",
        "output": "match(a:tag)<-[e:has]-(b:post where name = 'Post_469')-[e2:has]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和帖子Post_225之间有拥有关系的标签",
        "output": "match(a:post where a.name='Post_225')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出何伟卖家拥有哪些商品。",
        "output": "match(a:goods)<-[e:has]-(b:seller where b.name='何伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为孤城的publisher或book,以及与其有关的author,并返回孤城的createTime和这些author的salary",
        "output": "match(a:publisher | book where name = '孤城')-[e]-(b:author) return a.createTime, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前119个label为提交的边",
        "output": "match(a)-[e:commits]->(b) return e limit 119",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回person标签的所有点，按身高升序排列。",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以587,234,425,733作为请求点id, 源点的id等于输入表id,查询id为196的点的name",
        "output": "with p as (select * from (VALUES(587),(234),(425),(733)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '196')) RETURN a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与名为徐国强的人有朋友关系，或者有朋友的朋友关系的评论",
        "output": "match(a:person where n.name=徐国强)-[e:friend]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person何建聪和孙雪都存在投资关系的点",
        "output": "match(a:person where a.name='何建聪')-[e:invest]->(b)<-[e2:invest]-(c:person where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是医生的点,返回58个",
        "output": "match(a:doctor) return a limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为196的person有关的person的朋友, 再给出和person有关系的相关者",
        "output": "match(a:person where id = 196)-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请统计孙伟编辑的书中，有多少被其他书引用",
        "output": "match(a:publisher where a.name='孙伟')-[e:publish]->(b:book)<-[e2:relates]-(c:book) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与韩红有关联的账号，以及这些账号与贷款之间的还款关系，并返回这些关系的权重。",
        "output": "match(a where a.name = '韩红')-[e:own]->(b:account)-[e2:repay]->(c:loan) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和名为徐国强的person有恋人关系,或有恋人的恋人关系的person",
        "output": "match(a:person where n.name=徐国强)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以74,485,738,815作为请求点id, 源点的id等于输入表id,帮我查询全部和person吴建国有关系的账号节点,返回这些点的上次登录时间,是否冻结",
        "output": "with p as (select * from (VALUES(74),(485),(738),(815)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴建国')) -[e ]-(b:account) RETURN b.lastLoginTime, b.isBlock ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找28个和类型是account的点有repay关系的loan,且和这些loan有deposit关系的account",
        "output": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为ISSUE-114的点的,权重小于185或创建时间不等于2018年05月02日的朋友,返回这些朋友的权重,和边的f0,源点id",
        "output": "match(a where a.name='ISSUE-114')-[e:friend]->(b where b.weight < 185 or b.createTime <> '2018-05-02') return b.weight,e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找doctor陈雪creates的prescription,被其他doctor creates的数量",
        "output": "match(a:doctor where a.name='陈雪')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有类型是评论的点",
        "output": "match(a:comment) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回与名为李红和马宏的点共同认识的,类型为person的节点",
        "output": "match(a where a.name = '李红')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '马宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和用户马伟有关的用户,再查找和马伟喜欢的其他仓库,返回它们",
        "output": "match(a:user where a.name = '马伟')-[e]-(b:user), (a:user)-[e2:likes]->(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和帖子有关联的标签节点,并根据其id,名字,价值分组,返回id,名字,价值,以及value的平均值加551的值",
        "output": "match(a:post)-[e:has]-(b:tag) return b.id, b.name, b.value, AVG(b.value) + 551 group by b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与公司Bilibili有关系的账号的名字",
        "output": "match(a:company where a.name='Bilibili')-[e]-(b:account) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为belong,并且满足条件weight大于138.31的边",
        "output": "match(a)-[e:belong where e.weight > 138.31]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与author王国强有关，并且与book计算机网络有关的author节点",
        "output": "match(a:author where a.name='王国强')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='计算机网络') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按姓名对论坛进行分组，并根据人数从高到低排序。",
        "output": "match(a:forum) return a.peopleNumber group by a.name order by a.peopleNumber desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与账号Light和贷款defaultName都有关联的公司节点及其规格和名称。",
        "output": "match(a:account where a.name='Light')-[e]->(b:company)<-[e2]-(c:loan where c.name='defaultName') return b.scale, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找buyer为郑思思，且包含鞋子商品的orders。",
        "output": "match(a:buyer where a.name='郑思思')-[e:creates]-(b:orders)-[e2:contain]-(c:goods where c.name='鞋子') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询reader为吴强的book节点，该book节点知道的其他book",
        "output": "match(a:reader where a.name = '吴强')-[e:likes]->(b:book)-[e2:knows]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询169个名为李思琪的点关联的标签为person的节点,且节点性别的最小值不是90或名字不等于张科",
        "output": "match(a where a.name='李思琪')-[e:relates]->(b:person where MIN(b.gender) <> 90 or b.name <> '张科') return b limit 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点gender不等于famale且salary小于4775,或gender为famale,边类型为likes,且满足条件srcId大于117或f1不等于true,且f0为空的边,返回这些边的f0减648的值",
        "output": "match(a where (a.gender <> 'famale' and a.salary < 4775) or a.gender = 'famale')-[e:likes where (e.srcId > 117 or e.f1 <> true) and (e.f0 is null)]->(b) return e.f0 - 648",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person李建国存在knows关系,且与person李轩存在likes关系的person节点，返回这些person的salary,age,及person李建国的name,及person李轩的salary",
        "output": "match(a:person where a.name='李建国')-[e:knows]->(b:person)<-[e2:likes]-(c:person where c.name='李轩') return a.name,b.salary, b.age,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与loan相关的loan节点，它们的weight乘以自身再加上79的值大于454。然后，请返回这些点的amount对9783.17取余后的总和，以及weight除以677再加8的结果。",
        "output": "match(a:loan)-[e]->(b:loan where b.weight * b.weight + 79 > 454) return SUM(b.amount % 9783.17), b.weight / 677 + 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回认识person马若涵认识的person,的person",
        "output": "match(a:person where name = '马若涵')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签等于作家的点有认识关系的作家,并且和这些作家有认识关系的作家,并且和这些作家有认识关系的作家",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author)-[e3:knows]->(d:author) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回用户创造的事项,返回其源点的身高除173的最大值,以及目标点的权重乘919的值",
        "output": "match(a:user)-[e:creates]->(b:issue) return MAX(a.height / 173), b.weight * 919",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从person韩建聪出发,经过标签为knows的边,走2度或3度到达的person点",
        "output": "match(a:person where a.name='韩建聪')-[e:knows]->{2,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点wordCount小于等于104,目标点wordCount大于11或createTime是2031年08月12日或id大于94,且类型是refers的边",
        "output": "match(a where a.wordCount <= 104)-[e:refers]->(b where b.wordCount > 11 or b.createTime = '2031-08-12' or b.id > 94) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找157个名为罪与罚的点relates的标签等于book的节点,且其id大于21",
        "output": "match(a where a.name='罪与罚')-[e:relates]->(b:book where b.id > 21) return b limit 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为182的公司雇佣的person, 并将person有关的公司的规格的数量赋值给person的年龄, 接着查询person的年龄小于182的person提交的软件",
        "output": "match(a:company where a.id = 182)-[e:employee]->(b:person) let b.age = COUNT((b:person)-[e2]-(c:company) => c.scale) match(b:person where b.age < 182)-[e3:commits]->(d:software) return b.age, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户徐思思喜欢的帖子,以及喜欢这些帖子的用户, 令用户的创建时间等于帖子的字数乘393的个数, 返回用户(a)的薪资,帖子(b)的字数,用户(c)的名字",
        "output": "match(a:user where name = '徐思思')-[e:likes]->(b:post)<-[e2:likes]-(c:user) let c.createTime = COUNT(b.wordCount * 393) return a.salary,b.wordCount,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为陈国强的节点喜欢的读者",
        "output": "match(a where a.name='陈国强')-[e:likes]->(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为97的repository has的user, 并将user有关的pullRequest的changeFileNumber的求和值赋值给user的gender, 接着查询user的gender小于97的user likes的repository",
        "output": "match(a:repository where a.id = 97)-[e:has]->(b:user) let b.gender = SUM((b:user)-[e2]-(c:pullRequest) => c.changeFileNumber) match(b:user where b.gender < 97)-[e3:likes]->(d:repository) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为陈梅的点的,price不等于3577.27的relation,返回这些relation的price,和边的f0,f1",
        "output": "match(a where a.name='陈梅')-[e:relation]->(b where b.price <> 3577.27) return b.price,e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为赵思思的点pay的全部person,并对这些person的id进行求和",
        "output": "match(a where a.name='赵思思')-[e:pay]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前140个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和名为陈建聪的医生有相关者关系,或有相关者的相关者关系的病人",
        "output": "match(a:doctor where n.name=陈建聪)-[e:relation]->{1,2}(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和读者赵思琪有1到3跳关系的读者",
        "output": "match(a:reader where a.name='赵思琪')-[e]->{1,3}(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从评论Comment_254出发,经过标签为属于的边,走2度或3度到达的电影点",
        "output": "match(a:comment where a.name='Comment_254')-[e:belong]->{2,3}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的2跳以内的环",
        "output": "match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和用户点有喜欢关系的帖子节点,且边满足条件源点id小于163,目标帖子节点价值小于等于203",
        "output": "match(a:user)-[e:likes where e.srcId < 163]->(b:post where b.value <= 203) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有user的friend,或者这些user的friend的朋友",
        "output": "match(a:user)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与马梅存在认识关系的person,person与软件存在提交关系的点,返回这些点的星数",
        "output": "match(a where a.name = '马梅')-[e:knows]->(b:person)-[e2:commits]->(c:software) return c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person何宏存在创造关系,且与电影绿巨人存在属于关系的评论节点，返回这些评论的字数,及person何宏的id,及电影绿巨人的价值",
        "output": "match(a:person where a.name='何宏')-[e:creates]->(b:comment)<-[e2:belong]-(c:film where c.name='绿巨人') return a.id,b.wordCount,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有publisher以name,gender,salary分组的age, 根据age从大到小排序",
        "output": "match(a:publisher) return a.age group by a.name, a.gender, a.salary order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找申请person杜国强申请的贷款,的公司",
        "output": "match(a:person where name = '杜国强')-[e:apply]->(b:loan)<-[e2:apply]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找回答买家何强的卖家,和这些卖家拥有的商品",
        "output": "match(a:buyer where name = '何强')<-[e:ask]-(b:seller)-[e2:has]->(c:goods) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与贷款有关的名为Bilibili的公司节点，然后返回这些人的人数差和ID模ID的结果。",
        "output": "match(a:loan)-[e]->(b:company where b.name = 'Bilibili') return b.peopleNumber - b.peopleNumber, b.id % b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有类型为forum或post或tag的点",
        "output": "match(a:forum | post | tag) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,gender, 数据为(47,9601,'famale'),(14,6936,'famale'), 以属性salary作为相等条件,请帮我找出186个名字为徐梅的作家,根据名字从小到大排列",
        "output": "with p as (select * from (VALUES(47,9601,'famale'),(14,6936,'famale')) as t(age,salary,gender))MATCH (a:author WHERE a.salary = p.salary AND (a.name = '徐梅')) RETURN a ORDER BY a.name LIMIT 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,wordCount,id分组,计算id的求和值乘65的最大值",
        "output": "return MAX(SUM(a.id) * 65) group by a.name, a.wordCount, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找seller杜伟has的goods,被其他buyer look的数量",
        "output": "match(a:seller where a.name='杜伟')-[e:has]->(b:goods)<-[e2:look]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出与person王思思有person_lover_person关系的3度以内的环",
        "output": "match(a:person where name = '王思思')-[e:person_lover_person]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以596,472作为请求点id, 以属性id作为相等条件,帮我查询与名为吴建聪和李宏的点共同own的,标签等于account的节点",
        "output": "with p as (select * from (VALUES(596),(472)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴建聪')) -[e:person_own_account ]->(b:account) <-[e2:person_own_account ]-(c WHERE c.name = '李宏') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表813,203,6,92, 源点的id等于输入表id,请帮我找出所有和company阿里有关系的account节点,返回这些点的createTime",
        "output": "with p as (select * from (VALUES(813),(203),(6),(92)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) -[e ]-(b:account) RETURN b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,peopleNumber分组,计算peopleNumber减786的平均值",
        "output": "return AVG(a.peopleNumber - 786) group by a.id, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被医生周强诊断的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='周强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询95个名为马月的点认识的标签为person的节点,且其身高不等于190且名字等于吴强",
        "output": "match(a where a.name='马月')-[e:knows]->(b:person where b.height <> 190 and b.name = '吴强') return b limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 账户Light向账户节点转账，以偿还贷款。",
        "output": "match(a:account where a.name = 'Light')-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为address,id,size, 数据为('东区',69,455),('C栋',4,195),('南区',58,183),('C栋',32,554)的子查询作为输入表, 以属性address作为相等条件,返回和cinema人人影城有关的cinema,再返回和人人影城cinema_releases_film的其他film,返回它们",
        "output": "with p as (select * from (VALUES('东区',69,455),('C栋',4,195),('南区',58,183),('C栋',32,554)) as t(address,id,size))MATCH (a:cinema WHERE a.address = p.address AND (a.name = '人人影城')) -[e ]-(b:cinema) , (a:cinema) -[e2:cinema_releases_film ]->(c:film) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与读者何梅存在喜欢关系,且与书孤城存在引用关系的书节点，返回这些书的价格,id,创建时间,及读者何梅的身高,及书孤城的类别",
        "output": "match(a:reader where a.name='何梅')-[e:likes]->(b:book)<-[e2:refers]-(c:book where c.name='孤城') return a.height,b.price, b.id, b.createTime,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f1,srcId,targetId, 数据为(false,128,123), 源点的srcId等于输入表srcId,返回名为陈若涵的teacher",
        "output": "with p as (select * from (VALUES(false,128,123)) as t(f1,srcId,targetId))MATCH (a:teacher WHERE a.srcId = p.srcId AND (a.name = '陈若涵')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表808,989, 源点的id等于输入表id,返回名为马国强和徐国强的,标签为buyer的点公共的relation节点的名单",
        "output": "with p as (select * from (VALUES(808),(989)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '马国强')) -[e:relation ]->(b) <-[e2:relation ]-(c:buyer WHERE c.name = '徐国强') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出公司阿里的全部伙伴,的srcId的最大值对52取余的数量",
        "output": "match(a:company where a.name= '阿里')-[e:partner]->(b) return COUNT(MAX(e.srcId) % 52)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为createTime,value,name, 数据为(2016-05-11,497,'Post_450'),(2032-11-21,381,'Post_156'),(2003-06-16,101,'Post_285'),(2023-11-03,369,'Post_434'), 以属性value作为相等条件,查询帖子Post_336的全部类型为伙伴的边,并根据源点id升序排列,返回118个",
        "output": "with p as (select * from (VALUES(2016-05-11,497,'Post_450'),(2032-11-21,381,'Post_156'),(2003-06-16,101,'Post_285'),(2023-11-03,369,'Post_434')) as t(createTime,value,name))MATCH (a:post WHERE a.value = p.value AND (a.name = 'Post_336')) -[e:partner ]->(b) RETURN b ORDER BY e.srcId LIMIT 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减54的值",
        "output": "a.age - 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回徐轩取消的订单中包含的商品值和分类。",
        "output": "match(a:buyer where name = '徐轩')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.value, c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从处方Prescription_435出发,经过标签等于包含的边,走1到3度到达的药品点",
        "output": "match(a:prescription where a.name='Prescription_435')-[e:contain]->{1,3}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表737, 源点的id等于输入表id,找出城市以面积分组的价值, 根据价值从大到小排序",
        "output": "with p as (select * from (VALUES(737)) as t(id)) MATCH (a:city WHERE a.id = p.id) RETURN a.value GROUP BY a.area ORDER BY a.value DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与公司Bilibili有关系的大学的价值",
        "output": "match(a:company where a.name='Bilibili')-[e]-(b:university) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出部门的1度以内的环",
        "output": "match(a:department)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为郑思琪和韩雪的,类型是用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='郑思琪')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='韩雪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为50的大学关联的公司,和以合作关系关联了这些公司的其他大学",
        "output": "match(a:university where a.id = 50)-[e]-(b:company)<-[e2:cooperate]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与教师何思思有关系的学生, 返回和这些学生有关联的教师的,id加85的值",
        "output": "match(a:teacher where a.name= '何思思')-[e]-(b:student)-[e2]-(c:teacher) return c.id + 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为英国和澳大利亚的点共同contain的,类型是city的节点",
        "output": "match(a where a.name = '英国')-[e:contain]->(b:city)<-[e2:contain]-(c where c.name = '澳大利亚') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以91作为输入,返回运算结果",
        "output": "Call PERSONALRANK(91) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为179的person的同事，再帮我查询与person相关的父母。",
        "output": "match(a:person where id = '179')-[e]-(b:person)-[e2:colleague]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为美团的点cooperate的university",
        "output": "match(a where a.name='美团')-[e:cooperate]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(9497,'famale',87),(9586,'famale',37)作为请求表数据,属性分别为salary,gender,age, 源点的gender等于输入表gender,找出id为163的卖家有关的买家的朋友, 再找出和买家有关系的朋友",
        "output": "with p as (select * from (VALUES(9497,'famale',87),(9586,'famale',37)) as t(salary,gender,age))MATCH (a:seller WHERE a.gender = p.gender AND (id = '163')) -[e ]-(b:buyer) -[e2:friend ]->(c) , (b:buyer) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出seller吴科has的goods,被其他orders contain的数量",
        "output": "match(a:seller where a.name='吴科')-[e:has]->(b:goods)<-[e2:contain]-(c:orders) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,peopleNumber,name, 数据为(81,29952,'越南'),(83,77853,'法国'),(59,73218,'美国')的子查询作为输入表, 以属性id作为相等条件,返回标签等于大学的所有点,并根据等级降序排列",
        "output": "with p as (select * from (VALUES(81,29952,'越南'),(83,77853,'法国'),(59,73218,'美国')) as t(id,peopleNumber,name))MATCH (a:university WHERE a.id = p.id) RETURN a ORDER BY a.level DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找buyer吴建聪look的goods,被其他buyer look的数量",
        "output": "match(a:buyer where a.name='吴建聪')-[e:buyer_look_goods]->(b:goods)<-[e2:buyer_look_goods]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有person的父母,或其父母的父母",
        "output": "match(a:person)-[e:parent]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,性别,薪资分组,计算薪资加薪资的值",
        "output": "return a.salary + a.salary group by a.age, a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表474,553,642,497,723, 源点的id等于输入表id,查找全部源点标签为seller,边标签为seller_has_goods的边,返回这些边的weight乘180.12的值,和weight加118.96的值",
        "output": "with p as (select * from (VALUES(474),(553),(642),(497),(723)) as t(id)) MATCH (a:seller WHERE a.id = p.id) -[e:seller_has_goods ]->(b) RETURN e.weight * 180.12, e.weight + 118.96 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签等于论坛的点有包含关系的用户,并且和这些用户有发布关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:publish]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回和电影少年足球有关的电影院,再返回和少年足球film_has_tag的其他标签,返回它们",
        "output": "match(a:film where a.name = '少年足球')-[e]-(b:cinema), (a:film)-[e2:film_has_tag]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以459,502,870,665作为请求点id, 源点的id等于输入表id,找出所有person的partner,或其partner的partner",
        "output": "with p as (select * from (VALUES(459),(502),(870),(665)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为纽约的点属于的国家",
        "output": "match(a where a.name='纽约')-[e:belong]->(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对53取余加6乘352的值",
        "output": "(a.id % 53 + 6) * 352",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄为22的person认识的person的名称,以及这些person 购买的软件的名称",
        "output": "match(a:person where a.age = 22)-[e:knows]->(b:person)-[e2:buy]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person黄轩拥有的账号,以及拥有这些账号的person",
        "output": "match(a:person where name = '黄轩')-[e:own]->(b:account)<-[e2:own]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询与这些人有关联的人，以及这些人与其他人的支付关系。",
        "output": "match(a:person where a.id = '149')-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按名称分组并排序药物类别。",
        "output": "match(a:medicine) return a.category group by a.name order by a.category desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取身高在155到174之间且薪资不为空的person的名称。",
        "output": "match(a:person where (a.height BETWEEN 155 AND 174) and (a.salary is not null))-[e:relates]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person以身高,id分组的身高, 根据身高升序排序",
        "output": "match(a:person) return a.height group by a.height, a.id order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取一个人的所有家庭成员，包括他的直系亲属和他们的家庭成员。",
        "output": "match(a:person)-[e:family]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,level, 数据为('四川大学',91,3),('重庆大学',74,1),('四川大学',53,4)的子查询作为输入表, 源点的id等于输入表id,请帮我找出全部与city有关系的university节点,且university节点的id不是22,并返回这些点的value除909的求和值,以及id加75的数量",
        "output": "with p as (select * from (VALUES('四川大学',91,3),('重庆大学',74,1),('四川大学',53,4)) as t(name,id,level))MATCH (a:city WHERE a.id = p.id) -[e ]->(b:university WHERE b.id <> 22) RETURN SUM(b.value / 909), COUNT(b.id + 75) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出与中国有隶属关系的城市。",
        "output": "match(a:country where a.name='中国')<-[e:belong]-(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出110个与何伟和Tom都存在关系的卖家或订单或商品节点",
        "output": "match(a where a.name='何伟')-[e]->(b:seller | orders | goods)<-[e2]-(c where c.name='Tom') return b limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为loan_36的点存款的所有账号,并对这些账号的价值进行求和",
        "output": "match(a where a.name='loan_36')-[e:deposit]->(b:account) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出不是黄国强或性别不是5726的人认识的人以及他们支付的人。",
        "output": "match(a:person where a.gender <> 5726 or a.name = '黄国强')-[e:knows]->(b:person)-[e2:pay]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值加38的最大值",
        "output": "MAX(AVG(a.id) + 38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于colleague,以及srcId不等于198.05或weight不等于182.78的边",
        "output": "match(a)-[e:colleague where e.srcId <> 198.05 or e.weight <> 182.78]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对81取余的值",
        "output": "a.age % 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与作家陈强有撰写关系的1度以内的环",
        "output": "match(a:author where name = '陈强')-[e:write]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出国家越南的伙伴,的权重对152.56取余减157的值",
        "output": "match(a:country where a.name= '越南')-[e:partner]->(b) return e.weight % 152.56 - 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,语言,价值分组,计算wordCount的求和值乘243乘649的最小值",
        "output": "return MIN(SUM(a.wordCount) * 243 * 649) group by a.id, a.lang, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,value分组,计算peopleNumber对685取余的值",
        "output": "return a.peopleNumber % 685 group by a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为韩科和张建聪的点共同关联的,标签为person的节点",
        "output": "match(a where a.name = '韩科')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '张建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值对87取余的值",
        "output": "MAX(a.id) % 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为company的点,返回156个",
        "output": "match(a:company) return a limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部大学的伙伴,或其伙伴的伙伴",
        "output": "match(a:university)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李国强所属的所有公司，然后找出这些公司与软件公司之间的关联，并返回这些关联的星星数。",
        "output": "match(a where a.name = '李国强')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与用户杜国强存在创造关系,且与仓库FSM存在属于关系的事项节点，返回这些事项的权重,id,状态,及用户杜国强的名字,及仓库FSM的id",
        "output": "match(a:user where a.name='杜国强')-[e:creates]->(b:issue)<-[e2:belong]-(c:repository where c.name='FSM') return a.name,b.weight, b.id, b.status,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为27的person关联的person,和以喜欢关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 27)-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和医生马月有1跳关系的处方",
        "output": "match(a:doctor where a.name='马月')-[e]->{1,1}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为Zookeeper的点使用的软件",
        "output": "match(a where a.name='Zookeeper')-[e:uses]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为123的person关联的person,和以关联关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 123)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与电影院大众影院和人人影城都存在上映关系的点",
        "output": "match(a:cinema where a.name='大众影院')-[e:releases]->(b)<-[e2:releases]-(c:cinema where c.name='人人影城') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有教师的id乘98的值",
        "output": "match(a:teacher) return a.id * 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为赵思琪的点的,id的最小值对32取余大于92或年龄在24到96之间的朋友,返回这些朋友的薪资,和边的f1",
        "output": "match(a where a.name='赵思琪')-[e:friend]->(b where MIN(b.id) % 32 > 92 or (b.age BETWEEN 24 AND 96)) return b.salary,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出读者杜轩的所有label为朋友的边,并根据源点id从大到小排列,返回150个",
        "output": "match(a:reader where a.name = '杜轩')-[e:friend]->(b) return b order by e.srcId desc limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有满足以下条件的病人：id大于1，id不为空，或者薪资的数量大于等于186。然后按照id进行升序排列，并返回88个结果。",
        "output": "match(a:patient where a.id > 1 or (a.id is not null) or COUNT(a.salary) >= 186) return a order by a.id asc limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有短袖衣服？",
        "output": "match(a:goods where a.name = '短袖') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出id为142的goods有关的orders的partner, 再给出和orders有关系的relation",
        "output": "match(a:goods where id = '142')-[e]-(b:orders)-[e2:partner]->(c), (b:orders)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找67个名为功夫的点拥有的标签等于标签的节点,且节点id为空或名字不是科幻",
        "output": "match(a where a.name='功夫')-[e:has]->(b:tag where (b.id is null) or b.name <> '科幻') return b limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找同时与账号LX001存在还款关系，与账号TheShy存在存款关系的贷款节点，并返回这些贷款的ID,以及账号LX001的名称和账号TheShy的创建时间。",
        "output": "match(a:account where a.name='LX001')-[e:repay]->(b:loan)<-[e2:deposit]-(c:account where c.name='TheShy') return a.name,b.id,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,id分组,计算id对60取余的值",
        "output": "return a.id % 60 group by a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找prescription的三角的环,边标签等于contain, 并返回这些点的id",
        "output": "match(a:prescription)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和吴雪有家庭关系的人，以及这些人之间有朋友关系的点，并返回这些点的名字。",
        "output": "match(a where a.name = '吴雪')-[e:family]->(b:person)-[e2:friend]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为知乎和天涯论坛的点共同包含的,label为帖子的节点",
        "output": "match(a where a.name = '知乎')-[e:contain]->(b:post)<-[e2:contain]-(c where c.name = '天涯论坛') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为12的点的身高,名字",
        "output": "match(a where a.id = 12) return a.height, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为Post_291和Post_247的点共同拥有的,标签为标签的节点",
        "output": "match(a where a.name = 'Post_291')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_247') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,name,gender, 数据为(61,'张建聪','male'),(87,'杜思思','famale'),(22,'韩建国','famale'),(8,'黄月','male')的子查询作为输入表, 以属性gender作为相等条件,帮我查询所有person以height,salary分组的age, 根据age从小到大排序",
        "output": "with p as (select * from (VALUES(61,'张建聪','male'),(87,'杜思思','famale'),(22,'韩建国','famale'),(8,'黄月','male')) as t(age,name,gender))MATCH (a:person WHERE a.gender = p.gender) RETURN a.age GROUP BY a.height, a.salary ORDER BY a.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person王若涵有关的公司,称为X,再请帮我找出和这个X有关联的其他软件,以及和X有关联的公司",
        "output": "match(a:person where a.name = '王若涵')-[e]-(b:company), (b:company)-[e2]-(c:software),(b:company)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型是person,边类型是父母,并且满足条件权重等于139.97且源点id大于等于151且源点id不是123的边",
        "output": "match(a:person)-[e:parent where e.weight = 139.97 and e.srcId >= 151 and e.srcId <> 123]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有Comment_452的点belong的film,然后请帮我查找Comment_452被creates的person,一起返回",
        "output": "match(a where a.name = 'Comment_452')-[e:belong]->(b:film),(a where a.name = 'Comment_452')<-[e2:creates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person的friend,或其friend的friend",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为buyer的点,返回99个",
        "output": "match(a:buyer) return a limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找大学拥有的部门,返回其源点的价值对252取余除1的最大值,以及目标点的id乘11的最小值",
        "output": "match(a:university)-[e:has]->(b:department) return MAX(a.value % 252 / 1), MIN(b.id * 11)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person陈若涵有关系的software, 返回和这些software有关联的software的,id对85取余的平均值",
        "output": "match(a:person where a.name= '陈若涵')-[e]-(b:software)-[e2]-(c:software) return AVG(c.id % 85)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以57,947作为请求点id, 以属性id作为相等条件,请帮我查找从大学复旦大学出发,经过类型是university_cooperate_company的边,走1到3跳到达的公司点",
        "output": "with p as (select * from (VALUES(57),(947)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name = '复旦大学')) -[e:university_cooperate_company ]->{1,3}(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和issue ISSUE-58有3度关系的repository",
        "output": "match(a:issue where a.name='ISSUE-58')-[e]->{3,3}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为大学,名为南京大学的点,返回这些点的等级,名字,id",
        "output": "match(a:university where a.name = '南京大学') return a.level, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与仓库JavaGuid有拥有关系的3跳的环",
        "output": "match(a:repository where name = 'JavaGuid')-[e:has]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的id加81的最大值",
        "output": "match(a:user) return MAX(a.id + 81)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person周轩和孙月都存在belong关系的点",
        "output": "match(a:person where a.name='周轩')-[e:belong]->(b)<-[e2:belong]-(c:person where c.name='孙月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 徐轩和赵轩是共同的朋友，有162个用户。",
        "output": "match(a:user where a.name='徐轩')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='赵轩') return b limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(90,5,193)作为请求表数据,属性分别为age,id,height, 以属性height作为相等条件,返回person knows的person,返回其源点的age乘age的个数,以及目标点的age对age取余的求和值",
        "output": "with p as (select * from (VALUES(90,5,193)) as t(age,id,height))MATCH (a:person WHERE a.height = p.height) -[e:knows ]->(b:person) RETURN COUNT(a.age * a.age), SUM(b.age % b.age) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出共同朋友列表，其中包含用户周科和周梅。",
        "output": "match(a:user where a.name='周科')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='周梅') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询公司申请的贷款,返回其源点的价值除价值的平均值,以及目标点的金额减6893.00的值",
        "output": "match(a:company)-[e:apply]->(b:loan) return AVG(a.value / a.value), b.amount - 6893.00",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出5个名为孙伟的点喜欢的类型是person的节点,且其薪资等于1200",
        "output": "match(a where a.name='孙伟')-[e:likes]->(b:person where b.salary = 1200) return b limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出person源点发出的边到comment目标点，该边被标记为creates。",
        "output": "match(a:person)-[e:creates]->(b:comment) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签等于person,边标签等于申请的边,返回这些边的f0加f0的值,和权重加162.12加105.32的值",
        "output": "match(a:person)-[e:apply]->(b) return e.f0 + e.f0, e.weight + 162.12 + 105.32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有likes李思思的评论，然后找出评论与电影之间的belong关系，并返回这些点的value。",
        "output": "match(a where a.name = '李思思')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 郑建国的所有悬疑标签文章",
        "output": "match(a:user where a.name='郑建国')-[e:publish]-(b:post)-[e2:has]-(c:tag where c.name='悬疑') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和teacher郑宏有1到3度关系的department",
        "output": "match(a:teacher where a.name='郑宏')-[e]->{1,3}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找论坛知网的所有label为相关者的边,并根据f1从大到小排列,返回183个",
        "output": "match(a:forum where a.name = '知网')-[e:relation]->(b) return b order by e.f1 desc limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部评论的相关者,或其相关者的相关者",
        "output": "match(a:comment)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id不为空或id小于等于53的节点",
        "output": "match(a where (a.id is not null) or a.id <= 53) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于商品的点,返回193个",
        "output": "match(a:goods) return a limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询83个同时与张建聪和黄强有关系的个人节点。",
        "output": "match(a where a.name='张建聪')-[e]->(b:person)<-[e2]-(c where c.name='黄强') return b limit 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight除82的最大值",
        "output": "MAX(a.weight / 82)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person马伟认识的person,以及关联这些person的person",
        "output": "match(a:person where name = '马伟')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为吴建聪的点的,height小于159或name为张梅的partner,返回这些partner的gender,和边的f1",
        "output": "match(a where a.name='吴建聪')-[e:partner]->(b where b.height < 159 or b.name = '张梅') return b.gender,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(74,'内科',421)作为请求表数据,属性分别为id,name,weight, 源点的id等于输入表id,查找全部id为101的doctor关联的medicine,和以contain关系关联了这些medicine的其他prescription",
        "output": "with p as (select * from (VALUES(74,'内科',421)) as t(id,name,weight))MATCH (a:doctor WHERE a.id = p.id AND (a.id = '101')) -[e ]-(b:medicine) <-[e2:prescription_contain_medicine ]-(c:prescription) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为183的点的height,id,name",
        "output": "match(a where a.id = 183) return a.height, a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价格减357.83的值",
        "output": "a.price - 357.83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表77, 以属性id作为相等条件,返回person马轩的所有label为朋友的边,并根据f0从小到大排列,返回71个",
        "output": "with p as (select * from (VALUES(77)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '马轩')) -[e:friend ]->(b) RETURN b ORDER BY e.f0 LIMIT 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出176个value是430或name不是浙江大学,且value的数量大于等于57的university,根据value从小到大排列",
        "output": "match(a:university where (a.value = 430 or a.name <> '浙江大学') and COUNT(a.value) >= 57) return a order by a.value asc limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与用户吴建国有关联，且与处方Prescribe_153有关的处方项，并返回其名称。",
        "output": "match(a:user where a.name='吴建国')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_153') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person Alice的朋友,的srcId的最大值对130取余的值",
        "output": "match(a:person where a.name= 'Alice')-[e:friend]->(b) return MAX(e.srcId) % 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出标签等于评论的所有点,并根据字数从大到小排列",
        "output": "match(a:comment) return a order by a.wordCount desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(40,182,83),(19,176,93)作为请求表数据,属性分别为id,height,age, 源点的height等于输入表height,找出全部艺术学院的点has的student,然后找出艺术学院被has的university,一起返回",
        "output": "with p as (select * from (VALUES(40,182,83),(19,176,93)) as t(id,height,age))MATCH (a WHERE a.height = p.height AND (a.name = '艺术学院')) -[e:department_has_student ]->(b:student) , (a WHERE a.name = '艺术学院') <-[e2:university_has_department ]-(c:university) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与comment Comment_306有关系的tag的name",
        "output": "match(a:comment where a.name='Comment_306')-[e]-(b:tag) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前189个标签为创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前1个类型是喜欢的边",
        "output": "match(a)-[e:likes]->(b) return e limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出190个名为郑若涵的点喜欢的标签等于评论的节点,且其字数乘719对246取余的最大值大于等于7,名字为Comment_416",
        "output": "match(a where a.name='郑若涵')-[e:likes]->(b:comment where MAX(b.wordCount * 719 % 246) >= 7 and b.name = 'Comment_416') return b limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为张国强的节点拥有的商品",
        "output": "match(a where a.name='张国强')-[e:has]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询17个用户黄梅和孙轩,共同的朋友",
        "output": "match(a:user where a.name='黄梅')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='孙轩') return b limit 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回标签等于部门的点,返回93个",
        "output": "match(a:department) return a limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'ch'作为输入调用pageRank函数,返回运算结果",
        "output": "Call PAGERANK('ch') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age分组,计算height除182的值",
        "output": "return a.height / 182 group by a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与标签为person的193个点有friend关系的所有person，并找到这些person之间的friend关系",
        "output": "match(a:person)-[e:friend]->(b:person)-[e2:friend]->(c:person) return c limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Light节点向哪个账户转账了？",
        "output": "match(a:account where a.name = 'Light')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出doctor Bob的标签等于friend的边,并根据f0从大到小排列,返回118个",
        "output": "match(a:doctor where a.name = 'Bob')-[e:friend]->(b) return b order by e.f0 desc limit 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减id的数量",
        "output": "COUNT(a.id - a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找Tugraph的点拥有的合并请求,然后查找Tugraph被属于的合并请求,一起返回",
        "output": "match(a where a.name = 'Tugraph')-[e:has]->(b:pullRequest),(a where a.name = 'Tugraph')<-[e2:belong]-(c:pullRequest) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,height,id分组,计算height加181的值",
        "output": "return a.height + 181 group by a.gender, a.height, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与徐红有诊断关系的医生",
        "output": "match(a:patient where a.name='徐红')<-[e:diagnose]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为孙建国和吴轩的,标签为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='孙建国')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='吴轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出张强的点拥有的商品,然后找出张强被咨询的买家,一起返回",
        "output": "match(a where a.name = '张强')-[e:has]->(b:goods),(a where a.name = '张强')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点创建时间等于2022年06月10日或创建时间不是1997年12月15日,且名字不等于JavaGuid,边标签等于拥有,且权重小于112.93的边,返回这些边的targetId的最大值除25的平均值",
        "output": "match(a where (a.createTime = '2022-06-10' or a.createTime <> '1997-12-15') and a.name <> 'JavaGuid')-[e:has where e.weight < 112.93]->(b) return AVG(MAX(e.targetId) / 25)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点标签等于person,边标签等于喜欢的边,返回这些边的srcId的最大值除192的最小值,和f0减814的值",
        "output": "match(a:person)-[e:likes]->(b) return MIN(MAX(e.srcId) / 192), e.f0 - 814",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李国强有关的人，然后找出这些人的同事，最后返回这些人。",
        "output": "match(a:person where a.name = '李国强')-[e]-(b:person), (a:person)-[e2:colleague]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询book表中，不满足以下条件的数据：name为'白夜行'、createTime为2027年08月22日或2006年03月26日。然后按照wordCount降序排序结果。",
        "output": "match(a:book where a.createTime <> '2027-08-22' or a.name = '白夜行' or a.createTime = '2006-03-26') return a order by a.wordCount desc limit 78",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为book的所有点,并根据price降序排列",
        "output": "match(a:book) return a order by a.price desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和读者张建国有关的书,称为X,再帮我查询和这个X有关联的其他编辑,以及和X有关联的编辑",
        "output": "match(a:reader where a.name = '张建国')-[e]-(b:book), (b:book)-[e2]-(c:publisher),(b:book)-[e3]-(d:publisher) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为事项,名为ISSUE-425的点,返回这些点的id,状态,权重",
        "output": "match(a:issue where a.name = 'ISSUE-425') return a.id, a.status, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以630,410,987作为请求点id, 以属性id作为相等条件,给出所有id为17的person关联的person,和以雇佣关系关联了这些person的其他公司",
        "output": "with p as (select * from (VALUES(630),(410),(987)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.id = '17')) -[e ]-(b:person) <-[e2:company_employee_person ]-(c:company) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和author王若涵之间有write关系的book",
        "output": "match(a:author where a.name='王若涵')-[e:write]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(true,661,3),(true,790,138)作为请求表数据,属性分别为f1,f0,targetId, 源点的f1等于输入表f1,查找类型是user_publish_post,以及满足条件targetId的最大值大于39且timeStamp不是2000年12月22日,timeStamp等于2000年12月11日的边",
        "output": "with p as (select * from (VALUES(true,661,3),(true,790,138)) as t(f1,f0,targetId))MATCH (a WHERE a.f1 = p.f1) -[e:user_publish_post WHERE MAX(e.targetId) > 39 AND e.timeStamp <> '2000-12-22' AND e.timeStamp = '2000-12-11' ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为68的buyer consult的seller, 并将seller有关的orders的price的求和值赋值给seller的name, 接着查询seller的name小于68的seller has的goods",
        "output": "match(a:buyer where a.id = 68)-[e:consult]->(b:seller) let b.name = SUM((b:seller)-[e2]-(c:orders) => c.price) match(b:seller where b.name < 68)-[e3:has]->(d:goods) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询商品名称为'苹果'的信息",
        "output": "match(a:goods where a.name = '苹果') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询张若涵参演的电影，以及与张若涵有关联的电影，包括共同观看过的。",
        "output": "match(a:person where a.name = '张若涵')-[e:watch]->(b:film),(a:person where a.name = '张若涵')<-[e2:watch]-(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询和department有关联的teacher节点,并根据其gender分组,返回gender,以及salary的最大值对4574取余对96取余的值",
        "output": "match(a:department)-[e:department_has_teacher]-(b:teacher) return b.gender, MAX(b.salary) % 4574 % 96 group by b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与用户李梅存在创造关系,且与仓库XXRepo存在属于关系的合并请求节点，返回这些合并请求的变更文件数,及用户李梅的性别,及仓库XXRepo的语言",
        "output": "match(a:user where a.name='李梅')-[e:creates]->(b:pullRequest)<-[e2:belong]-(c:repository where c.name='XXRepo') return a.gender,b.changeFileNumber,c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有关联的药品和它们包含的药品。",
        "output": "match(a:prescription where a.id = '102')-[e]-(b:medicine)<-[e2:contain]-(c:prescription) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为药品的全部点,并根据类别从大到小排列",
        "output": "match(a:medicine) return a order by a.category desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为39的卖家关联的订单,和以取消关系关联了这些订单的其他买家",
        "output": "match(a:seller where a.id = 39)-[e]-(b:orders)<-[e2:cancel]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2011-09-15,'XiaoHu',false),(2028-06-02,'LX001',true),(2019-09-17,'BIN',true)作为请求表数据,属性分别为createTime,name,isBlock, 以属性isBlock作为相等条件,请帮我找出名为滴滴的公司,以及与其有关的公司,并返回滴滴的价值和这些公司的规格",
        "output": "with p as (select * from (VALUES(2011-09-15,'XiaoHu',false),(2028-06-02,'LX001',true),(2019-09-17,'BIN',true)) as t(createTime,name,isBlock))MATCH (a:company WHERE a.isBlock = p.isBlock AND (name = '滴滴')) -[e ]-(b:company) RETURN a.value, b.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出华中科技大学和韩建聪有关的部门节点。",
        "output": "match(a:university where a.name='华中科技大学')-[e:has]-(b:department)-[e2:has]-(c:teacher where c.name='韩建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询XiaoHu账户的还款记录，并返回该账户的存款账户余额和创建时间。",
        "output": "match(a:account where name = 'XiaoHu')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.value, c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询accept doctor吴梅creates的prescription,的patient",
        "output": "match(a:doctor where name = '吴梅')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和名为周国强的person有friend关系,或有friend的friend关系的person",
        "output": "match(a:person where n.name=周国强)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person黄若涵和李轩都存在支付关系的点",
        "output": "match(a:person where a.name='黄若涵')-[e:pay]->(b)<-[e2:pay]-(c:person where c.name='李轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签为用户,目标点标签为帖子,标签为帖子或用户或标签的边",
        "output": "match(a:user)-[e:post | user | tag]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person李宏有关的标签,称为X,再返回和这个X有关联的其他电影院,以及和X有关联的评论",
        "output": "match(a:person where a.name = '李宏')-[e]-(b:tag), (b:tag)-[e2]-(c:cinema),(b:tag)-[e3]-(d:comment) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先查询与公司ID为31的大学的关联，再查询与大学有关的朋友。",
        "output": "match(a:company where id = '31')-[e]-(b:university)-[e2:relation]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部和公司阿里有2到4度关系的国家",
        "output": "match(a:company where a.name='阿里')-[e]->{2,4}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被评论属于数量大于35的电影,记为relationCount,再查询这些电影属于的person",
        "output": "match(a:film) let a.relationCount = SUM((a:film)<-[e:belong]-(b:comment) => b.id) match(a where a.relationCount > 35)-[e2:belong]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从百度贴吧论坛出发，沿着类型为contain的边走2到4度，到达一个post点。",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->{2,4}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为周月的publisher或author或book,以及与其有关的publisher,并返回周月的age和这些publisher的age",
        "output": "match(a:publisher | author | book where name = '周月')-[e]-(b:publisher) return a.age, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Ou', 'Mv'作为输入调用personalRank函数,返回id, value",
        "output": "Call PERSONALRANK('Ou', 'Mv') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,id,name, 数据为('famale',10,'韩梅'),('famale',54,'孙若涵'),('male',59,'徐宏'), 以属性id作为相等条件,帮我查询前5个label为company_creates_software的边",
        "output": "with p as (select * from (VALUES('famale',10,'韩梅'),('famale',54,'孙若涵'),('male',59,'徐宏')) as t(gender,id,name))MATCH (a WHERE a.id = p.id) -[e:company_creates_software ]->(b) RETURN e LIMIT 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出20本与类型为'book'的实体有引用关系的实体，并且这些实体之间也存在引用关系。",
        "output": "match(a:book)-[e:refers]->(b:book)-[e2:refers]->(c:book) return c limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,id,age分组,计算salary乘4551的值",
        "output": "return a.salary * 4551 group by a.salary, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出85个和类型是公司的点有创造关系的软件,并且和这些软件有使用关系的软件",
        "output": "match(a:company)-[e:creates]->(b:software)-[e2:uses]->(c:software) return c limit 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算weight减weight的个数",
        "output": "return COUNT(a.weight - a.weight) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找117个仓库FSM和JavaGuid,共同的相关者",
        "output": "match(a:repository where a.name='FSM')-[e:relation]->(b)<-[e2:relation]-(c:repository where c.name='JavaGuid') return b limit 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Redis使用的软件是什么？",
        "output": "match(a:software)<-[e:uses]-(b:software where b.name='Redis') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与账户 XiaoHu 相关的贷款，再找出 XiaoHu 偿还的其他贷款，返回它们。",
        "output": "match(a:account where a.name = 'XiaoHu')-[e]-(b:loan), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出合作公司阿里合作的大学,的公司",
        "output": "match(a:company where name = '阿里')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除3的值",
        "output": "a.id / 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary对5309取余的最大值",
        "output": "MAX(a.salary % 5309)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回35岁以内性别为女或薪资为1089的女性，并且ID在13到79之间，按照年龄升序排列。",
        "output": "match(a:person where (a.gender <= 57 or a.salary = 1089) and (a.id BETWEEN 13 AND 79)) return a order by a.age asc limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,lastLoginTime,createTime, 数据为(43,2015-11-08,2034-05-10),(15,2018-01-29,2007-02-23),(97,2015-08-08,2003-07-08),(39,2014-07-04,2008-11-19)的子查询作为输入表, 以属性id作为相等条件,找出与公司微软有关,且与账号Light有关系的贷款节点",
        "output": "with p as (select * from (VALUES(43,2015-11-08,2034-05-10),(15,2018-01-29,2007-02-23),(97,2015-08-08,2003-07-08),(39,2014-07-04,2008-11-19)) as t(id,lastLoginTime,createTime))MATCH (a:company WHERE a.id = p.id AND (a.name = '微软')) -[e:company_apply_loan ]-(b:loan) -[e2:loan_deposit_account ]-(c:account WHERE c.name = 'Light') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与公司谷歌有关系的软件的是否开源",
        "output": "match(a:company where a.name='谷歌')-[e]-(b:software) return b.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和处方Prescription_283有关的病人,称为X,再帮我查询和这个X有关联的其他病人,以及和X有关联的部门",
        "output": "match(a:prescription where a.name = 'Prescription_283')-[e]-(b:patient), (b:patient)-[e2]-(c:patient),(b:patient)-[e3]-(d:department) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回上映评论Comment_425属于的电影,的电影院",
        "output": "match(a:comment where name = 'Comment_425')-[e:belong]->(b:film)<-[e2:releases]-(c:cinema) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出134个和label为论坛的点有包含关系的用户,且和这些用户有喜欢关系的帖子",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:likes]->(c:post) return c limit 134",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与李宏存在创造关系的处方,处方与药品存在包含关系的点,返回这些点的id",
        "output": "match(a where a.name = '李宏')-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与学生赵月有关系的教师, 返回和这些教师有关联的课程的,学分乘学分的值",
        "output": "match(a:student where a.name= '赵月')-[e]-(b:teacher)-[e2]-(c:course) return c.credit * c.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点label为country,边label为contain的边,返回这些边的targetId减65的值,和srcId除86的值",
        "output": "match(a:country)-[e:contain]->(b) return e.targetId - 65, e.srcId / 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找点Prescription_265并返回它们的重量。",
        "output": "match(a:prescription where a.name = 'Prescription_265') return a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表426,460, 以属性id作为相等条件,返回person的2度的环",
        "output": "with p as (select * from (VALUES(426),(460)) as t(id)) MATCH (a:person WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person何红的全部类型为朋友的边,并根据f0升序排列,返回163个",
        "output": "match(a:person where a.name = '何红')-[e:friend]->(b) return b order by e.f0 asc limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出事项的1度的环",
        "output": "match(a:issue)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与user赵伟和郑月都存在publish关系的点",
        "output": "match(a:user where a.name='赵伟')-[e:publish]->(b)<-[e2:publish]-(c:user where c.name='郑月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为纽约的国家或城市,以及与其有关的大学,并返回纽约的人数和这些大学的id",
        "output": "match(a:country | city where name = '纽约')-[e]-(b:university) return a.peopleNumber, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2226,52,'male')作为请求表数据,属性分别为salary,id,gender, 以属性id作为相等条件,查询全部person以id,salary分组的gender, 根据gender降序排序",
        "output": "with p as (select * from (VALUES(2226,52,'male')) as t(salary,id,gender))MATCH (a:person WHERE a.id = p.id) RETURN a.gender GROUP BY a.id, a.salary ORDER BY a.gender DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与XXD存在转账关系的所有账号，并查询这些账号之间的转账点，同时返回这些转账点是否冻结。",
        "output": "match(a where a.name = 'XXD')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和城市巴黎之间有属于关系的国家",
        "output": "match(a:city where a.name='巴黎')-[e:belong]->(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,amount,weight分组,计算id乘96的值",
        "output": "return a.id * 96 group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与呼吸科存在拥有关系的医生,医生与部门存在属于关系的点,返回这些点的名字",
        "output": "match(a where a.name = '呼吸科')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person invest数量大于88的company,记为relationCount,再查询这些company invest的loan",
        "output": "match(a:company) let a.relationCount = MAX((a:company)<-[e:invest]-(b:person) => b.id) match(a where a.relationCount > 88)-[e2:invest]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型为医生,边类型为诊断的边,返回这些边的源点id加80的值,和目标点id加135乘源点id对92取余的最大值",
        "output": "match(a:doctor)-[e:diagnose]->(b) return e.srcId + 80, MAX((e.targetId + 135) * e.srcId % 92)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,stars,lang, 数据为(76,649,'rust'),(26,629,'c'),(92,98,'rust')的子查询作为输入表, 以属性lang作为相等条件,给出51个名为韩思思的点knows的label为person的节点,且其id在24到29之间",
        "output": "with p as (select * from (VALUES(76,649,'rust'),(26,629,'c'),(92,98,'rust')) as t(id,stars,lang))MATCH (a WHERE a.lang = p.lang AND (a.name = '韩思思')) -[e:person_knows_person ]->(b:person WHERE b.id BETWEEN ASYMMETRIC 24 AND 29) RETURN b LIMIT 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查找43个编辑Alice和张雪,共同的朋友",
        "output": "match(a:publisher where a.name='Alice')-[e:friend]->(b)<-[e2:friend]-(c:publisher where c.name='张雪') return b limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height减183加192的和",
        "output": "return SUM(a.height - 183 + 192) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以635,64,881作为请求点id, 以属性id作为相等条件,返回seller杜思琪的所有friend,的targetId乘80乘593的值",
        "output": "with p as (select * from (VALUES(635),(64),(881)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (a.name = '杜思琪')) -[e:friend ]->(b) RETURN e.targetId * 80 * 593 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有id为84的person关联的person,和以支付关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 84)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出Amily和韩宏作为读者的共同伙伴节点列表。",
        "output": "match(a:reader where a.name='Amily')-[e:partner]->(b)<-[e2:partner]-(c:reader where c.name='韩宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是读者,名为徐科的点,返回这些点的id",
        "output": "match(a:reader where a.name = '徐科') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出学生陈红选择的课程,以及选择这些课程的学生, 令课程的价值等于课程的id对77取余除327,令学生的性别等于学生的id的平均值减8, 返回学生(a)的名字,课程(b)的学分,学生(c)的身高",
        "output": "match(a:student where name = '陈红')-[e:selects]->(b:course)<-[e2:selects]-(c:student) let b.value = b.id % 77 / 327,let a.gender = AVG(a.id) - 8 return a.name,b.credit,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,scale,value, 数据为(0,'small',903)的子查询作为输入表, 源点的id等于输入表id,请帮我查找和university有关联的company节点,并根据其id分组,返回id,以及id加26对value取余的和",
        "output": "with p as (select * from (VALUES(0,'small',903)) as t(id,scale,value))MATCH (a:university WHERE a.id = p.id) -[e:university_cooperate_company ]-(b:company) RETURN b.id, SUM(b.id + 26 % b.value) GROUP BY b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为22的点的销量,价值,名字",
        "output": "match(a where a.id = 22) return a.sellerNumber, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与合并请求PR-312有关,且与合并请求PR-93有关系的仓库节点",
        "output": "match(a:pullRequest where a.name='PR-312')-[e:belong]-(b:repository)-[e2:has]-(c:pullRequest where c.name='PR-93') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与陈若涵和徐红有关联的54个患者节点。",
        "output": "match(a where a.name='陈若涵')-[e]->(b:patient)<-[e2]-(c where c.name='徐红') return b limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找马红和陈月两个点名的公共朋友节点，类型为人的。",
        "output": "match(a:person where a.name='马红')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有标签以名字,价值分组的id, 根据id降序排序",
        "output": "match(a:tag) return a.id group by a.name, a.value order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(78,16,'famale'),(48,14,'male')作为请求表数据,属性分别为age,id,gender, 源点的gender等于输入表gender,请帮我查找被部门法学院拥有的教师",
        "output": "with p as (select * from (VALUES(78,16,'famale'),(48,14,'male')) as t(age,id,gender))MATCH (a:teacher WHERE a.gender = p.gender) <-[e:department_has_teacher ]-(b:department WHERE b.name = '法学院') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出买家吴宏查看的商品,以及拥有这些商品的卖家, 令买家的类别等于商品的id减63,令买家的销量等于商品的价值减价值对658.74取余, 返回买家的性别,商品的价格,卖家的名字",
        "output": "match(a:buyer where name = '吴宏')-[e:look]->(b:goods)<-[e2:has]-(c:seller) let a.category = b.id - 63,let a.sellerNumber = b.value - b.value % 658.74 return a.gender,b.price,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点满足条件gender是male且age为空,或salary在1321到2299之间,目标点满足条件height在163到189之间且name等于马科,或height不为空,且类型为colleague的边",
        "output": "match(a where (a.gender = 'male' and (a.age is null)) or (a.salary BETWEEN 1321 AND 2299))-[e:colleague]->(b where ((b.height BETWEEN 163 AND 189) and b.name = '马科') or (b.height is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出person黄建国的类型为partner的边,并根据srcId从小到大排列,返回146个",
        "output": "match(a:person where a.name = '黄建国')-[e:partner]->(b) return b order by e.srcId asc limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与名为何宏和马科的点共同咨询，并且标签为'卖家'的节点。",
        "output": "match(a where a.name = '何宏')-[e:consult]->(b:seller)<-[e2:consult]-(c where c.name = '马科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生郑红创造的处方,被其他病人接受的数量",
        "output": "match(a:doctor where a.name='郑红')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,gender,height, 数据为('何若涵','famale',191),('赵强','male',154),('何宏','male',169), 源点的name等于输入表name,请帮我查找与person张月有person_likes_person关系的2度的环",
        "output": "with p as (select * from (VALUES('何若涵','famale',191),('赵强','male',154),('何宏','male',169)) as t(name,gender,height))MATCH (a:person WHERE a.name = p.name AND (name = '张月')) -[e:person_likes_person ]->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为北京大学的点拥有的部门",
        "output": "match(a where a.name='北京大学')-[e:university_has_department]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找138个和类型是大学的点有拥有关系的部门,且和这些部门有拥有关系的教师",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher) return c limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person likes的person,返回其源点的salary除7221的最小值,以及目标点的salary加3837的最小值",
        "output": "match(a:person)-[e:likes]->(b:person) return MIN(a.salary / 7221), MIN(b.salary + 3837)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 与郑国强有支付关联的人。",
        "output": "match(a:person where a.name='郑国强')<-[e:pay]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为size,id,address, 数据为(565,5,'西区'),(619,37,'C栋')的子查询作为输入表, 以属性size作为相等条件,查询所有与电影院横店影院有关系的标签的名字",
        "output": "with p as (select * from (VALUES(565,5,'西区'),(619,37,'C栋')) as t(size,id,address))MATCH (a:cinema WHERE a.size = p.size AND (a.name = '横店影院')) -[e ]-(b:tag) RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有buyer的朋友，或者这些朋友的朋友",
        "output": "match(a:buyer)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照薪资分组查找买家姓名，并按照姓氏降序排序。",
        "output": "match(a:buyer) return a.name group by a.salary order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为张红的节点publish的forum或user",
        "output": "match(a where a.name='张红')-[e:publish]->(b:forum | user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以41, 99, 44作为输入,返回运算结果",
        "output": "Call PAGERANK(41, 99, 44) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找周伟和赵建聪共有的账号节点。",
        "output": "match(a where a.name = '周伟')-[e:own]->(b:account)<-[e2:own]-(c where c.name = '赵建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否帮我找到在知乎、论坛和知网上都活跃的79位伙伴？",
        "output": "match(a:forum where a.name='知乎')-[e:partner]->(b)<-[e2:partner]-(c:forum where c.name='知网') return b limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person郑强有家人关系的2跳以内的环",
        "output": "match(a:person where name = '郑强')-[e:family]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与用户相关的所有帖子节点，并按创建时间分组，返回每个帖子的创建时间。",
        "output": "match(a:user)-[e:publish]-(b:post) return b.createTime group by b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和名为黄雪的person有伙伴关系,或有伙伴的伙伴关系的账号",
        "output": "match(a:person where n.name=黄雪)-[e:partner]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与cinema好视影院有关系的person, 返回和这些person有关联的comment的,wordCount减320加59减id的平均值",
        "output": "match(a:cinema where a.name= '好视影院')-[e]-(b:person)-[e2]-(c:comment) return AVG(c.wordCount - 320 + 59 - c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部id为71的person关联的person,和以likes关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 71)-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点类型是部门,目标点类型是教师,类型是教师或部门的边",
        "output": "match(a:department)-[e:teacher | department]->(b:teacher) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与腾讯合作的大学，以及这些大学所在的城市，并返回这些城市的ID。",
        "output": "match(a where a.name = '腾讯')-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和贷款loan_58有关系的账号或person,返回这些点的上次登录时间",
        "output": "match(a:loan where a.name='loan_58')-[e]-(b:account | person) return b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有label为帖子或用户的点",
        "output": "match(a:post | user) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司蚂蚁集团之间有属于关系的城市",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:belong]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被评论Comment_443属于的电影",
        "output": "match(a:film)<-[e:belong]-(b:comment where b.name='Comment_443') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为Comment_388和Comment_417的点共同属于的,类型为电影的节点",
        "output": "match(a where a.name = 'Comment_388')-[e:belong]->(b:film)<-[e2:belong]-(c where c.name = 'Comment_417') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和用户点有发布关系的帖子节点,且边满足条件权重不为空,目标帖子节点语言不是Japanese",
        "output": "match(a:user)-[e:publish where (e.weight is not null)]->(b:post where b.lang <> 'Japanese') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和patient有关联的prescription节点,并根据其id分组,返回id,以及id的最小值对68取余的数量",
        "output": "match(a:patient)-[e:accept]-(b:prescription) return b.id, COUNT(MIN(b.id) % 68) group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出115个权重在263到861之间的药品,根据id从大到小排列",
        "output": "match(a:medicine where (a.weight BETWEEN 263 AND 861)) return a order by a.id desc limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为weight,id,createTime, 数据为(587,39,2028-06-05),(826,90,2007-03-31)的子查询作为输入表, 以属性id作为相等条件,查询id不为空的节点",
        "output": "with p as (select * from (VALUES(587,39,2028-06-05),(826,90,2007-03-31)) as t(weight,id,createTime))MATCH (a WHERE a.id = p.id AND (a.id IS NOT NULL)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签以名字分组的id, 根据id升序排序",
        "output": "match(a:tag) return a.id group by a.name order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为112的软件有关的软件的相关者, 再查询和软件有关系的朋友",
        "output": "match(a:software where id = 112)-[e]-(b:software)-[e2:relation]->(c), (b:software)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与'黄科'有关的人的信息，包括他们的薪资、性别和年龄。",
        "output": "match(a:person where name = '黄科')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c.salary, c.gender, c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出所有person类型的点，按照height从高到低排序",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与读者相关的书籍，以及与这些书籍的其他作者之间有写作关系的作者。",
        "output": "match(a:reader where a.id = '197')-[e]-(b:book)<-[e2:write]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有处方的权重乘555除40的平均值",
        "output": "match(a:prescription) return AVG(a.weight * 555 / 40)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(6884,'famale',85),(2912,'male',2),(4887,'male',54)作为请求表数据,属性分别为salary,gender,id, 源点的salary等于输入表salary,给出29个name不等于黄强的reader,根据age从小到大排列",
        "output": "with p as (select * from (VALUES(6884,'famale',85),(2912,'male',2),(4887,'male',54)) as t(salary,gender,id))MATCH (a:reader WHERE a.salary = p.salary AND (a.name <> '黄强')) RETURN a ORDER BY a.age LIMIT 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户喜欢的所有边，计算这些边的f0属性加711的结果之和以及它们的weight属性对157.94取余后的值。",
        "output": "match(a:user)-[e:likes]->(b) return SUM(e.f0 + 711), e.weight % 157.94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为周轩和杜雪的点共同认识的,标签等于person的节点",
        "output": "match(a where a.name = '周轩')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '杜雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与person有关系的person节点,且person节点的年龄大于94,并返回这些person的年龄对64取余的值,以及person的年龄乘58的值",
        "output": "match(a:person)-[e]->(b:person where b.age > 94) return b.age % 64, b.age * 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "等级加4的值",
        "output": "a.level + 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与医生吴轩有关系的处方的创建时间",
        "output": "match(a:doctor where a.name='吴轩')-[e]-(b:prescription) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点标签为person,边标签为喜欢的边,返回这些边的权重乘163.06乘101.94加654的最小值,和源点id对72取余的最大值",
        "output": "match(a:person)-[e:likes]->(b) return MIN(e.weight * 163.06 * 101.94 + 654), MAX(e.srcId % 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和部门生物学院之间有拥有关系的教师",
        "output": "match(a:department where a.name='生物学院')-[e:has]->(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表134,133,407,320,886, 源点的id等于输入表id,找出全部帖子的相关者,或其相关者的相关者",
        "output": "with p as (select * from (VALUES(134),(133),(407),(320),(886)) as t(id)) MATCH (a:post WHERE a.id = p.id) -[e:relation ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为郑建聪的tag或user或post,以及与其有关的forum,并返回郑建聪的name和这些forum的createTime",
        "output": "match(a:tag | user | post where name = '郑建聪')-[e]-(b:forum) return a.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点薪资乘6205小于178或id大于等于33,边类型是查看,且目标点id大于等于100且f1不等于true的边,返回这些边的目标点id除目标点id的值",
        "output": "match(a where a.salary * 6205 < 178 or a.id >= 33)-[e:look where e.targetId >= 100 and e.f1 <> true]->(b) return e.targetId / e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和publisher陈国强之间有publish关系的book",
        "output": "match(a:publisher where a.name='陈国强')-[e:publish]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出与person何强有关系的person, 返回和这些person有关联的software的,stars减539的和",
        "output": "match(a:person where a.name= '何强')-[e]-(b:person)-[e2]-(c:software) return SUM(c.stars - 539)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点标签等于仓库,目标点标签等于合并请求,标签等于用户或合并请求或事项的边",
        "output": "match(a:repository)-[e:user | pullRequest | issue]->(b:pullRequest) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为ISSUE-191的事项,以及与其有关的合并请求,并返回ISSUE-191的id和这些合并请求的名字",
        "output": "match(a:issue where name = 'ISSUE-191')-[e]-(b:pullRequest) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为黄若涵和韩雪的点共同teach的,标签等于course的节点",
        "output": "match(a where a.name = '黄若涵')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '韩雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于公司,名为滴滴的点,返回这些点的规格",
        "output": "match(a:company where a.name = '滴滴') return a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找医生以身高,年龄,id分组的年龄, 根据年龄降序排序",
        "output": "match(a:doctor) return a.age group by a.height, a.age, a.id order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,salary,id, 数据为(186,3580,21),(182,6539,66),(159,2926,22),(188,7477,12), 源点的height等于输入表height,请帮我找出病人接受的处方,返回其源点的身高除身高的值,以及目标点的weight的平均值减263的值",
        "output": "with p as (select * from (VALUES(186,3580,21),(182,6539,66),(159,2926,22),(188,7477,12)) as t(height,salary,id))MATCH (a:patient WHERE a.height = p.height) -[e:patient_accept_prescription ]->(b:prescription) RETURN a.height / a.height, AVG(b.weight) - 263 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出74个ID为94的评论，并按创建时间倒序排序。",
        "output": "match(a:comment where a.id = 94) return a order by a.createTime desc limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有类型为'country'的点，并按 id 从小到大的顺序排序。",
        "output": "match(a:country) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含法国和美国的点",
        "output": "match(a:country where a.name='法国')-[e:contain]->(b)<-[e2:contain]-(c:country where c.name='美国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出读者王科 喜欢的书,返回书 认识的书的id加70乘677加89的值",
        "output": "match(a:reader where name = '王科')-[e:likes]->(b:book)-[e2:knows]->(c:book) return (c.id + 70) * 677 + 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部源点label为person,边label为commits,以及weight大于等于161.32或f0大于769,且f1是true的边",
        "output": "match(a:person)-[e:commits where (e.weight >= 161.32 or e.f0 > 769) and e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找读者郑宏喜欢的书节点关联的书",
        "output": "match(a:reader where a.name = '郑宏')-[e:likes]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为person,目标点label为person,label为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先给出与ID为164的公司有关的人，再给出与该人有关联的人。",
        "output": "match(a:company where id = '164')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为我不是药神的点拥有的标签",
        "output": "match(a where a.name='我不是药神')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为处方,名为Prescription_463的点,返回这些点的权重,名字",
        "output": "match(a:prescription where a.name = 'Prescription_463') return a.weight, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询和buyer孙若涵有buyer_creates_orders关系的orders,再帮我查询以buyer_cancel_orders关系关联了孙若涵的orders",
        "output": "match(a:buyer where a.name = '孙若涵')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '孙若涵')<-[e2:buyer_cancel_orders]-(c:orders)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值对value取余对19取余的值",
        "output": "AVG(a.value) % a.value % 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与UME和好视影院都有关联的18个电影节点",
        "output": "match(a where a.name='UME')-[e]->(b:film)<-[e2]-(c where c.name='好视影院') return b limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和company字节有关系的person或account,返回这些点的id,amount,weight",
        "output": "match(a:company where a.name='字节')-[e]-(b:person | account) return b.id, b.amount, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被post Post_379 has的tag,和Post_379 has的tag",
        "output": "match(a:tag)<-[e:has]-(b:post where name = 'Post_379')-[e2:has]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为生物学院的点拥有的所有教师,并对这些教师的性别进行求和",
        "output": "match(a where a.name='生物学院')-[e:has]->(b:teacher) return SUM(b.gender)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出书关联的书,返回其源点的price的最小值除24的最大值,以及目标点的id加55的平均值",
        "output": "match(a:book)-[e:relates]->(b:book) return MAX(MIN(a.price) / 24), AVG(b.id + 55)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person有关联的software节点,并根据其id,value分组,返回id,value,以及id减id乘36减575的最小值",
        "output": "match(a:person)-[e:person_buy_software]-(b:software) return b.id, b.value, MIN((b.id - b.id) * 36 - 575) group by b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为lastLoginTime,isBlock,createTime, 数据为(2013-05-30,false,2027-01-31),(2025-05-21,false,2022-08-02), 以属性isBlock作为相等条件,请帮我找出贷款的1跳以内的环",
        "output": "with p as (select * from (VALUES(2013-05-30,false,2027-01-31),(2025-05-21,false,2022-08-02)) as t(lastLoginTime,isBlock,createTime))MATCH (a:loan WHERE a.isBlock = p.isBlock) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value除value的值",
        "output": "a.value / a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据person杜月观看的电影，返回该电影所拥有的标签名称。",
        "output": "match(a:person where name = '杜月')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与account Faker和TheShy都存在transfer关系的点",
        "output": "match(a:account where a.name='Faker')-[e:transfer]->(b)<-[e2:transfer]-(c:account where c.name='TheShy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部仓库的朋友,或其朋友的朋友",
        "output": "match(a:repository)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找height大于189的person knows的person的名称,以及这些person knows的person的名称",
        "output": "match(a:person where a.height > 189)-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前12个类型是has的边",
        "output": "match(a)-[e:has]->(b) return e limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从post Post_174出发,经过标签为has的边,走3度到达的tag点",
        "output": "match(a:post where a.name='Post_174')-[e:has]->{3,3}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person周思琪watch的film,以及belong这些film的comment, 令film的name等于comment的wordCount加653乘wordCount除30,令film的value等于film的id的数量, 返回person的id,film的id,comment的name",
        "output": "match(a:person where name = '周思琪')-[e:watch]->(b:film)<-[e2:belong]-(c:comment) let b.name = (c.wordCount + 653) * c.wordCount / 30,let b.value = COUNT(b.id) return a.id,b.id,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为郑雪的节点认识的person",
        "output": "match(a where a.name='郑雪')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部id为160的事项关联的合并请求,和以创造关系关联了这些合并请求的其他用户",
        "output": "match(a:issue where a.id = 160)-[e]-(b:pullRequest)<-[e2:creates]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,height,salary, 数据为(88,172,1405),(58,160,3809), 以属性salary作为相等条件,查询book呐喊的所有refers,的targetId加173的平均值",
        "output": "with p as (select * from (VALUES(88,172,1405),(58,160,3809)) as t(age,height,salary))MATCH (a:book WHERE a.salary = p.salary AND (a.name = '呐喊')) -[e:book_refers_book ]->(b) RETURN AVG(e.targetId + 173) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到拥有label属性且被Post_258和Post_101同时拥有的节点。",
        "output": "match(a where a.name = 'Post_258')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_101') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值乘341的和",
        "output": "SUM(a.value * 341)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表282,131,404, 以属性id作为相等条件,返回176个薪资大于2976,名字的平均值大于65,或薪资不为空的买家,根据id升序排列",
        "output": "with p as (select * from (VALUES(282),(131),(404)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.salary > 2976 AND AVG(a.name) > 65 OR a.salary IS NOT NULL)) RETURN a ORDER BY a.id LIMIT 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与teacher周思思有关系的student的gender",
        "output": "match(a:teacher where a.name='周思思')-[e]-(b:student) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算value减value乘59的值",
        "output": "return (a.value - a.value) * 59 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和类型是person的点有knows关系的person,以及和这些person有knows关系的person,以及和这些person有knows关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出doctor徐若涵creates的prescription,以及accept这些prescription的patient",
        "output": "match(a:doctor where name = '徐若涵')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出account Faker的全部标签为relation的边,并根据srcId从小到大排列,返回37个",
        "output": "match(a:account where a.name = 'Faker')-[e:relation]->(b) return b order by e.srcId asc limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是tag的点,返回92个",
        "output": "match(a:tag) return a limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有部门的大小加99的值",
        "output": "match(a:department) return a.size + 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部person以名字,id,性别分组的id, 根据id升序排序",
        "output": "match(a:person) return a.id group by a.name, a.id, a.gender order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被论坛包含数量大于110的用户,记为relationCount,再查询这些用户包含的用户",
        "output": "match(a:user) let a.relationCount = MAX((a:user)<-[e:contain]-(b:forum) => b.id) match(a where a.relationCount > 110)-[e2:contain]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出哔哩哔哩公司。",
        "output": "match(a:company where a.name = 'Bilibili') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person赵轩存在认识关系,且与person韩红存在喜欢关系的person节点，返回这些person的id,及person赵轩的性别,及person韩红的性别",
        "output": "match(a:person where a.name='赵轩')-[e:knows]->(b:person)<-[e2:likes]-(c:person where c.name='韩红') return a.gender,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按id和价值分组，然后按照价值从大到小排序所有的标签",
        "output": "match(a:tag) return a.value group by a.id, a.value order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,大小,id分组,计算value的最大值除648的值",
        "output": "return MAX(a.value) / 648 group by a.value, a.size, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以包含关系关联了帖子Post_249的论坛",
        "output": "match(a:post where a.name='Post_249')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "level对3取余的值",
        "output": "a.level % 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('黄建国',4526,'famale'),('郑建聪',3214,'male')作为请求表数据,属性分别为name,salary,gender, 源点的name等于输入表name,返回与software Flink和Calcite都存在software_uses_software关系的点",
        "output": "with p as (select * from (VALUES('黄建国',4526,'famale'),('郑建聪',3214,'male')) as t(name,salary,gender))MATCH (a:software WHERE a.name = p.name AND (a.name = 'Flink')) -[e:software_uses_software ]->(b) <-[e2:software_uses_software ]-(c:software WHERE c.name = 'Calcite') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与作家徐轩有关,且与作家张科有关系的作家节点",
        "output": "match(a:author where a.name='徐轩')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='张科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与post Post_419和Post_465都存在has关系的点",
        "output": "match(a:post where a.name='Post_419')-[e:has]->(b)<-[e2:has]-(c:post where c.name='Post_465') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'mm', 'Na', 31作为输入调用triangleCount函数,返回number",
        "output": "Call TRIANGLECOUNT('mm', 'Na', 31) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找黄思琪撰写的书，包括书名、字数和相关书籍。",
        "output": "match(a:author where name = '黄思琪')-[e:write]->(b:book)-[e2:relates]->(c:book) return c.name, c.wordCount, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的价值除464的最小值",
        "output": "match(a:company) return MIN(a.value / 464)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value乘186的值",
        "output": "a.value * 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表780,691, 以属性id作为相等条件,帮我查询与person周建国有person_knows_person关系的2度以内的环",
        "output": "with p as (select * from (VALUES(780),(691)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '周建国')) -[e:person_knows_person ]->{0,1}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为Post_226的点拥有的全部标签,并对这些点的价值进行求和",
        "output": "match(a where a.name='Post_226')-[e:post_has_tag]->(b:tag) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回92个与计算机体系结构和马克思原理都存在关系的教师或学生或部门节点",
        "output": "match(a where a.name='计算机体系结构')-[e]->(b:teacher | student | department)<-[e2]-(c where c.name='马克思原理') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于帖子,名为Post_399的点,返回这些点的价值,创建时间,语言",
        "output": "match(a:post where a.name = 'Post_399') return a.value, a.createTime, a.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为BIN的点还款的所有贷款,并对这些贷款的金额进行求和",
        "output": "match(a where a.name='BIN')-[e:repay]->(b:loan) return SUM(b.amount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为部门,名为物理学院的点,返回这些点的价值,大小,id",
        "output": "match(a:department where a.name = '物理学院') return a.value, a.size, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person关联的person, 令person(b)的薪资的值等于认识person的person的性别的最小值, 再查找person认识的person",
        "output": "match(a:person)-[e:relates]->(b:person) let b.salary = MIN((b:person)<-[e2:knows]-(c:person) => c.gender) match(b:person)-[e3:knows]->(d:person) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于likes,且f1不是false的边",
        "output": "match(a)-[e:likes where e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和公司微软之间有合作关系的大学",
        "output": "match(a:company where a.name='微软')-[e:cooperate]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id分组,计算年龄乘31的值",
        "output": "return a.age * 31 group by a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以存款关系关联了账号LX001的贷款",
        "output": "match(a:account where a.name='LX001')<-[e:deposit]-(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找和买家有关联的订单节点,并根据其价格,价值,id分组,返回价格,价值,id,以及价格乘700.39的值",
        "output": "match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.price, b.value, b.id, b.price * 700.39 group by b.price, b.value, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点标签等于评论,边标签等于属于的边,返回这些边的目标点id对目标点id取余的平均值,和srcId的平均值加181的最小值",
        "output": "match(a:comment)-[e:belong]->(b) return AVG(e.targetId % e.targetId), MIN(AVG(e.srcId) + 181)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前17个满足条件创建时间是2030年11月19日的帖子",
        "output": "match(a:post where a.createTime = '2030-11-19') return a limit 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person孙思思有关系的person的名字",
        "output": "match(a:person where a.name='孙思思')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与何思琪有关联的人。",
        "output": "match(a:person where a.name='何思琪')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出拥有TheShy账户的人。",
        "output": "match(a:account where a.name='TheShy')<-[e:own]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为武汉大学的点属于的城市",
        "output": "match(a where a.name='武汉大学')-[e:belong]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以806,582,444,705,911作为请求点id, 以属性id作为相等条件,找出label为书,名为罪与罚的点,返回这些点的id",
        "output": "with p as (select * from (VALUES(806),(582),(444),(705),(911)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.name = '罪与罚')) RETURN a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签等于部门,边标签等于拥有的边,返回这些边的源点id对131取余的值,和源点id除47对166.02取余的数量",
        "output": "match(a:department)-[e:has]->(b) return e.srcId % 131, COUNT(e.srcId / 47 % 166.02)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为lang,stars,openSource, 数据为('java',125,true),('python',672,false), 以属性openSource作为相等条件,返回从公司微软出发,经过label为company_creates_software的边,走1度到达的软件点",
        "output": "with p as (select * from (VALUES('java',125,true),('python',672,false)) as t(lang,stars,openSource))MATCH (a:company WHERE a.openSource = p.openSource AND (a.name = '微软')) -[e:company_creates_software ]->(b:software) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为何伟的,性别不是male,年龄为空的朋友,返回这些朋友的年龄,和边的源点id,f0,f1",
        "output": "match(a where a.name='何伟')-[e:friend]->(b where b.gender <> 'male' and (b.age is null)) return b.age,e.srcId, e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出那些满足以下条件的电影：它们的名字既不是'神探狄仁杰'，也不是喜剧类型，同时ID在29到64之间。然后按照'value'字段的值从大到小进行排序。",
        "output": "match(a:film where a.name <> '神探狄仁杰' or a.category <> '喜剧' or (a.id BETWEEN 29 AND 64)) return a order by a.value desc limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与department外科有has关系且与department传染部有belong关系的医生节点的height,age,name,以及department外科的address和department传染部的name。",
        "output": "match(a:department where a.name='外科')-[e:has]->(b:doctor)<-[e2:belong]-(c:department where c.name='传染部') return a.address,b.height, b.age, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出贷款loan_2存款的账号,以及转账这些账号的账号, 令账号(c)的价值等于账号(b)的价值对462取余除357, 返回贷款(a)的金额,账号(b)的价值,账号(c)的上次登录时间",
        "output": "match(a:loan where name = 'loan_2')-[e:deposit]->(b:account)<-[e2:transfer]-(c:account) let c.value = b.value % 462 / 357 return a.amount,b.value,c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找University的朋友，或者找朋友的朋友。",
        "output": "match(a:university)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表939,797,274,568, 以属性id作为相等条件,返回111个age小于63,id大于等于46且gender不是male的author,根据id降序排列",
        "output": "with p as (select * from (VALUES(939),(797),(274),(568)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.age < 63 AND a.id >= 46 AND a.gender <> 'male')) RETURN a ORDER BY a.id DESC LIMIT 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出person赵建聪watch的film,被其他cinema releases的数量",
        "output": "match(a:person where a.name='赵建聪')-[e:person_watch_film]->(b:film)<-[e2:cinema_releases_film]-(c:cinema) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age,gender分组,计算salary除7689的最小值",
        "output": "return MIN(a.salary / 7689) group by a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Bob存在likes关系的post,post与tag存在has关系的点,返回这些点的name",
        "output": "match(a where a.name = 'Bob')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找公司的三角的环,边标签为申请, 并返回这些点的id",
        "output": "match(a:company)-[e:apply]->(b)-[e2:apply]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型是学生的点有选择关系的课程,并且和这些课程有属于关系的部门,并且和这些部门有拥有关系的学生",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:student) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person徐思思有创造关系的评论,再请帮我找出以创造关系关联了徐思思的评论",
        "output": "match(a:person where a.name = '徐思思')-[e:creates]->(b:comment),(a:person where a.name = '徐思思')<-[e2:creates]-(c:comment)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出账号TheShy 转账的账号,返回账号 还款的贷款的金额乘8684.74对7431.05取余的值",
        "output": "match(a:account where name = 'TheShy')-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return c.amount * 8684.74 % 7431.05",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于person,边标签等于父母的边,返回这些边的f0加683的最小值,和源点id减39的平均值",
        "output": "match(a:person)-[e:parent]->(b) return MIN(e.f0 + 683), AVG(e.srcId - 39)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出大学复旦大学的全部朋友,的目标点id对172取余的个数",
        "output": "match(a:university where a.name= '复旦大学')-[e:friend]->(b) return COUNT(e.targetId % 172)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为建国大业的film或cinema或person,以及与其有关的comment,并返回建国大业的category和这些comment的wordCount",
        "output": "match(a:film | cinema | person where name = '建国大业')-[e]-(b:comment) return a.category, b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型是person的点,返回103个",
        "output": "match(a:person) return a limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为78的电影院上映的电影, 并将电影有关的person的名字的最大值赋值给电影的价值, 接着查询电影的价值小于78的电影拥有的标签",
        "output": "match(a:cinema where a.id = 78)-[e:releases]->(b:film) let b.value = MAX((b:film)-[e2]-(c:person) => c.name) match(b:film where b.value < 78)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据'person'标签和'马宏'名称获取性别",
        "output": "match(a:person where a.name = '马宏') return a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出黄轩认识的人",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='黄轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,height,name, 数据为(89,191,'郑宏'),(92,170,'马强'), 源点的height等于输入表height,给出163个user张思思和何轩,共同的relation",
        "output": "with p as (select * from (VALUES(89,191,'郑宏'),(92,170,'马强')) as t(age,height,name))MATCH (a:user WHERE a.height = p.height AND (a.name = '张思思')) -[e:relation ]->(b) <-[e2:relation ]-(c:user WHERE c.name = '何轩') RETURN b LIMIT 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(82,'东区','大众影院'),(35,'北区','好视影院'),(63,'A座','UME'),(61,'东区','横店影院')作为请求表数据,属性分别为id,address,name, 源点的name等于输入表name,帮我查询全部tag以id分组的id, 根据id升序排序",
        "output": "with p as (select * from (VALUES(82,'东区','大众影院'),(35,'北区','好视影院'),(63,'A座','UME'),(61,'东区','横店影院')) as t(id,address,name))MATCH (a:tag WHERE a.name = p.name) RETURN a.id GROUP BY a.id ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到person的父节点，或者其父节点的父节点",
        "output": "match(a:person)-[e:parent]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型是doctor,目标点类型是prescription,类型是prescription的边",
        "output": "match(a:doctor)-[e:prescription]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出论坛中国诗词论坛包含的用户, 令用户的身高等于用户的名字,令论坛的人数等于论坛的价值,令论坛的人数等于论坛的价值减565, 返回论坛的人数, 用户的薪资",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]->(b:user) let b.height = b.name,let a.peopleNumber = a.value,let a.peopleNumber = a.value - 565 return a.peopleNumber,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 关联了韩梅的喜欢她的person。",
        "output": "match(a:person where a.name='韩梅')<-[e:likes]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与名为王建国的用户有伙伴关系，或者有伙伴的伙伴关系的帖子。",
        "output": "match(a:user where n.name=王建国)-[e:partner]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与作家王月有撰写关系的1度的环",
        "output": "match(a:author where name = '王月')-[e:write]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(16,'微软','medium'),(536,'蚂蚁集团','medium')作为请求表数据,属性分别为value,name,scale, 以属性scale作为相等条件,给出标签等于account的点,返回59个",
        "output": "with p as (select * from (VALUES(16,'微软','medium'),(536,'蚂蚁集团','medium')) as t(value,name,scale))MATCH (a:account WHERE a.scale = p.scale) RETURN a LIMIT 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出被person张国强buy的software",
        "output": "match(a:software)<-[e:person_buy_software]-(b:person where b.name='张国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以5,20,545,122作为请求点id, 以属性id作为相等条件,查找94个name是百年孤独的book,根据name从大到小排列",
        "output": "with p as (select * from (VALUES(5),(20),(545),(122)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.name = '百年孤独')) RETURN a ORDER BY a.name DESC LIMIT 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与论坛中国诗词论坛有关系的用户的id",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e]-(b:user) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有源点为城市，边类型为包含的边，并返回这些边的目标点ID除以114的值和F0加859的值。",
        "output": "match(a:city)-[e:contain]->(b) return e.targetId / 114, e.f0 + 859",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有城市的人数除9119的值",
        "output": "match(a:city) return a.peopleNumber / 9119",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person有关联的person节点,并根据其薪资,名字,id分组,返回薪资,名字,id,以及id的最大值对9取余的平均值",
        "output": "match(a:person)-[e:colleague]-(b:person) return b.salary, b.name, b.id, AVG(MAX(b.id) % 9) group by b.salary, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));找出和编辑有关联的书节点,并根据其价格分组,返回价格,以及字数除214的最大值",
        "output": "match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.price, MAX(b.wordCount / 214) group by b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找人月薪资，标签为person的点，返回结果。",
        "output": "match(a:person where a.name = '何月') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以661,261,573,183作为请求点id, 以属性id作为相等条件,查询和author有关联的book节点,并根据其name,name,price分组,返回name,name,price,以及id的个数对id取余的值",
        "output": "with p as (select * from (VALUES(661),(261),(573),(183)) as t(id)) MATCH (a:author WHERE a.id = p.id) -[e:author_write_book ]-(b:book) RETURN b.name, b.name, b.price, COUNT(b.id) % b.id GROUP BY b.name, b.name, b.price ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄加13的值",
        "output": "a.age + 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和买家点有创造关系的订单节点,且边满足条件源点id小于等于179,目标订单节点满足条件名字大于等于172",
        "output": "match(a:buyer)-[e:creates where e.srcId <= 179]->(b:orders where b.name >= 172) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为level,name,id, 数据为(4,'复旦大学',21), 源点的name等于输入表name,给出14个和标签等于university的点有university_has_department关系的department,并且和这些department有department_has_teacher关系的teacher",
        "output": "with p as (select * from (VALUES(4,'复旦大学',21)) as t(level,name,id))MATCH (a:university WHERE a.name = p.name) -[e:university_has_department ]->(b:department) -[e2:department_has_teacher ]->(c:teacher) RETURN c LIMIT 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找卖家黄梅 回答的买家,返回买家 取消的订单的价格减价格的最小值",
        "output": "match(a:seller where name = '黄梅')-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders) return MIN(c.price - c.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出id为142的处方有关的医生的伙伴, 再给出和医生有关系的朋友",
        "output": "match(a:prescription where id = '142')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与滴滴和微软都有关联的193家公司。",
        "output": "match(a where a.name='滴滴')-[e]->(b:company)<-[e2]-(c where c.name='微软') return b limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,value,name分组,计算id乘id的最大值",
        "output": "return MAX(a.id * a.id) group by a.level, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部和名为王红的user有relation关系,或有relation的relation关系的post",
        "output": "match(a:user where n.name=王红)-[e:relation]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有关于李思思和西虹市首富的影评。",
        "output": "match(a:person where a.name='李思思')-[e:creates]-(b:comment)-[e2:belong]-(c:film where c.name='西虹市首富') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出投资公司微软的person,和这些person投资的公司",
        "output": "match(a:company where name = '微软')<-[e:invest]-(b:person)-[e2:invest]->(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件id小于等于65且名字不是赵科的节点",
        "output": "match(a where a.id <= 65 and a.name <> '赵科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点label为用户,边label为创造,以及满足条件f1等于true或f1为false,且权重大于144.31的边",
        "output": "match(a:user)-[e:creates where (e.f1 = true or e.f1 = false) and e.weight > 144.31]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从孙建聪开始，经过一条知道边，跳1下后到达的是哪个点？",
        "output": "match(a:person where a.name='孙建聪')-[e:knows]->{1,1}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与事项ISSUE-410有关系的仓库, 返回和这些仓库有关联的事项的,权重乘366的平均值",
        "output": "match(a:issue where a.name= 'ISSUE-410')-[e]-(b:repository)-[e2]-(c:issue) return AVG(c.weight * 366)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出has issue ISSUE-251的repository,和这些repository has的user",
        "output": "match(a:issue where name = 'ISSUE-251')<-[e:has]-(b:repository)-[e2:has]->(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为comment,名为Comment_499的点,返回这些点的id,wordCount,name",
        "output": "match(a:comment where a.name = 'Comment_499') return a.id, a.wordCount, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从卖家徐国强出发,经过label为拥有的边,走2度或3度到达的商品点",
        "output": "match(a:seller where a.name='徐国强')-[e:has]->{2,3}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询黄建国喜欢哪些书，以及它们被其他哪些书所知道。",
        "output": "match(a:reader where a.name='黄建国')-[e:likes]->(b:book)<-[e2:knows]-(c:book) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签为作家的点有撰写关系的书,且和这些书有引用关系的书,且和这些书有引用关系的书",
        "output": "match(a:author)-[e:write]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找电影院上映的电影,返回其源点的id除44的值,以及目标点的value的最大值对334取余的平均值",
        "output": "match(a:cinema)-[e:releases]->(b:film) return a.id / 44, AVG(MAX(b.value) % 334)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为Prescription_100的点的id和名称，其返回类型为处方。",
        "output": "match(a:prescription where a.name = 'Prescription_100') return a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('Prescription_118',95,143),('Prescription_432',52,901)作为请求表数据,属性分别为name,id,weight, 以属性id作为相等条件,给出全部源点label为user,边label为user_likes_repository的边,返回这些边的weight乘131.88的值,和weight的最大值乘154.56的最小值",
        "output": "with p as (select * from (VALUES('Prescription_118',95,143),('Prescription_432',52,901)) as t(name,id,weight))MATCH (a:user WHERE a.id = p.id) -[e:user_likes_repository ]->(b) RETURN e.weight * 131.88, MIN(MAX(e.weight) * 154.56) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和贷款loan_24有关的公司,称为X,再查找和这个X有关联的其他贷款,以及和X有关联的公司",
        "output": "match(a:loan where a.name = 'loan_24')-[e]-(b:company), (b:company)-[e2]-(c:loan),(b:company)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到黄思思的朋友的家庭的家庭",
        "output": "match(a:person where a.name='黄思思')-[e:friend]->(b)-[e2:family]->(c)-[e3:family]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('徐月',21,186),('郑思思',31,151)作为请求表数据,属性分别为name,id,height, 以属性name作为相等条件,给出源点value在737到932之间,id不是65,边类型是software_uses_software,且满足条件weight在140.31到169.17之间且srcId在99到183之间的边,返回这些边的targetId减98的值",
        "output": "with p as (select * from (VALUES('徐月',21,186),('郑思思',31,151)) as t(name,id,height))MATCH (a WHERE a.name = p.name AND (a.value BETWEEN ASYMMETRIC 737 AND 932 AND a.id <> 65)) -[e:software_uses_software WHERE e.weight BETWEEN ASYMMETRIC 140.31 AND 169.17 AND e.srcId BETWEEN ASYMMETRIC 99 AND 183 ]->(b) RETURN e.targetId - 98 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与医生吴宏和黄建国都有关的部门",
        "output": "match(a:doctor where a.name='吴宏')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='黄建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person马红申请的贷款",
        "output": "match(a:loan)<-[e:apply]-(b:person where b.name='马红') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以拥有关系关联了学生王思琪的部门",
        "output": "match(a:student where a.name='王思琪')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是教师的点,并根据薪资降序排列",
        "output": "match(a:teacher) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取何梅医生所在的科室中所有的医生",
        "output": "match(a:doctor where a.name = '何梅')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找张建国和陈轩都有的购买共同点。",
        "output": "match(a:person where a.name='张建国')-[e:buy]->(b)<-[e2:buy]-(c:person where c.name='陈轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以relates关系关联了person王宏的person",
        "output": "match(a:person where a.name='王宏')<-[e:relates]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以134,872,588,717作为请求点id, 源点的id等于输入表id,查找orders Order_107contain的goods,被其他buyer look的数量",
        "output": "with p as (select * from (VALUES(134),(872),(588),(717)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_107')) -[e:orders_contain_goods ]->(b:goods) <-[e2:buyer_look_goods ]-(c:buyer) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找类型是帖子的全部点,并根据语言从小到大排列",
        "output": "match(a:post) return a order by a.lang asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为Post_449和Post_332的,类型为post的点公共的partner节点的名单",
        "output": "match(a:post where a.name='Post_449')-[e:partner]->(b)<-[e2:partner]-(c:post where c.name='Post_332') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person孙伟有关系的person, 返回和这些person有关联的person的,age乘76的值",
        "output": "match(a:person where a.name= '孙伟')-[e]-(b:person)-[e2]-(c:person) return c.age * 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于商品,名为苹果的点,返回这些点的价格,名字,id",
        "output": "match(a:goods where a.name = '苹果') return a.price, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找杜国强和何思琪之间存在共同提交点的内容。",
        "output": "match(a:person where a.name='杜国强')-[e:commits]->(b)<-[e2:commits]-(c:person where c.name='何思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回前93个label为person_knows_person的边",
        "output": "match(a)-[e:person_knows_person]->(b) return e limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和用户赵思琪之间有创造关系的合并请求",
        "output": "match(a:user where a.name='赵思琪')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前37个满足条件薪资小于等于9593的读者",
        "output": "match(a:reader where a.salary <= 9593) return a limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为卖家的点,返回150个",
        "output": "match(a:seller) return a limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为周建国和周思思的点共同教的,类型为课程的节点",
        "output": "match(a where a.name = '周建国')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '周思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,value,peopleNumber, 数据为(70,192,910),(23,968,594),(71,312,908), 源点的id等于输入表id,返回label为person的全部点,并根据height从小到大排列",
        "output": "with p as (select * from (VALUES(70,192,910),(23,968,594),(71,312,908)) as t(id,value,peopleNumber))MATCH (a:person WHERE a.id = p.id) RETURN a ORDER BY a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找一部叫《星际穿越》的电影",
        "output": "match(a:film where a.name = '星际穿越') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找到与这本书相关的其他书，以及出版这些书的其他出版社。",
        "output": "match(a:book where a.id = '125')-[e]-(b:book)<-[e2:publish]-(c:publisher) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与country英国有关系的country, 返回和这些country有关联的university的,id的求和值除95的值",
        "output": "match(a:country where a.name= '英国')-[e]-(b:country)-[e2]-(c:university) return SUM(c.id) / 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询李建国接受关系的处方，以及查询与李建国有关联的接受关系的处方。",
        "output": "match(a:patient where a.name = '李建国')-[e:accept]->(b:prescription),(a:patient where a.name = '李建国')<-[e2:accept]-(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点label为用户,目标点label为帖子,label为帖子的边",
        "output": "match(a:user)-[e:post]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为category,name,id, 数据为('其他','阿莫新林',97),('其他','999感冒灵',32),('发烧药','阿莫新林',22),('其他','布洛芬',61)的子查询作为输入表, 以属性category作为相等条件,帮我查询prescription以name,id分组的weight, 根据weight升序排序",
        "output": "with p as (select * from (VALUES('其他','阿莫新林',97),('其他','999感冒灵',32),('发烧药','阿莫新林',22),('其他','布洛芬',61)) as t(category,name,id))MATCH (a:prescription WHERE a.category = p.category) RETURN a.weight GROUP BY a.name, a.id ORDER BY a.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 其他人对韩国强拥有的账户进行了贷款存款。",
        "output": "match(a:person where a.name='韩国强')-[e:own]->(b:account)<-[e2:deposit]-(c:loan) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表690,553,113,532,230, 以属性id作为相等条件,帮我查询和reader何雪有reader_likes_book关系的book,以及和author郑轩有author_knows_author关系的author,将它们都返回",
        "output": "with p as (select * from (VALUES(690),(553),(113),(532),(230)) as t(id)) MATCH (a:reader WHERE a.id = p.id AND (a.name = '何雪')) -[e:reader_likes_book ]->(b:book) , (c:author WHERE c.name = '郑轩') -[e2:author_knows_author ]->(d:author) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有从城市（源点）到大学（目标点）的边，标签为'contain'。",
        "output": "match(a:city)-[e:contain]->(b:university) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找与doctor杜强和郑科都存在doctor_creates_prescription关系的点",
        "output": "match(a:doctor where a.name='杜强')-[e:doctor_creates_prescription]->(b)<-[e2:doctor_creates_prescription]-(c:doctor where c.name='郑科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出发布书java程序设计认识的书,的编辑",
        "output": "match(a:book where name = 'java程序设计')-[e:knows]->(b:book)<-[e2:publish]-(c:publisher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和医生韩梅之间有创造关系的处方",
        "output": "match(a:doctor where a.name='韩梅')-[e:creates]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出课程程序设计属于的部门,被其他大学拥有的数量",
        "output": "match(a:course where a.name='程序设计')-[e:belong]->(b:department)<-[e2:has]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 杜建聪写的书有哪些关联？",
        "output": "match(a:author where a.name = '杜建聪')-[e:write]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为person的点有创造关系的评论,且和这些评论有属于关系的电影,且和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为person,名为郑雪的点,返回这些点的薪资",
        "output": "match(a:person where a.name = '郑雪') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出与cinema UME存在cinema_releases_film关系,且与tag历史存在film_has_tag关系的film节点，返回这些film的category,及cinema UME的name,及tag历史的name",
        "output": "match(a:cinema where a.name='UME')-[e:cinema_releases_film]->(b:film)<-[e2:film_has_tag]-(c:tag where c.name='历史') return a.name,b.category,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person李雪关联的person节点关联的person",
        "output": "match(a:person where a.name = '李雪')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person杜月和马思思都存在恋人关系的点",
        "output": "match(a:person where a.name='杜月')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='马思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下生物学院的学生",
        "output": "match(a:student)<-[e:has]-(b:department where b.name='生物学院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于loan的点,返回2个",
        "output": "match(a:loan) return a limit 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出家人之间的person-to-person边",
        "output": "match(a:person)-[e:family]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以308,197作为请求点id, 源点的id等于输入表id,请帮我找出源点salary小于2929,目标点name为周强且name是李思思,且类型是person_lover_person的边",
        "output": "with p as (select * from (VALUES(308),(197)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.salary < 2929)) -[e:person_lover_person ]->(b WHERE b.name = '周强' AND b.name = '李思思') RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询论坛中国诗词论坛包含的帖子, 令帖子的人数等于论坛的人数, 返回论坛的人数, 帖子的创建时间",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]->(b:post) let b.peopleNumber = a.peopleNumber return a.peopleNumber,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出4个名为中国科技大学的点拥有的标签等于部门的节点,且节点名字不是计算机学院且大小不是70",
        "output": "match(a where a.name='中国科技大学')-[e:has]->(b:department where b.name <> '计算机学院' and b.size <> 70) return b limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有卖家关联的订单，以及这些订单中与其他订单因取消而关联的其他买家。",
        "output": "match(a:seller where a.id = '76')-[e]-(b:orders)<-[e2:cancel]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为117的用户有关的用户的朋友, 再找出和用户有关系的朋友",
        "output": "match(a:user where id = 117)-[e]-(b:user)-[e2:friend]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找121个名为赵伟的点认识的标签为person的节点,且节点年龄为59",
        "output": "match(a where a.name='赵伟')-[e:knows]->(b:person where b.age = 59) return b limit 121",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找到与病人相关的处方节点，并按其ID和权重进行分组，最后返回ID和权重。",
        "output": "match(a:patient)-[e:accept]-(b:prescription) return b.id, b.weight group by b.id, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出user publish的post,返回其源点的age对70取余的数量,以及目标点的id减56的值",
        "output": "match(a:user)-[e:publish]->(b:post) return COUNT(a.age % 70), b.id - 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找被person王红关联的person",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='王红') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为陈梅的公司或person,以及与其有关的贷款,并返回陈梅的性别和这些贷款的id",
        "output": "match(a:company | person where name = '陈梅')-[e]-(b:loan) return a.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与电影绿巨人和泰坦尼克号都存在拥有关系的点",
        "output": "match(a:film where a.name='绿巨人')-[e:has]->(b)<-[e2:has]-(c:film where c.name='泰坦尼克号') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和comment有关联的film节点,并根据其category分组,返回category,以及value减683的值",
        "output": "match(a:comment)-[e:belong]-(b:film) return b.category, b.value - 683 group by b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与course形势与政策有关系的course的id",
        "output": "match(a:course where a.name='形势与政策')-[e]-(b:course) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为吴科、职业是医生的点，并返回它们的ID和身高信息。",
        "output": "match(a:doctor where a.name = '吴科') return a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与买家何思思有咨询关系并拥有商品手机的卖家信息，包括卖家名字、年龄、薪资以及买家何思思和商品手机的ID。",
        "output": "match(a:buyer where a.name='何思思')-[e:consult]->(b:seller)<-[e2:has]-(c:goods where c.name='手机') return a.id,b.name, b.age, b.salary,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找事项的2跳以内的环",
        "output": "match(a:issue)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出全部id为136的buyer关联的orders,和以creates关系关联了这些orders的其他buyer",
        "output": "match(a:buyer where a.id = '136')-[e]-(b:orders)<-[e2:buyer_creates_orders]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以97作为请求点id, 以属性id作为相等条件,请帮我查找类型是person_knows_person,以及满足条件weight不为空的边",
        "output": "with p as (select * from (VALUES(97)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_knows_person WHERE e.weight IS NOT NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有处方，按名称从大到小排序。",
        "output": "match(a:prescription) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为呐喊的书或作家或读者,以及与其有关的读者,并返回呐喊的类别和这些读者的性别",
        "output": "match(a:book | author | reader where name = '呐喊')-[e]-(b:reader) return a.category, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和作家有关联的作家节点,并根据其名字分组,返回名字,以及身高除身高的最小值",
        "output": "match(a:author)-[e:knows]-(b:author) return b.name, MIN(b.height / b.height) group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与ISSUE-161存在属于关系的仓库,仓库与用户存在拥有关系的点,返回这些点的性别",
        "output": "match(a where a.name = 'ISSUE-161')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从韩月出发，沿着标签为'lover'的边走1度或2度，可以到达哪个点？",
        "output": "match(a:person where a.name='韩月')-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和city有关联的company节点,并根据其peopleNumber分组,返回peopleNumber,以及peopleNumber对802取余加id对85取余的值",
        "output": "match(a:city)-[e:contain]-(b:company) return b.peopleNumber, b.peopleNumber % 802 + b.id % 85 group by b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与'person'相关的评论节点，按创建时间和id进行分组，并返回这些信息。",
        "output": "match(a:person)-[e:creates]-(b:comment) return b.createTime, b.id group by b.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以申请关系关联了贷款loan_82的person",
        "output": "match(a:loan where a.name='loan_82')<-[e:apply]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请按规格升序查询19家人数为空的公司",
        "output": "match(a:company where (a.peopleNumber is null)) return a order by a.scale asc limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为黄科且标签为person的点，并返回它们的年龄",
        "output": "match(a:person where a.name = '黄科') return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被user creates数量大于8的issue,记为relationCount,再查询这些issue creates的issue",
        "output": "match(a:issue) let a.relationCount = AVG((a:issue)<-[e:creates]-(b:user) => b.id) match(a where a.relationCount > 8)-[e2:creates]->(c:issue) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person孙国强有关系的软件的id",
        "output": "match(a:person where a.name='孙国强')-[e]-(b:software) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person陈红之间有支付关系的person",
        "output": "match(a:person where a.name='陈红')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出账号转账的账号, 令账号的是否冻结的值等于存款账号的贷款的金额的和, 再查找账号还款的贷款",
        "output": "match(a:account)-[e:transfer]->(b:account) let b.isBlock = SUM((b:account)<-[e2:deposit]-(c:loan) => c.amount) match(b:account)-[e3:repay]->(d:loan) return b.isBlock, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回139个和标签等于person的点有家人关系的person,以及和这些person有同事关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:colleague]->(c:person) return c limit 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与用户陈雪有喜欢关系的1度的环",
        "output": "match(a:user where name = '陈雪')-[e:likes]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为吴思琪的点的,id除79小于9721或id为30的朋友,返回这些朋友的名字,和边的f1,源点id,目标点id",
        "output": "match(a where a.name='吴思琪')-[e:friend]->(b where b.id / 79 < 9721 or b.id = 30) return b.name,e.f1, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有源点标签为'买家'，且边标签为'创造'的边，并返回这些边在F0中的值除以683,以及源点ID除以105的值。",
        "output": "match(a:buyer)-[e:creates]->(b) return e.f0 / 683, e.srcId / 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为陈建聪的点取消的订单",
        "output": "match(a where a.name='陈建聪')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部医生的相关者,或其相关者的相关者",
        "output": "match(a:doctor)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person认识的person,返回其源点的年龄除3对81取余的值,以及目标点的身高对179取余减22的值",
        "output": "match(a:person)-[e:knows]->(b:person) return a.age / 3 % 81, b.height % 179 - 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为 person，目标点标签为 评论，且标签为 创造 的边。",
        "output": "match(a:person)-[e:creates]->(b:comment) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的age减65的值",
        "output": "match(a:person) return a.age - 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出forum的三角的环,边类型是contain, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "创建一个根据处方权重、ID和名称分组，并按照创建时间升序排序的数据表。",
        "output": "match(a:prescription) return a.createTime group by a.weight, a.id, a.name order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回与prescription Prescription_186有关系的user, 返回和这些user有关联的user的,salary除6881的值",
        "output": "match(a:prescription where a.name= 'Prescription_186')-[e]-(b:user)-[e2]-(c:user) return c.salary / 6881",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,salary,id分组,计算age减age的数量",
        "output": "return COUNT(a.age - a.age) group by a.gender, a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为Order_172的goods或orders,以及与其有关的seller,并返回Order_172的price和这些seller的age",
        "output": "match(a:goods | orders where name = 'Order_172')-[e]-(b:seller) return a.price, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(198,'male','马伟')作为请求表数据,属性分别为height,gender,name, 以属性name作为相等条件,请帮我查找5个和label为person的点有person_apply_loan关系的贷款,并且和这些贷款有loan_deposit_account关系的账号",
        "output": "with p as (select * from (VALUES(198,'male','马伟')) as t(height,gender,name))MATCH (a:person WHERE a.name = p.name) -[e:person_apply_loan ]->(b:loan) -[e2:loan_deposit_account ]->(c:account) RETURN c LIMIT 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为伦敦的点包含的公司,并对这些公司的id进行求和",
        "output": "match(a where a.name='伦敦')-[e:contain]->(b:company) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回两个人的共同伴侣。",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点标签等于doctor,边标签等于belong,以及满足条件f0不为空,srcId等于48且srcId不是142的边",
        "output": "match(a:doctor)-[e:belong where (e.f0 is not null) and e.srcId = 48 and e.srcId <> 142]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person李轩有家人关系的person,再请帮我找出以恋人关系关联了李轩的person",
        "output": "match(a:person where a.name = '李轩')-[e:family]->(b:person),(a:person where a.name = '李轩')<-[e2:lover]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被teacher徐强teach的course",
        "output": "match(a:course)<-[e:teach]-(b:teacher where b.name='徐强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 介绍一下陈科。",
        "output": "match(a:person where a.name = '陈科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与名为徐宏的人有同事关系或同事同事关系的所有人。",
        "output": "match(a:person where n.name=徐宏)-[e:colleague]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询徐雪的点关联的person,然后查询徐雪被认识的person,一起返回",
        "output": "match(a where a.name = '徐雪')-[e:relates]->(b:person),(a where a.name = '徐雪')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与部门传染部有关系的处方的权重",
        "output": "match(a:department where a.name='传染部')-[e]-(b:prescription) return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和读者何科之间有喜欢关系的书",
        "output": "match(a:reader where a.name='何科')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签等于university,目标点标签等于department,标签等于university或course的边",
        "output": "match(a:university)-[e:university | course]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找纽约的点属于的国家,然后查找纽约被包含的国家,一起返回",
        "output": "match(a where a.name = '纽约')-[e:belong]->(b:country),(a where a.name = '纽约')<-[e2:contain]-(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从买家吴红出发,经过类型是咨询的边,走3跳到达的卖家点",
        "output": "match(a:buyer where a.name='吴红')-[e:consult]->{3,3}(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与软件Flink存在使用关系,且与软件SprintBoot存在使用关系的软件节点，返回这些软件的名字,语言,及软件Flink的名字,及软件SprintBoot的是否开源",
        "output": "match(a:software where a.name='Flink')-[e:uses]->(b:software)<-[e2:uses]-(c:software where c.name='SprintBoot') return a.name,b.name, b.lang,c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为好视影院的电影院",
        "output": "match(a:cinema where a.name = '好视影院') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出forum contain的user,返回其源点的id除49加89的平均值,以及目标点的age的和加41的和",
        "output": "match(a:forum)-[e:contain]->(b:user) return AVG(a.id / 49 + 89), SUM(SUM(b.age) + 41)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person徐红有own关系的2度的环",
        "output": "match(a:person where name = '徐红')-[e:own]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f0,srcId,timeStamp, 数据为(872,142,1997-10-11),(931,33,2025-05-15), 源点的timeStamp等于输入表timeStamp,返回和论坛有关联的person节点,并根据其年龄,id分组,返回年龄,id,以及身高对173取余的最大值",
        "output": "with p as (select * from (VALUES(872,142,1997-10-11),(931,33,2025-05-15)) as t(f0,srcId,timeStamp))MATCH (a:forum WHERE a.timeStamp = p.timeStamp) -[e:forum_contain_person ]-(b:person) RETURN b.age, b.id, MAX(b.height % 173) GROUP BY b.age, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询12个与Prescription_308和Prescription_140都存在关系的药品或部门节点",
        "output": "match(a where a.name='Prescription_308')-[e]->(b:medicine | department)<-[e2]-(c where c.name='Prescription_140') return b limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有学生点，按照薪水升序排序。",
        "output": "match(a:student) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找cinema UME releases的film, 令cinema的name等于cinema的id的求和值减38的个数,令cinema的id等于film的value减value,令cinema的size等于cinema的id, 返回cinema的id, film的value",
        "output": "match(a:cinema where a.name='UME')-[e:releases]->(b:film) let a.name = COUNT(SUM(a.id) - 38),let a.id = b.value - b.value,let a.size = a.id return a.id,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person马红有关的软件,再帮我查询和马红属于的其他公司,返回它们",
        "output": "match(a:person where a.name = '马红')-[e]-(b:software), (a:person)-[e2:belong]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为天津的,规格不是large或名字大于88的相关者,返回这些相关者的人数,和边的权重,源点id,f0",
        "output": "match(a where a.name='天津')-[e:relation]->(b where b.scale <> 'large' or b.name > 88) return b.peopleNumber,e.weight, e.srcId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为PR-130的合并请求,以及与其有关的事项,并返回PR-130的创建时间和这些事项的状态",
        "output": "match(a:pullRequest where name = 'PR-130')-[e]-(b:issue) return a.createTime, b.status",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person杜伟likes的comment节点belong的film",
        "output": "match(a:person where a.name = '杜伟')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为陈建国的论坛,以及与其有关的帖子,并返回陈建国的年龄和这些帖子的名字",
        "output": "match(a:forum where name = '陈建国')-[e]-(b:post) return a.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person陈国强有关的person,再返回和陈国强恋人的其他person,返回它们",
        "output": "match(a:person where a.name = '陈国强')-[e]-(b:person), (a:person)-[e2:lover]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前70个name是我不是药神或name不等于神探狄仁杰,且category不是文艺的film",
        "output": "match(a:film where (a.name = '我不是药神' or a.name <> '神探狄仁杰') and a.category <> '文艺') return a limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与贷款（loan）有关联的存款账户（account），并进一步找到与这些账户存在转账（transfer）关系的其他账户，以及与这些账户存在还款（repay）关系的贷款。",
        "output": "match(a:loan)-[e:deposit]->(b:account)-[e2:transfer]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回14个与孙国强和马雪都存在关系的公司节点",
        "output": "match(a where a.name='孙国强')-[e]->(b:company)<-[e2]-(c where c.name='马雪') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为喜欢,且满足条件f1为false的边",
        "output": "match(a)-[e:likes where e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出92个用户马强和韩红,共同的伙伴",
        "output": "match(a:user where a.name='马强')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='韩红') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被book relates数量大于117的book,记为relationCount,再查询这些book relates的author",
        "output": "match(a:book) let a.relationCount = AVG((a:book)<-[e:relates]-(b:book) => b.id) match(a where a.relationCount > 117)-[e2:relates]->(c:author) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找112个level不为空的university,根据id升序排列",
        "output": "match(a:university where (a.level is not null)) return a order by a.id asc limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与label为person的点有likes关系，并且与这些人有pay关系的另外58个人。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person) return c limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与评论有关系的电影院节点,且电影院节点的id乘52对44取余加8小于882,并返回这些电影院的大小除912的数量,以及电影院的id对63取余除98的求和值",
        "output": "match(a:comment)-[e]->(b:cinema where b.id * 52 % 44 + 8 < 882) return COUNT(b.size / 912), SUM(b.id % 63 / 98)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型是部门,边类型是拥有,且满足条件权重不为空,目标点id为空,或源点id小于106的边",
        "output": "match(a:department)-[e:has where ((e.weight is not null) and (e.targetId is null)) or e.srcId < 106]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与贷款相关的账户节点，按上次登录时间、价值和名称分组并返回。",
        "output": "match(a:loan)-[e:deposit]-(b:account) return b.lastLoginTime, b.value, b.name group by b.lastLoginTime, b.value, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是公司的点,返回58个",
        "output": "match(a:company) return a limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有起点标签为'post'，终点标签为'tag'，且标签为'has'的边。",
        "output": "match(a:post)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,id,price, 数据为(583,89,4486.90),(264,21,3592.70), 源点的value等于输入表value,查询与buyer李雪存在buyer_creates_orders关系,且与goods手机存在orders_contain_goods关系的orders节点，返回这些orders的value,price,name,及buyer李雪的age,及goods手机的sellerNumber",
        "output": "with p as (select * from (VALUES(583,89,4486.90),(264,21,3592.70)) as t(value,id,price))MATCH (a:buyer WHERE a.value = p.value AND (a.name = '李雪')) -[e:buyer_creates_orders ]->(b:orders) <-[e2:orders_contain_goods ]-(c:goods WHERE c.name = '手机') RETURN a.age, b.value, b.price, b.name, c.sellerNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight对447取余的值",
        "output": "a.weight % 447",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与处方ID为103的用户相关的用户，并找出这些用户的朋友。",
        "output": "match(a:prescription where id = '103')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person王国强的所有类型是家人的边,并根据f1降序排列,返回197个",
        "output": "match(a:person where a.name = '王国强')-[e:family]->(b) return b order by e.f1 desc limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以221,891,284,165,654作为请求点id, 源点的id等于输入表id,返回被patient陈建聪accept的prescription",
        "output": "with p as (select * from (VALUES(221),(891),(284),(165),(654)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) <-[e:patient_accept_prescription ]-(b:patient WHERE b.name = '陈建聪') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回合并请求PR-422的全部标签为朋友的边,并根据源点id降序排列,返回63个",
        "output": "match(a:pullRequest where a.name = 'PR-422')-[e:friend]->(b) return b order by e.srcId desc limit 63",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为赵伟和Amily的点共同创造的,标签等于评论的节点",
        "output": "match(a where a.name = '赵伟')-[e:creates]->(b:comment)<-[e2:creates]-(c where c.name = 'Amily') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找在深圳的包含的公司和被包含的国家，一并返回。",
        "output": "match(a where a.name = '深圳')-[e:contain]->(b:company),(a where a.name = '深圳')<-[e2:contain]-(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和读者杜红之间有喜欢关系的书",
        "output": "match(a:reader where a.name='杜红')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为PR-417的节点属于的事项或仓库或合并请求",
        "output": "match(a where a.name='PR-417')-[e:belong]->(b:issue | repository | pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出类型为'film'的节点，与名为'Comment_228'和'Comment_357'的点共同归属。",
        "output": "match(a where a.name = 'Comment_228')-[e:belong]->(b:film)<-[e2:belong]-(c where c.name = 'Comment_357') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和prescription Prescription_378有关的patient,称为X,再请帮我找出和这个X有关联的其他department,以及和X有关联的department",
        "output": "match(a:prescription where a.name = 'Prescription_378')-[e]-(b:patient), (b:patient)-[e2]-(c:department),(b:patient)-[e3]-(d:department) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于publisher的全部点,并根据name从大到小排列",
        "output": "match(a:publisher) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与'medicine 头孢'和'department 皮肤科'相关的department节点，并返回它们的weight和id。",
        "output": "match(a:medicine where a.name='头孢')-[e]->(b:department)<-[e2]-(c:department where c.name='皮肤科') return b.weight, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,height,gender, 数据为(86,183,'male'), 以属性height作为相等条件,返回与名为黄建国和李科的点共同认识的,类型为person的节点",
        "output": "with p as (select * from (VALUES(86,183,'male')) as t(age,height,gender))MATCH (a WHERE a.height = p.height AND (a.name = '黄建国')) -[e:knows ]->(b:person) <-[e2:knows ]-(c WHERE c.name = '李科') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家徐强取消的订单,以及创造这些订单的买家, 令订单的id等于买家的年龄除40除83,令买家的年龄等于买家的名字, 返回买家(a)的薪资,订单(b)的价值,买家(c)的年龄",
        "output": "match(a:buyer where name = '徐强')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) let b.id = c.age / 40 / 83,let c.age = c.name return a.salary,b.value,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为76的person有关的person的伙伴, 再帮我查询和person有关系的相关者",
        "output": "match(a:person where id = 76)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为数据结构的点属于的部门",
        "output": "match(a where a.name='数据结构')-[e:belong]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找创造处方Prescription_412的医生,和这些医生属于的部门",
        "output": "match(a:prescription where name = 'Prescription_412')<-[e:creates]-(b:doctor)-[e2:belong]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person张强buy的software,以及commits这些software的person, 令person的gender等于person的age,令person的gender等于person的age对26取余,令person的stars等于software的value对value取余, 返回person(a)的salary,software(b)的id,person(c)的gender",
        "output": "match(a:person where name = '张强')-[e:buy]->(b:software)<-[e2:commits]-(c:person) let c.gender = c.age,let a.gender = a.age % 26,let a.stars = b.value % b.value return a.salary,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询清华大学的点属于的城市,然后查询清华大学被包含的城市,一起返回",
        "output": "match(a where a.name = '清华大学')-[e:belong]->(b:city),(a where a.name = '清华大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有公司以规格,人数,名字分组的规格, 根据规格从小到大排序",
        "output": "match(a:company) return a.scale group by a.scale, a.peopleNumber, a.name order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出周思思和王建聪共同发布的点",
        "output": "match(a:user where a.name='周思思')-[e:publish]->(b)<-[e2:publish]-(c:user where c.name='王建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边类型为likes, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为loan的点,返回10个",
        "output": "match(a:loan) return a limit 10",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前151个name不是李红且id大于189的teacher",
        "output": "match(a:teacher where a.name <> '李红' and a.id > 189) return a limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为美团的节点申请的贷款",
        "output": "match(a where a.name='美团')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出标签为买家的点,并根据薪资从大到小排列",
        "output": "match(a:buyer) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于prescription或medicine或doctor的点",
        "output": "match(a:prescription | medicine | doctor) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person徐雪和张科都存在lover关系的点",
        "output": "match(a:person where a.name='徐雪')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='张科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出名称为'大学英语'、类型为'course'的课程，并返回它们的value?",
        "output": "match(a:course where a.name = '大学英语') return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,name,salary, 数据为('famale','王若涵',7808),('male','马思思',6879),('male','Jack',6672)的子查询作为输入表, 以属性salary作为相等条件,返回94个与周雪和赵轩都存在关系的person节点",
        "output": "with p as (select * from (VALUES('famale','王若涵',7808),('male','马思思',6879),('male','Jack',6672)) as t(gender,name,salary))MATCH (a WHERE a.salary = p.salary AND (a.name = '周雪')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '赵轩') RETURN b LIMIT 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为李月的点发布的全部帖子,并对这些帖子的字数进行求和",
        "output": "match(a where a.name='李月')-[e:publish]->(b:post) return SUM(b.wordCount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,height,age分组,计算salary加salary的值",
        "output": "return a.salary + a.salary group by a.name, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有用户之间的关系，或关系之间的关系。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(62,194,'张月'),(56,174,'李伟')作为请求表数据,属性分别为age,height,name, 源点的age等于输入表age,查找和公司蚂蚁集团有关的贷款,称为X,再查找和这个X有关联的其他person,以及和X有关联的账号",
        "output": "with p as (select * from (VALUES(62,194,'张月'),(56,174,'李伟')) as t(age,height,name))MATCH (a:company WHERE a.age = p.age AND (a.name = '蚂蚁集团')) -[e ]-(b:loan) , (b:loan) -[e2 ]-(c:person) , (b:loan) -[e3 ]-(d:account) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表855,355,252, 以属性id作为相等条件,帮我查询person徐红的标签等于家人的边,并根据权重从大到小排列,返回186个",
        "output": "with p as (select * from (VALUES(855),(355),(252)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '徐红')) -[e:person_family_person ]->(b) RETURN b ORDER BY e.weight DESC LIMIT 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person杜伟喜欢的person节点支付的person",
        "output": "match(a:person where a.name = '杜伟')-[e:likes]->(b:person)-[e2:pay]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出提交软件SprintBoot的person,和这些person提交的软件",
        "output": "match(a:software where name = 'SprintBoot')<-[e:commits]-(b:person)-[e2:commits]->(c:software) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照'label=book'的条件筛选点，并按照'id'属性从小到大排序。",
        "output": "match(a:book) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为阿里的公司,以及与其有关的公司,并返回阿里的规格和这些公司的价值",
        "output": "match(a:company where name = '阿里')-[e]-(b:company) return a.scale, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于person的点,并根据年龄从小到大排列",
        "output": "match(a:person) return a order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询马建聪的合作伙伴的合作伙伴。",
        "output": "match(a:user where a.name='马建聪')-[e:partner]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与电影院有关系的电影院节点,且电影院节点的id小于16,并返回这些电影院的id减97的最小值,以及电影院的大小除大小的个数",
        "output": "match(a:cinema)-[e]->(b:cinema where b.id < 16) return MIN(b.id - 97), COUNT(b.size / b.size)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回pay person赵雪的person,和这些person knows的person",
        "output": "match(a:person where name = '赵雪')<-[e:pay]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型为用户,边类型为喜欢,且满足条件目标点id小于162或时间戳不等于1996年06月01日的边",
        "output": "match(a:user)-[e:likes where e.targetId < 162 or e.timeStamp <> '1996-06-01']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与贷款defaultName有存款关系的账户，以及与陈若涵有拥有关系的账户。",
        "output": "match(a:loan where a.name = 'defaultName')-[e:deposit]->(b:account),(c:person where c.name = '陈若涵')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点满足条件id小于64或身高在168到189之间或名字不等于吴思琪,目标点满足条件名字不是Prescription_408或名字不等于Prescription_319,且类型为接受的边",
        "output": "match(a where a.id < 64 or (a.height BETWEEN 168 AND 189) or a.name <> '吴思琪')-[e:accept]->(b where b.name <> 'Prescription_408' or b.name <> 'Prescription_319') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与公司谷歌有创造关系的3度以内的环",
        "output": "match(a:company where name = '谷歌')-[e:creates]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary乘4687的值",
        "output": "a.salary * 4687",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为谷歌的,权重大于等于686的伙伴,返回这些伙伴的id,和边的源点id,f1,目标点id",
        "output": "match(a where a.name='谷歌')-[e:partner]->(b where b.weight >= 686) return b.id,e.srcId, e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出同时包含深圳和武汉的点",
        "output": "match(a:city where a.name='深圳')-[e:contain]->(b)<-[e2:contain]-(c:city where c.name='武汉') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表792, 以属性id作为相等条件,查询与名为杜国强和孙轩的点共同观看的,标签为电影的节点",
        "output": "with p as (select * from (VALUES(792)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '杜国强')) -[e:person_watch_film ]->(b:film) <-[e2:person_watch_film ]-(c WHERE c.name = '孙轩') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部id为34的person关联的film,和以watch关系关联了这些film的其他person",
        "output": "match(a:person where a.id = 34)-[e]-(b:film)<-[e2:watch]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵强申请的贷款节点存款的账号",
        "output": "match(a:person where a.name = '赵强')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前67个类型为belong的边",
        "output": "match(a)-[e:belong]->(b) return e limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为10的prescription有关的user的partner, 再查询和user有关系的relation",
        "output": "match(a:prescription where id = '10')-[e]-(b:user)-[e2:partner]->(c), (b:user)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从帖子Post_267出发,经过类型为拥有的边,走3度或4度到达的标签点",
        "output": "match(a:post where a.name='Post_267')-[e:has]->{3,4}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为美团的节点创造的person或公司或软件",
        "output": "match(a where a.name='美团')-[e:creates]->(b:person | company | software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person李科有属于关系的3度的环",
        "output": "match(a:person where name = '李科')-[e:belong]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为线性代数的节点属于的学生或教师或部门",
        "output": "match(a where a.name='线性代数')-[e:belong]->(b:student | teacher | department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询前174个类型是company_apply_loan的边",
        "output": "match(a)-[e:company_apply_loan]->(b) return e limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询168个与Geaflow123和Light都存在关系的账号或贷款节点",
        "output": "match(a where a.name='Geaflow123')-[e]->(b:account | loan)<-[e2]-(c where c.name='Light') return b limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点类型为编辑、边类型为发布的边，返回这些边的权重乘以111.39加上源点ID乘以102.58再乘以169.78的结果，以及目标点ID乘以28的和。",
        "output": "match(a:publisher)-[e:publish]->(b) return (e.weight * 111.39 * e.srcId + 102.58) * 169.78, SUM(e.targetId * 28)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前136个类型是has的边",
        "output": "match(a)-[e:has]->(b) return e limit 136",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为125的点的身高,名字",
        "output": "match(a where a.id = 125) return a.height, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为俄罗斯和日本的,标签等于国家的点公共的朋友节点的名单",
        "output": "match(a:country where a.name='俄罗斯')-[e:friend]->(b)<-[e2:friend]-(c:country where c.name='日本') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有神探狄仁杰的点和被发布的电影院",
        "output": "match(a where a.name = '神探狄仁杰')-[e:has]->(b:tag),(a where a.name = '神探狄仁杰')<-[e2:releases]-(c:cinema) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,gender,salary, 数据为(187,'famale',4508),(176,'famale',7718),(179,'male',6069),(151,'famale',9721), 源点的gender等于输入表gender,返回类型是seller,名为周建聪的点,返回这些点的salary,gender,height",
        "output": "with p as (select * from (VALUES(187,'famale',4508),(176,'famale',7718),(179,'male',6069),(151,'famale',9721)) as t(height,gender,salary))MATCH (a:seller WHERE a.gender = p.gender AND (a.name = '周建聪')) RETURN a.salary, a.gender, a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为孙思思的person,以及与其有关的person,并返回孙思思的薪资和这些person的薪资",
        "output": "match(a:person where name = '孙思思')-[e]-(b:person) return a.salary, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person张轩有关的film,再返回和张轩watch的其他film,返回它们",
        "output": "match(a:person where a.name = '张轩')-[e]-(b:film), (a:person)-[e2:watch]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为周月的author有relation关系,或有relation的relation关系的book",
        "output": "match(a:author where n.name=周月)-[e:relation]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person徐建国有关的person,再找出和徐建国支付的其他person,返回它们",
        "output": "match(a:person where a.name = '徐建国')-[e]-(b:person), (a:person)-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有country的id乘71的最大值",
        "output": "match(a:country) return MAX(a.id * 71)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person赵伟之间有喜欢关系的评论",
        "output": "match(a:person where a.name='赵伟')-[e:likes]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时被名为Order_114和Order_370的点所包含的，且标签为商品的节点。",
        "output": "match(a where a.name = 'Order_114')-[e:contain]->(b:goods)<-[e2:contain]-(c where c.name = 'Order_370') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与病人吴思琪有关系的处方, 返回和这些处方有关联的病人的,salary的最大值加4228的值",
        "output": "match(a:patient where a.name= '吴思琪')-[e]-(b:prescription)-[e2]-(c:patient) return MAX(c.salary) + 4228",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和大学有关联的公司节点,并根据其人数分组,返回人数,以及价值减价值的和",
        "output": "match(a:university)-[e:cooperate]-(b:company) return b.peopleNumber, SUM(b.value - b.value) group by b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找142个price等于277且weight为空，或id小于等于89的药品，并按category从小到大排序。",
        "output": "match(a:medicine where (a.price = 277 and (a.weight is null)) or a.id <= 89) return a order by a.category asc limit 142",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是发布,以及源点id不为空或源点id小于52或源点id不为空的边",
        "output": "match(a)-[e:publish where (e.srcId is not null) or e.srcId < 52 or (e.srcId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询软件以价值,是否开源,星数分组的星数, 根据星数从小到大排序",
        "output": "match(a:software) return a.stars group by a.value, a.openSource, a.stars order by a.stars asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以842,155,15,497,548作为请求点id, 源点的id等于输入表id,请帮我查找id不为空且地址等于南区的部门拥有的医生的名称,以及这些医生 创造的处方的名称",
        "output": "with p as (select * from (VALUES(842),(155),(15),(497),(548)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.id IS NOT NULL AND a.address = '南区')) -[e:department_has_doctor ]->(b:doctor) -[e2:doctor_creates_prescription ]->(c:prescription) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与公司阿里有关系的软件的是否开源",
        "output": "match(a:company where a.name='阿里')-[e]-(b:software) return b.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,gender, 数据为(174,90,'famale'),(195,9,'famale'),(174,89,'male')的子查询作为输入表, 源点的height等于输入表height,找出person马国强的relation的friend的partner",
        "output": "with p as (select * from (VALUES(174,90,'famale'),(195,9,'famale'),(174,89,'male')) as t(height,id,gender))MATCH (a:person WHERE a.height = p.height AND (a.name = '马国强')) -[e:relation ]->(b) -[e2:friend ]->(c) -[e3:partner ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找2个createTime不等于2031年12月04日的issue,根据name降序排列",
        "output": "match(a:issue where a.createTime <> '2031-12-04') return a order by a.name desc limit 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "孙思琪和徐科是112个买家的共同合作伙伴。",
        "output": "match(a:buyer where a.name='孙思琪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='徐科') return b limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,weight, 数据为('外科',49,797),('皮肤科',59,609),('呼吸科',65,831), 源点的id等于输入表id,返回所有id为105的部门关联的处方,和以创造关系关联了这些处方的其他医生",
        "output": "with p as (select * from (VALUES('外科',49,797),('皮肤科',59,609),('呼吸科',65,831)) as t(name,id,weight))MATCH (a:department WHERE a.id = p.id AND (a.id = '105')) -[e ]-(b:prescription) <-[e2:doctor_creates_prescription ]-(c:doctor) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是课程的点,返回160个",
        "output": "match(a:course) return a limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person关联的person, 令person(b)的id的值等于认识person的person的薪资的平均值, 再查找person认识的person",
        "output": "match(a:person)-[e:relates]->(b:person) let b.id = AVG((b:person)<-[e2:knows]-(c:person) => c.salary) match(b:person)-[e3:knows]->(d:person) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person李国强 关联的person,返回person 关联的person的id减id的数量",
        "output": "match(a:person where name = '李国强')-[e:relates]->(b:person)-[e2:relates]->(c:person) return COUNT(c.id - c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "'请把认识的计算机网络书籍的名字告诉我。'",
        "output": "match(a:book where name = '计算机网络')-[e:knows]->(b:book)-[e2:knows]->(c:book) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与卖家徐梅有关系的卖家的性别",
        "output": "match(a:seller where a.name='徐梅')-[e]-(b:seller) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关系的film节点,且film节点的name是西虹市首富,并返回这些film的id对60取余的最小值,以及film的id减70的值",
        "output": "match(a:person)-[e]->(b:film where b.name = '西虹市首富') return MIN(b.id % 60), b.id - 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与reader马建聪有关,且与book白夜行有关系的book节点",
        "output": "match(a:reader where a.name='马建聪')-[e:likes]-(b:book)-[e2:refers]-(c:book where c.name='白夜行') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,等级分组,计算价值除价值的求和值",
        "output": "return SUM(a.value / a.value) group by a.name, a.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和仓库点有拥有关系的合并请求节点,且边满足条件f1的个数不是741,目标合并请求节点创建时间为2025年11月10日",
        "output": "match(a:repository)-[e:has where COUNT(e.f1) <> 741]->(b:pullRequest where b.createTime = '2025-11-10') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 张雪属于公司节点员工列表中的个人。",
        "output": "match(a:person where a.name = '张雪')-[e:belong]->(b:company)-[e2:employee]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为51的点的name,scale,peopleNumber",
        "output": "match(a where a.id = '51') return a.name, a.scale, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司腾讯雇佣的person节点属于的公司",
        "output": "match(a:company where a.name = '腾讯')-[e:employee]->(b:person)-[e2:belong]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出评论Comment_292 属于的电影,返回电影 拥有的标签的id除30的最小值",
        "output": "match(a:comment where name = 'Comment_292')-[e:belong]->(b:film)-[e2:has]->(c:tag) return MIN(c.id / 30)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有和person张伟有2到4度关系的软件",
        "output": "match(a:person where a.name='张伟')-[e]->{2,4}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值分组,计算价格除价格的值",
        "output": "return a.price / a.price group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,gender, 数据为(15,99,'male')的子查询作为输入表, 以属性age作为相等条件,请帮我找出person赵思琪watch的film节点has的tag",
        "output": "with p as (select * from (VALUES(15,99,'male')) as t(age,id,gender))MATCH (a:person WHERE a.age = p.age AND (a.name = '赵思琪')) -[e:person_watch_film ]->(b:film) -[e2:film_has_tag ]->(c:tag) RETURN c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵轩 关联的person,返回person 关联的person的薪资减3591的值",
        "output": "match(a:person where name = '赵轩')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c.salary - 3591",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出身高小于9662且名字不是郑思思,或薪资等于6625的节点",
        "output": "match(a where (a.height < 9662 and a.name <> '郑思思') or a.salary = 6625) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和作家有关联的作家节点,并根据其年龄,性别分组,返回年龄,性别,以及age的最大值对5取余的值",
        "output": "match(a:author)-[e:knows]-(b:author) return b.age, b.gender, MAX(b.age) % 5 group by b.age, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与好视影院和人人影城有关的评论节点，共97个。",
        "output": "match(a where a.name='好视影院')-[e]->(b:comment)<-[e2]-(c where c.name='人人影城') return b limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回软件Geaflow的朋友,的f0的平均值加943的值",
        "output": "match(a:software where a.name= 'Geaflow')-[e:friend]->(b) return AVG(e.f0) + 943",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和country法国之间有contain关系的city",
        "output": "match(a:country where a.name='法国')-[e:contain]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为32的person likes的person, 并将person有关的person的gender的最小值赋值给person(b)的id, 接着查询person(b)的id小于32的person knows的person",
        "output": "match(a:person where a.id = 32)-[e:likes]->(b:person) let b.id = MIN((b:person)-[e2]-(c:person) => c.gender) match(b:person where b.id < 32)-[e3:knows]->(d:person) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以58,416,242,291,649作为请求点id, 以属性id作为相等条件,找出所有源点标签为医生,边标签为doctor_belong_department,并且满足条件目标点id大于148,f0为空的边",
        "output": "with p as (select * from (VALUES(58),(416),(242),(291),(649)) as t(id)) MATCH (a:doctor WHERE a.id = p.id) -[e:doctor_belong_department WHERE e.targetId > 148 AND e.f0 IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与买家陈月有取消关系的订单，再找出与陈月有创建关系的订单。",
        "output": "match(a:buyer where a.name = '陈月')-[e:cancel]->(b:orders),(a:buyer where a.name = '陈月')<-[e2:creates]-(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和名为黄宏的person有伙伴关系,或有伙伴的伙伴关系的公司",
        "output": "match(a:person where n.name=黄宏)-[e:partner]->{1,2}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算height乘164的值",
        "output": "return a.height * 164 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点id为空,身高小于等于190,目标点年龄等于28,且类型是喜欢的边",
        "output": "match(a where (a.id is null) and a.height <= 190)-[e:likes]->(b where b.age = 28) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否帮我查一下名叫Bilibili的公司？",
        "output": "match(a:company where a.name = 'Bilibili') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前86个满足条件name不是艺术学院,size不为空的department",
        "output": "match(a:department where a.name <> '艺术学院' and (a.size is not null)) return a limit 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为黄思思的点的,name等于Order_163或price大于87的relation,返回这些relation的id,和边的timeStamp,f1",
        "output": "match(a where a.name='黄思思')-[e:relation]->(b where b.name = 'Order_163' or b.price > 87) return b.id,e.timeStamp, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person购买的软件, 令软件(b)的id的值等于使用软件的软件的名字的平均值, 再查找软件使用的软件",
        "output": "match(a:person)-[e:buy]->(b:software) let b.id = AVG((b:software)<-[e2:uses]-(c:software) => c.name) match(b:software)-[e3:uses]->(d:software) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person赵国强存在pay关系，并且与person杜宏存在likes关系的person节点。返回这些person的id、age以及person赵国强和person杜宏的相应信息。",
        "output": "match(a:person where a.name='赵国强')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='杜宏') return a.name,b.id, b.age,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和买家点有咨询关系的卖家节点,且边满足条件f1不是true,目标卖家节点满足条件名字不是吴思琪",
        "output": "match(a:buyer)-[e:consult where e.f1 <> true]->(b:seller where b.name <> '吴思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person周宏喜欢的person,和周宏支付的person",
        "output": "match(a:person)<-[e:likes]-(b:person where name = '周宏')-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为计算机学院的university或student或teacher,以及与其有关的university,并返回计算机学院的id和这些university的value",
        "output": "match(a:university | student | teacher where name = '计算机学院')-[e]-(b:university) return a.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和课程程序设计之间有属于关系的部门",
        "output": "match(a:course where a.name='程序设计')-[e:belong]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和用户周科有关的用户,再查找和周科喜欢的其他帖子,返回它们",
        "output": "match(a:user where a.name = '周科')-[e]-(b:user), (a:user)-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回电影标签下，绿巨人和少年足球两个节点的共同伙伴列表。",
        "output": "match(a:film where a.name='绿巨人')-[e:partner]->(b)<-[e2:partner]-(c:film where c.name='少年足球') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为21的点的name",
        "output": "match(a where a.id = 21) return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与合并请求有关系的事项节点,且事项节点的id等于51,并返回这些事项的id对35取余的值,以及事项的id减44的和",
        "output": "match(a:pullRequest)-[e]->(b:issue where b.id = 51) return b.id % 35, SUM(b.id - 44)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出61个名字不是PR-381或变更文件数在314到780之间的合并请求,根据变更文件数从大到小排列",
        "output": "match(a:pullRequest where a.name <> 'PR-381' or (a.changeFileNumber BETWEEN 314 AND 780)) return a order by a.changeFileNumber desc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家的三角的环,边标签等于创造, 并返回这些点的id",
        "output": "match(a:buyer)-[e:creates]->(b)-[e2:creates]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为22的仓库拥有的事项, 并将事项有关的用户的性别的平均值赋值给事项的创建时间, 接着查询事项的创建时间小于22的事项属于的仓库",
        "output": "match(a:repository where a.id = 22)-[e:has]->(b:issue) let b.createTime = AVG((b:issue)-[e2]-(c:user) => c.gender) match(b:issue where b.createTime < 22)-[e3:belong]->(d:repository) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表186,997,793,979, 源点的id等于输入表id,查找名为悬疑的标签",
        "output": "with p as (select * from (VALUES(186),(997),(793),(979)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.name = '悬疑')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id的最大值减28的最小值",
        "output": "return MIN(MAX(a.id) - 28) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表915,736, 源点的id等于输入表id,返回和person Jimmy有关的person,再返回和 Jimmy person_knows_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(915),(736)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = 'Jimmy')) -[e ]-(b:person) , (a:person) -[e2:person_knows_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和账号TheShy有关的公司,称为X,再帮我查询和这个X有关联的其他账号,以及和X有关联的公司",
        "output": "match(a:account where a.name = 'TheShy')-[e]-(b:company), (b:company)-[e2]-(c:account),(b:company)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person的三角的环,边label为colleague, 并返回这些点的id",
        "output": "match(a:person)-[e:colleague]->(b)-[e2:colleague]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person吴梅有创造关系的1度的环",
        "output": "match(a:person where name = '吴梅')-[e:creates]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出161个名为韩若涵的点pay的类型为person的节点,且其salary等于2663且age不等于35",
        "output": "match(a where a.name='韩若涵')-[e:pay]->(b:person where b.salary = 2663 and b.age <> 35) return b limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person孙轩之间有家人关系的person",
        "output": "match(a:person where a.name='孙轩')-[e:family]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为孙轩的电影或person,以及与其有关的评论,并返回孙轩的身高和这些评论的名字",
        "output": "match(a:film | person where name = '孙轩')-[e]-(b:comment) return a.height, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找韩国城市被其他国家包含的数量",
        "output": "match(a:country where a.name='韩国')-[e:contain]->(b:city)<-[e2:contain]-(c:country) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为深圳和伦敦的点共同属于的,标签等于国家的节点",
        "output": "match(a where a.name = '深圳')-[e:belong]->(b:country)<-[e2:belong]-(c where c.name = '伦敦') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为14的点的年龄,薪资,名字",
        "output": "match(a where a.id = 14) return a.age, a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有由医生创建，指向处方的边。",
        "output": "match(a:doctor)-[e:creates]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与department皮肤科和prescription Prescription_274都存在关系的patient节点，返回它们的id、age和height。",
        "output": "match(a:department where a.name='皮肤科')-[e]->(b:patient)<-[e2]-(c:prescription where c.name='Prescription_274') return b.id, b.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是恋人,以及满足条件源点id小于181的边",
        "output": "match(a)-[e:lover where e.srcId < 181]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为24的person commits的software, 并将software有关的person的salary的最大值赋值给software的stars, 接着查询software的stars小于24的software uses的software",
        "output": "match(a:person where a.id = 24)-[e:commits]->(b:software) let b.stars = MAX((b:software)-[e2]-(c:person) => c.salary) match(b:software where b.stars < 24)-[e3:uses]->(d:software) return b.stars, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前94个label为创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出与university北京大学存在university_has_department关系,且与student赵月存在department_has_student关系的department节点，返回这些department的value,name,及university北京大学的level,及student赵月的age",
        "output": "match(a:university where a.name='北京大学')-[e:university_has_department]->(b:department)<-[e2:department_has_student]-(c:student where c.name='赵月') return a.level,b.value, b.name,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有标记为人的人，并按照年龄从大到小排序。",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从公司美团出发,经过标签为属于的边,走3跳或4跳到达的城市点",
        "output": "match(a:company where a.name='美团')-[e:belong]->{3,4}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为复仇者联盟和变形金刚的,标签为film的点公共的friend节点的名单",
        "output": "match(a:film where a.name='复仇者联盟')-[e:friend]->(b)<-[e2:friend]-(c:film where c.name='变形金刚') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与黄若涵有选择关系且与赵科有教学关系的课程，并将它们全部返回。",
        "output": "match(a:student where a.name = '黄若涵')-[e:selects]->(b:course),(c:teacher where c.name = '赵科')-[e2:teach]->(d:course) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有patient以id,height分组的name, 根据name从小到大排序",
        "output": "match(a:patient) return a.name group by a.id, a.height order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person马宏有朋友关系的person,再给出以朋友关系关联了马宏的person",
        "output": "match(a:person where a.name = '马宏')-[e:friend]->(b:person),(a:person where a.name = '马宏')<-[e2:friend]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以630,945,145作为请求点id, 以属性id作为相等条件,给出和forum知网有forum_contain_post关系的post,以及和post Post_358有post_has_tag关系的tag,将它们都返回",
        "output": "with p as (select * from (VALUES(630),(945),(145)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '知网')) -[e:forum_contain_post ]->(b:post) , (c:post WHERE c.name = 'Post_358') -[e2:post_has_tag ]->(d:tag) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户以名字,id分组的id, 根据id降序排序",
        "output": "match(a:user) return a.id group by a.name, a.id order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询141个和标签等于作家的点有撰写关系的书,并且和这些书有引用关系的书",
        "output": "match(a:author)-[e:write]->(b:book)-[e2:refers]->(c:book) return c limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点标签等于forum,目标点标签等于user,标签等于user的边",
        "output": "match(a:forum)-[e:user]->(b:user) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表329, 以属性id作为相等条件,返回127个和标签为国家的点有country_contain_city关系的城市,并且和这些城市有city_contain_company关系的公司",
        "output": "with p as (select * from (VALUES(329)) as t(id)) MATCH (a:country WHERE a.id = p.id) -[e:country_contain_city ]->(b:city) -[e2:city_contain_company ]->(c:company) RETURN c LIMIT 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与city巴黎有关系的company, 返回和这些company有关联的city的,area对area取余的个数",
        "output": "match(a:city where a.name= '巴黎')-[e]-(b:company)-[e2]-(c:city) return COUNT(c.area % c.area)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与马红有关、且与Light账号相关的账号节点。",
        "output": "match(a:person where a.name='马红')-[e:own]-(b:account)-[e2:transfer]-(c:account where c.name='Light') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和标签古代有关系的帖子或论坛或用户,返回这些点的性别",
        "output": "match(a:tag where a.name='古代')-[e]-(b:post | forum | user) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person likes数量大于199的person,记为relationCount,再查询这些person likes的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:likes]-(b:person) => b.id) match(a where a.relationCount > 199)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点类型为reader,边类型为likes,并且满足条件f1不等于true或f0大于615,且srcId不等于40的边",
        "output": "match(a:reader)-[e:likes where (e.f1 <> true or e.f0 > 615) and e.srcId <> 40]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有id为38的book关联的book,和以write关系关联了这些book的其他author",
        "output": "match(a:book where a.id = 38)-[e]-(b:book)<-[e2:write]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出person张轩knows的person节点buy的software",
        "output": "match(a:person where a.name = '张轩')-[e:person_knows_person]->(b:person)-[e2:person_buy_software]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有源点满足条件权重小于329或名字是Prescription_408,且名字是Prescription_372,目标点满足条件权重在282到540之间且名字不等于散利痛且价格为空,且标签为prescription_contain_medicine的边",
        "output": "match(a where (a.weight < 329 or a.name = 'Prescription_408') and a.name = 'Prescription_372')-[e:prescription_contain_medicine]->(b where (b.weight BETWEEN 282 AND 540) and b.name <> '散利痛' and (b.price is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点label为帖子,边label为拥有,以及f1不是true,f0小于等于909,或f1大于等于156的边",
        "output": "match(a:post)-[e:has where (e.f1 <> true and e.f0 <= 909) or e.f1 >= 156]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于lover,并且targetId在24到44之间的边",
        "output": "match(a)-[e:lover where (e.targetId BETWEEN 24 AND 44)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询132个名为孙思琪的点认识的label为person的节点,且节点id在57到84之间",
        "output": "match(a where a.name='孙思琪')-[e:knows]->(b:person where (b.id BETWEEN 57 AND 84)) return b limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询关联person孙伟关联的person,的person",
        "output": "match(a:person where name = '孙伟')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部源点id不为空或性别为famale,且id不为空,目标点薪资小于等于3514且名字小于165,且类型是喜欢的边",
        "output": "match(a where ((a.id is not null) or a.gender = 'famale') and (a.id is not null))-[e:likes]->(b where b.salary <= 3514 and b.name < 165) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与loan loan_65有关系的person的salary",
        "output": "match(a:loan where a.name='loan_65')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被买家王思思咨询的卖家,和王思思查看的商品",
        "output": "match(a:seller)<-[e:consult]-(b:buyer where name = '王思思')-[e2:look]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出city伦敦的类型是partner的边,并根据srcId从大到小排列,返回156个",
        "output": "match(a:city where a.name = '伦敦')-[e:partner]->(b) return b order by e.srcId desc limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为华为和滴滴的点共同creates的,类型为software的节点",
        "output": "match(a where a.name = '华为')-[e:creates]->(b:software)<-[e2:creates]-(c where c.name = '滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从买家周伟出发，通过'创造'标签的边，走到第1或3步的订单点。",
        "output": "match(a:buyer where a.name='周伟')-[e:creates]->{1,3}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找5个与'buyer'标签相关的订单，并找出与这些订单包含关系的商品。",
        "output": "match(a:buyer)-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找城市的朋友,或其朋友的朋友",
        "output": "match(a:city)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和label为用户的点有喜欢关系的仓库,并且和这些仓库有拥有关系的用户,并且和这些用户有创造关系的事项",
        "output": "match(a:user)-[e:likes]->(b:repository)-[e2:has]->(c:user)-[e3:creates]->(d:issue) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有源点为患者，边类型为接受的边，并计算它们的权重平均值，然后返回这些权重值的最小乘积，再除以195.99。",
        "output": "match(a:patient)-[e:accept]->(b) return AVG(e.weight) / 195.99, MIN(e.weight * e.weight * 137)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出部门放射科 拥有的医生,返回医生 诊断的病人的id除id乘58加98的值",
        "output": "match(a:department where name = '放射科')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return c.id / c.id * 58 + 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点薪资大于8328,边类型为属于,且满足条件f1不等于false,目标点id是101,源点id为空的边,返回这些边的weight的平均值对117.89取余的值",
        "output": "match(a where a.salary > 8328)-[e:belong where e.f1 <> false and e.targetId = 101 and (e.srcId is null)]->(b) return AVG(e.weight) % 117.89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Bilibili存在雇佣关系的person,person与软件存在购买关系的点,返回这些点的语言",
        "output": "match(a where a.name = 'Bilibili')-[e:employee]->(b:person)-[e2:buy]->(c:software) return c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和person杜强有1跳或2跳关系的person",
        "output": "match(a:person where a.name='杜强')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和teacher吴思思有teach关系的course,再查询以teach关系关联了吴思思的course",
        "output": "match(a:teacher where a.name = '吴思思')-[e:teach]->(b:course),(a:teacher where a.name = '吴思思')<-[e2:teach]-(c:course)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询diagnose patient何梅的doctor,和这些doctor belong的department",
        "output": "match(a:patient where name = '何梅')<-[e:diagnose]-(b:doctor)-[e2:belong]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询40个与形势与政策和程序设计都存在关系的教师或学生节点",
        "output": "match(a where a.name='形势与政策')-[e]->(b:teacher | student)<-[e2]-(c where c.name='程序设计') return b limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与用户吴宏相关的人员，以及他喜欢的其他帖子，并将它们返回。",
        "output": "match(a:user where a.name = '吴宏')-[e]-(b:person), (a:user)-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些满足以下条件的电影院：名字不是'好视影院'，大小不为空，或者id小于等于89。然后按照id从大到小进行排序。",
        "output": "match(a:cinema where (a.name <> '好视影院' and (a.size is not null)) or a.id <= 89) return a order by a.id desc limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以apply关系关联了loan loan_14的person",
        "output": "match(a:loan where a.name='loan_14')<-[e:apply]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary的最小值对薪资取余的最大值",
        "output": "return MAX(MIN(a.salary) % a.salary) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为陈雪的patient有relation关系,或有relation的relation关系的prescription",
        "output": "match(a:patient where n.name=陈雪)-[e:relation]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和公司点有申请关系的贷款节点,且边满足条件权重在177.11到179.90之间,目标贷款节点满足条件权重小于等于260",
        "output": "match(a:company)-[e:apply where (e.weight BETWEEN 177.11 AND 179.90)]->(b:loan where b.weight <= 260) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表498,264,15,29,579, 源点的id等于输入表id,查询名为广州和深圳的,类型是city的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES(498),(264),(15),(29),(579)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '广州')) -[e:friend ]->(b) <-[e2:friend ]-(c:city WHERE c.name = '深圳') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为周思琪的person,以及与其有关的person,并返回周思琪的id和这些person的性别",
        "output": "match(a:person where name = '周思琪')-[e]-(b:person) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以1作为输入,返回id, value",
        "output": "Call PERSONALRANK(1) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型为药品,名为医疗酒精的点,返回这些点的名字,id,类别",
        "output": "match(a:medicine where a.name = '医疗酒精') return a.name, a.id, a.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表394, 源点的id等于输入表id,找出所有部门以名字,id分组的id, 根据id从小到大排序",
        "output": "with p as (select * from (VALUES(394)) as t(id)) MATCH (a:department WHERE a.id = p.id) RETURN a.id GROUP BY a.name, a.id ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为郑若涵的点has的goods,并对这些goods的category进行求和",
        "output": "match(a where a.name='郑若涵')-[e:has]->(b:goods) return SUM(b.category)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表394,164,939, 以属性id作为相等条件,请帮我查找帖子的1跳的环",
        "output": "with p as (select * from (VALUES(394),(164),(939)) as t(id)) MATCH (a:post WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为郑科的点publish的post",
        "output": "match(a where a.name='郑科')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为提交,以及f0不等于731或f1等于925或f0大于698的边",
        "output": "match(a)-[e:commits where e.f0 <> 731 or e.f1 = 925 or e.f0 > 698]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找撰写作家Jack撰写的书,的作家",
        "output": "match(a:author where name = 'Jack')-[e:write]->(b:book)<-[e2:write]-(c:author) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部少年闰土的点关联的书,然后返回少年闰土被发布的编辑,一起返回",
        "output": "match(a where a.name = '少年闰土')-[e:relates]->(b:book),(a where a.name = '少年闰土')<-[e2:publish]-(c:publisher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与名为韩思思的学生有相关者关系或相关者相关者关系的课程。",
        "output": "match(a:student where n.name=韩思思)-[e:relation]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person认识数量大于120的person,记为relationCount,再查询这些person关联的person",
        "output": "match(a:person) let a.relationCount = MAX((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 120)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和帖子Post_155有post_has_tag关系的标签,再返回以post_has_tag关系关联了Post_155的标签",
        "output": "match(a:post where a.name = 'Post_155')-[e:post_has_tag]->(b:tag),(a:post where a.name = 'Post_155')<-[e2:post_has_tag]-(c:tag)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和country韩国之间有contain关系的city",
        "output": "match(a:country where a.name='韩国')-[e:contain]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出既是周思琪朋友又是李科朋友的医生名单。",
        "output": "match(a:doctor where a.name='周思琪')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='李科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别分组,计算年龄除49的个数",
        "output": "return COUNT(a.age / 49) group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找类型为'部门'的实体，其具有'拥有'关系的医生，这些医生又创建了'处方'，并且这些'处方'包含'药品'。",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription)-[e3:contain]->(d:medicine) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照电影院ID从大到小排序，同时提供电影院名称和座位数量。",
        "output": "match(a:cinema) return a.id group by a.id, a.name, a.size order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部类型为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,height, 数据为(99,9669,173),(41,6576,161),(21,6821,197), 源点的height等于输入表height,查询和person韩思思有person_knows_person关系的person,以及和person李梅有person_likes_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(99,9669,173),(41,6576,161),(21,6821,197)) as t(age,salary,height))MATCH (a:person WHERE a.height = p.height AND (a.name = '韩思思')) -[e:person_knows_person ]->(b:person) , (c:person WHERE c.name = '李梅') -[e2:person_likes_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "peopleNumber对768取余的值",
        "output": "a.peopleNumber % 768",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生张梅创造的处方,以及创造这些处方的医生, 令医生的id等于处方的weight的最大值除560,令处方的薪资等于医生的id加id加id的最大值,令医生(a)的年龄等于医生(c)的年龄加27, 返回医生(a)的性别,处方(b)的权重,医生(c)的名字",
        "output": "match(a:doctor where name = '张梅')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) let c.id = MAX(b.weight) / 560,let b.salary = MAX(a.id + a.id + a.id),let a.age = c.age + 27 return a.gender,b.weight,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为滴滴和谷歌的,label为公司的点公共的朋友节点的名单",
        "output": "match(a:company where a.name='滴滴')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='谷歌') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找王思思的朋友的伙伴。",
        "output": "match(a:author where a.name='王思思')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(185,87,1),(189,99,28),(170,87,27)作为请求表数据,属性分别为height,age,id, 以属性height作为相等条件,返回所有源点标签等于作家,目标点标签等于作家,标签等于author_knows_author的边",
        "output": "with p as (select * from (VALUES(185,87,1),(189,99,28),(170,87,27)) as t(height,age,id))MATCH (a:author WHERE a.height = p.height) -[e:author_knows_author ]->(b:author) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于tag,名为历史的点,返回这些点的id,name,value",
        "output": "match(a:tag where a.name = '历史') return a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与商品杯子有关系的卖家",
        "output": "match(a:goods where a.name='杯子')<-[e:has]-(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person有关联的person节点,并根据其身高分组,返回身高,以及年龄乘年龄对178取余减薪资加身高的值",
        "output": "match(a:person)-[e:knows]-(b:person) return b.height, b.age * b.age % 178 - b.salary + b.height group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height除151的平均值",
        "output": "return AVG(a.height / 151) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,salary,height, 数据为('famale',5632,191),('famale',7240,159), 源点的gender等于输入表gender,返回person孙红申请的贷款,被其他公司申请的数量",
        "output": "with p as (select * from (VALUES('famale',5632,191),('famale',7240,159)) as t(gender,salary,height))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '孙红')) -[e:person_apply_loan ]->(b:loan) <-[e2:company_apply_loan ]-(c:company) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询浙江大学关系中的朋友伙伴",
        "output": "match(a:university where a.name='浙江大学')-[e:relation]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于拥有,且满足条件源点id大于195或源点id是185,且f0不等于686的边",
        "output": "match(a)-[e:has where (e.srcId > 195 or e.srcId = 185) and e.f0 <> 686]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被学生选择数量大于72的课程,记为relationCount,再查询这些课程选择的课程",
        "output": "match(a:course) let a.relationCount = MAX((a:course)<-[e:selects]-(b:student) => b.id) match(a where a.relationCount > 72)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与department有关系的medicine节点,且medicine节点的id小于等于86,并返回这些medicine的price减40的和,以及medicine的weight加506的值",
        "output": "match(a:department)-[e]->(b:medicine where b.id <= 86) return SUM(b.price - 40), b.weight + 506",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出和电影院相关的41部电影，并找出这些电影所拥有的标签。",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为张建聪的,价值大于42或id小于682的伙伴,返回这些伙伴的星数,和边的f0,源点id,f1",
        "output": "match(a where a.name='张建聪')-[e:partner]->(b where b.value > 42 or b.id < 682) return b.stars,e.f0, e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以likes关系关联了book百年孤独的reader",
        "output": "match(a:book where a.name='百年孤独')<-[e:likes]-(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与名为黄红的人有恋人关系，或者恋人之间有恋人关系的人。",
        "output": "match(a:person where n.name=黄红)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和label为person的点有创造关系的评论,并且和这些评论有属于关系的电影,并且和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出47个名为吴雪的点喜欢的类型为评论的节点,且其id大于等于830且id大于62",
        "output": "match(a where a.name='吴雪')-[e:likes]->(b:comment where b.id >= 830 and b.id > 62) return b limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的个数除270的最小值",
        "output": "MIN(COUNT(a.value) / 270)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询以has关系关联了tag科幻的film",
        "output": "match(a:tag where a.name='科幻')<-[e:film_has_tag]-(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是编辑的点,返回128个",
        "output": "match(a:publisher) return a limit 128",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有与person李月有关系的person的age",
        "output": "match(a:person where a.name='李月')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与作家陈思思有关,且与作家王雪有关系的作家节点",
        "output": "match(a:author where a.name='陈思思')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='王雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person认识的person,返回其源点的id乘79的数量,以及目标点的薪资减5053的最大值",
        "output": "match(a:person)-[e:knows]->(b:person) return COUNT(a.id * 79), MAX(b.salary - 5053)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出belong department皮肤科的doctor,和这些doctor diagnose的patient",
        "output": "match(a:department where name = '皮肤科')<-[e:belong]-(b:doctor)-[e2:diagnose]->(c:patient) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以280,666作为请求点id, 以属性id作为相等条件,给出所有id为121的goods关联的goods,和以has关系关联了这些goods的其他seller",
        "output": "with p as (select * from (VALUES(280),(666)) as t(id)) MATCH (a:goods WHERE a.id = p.id AND (a.id = '121')) -[e ]-(b:goods) <-[e2:seller_has_goods ]-(c:seller) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为书,目标点label为书,label为作家的边",
        "output": "match(a:book)-[e:author]->(b:book) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与Comment_360有归属关系的电影，并且这些电影与标签有拥有关系的点。返回这些点的ID。",
        "output": "match(a where a.name = 'Comment_360')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找关联person韩雪认识的person,的person",
        "output": "match(a:person where name = '韩雪')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询带有标签 'publisher' 的数据，并按薪资从高到低排序。",
        "output": "match(a:publisher) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点满足条件身高大于等于170或id为空,目标点满足条件名字等于孙国强且性别不等于famale,且类型为回答的边",
        "output": "match(a where a.height >= 170 or (a.id is null))-[e:ask]->(b where b.name = '孙国强' and b.gender <> 'famale') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为94的公司有关的国家的朋友, 再给出和国家有关系的相关者",
        "output": "match(a:company where id = 94)-[e]-(b:country)-[e2:friend]->(c), (b:country)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点id为空或名字不等于天涯论坛,边标签为包含,且f1等于true且f1为true的边,返回这些边的目标点id加46的平均值",
        "output": "match(a where (a.id is null) or a.name <> '天涯论坛')-[e:contain where e.f1 = true and e.f1 = true]->(b) return AVG(e.targetId + 46)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点标签为person，边标签为likes的边。返回这些边的weight对119.86取余的结果，以及targetId对165取余后减去185.84再减去116的结果。",
        "output": "match(a:person)-[e:likes]->(b) return e.weight % 119.86, e.targetId % 165 - 185.84 - 116",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与郑红和王国强都有关联的123家公司节点",
        "output": "match(a where a.name='郑红')-[e]->(b:company)<-[e2]-(c where c.name='王国强') return b limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为128的药品有关的处方的相关者, 再查询和处方有关系的伙伴",
        "output": "match(a:medicine where id = 128)-[e]-(b:prescription)-[e2:relation]->(c), (b:prescription)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找作家的相关人士，或者相关人士的相关人士。",
        "output": "match(a:author)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person认识数量大于116的person,记为relationCount,再查询这些person认识的软件",
        "output": "match(a:person) let a.relationCount = COUNT((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 116)-[e2:knows]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为190的person knows的person, 并将person有关的person的age的平均值赋值给person(b)的height, 接着查询person(b)的height小于190的person relates的person",
        "output": "match(a:person where a.id = 190)-[e:knows]->(b:person) let b.height = AVG((b:person)-[e2]-(c:person) => c.age) match(b:person where b.height < 190)-[e3:relates]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询person及其friend的friends。",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询学生以id,身高,年龄分组的id, 根据id从大到小排序",
        "output": "match(a:student) return a.id group by a.id, a.height, a.age order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为武汉的点包含的公司,并对这些公司的价值进行求和",
        "output": "match(a where a.name='武汉')-[e:contain]->(b:company) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与名为吴宏的人员有关联的家庭成员，或者与家庭成员有关联的家庭成员。",
        "output": "match(a:person where n.name=吴宏)-[e:family]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person吴轩的label为朋友的边,并根据目标点id升序排列,返回51个",
        "output": "match(a:person where a.name = '吴轩')-[e:friend]->(b) return b order by e.targetId asc limit 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和大学南京大学有2到4度关系的国家",
        "output": "match(a:university where a.name='南京大学')-[e]->{2,4}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,身高,id分组,计算身高乘194的值",
        "output": "return a.height * 194 group by a.name, a.height, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,gender, 数据为(5,'张建聪','famale'),(67,'Tom','famale'),(96,'何宏','famale')的子查询作为输入表, 以属性gender作为相等条件,返回label为书,名为百年孤独的点,返回这些点的名字",
        "output": "with p as (select * from (VALUES(5,'张建聪','famale'),(67,'Tom','famale'),(96,'何宏','famale')) as t(id,name,gender))MATCH (a:book WHERE a.gender = p.gender AND (a.name = '百年孤独')) RETURN a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找university中国科技大学has的department节点has的student",
        "output": "match(a:university where a.name = '中国科技大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person以性别,id分组的身高, 根据身高降序排序",
        "output": "match(a:person) return a.height group by a.gender, a.id order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为吴建聪的点knows的person",
        "output": "match(a where a.name='吴建聪')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和编辑李若涵有关的读者,再给出和李若涵发布的其他书,返回它们",
        "output": "match(a:publisher where a.name = '李若涵')-[e]-(b:reader), (a:publisher)-[e2:publish]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person喜欢数量大于24的person,记为relationCount,再查询这些person喜欢的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:likes]-(b:person) => b.id) match(a where a.relationCount > 24)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找标签，叫做'动作'。",
        "output": "match(a:tag where a.name = '动作') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出repository Kafka has的issue,以及has这些issue的repository",
        "output": "match(a:repository where name = 'Kafka')-[e:has]->(b:issue)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找university cooperate的company,返回其源点的value减value的平均值,以及目标点的id对74取余的值",
        "output": "match(a:university)-[e:cooperate]->(b:company) return AVG(a.value - a.value), b.id % 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person黄红有关系的person, 返回和这些person有关联的person的,id加17的值",
        "output": "match(a:person where a.name= '黄红')-[e]-(b:person)-[e2]-(c:person) return c.id + 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,lang,id分组,计算wordCount减327对74取余的值",
        "output": "return a.wordCount - 327 % 74 group by a.name, a.lang, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与用户韩强存在喜欢关系,且与标签科幻存在拥有关系的帖子节点，返回这些帖子的名字,价值,及用户韩强的性别,及标签科幻的id",
        "output": "match(a:user where a.name='韩强')-[e:likes]->(b:post)<-[e2:has]-(c:tag where c.name='科幻') return a.gender,b.name, b.value,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找id为10的医生关联的处方,和以接受关系关联了这些处方的其他病人",
        "output": "match(a:doctor where a.id = '10')-[e]-(b:prescription)<-[e2:patient_accept_prescription]-(c:patient) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person马思思认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='马思思') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出17个名字为黄建聪的person,根据年龄从小到大排列",
        "output": "match(a:person where a.name = '黄建聪') return a order by a.age asc limit 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出源点标签为'cinema',边标签为'releases'的边，然后返回这些边中srcId除以155取余的最大值和srcId除以93对163取余的值。",
        "output": "match(a:cinema)-[e:releases]->(b) return MAX(e.srcId % 155), e.srcId / 93 % 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出性别不是female且id乘以69再乘以68小于6321的买家创建的订单及其包含的商品名称",
        "output": "match(a:buyer where a.gender <> 'famale' or a.id * 69 * 68 < 6321)-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询person源点和person目标点之间，且标签为friend的边。",
        "output": "match(a:person)-[e:friend]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询郑建国和Amy之间存在的共同点。",
        "output": "match(a:doctor where a.name='郑建国')-[e:belong]->(b)<-[e2:belong]-(c:doctor where c.name='Amily') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下韩月出版社关系伙伴的朋友",
        "output": "match(a:publisher where a.name='韩月')-[e:relation]->(b)-[e2:partner]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以37,149,703作为请求点id, 源点的id等于输入表id,查找源点名字不等于中国诗词论坛且人数等于846,边标签为forum_contain_person,且满足条件f0不是515的边,返回这些边的源点id乘96的平均值",
        "output": "with p as (select * from (VALUES(37),(149),(703)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name <> '中国诗词论坛' AND a.peopleNumber = 846)) -[e:forum_contain_person WHERE e.f0 <> 515 ]->(b) RETURN AVG(e.srcId * 96) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为105的点的stars,name,value",
        "output": "match(a where a.id = 105) return a.stars, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被城市天津包含的大学,和天津包含的大学",
        "output": "match(a:university)<-[e:contain]-(b:city where name = '天津')-[e2:contain]->(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与帖子Post_179有关系的帖子的语言",
        "output": "match(a:post where a.name='Post_179')-[e]-(b:post) return b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与作家相关的人员，或者这些人员的联系人",
        "output": "match(a:author)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person Tom有关系的person的name",
        "output": "match(a:person where a.name='Tom')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有处方以创建时间,id分组的创建时间, 根据创建时间从小到大排序",
        "output": "match(a:prescription) return a.createTime group by a.createTime, a.id order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点label为user,边label为likes,并且满足条件f0为空,targetId为空,或weight小于等于181.05的边",
        "output": "match(a:user)-[e:likes where ((e.f0 is null) and (e.targetId is null)) or e.weight <= 181.05]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出黄若涵和陈轩共同的朋友列表。",
        "output": "match(a:person where a.name='黄若涵')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为188的仓库有关的合并请求的伙伴, 再找出和合并请求有关系的朋友",
        "output": "match(a:repository where id = 188)-[e]-(b:pullRequest)-[e2:partner]->(c), (b:pullRequest)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部国家的伙伴,或其伙伴的伙伴",
        "output": "match(a:country)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为孙国强和马思琪的,类型是作家的点公共的相关者节点的名单",
        "output": "match(a:author where a.name='孙国强')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='马思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出110个id小于等于11的person,根据age升序排列",
        "output": "match(a:person where a.id <= 11) return a order by a.age asc limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找35个身高不为空,性别不是male且性别不等于famale的person,根据身高从小到大排列",
        "output": "match(a:person where (a.height is not null) and a.gender <> 'male' and a.gender <> 'famale') return a order by a.height asc limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表142,922,833,565,940, 以属性id作为相等条件,找出以contain关系关联了medicine散利痛的prescription",
        "output": "with p as (select * from (VALUES(142),(922),(833),(565),(940)) as t(id)) MATCH (a:medicine WHERE a.id = p.id AND (a.name = '散利痛')) <-[e:prescription_contain_medicine ]-(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person徐强的所有标签等于恋人的边,并根据f1升序排列,返回110个",
        "output": "match(a:person where a.name = '徐强')-[e:lover]->(b) return b order by e.f1 asc limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回订单包含的商品,返回其源点的价格乘1639.33的数量,以及目标点的价值加586的值",
        "output": "match(a:orders)-[e:contain]->(b:goods) return COUNT(a.price * 1639.33), b.value + 586",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出黄思思喜欢的人，并告诉我是否有其他人支付了费用。",
        "output": "match(a:person where a.name='黄思思')-[e:likes]->(b:person)<-[e2:pay]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询issue ISSUE-391 belong的repository节点has的user",
        "output": "match(a:issue where a.name = 'ISSUE-391')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为54的person有关的person的伙伴, 再找出和person有关系的相关者",
        "output": "match(a:person where id = 54)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于person的点,并根据gender降序排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出按id和name分组的所有prescription的createTime，然后按照ctime降序排列。",
        "output": "match(a:prescription) return a.createTime group by a.id, a.name order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person马月喜欢的person,以及喜欢这些person的person",
        "output": "match(a:person where name = '马月')-[e:likes]->(b:person)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和forum知乎有关的tag,称为X,再返回和这个X有关联的其他post,以及和X有关联的tag",
        "output": "match(a:forum where a.name = '知乎')-[e]-(b:tag), (b:tag)-[e2]-(c:post),(b:tag)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与医生相关的非枇杷糖浆药品节点，并返回这些节点中price的最小值对167取余的最大值，以及它们的权重除以68乘22的值。",
        "output": "match(a:doctor)-[e]->(b:medicine where b.name <> '枇杷糖浆') return MAX(MIN(b.price) % 167), b.weight / 68 * 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款loan_86 存款的账号,返回账号 还款的贷款的id加56的数量",
        "output": "match(a:loan where name = 'loan_86')-[e:deposit]->(b:account)-[e2:repay]->(c:loan) return COUNT(c.id + 56)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供与张思琪认识的人，以及喜欢张月的人，并将他们全部返回。",
        "output": "match(a:person where a.name = '张思琪')-[e:knows]->(b:person),(c:person where c.name = '张月')-[e2:likes]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,name,createTime, 数据为(59,'Prescription_312',2032-09-10),(632,'Prescription_150',2000-05-08),(97,'Prescription_129',1997-02-05),(995,'Prescription_486',2024-09-25), 以属性createTime作为相等条件,给出与用户李轩有关系的处方, 返回和这些处方有关联的处方的,id乘id的值",
        "output": "with p as (select * from (VALUES(59,'Prescription_312',2032-09-10),(632,'Prescription_150',2000-05-08),(97,'Prescription_129',1997-02-05),(995,'Prescription_486',2024-09-25)) as t(weight,name,createTime))MATCH (a:user WHERE a.createTime = p.createTime AND (a.name = '李轩')) -[e ]-(b:prescription) -[e2 ]-(c:prescription) RETURN c.id * c.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为大众影院的电影院,以及与其有关的标签,并返回大众影院的地址和这些标签的id",
        "output": "match(a:cinema where name = '大众影院')-[e]-(b:tag) return a.address, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找用户韩梅喜欢的帖子,以及喜欢这些帖子的用户",
        "output": "match(a:user where name = '韩梅')-[e:likes]->(b:post)<-[e2:likes]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与ID为43的某人有关联的人，以及与这些人有关联的合作伙伴。",
        "output": "match(a:person where id = '43')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为病人的点,返回186个",
        "output": "match(a:patient) return a limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale',72,8249),('male',52,3259),('male',29,2055),('male',82,9771)作为请求表数据,属性分别为gender,id,salary, 源点的gender等于输入表gender,找出前133个满足条件名字为百年孤独的书",
        "output": "with p as (select * from (VALUES('famale',72,8249),('male',52,3259),('male',29,2055),('male',82,9771)) as t(gender,id,salary))MATCH (a:book WHERE a.gender = p.gender AND (a.name = '百年孤独')) RETURN a LIMIT 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,id,name, 数据为(894,5,'复仇者联盟'),(919,70,'变形金刚'),(668,18,'少年足球')的子查询作为输入表, 以属性id作为相等条件,请帮我查找名为李梅和黄科的,label为person的点公共的伙伴节点的名单",
        "output": "with p as (select * from (VALUES(894,5,'复仇者联盟'),(919,70,'变形金刚'),(668,18,'少年足球')) as t(value,id,name))MATCH (a:person WHERE a.id = p.id AND (a.name = '李梅')) -[e:partner ]->(b) <-[e2:partner ]-(c:person WHERE c.name = '黄科') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与吴雪相关的人员，以及与她同事的其他人，并将他们全部返回。",
        "output": "match(a:person where a.name = '吴雪')-[e]-(b:person), (a:person)-[e2:colleague]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为UME的点上映的电影,并对这些电影的类别进行求和",
        "output": "match(a where a.name='UME')-[e:releases]->(b:film) return SUM(b.category)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和帖子Post_168有post_has_tag关系的标签,再帮我查询以post_has_tag关系关联了Post_168的标签",
        "output": "match(a:post where a.name = 'Post_168')-[e:post_has_tag]->(b:tag),(a:post where a.name = 'Post_168')<-[e2:post_has_tag]-(c:tag)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为film或cinema或person的点",
        "output": "match(a:film | cinema | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找满足条件名字不等于数据结构或课时不为空,且名字不等于计算机体系结构的节点",
        "output": "match(a where (a.name <> '数据结构' or (a.courseHour is not null)) and a.name <> '计算机体系结构') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person韩科有关系的person的身高",
        "output": "match(a:person where a.name='韩科')-[e]-(b:person) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生诊断的病人,返回其源点的薪资加8780的平均值,以及目标点的薪资乘薪资减id的值",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return AVG(a.salary + 8780), b.salary * b.salary - b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点性别为famale,边标签等于创造,且时间戳等于2002年02月23日,时间戳不等于2001年08月06日的边,返回这些边的权重除191.62的值",
        "output": "match(a where a.gender = 'famale')-[e:creates where e.timeStamp = '2002-02-23' and e.timeStamp <> '2001-08-06']->(b) return e.weight / 191.62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生诊断的病人,返回其源点的身高除身高的值,以及目标点的height的和减157的值",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return a.height / a.height, SUM(b.height) - 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为Tugraph的,name不是ISSUE-212的friend,返回这些friend的status,和边的weight,f1,srcId",
        "output": "match(a where a.name='Tugraph')-[e:friend]->(b where b.name <> 'ISSUE-212') return b.status,e.weight, e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 天津的一个大学节点与一家公司合作了。",
        "output": "match(a:city where a.name = '天津')-[e:contain]->(b:university)-[e2:cooperate]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询172个person李月和马月,共同的partner",
        "output": "match(a:person where a.name='李月')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='马月') return b limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于person的点,返回39个",
        "output": "match(a:person) return a limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找64个名字为'Prescription_321'的处方，并按照创建时间排序。",
        "output": "match(a:prescription where a.name = 'Prescription_321') return a order by a.createTime asc limit 64",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以knows关系关联了author Sam的author",
        "output": "match(a:author where a.name='Sam')<-[e:knows]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询周红申请的loan节点对应的deposit账户",
        "output": "match(a:person where a.name = '周红')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的id乘62的值",
        "output": "match(a:person) return a.id * 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询102个与陈伟和何若涵都存在关系的部门或病人节点",
        "output": "match(a where a.name='陈伟')-[e]->(b:department | patient)<-[e2]-(c where c.name='何若涵') return b limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回stars大于530,lang不是rust的repository has的user的名称,以及这些user likes的repository的名称",
        "output": "match(a:repository where a.stars > 530 and a.lang <> 'rust')-[e:has]->(b:user)-[e2:likes]->(c:repository) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否按公司名称和规格ID对产品进行分组并按从小到大的顺序排序？",
        "output": "match(a:company) return a.scale group by a.name, a.id order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前147个类型是回答的边",
        "output": "match(a)-[e:ask]->(b) return e limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与名为陈强的人有伙伴关系或伙伴关系的所有人。",
        "output": "match(a:person where n.name=陈强)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和名为广州的城市有朋友关系,或有朋友的朋友关系的国家",
        "output": "match(a:city where n.name=广州)-[e:friend]->{1,2}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回陈月喜欢的帖子，返回帖子包含的标签值和ID。",
        "output": "match(a:user where name = '陈月')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.value, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被贷款loan_60存款的账号",
        "output": "match(a:account)<-[e:deposit]-(b:loan where b.name='loan_60') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出'department'节点下的'学生'节点选择了哪些'课程'。",
        "output": "match(a:department where a.name = '经管学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,name, 数据为(8582,70,'吴思琪'),(4736,53,'李若涵')的子查询作为输入表, 源点的name等于输入表name,查询id为197的读者有关的编辑的朋友, 再查询和编辑有关系的伙伴",
        "output": "with p as (select * from (VALUES(8582,70,'吴思琪'),(4736,53,'李若涵')) as t(salary,id,name))MATCH (a:reader WHERE a.name = p.name AND (id = '197')) -[e ]-(b:publisher) -[e2:friend ]->(c) , (b:publisher) -[e3:partner ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "这个句子已经很简洁了，如果要再简化一些可以这样表达：给出的药品与接受过这些药品治疗的其他病人有关联。",
        "output": "match(a:medicine where a.id = '196')-[e]-(b:prescription)<-[e2:accept]-(c:patient) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person孙建国有关,且与标签其他有关系的电影节点",
        "output": "match(a:person where a.name='孙建国')-[e:watch]-(b:film)-[e2:has]-(c:tag where c.name='其他') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和cinema有关联的film节点,并根据其value分组,返回value,以及id加23的和",
        "output": "match(a:cinema)-[e:cinema_releases_film]-(b:film) return b.value, SUM(b.id + 23) group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按创建时间降序排序查询以'createTime', 'value'分组的数据。",
        "output": "match(a:forum) return a.createTime group by a.createTime, a.value order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有医生，这些医生创建了与处方相关的处方，并返回这些医生的名字。",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型是person的点有喜欢关系的评论,以及和这些评论有属于关系的电影,以及和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型为公司的点有合作关系的大学,且和这些大学有属于关系的城市,且和这些城市有属于关系的国家",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:belong]->(c:city)-[e3:belong]->(d:country) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为动作的标签,以及与其有关的标签,并返回动作的价值和这些标签的id",
        "output": "match(a:tag where name = '动作')-[e]-(b:tag) return a.value, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以51, 21作为输入,返回id, value",
        "output": "Call PAGERANK(51, 21) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和comment Comment_122有belong关系的film,再查找以belong关系关联了Comment_122的film",
        "output": "match(a:comment where a.name = 'Comment_122')-[e:belong]->(b:film),(a:comment where a.name = 'Comment_122')<-[e2:belong]-(c:film)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对46取余乘21的数量",
        "output": "COUNT(a.id % 46 * 21)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person杜思琪有关系的person, 返回和这些person有关联的person的,id减32乘95的值",
        "output": "match(a:person where a.name= '杜思琪')-[e]-(b:person)-[e2]-(c:person) return (c.id - 32) * 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前158个age不等于70,name不是赵强,salary不为空的person",
        "output": "match(a:person where a.age <> 70 and a.name <> '赵强' and (a.salary is not null)) return a limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与课程程序设计有关系的教师的年龄",
        "output": "match(a:course where a.name='程序设计')-[e]-(b:teacher) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与周月有观看关系的电影，以及这些电影所拥有的标签，并返回这些点的ID。",
        "output": "match(a where a.name = '周月')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出68个药品，按照名称从小到大排列，其中重量大于835或者重量减去766的最大值大于等于10。",
        "output": "match(a:prescription where MAX(a.weight - 766) >= 10 or a.weight > 835) return a order by a.name asc limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询82个名为李雪的点喜欢的标签等于帖子的节点,且节点创建时间不是2023年03月05日且语言不是French",
        "output": "match(a where a.name='李雪')-[e:likes]->(b:post where b.createTime <> '2023-03-05' and b.lang <> 'French') return b limit 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,age,id, 数据为('male',39,69),('male',41,83), 源点的id等于输入表id,请帮我查找和person杜红有关的person,再请帮我查找和杜红person_parent_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES('male',39,69),('male',41,83)) as t(gender,age,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '杜红')) -[e ]-(b:person) , (a:person) -[e2:person_parent_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,size, 数据为('物理学院',98,94)的子查询作为输入表, 以属性name作为相等条件,找出和部门体育学院有关的教师,称为X,再找出和这个X有关联的其他教师,以及和X有关联的教师",
        "output": "with p as (select * from (VALUES('物理学院',98,94)) as t(name,id,size))MATCH (a:department WHERE a.name = p.name AND (a.name = '体育学院')) -[e ]-(b:teacher) , (b:teacher) -[e2 ]-(c:teacher) , (b:teacher) -[e3 ]-(d:teacher) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和seller徐月有关的orders,称为X,再帮我查询和这个X有关联的其他buyer,以及和X有关联的goods",
        "output": "match(a:seller where a.name = '徐月')-[e]-(b:orders), (b:orders)-[e2]-(c:buyer),(b:orders)-[e3]-(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('马科',97,7177)作为请求表数据,属性分别为name,id,salary, 源点的salary等于输入表salary,请帮我找出从书呐喊出发,经过标签为book_refers_book的边,走1跳或2跳到达的书点",
        "output": "with p as (select * from (VALUES('马科',97,7177)) as t(name,id,salary))MATCH (a:book WHERE a.salary = p.salary AND (a.name = '呐喊')) -[e:book_refers_book ]->{1,2}(b:book) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回30个与越南或日本有关系的国家。",
        "output": "match(a where a.name='越南')-[e]->(b:country)<-[e2]-(c where c.name='日本') return b limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为武汉和巴黎的点共同属于的,标签等于国家的节点",
        "output": "match(a where a.name = '武汉')-[e:belong]->(b:country)<-[e2:belong]-(c where c.name = '巴黎') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与教师杜若涵存在教关系,且与部门计算机学院存在属于关系的课程节点，返回这些课程的价值,课时,id,及教师杜若涵的名字,及部门计算机学院的名字",
        "output": "match(a:teacher where a.name='杜若涵')-[e:teach]->(b:course)<-[e2:belong]-(c:department where c.name='计算机学院') return a.name,b.value, b.courseHour, b.id,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出176个名为Prescription_485的点contain的label为medicine的节点,且节点price小于等于193或name不是散利痛",
        "output": "match(a where a.name='Prescription_485')-[e:contain]->(b:medicine where b.price <= 193 or b.name <> '散利痛') return b limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 在上海有哪些公司与其他大学有合作",
        "output": "match(a:city where a.name='上海')-[e:contain]->(b:company)<-[e2:cooperate]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询类型为city,名称为伦敦的地点，返回它们的value和name。",
        "output": "match(a:city where a.name = '伦敦') return a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找用户孙建聪的所有伙伴,的源点id除154乘150.60的平均值",
        "output": "match(a:user where a.name= '孙建聪')-[e:partner]->(b) return AVG(e.srcId / 154 * 150.60)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有耳鼻喉科的点has的doctor,然后请帮我找出耳鼻喉科被belong的doctor,一起返回",
        "output": "match(a where a.name = '耳鼻喉科')-[e:has]->(b:doctor),(a where a.name = '耳鼻喉科')<-[e2:belong]-(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据wordCount分组,计算value对12取余的值",
        "output": "return a.value % 12 group by a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘80的值",
        "output": "a.id * 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄加13的值",
        "output": "a.age + 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表307, 源点的id等于输入表id,请帮我找出id为73的点的value,scale,id",
        "output": "with p as (select * from (VALUES(307)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '73')) RETURN a.value, a.scale, a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找72个城市东京和上海,共同的朋友",
        "output": "match(a:city where a.name='东京')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='上海') return b limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被doctor creates数量大于133的prescription,记为relationCount,再查询这些prescription creates的medicine",
        "output": "match(a:prescription) let a.relationCount = SUM((a:prescription)<-[e:creates]-(b:doctor) => b.id) match(a where a.relationCount > 133)-[e2:creates]->(c:medicine) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为ISSUE-435的点的,语言为c且权重小于等于542的相关者,返回这些相关者的权重,和边的目标点id,源点id",
        "output": "match(a where a.name='ISSUE-435')-[e:relation]->(b where b.lang = 'c' and b.weight <= 542) return b.weight,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(156,89,5335),(166,46,4044),(175,61,4692)作为请求表数据,属性分别为height,id,salary, 源点的salary等于输入表salary,找出43个id大于35或id为79的department,根据name从大到小排列",
        "output": "with p as (select * from (VALUES(156,89,5335),(166,46,4044),(175,61,4692)) as t(height,id,salary))MATCH (a:department WHERE a.salary = p.salary AND (a.id > 35 OR a.id = 79)) RETURN a ORDER BY a.name DESC LIMIT 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,大小,价值分组,计算大小加85对80取余的最小值",
        "output": "return MIN(a.size + 85 % 80) group by a.id, a.size, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为滴滴的,金额大于等于1633.03且id大于等于48的相关者,返回这些相关者的权重,和边的源点id",
        "output": "match(a where a.name='滴滴')-[e:relation]->(b where b.amount >= 1633.03 and b.id >= 48) return b.weight,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为越南和英国的,label为国家的点公共的伙伴节点的名单",
        "output": "match(a:country where a.name='越南')-[e:partner]->(b)<-[e2:partner]-(c:country where c.name='英国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与course大学英语和计算机体系结构都存在belong关系的点",
        "output": "match(a:course where a.name='大学英语')-[e:belong]->(b)<-[e2:belong]-(c:course where c.name='计算机体系结构') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找person节点且标签为knows的边，并返回这些边的f0平均值、余数加f0值和weight数量除以190.82的值。",
        "output": "match(a:person)-[e:knows]->(b) return AVG(e.f0) % 662 + e.f0, COUNT(e.weight) / 190.82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与buyer相关的orders节点，按name和id进行分组，并返回name和id。",
        "output": "match(a:buyer)-[e:cancel]-(b:orders) return b.name, b.id group by b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和doctor韩思思有关的medicine,称为X,再找出和这个X有关联的其他doctor,以及和X有关联的patient",
        "output": "match(a:doctor where a.name = '韩思思')-[e]-(b:medicine), (b:medicine)-[e2]-(c:doctor),(b:medicine)-[e3]-(d:patient) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person周月关联的person节点认识的person",
        "output": "match(a:person where a.name = '周月')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别,薪资,id分组,计算id乘46的值",
        "output": "return a.id * 46 group by a.gender, a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与reader徐轩存在likes关系,且与book计算机网络存在refers关系的book节点，返回这些book的category,name,及reader徐轩的id,及book计算机网络的wordCount",
        "output": "match(a:reader where a.name='徐轩')-[e:likes]->(b:book)<-[e2:refers]-(c:book where c.name='计算机网络') return a.id,b.category, b.name,c.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出course线性代数belong的department,以及belong这些department的course, 令course(a)的courseHour等于course(c)的id除id,令department的name等于department的id,令department的name等于department的value乘629, 返回course(a)的name,department(b)的size,course(c)的value",
        "output": "match(a:course where name = '线性代数')-[e:belong]->(b:department)<-[e2:belong]-(c:course) let a.courseHour = c.id / c.id,let b.name = b.id,let b.name = b.value * 629 return a.name,b.size,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回114个company谷歌和华为,共同的friend",
        "output": "match(a:company where a.name='谷歌')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='华为') return b limit 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以967,881,356作为请求点id, 源点的id等于输入表id,帮我查询所有id为104的病人关联的处方,和以创造关系关联了这些处方的其他医生",
        "output": "with p as (select * from (VALUES(967),(881),(356)) as t(id)) MATCH (a:patient WHERE a.id = p.id AND (a.id = '104')) -[e ]-(b:prescription) <-[e2:doctor_creates_prescription ]-(c:doctor) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出patient张思思accept的prescription, 令patient的height等于patient的gender, 返回patient的gender, prescription的id",
        "output": "match(a:patient where a.name='张思思')-[e:accept]->(b:prescription) let a.height = a.gender return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person陈梅支付的person,被其他person认识的数量",
        "output": "match(a:person where a.name='陈梅')-[e:pay]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出author何雪的friend,的srcId乘184的值",
        "output": "match(a:author where a.name= '何雪')-[e:friend]->(b) return e.srcId * 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回repository has的user,返回其源点的weight的平均值乘869的值,以及目标点的salary乘salary的值",
        "output": "match(a:repository)-[e:has]->(b:user) return AVG(a.weight) * 869, b.salary * b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person黄科有关,且与person赵强有关系的person节点",
        "output": "match(a:person where a.name='黄科')-[e:pay]-(b:person)-[e2:pay]-(c:person where c.name='赵强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表201,864,279,372, 源点的id等于输入表id,查找所有course以value,courseHour分组的id, 根据id降序排序",
        "output": "with p as (select * from (VALUES(201),(864),(279),(372)) as t(id)) MATCH (a:course WHERE a.id = p.id) RETURN a.id GROUP BY a.value, a.courseHour ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出公司字节合作的大学,被其他公司合作的数量",
        "output": "match(a:company where a.name='字节')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与马科存在支付关系的person,person与person存在支付关系的点,返回这些点的年龄",
        "output": "match(a where a.name = '马科')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司雇佣的person,返回其源点的价值加385的值,以及目标点的id的平均值减36的最小值",
        "output": "match(a:company)-[e:employee]->(b:person) return a.value + 385, MIN(AVG(b.id) - 36)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为孙伟的orders或buyer或seller,以及与其有关的orders,并返回孙伟的name和这些orders的name",
        "output": "match(a:orders | buyer | seller where name = '孙伟')-[e]-(b:orders) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出publisher的三角的环,边标签等于publish, 并返回这些点的id",
        "output": "match(a:publisher)-[e:publish]->(b)-[e2:publish]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询所有公司源点之间的合作边，并返回这些边的权重减去127.63的个数以及f0除以768的值。",
        "output": "match(a:company)-[e:cooperate]->(b) return COUNT(e.weight - 127.63), e.f0 / 768",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person孙轩 喜欢的评论,返回评论 属于的电影的价值减380的值",
        "output": "match(a:person where name = '孙轩')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.value - 380",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回属于国家法国包含的城市,的公司",
        "output": "match(a:country where name = '法国')-[e:contain]->(b:city)<-[e2:belong]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,age,id分组,计算salary减1332的值",
        "output": "return a.salary - 1332 group by a.name, a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与陈科、杜强两位病人有共同诊断的节点",
        "output": "match(a where a.name = '陈科')-[e:diagnose]->(b:patient)<-[e2:diagnose]-(c where c.name = '杜强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与帖子ID为117的论坛相关的用户朋友，然后再找出与该论坛相关的关联关系。",
        "output": "match(a:post where id = '117')-[e]-(b:forum)-[e2:friend]->(c), (b:forum)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与订单Order_291和Order_309都存在包含关系的点",
        "output": "match(a:orders where a.name='Order_291')-[e:contain]->(b)<-[e2:contain]-(c:orders where c.name='Order_309') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为周思琪和李月的,类型为person的点公共的partner节点的名单",
        "output": "match(a:person where a.name='周思琪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,名字,id分组,计算id加98的值",
        "output": "return a.id + 98 group by a.weight, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含伦敦和纽约的点",
        "output": "match(a:city where a.name='伦敦')-[e:contain]->(b)<-[e2:contain]-(c:city where c.name='纽约') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与作家吴国强有联系的作家",
        "output": "match(a:author where a.name='吴国强')<-[e:knows]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 北京大学的合作伙伴是相关者。",
        "output": "match(a:university where a.name='北京大学')-[e:partner]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与作家韩若涵有关系的作家, 返回和这些作家有关联的作家的,年龄除33的最小值",
        "output": "match(a:author where a.name= '韩若涵')-[e]-(b:author)-[e2]-(c:author) return MIN(c.age / 33)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回大学北京大学属于的城市,以及包含这些城市的国家, 令城市的名字等于大学的价值除458,令国家的价值等于城市的价值加872减588的最小值, 返回大学的价值,城市的面积,国家的面积",
        "output": "match(a:university where name = '北京大学')-[e:belong]->(b:city)<-[e2:contain]-(c:country) let b.name = a.value / 458,let c.value = MIN(b.value + 872 - 588) return a.value,b.area,c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为19的点的性别,身高",
        "output": "match(a where a.id = 19) return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的平均值对salary取余的值",
        "output": "AVG(a.salary) % a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出论坛包含的帖子, 令帖子的创建时间的值等于发布帖子的用户的身高的最小值, 再查找帖子拥有的标签",
        "output": "match(a:forum)-[e:contain]->(b:post) let b.createTime = MIN((b:post)<-[e2:publish]-(c:user) => c.height) match(b:post)-[e3:has]->(d:tag) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为person,边label为喜欢,并且满足条件f1等于false且f0大于等于892,或源点id在91到199之间的边",
        "output": "match(a:person)-[e:likes where (e.f1 = false and e.f0 >= 892) or (e.srcId BETWEEN 91 AND 199)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以包含关系关联了城市重庆的国家",
        "output": "match(a:city where a.name='重庆')<-[e:contain]-(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person马红有1度或2度关系的person",
        "output": "match(a:person where a.name='马红')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,薪资,性别分组,计算薪资除3599的平均值",
        "output": "return AVG(a.salary / 3599) group by a.height, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为loan_57和loan_84的,label为loan的点公共的relation节点的名单",
        "output": "match(a:loan where a.name='loan_57')-[e:relation]->(b)<-[e2:relation]-(c:loan where c.name='loan_84') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,id分组,计算id除42的值",
        "output": "return a.id / 42 group by a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和电影绿巨人有关的电影院,再查找和绿巨人拥有的其他标签,返回它们",
        "output": "match(a:film where a.name = '绿巨人')-[e]-(b:cinema), (a:film)-[e2:has]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 哪两家公司有合作关系",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:cooperate]->(b)<-[e2:cooperate]-(c:company where c.name='滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出电影院的1跳以内的环",
        "output": "match(a:cinema)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与赵伟存在支付关系的person,person与person存在支付关系的点,返回这些点的性别",
        "output": "match(a where a.name = '赵伟')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有大学的value的数量对287取余的值",
        "output": "match(a:university) return COUNT(a.value) % 287",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询马思琪从起点出发，沿着类型为'creates'的边走3到5步，到达终点comment。",
        "output": "match(a:person where a.name='马思琪')-[e:creates]->{3,5}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与何梅认识且与韩建国存在支付关系的人，并返回他们的ID,何梅的名字和韩建国的ID。",
        "output": "match(a:person where a.name='何梅')-[e:knows]->(b:person)<-[e2:pay]-(c:person where c.name='韩建国') return a.name,b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与用户赵思琪有关系的事项的状态",
        "output": "match(a:user where a.name='赵思琪')-[e]-(b:issue) return b.status",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标签以id,名字,价值分组的价值, 根据价值从小到大排序",
        "output": "match(a:tag) return a.value group by a.id, a.name, a.value order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与部门物理学院有关,且与课程形势与政策有关系的教师节点",
        "output": "match(a:department where a.name='物理学院')-[e:has]-(b:teacher)-[e2:teach]-(c:course where c.name='形势与政策') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前49个标签等于喜欢的边",
        "output": "match(a)-[e:likes]->(b) return e limit 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为呐喊的节点knows的book或publisher",
        "output": "match(a where a.name='呐喊')-[e:knows]->(b:book | publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为person,名为郑梅的点,返回这些点的height",
        "output": "match(a:person where a.name = '郑梅') return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与'中国诗词论坛'相关的用户，以及这些用户所包含的其他'person'。",
        "output": "match(a:forum where a.name = '中国诗词论坛')-[e]-(b:user), (a:forum)-[e2:contain]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与大学有联系的教师，以及与这些教师有联系的其他部门。",
        "output": "match(a:university where a.id = '154')-[e]-(b:teacher)<-[e2:has]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询32个大学北京大学和电子科技大学,共同的伙伴",
        "output": "match(a:university where a.name='北京大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='电子科技大学') return b limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以974,754,340作为请求点id, 源点的id等于输入表id,请帮我找出和订单Order_243有关的订单,再请帮我找出和Order_243orders_contain_goods的其他商品,返回它们",
        "output": "with p as (select * from (VALUES(974),(754),(340)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_243')) -[e ]-(b:orders) , (a:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user点有likes关系的post节点,且边满足条件f0不为空,目标post节点满足条件value在155到810之间",
        "output": "match(a:user)-[e:likes where (e.f0 is not null)]->(b:post where (b.value BETWEEN 155 AND 810)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出黄梅和何红两位作者之间共同的关联。",
        "output": "match(a:author where a.name='黄梅')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='何红') return b limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标签为person的点，然后按照salary进行升序排序。",
        "output": "match(a:person) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和论坛天涯论坛有1到3度关系的论坛",
        "output": "match(a:forum where a.name='天涯论坛')-[e]->{1,3}(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person陈轩有关的person,再查找和陈轩恋人的其他person,返回它们",
        "output": "match(a:person where a.name = '陈轩')-[e]-(b:person), (a:person)-[e2:lover]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询作家郑宏的全部标签等于相关者的边,并根据目标点id降序排列,返回78个",
        "output": "match(a:author where a.name = '郑宏')-[e:relation]->(b) return b order by e.targetId desc limit 78",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和teacher徐若涵有teacher_teach_course关系的course,以及和university浙江大学有university_has_department关系的department,将它们都返回",
        "output": "match(a:teacher where a.name = '徐若涵')-[e:teacher_teach_course]->(b:course),(c:university where c.name = '浙江大学')-[e2:university_has_department]->(d:department)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有编辑的朋友,或其朋友的朋友",
        "output": "match(a:publisher)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄降序，找出所有按年龄分组的人的年龄。",
        "output": "match(a:person) return a.age group by a.age order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为赵梅的节点属于的person",
        "output": "match(a where a.name='赵梅')-[e:belong]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和repository Kafka有关的issue,称为X,再请帮我找出和这个X有关联的其他pullRequest,以及和X有关联的issue",
        "output": "match(a:repository where a.name = 'Kafka')-[e]-(b:issue), (b:issue)-[e2]-(c:pullRequest),(b:issue)-[e3]-(d:issue) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减9的数量",
        "output": "COUNT(a.id - 9)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Geaflow的software,以及与其有关的software,并返回Geaflow的lang和这些software的stars",
        "output": "match(a:software where name = 'Geaflow')-[e]-(b:software) return a.lang, b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找名叫做郑梅，标签为teacher的点，返回它们的性别和身高。",
        "output": "match(a:teacher where a.name = '郑梅') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为俄罗斯的点的,人数小于等于6633,id不为空的伙伴,返回这些伙伴的名字,和边的权重,目标点id",
        "output": "match(a where a.name='俄罗斯')-[e:partner]->(b where b.peopleNumber <= 6633 and (b.id is not null)) return b.name,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出规格为small的节点",
        "output": "match(a where a.scale = 'small') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照商品名称、ID和价格对商品进行分组，并按照价格从大到小排序。",
        "output": "match(a:goods) return a.value group by a.name, a.id, a.price order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询113个和label为person的点有家人关系的person,且和这些person有父母关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person) return c limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回周建国观看的电影中的标签名。",
        "output": "match(a where a.name = '周建国')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别,年龄,名字分组,计算身高对186取余的最小值",
        "output": "return MIN(a.height % 186) group by a.gender, a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person点有拥有关系的账号节点,且边满足条件目标点id小于等于145.62,目标账号节点名字等于Geaflow123",
        "output": "match(a:person)-[e:own where e.targetId <= 145.62]->(b:account where b.name = 'Geaflow123') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除7的值",
        "output": "a.id / 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和buyer点有creates关系的orders节点,且边满足条件srcId在67到194之间,目标orders节点满足条件id小于等于29",
        "output": "match(a:buyer)-[e:creates where (e.srcId BETWEEN 67 AND 194)]->(b:orders where b.id <= 29) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到何宏，沿着标签为提交的边走2到5度，到达一个软件点。",
        "output": "match(a:person where a.name='何宏')-[e:commits]->{2,5}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person马国强有关的person,再给出和马国强parent的其他person,返回它们",
        "output": "match(a:person where a.name = '马国强')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回华中科技大学。",
        "output": "match(a:university where a.name = '华中科技大学') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被用户孙思思创造的事项,和孙思思创造的事项",
        "output": "match(a:issue)<-[e:creates]-(b:user where name = '孙思思')-[e2:creates]->(c:issue) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找评论Comment_249属于的电影,被其他person观看的数量",
        "output": "match(a:comment where a.name='Comment_249')-[e:belong]->(b:film)<-[e2:watch]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与公司Bilibili有关系的大学的id",
        "output": "match(a:company where a.name='Bilibili')-[e]-(b:university) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为Jimmy和韩月的点共同consult的,标签为seller的节点",
        "output": "match(a where a.name = 'Jimmy')-[e:consult]->(b:seller)<-[e2:consult]-(c where c.name = '韩月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和用户郑国强有关的用户,称为X,再找出和这个X有关联的其他标签,以及和X有关联的标签",
        "output": "match(a:user where a.name = '郑国强')-[e]-(b:user), (b:user)-[e2]-(c:tag),(b:user)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与person韩强和陈伟都存在person_knows_person关系的点",
        "output": "match(a:person where a.name='韩强')-[e:person_knows_person]->(b)<-[e2:person_knows_person]-(c:person where c.name='陈伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person徐伟knows的person,以及likes这些person的person, 令person的height等于person的id加84的平均值,令person(c)的name等于person(a)的salary的最小值,令person的id等于person的id, 返回person(a)的salary,person(b)的id,person(c)的gender",
        "output": "match(a:person where name = '徐伟')-[e:knows]->(b:person)<-[e2:likes]-(c:person) let c.height = AVG(c.id + 84),let c.name = MIN(a.salary),let a.id = a.id return a.salary,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回陈雪这个人的信息。",
        "output": "match(a:person where a.name = '陈雪') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为154的点的name,salary,gender",
        "output": "match(a where a.id = 154) return a.name, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,gender,id, 数据为('Tom','male',59)的子查询作为输入表, 源点的name等于输入表name,请帮我查找买家孙思琪查看的商品,被其他卖家拥有的数量",
        "output": "with p as (select * from (VALUES('Tom','male',59)) as t(name,gender,id))MATCH (a:buyer WHERE a.name = p.name AND (a.name = '孙思琪')) -[e:buyer_look_goods ]->(b:goods) <-[e2:seller_has_goods ]-(c:seller) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从department急诊部出发，通过标签为has的边，走了3跳或4跳后到达的doctor节点。",
        "output": "match(a:department where a.name='急诊部')-[e:has]->{3,4}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与徐建聪有关且与MySQL有关的公司节点，并返回它们的ID和关系价值。",
        "output": "match(a:person where a.name='徐建聪')-[e]->(b:company)<-[e2]-(c:software where c.name='Mysql') return b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person杜月提交的软件, 令person的价值等于软件的value的和除686,令软件的是否开源等于软件的id对10取余, 返回person的身高, 软件的语言",
        "output": "match(a:person where a.name='杜月')-[e:commits]->(b:software) let a.value = SUM(b.value) / 686,let b.openSource = b.id % 10 return a.height,b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(142.29,true,82),(130.48,true,87),(105.98,true,101)作为请求表数据,属性分别为weight,f1,srcId, 源点的weight等于输入表weight,返回前15个gender不是famale的person",
        "output": "with p as (select * from (VALUES(142.29,true,82),(130.48,true,87),(105.98,true,101)) as t(weight,f1,srcId))MATCH (a:person WHERE a.weight = p.weight AND (a.gender <> 'famale')) RETURN a LIMIT 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询孙思思家人的朋友的父母",
        "output": "match(a:person where a.name='孙思思')-[e:family]->(b)-[e2:friend]->(c)-[e3:parent]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height乘199的最大值",
        "output": "MAX(a.height * 199)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('李建聪',164,87),('黄强',153,66)作为请求表数据,属性分别为name,height,id, 源点的id等于输入表id,请帮我找出全部名为杜若涵的,年龄小于等于24的朋友,返回这些朋友的id,和边的f1,f0",
        "output": "with p as (select * from (VALUES('李建聪',164,87),('黄强',153,66)) as t(name,height,id))MATCH (a WHERE a.id = p.id AND (a.name = '杜若涵')) -[e:friend ]->(b WHERE b.age <= 24) RETURN b.id, e.f1, e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为华为的公司，并返回其标签为公司的点的价值、人数和规格。",
        "output": "match(a:company where a.name = '华为') return a.value, a.peopleNumber, a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下徐建聪这个病人，他/她的年龄和性别",
        "output": "match(a:patient where a.name = '徐建聪') return a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回李建聪所拥有的商品以及询问过他的买家列表",
        "output": "match(a where a.name = '李建聪')-[e:has]->(b:goods),(a where a.name = '李建聪')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以合作关系关联了公司谷歌的大学",
        "output": "match(a:company where a.name='谷歌')<-[e:cooperate]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和公司微软有关系的大学或城市,返回这些点的id",
        "output": "match(a:company where a.name='微软')-[e]-(b:university | city) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点满足条件名字为593,目标点满足条件id不等于2518或人数大于2585或名字等于上海,且类型是属于的边",
        "output": "match(a where a.name = 593)-[e:belong]->(b where b.id <> 2518 or b.peopleNumber > 2585 or b.name = '上海') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以申请关系关联了贷款loan_26的公司",
        "output": "match(a:loan where a.name='loan_26')<-[e:apply]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照姓名分组，对每个人的薪资进行排序，从高到低。",
        "output": "match(a:person) return a.salary group by a.name order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找user赵雪creates的issue,以及has这些issue的repository",
        "output": "match(a:user where name = '赵雪')-[e:creates]->(b:issue)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点创建时间是2006年10月29日,创建时间不是2029年07月05日,边类型为包含,且满足条件权重为空或目标点id不为空或f0为空的边,返回这些边的权重除165.88的最大值",
        "output": "match(a where a.createTime = '2006-10-29' and a.createTime <> '2029-07-05')-[e:contain where (e.weight is null) or (e.targetId is not null) or (e.f0 is null)]->(b) return MAX(e.weight / 165.88)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最小值除80的值",
        "output": "MIN(a.value) / 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以189,90,962,648作为请求点id, 源点的id等于输入表id,帮我查询和person有关联的person节点,并根据其薪资,性别分组,返回薪资,性别,以及id除66的值",
        "output": "with p as (select * from (VALUES(189),(90),(962),(648)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_knows_person ]-(b:person) RETURN b.salary, b.gender, b.id / 66 GROUP BY b.salary, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询标签为书的全部点,并根据id从大到小排列",
        "output": "match(a:book) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age的个数乘age的最小值",
        "output": "MIN(COUNT(a.age) * a.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和仓库FSM之间有拥有关系的用户",
        "output": "match(a:repository where a.name='FSM')-[e:has]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的和减22的最小值",
        "output": "MIN(SUM(a.id) - 22)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值加705的值",
        "output": "a.value + 705",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从马思思出发，经过认识的朋友，跳3次，到达点。",
        "output": "match(a:person where a.name='马思思')-[e:knows]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与公司微软有关系的公司的id",
        "output": "match(a:company where a.name='微软')-[e]-(b:company) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部类型是合并请求或用户或事项的点",
        "output": "match(a:pullRequest | user | issue) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找郑轩认识的人里，谁被郑轩喜欢",
        "output": "match(a:person where a.name = '郑轩')-[e:knows]->(b:person)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询age不是3的publisher publish的book的名称,以及这些book knows的book的名称",
        "output": "match(a:publisher where a.age <> 3)-[e:publish]->(b:book)-[e2:knows]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄分组，列出所有人的身高，并按照身高从高到低排序。",
        "output": "match(a:person) return a.height group by a.age order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出130个性别是male的person,根据名字从大到小排列",
        "output": "match(a:person where a.gender = 'male') return a order by a.name desc limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为111的cinema releases的film, 并将film有关的film的value的和赋值给film(b)的value, 接着查询film(b)的value小于111的film has的tag",
        "output": "match(a:cinema where a.id = 111)-[e:releases]->(b:film) let b.value = SUM((b:film)-[e2]-(c:film) => c.value) match(b:film where b.value < 111)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生何国强诊断的病人, 令医生的年龄等于医生的年龄,令病人的性别等于医生的id除86, 返回医生的身高, 病人的年龄",
        "output": "match(a:doctor where a.name='何国强')-[e:diagnose]->(b:patient) let a.age = a.age,let b.gender = a.id / 86 return a.height,b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person孙建国有family关系的1跳以内的环",
        "output": "match(a:person where name = '孙建国')-[e:family]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company字节有关的company,再返回和字节apply的其他loan,返回它们",
        "output": "match(a:company where a.name = '字节')-[e]-(b:company), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,id分组,计算weight的个数除717的最大值",
        "output": "return MAX(COUNT(a.weight) / 717) group by a.weight, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部类型是person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找找有没有大学和微软、滴滴一起合作的节点",
        "output": "match(a where a.name = '微软')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c where c.name = '滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与书少年闰土存在引用关系,且与书三体存在引用关系的书节点，返回这些书的价格,创建时间,及书少年闰土的id,及书三体的名字",
        "output": "match(a:book where a.name='少年闰土')-[e:refers]->(b:book)<-[e2:refers]-(c:book where c.name='三体') return a.id,b.price, b.createTime,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person黄宏有friend关系的person,再请帮我找出以lover关系关联了黄宏的person",
        "output": "match(a:person where a.name = '黄宏')-[e:friend]->(b:person),(a:person where a.name = '黄宏')<-[e2:lover]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑强invest的company, 令company的height等于person的age, 返回person的id, company的scale",
        "output": "match(a:person where a.name='郑强')-[e:invest]->(b:company) let b.height = a.age return a.id,b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和label为部门的点有拥有关系的医生,且和这些医生有属于关系的部门,且和这些部门有拥有关系的医生",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department)-[e3:has]->(d:doctor) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前31个类型为publish的边",
        "output": "match(a)-[e:publish]->(b) return e limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,value分组,计算id减44的最小值",
        "output": "return MIN(a.id - 44) group by a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出buyer韩建国look的goods,以及has这些goods的seller",
        "output": "match(a:buyer where name = '韩建国')-[e:look]->(b:goods)<-[e2:has]-(c:seller) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与王梅相关的贷款以及她申请的其他贷款。",
        "output": "match(a:person where a.name = '王梅')-[e]-(b:loan), (a:person)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出源点name不是腾讯,边label为company_employee_person,且weight大于118.37且f0大于724,或srcId对164取余的最大值大于等于164.62的边,返回这些边的targetId加31的值",
        "output": "match(a where a.name <> '腾讯')-[e:company_employee_person where (e.weight > 118.37 and e.f0 > 724) or MAX(e.srcId % 164) >= 164.62]->(b) return e.targetId + 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出名为university的点，并按照name字段进行降序排序",
        "output": "match(a:university) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关联的person节点，这些节点的高度为空。然后计算这些节点的id除以17后的余数之和，以及每个节点的id加上18的结果。",
        "output": "match(a:person)-[e]->(b:person where (b.height is null)) return SUM(b.id % 17), b.id + 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出申请贷款loan_31的person,和这些person申请的贷款",
        "output": "match(a:loan where name = 'loan_31')<-[e:apply]-(b:person)-[e2:apply]->(c:loan) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回id为174的点的gender,height",
        "output": "match(a where a.id = '174') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与医生马建聪存在诊断关系且与处方Prescription_227存在接受关系的病人节点，并给出这些病人的ID,医生马建聪的身高和处方Prescription_227的ID。",
        "output": "match(a:doctor where a.name='马建聪')-[e:diagnose]->(b:patient)<-[e2:accept]-(c:prescription where c.name='Prescription_227') return a.height,b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与13个用户发布的帖子有 has 关系的所有 tag。",
        "output": "match(a:user)-[e:publish]->(b:post)-[e2:has]->(c:tag) return c limit 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以'yD', 60作为输入,返回运算结果",
        "output": "Call TRIANGLECOUNT('yD', 60) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为95的点的id",
        "output": "match(a where a.id = 95) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为选择,且源点id不为空,权重不等于109.94,或目标点id在78到192之间的边",
        "output": "match(a)-[e:selects where ((e.srcId is not null) and e.weight <> 109.94) or (e.targetId BETWEEN 78 AND 192)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为164的person关联的person,和以喜欢关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 164)-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与孙轩有支付关系的人和与吴思琪有喜欢关系的人，并返回它们。",
        "output": "match(a:person where a.name = '孙轩')-[e:pay]->(b:person),(c:person where c.name = '吴思琪')-[e2:likes]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与电影有关联的人，以及这些人与观看这些电影的其他人的关系。",
        "output": "match(a:person where a.id = '152')-[e]-(b:film)<-[e2:watch]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与forum中国军事论坛和CSDN都存在contain关系的点",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='CSDN') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为course,名为操作系统的点,返回这些点的value",
        "output": "match(a:course where a.name = '操作系统') return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和买家周科有关的商品,再帮我查询和周科查看的其他商品,返回它们",
        "output": "match(a:buyer where a.name = '周科')-[e]-(b:goods), (a:buyer)-[e2:look]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑红有关的人，再找出这些人中郑红认识的人，并将他们返回。",
        "output": "match(a:person where a.name = '郑红')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与account Faker有关系的account的name",
        "output": "match(a:account where a.name='Faker')-[e]-(b:account) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款loan_90存款的账号节点转账的账号",
        "output": "match(a:loan where a.name = 'loan_90')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为徐月的user有friend关系,或有friend的friend关系的post",
        "output": "match(a:user where n.name=徐月)-[e:friend]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有从论坛出发，到帖子结束，并且标签中包含的边。",
        "output": "match(a:forum)-[e:contain]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和处方有关联的药品节点,并根据其权重,id分组,返回权重,id,以及权重减权重的求和值",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.weight, b.id, SUM(b.weight - b.weight) group by b.weight, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为马国强的点喜欢的书",
        "output": "match(a where a.name='马国强')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为赵月和周科的点共同发布的,label为帖子的节点",
        "output": "match(a where a.name = '赵月')-[e:publish]->(b:post)<-[e2:publish]-(c where c.name = '周科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时名称中包含'武汉大学'和'北京大学'的112所大学，按照它们的ID从大到小排序。",
        "output": "match(a:university where a.name = '武汉大学' and a.name = '北京大学') return a order by a.id desc limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为30的编辑发布的书, 并将书有关的书的id的最大值赋值给书(b)的名字, 接着查询书(b)的名字小于30的书关联的书",
        "output": "match(a:publisher where a.id = 30)-[e:publish]->(b:book) let b.name = MAX((b:book)-[e2]-(c:book) => c.id) match(b:book where b.name < 30)-[e3:relates]->(d:book) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为creates,以及f1不是false或f0在719到784之间,且weight是169.48的边",
        "output": "match(a)-[e:creates where (e.f1 <> false or (e.f0 BETWEEN 719 AND 784)) and e.weight = 169.48]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与重庆大学相关的大学，再查询与这些大学位于同一城市的其他城市，并返回它们。",
        "output": "match(a:university where a.name = '重庆大学')-[e]-(b:university), (a:university)-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和person李思琪之间有colleague关系的person",
        "output": "match(a:person where a.name='李思琪')-[e:colleague]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有与微软公司有友谊关系或朋友的朋友关系的个人。",
        "output": "match(a:company where n.name=微软)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,value, 数据为('巴黎',75,667),('北京',50,328)的子查询作为输入表, 以属性value作为相等条件,请帮我找出label为国家,名为越南的点,返回这些点的id",
        "output": "with p as (select * from (VALUES('巴黎',75,667),('北京',50,328)) as t(name,id,value))MATCH (a:country WHERE a.value = p.value AND (a.name = '越南')) RETURN a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为腾讯的公司,以及与其有关的贷款,并返回腾讯的人数和这些贷款的id",
        "output": "match(a:company where name = '腾讯')-[e]-(b:loan) return a.peopleNumber, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询194个名为西虹市首富的点has的类型是tag的节点,且节点id大于62",
        "output": "match(a where a.name='西虹市首富')-[e:has]->(b:tag where b.id > 62) return b limit 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与买家周思思和商品苹果相关的订单节点",
        "output": "match(a:buyer where a.name='周思思')-[e:cancel]-(b:orders)-[e2:contain]-(c:goods where c.name='苹果') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id对29取余的值",
        "output": "return a.id % 29 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找所有与名为吴红的医生有联系或相关联系的处方。",
        "output": "match(a:doctor where n.name=吴红)-[e:relation]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person关联的person,返回其源点的薪资除7370的值,以及目标点的身高加153的平均值",
        "output": "match(a:person)-[e:relates]->(b:person) return a.salary / 7370, AVG(b.height + 153)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person张月的所有friend,的weight除174.00的值",
        "output": "match(a:person where a.name= '张月')-[e:friend]->(b) return e.weight / 174.00",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与医生郑强有关,且与处方Prescription_429有关系的病人节点",
        "output": "match(a:doctor where a.name='郑强')-[e:diagnose]-(b:patient)-[e2:accept]-(c:prescription where c.name='Prescription_429') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person knows的person,返回其源点的salary的最大值加7536的最大值,以及目标点的salary乘9635的值",
        "output": "match(a:person)-[e:knows]->(b:person) return MAX(MAX(a.salary) + 7536), b.salary * 9635",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表452,809,951,740, 以属性id作为相等条件,查询名为李轩的点diagnose的patient,并对这些点的age进行求和",
        "output": "with p as (select * from (VALUES(452),(809),(951),(740)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '李轩')) -[e:doctor_diagnose_patient ]->(b:patient) RETURN SUM(b.age) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和作家黄建国有关的编辑,称为X,再帮我查询和这个X有关联的其他书,以及和X有关联的读者",
        "output": "match(a:author where a.name = '黄建国')-[e]-(b:publisher), (b:publisher)-[e2]-(c:book),(b:publisher)-[e3]-(d:reader) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与合并请求有关系的用户节点,且用户节点的性别不是famale,并返回这些用户的年龄对1取余的平均值,以及用户的年龄加88的平均值",
        "output": "match(a:pullRequest)-[e]->(b:user where b.gender <> 'famale') return AVG(b.age % 1), AVG(b.age + 88)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家的伙伴,或其伙伴的伙伴",
        "output": "match(a:buyer)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的求和值除11减2356.03的和",
        "output": "SUM(SUM(a.id) / 11 - 2356.03)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供与韩建聪有关的观影记录，以及与电影《我不是药神》相关的标签，并将两者一起返回。",
        "output": "match(a:person where a.name = '韩建聪')-[e:watch]->(b:film),(c:film where c.name = '我不是药神')-[e2:has]->(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出张建国喜欢的、由其他人创建的评论。",
        "output": "match(a:person where a.name='张建国')-[e:likes]->(b:comment)<-[e2:creates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户张思思的标签等于伙伴的边,并根据f1升序排列,返回71个",
        "output": "match(a:user where a.name = '张思思')-[e:partner]->(b) return b order by e.f1 asc limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其名字分组,返回名字,以及id对86取余的平均值",
        "output": "match(a:person)-[e:lover]-(b:person) return b.name, AVG(b.id % 86) group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有读者的身高乘162的平均值",
        "output": "match(a:reader) return AVG(a.height * 162)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关系的person节点,且person节点的身高小于等于162,并返回这些person的身高对174取余减id的最小值,以及person的height的最大值对182取余的个数",
        "output": "match(a:person)-[e]->(b:person where b.height <= 162) return MIN(b.height % 174 - b.id), COUNT(MAX(b.height) % 182)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出部门拥有的医生,返回其源点的权重对667取余的个数,以及目标点的id除37的值",
        "output": "match(a:department)-[e:department_has_doctor]->(b:doctor) return COUNT(a.weight % 667), b.id / 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有评论的wordCount的最大值对399取余对760取余的最小值",
        "output": "match(a:comment) return MIN(MAX(a.wordCount) % 399 % 760)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点id是22或名字不等于中国科技大学,边类型是拥有,且目标点id在64到67之间或目标点id不为空的边,返回这些边的源点id乘源点id的和",
        "output": "match(a where a.id = 22 or a.name <> '中国科技大学')-[e:has where (e.targetId BETWEEN 64 AND 67) or (e.targetId is not null)]->(b) return SUM(e.srcId * e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找公司的3跳的环",
        "output": "match(a:company)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person王宏认识的person,和王宏认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '王宏')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person的2跳以内的环",
        "output": "match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(9061,'male',86)作为请求表数据,属性分别为salary,gender,id, 以属性gender作为相等条件,查找和seller王轩有关的buyer,再查找和王轩seller_has_goods的其他goods,返回它们",
        "output": "with p as (select * from (VALUES(9061,'male',86)) as t(salary,gender,id))MATCH (a:seller WHERE a.gender = p.gender AND (a.name = '王轩')) -[e ]-(b:buyer) , (a:seller) -[e2:seller_has_goods ]->(c:goods) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为韩思琪的节点支付的person",
        "output": "match(a where a.name='韩思琪')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和作家徐梅有撰写关系的书,再找出以认识关系关联了徐梅的作家",
        "output": "match(a:author where a.name = '徐梅')-[e:write]->(b:book),(a:author where a.name = '徐梅')<-[e2:knows]-(c:author)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按name分组所有的patient的height，然后按照height升序排序。",
        "output": "match(a:patient) return a.height group by a.name order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询174个city武汉和重庆,共同的friend",
        "output": "match(a:city where a.name='武汉')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='重庆') return b limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与user郑强有likes关系的1度的环",
        "output": "match(a:user where name = '郑强')-[e:likes]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取country id为182的城市的partner，再获取这些城市相关的relation。",
        "output": "match(a:country where id = '182')-[e]-(b:city)-[e2:partner]->(c), (b:city)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "'请找出由Kate支付的人，并返回这个人认识的人的年龄。'",
        "output": "match(a:person where name = 'kate')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person郑月申请的贷款,被其他公司申请的数量",
        "output": "match(a:person where a.name='郑月')-[e:apply]->(b:loan)<-[e2:apply]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出既属于急诊部又属于内科的点",
        "output": "match(a:department where a.name='急诊部')-[e:has]->(b)<-[e2:has]-(c:department where c.name='内科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为186的person关联的评论,和以创造关系关联了这些评论的其他person",
        "output": "match(a:person where a.id = 186)-[e]-(b:comment)<-[e2:creates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找publisher韩伟publish的book,以及likes这些book的reader",
        "output": "match(a:publisher where name = '韩伟')-[e:publish]->(b:book)<-[e2:likes]-(c:reader) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回赵红和徐强共同撰写且类型为书的节点。",
        "output": "match(a where a.name = '赵红')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '徐强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与54个标签为'person'的点有恋人关系且与这些人也有朋友关系的个体。",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person) return c limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询94个身高不为空或薪资大于1983,且薪资为空的person,根据id从大到小排列",
        "output": "match(a:person where ((a.height is not null) or a.salary > 1983) and (a.salary is null)) return a order by a.id desc limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person陈宏有关的软件,称为X,再帮我查询和这个X有关联的其他公司,以及和X有关联的person",
        "output": "match(a:person where a.name = '陈宏')-[e]-(b:software), (b:software)-[e2]-(c:company),(b:software)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为韩科的节点创造的医生或病人",
        "output": "match(a where a.name='韩科')-[e:creates]->(b:doctor | patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有publisher为呐喊的book的价格差和价格除以74的结果",
        "output": "match(a:publisher)-[e]->(b:book where b.name = '呐喊') return b.price - b.price, b.price / 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与用户韩国强有喜欢关系，并与其他标签有包含关系的帖子的值、名称以及用户韩国强的高度和标签的值。",
        "output": "match(a:user where a.name='韩国强')-[e:likes]->(b:post)<-[e2:has]-(c:tag where c.name='其他') return a.height,b.value, b.name,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与医生吴轩和医生王宏相关的部门节点。",
        "output": "match(a:doctor where a.name='吴轩')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='王宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与买家赵伟和商品椅子相关的卖家节点。",
        "output": "match(a:buyer where a.name='赵伟')-[e:consult]-(b:seller)-[e2:has]-(c:goods where c.name='椅子') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有用户的相关者,或其相关者的相关者",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与买家周建聪有咨询关系的3度以内的环",
        "output": "match(a:buyer where name = '周建聪')-[e:consult]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找黄建国学生伙伴的相关联系人。",
        "output": "match(a:student where a.name='黄建国')-[e:partner]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被处方包含数量大于98的药品,记为relationCount,再查询这些药品包含的医生",
        "output": "match(a:medicine) let a.relationCount = COUNT((a:medicine)<-[e:contain]-(b:prescription) => b.id) match(a where a.relationCount > 98)-[e2:contain]->(c:doctor) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为170的点的身高,id",
        "output": "match(a where a.id = 170) return a.height, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Comment_276的节点belong的comment或film或cinema",
        "output": "match(a where a.name='Comment_276')-[e:belong]->(b:comment | film | cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询likes person张思思creates的comment,的person",
        "output": "match(a:person where name = '张思思')-[e:creates]->(b:comment)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与issue ISSUE-141有belong关系的1跳以内的环",
        "output": "match(a:issue where name = 'ISSUE-141')-[e:belong]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height,salary分组,计算age乘58的值",
        "output": "return a.age * 58 group by a.height, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以86作为输入调用personalRank函数,返回id, value",
        "output": "Call PERSONALRANK(86) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,createTime, 数据为('Comment_163',30,2034-09-19),('Comment_437',90,1996-09-02), 源点的id等于输入表id,请帮我查找全部和person点有creates关系的comment节点,且边满足条件srcId等于541,目标comment节点满足条件createTime不等于2000年11月01日",
        "output": "with p as (select * from (VALUES('Comment_163',30,2034-09-19),('Comment_437',90,1996-09-02)) as t(name,id,createTime))MATCH (a:person WHERE a.id = p.id) -[e:person_creates_comment WHERE e.srcId = 541 ]->(b:comment WHERE b.createTime <> '2000-11-01') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与贷款loan_98有关系的贷款的权重",
        "output": "match(a:loan where a.name='loan_98')-[e]-(b:loan) return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,name,id, 数据为(781,'Prescription_118',76),(277,'Prescription_454',74), 以属性name作为相等条件,请帮我查找从patient李梅出发,经过类型是patient_accept_prescription的边,走2到5跳到达的prescription点",
        "output": "with p as (select * from (VALUES(781,'Prescription_118',76),(277,'Prescription_454',74)) as t(weight,name,id))MATCH (a:patient WHERE a.name = p.name AND (a.name = '李梅')) -[e:patient_accept_prescription ]->{2,5}(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与贷款违约名称有关联的公司，这些公司通过apply关系连接。",
        "output": "match(a:loan where a.name='defaultName')<-[e:apply]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出user周伟likes的repository,以及belong这些repository的pullRequest, 令repository的id等于user的gender,令pullRequest的id等于repository的stars,令repository的id等于pullRequest的createTime的最小值, 返回user的gender,repository的id,pullRequest的createTime",
        "output": "match(a:user where name = '周伟')-[e:likes]->(b:repository)<-[e2:belong]-(c:pullRequest) let b.id = a.gender,let c.id = b.stars,let b.id = MIN(c.createTime) return a.gender,b.id,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与seller Bob和黄红都存在has关系的点",
        "output": "match(a:seller where a.name='Bob')-[e:has]->(b)<-[e2:has]-(c:seller where c.name='黄红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询patient Tom的全部relation,的targetId的最小值加4的值",
        "output": "match(a:patient where a.name= 'Tom')-[e:relation]->(b) return MIN(e.targetId) + 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person关联数量大于43的person,记为relationCount,再查询这些person关联的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 43)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回和department内科有department_has_doctor关系的doctor,再返回以department_has_doctor关系关联了内科的doctor",
        "output": "match(a:department where a.name = '内科')-[e:department_has_doctor]->(b:doctor),(a:department where a.name = '内科')<-[e2:department_has_doctor]-(c:doctor)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与电影功夫有拥有关系的1度的环",
        "output": "match(a:film where name = '功夫')-[e:has]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为日本的点包含的城市,并对这些城市的人数进行求和",
        "output": "match(a where a.name='日本')-[e:contain]->(b:city) return SUM(b.peopleNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点身高为空,薪资大于1013,或名字为马红,目标点id在32到64之间,名字等于Post_306且语言等于German,且标签为发布的边",
        "output": "match(a where ((a.height is null) and a.salary > 1013) or a.name = '马红')-[e:publish]->(b where (b.id BETWEEN 32 AND 64) and b.name = 'Post_306' and b.lang = 'German') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和用户郑建聪之间有创造关系的事项",
        "output": "match(a:user where a.name='郑建聪')-[e:creates]->(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,value, 数据为('Bilibili',36,67),('Bilibili',33,709), 源点的value等于输入表value,找出和大学有关联的城市节点,并根据其面积,人数分组,返回面积,人数,以及value的数量加974的个数",
        "output": "with p as (select * from (VALUES('Bilibili',36,67),('Bilibili',33,709)) as t(name,id,value))MATCH (a:university WHERE a.value = p.value) -[e:university_belong_city ]-(b:city) RETURN b.area, b.peopleNumber, COUNT(COUNT(b.value) + 974) GROUP BY b.area, b.peopleNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有类型为账号或公司或person的点",
        "output": "match(a:account | company | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出198个与杜伟和孙梅都存在关系的标签或电影院节点",
        "output": "match(a where a.name='杜伟')-[e]->(b:tag | cinema)<-[e2]-(c where c.name='孙梅') return b limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询127个书悲惨世界和白夜行,共同的引用",
        "output": "match(a:book where a.name='悲惨世界')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='白夜行') return b limit 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为韩宏的,height为空的partner,返回这些partner的name,和边的targetId,weight,srcId",
        "output": "match(a where a.name='韩宏')-[e:partner]->(b where (b.height is null)) return b.name,e.targetId, e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下徐强的朋友的朋友关系",
        "output": "match(a:user where a.name='徐强')-[e:friend]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以632,164作为请求点id, 源点的id等于输入表id,查询person吴建聪的全部标签为relation的边,并根据targetId升序排列,返回122个",
        "output": "with p as (select * from (VALUES(632),(164)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴建聪')) -[e:relation ]->(b) RETURN b ORDER BY e.targetId LIMIT 122",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为城市且名称包含'巴黎'或'深圳'的点的所有共同伙伴节点。",
        "output": "match(a:city where a.name='巴黎')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='深圳') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,gender,height, 数据为(92,'male',184),(54,'male',196),(76,'male',191),(48,'male',168)的子查询作为输入表, 以属性id作为相等条件,请帮我找出所有person以名字,年龄,薪资分组的薪资, 根据薪资从大到小排序",
        "output": "with p as (select * from (VALUES(92,'male',184),(54,'male',196),(76,'male',191),(48,'male',168)) as t(id,gender,height))MATCH (a:person WHERE a.id = p.id) RETURN a.salary GROUP BY a.name, a.age, a.salary ORDER BY a.salary DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回用户的三角的环,边类型为喜欢, 并返回这些点的id",
        "output": "match(a:user)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和用户马思琪有2到4跳关系的帖子",
        "output": "match(a:user where a.name='马思琪')-[e]->{2,4}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点id乘1是6899,边标签为喜欢,且权重的最小值小于546且权重的平均值等于698的边,返回这些边的srcId的个数乘0的求和值",
        "output": "match(a where a.id * 1 = 6899)-[e:likes where MIN(e.weight) < 546 and AVG(e.weight) = 698]->(b) return SUM(COUNT(e.srcId) * 0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为马若涵的节点关联的person",
        "output": "match(a where a.name='马若涵')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询person孙月knows的person节点knows的person",
        "output": "match(a:person where a.name = '孙月')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与贷款loan_21有关系的person, 返回和这些person有关联的账号的,id减63的数量",
        "output": "match(a:loan where a.name= 'loan_21')-[e]-(b:person)-[e2]-(c:account) return COUNT(c.id - 63)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表684,75,995,569,394, 源点的id等于输入表id,返回全部源点label为university,边label为university_cooperate_company的边,返回这些边的weight减weight减190.61的最大值,和weight对138.48取余的最小值",
        "output": "with p as (select * from (VALUES(684),(75),(995),(569),(394)) as t(id)) MATCH (a:university WHERE a.id = p.id) -[e:university_cooperate_company ]->(b) RETURN MAX(e.weight - e.weight - 190.61), MIN(e.weight % 138.48) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与电影院横店影院有关系的电影, 返回和这些电影有关联的评论的,字数减132的平均值",
        "output": "match(a:cinema where a.name= '横店影院')-[e]-(b:film)-[e2]-(c:comment) return AVG(c.wordCount - 132)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑宏有联系的人",
        "output": "match(a:person where a.name='郑宏')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找comment Comment_197 belong的film,被其他comment belong的数量",
        "output": "match(a:comment where a.name='Comment_197')-[e:belong]->(b:film)<-[e2:belong]-(c:comment) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询急诊部的医生，即doctor,以及他们所属的department,返回这些点的名称。",
        "output": "match(a where a.name = '急诊部')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与药品有关系的部门节点,且部门节点的地址不等于东区,并返回这些部门的id除id的最小值,以及部门的id对43取余的最大值",
        "output": "match(a:medicine)-[e]->(b:department where b.address <> '东区') return MIN(b.id / b.id), MAX(b.id % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询论坛中帖子被其他用户喜欢的数量。",
        "output": "match(a:forum where a.name='知网')-[e:contain]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有属于person到company的边。",
        "output": "match(a:person)-[e:belong]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出188个名为中国军事论坛的点包含的类型为用户的节点,且其薪资小于6541",
        "output": "match(a where a.name='中国军事论坛')-[e:contain]->(b:user where b.salary < 6541) return b limit 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是论坛的点,并根据人数从大到小排列",
        "output": "match(a:forum) return a order by a.peopleNumber desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为吴月的节点watch的tag或film或comment",
        "output": "match(a where a.name='吴月')-[e:watch]->(b:tag | film | comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以134,250,1,999作为请求点id, 源点的id等于输入表id,查找和loan defaultName有关的company,再查找和 defaultName loan_deposit_account的其他account,返回它们",
        "output": "with p as (select * from (VALUES(134),(250),(1),(999)) as t(id)) MATCH (a:loan WHERE a.id = p.id AND (a.name = 'defaultName')) -[e ]-(b:company) , (a:loan) -[e2:loan_deposit_account ]->(c:account) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表733,485, 源点的id等于输入表id,请帮我查找所有id为25的software关联的software,和以buy关系关联了这些software的其他person",
        "output": "with p as (select * from (VALUES(733),(485)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.id = '25')) -[e ]-(b:software) <-[e2:person_buy_software ]-(c:person) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person购买的软件, 令软件的id的值等于购买软件的person的名字的最小值, 再查找软件使用的软件",
        "output": "match(a:person)-[e:buy]->(b:software) let b.id = MIN((b:software)<-[e2:buy]-(c:person) => c.name) match(b:software)-[e3:uses]->(d:software) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为张国强的卖家,以及与其有关的买家,并返回张国强的薪资和这些买家的薪资",
        "output": "match(a:seller where name = '张国强')-[e]-(b:buyer) return a.salary, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出和华为有合作关系的大学，以及和巴黎有包含关系的大学。",
        "output": "match(a:company where a.name = '华为')-[e:cooperate]->(b:university),(c:city where c.name = '巴黎')-[e2:contain]->(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与patient黄宏有关系的department的name",
        "output": "match(a:patient where a.name='黄宏')-[e]-(b:department) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被电影院人人影城上映的电影",
        "output": "match(a:film)<-[e:releases]-(b:cinema where b.name='人人影城') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出在Forum知网和知乎都包含的共同点。",
        "output": "match(a:forum where a.name='知网')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='知乎') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师杜若涵教的课程,以及选择这些课程的学生",
        "output": "match(a:teacher where name = '杜若涵')-[e:teach]->(b:course)<-[e2:selects]-(c:student) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询教师吴宏的标签为朋友的边,并根据源点id从大到小排列,返回184个",
        "output": "match(a:teacher where a.name = '吴宏')-[e:friend]->(b) return b order by e.srcId desc limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有源点标签等于forum,目标点标签等于person,标签等于forum_contain_person的边",
        "output": "match(a:forum)-[e:forum_contain_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为韩建聪的医生,以及与其有关的医生,并返回韩建聪的id和这些医生的年龄",
        "output": "match(a:doctor where name = '韩建聪')-[e]-(b:doctor) return a.id, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和post Post_411有关系的post或forum,返回这些点的height,gender",
        "output": "match(a:post where a.name='Post_411')-[e]-(b:post | forum) return b.height, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为166的person有关的电影的相关者, 再帮我查询和电影有关系的朋友",
        "output": "match(a:person where id = 166)-[e]-(b:film)-[e2:relation]->(c), (b:film)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以喜欢关系关联了仓库Mybatis的用户",
        "output": "match(a:repository where a.name='Mybatis')<-[e:likes]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出华为创建的软件，以及华为所属的团队或个人，返回两者。",
        "output": "match(a where a.name = '华为')-[e:creates]->(b:software),(a where a.name = '华为')<-[e2:belong]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找11个与Comment_303和Comment_461都存在关系的评论或电影院或电影节点",
        "output": "match(a where a.name='Comment_303')-[e]->(b:comment | cinema | film)<-[e2]-(c where c.name='Comment_461') return b limit 11",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的三角的环,边标签等于支付, 并返回这些点的id",
        "output": "match(a:person)-[e:pay]->(b)-[e2:pay]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查询类型是company_cooperate_university,且满足条件f0是579,f0为空,或weight大于等于164.38的边",
        "output": "match(a)-[e:company_cooperate_university where (e.f0 = 579 and (e.f0 is null)) or e.weight >= 164.38]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据price分组,计算value加317的值",
        "output": "return a.value + 317 group by a.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回user周雪 publish的post,返回post has的tag的value的最大值加802的数量",
        "output": "match(a:user where name = '周雪')-[e:publish]->(b:post)-[e2:has]->(c:tag) return COUNT(MAX(c.value) + 802)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为陈红的点认识的person",
        "output": "match(a where a.name='陈红')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以包含关系关联了用户韩国强的论坛",
        "output": "match(a:user where a.name='韩国强')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表903,893,218, 以属性id作为相等条件,查找id为120的点的价值",
        "output": "with p as (select * from (VALUES(903),(893),(218)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '120')) RETURN a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与Order_185和Order_307有关系的20个卖家节点。",
        "output": "match(a where a.name='Order_185')-[e]->(b:seller)<-[e2]-(c where c.name='Order_307') return b limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为大众影院的点上映的所有电影,并对这些电影的id进行求和",
        "output": "match(a where a.name='大众影院')-[e:releases]->(b:film) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点label为person,边label为观看,并且f0在743到848之间的边",
        "output": "match(a:person)-[e:watch where (e.f0 BETWEEN 743 AND 848)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被账号BIN转账的账号",
        "output": "match(a:account)<-[e:transfer]-(b:account where b.name='BIN') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资分组,计算年龄除99的和",
        "output": "return SUM(a.age / 99) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有源点标签等于account,边标签等于account_repay_loan,且timeStamp大于173.04,f1等于true,或f1是false的边",
        "output": "match(a:account)-[e:account_repay_loan where (e.timeStamp > 173.04 and e.f1 = true) or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找某个用户（age不是34或id大于等于43)发布的帖子名称，以及这些帖子包含的标签名称。",
        "output": "match(a:user where a.age <> 34 or a.id >= 43)-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询取消Order_356订单的买家。",
        "output": "match(a:orders where a.name='Order_356')<-[e:cancel]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为李月和王月的,类型为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='李月')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='王月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出book的1跳以内的环",
        "output": "match(a:book)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出34个名字等于Tugraph,创建时间不是2001年04月14日,或星数小于426的仓库,根据星数从大到小排列",
        "output": "match(a:repository where (a.name = 'Tugraph' and a.createTime <> '2001-04-14') or a.stars < 426) return a order by a.stars desc limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person马强有knows关系的2跳的环",
        "output": "match(a:person where name = '马强')-[e:knows]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person杜科有关的software,称为X,再查询和这个X有关联的其他software,以及和X有关联的person",
        "output": "match(a:person where a.name = '杜科')-[e]-(b:software), (b:software)-[e2]-(c:software),(b:software)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前130个满足条件value为空的orders",
        "output": "match(a:orders where (a.value is null)) return a limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为person,目标点label为film,label为person的边",
        "output": "match(a:person)-[e:person]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查一下孙国强申请的贷款，有多少笔是由其他账号还款的。",
        "output": "match(a:person where a.name='孙国强')-[e:apply]->(b:loan)<-[e2:repay]-(c:account) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以383作为请求点id, 源点的id等于输入表id,帮我查询所有源点类型是forum,边类型是forum_contain_person,并且满足条件targetId小于等于175或f1不是true,且f0不是974的边",
        "output": "with p as (select * from (VALUES(383)) as t(id)) MATCH (a:forum WHERE a.id = p.id) -[e:forum_contain_person WHERE (e.targetId <= 175 OR e.f1 <> TRUE) AND e.f0 <> 974 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person黄红knows的person,和黄红commits的software",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '黄红')-[e2:commits]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表165, 源点的id等于输入表id,请帮我查找reader的2度以内的环",
        "output": "with p as (select * from (VALUES(165)) as t(id)) MATCH (a:reader WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以122,650,365,967作为请求点id, 以属性id作为相等条件,请帮我查找名为陈梅的点accept的所有prescription,并对这些点的createTime进行求和",
        "output": "with p as (select * from (VALUES(122),(650),(365),(967)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '陈梅')) -[e:patient_accept_prescription ]->(b:prescription) RETURN SUM(b.createTime) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,name,size, 数据为(981,'体育学院',72), 以属性size作为相等条件,给出前139个gender等于male且gender是famale的student",
        "output": "with p as (select * from (VALUES(981,'体育学院',72)) as t(value,name,size))MATCH (a:student WHERE a.size = p.size AND (a.gender = 'male' AND a.gender = 'famale')) RETURN a LIMIT 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以has关系关联了tag喜剧的film",
        "output": "match(a:tag where a.name='喜剧')<-[e:has]-(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于帖子的点,返回8个",
        "output": "match(a:post) return a limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到从person类型的源点到贷款类型的target点，且类型为申请的边。",
        "output": "match(a:person)-[e:apply]->(b:loan) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以286作为请求点id, 以属性id作为相等条件,查询forum中国军事论坛 contain的post,返回post has的tag的value加201的值 ",
        "output": "with p as (select * from (VALUES(286)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (name = '中国军事论坛')) -[e:forum_contain_post ]->(b:post) -[e2:post_has_tag ]->(c:tag) RETURN c.value + 201 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和大学华中科技大学有关的大学,再查找和华中科技大学合作的其他公司,返回它们",
        "output": "match(a:university where a.name = '华中科技大学')-[e]-(b:university), (a:university)-[e2:cooperate]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前126个标签等于认识的边",
        "output": "match(a)-[e:knows]->(b) return e limit 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为person,名为杜月的点,返回这些点的薪资,id",
        "output": "match(a:person where a.name = '杜月') return a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以646作为请求点id, 以属性id作为相等条件,查找源点薪资大于4286,边类型是person_likes_comment,且权重不为空,f0在772到968之间,或f0小于849的边,返回这些边的f0的个数加547的值",
        "output": "with p as (select * from (VALUES(646)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.salary > 4286)) -[e:person_likes_comment WHERE e.weight IS NOT NULL AND e.f0 BETWEEN ASYMMETRIC 772 AND 968 OR e.f0 < 849 ]->(b) RETURN COUNT(e.f0) + 547 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person周强有关的人",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='周强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与city深圳和杭州都存在city_contain_company关系的点",
        "output": "match(a:city where a.name='深圳')-[e:city_contain_company]->(b)<-[e2:city_contain_company]-(c:city where c.name='杭州') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与TheShy和XXD账号相关的贷款节点",
        "output": "match(a:account where a.name='TheShy')-[e:repay]-(b:loan)-[e2:deposit]-(c:account where c.name='XXD') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与卖家孙雪有关的买家，再查询她拥有的其他商品，返回它们。",
        "output": "match(a:seller where a.name = '孙雪')-[e]-(b:buyer), (a:seller)-[e2:has]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找类型为prescription的点",
        "output": "match(a:prescription) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和medicine散利痛有关的doctor,称为X,再帮我查询和这个X有关联的其他patient,以及和X有关联的medicine",
        "output": "match(a:medicine where a.name = '散利痛')-[e]-(b:doctor), (b:doctor)-[e2]-(c:patient),(b:doctor)-[e3]-(d:medicine) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person何建国购买的软件节点使用的软件",
        "output": "match(a:person where a.name = '何建国')-[e:buy]->(b:software)-[e2:uses]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以creates关系关联了pullRequest PR-246的user",
        "output": "match(a:pullRequest where a.name='PR-246')<-[e:creates]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有与哪些城市有属于关系的其他大学。",
        "output": "match(a:city where a.id = '38')-[e]-(b:city)<-[e2:belong]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为知乎的forum有relation关系,或有relation的relation关系的user",
        "output": "match(a:forum where n.name=知乎)-[e:relation]->{1,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有在地址不是A座且规模不大于828的电影院正在上映的电影及其对应的标签名称",
        "output": "match(a:cinema where a.size <= 828 and a.address <> 'A座')-[e:releases]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为117的account关联的loan，再查询与loan相关的relation。",
        "output": "match(a:account where id = '117')-[e]-(b:loan)-[e2:relation]->(c), (b:loan)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和名为陈月的person有relation关系,或有relation的relation关系的person",
        "output": "match(a:person where n.name=陈月)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与东京有归属关系，并且与伦敦有包含关系的国家。返回这些国家的价值、东京的城市ID和伦敦的面积。",
        "output": "match(a:city where a.name='东京')-[e:belong]->(b:country)<-[e2:contain]-(c:city where c.name='伦敦') return a.id,b.value,c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找以uses关系关联了software Hadoop的software",
        "output": "match(a:software where a.name='Hadoop')<-[e:software_uses_software]-(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询reader陈建国likes的book,以及knows这些book的book",
        "output": "match(a:reader where name = '陈建国')-[e:likes]->(b:book)<-[e2:knows]-(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部教师以身高分组的年龄, 根据年龄从大到小排序",
        "output": "match(a:teacher) return a.age group by a.height order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据weight分组,计算id对68取余的平均值",
        "output": "return AVG(a.id % 68) group by a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型为person,目标点类型为person,类型为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person喜欢的评论, 令评论的创建时间的值等于创造评论的person的性别的平均值, 再查找评论属于的电影",
        "output": "match(a:person)-[e:likes]->(b:comment) let b.createTime = AVG((b:comment)<-[e2:creates]-(c:person) => c.gender) match(b:comment)-[e3:belong]->(d:film) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找152个与百度贴吧和知网都存在关系的tag或forum节点",
        "output": "match(a where a.name='百度贴吧')-[e]->(b:tag | forum)<-[e2]-(c where c.name='知网') return b limit 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(166,'famale','张思琪')作为请求表数据,属性分别为height,gender,name, 源点的name等于输入表name,找出person李建国 支付的person,返回person 认识的person的年龄乘年龄的值 ",
        "output": "with p as (select * from (VALUES(166,'famale','张思琪')) as t(height,gender,name))MATCH (a:person WHERE a.name = p.name AND (name = '李建国')) -[e:person_pay_person ]->(b:person) -[e2:person_knows_person ]->(c:person) RETURN c.age * c.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为Hive的person或公司或软件,以及与其有关的person,并返回Hive的是否开源和这些person的薪资",
        "output": "match(a:person | company | software where name = 'Hive')-[e]-(b:person) return a.openSource, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询大学华中科技大学 拥有的部门,返回部门 拥有的教师的身高对163取余的和",
        "output": "match(a:university where name = '华中科技大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return SUM(c.height % 163)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为70的person关联的person,和以relates关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 70)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和买家有关联的卖家节点,并根据其薪资分组,返回薪资,以及salary的最大值对4464取余的平均值",
        "output": "match(a:buyer)-[e:consult]-(b:seller) return b.salary, AVG(MAX(b.salary) % 4464) group by b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和电影院好视影院有关的person,再返回和好视影院上映的其他电影,返回它们",
        "output": "match(a:cinema where a.name = '好视影院')-[e]-(b:person), (a:cinema)-[e2:releases]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询合并请求属于的仓库, 令仓库的星数的值等于属于仓库的合并请求的变更文件数的最小值, 再查找仓库拥有的用户",
        "output": "match(a:pullRequest)-[e:belong]->(b:repository) let b.stars = MIN((b:repository)<-[e2:belong]-(c:pullRequest) => c.changeFileNumber) match(b:repository)-[e3:has]->(d:user) return b.stars, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为TheShy和Geaflow123的,标签等于账号的点公共的朋友节点的名单",
        "output": "match(a:account where a.name='TheShy')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Geaflow123') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和publisher陈科有publish关系的book,再请帮我查找以publish关系关联了陈科的book",
        "output": "match(a:publisher where a.name = '陈科')-[e:publish]->(b:book),(a:publisher where a.name = '陈科')<-[e2:publish]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person赵红有关的person,称为X,再给出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '赵红')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与合并请求有关系的用户节点,且用户节点的id小于等于155,并返回这些用户的薪资对8609取余的值,以及用户的id对44取余的值",
        "output": "match(a:pullRequest)-[e]->(b:user where b.id <= 155) return b.salary % 8609, b.id % 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和repository点有has关系的user节点,且边满足条件weight小于154,目标user节点id为空",
        "output": "match(a:repository)-[e:has where e.weight < 154]->(b:user where (b.id is null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为杜伟和王思思的点共同教过的，且标签为course的节点。",
        "output": "match(a where a.name = '杜伟')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '王思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与用户何伟有创造关系的3度的环",
        "output": "match(a:user where name = '何伟')-[e:creates]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询作家李思思认识的作家, 令作家(b)的性别等于作家(a)的身高除150,令作家的名字等于作家的身高, 返回作家(a)的名字, 作家(b)的薪资",
        "output": "match(a:author where a.name='李思思')-[e:knows]->(b:author) let b.gender = a.height / 150,let b.name = b.height return a.name,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person杜建国有关系的person的id",
        "output": "match(a:person where a.name='杜建国')-[e]-(b:person) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询部门体育学院的标签等于伙伴的边,并根据f1降序排列,返回177个",
        "output": "match(a:department where a.name = '体育学院')-[e:partner]->(b) return b order by e.f1 desc limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除72的值",
        "output": "a.age / 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询喜欢仓库FSM的用户,和这些用户创造的合并请求",
        "output": "match(a:repository where name = 'FSM')<-[e:likes]-(b:user)-[e2:creates]->(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找赵月医生开的处方，返回处方中药品的名称、剂量和ID。",
        "output": "match(a:doctor where name = '赵月')-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return c.name, c.weight, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点label为company,边label为cooperate的边,返回这些边的srcId加srcId对166取余的值,和srcId对73取余对152.38取余减f0乘95的值",
        "output": "match(a:company)-[e:cooperate]->(b) return e.srcId + e.srcId % 166, (e.srcId % 73 % 152.38 - e.f0) * 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有id为191的学生关联的部门,和以拥有关系关联了这些部门的其他大学",
        "output": "match(a:student where a.id = 191)-[e]-(b:department)<-[e2:has]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为喜剧的tag,并返回它们的名称。",
        "output": "match(a:tag where a.name = '喜剧') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与韩轩是同事的人，以及与韩轩是朋友的人。",
        "output": "match(a:person where a.name = '韩轩')-[e:colleague]->(b:person),(a:person where a.name = '韩轩')<-[e2:friend]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为马思思的点的,名字是大学英语且学分大于等于4的相关者,返回这些相关者的学分,和边的f0",
        "output": "match(a where a.name='马思思')-[e:relation]->(b where b.name = '大学英语' and b.credit >= 4) return b.credit,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找论坛的3跳的环",
        "output": "match(a:forum)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按名称、ID和人数对论坛进行分组，然后根据创建时间升序排序。",
        "output": "match(a:forum) return a.createTime group by a.name, a.id, a.peopleNumber order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找与person李雪和person孙红都有关系的person节点",
        "output": "match(a:person where a.name='李雪')-[e:lover]-(b:person)-[e2:family]-(c:person where c.name='孙红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为计算机体系结构的课程,以及与其有关的大学,并返回计算机体系结构的名字和这些大学的名字",
        "output": "match(a:course where name = '计算机体系结构')-[e]-(b:university) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person的partner,或其partner的partner",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表377,208, 以属性id作为相等条件,给出与person周建聪有关系的cinema的address",
        "output": "with p as (select * from (VALUES(377),(208)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '周建聪')) -[e ]-(b:cinema) RETURN b.address ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请告诉我作家韩月所著的书籍与其他书籍之间的关联数量",
        "output": "match(a:author where a.name='韩月')-[e:write]->(b:book)<-[e2:relates]-(c:book) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找仓库拥有的合并请求,返回其源点的星数加星数的求和值,以及目标点的id加7的值",
        "output": "match(a:repository)-[e:has]->(b:pullRequest) return SUM(a.stars + a.stars), b.id + 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出共同朋友，他们都是被标记为'person'的黄轩和何思琪。",
        "output": "match(a:person where a.name='黄轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='何思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person李伟有关的person,再返回和李伟family的其他person,返回它们",
        "output": "match(a:person where a.name = '李伟')-[e]-(b:person), (a:person)-[e2:family]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "权重除599减982的最小值",
        "output": "MIN(a.weight / 599 - 982)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回167个名为马建国的点支付的标签为person的节点,且节点名字不等于黄红且薪资的求和值大于76",
        "output": "match(a where a.name='马建国')-[e:pay]->(b:person where b.name <> '黄红' and SUM(b.salary) > 76) return b limit 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为张国强的电影院,以及与其有关的电影院,并返回张国强的id和这些电影院的地址",
        "output": "match(a:cinema where name = '张国强')-[e]-(b:cinema) return a.id, b.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与郑国强和黄宏都有关的人。",
        "output": "match(a:person where a.name='郑国强')-[e:colleague]-(b:person)-[e2:friend]-(c:person where c.name='黄宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,height, 数据为(30,2909,178),(65,6601,161),(45,9532,165)的子查询作为输入表, 以属性salary作为相等条件,给出102个price在15到23之间的medicine,根据price从大到小排列",
        "output": "with p as (select * from (VALUES(30,2909,178),(65,6601,161),(45,9532,165)) as t(id,salary,height))MATCH (a:medicine WHERE a.salary = p.salary AND a.price BETWEEN ASYMMETRIC 15 AND 23) RETURN a ORDER BY a.price DESC LIMIT 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家周思琪取消的订单, 令买家的性别等于买家的id,令买家的id等于买家的薪资乘9948,令买家的名字等于订单的id加38的最小值, 返回买家的性别, 订单的价值",
        "output": "match(a:buyer where a.name='周思琪')-[e:cancel]->(b:orders) let a.gender = a.id,let a.id = a.salary * 9948,let a.name = MIN(b.id + 38) return a.gender,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,age, 数据为('陈红',46,60),('Sam',57,34),('杜建聪',62,90),('黄思思',8,86), 以属性name作为相等条件,返回和person何伟有关的person,再返回和何伟person_pay_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES('陈红',46,60),('Sam',57,34),('杜建聪',62,90),('黄思思',8,86)) as t(name,id,age))MATCH (a:person WHERE a.name = p.name AND (a.name = '何伟')) -[e ]-(b:person) , (a:person) -[e2:person_pay_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表649,401,179, 源点的id等于输入表id,查找与城市纽约有关系的大学, 返回和这些大学有关联的公司的,id的求和值除1乘693的最小值",
        "output": "with p as (select * from (VALUES(649),(401),(179)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '纽约')) -[e ]-(b:university) -[e2 ]-(c:company) RETURN MIN(SUM(c.id) / 1 * 693) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与微软合作的大学节点，该节点又与另一家公司合作。",
        "output": "match(a:company where a.name = '微软')-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有person类型的源点，拥有边的关系。返回这些边的源点id对120取余的结果，以及f0乘以自身的最小值。",
        "output": "match(a:person)-[e:own]->(b) return e.srcId % 120, MIN(e.f0 * e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与账号XiaoHu有转账关系并与其贷款defaultName有还款关系的账号ID、XiaoHu账号的价值和defaultName贷款的金额。",
        "output": "match(a:account where a.name='XiaoHu')-[e:transfer]->(b:account)<-[e2:repay]-(c:loan where c.name='defaultName') return a.value,b.id,c.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出皮肤科部门中拥有处方Prescription_469的医生，返回这些医生的性别、名字、部门皮肤科名称和处方ID。",
        "output": "match(a:department where a.name='皮肤科')-[e:has]->(b:doctor)<-[e2:creates]-(c:prescription where c.name='Prescription_469') return a.name,b.gender, b.name,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足以下条件的company：id为138且加26小于10，或者id在42到44之间，或者id不为空，并按照peopleNumber升序排列。",
        "output": "match(a:company where (a.id + 26 < 10 and (a.id BETWEEN 42 AND 44)) or (a.id is not null)) return a order by a.peopleNumber asc limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,value分组,计算id除id的值",
        "output": "return a.id / a.id group by a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为57的person有关的person的伙伴, 再查找和person有关系的相关者",
        "output": "match(a:person where id = 57)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询仓库JavaGuid拥有的合并请求,以及创造这些合并请求的用户",
        "output": "match(a:repository where name = 'JavaGuid')-[e:has]->(b:pullRequest)<-[e2:creates]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和名为皮肤科的部门有伙伴关系,或有伙伴的伙伴关系的医生",
        "output": "match(a:department where n.name=皮肤科)-[e:partner]->{1,2}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有性别不是女性或身高超过92厘米的男性编辑发布的书，以及这些书的认识书。",
        "output": "match(a:publisher where a.gender <> 'famale' or a.height / 175 > 92)-[e:publish]->(b:book)-[e2:knows]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出被doctor郑梅diagnose的patient",
        "output": "match(a:patient)<-[e:doctor_diagnose_patient]-(b:doctor where b.name='郑梅') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回浙江大学所在城市的数量，该城市被其他国家包含。",
        "output": "match(a:university where a.name='浙江大学')-[e:belong]->(b:city)<-[e2:contain]-(c:country) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时满足以下条件的点：标签为person,与person有belong关系且所属公司，与这些公司有employee关系且购买软件。",
        "output": "match(a:person)-[e:belong]->(b:company)-[e2:employee]->(c:person)-[e3:buy]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person马红关联的person,和马红关联的person",
        "output": "match(a:person)<-[e:relates]-(b:person where name = '马红')-[e2:relates]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资对8579取余的平均值",
        "output": "AVG(a.salary % 8579)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有reader的点，按照age降序排序。",
        "output": "match(a:reader) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有用户的相关者,或其相关者的相关者",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回55个薪资不为空或身高在179到181之间,且身高不为空的person,根据身高从小到大排列",
        "output": "match(a:person where ((a.salary is not null) or (a.height BETWEEN 179 AND 181)) and (a.height is not null)) return a order by a.height asc limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person张月有关的person,称为X,再给出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '张月')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找卖家吴若涵回答的买家节点创造的订单",
        "output": "match(a:seller where a.name = '吴若涵')-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出名为其他的tag,以及与其有关的user,并返回其他的value和这些user的name",
        "output": "match(a:tag where name = '其他')-[e]-(b:user) return a.value, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与名为XiaoHu的用户有好友关系或互为好友的用户的账号。",
        "output": "match(a:account where n.name=XiaoHu)-[e:friend]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找名为马建国的,createTime不等于2023年01月06日且lang不是English的relation,返回这些relation的wordCount,和边的timeStamp,f1",
        "output": "match(a where a.name='马建国')-[e:relation]->(b where b.createTime <> '2023-01-06' and b.lang <> 'English') return b.wordCount,e.timeStamp, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与黄国强和杜建聪都有关联的50种药品。",
        "output": "match(a where a.name='黄国强')-[e]->(b:medicine)<-[e2]-(c where c.name='杜建聪') return b limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高乘152的值",
        "output": "a.height * 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,level,value, 数据为('四川大学',1,142),('北京大学',3,952),('中国科技大学',4,691),('四川大学',1,161)的子查询作为输入表, 源点的name等于输入表name,查找168个名为伦敦的点contain的label为company的节点,且节点name不等于阿里且value不为空",
        "output": "with p as (select * from (VALUES('四川大学',1,142),('北京大学',3,952),('中国科技大学',4,691),('四川大学',1,161)) as t(name,level,value))MATCH (a WHERE a.name = p.name AND (a.name = '伦敦')) -[e:city_contain_company ]->(b:company WHERE b.name <> '阿里' AND b.value IS NOT NULL) RETURN b LIMIT 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部student以height分组的salary, 根据salary从大到小排序",
        "output": "match(a:student) return a.salary group by a.height order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有类型为用户的点",
        "output": "match(a:user) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按薪资从低到高，找出所有按照身高、薪资和姓名分组的薪资信息。",
        "output": "match(a:person) return a.salary group by a.height, a.salary, a.name order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为4的person观看的电影, 并将电影有关的评论的id的平均值赋值给电影的价值, 接着查询电影的价值小于4的电影拥有的标签",
        "output": "match(a:person where a.id = 4)-[e:watch]->(b:film) let b.value = AVG((b:film)-[e2]-(c:comment) => c.id) match(b:film where b.value < 4)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部与person黄建国有关系的person的性别",
        "output": "match(a:person where a.name='黄建国')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出提交软件Hive使用的软件,的person",
        "output": "match(a:software where name = 'Hive')-[e:uses]->(b:software)<-[e2:commits]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表967,191,752,258,35, 以属性id作为相等条件,请帮我找出全部名为大众影院的点releases的film",
        "output": "with p as (select * from (VALUES(967),(191),(752),(258),(35)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '大众影院')) -[e:cinema_releases_film ]->(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person何月之间有invest关系的company",
        "output": "match(a:person where a.name='何月')-[e:invest]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除60加id的值",
        "output": "a.id / 60 + a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为吴梅和何宏的,类型为person的点公共的同事节点的名单",
        "output": "match(a:person where a.name='吴梅')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='何宏') return b.name",
        "history": []
    }
]