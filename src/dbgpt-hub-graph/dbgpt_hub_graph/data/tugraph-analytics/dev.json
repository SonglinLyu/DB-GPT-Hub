[
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有关于user或user的relationship的记录。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些与'cinema好视影院'有'releases'关系，并且与'tag文艺'有'has'关系的'film'节点。请返回这些'film'的'value'、'id'、'category'以及'cinema好视影院'的'address'和'tag文艺'的'value'。",
        "output": "match(a:cinema where a.name='好视影院')-[e:releases]->(b:film)<-[e2:has]-(c:tag where c.name='文艺') return a.address,b.value, b.id, b.category,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表409,421,783,238,376, 以属性id作为相等条件,给出全部company以id分组的scale, 根据scale从大到小排序",
        "output": "with p as (select * from (VALUES(409),(421),(783),(238),(376)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a.scale GROUP BY a.id ORDER BY a.scale DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为4的department has的teacher, 并将teacher有关的student的name的最大值赋值给teacher的salary, 接着查询teacher的salary小于4的teacher teach的course",
        "output": "match(a:department where a.id = 4)-[e:has]->(b:teacher) let b.salary = MAX((b:teacher)-[e2]-(c:student) => c.name) match(b:teacher where b.salary < 4)-[e3:teach]->(d:course) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和名为Flink的repository有partner关系,或有partner的partner关系的user",
        "output": "match(a:repository where n.name=Flink)-[e:partner]->{1,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为徐雪的点接受的处方,并对这些处方的权重进行求和",
        "output": "match(a where a.name='徐雪')-[e:accept]->(b:prescription) return SUM(b.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于teacher的点",
        "output": "match(a:teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找与名为赵建国和吴建聪的点共同发布的,类型为帖子的节点;2: 返回user李强publish的post节点has的tag;3: 查找源点名字不等于中国诗词论坛,名字不是天涯论坛,边标签等于forum_contain_person,且满足条件权重大于等于116.15的边,返回这些边的权重减192.08对9取余的最大值;4: 请帮我查找所有Post_447的点拥有的标签,然后请帮我查找Post_447被喜欢的用户,一起返回;5: 找出全部与user有关系的post节点,且post节点的wordCount大于275,并返回这些点的value的数量对820取余的值,以及wordCount对37取余除321的值;6: 查找用户李雪 喜欢的帖子,返回帖子 拥有的标签的价值减998的值 ;7: 查询127个名为Amily的点publish的标签为post的节点,且节点createTime不等于2017年05月11日或wordCount为空;8: 帮我查询forum contain的person,返回其源点的value乘value的值,以及目标点的id的和加95的平均值;9: 请帮我查找用户张梅的全部标签等于朋友的边,并根据f0升序排列,返回133个;",
        "output": "查询语句为:1: match(a where a.name = '赵建国')-[e:user_publish_post]->(b:post)<-[e2:user_publish_post]-(c where c.name = '吴建聪') return b;2: match(a:user where a.name = '李强')-[e:user_publish_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c;3: match(a where a.name <> '中国诗词论坛' and a.name <> '天涯论坛')-[e:forum_contain_person where e.weight >= 116.15]->(b) return MAX(e.weight - 192.08 % 9);4: match(a where a.name = 'Post_447')-[e:post_has_tag]->(b:tag),(a where a.name = 'Post_447')<-[e2:user_likes_post]-(c:user) return a, b, c;5: match(a:user)-[e]->(b:post where b.wordCount > 275) return COUNT(b.value) % 820, b.wordCount % 37 / 321;6: match(a:user where name = '李雪')-[e:user_likes_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c.value - 998;7: match(a where a.name='Amily')-[e:user_publish_post]->(b:post where b.createTime <> '2017-05-11' or (b.wordCount is null)) return b limit 127;8: match(a:forum)-[e:forum_contain_person]->(b:person) return a.value * a.value, AVG(SUM(b.id) + 95);9: match(a:user where a.name = '张梅')-[e:friend]->(b) return b order by e.f0 asc limit 133;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出发布作家王科撰写的书,的编辑",
        "output": "match(a:author where name = '王科')-[e:write]->(b:book)<-[e2:publish]-(c:publisher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出用户喜欢的仓库,返回其源点的薪资除2189的值,以及目标点的星数加765的个数",
        "output": "match(a:user)-[e:likes]->(b:repository) return a.salary / 2189, COUNT(b.stars + 765)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王强和杜红之间的101个关联，他们都是医生。",
        "output": "match(a:doctor where a.name='王国强')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='杜红') return b limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person郑强有家人关系的2跳以内的环",
        "output": "match(a:person where name = '郑强')-[e:family]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出has issue ISSUE-297的repository,和这些repository has的pullRequest",
        "output": "match(a:issue where name = 'ISSUE-297')<-[e:has]-(b:repository)-[e2:has]->(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家张轩取消的订单, 令买家的性别等于买家的id的平均值, 返回买家的身高, 订单的价格",
        "output": "match(a:buyer where a.name='张轩')-[e:cancel]->(b:orders) let a.gender = AVG(a.id) return a.height,b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询buyer Jack cancel的orders,被其他buyer creates的数量",
        "output": "match(a:buyer where a.name='Jack')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被doctor郑雪creates的prescription",
        "output": "match(a:prescription)<-[e:creates]-(b:doctor where b.name='郑雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询company employee的person,返回其源点的value加158的数量,以及目标点的height乘191的值",
        "output": "match(a:company)-[e:employee]->(b:person) return COUNT(a.value + 158), b.height * 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找126个与孙思思和孙建国都存在关系的person节点;2: 给出名为吴月的点的,性别为male,名字不是杜科的相关者,返回这些相关者的性别,和边的f1;3: 返回与person马月有关,且与person韩思琪有关系的person节点;",
        "output": "查询语句为:1: match(a where a.name='孙思思')-[e]->(b:person)<-[e2]-(c where c.name='孙建国') return b limit 126;2: match(a where a.name='吴月')-[e:relation]->(b where b.gender = 'male' and b.name <> '杜科') return b.gender,e.f1;3: match(a:person where a.name='马月')-[e:person_knows_person]-(b:person)-[e2:person_knows_person]-(c:person where c.name='韩思琪') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询12个和标签等于author的点有author_knows_author关系的author,并且和这些author有author_knows_author关系的author",
        "output": "match(a:author)-[e:author_knows_author]->(b:author)-[e2:author_knows_author]->(c:author) return c limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为123的goods有关的buyer的friend, 再返回和buyer有关系的relation",
        "output": "match(a:goods where id = 123)-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询165个名为吴雪的点关联的标签为person的节点,且节点身高大于160",
        "output": "match(a where a.name='吴雪')-[e:relates]->(b:person where b.height > 160) return b limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出源点id不为空,目标点salary小于等于2329且age小于等于92,且label为department_has_teacher的边;2: 找出和教师李国强有关的课程,再找出和李国强teacher_teach_course的其他课程,返回它们;3: 请帮我查找和学生有关联的课程节点,并根据其学分,id,课时分组,返回学分,id,课时,以及id除id的值;",
        "output": "查询语句为:1: match(a where (a.id is not null))-[e:department_has_teacher]->(b where b.salary <= 2329 and b.age <= 92) return e;2: match(a:teacher where a.name = '李国强')-[e]-(b:course), (a:teacher)-[e2:teacher_teach_course]->(c:course) return a, b, c;3: match(a:student)-[e:student_selects_course]-(b:course) return b.credit, b.id, b.courseHour, b.id / b.id group by b.credit, b.id, b.courseHour;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找buyer陈宏出发，通过look标签的边走三步到的goods点",
        "output": "match(a:buyer where a.name='陈宏')-[e:look]->{3,3}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 找出名为Mysql的软件;2: 请帮我找出person的2跳以内的环;3: 查找名为黄梅和徐强的,label为person的点公共的partner节点的名单;4: 请帮我查找和软件Hadoop有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person;5: 请帮我查找和label为person的点有person_belong_company关系的company,并且和这些company有company_employee_person关系的person,并且和这些person有person_commits_software关系的software;6: 给出全部id为44的company关联的software,和以buy关系关联了这些software的其他person;7: 帮我查询和类型是person的点有person_buy_software关系的软件,并且和这些软件有software_uses_software关系的软件,并且和这些软件有software_uses_software关系的软件;",
        "output": "查询语句为:1: match(a:software where a.name = 'Mysql') return a;2: match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id;3: match(a:person where a.name='黄梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='徐强') return b.name;4: match(a:software where a.name = 'Hadoop')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;5: match(a:person)-[e:person_belong_company]->(b:company)-[e2:company_employee_person]->(c:person)-[e3:person_commits_software]->(d:software) return d;6: match(a:company where a.id = '44')-[e]-(b:software)<-[e2:person_buy_software]-(c:person) return b,c;7: match(a:person)-[e:person_buy_software]->(b:software)-[e2:software_uses_software]->(c:software)-[e3:software_uses_software]->(d:software) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出company蚂蚁集团creates的software,以及commits这些software的person",
        "output": "match(a:company where name = '蚂蚁集团')-[e:creates]->(b:software)<-[e2:commits]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person韩梅和赵月都存在拥有关系的点",
        "output": "match(a:person where a.name='韩梅')-[e:own]->(b)<-[e2:own]-(c:person where c.name='赵月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出39个身高在153到195之间的病人，按照ID从小到大排序。",
        "output": "match(a:patient where (a.height BETWEEN 153 AND 195)) return a order by a.id asc limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回名为纽约的城市;2: 查询country的3度的环;3: 查找73个名为纽约的点contain的标签为university的节点,且其value大于603或name是武汉大学;4: 返回国家的三角的环,边标签等于country_contain_city, 并返回这些点的id;5: 给出name不等于726或name不等于俄罗斯或area不为空的节点;6: 帮我查询country日本的全部标签为partner的边,并根据f1降序排列,返回7个;7: 返回全部源点类型是大学,边类型是university_belong_city,以及满足条件权重乘139.60小于等于604的边;8: 帮我查询城市巴黎包含的大学,被其他城市包含的数量;9: 请帮我查找全部源点类型为公司,目标点类型为大学,类型为company_cooperate_university的边;",
        "output": "查询语句为:1: match(a:city where a.name = '纽约') return a;2: match(a:country)->{2,2}(b)->(a) return a.id, b.id as b_id;3: match(a where a.name='纽约')-[e:city_contain_university]->(b:university where b.value > 603 or b.name = '武汉大学') return b limit 73;4: match(a:country)-[e:country_contain_city]->(b)-[e2:country_contain_city]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a where a.name <> 726 or a.name <> '俄罗斯' or (a.area is not null)) return a;6: match(a:country where a.name = '日本')-[e:partner]->(b) return b order by e.f1 desc limit 7;7: match(a:university)-[e:university_belong_city where e.weight * 139.60 <= 604]->(b) return e;8: match(a:city where a.name='巴黎')-[e:city_contain_university]->(b:university)<-[e2:city_contain_university]-(c:city) return COUNT(c);9: match(a:company)-[e:company_cooperate_university]->(b:university) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为赵思思的点申请的贷款",
        "output": "match(a where a.name='赵思思')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与仓库Kafka有关系的事项的创建时间",
        "output": "match(a:repository where a.name='Kafka')-[e]-(b:issue) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表128,386, 源点的id等于输入表id,请帮我找出department法学院的全部标签为relation的边,并根据srcId升序排列,返回110个",
        "output": "with p as (select * from (VALUES(128),(386)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '法学院')) -[e:relation ]->(b) RETURN b ORDER BY e.srcId LIMIT 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找buyer吴建聪look的goods,被其他buyer look的数量",
        "output": "match(a:buyer where a.name='吴建聪')-[e:buyer_look_goods]->(b:goods)<-[e2:buyer_look_goods]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前96个label为contain的边",
        "output": "match(a)-[e:contain]->(b) return e limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点标签等于doctor,目标点标签等于patient,标签等于doctor或department或prescription的边",
        "output": "match(a:doctor)-[e:doctor | department | prescription]->(b:patient) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找使用公司Bilibili创造的软件,的软件",
        "output": "match(a:company where name = 'Bilibili')-[e:creates]->(b:software)<-[e2:uses]-(c:software) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与书百年孤独有关系的作家的名字",
        "output": "match(a:book where a.name='百年孤独')-[e]-(b:author) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是引用,以及满足条件源点id不为空的边",
        "output": "match(a)-[e:refers where (e.srcId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找student selects的course,返回其源点的salary的最小值除5329的值,以及目标点的courseHour除23的值",
        "output": "match(a:student)-[e:selects]->(b:course) return MIN(a.salary) / 5329, b.courseHour / 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有卖家关联的商品，以及与这些商品有查看关系的其他买家。",
        "output": "match(a:seller where a.id = '63')-[e]-(b:goods)<-[e2:look]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person Alice的家人,的f0乘748的值",
        "output": "match(a:person where a.name= 'Alice')-[e:family]->(b) return e.f0 * 748",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出14个与Prescription_429和Prescription_338有关系的处方节点。",
        "output": "match(a where a.name='Prescription_429')-[e]->(b:prescription)<-[e2]-(c where c.name='Prescription_338') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查找和university武汉大学有关的country,称为X,再查找和这个X有关联的其他company,以及和X有关联的city;2: 请帮我找出所有city以area分组的area, 根据area从小到大排序;3: 请帮我找出所有源点类型为country,目标点类型为city,类型为country_contain_city的边;4: 查询162个city巴黎和东京,共同的partner;5: 帮我查询id为193的点的value,name,area;6: 帮我查询类型为city_belong_country,且满足条件f0为空或f1不是true或srcId小于等于128的边;7: 找出名为电子科技大学的university,以及与其有关的country,并返回电子科技大学的value和这些country的value;",
        "output": "查询语句为:1: match(a:university where a.name = '武汉大学')-[e]-(b:country), (b:country)-[e2]-(c:company),(b:country)-[e3]-(d:city) return a, b, c, d;2: match(a:city) return a.area group by a.area order by a.area asc;3: match(a:country)-[e:country_contain_city]->(b:city) return e;4: match(a:city where a.name='巴黎')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='东京') return b limit 162;5: match(a where a.id = '193') return a.value, a.name, a.area;6: match(a)-[e:city_belong_country where (e.f0 is null) or e.f1 <> true or e.srcId <= 128]->(b) return e;7: match(a:university where name = '电子科技大学')-[e]-(b:country) return a.value, b.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与person周思琪有关系的person的gender",
        "output": "match(a:person where a.name='周思琪')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,gender, 数据为(2476,'孙若涵','famale'), 源点的salary等于输入表salary,返回id为151的publisher有关的book的refers, 再返回和book有关系的refers",
        "output": "with p as (select * from (VALUES(2476,'孙若涵','famale')) as t(salary,name,gender))MATCH (a:publisher WHERE a.salary = p.salary AND (id = '151')) -[e ]-(b:book) -[e2:book_refers_book ]->(c) , (b:book) -[e3:book_refers_book ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与大学有关系的教师节点,且教师节点的id不是11,并返回这些教师的height的求和值乘186加薪资的值,以及教师的年龄减98的值",
        "output": "match(a:university)-[e]->(b:teacher where b.id <> 11) return SUM(b.height) * 186 + b.salary, b.age - 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和名为大众影院的cinema有friend关系,或有friend的friend关系的film",
        "output": "match(a:cinema where n.name=大众影院)-[e:friend]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加71的平均值",
        "output": "AVG(a.id + 71)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以58, 3作为输入,返回number",
        "output": "Call TRIANGLECOUNT(58, 3) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出和person徐思思有person_creates_comment关系的评论,以及和电影院大众影院有cinema_releases_film关系的电影,将它们都返回;2: 请帮我查找id为113的电影关联的标签,和以拥有关系关联了这些标签的其他电影;3: 请帮我查找78个与孙轩和杜红都存在关系的标签节点;",
        "output": "查询语句为:1: match(a:person where a.name = '徐思思')-[e:person_creates_comment]->(b:comment),(c:cinema where c.name = '大众影院')-[e2:cinema_releases_film]->(d:film)return a, b, c, d;2: match(a:film where a.id = '113')-[e]-(b:tag)<-[e2:film_has_tag]-(c:film) return b,c;3: match(a where a.name='孙轩')-[e]->(b:tag)<-[e2]-(c where c.name='杜红') return b limit 78;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age分组,计算age减63的值",
        "output": "return a.age - 63 group by a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height的最小值除184的值",
        "output": "MIN(a.height) / 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 计算所有卖家的height的平均值对157取余的最小值;2: 请帮我找出115个名为Order_107的点contain的类型为goods的节点,且其category大于等于532.07或category是电子产品;3: 计算所有订单的id的最小值对15取余的值;4: 返回和buyer有关联的orders节点,并根据其price,value分组,返回price,value,以及value乘value的最小值;",
        "output": "查询语句为:1: match(a:seller) return MIN(AVG(a.height) % 157);2: match(a where a.name='Order_107')-[e:orders_contain_goods]->(b:goods where b.category >= 532.07 or b.category = '电子产品') return b limit 115;3: match(a:orders) return MIN(a.id) % 15;4: match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.price, b.value, MIN(b.value * b.value) group by b.price, b.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出在南京大学有关系的城市，以及这些城市中包含公司的点，并返回这些点的人数。",
        "output": "match(a where a.name = '南京大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询认识王轩的人。",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='王轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为郑思思的patient,以及与其有关的patient,并返回郑思思的id和这些patient的id",
        "output": "match(a:patient where name = '郑思思')-[e]-(b:patient) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight减746的值",
        "output": "a.weight - 746",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight加296的最小值",
        "output": "MIN(a.weight + 296)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找公司腾讯 雇佣的person,返回person 购买的软件的星数加278的求和值",
        "output": "match(a:company where name = '腾讯')-[e:employee]->(b:person)-[e2:buy]->(c:software) return SUM(c.stars + 278)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到从上海出发，通过包含标签的边，走了3到6步到达的公司节点",
        "output": "match(a:city where a.name='上海')-[e:contain]->{3,6}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表726,129,140,305,148, 源点的id等于输入表id,查找全部名为孙梅的,id减52大于95,字数为空的朋友,返回这些朋友的创建时间,和边的f1,f0,权重",
        "output": "with p as (select * from (VALUES(726),(129),(140),(305),(148)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '孙梅')) -[e:friend ]->(b WHERE b.id - 52 > 95 AND b.wordCount IS NULL) RETURN b.createTime, e.f1, e.f0, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找与person李雪和person孙红都有关系的person节点",
        "output": "match(a:person where a.name='李雪')-[e:lover]-(b:person)-[e2:family]-(c:person where c.name='孙红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和book点有knows关系的book节点,且边满足条件srcId不是162,目标book节点name不等于罪与罚",
        "output": "match(a:book)-[e:knows where e.srcId <> 162]->(b:book where b.name <> '罪与罚') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表644,131,311,57,404, 以属性id作为相等条件,返回买家张雪的朋友的相关者的伙伴",
        "output": "with p as (select * from (VALUES(644),(131),(311),(57),(404)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '张雪')) -[e:friend ]->(b) -[e2:relation ]->(c) -[e3:partner ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为张建聪的点回答的买家",
        "output": "match(a where a.name='张建聪')-[e:ask]->(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点类型是forum,边类型是contain,且满足条件targetId大于等于114的边",
        "output": "match(a:forum)-[e:contain where e.targetId >= 114]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型为用户,边类型为喜欢,且满足条件目标点id小于162或时间戳不等于1996年06月01日的边",
        "output": "match(a:user)-[e:likes where e.targetId < 162 or e.timeStamp <> '1996-06-01']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person徐建聪有观看关系的电影,再请帮我查找以观看关系关联了徐建聪的电影",
        "output": "match(a:person where a.name = '徐建聪')-[e:watch]->(b:film),(a:person where a.name = '徐建聪')<-[e2:watch]-(c:film)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询王伟和吴红查看关系的点。",
        "output": "match(a:buyer where a.name='王伟')-[e:look]->(b)<-[e2:look]-(c:buyer where c.name='吴红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为PR-347和PR-269的点共同belong的,类型为repository的节点",
        "output": "match(a where a.name = 'PR-347')-[e:belong]->(b:repository)<-[e2:belong]-(c where c.name = 'PR-269') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出作家的2度以内的环",
        "output": "match(a:author)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点标签为合并请求,目标点标签为仓库,标签为事项的边",
        "output": "match(a:pullRequest)-[e:issue]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为25的点的身高,性别,名字",
        "output": "match(a where a.id = 25) return a.height, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,age分组,计算id加50的值",
        "output": "return a.id + 50 group by a.salary, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资乘9183减34的值",
        "output": "a.salary * 9183 - 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从patient徐科出发,经过标签等于accept的边,走2到4跳到达的prescription点",
        "output": "match(a:patient where a.name='徐科')-[e:accept]->{2,4}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询喜欢仓库FSM的用户,和这些用户创造的合并请求",
        "output": "match(a:repository where name = 'FSM')<-[e:likes]-(b:user)-[e2:creates]->(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为吴梅的点的,name大于970,id等于83的friend,返回这些friend的credit,和边的targetId",
        "output": "match(a where a.name='吴梅')-[e:friend]->(b where b.name > 970 and b.id = 83) return b.credit,e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否请你帮我找到名为Prescription_390的处方？",
        "output": "match(a:prescription where a.name = 'Prescription_390') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与部门内科有关联，并对病人王国强进行过诊断的医生信息。包括医生的名字、ID、部门内科的ID以及病人王国强的性别。",
        "output": "match(a:department where a.name='内科')-[e:has]->(b:doctor)<-[e2:diagnose]-(c:patient where c.name='王国强') return a.id,b.name, b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找一本叫做《Java程序设计》的书。",
        "output": "match(a:book where a.name = 'java程序设计') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与赵梅有薪资关系且与张强有关注关系的个人节点，返回他们的身高、性别、赵梅的薪资和张国强的身高。",
        "output": "match(a:person where a.name='赵梅')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='张国强') return a.salary,b.height, b.gender,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找张思思认识的所有人，以及认识张思思的人，并将两者一起返回。",
        "output": "match(a where a.name = '张思思')-[e:knows]->(b:person),(a where a.name = '张思思')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出30个和类型为loan的点有deposit关系的account,以及和这些account有repay关系的loan",
        "output": "match(a:loan)-[e:deposit]->(b:account)-[e2:repay]->(c:loan) return c limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出身高在153到188之间且id为空的person申请的贷款的名称,以及这些贷款 存款的账号的名称",
        "output": "match(a:person where (a.height BETWEEN 153 AND 188) and (a.id is null))-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被用户赵月创造的事项,和赵月创造的事项",
        "output": "match(a:issue)<-[e:creates]-(b:user where name = '赵月')-[e2:creates]->(c:issue) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签为编辑的点有发布关系的书,以及和这些书有引用关系的书,以及和这些书有引用关系的书",
        "output": "match(a:publisher)-[e:publish]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查询名为黄宏的patient;2: 请帮我查找与医生李思思有doctor_diagnose_patient关系的3跳以内的环;3: 查询以接受关系关联了处方Prescription_434的病人;4: 找出41个名为韩红的点属于的标签为部门的节点,且节点地址不是C栋;5: 帮我查询标签为department的点,返回194个;6: 帮我查询和department急诊部有department_has_doctor关系的doctor,再帮我查询以department_has_doctor关系关联了急诊部的doctor;7: 找出98个身高为空且性别为famale,或年龄乘36的最小值为90的病人,根据名字升序排列;8: 帮我查询名为郑若涵的,weight小于等于464,createTime是2007年04月07日的partner,返回这些partner的name,和边的targetId,f1,weight;",
        "output": "查询语句为:1: match(a:patient where a.name = '黄宏') return a;2: match(a:doctor where name = '李思思')-[e:doctor_diagnose_patient]->{0,2}(b)->(a) return a.id, b.id as b_id;3: match(a:prescription where a.name='Prescription_434')<-[e:patient_accept_prescription]-(b:patient) return b;4: match(a where a.name='韩红')-[e:doctor_belong_department]->(b:department where b.address <> 'C栋') return b limit 41;5: match(a:department) return a limit 194;6: match(a:department where a.name = '急诊部')-[e:department_has_doctor]->(b:doctor),(a:department where a.name = '急诊部')<-[e2:department_has_doctor]-(c:doctor)return a, b, c;7: match(a:patient where ((a.height is null) and a.gender = 'famale') or MIN(a.age * 36) = 90) return a order by a.name asc limit 98;8: match(a where a.name='郑若涵')-[e:partner]->(b where b.weight <= 464 and b.createTime = '2007-04-07') return b.name,e.targetId, e.f1, e.weight;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找以uses关系关联了software Hadoop的software",
        "output": "match(a:software where a.name='Hadoop')<-[e:software_uses_software]-(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询与城市伦敦有关系的城市, 返回和这些城市有关联的国家的,id减88的值;2: 找出所有名为华为的点合作的大学;3: 找出id为81的university关联的city,和以contain关系关联了这些city的其他country;",
        "output": "查询语句为:1: match(a:city where a.name= '伦敦')-[e]-(b:city)-[e2]-(c:country) return c.id - 88;2: match(a where a.name='华为')-[e:company_cooperate_university]->(b:university) return b;3: match(a:university where a.id = '81')-[e]-(b:city)<-[e2:country_contain_city]-(c:country) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与评论Comment_335存在属于关系,且与标签喜剧存在拥有关系的电影节点，返回这些电影的id,及评论Comment_335的名字,及标签喜剧的价值",
        "output": "match(a:comment where a.name='Comment_335')-[e:belong]->(b:film)<-[e2:has]-(c:tag where c.name='喜剧') return a.name,b.id,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id的个数大于6473且名字不等于赵红的节点",
        "output": "match(a where COUNT(a.id) > 6473 and a.name <> '赵红') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表657,369,294, 以属性id作为相等条件,请帮我找出孤城的点knows的book,然后请帮我找出孤城被relates的book,一起返回",
        "output": "with p as (select * from (VALUES(657),(369),(294)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '孤城')) -[e:knows ]->(b:book) , (a WHERE a.name = '孤城') <-[e2:relates ]-(c:book) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与人有关联的人，这些人又与其他人有喜欢关系，并且这些人还与其他人有支付关系。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person)-[e3:pay]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age对79取余的最小值",
        "output": "MIN(a.age % 79)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有账号以是否冻结分组的是否冻结, 根据是否冻结升序排序",
        "output": "match(a:account) return a.isBlock group by a.isBlock order by a.isBlock asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为173的doctor有关的doctor的relation, 再查询和doctor有关系的partner",
        "output": "match(a:doctor where id = 173)-[e]-(b:doctor)-[e2:relation]->(c), (b:doctor)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id对32取余的平均值",
        "output": "return AVG(a.id % 32) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部教师以身高分组的年龄, 根据年龄从大到小排序",
        "output": "match(a:teacher) return a.age group by a.height order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询knows person周国强的person,和这些person knows的person",
        "output": "match(a:person where name = '周国强')<-[e:knows]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和buyer黄若涵有关的buyer,称为X,再查询和这个X有关联的其他buyer,以及和X有关联的orders",
        "output": "match(a:buyer where a.name = '黄若涵')-[e]-(b:buyer), (b:buyer)-[e2]-(c:buyer),(b:buyer)-[e3]-(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和医生赵红有1到3度关系的医生",
        "output": "match(a:doctor where a.name='赵红')-[e]->{1,3}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "price除2392.49的值",
        "output": "a.price / 2392.49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询处方Prescription_116的朋友,的targetId的平均值乘183的最小值",
        "output": "match(a:prescription where a.name= 'Prescription_116')-[e:friend]->(b) return MIN(AVG(e.targetId) * 183)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为60的department有关的department的friend, 再请帮我查找和department有关系的partner",
        "output": "match(a:department where id = 60)-[e]-(b:department)-[e2:friend]->(c), (b:department)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有处方笺的合作伙伴，或合作伙伴的合作伙伴。",
        "output": "match(a:prescription)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询从深圳出发，经过边的标签包含，且跳数在2到5之间的公司点",
        "output": "match(a:city where a.name='深圳')-[e:contain]->{2,5}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到共同为王若涵和周雪且类型为software的提交。",
        "output": "match(a where a.name = '王若涵')-[e:commits]->(b:software)<-[e2:commits]-(c where c.name = '周雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为26的点的value,id",
        "output": "match(a where a.id = 26) return a.value, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否帮我查一下LX001的账户？",
        "output": "match(a:account where a.name = 'LX001') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,amount,weight, 数据为(73,6172.90,352),(35,1567.39,978),(22,5037.81,868),(17,2127.38,134)的子查询作为输入表, 以属性id作为相等条件,请帮我查找所有company以scale,name分组的name, 根据name从小到大排序",
        "output": "with p as (select * from (VALUES(73,6172.90,352),(35,1567.39,978),(22,5037.81,868),(17,2127.38,134)) as t(id,amount,weight))MATCH (a:company WHERE a.id = p.id) RETURN a.name GROUP BY a.scale, a.name ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和病人郑若涵有关的处方,再找出和郑若涵接受的其他处方,返回它们",
        "output": "match(a:patient where a.name = '郑若涵')-[e]-(b:prescription), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询和department有关联的teacher节点,并根据其gender分组,返回gender,以及salary的最大值对4574取余对96取余的值",
        "output": "match(a:department)-[e:department_has_teacher]-(b:teacher) return b.gender, MAX(b.salary) % 4574 % 96 group by b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资除5992的值",
        "output": "a.salary / 5992",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为person的点,返回187个",
        "output": "match(a:person) return a limit 187",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回与名为吴月和李宏的点共同发布的,标签为书的节点",
        "output": "match(a where a.name = '吴月')-[e:publisher_publish_book]->(b:book)<-[e2:publisher_publish_book]-(c where c.name = '李宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,weight,createTime, 数据为(57,936,2002-10-09), 以属性createTime作为相等条件,查询前180个id对96取余的平均值小于11,类别是皮肤药的药品",
        "output": "with p as (select * from (VALUES(57,936,2002-10-09)) as t(id,weight,createTime))MATCH (a:medicine WHERE a.createTime = p.createTime AND (AVG(a.id % 96) < 11 AND a.category = '皮肤药')) RETURN a LIMIT 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为我不是药神的点拥有的标签",
        "output": "match(a where a.name='我不是药神')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(183,'何国强','famale'),(181,'何建国','male'),(195,'韩思思','male'),(188,'吴伟','male')作为请求表数据,属性分别为height,name,gender, 以属性gender作为相等条件,找出所有和person点有认识关系的person节点,且边满足条件f1为true,目标person节点满足条件薪资大于等于1462",
        "output": "with p as (select * from (VALUES(183,'何国强','famale'),(181,'何建国','male'),(195,'韩思思','male'),(188,'吴伟','male')) as t(height,name,gender))MATCH (a:person WHERE a.gender = p.gender) -[e:person_knows_person WHERE e.f1 = TRUE ]->(b:person WHERE b.salary >= 1462) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为蚂蚁集团和美团的,类型为公司的点公共的伙伴节点的名单",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='美团') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,stars,name分组,计算id对29取余的最小值",
        "output": "return MIN(a.id % 29) group by a.value, a.stars, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,peopleNumber,scale, 数据为('腾讯',604,'large'),('蚂蚁集团',545,'medium'),('蚂蚁集团',753,'large'),('滴滴',909,'small'), 源点的name等于输入表name,查询所有和person吴建聪之间有person_buy_software关系的software",
        "output": "with p as (select * from (VALUES('腾讯',604,'large'),('蚂蚁集团',545,'medium'),('蚂蚁集团',753,'large'),('滴滴',909,'small')) as t(name,peopleNumber,scale))MATCH (a:person WHERE a.name = p.name AND (a.name = '吴建聪')) -[e:person_buy_software ]->(b:software) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "向用户推荐他们的朋友，或者他们朋友的朋友",
        "output": "match(a:user)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有源点标签等于account,边标签等于account_repay_loan,且timeStamp大于173.04,f1等于true,或f1是false的边",
        "output": "match(a:account)-[e:account_repay_loan where (e.timeStamp > 173.04 and e.f1 = true) or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出读者喜欢的书,返回其源点的id乘11乘4073的值,以及目标点的价格除37的求和值",
        "output": "match(a:reader)-[e:likes]->(b:book) return a.id * 11 * 4073, SUM(b.price / 37)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表246,68,329,921, 源点的id等于输入表id,帮我查询post Post_157的partner的partner的friend",
        "output": "with p as (select * from (VALUES(246),(68),(329),(921)) as t(id)) MATCH (a:post WHERE a.id = p.id AND (a.name = 'Post_157')) -[e:partner ]->(b) -[e2:partner ]->(c) -[e3:friend ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,age,id, 数据为('famale',45,41),('male',67,50),('male',32,3),('male',31,98), 以属性age作为相等条件,查询源点身高不是182且年龄小于等于3,目标点薪资小于79或性别不是male,且标签为person_parent_person的边",
        "output": "with p as (select * from (VALUES('famale',45,41),('male',67,50),('male',32,3),('male',31,98)) as t(gender,age,id))MATCH (a WHERE a.age = p.age AND (a.height <> 182 AND a.age <= 3)) -[e:person_parent_person ]->(b WHERE b.salary < 79 OR b.gender <> 'male') RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为weight,createTime,name, 数据为(275,2025-08-16,'Prescription_405'),(834,2004-04-29,'Prescription_466')的子查询作为输入表, 源点的weight等于输入表weight,给出用户陈月的全部类型为伙伴的边,并根据权重升序排列,返回189个",
        "output": "with p as (select * from (VALUES(275,2025-08-16,'Prescription_405'),(834,2004-04-29,'Prescription_466')) as t(weight,createTime,name))MATCH (a:user WHERE a.weight = p.weight AND (a.name = '陈月')) -[e:partner ]->(b) RETURN b ORDER BY e.weight LIMIT 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出account Geaflow123的所有标签为friend的边,并根据targetId从小到大排列,返回138个",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:friend]->(b) return b order by e.targetId asc limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询8个和类型是软件的点有使用关系的软件,且和这些软件有使用关系的软件",
        "output": "match(a:software)-[e:uses]->(b:software)-[e2:uses]->(c:software) return c limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为tag的点,返回93个",
        "output": "match(a:tag) return a limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于作家,目标点标签等于书,标签等于书或读者或作家的边",
        "output": "match(a:author)-[e:book | reader | author]->(b:book) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询account以createTime分组的lastLoginTime, 根据lastLoginTime降序排序",
        "output": "match(a:account) return a.lastLoginTime group by a.createTime order by a.lastLoginTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部与user有关系的prescription节点,且prescription节点的createTime等于2008年10月12日,并返回这些点的id加89的数量,以及id加30对55取余的最大值",
        "output": "match(a:user)-[e]->(b:prescription where b.createTime = '2008-10-12') return COUNT(b.id + 89), MAX(b.id + 30 % 55)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person喜欢的评论, 令评论的创建时间的值等于创造评论的person的性别的平均值, 再查找评论属于的电影",
        "output": "match(a:person)-[e:likes]->(b:comment) let b.createTime = AVG((b:comment)<-[e2:creates]-(c:person) => c.gender) match(b:comment)-[e3:belong]->(d:film) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是tag的点,返回92个",
        "output": "match(a:tag) return a limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和buyer有关联的orders节点,并根据其id分组,返回id,以及price除3676.36的最大值",
        "output": "match(a:buyer)-[e:buyer_creates_orders]-(b:orders) return b.id, MAX(b.price / 3676.36) group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表852, 以属性id作为相等条件,请帮我找出所有与徐月存在buyer_creates_orders关系的订单,订单与商品存在orders_contain_goods关系的点,返回这些点的价格",
        "output": "with p as (select * from (VALUES(852)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐月')) -[e:buyer_creates_orders ]->(b:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN c.price ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与处方Prescription_474有创建关系的医生",
        "output": "match(a:prescription where a.name='Prescription_474')<-[e:creates]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回150个与吴梅和张国强都存在关系的作家节点",
        "output": "match(a where a.name='吴梅')-[e]->(b:author)<-[e2]-(c where c.name='张国强') return b limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与何轩有关联的账户，以及查询何轩的贷款申请记录。",
        "output": "match(a:person where a.name = '何轩')-[e:own]->(b:account),(a:person where a.name = '何轩')<-[e2:apply]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出14个与孙月和孙思琪有关联的用户节点。",
        "output": "match(a where a.name='孙月')-[e]->(b:user)<-[e2]-(c where c.name='孙思琪') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出user郑雪和何强都喜欢的点",
        "output": "match(a:user where a.name='郑雪')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='何强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为117的点的价格,价值",
        "output": "match(a where a.id = 117) return a.price, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和医生王建国有诊断关系的病人,再给出以属于关系关联了王建国的部门",
        "output": "match(a:doctor where a.name = '王建国')-[e:diagnose]->(b:patient),(a:doctor where a.name = '王建国')<-[e2:belong]-(c:department)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 评论中出现了与电影《绿巨人》相关的属于关系。",
        "output": "match(a:film where a.name='绿巨人')<-[e:belong]-(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person郑建国有关的film,称为X,再查询和这个X有关联的其他tag,以及和X有关联的tag",
        "output": "match(a:person where a.name = '郑建国')-[e]-(b:film), (b:film)-[e2]-(c:tag),(b:film)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以217,452作为请求点id, 源点的id等于输入表id,帮我查询cinema好视影院releases的film,被其他comment belong的数量",
        "output": "with p as (select * from (VALUES(217),(452)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.name = '好视影院')) -[e:cinema_releases_film ]->(b:film) <-[e2:comment_belong_film ]-(c:comment) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(39,'西虹市首富',899),(16,'少年足球',244),(32,'建国大业',38),(74,'功夫',250)的子查询作为输入表, 源点的name等于输入表name,查找所有标签以价值,id分组的价值, 根据价值降序排序",
        "output": "with p as (select * from (VALUES(39,'西虹市首富',899),(16,'少年足球',244),(32,'建国大业',38),(74,'功夫',250)) as t(id,name,value))MATCH (a:tag WHERE a.name = p.name) RETURN a.value GROUP BY a.value, a.id ORDER BY a.value DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person韩梅有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '韩梅')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与韩科存在父母关系的person,person与person存在恋人关系的点,返回这些点的性别",
        "output": "match(a where a.name = '韩科')-[e:parent]->(b:person)-[e2:lover]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加39的值",
        "output": "a.id + 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为'中国'的country",
        "output": "match(a:country where a.name = '中国') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和名为滴滴的公司有朋友关系,或有朋友的朋友关系的贷款",
        "output": "match(a:company where n.name=滴滴)-[e:friend]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "'请按照读者点的id对相关书籍进行分组，并返回它们的id。'",
        "output": "match(a:reader)-[e:likes]-(b:book) return b.id group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与tag有关的cinema节点，这些节点的name为'好视影院'。返回这些节点的id除以80和98的结果。",
        "output": "match(a:tag)-[e]->(b:cinema where b.name = '好视影院') return b.id / 80, b.id / 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和大学浙江大学之间有拥有关系的部门",
        "output": "match(a:university where a.name='浙江大学')-[e:has]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(142.29,true,82),(130.48,true,87),(105.98,true,101)作为请求表数据,属性分别为weight,f1,srcId, 源点的weight等于输入表weight,返回前15个gender不是famale的person",
        "output": "with p as (select * from (VALUES(142.29,true,82),(130.48,true,87),(105.98,true,101)) as t(weight,f1,srcId))MATCH (a:person WHERE a.weight = p.weight AND (a.gender <> 'famale')) RETURN a LIMIT 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber,scale,value分组,计算value乘360的和",
        "output": "return SUM(a.value * 360) group by a.peopleNumber, a.scale, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有从prescription源点到medicine目标点，且类型为contain的边。",
        "output": "match(a:prescription)-[e:contain]->(b:medicine) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出所有公司以规格,人数,价值分组的名字, 根据名字从小到大排序;2: 请帮我查找和label为公司的点有company_belong_city关系的城市,且和这些城市有city_contain_university关系的大学,且和这些大学有university_belong_city关系的城市;3: 查询满足条件name是上海或name不等于东京,且area是98068的节点;4: 请帮我查找名为谷歌的company,以及与其有关的country,并返回谷歌的name和这些country的peopleNumber;5: 查找和university北京大学有关的country,称为X,再查找和这个X有关联的其他city,以及和X有关联的city;",
        "output": "查询语句为:1: match(a:company) return a.name group by a.scale, a.peopleNumber, a.value order by a.name asc;2: match(a:company)-[e:company_belong_city]->(b:city)-[e2:city_contain_university]->(c:university)-[e3:university_belong_city]->(d:city) return d;3: match(a where (a.name = '上海' or a.name <> '东京') and a.area = 98068) return a;4: match(a:company where name = '谷歌')-[e]-(b:country) return a.name, b.peopleNumber;5: match(a:university where a.name = '北京大学')-[e]-(b:country), (b:country)-[e2]-(c:city),(b:country)-[e3]-(d:city) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 找出以contain关系关联了person郑科的forum;2: 给出所有源点标签为论坛,边标签为forum_contain_person的边,返回这些边的权重除156.60的值,和权重加权重的平均值;3: 找出所有与帖子Post_323有关系的帖子的id;4: 请帮我找出与post Post_385有关系的user的name;5: 查询user李轩publish的post,被其他forum contain的数量;",
        "output": "查询语句为:1: match(a:person where a.name='郑科')<-[e:forum_contain_person]-(b:forum) return b;2: match(a:forum)-[e:forum_contain_person]->(b) return e.weight / 156.60, AVG(e.weight + e.weight);3: match(a:post where a.name='Post_323')-[e]-(b:post) return b.id;4: match(a:post where a.name='Post_385')-[e]-(b:user) return b.name;5: match(a:user where a.name='李轩')-[e:user_publish_post]->(b:post)<-[e2:forum_contain_post]-(c:forum) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有country以area,value,peopleNumber分组的value, 根据value升序排序",
        "output": "match(a:country) return a.value group by a.area, a.value, a.peopleNumber order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person张红关联的person,被其他person认识的数量",
        "output": "match(a:person where a.name='张红')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表560,299, 源点的id等于输入表id,查找所有和名为陈思思的teacher有friend关系,或有friend的friend关系的course",
        "output": "with p as (select * from (VALUES(560),(299)) as t(id)) MATCH (a:teacher WHERE a.id = p.id AND (n.name = 陈思思)) -[e:friend ]->{1,2}(b:course) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被医生郑建国属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where b.name='郑建国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到拥有label属性且被Post_258和Post_101同时拥有的节点。",
        "output": "match(a where a.name = 'Post_258')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_101') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回评论的三角的环,边类型为comment_belong_film, 并返回这些点的id;2: 帮我查询类型为film的点,返回28个;3: 请帮我找出与person吴思思有关,且与tag古代有关系的film节点;4: 查询person马建聪的全部朋友,的f0对686取余的值;5: 请帮我找出所有tag以id分组的name, 根据name从小到大排序;6: 请帮我查找全部id为97的comment关联的film,和以releases关系关联了这些film的其他cinema;7: 给出label为标签的全部点,并根据价值降序排列;8: 计算所有电影院的id的数量除id的值;",
        "output": "查询语句为:1: match(a:comment)-[e:comment_belong_film]->(b)-[e2:comment_belong_film]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:film) return a limit 28;3: match(a:person where a.name='吴思思')-[e:person_watch_film]-(b:film)-[e2:film_has_tag]-(c:tag where c.name='古代') return b;4: match(a:person where a.name= '马建聪')-[e:friend]->(b) return e.f0 % 686;5: match(a:tag) return a.name group by a.id order by a.name asc;6: match(a:comment where a.id = '97')-[e]-(b:film)<-[e2:cinema_releases_film]-(c:cinema) return b,c;7: match(a:tag) return a order by a.value desc;8: match(a:cinema) return COUNT(a.id) / a.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找全部名为Post_435的,名字不等于悬疑或名字等于喜剧的相关者,返回这些相关者的价值,和边的f1,权重,源点id;2: 帮我查询全部标签以id,名字,价值分组的价值, 根据价值从大到小排序;3: 查询label为post的全部点,并根据value降序排列;",
        "output": "查询语句为:1: match(a where a.name='Post_435')-[e:relation]->(b where b.name <> '悬疑' or b.name = '喜剧') return b.value,e.f1, e.weight, e.srcId;2: match(a:tag) return a.value group by a.id, a.name, a.value order by a.value desc;3: match(a:post) return a order by a.value desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表980,888, 以属性id作为相等条件,查询从patient何强出发,经过标签为patient_accept_prescription的边,走2到5度到达的prescription点",
        "output": "with p as (select * from (VALUES(980),(888)) as t(id)) MATCH (a:patient WHERE a.id = p.id AND (a.name = '何强')) -[e:patient_accept_prescription ]->{2,5}(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型为城市,边类型为包含,并且权重的数量大于183,f1为false的边",
        "output": "match(a:city)-[e:contain where COUNT(e.weight) > 183 and e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减504的个数",
        "output": "COUNT(a.value - 504)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与city杭州有关系的company的id",
        "output": "match(a:city where a.name='杭州')-[e]-(b:company) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和用户有关联的合并请求节点,并根据其id,名字分组,返回id,名字,以及id除16的值",
        "output": "match(a:user)-[e:creates]-(b:pullRequest) return b.id, b.name, b.id / 16 group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与ID为9的帖子相关的论坛的朋友，再给出与该论坛有关的伙伴。",
        "output": "match(a:post where id = '9')-[e]-(b:forum)-[e2:friend]->(c), (b:forum)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以包含关系关联了城市重庆的国家",
        "output": "match(a:city where a.name='重庆')<-[e:contain]-(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与喜剧有关联的电影",
        "output": "match(a:tag where a.name='喜剧')<-[e:has]-(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找卖家拥有的商品,返回其源点的身高除160除50的最大值,以及目标点的销量加销量的最大值",
        "output": "match(a:seller)-[e:has]->(b:goods) return MAX(a.height / 160 / 50), MAX(b.sellerNumber + b.sellerNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找119个名为Post_334的点has的标签为tag的节点,且其name不等于古代,value为32",
        "output": "match(a where a.name='Post_334')-[e:has]->(b:tag where b.name <> '古代' and b.value = 32) return b limit 119",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id,地址分组,计算大小除988的值",
        "output": "return a.size / 988 group by a.name, a.id, a.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person李红 likes的person,返回person knows的person的height加196的值",
        "output": "match(a:person where name = '李红')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.height + 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height分组,计算id除42减8047加89的值",
        "output": "return a.id / 42 - 8047 + 89 group by a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按性别分组作者的身高，然后按照身高降序排列。",
        "output": "match(a:author) return a.height group by a.gender order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 给出全部源点满足条件createTime不等于2026年08月30日或name的平均值大于99,且wordCount大于923,目标点满足条件name为科幻,且标签等于post_has_tag的边;2: 帮我查询和帖子有关联的标签节点,并根据其价值分组,返回价值,以及价值减166的值;3: 查找所有源点类型为用户,目标点类型为帖子,类型为user_likes_post的边;4: 查询和user有关联的post节点,并根据其value,wordCount,name分组,返回value,wordCount,name,以及value减873的值;",
        "output": "查询语句为:1: match(a where (a.createTime <> '2026-08-30' or AVG(a.name) > 99) and a.wordCount > 923)-[e:post_has_tag]->(b where b.name = '科幻') return e;2: match(a:post)-[e:post_has_tag]-(b:tag) return b.value, b.value - 166 group by b.value;3: match(a:user)-[e:user_likes_post]->(b:post) return e;4: match(a:user)-[e:user_publish_post]-(b:post) return b.value, b.wordCount, b.name, b.value - 873 group by b.value, b.wordCount, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber,id,value分组,计算id的最小值减69的数量",
        "output": "return COUNT(MIN(a.id) - 69) group by a.peopleNumber, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与department关联的teacher节点，按height分组并返回。",
        "output": "match(a:department)-[e:has]-(b:teacher) return b.height group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型是编辑的所有点,并根据年龄升序排列",
        "output": "match(a:publisher) return a order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从卖家周思思出发,经过label为拥有的边,走3到6度到达的商品点",
        "output": "match(a:seller where a.name='周思思')-[e:has]->{3,6}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为伦敦的点包含的公司,并对这些公司的id进行求和",
        "output": "match(a where a.name='伦敦')-[e:contain]->(b:company) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询卖家拥有的商品,返回其源点的身高乘197的值,以及目标点的id除31加331的值",
        "output": "match(a:seller)-[e:has]->(b:goods) return a.height * 197, b.id / 31 + 331",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出value大于等于567且value大于877的节点",
        "output": "match(a where a.value >= 567 and a.value > 877) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出从person何若涵出发,经过类型为person_likes_comment的边,走1跳到达的评论点",
        "output": "match(a:person where a.name='何若涵')-[e:person_likes_comment]->{1,1}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 帮我查询value为空的节点;2: 返回loan defaultName deposit的account,被其他loan deposit的数量;3: 返回person何若涵的所有朋友,的权重加170.85的值;4: 给出账号Faker 转账的账号,返回账号 转账的账号的id的和对id取余的值 ;5: 帮我查询名为defaultName的loan,以及与其有关的person,并返回defaultName的amount和这些person的gender;6: 查找label为贷款的点,返回8个;7: 帮我查询136个与defaultName和defaultName1都存在关系的account节点;8: 查找16个和类型为person的点有person_apply_loan关系的贷款,以及和这些贷款有loan_deposit_account关系的账号;",
        "output": "查询语句为:1: match(a where (a.value is null)) return a;2: match(a:loan where a.name='defaultName')-[e:loan_deposit_account]->(b:account)<-[e2:loan_deposit_account]-(c:loan) return COUNT(c);3: match(a:person where a.name= '何若涵')-[e:friend]->(b) return e.weight + 170.85;4: match(a:account where name = 'Faker')-[e:account_transfer_account]->(b:account)-[e2:account_transfer_account]->(c:account) return SUM(c.id) % c.id;5: match(a:loan where name = 'defaultName')-[e]-(b:person) return a.amount, b.gender;6: match(a:loan) return a limit 8;7: match(a where a.name='defaultName')-[e]->(b:account)<-[e2]-(c where c.name='defaultName1') return b limit 136;8: match(a:person)-[e:person_apply_loan]->(b:loan)-[e2:loan_deposit_account]->(c:account) return c limit 16;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与周建聪有申请关系，并与账号XXD有存款关系的贷款节点。返回这些贷款的ID、金额、权重，以及周建聪和账号XXD的最新信息。",
        "output": "match(a:person where a.name='周建聪')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='XXD') return a.id,b.id, b.amount, b.weight,c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询所有源点为person且边类型为knows的边，返回这些边的srcId加上64以及f0减去865的结果。",
        "output": "match(a:person)-[e:knows]->(b) return e.srcId + 64, e.f0 - 865",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查找与好视影院有关，且标签为文艺的电影？",
        "output": "match(a:cinema where a.name='好视影院')-[e:releases]-(b:film)-[e2:has]-(c:tag where c.name='文艺') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,name,id, 数据为(900,'西虹市首富',16),(893,'绿巨人',89),(97,'泰坦尼克号',80),(700,'绿巨人',0)的子查询作为输入表, 以属性id作为相等条件,请帮我查找名为赵思思的,id为84的伙伴,返回这些伙伴的字数,和边的权重",
        "output": "with p as (select * from (VALUES(900,'西虹市首富',16),(893,'绿巨人',89),(97,'泰坦尼克号',80),(700,'绿巨人',0)) as t(value,name,id))MATCH (a WHERE a.id = p.id AND (a.name = '赵思思')) -[e:partner ]->(b WHERE b.id = 84) RETURN b.wordCount, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,金额,权重分组,计算id对0取余的值",
        "output": "return a.id % 0 group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与seller Alice有关联的商品，然后再找出这些商品中与Alice有关联的商品。",
        "output": "match(a:seller where a.name = 'Alice')-[e:has]->(b:goods),(a:seller where a.name = 'Alice')<-[e2:has]-(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为167的person的相关partner，再查询与该person相关的partner",
        "output": "match(a:person where id = '167')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person李强认识的person,和李强认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '李强')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(65,5865,'male'),(49,6018,'famale'),(31,9767,'male'),(6,1588,'male')作为请求表数据,属性分别为age,salary,gender, 以属性age作为相等条件,返回182个名为李思思的点支付的label为person的节点,且其年龄大于等于70,id为空",
        "output": "with p as (select * from (VALUES(65,5865,'male'),(49,6018,'famale'),(31,9767,'male'),(6,1588,'male')) as t(age,salary,gender))MATCH (a WHERE a.age = p.age AND (a.name = '李思思')) -[e:person_pay_person ]->(b:person WHERE b.age >= 70 AND b.id IS NULL) RETURN b LIMIT 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找用户的三角的环,边类型为创造, 并返回这些点的id",
        "output": "match(a:user)-[e:creates]->(b)-[e2:creates]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与ID为108的人有关的人，包括其恋人，以及与其有血缘关系的父母。",
        "output": "match(a:person where id = '108')-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Bilibili的,价值不为空,等级大于等于844的朋友,返回这些朋友的id,和边的目标点id,源点id,f0",
        "output": "match(a where a.name='Bilibili')-[e:friend]->(b where (b.value is not null) and b.level >= 844) return b.id,e.targetId, e.srcId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回131个名为Comment_281的点belong的标签等于film的节点,且节点value大于576",
        "output": "match(a where a.name='Comment_281')-[e:belong]->(b:film where b.value > 576) return b limit 131",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与country有关的company节点，但不包括名字为'滴滴'的公司。然后返回这些节点的id除以88的平均值和value对83取余的结果。",
        "output": "match(a:country)-[e]->(b:company where b.name <> '滴滴') return AVG(b.id / 88), b.value % 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找46个与喜剧和其他都存在关系的帖子节点",
        "output": "match(a where a.name='喜剧')-[e]->(b:post)<-[e2]-(c where c.name='其他') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点类型为person,边类型为投资,以及目标点id等于130且权重大于等于137.24,权重为空的边",
        "output": "match(a:person)-[e:invest where e.targetId = 130 and e.weight >= 137.24 and (e.weight is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为北京大学的,value为空且name不是谷歌的relation,返回这些relation的name,和边的srcId",
        "output": "match(a where a.name='北京大学')-[e:relation]->(b where (b.value is null) and b.name <> '谷歌') return b.name,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出university电子科技大学cooperate的company,以及contain这些company的city, 令company的name等于company的id乘31加854,令city的name等于university的name, 返回university的name,company的scale,city的name",
        "output": "match(a:university where name = '电子科技大学')-[e:cooperate]->(b:company)<-[e2:contain]-(c:city) let b.name = b.id * 31 + 854,let c.name = a.name return a.name,b.scale,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,age,height, 数据为('孙伟',36,189),('吴红',70,171),('张强',13,161)的子查询作为输入表, 以属性name作为相等条件,返回178个与张科和陈轩都存在关系的部门节点",
        "output": "with p as (select * from (VALUES('孙伟',36,189),('吴红',70,171),('张强',13,161)) as t(name,age,height))MATCH (a WHERE a.name = p.name AND (a.name = '张科')) -[e ]->(b:department) <-[e2 ]-(c WHERE c.name = '陈轩') RETURN b LIMIT 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出和company字节有关的city,称为X,再找出和这个X有关联的其他company,以及和X有关联的country",
        "output": "match(a:company where a.name = '字节')-[e]-(b:city), (b:city)-[e2]-(c:company),(b:city)-[e3]-(d:country) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与标签（tag)有关系的个人节点，并返回这些个人节点中身高小于151的人的最小薪资，以及他们的身高对180取余的值。",
        "output": "match(a:tag)-[e]->(b:person where b.height < 151) return MIN(b.salary / b.salary), b.height % 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有user的friend,或者这些user的friend的朋友",
        "output": "match(a:user)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定所有源点为帖子，边为拥有的边，返回这些边的目标ID平均值乘以101乘以191,再加上最大权重。",
        "output": "match(a:post)-[e:has]->(b) return SUM(AVG(e.targetId) * 101 * 191), MAX(e.weight) + e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('郑梅',199,'male'),('吴月',154,'famale'),('韩若涵',153,'famale'),('周红',152,'famale')作为请求表数据,属性分别为name,height,gender, 源点的height等于输入表height,找出前150个标签等于person_parent_person的边",
        "output": "with p as (select * from (VALUES('郑梅',199,'male'),('吴月',154,'famale'),('韩若涵',153,'famale'),('周红',152,'famale')) as t(name,height,gender))MATCH (a WHERE a.height = p.height) -[e:person_parent_person ]->(b) RETURN e LIMIT 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有用户的伙伴,或其伙伴的伙伴",
        "output": "match(a:user)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查找person invest的company,返回其源点的salary对4904取余的平均值,以及目标点的value的最小值除value的最小值;2: 计算所有company的value乘value的最大值;3: 查询以存款关系关联了账号TheShy的贷款;4: 找出名为defaultName的贷款;",
        "output": "查询语句为:1: match(a:person)-[e:person_invest_company]->(b:company) return AVG(a.salary % 4904), MIN(MIN(b.value) / b.value);2: match(a:company) return MAX(a.value * a.value);3: match(a:account where a.name='TheShy')<-[e:loan_deposit_account]-(b:loan) return b;4: match(a:loan where a.name = 'defaultName') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回seller王宏的类型是friend的边,并根据f1降序排列,返回23个",
        "output": "match(a:seller where a.name = '王宏')-[e:friend]->(b) return b order by e.f1 desc limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和大学点有拥有关系的部门节点,且边满足条件源点id大于132,目标部门节点满足条件价值在484到999之间",
        "output": "match(a:university)-[e:has where e.srcId > 132]->(b:department where (b.value BETWEEN 484 AND 999)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为78的loan有关的account的partner, 再请帮我查找和account有关系的relation",
        "output": "match(a:loan where id = 78)-[e]-(b:account)-[e2:partner]->(c), (b:account)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询pullRequest的三角的环,边标签等于belong, 并返回这些点的id",
        "output": "match(a:pullRequest)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为郑建国的,name不等于少年闰土的partner,返回这些partner的price,和边的f1,weight,timeStamp",
        "output": "match(a where a.name='郑建国')-[e:partner]->(b where b.name <> '少年闰土') return b.price,e.f1, e.weight, e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为PR-417的节点属于的事项或仓库或合并请求",
        "output": "match(a where a.name='PR-417')-[e:belong]->(b:issue | repository | pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表336,119,167,748,35, 以属性id作为相等条件,帮我查询前7个满足条件name不是徐国强或salary乘7009对1585取余不是190的publisher",
        "output": "with p as (select * from (VALUES(336),(119),(167),(748),(35)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (a.name <> '徐国强' OR a.salary * 7009 % 1585 <> 190)) RETURN a LIMIT 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为徐月的节点knows的person或company",
        "output": "match(a where a.name='徐月')-[e:knows]->(b:person | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和读者徐思思之间有喜欢关系的书",
        "output": "match(a:reader where a.name='徐思思')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为156的用户有关的用户的相关者, 再请帮我查找和用户有关系的伙伴",
        "output": "match(a:user where id = 156)-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和user Alice有关系的forum,返回这些点的name",
        "output": "match(a:user where a.name='Alice')-[e]-(b:forum) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person张科提交的软件,和张科购买的软件",
        "output": "match(a:software)<-[e:commits]-(b:person where name = '张科')-[e2:buy]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 找出所有与商品有关系的卖家节点,且卖家节点的性别是famale,并返回这些点的id的平均值对19取余的最大值,以及薪资减5699对156取余的最小值;2: 帮我查询和卖家郑红有seller_has_goods关系的商品,以及和买家郑建国有buyer_creates_orders关系的订单,将它们都返回;3: 查找类型是seller_has_goods,且weight等于106.75,f1不是false,srcId为113的边;4: 返回前90个类型是buyer_cancel_orders的边;",
        "output": "查询语句为:1: match(a:goods)-[e]->(b:seller where b.gender = 'famale') return MAX(AVG(b.id) % 19), MIN(b.salary - 5699 % 156);2: match(a:seller where a.name = '郑红')-[e:seller_has_goods]->(b:goods),(c:buyer where c.name = '郑建国')-[e2:buyer_creates_orders]->(d:orders)return a, b, c, d;3: match(a)-[e:seller_has_goods where e.weight = 106.75 and e.f1 <> false and e.srcId = 113]->(b) return e;4: match(a)-[e:buyer_cancel_orders]->(b) return e limit 90;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,weight, 数据为('Prescription_244',31,821),('Prescription_368',56,650), 源点的name等于输入表name,请帮我找出所有user的partner,或其partner的partner",
        "output": "with p as (select * from (VALUES('Prescription_244',31,821),('Prescription_368',56,650)) as t(name,id,weight))MATCH (a:user WHERE a.name = p.name) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与吴雪和李强都有关系的191个人。",
        "output": "match(a where a.name='吴雪')-[e]->(b:person)<-[e2]-(c where c.name='李强') return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person张雪喜欢的person,被其他person认识的数量",
        "output": "match(a:person where a.name='张雪')-[e:likes]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "筛选出181位年龄非空且性别为女性的作家，按照性别从大到小排序。",
        "output": "match(a:author where (a.age is not null) and a.gender = 'famale') return a order by a.gender desc limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标注为人的人有支付关系的人，以及他们喜欢的人，还有与他们有支付关系的人。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:likes]->(c:person)-[e3:pay]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点满足条件gender不等于famale或salary不是4068,且id是43,目标点满足条件value在784到988之间,wordCount不为空,且label为publish的边",
        "output": "match(a where (a.gender <> 'famale' or a.salary <> 4068) and a.id = 43)-[e:publish]->(b where (b.value BETWEEN 784 AND 988) and (b.wordCount is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出以喜欢关系关联了person周月的person",
        "output": "match(a:person where a.name='周月')<-[e:person_likes_person]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回176个同时与纽约和深圳有联系的公司的节点。",
        "output": "match(a where a.name='纽约')-[e]->(b:company)<-[e2]-(c where c.name='深圳') return b limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与我有同事关系的人，他们又与其他人有同事关系，并且这些人之间又有朋友关系。",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:colleague]->(c:person)-[e3:friend]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出学生陈红选择的课程,以及选择这些课程的学生, 令课程的价值等于课程的id对77取余除327,令学生的性别等于学生的id的平均值减8, 返回学生(a)的名字,课程(b)的学分,学生(c)的身高",
        "output": "match(a:student where name = '陈红')-[e:selects]->(b:course)<-[e2:selects]-(c:student) let b.value = b.id % 77 / 327,let a.gender = AVG(a.id) - 8 return a.name,b.credit,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询与person马建聪有关,且与person韩宏有关系的person节点;2: 查询所有源点满足条件age乘age小于等于74或name是何轩,目标点满足条件gender不等于male或height为空,且标签为person_pay_person的边;3: 帮我查询和person点有喜欢关系的person节点,且边满足条件weight的最小值除173.54的个数大于等于173.79,目标person节点薪资小于33;4: 给出与person吴月存在person_pay_person关系,且与person郑雪存在person_likes_person关系的person节点，返回这些person的id,年龄,及person吴月的薪资,及person郑雪的身高;5: 找出person陈梅 喜欢的person,返回person 支付的person的id除73乘5625的最大值 ;6: 请帮我找出和person黄雪有person_knows_person关系的person,再请帮我找出以person_likes_person关系关联了黄雪的person;7: 查找和person张若涵之间有person_likes_person关系的person;8: 返回所有和person点有knows关系的person节点,且边满足条件f1等于false,目标person节点age的个数大于等于199;9: 找出全部名为吴建国的点knows的person;",
        "output": "查询语句为:1: match(a:person where a.name='马建聪')-[e:person_knows_person]-(b:person)-[e2:person_pay_person]-(c:person where c.name='韩宏') return b;2: match(a where a.age * a.age <= 74 or a.name = '何轩')-[e:person_pay_person]->(b where b.gender <> 'male' or (b.height is null)) return e;3: match(a:person)-[e:person_likes_person where COUNT(MIN(e.weight) / 173.54) >= 173.79]->(b:person where b.salary < 33) return b;4: match(a:person where a.name='吴月')-[e:person_pay_person]->(b:person)<-[e2:person_likes_person]-(c:person where c.name='郑雪') return a.salary,b.id, b.age,c.height;5: match(a:person where name = '陈梅')-[e:person_likes_person]->(b:person)-[e2:person_pay_person]->(c:person) return MAX(c.id / 73 * 5625);6: match(a:person where a.name = '黄雪')-[e:person_knows_person]->(b:person),(a:person where a.name = '黄雪')<-[e2:person_likes_person]-(c:person)return a, b, c;7: match(a:person where a.name='张若涵')-[e:person_likes_person]->(b:person) return b;8: match(a:person)-[e:person_knows_person where e.f1 = false]->(b:person where COUNT(b.age) >= 199) return b;9: match(a where a.name='吴建国')-[e:person_knows_person]->(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和pullRequest PR-238有2度关系的pullRequest",
        "output": "match(a:pullRequest where a.name='PR-238')-[e]->{2,2}(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 帮我查询卖家周建国的标签等于朋友的边,并根据权重从大到小排列,返回197个;2: 返回全部源点类型是buyer,边类型是buyer_creates_orders,且满足条件timeStamp不是2023年12月05日且weight大于107.28,或timeStamp不等于2001年09月04日的边;3: 请帮我找出与买家张若涵和李国强都存在buyer_consult_seller关系的点;4: 请帮我查找以查看关系关联了商品手机的买家;5: 找出订单Order_453的全部标签为朋友的边,并根据源点id降序排列,返回106个;6: 请帮我找出所有源点标签等于买家,边标签等于buyer_consult_seller的边,返回这些边的f0乘842的平均值,和targetId的最大值乘106的值;7: 请帮我找出与买家Jack和李雪都存在buyer_look_goods关系的点;8: 返回从buyer郑月出发,经过label为buyer_creates_orders的边,走3跳到达的orders点;",
        "output": "查询语句为:1: match(a:seller where a.name = '周建国')-[e:friend]->(b) return b order by e.weight desc limit 197;2: match(a:buyer)-[e:buyer_creates_orders where (e.timeStamp <> '2023-12-05' and e.weight > 107.28) or e.timeStamp <> '2001-09-04']->(b) return e;3: match(a:buyer where a.name='张若涵')-[e:buyer_consult_seller]->(b)<-[e2:buyer_consult_seller]-(c:buyer where c.name='李国强') return b;4: match(a:goods where a.name='手机')<-[e:buyer_look_goods]-(b:buyer) return b;5: match(a:orders where a.name = 'Order_453')-[e:friend]->(b) return b order by e.srcId desc limit 106;6: match(a:buyer)-[e:buyer_consult_seller]->(b) return AVG(e.f0 * 842), MAX(e.targetId) * 106;7: match(a:buyer where a.name='Jack')-[e:buyer_look_goods]->(b)<-[e2:buyer_look_goods]-(c:buyer where c.name='李雪') return b;8: match(a:buyer where a.name='郑月')-[e:buyer_creates_orders]->{3,3}(b:orders) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加84的值",
        "output": "a.id + 84",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 杜伟和何若涵共同创建了评论节点。",
        "output": "match(a where a.name = '杜伟')-[e:creates]->(b:comment)<-[e2:creates]-(c where c.name = '何若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是编辑,名为赵科的点,返回这些点的年龄,id",
        "output": "match(a:publisher where a.name = '赵科') return a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与用户吴伟和赵科都存在喜欢关系的点",
        "output": "match(a:user where a.name='吴伟')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询103个与知乎和百度贴吧都存在关系的论坛节点",
        "output": "match(a where a.name='知乎')-[e]->(b:forum)<-[e2]-(c where c.name='百度贴吧') return b limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询公司腾讯的全部标签为伙伴的边,并根据f0降序排列,返回73个",
        "output": "match(a:company where a.name = '腾讯')-[e:partner]->(b) return b order by e.f0 desc limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和名为Order_427的订单有朋友关系,或有朋友的朋友关系的商品",
        "output": "match(a:orders where n.name=Order_427)-[e:friend]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查找以has关系关联了student何建国的department;2: 找出名字是马克思原理或课时不为空或id的最小值大于等于611的节点;3: 请帮我找出和学生有关联的课程节点,并根据其id,学分,名字分组,返回id,学分,名字,以及学分乘1的值;4: 请帮我找出大学中国科技大学 拥有的部门,返回部门 拥有的教师的身高除152的值 ;5: 返回student徐建聪selects的course,被其他student selects的数量;6: 给出与学生有关系的大学节点,且大学节点的价值小于916,并返回这些点的价值对138取余加660的值,以及等级减4的值;7: 查询id为161的university有关的department的relation, 再查询和department有关系的friend;8: 查找学生的三角的环,边label为student_selects_course, 并返回这些点的id;9: 查找标签为大学的点;",
        "output": "查询语句为:1: match(a:student where a.name='何建国')<-[e:department_has_student]-(b:department) return b;2: match(a where a.name = '马克思原理' or (a.courseHour is not null) or MIN(a.id) >= 611) return a;3: match(a:student)-[e:student_selects_course]-(b:course) return b.id, b.credit, b.name, b.credit * 1 group by b.id, b.credit, b.name;4: match(a:university where name = '中国科技大学')-[e:university_has_department]->(b:department)-[e2:department_has_teacher]->(c:teacher) return c.height / 152;5: match(a:student where a.name='徐建聪')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c:student) return COUNT(c);6: match(a:student)-[e]->(b:university where b.value < 916) return b.value % 138 + 660, b.level - 4;7: match(a:university where id = '161')-[e]-(b:department)-[e2:relation]->(c), (b:department)-[e3:friend]->(d) return a, b, c, d;8: match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id;9: match(a:university) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出seller李雪has的goods, 令goods的value等于goods的value,令seller的category等于goods的id,令goods的age等于seller的height的个数, 返回seller的age, goods的category",
        "output": "match(a:seller where a.name='李雪')-[e:has]->(b:goods) let b.value = b.value,let a.category = b.id,let b.age = COUNT(a.height) return a.age,b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生郑国强属于的部门,和郑国强创造的处方",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '郑国强')-[e2:creates]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前72个标签等于contain的边",
        "output": "match(a)-[e:contain]->(b) return e limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为peopleNumber,value,id, 数据为(804,36,42),(733,43,83)的子查询作为输入表, 以属性peopleNumber作为相等条件,帮我查询类型是company_apply_loan,并且srcId对57取余小于等于110或f1不是false或weight除125.47大于144的边",
        "output": "with p as (select * from (VALUES(804,36,42),(733,43,83)) as t(peopleNumber,value,id))MATCH (a WHERE a.peopleNumber = p.peopleNumber) -[e:company_apply_loan WHERE e.srcId % 57 <= 110 OR e.f1 <> FALSE OR e.weight / 125.47 > 144 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照名字对评论进行分组，然后按照创建时间从大到小排序。",
        "output": "match(a:comment) return a.createTime group by a.name, a.wordCount order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 请帮我查找前146个价格不为空的订单;2: 返回源点年龄为空,边类型是seller_has_goods,且权重大于等于165.63的边,返回这些边的权重除权重对f0取余的值;3: 查找全部名为Order_223的点的,名字不等于短袖或名字为短袖的相关者,返回这些相关者的价格,和边的目标点id,f0;4: 查找buyer的1度的环;5: 返回6个id除id的和小于159的seller,根据gender升序排列;6: 请帮我查找10个与周建聪和黄建国都存在关系的orders节点;7: 帮我查询123个价格大于1066.49的订单,根据价值从小到大排列;8: 查找和买家有关联的订单节点,并根据其价格,名字分组,返回价格,名字,以及id乘id的最大值;9: 帮我查询全部名为郑思思的点consult的seller;",
        "output": "查询语句为:1: match(a:orders where (a.price is not null)) return a limit 146;2: match(a where (a.age is null))-[e:seller_has_goods where e.weight >= 165.63]->(b) return e.weight / e.weight % e.f0;3: match(a where a.name='Order_223')-[e:relation]->(b where b.name <> '短袖' or b.name = '短袖') return b.price,e.targetId, e.f0;4: match(a:buyer)->{0,0}(b)->(a) return a.id, b.id as b_id;5: match(a:seller where SUM(a.id / a.id) < 159) return a order by a.gender asc limit 6;6: match(a where a.name='周建聪')-[e]->(b:orders)<-[e2]-(c where c.name='黄建国') return b limit 10;7: match(a:orders where a.price > 1066.49) return a order by a.value asc limit 123;8: match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.price, b.name, MAX(b.id * b.id) group by b.price, b.name;9: match(a where a.name='郑思思')-[e:buyer_consult_seller]->(b:seller) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除65的值",
        "output": "a.id / 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部label为university的点",
        "output": "match(a:university) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出处方以名字分组的创建时间, 根据创建时间从大到小排序",
        "output": "match(a:prescription) return a.createTime group by a.name order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询公司属于的城市,返回其源点的价值除572的值,以及目标点的id除id的最小值",
        "output": "match(a:company)-[e:belong]->(b:city) return a.value / 572, MIN(b.id / b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找关联person周宏的person,和这些person家人的person",
        "output": "match(a:person where name = '周宏')<-[e:relates]-(b:person)-[e2:family]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以633,424,191,696,680作为请求点id, 以属性id作为相等条件,返回所有city的partner,或其partner的partner",
        "output": "with p as (select * from (VALUES(633),(424),(191),(696),(680)) as t(id)) MATCH (a:city WHERE a.id = p.id) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和仓库有关联的用户节点,并根据其id,身高,性别分组,返回id,身高,性别,以及age的数量除47的值",
        "output": "match(a:repository)-[e:has]-(b:user) return b.id, b.height, b.gender, COUNT(b.age) / 47 group by b.id, b.height, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为杜思思的person,以及与其有关的person,并返回杜思思的身高和这些person的id",
        "output": "match(a:person where name = '杜思思')-[e]-(b:person) return a.height, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与土木学院相关的大学，再返回土木学院的其他教师。",
        "output": "match(a:department where a.name = '土木学院')-[e]-(b:university), (a:department)-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点名字为百度贴吧,人数不为空,人数不为空,边标签等于包含,且满足条件目标点id大于等于991,权重大于942,或权重不为空的边,返回这些边的f0的最大值除655的值",
        "output": "match(a where a.name = '百度贴吧' and (a.peopleNumber is not null) and (a.peopleNumber is not null))-[e:contain where (e.targetId >= 991 and e.weight > 942) or (e.weight is not null)]->(b) return MAX(e.f0) / 655",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为何思琪的点喜欢的评论,并对这些评论的id进行求和",
        "output": "match(a where a.name='何思琪')-[e:likes]->(b:comment) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出前186个id不为空且name不是蚂蚁集团,name是美团的company",
        "output": "match(a:company where (a.id is not null) and a.name <> '蚂蚁集团' and a.name = '美团') return a limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回评论Comment_179属于的电影,被其他电影院上映的数量;2: 帮我查询和tag喜剧有关的cinema,称为X,再帮我查询和这个X有关联的其他film,以及和X有关联的comment;3: 返回名为泰坦尼克号的点has的全部tag,并对这些点的name进行求和;4: 找出所有名为周强的点的,名字等于星际穿越的伙伴,返回这些伙伴的类别,和边的时间戳,源点id;5: 查询person王月观看的电影,被其他person观看的数量;6: 给出类型为电影院的点,返回57个;",
        "output": "查询语句为:1: match(a:comment where a.name='Comment_179')-[e:comment_belong_film]->(b:film)<-[e2:cinema_releases_film]-(c:cinema) return COUNT(c);2: match(a:tag where a.name = '喜剧')-[e]-(b:cinema), (b:cinema)-[e2]-(c:film),(b:cinema)-[e3]-(d:comment) return a, b, c, d;3: match(a where a.name='泰坦尼克号')-[e:film_has_tag]->(b:tag) return SUM(b.name);4: match(a where a.name='周强')-[e:partner]->(b where b.name = '星际穿越') return b.category,e.timeStamp, e.srcId;5: match(a:person where a.name='王月')-[e:person_watch_film]->(b:film)<-[e2:person_watch_film]-(c:person) return COUNT(c);6: match(a:cinema) return a limit 57;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和类型是公司的点有雇佣关系的person,以及和这些person有认识关系的person,以及和这些person有认识关系的person",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:knows]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,salary,height, 数据为('famale',5632,191),('famale',7240,159), 源点的gender等于输入表gender,返回person孙红申请的贷款,被其他公司申请的数量",
        "output": "with p as (select * from (VALUES('famale',5632,191),('famale',7240,159)) as t(gender,salary,height))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '孙红')) -[e:person_apply_loan ]->(b:loan) <-[e2:company_apply_loan ]-(c:company) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出卖家李月的伙伴,的目标点id对32取余的值",
        "output": "match(a:seller where a.name= '李月')-[e:partner]->(b) return e.targetId % 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查找公司的3跳的环",
        "output": "match(a:company)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找49个名为Post_233的点拥有的类型为标签的节点,且节点价值小于等于984,价值大于等于339",
        "output": "match(a where a.name='Post_233')-[e:has]->(b:tag where b.value <= 984 and b.value >= 339) return b limit 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出包含帖子Post_459的论坛。",
        "output": "match(a:post where a.name='Post_459')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名字为'王伟'的所有person节点，计算它们的id加上83和身高除以191后的余数。",
        "output": "match(a:person)-[e]->(b:person where b.name = '王伟') return b.id + 83, b.height % 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,salary,gender, 数据为(196,2310,'male')的子查询作为输入表, 以属性salary作为相等条件,查询与buyer陈梅有关,且与goods椅子有关系的orders节点",
        "output": "with p as (select * from (VALUES(196,2310,'male')) as t(height,salary,gender))MATCH (a:buyer WHERE a.salary = p.salary AND (a.name = '陈梅')) -[e:buyer_creates_orders ]-(b:orders) -[e2:orders_contain_goods ]-(c:goods WHERE c.name = '椅子') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被用户郑若涵创造的合并请求",
        "output": "match(a:pullRequest)<-[e:creates]-(b:user where b.name='郑若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找吴伟创建的评论，并统计其他人喜欢的数量。",
        "output": "match(a:person where a.name='吴伟')-[e:creates]->(b:comment)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为艺术学院的,name为黄若涵且id不为空的relation,返回这些relation的id,和边的f1",
        "output": "match(a where a.name='艺术学院')-[e:relation]->(b where b.name = '黄若涵' and (b.id is not null)) return b.id,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户郑强的所有类型是相关者的边,并根据f1降序排列,返回46个",
        "output": "match(a:user where a.name = '郑强')-[e:relation]->(b) return b order by e.f1 desc limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和卖家黄轩有关的卖家,称为X,再给出和这个X有关联的其他订单,以及和X有关联的订单",
        "output": "match(a:seller where a.name = '黄轩')-[e]-(b:seller), (b:seller)-[e2]-(c:orders),(b:seller)-[e3]-(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于student,名为孙月的点,返回这些点的name,age,gender",
        "output": "match(a:student where a.name = '孙月') return a.name, a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找一家叫做滴滴的公司。",
        "output": "match(a:company where a.name = '滴滴') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从company微软出发,经过类型是apply的边,走3度到达的loan点",
        "output": "match(a:company where a.name='微软')-[e:apply]->{3,3}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最大值乘508除391的值",
        "output": "MAX(a.value) * 508 / 391",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查找person杜月pay的person,被其他person pay的数量;2: 给出person的2跳以内的环;3: 给出以支付关系关联了person周月的person;4: 给出所有源点类型为person,边类型为person_knows_person,且满足条件源点id不等于142或源点id等于117或f0在851到897之间的边;5: 请帮我查找196个与杜轩和何思琪都存在关系的person节点;",
        "output": "查询语句为:1: match(a:person where a.name='杜月')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c:person) return COUNT(c);2: match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id;3: match(a:person where a.name='周月')<-[e:person_pay_person]-(b:person) return b;4: match(a:person)-[e:person_knows_person where e.srcId <> 142 or e.srcId = 117 or (e.f0 BETWEEN 851 AND 897)]->(b) return e;5: match(a where a.name='杜轩')-[e]->(b:person)<-[e2]-(c where c.name='何思琪') return b limit 196;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回病人接受的处方,返回其源点的id除id的值,以及目标点的权重乘291的平均值",
        "output": "match(a:patient)-[e:accept]->(b:prescription) return a.id / a.id, AVG(b.weight * 291)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除8除24的最大值",
        "output": "MAX(a.id / 8 / 24)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 帮我查询全部源点标签等于买家,边标签等于buyer_consult_seller,并且f0不是857的边;2: 请帮我查找买家查看的商品,返回其源点的salary的个数减薪资的平均值,以及目标点的id除79的值;3: 给出和订单Order_301有关系的商品节点,返回这些点的销量,id;4: 请帮我找出与名为张若涵和徐雪的点共同creates的,label为orders的节点;",
        "output": "查询语句为:1: match(a:buyer)-[e:buyer_consult_seller where e.f0 <> 857]->(b) return e;2: match(a:buyer)-[e:buyer_look_goods]->(b:goods) return AVG(COUNT(a.salary) - a.salary), b.id / 79;3: match(a:orders where a.name='Order_301')-[e]-(b:goods) return b.sellerNumber, b.id;4: match(a where a.name = '张若涵')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c where c.name = '徐雪') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前5个类型是咨询的边",
        "output": "match(a)-[e:consult]->(b) return e limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 请帮我找出和buyer何建聪之间有buyer_look_goods关系的goods;2: 返回所有源点标签为buyer,边标签为buyer_look_goods,并且满足条件f1不是false的边;3: 请帮我查找全部源点height为空且name不等于吴思思,或name不是韩月,目标点age在49到65之间或salary是4833或gender等于male,且类型是buyer_consult_seller的边;4: 请帮我查找和buyer郑若涵之间有buyer_cancel_orders关系的orders;5: 查询与buyer张建国和李雪都存在buyer_consult_seller关系的点;",
        "output": "查询语句为:1: match(a:buyer where a.name='何建聪')-[e:buyer_look_goods]->(b:goods) return b;2: match(a:buyer)-[e:buyer_look_goods where e.f1 <> false]->(b) return e;3: match(a where ((a.height is null) and a.name <> '吴思思') or a.name <> '韩月')-[e:buyer_consult_seller]->(b where (b.age BETWEEN 49 AND 65) or b.salary = 4833 or b.gender = 'male') return e;4: match(a:buyer where a.name='郑若涵')-[e:buyer_cancel_orders]->(b:orders) return b;5: match(a:buyer where a.name='张建国')-[e:buyer_consult_seller]->(b)<-[e2:buyer_consult_seller]-(c:buyer where c.name='李雪') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为黄梅的点likes的全部person,并对这些person的salary进行求和",
        "output": "match(a where a.name='黄梅')-[e:likes]->(b:person) return SUM(b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height对177取余的值",
        "output": "a.height % 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出大学中拥有关系的部门、与这些部门有关系的学生，以及这些学生选择的课程。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出37个部门物理学院和生物学院,共同的伙伴",
        "output": "match(a:department where a.name='物理学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='生物学院') return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为伦敦的点的,价值在303到645之间的相关者,返回这些相关者的id,和边的目标点id,f0,源点id",
        "output": "match(a where a.name='伦敦')-[e:relation]->(b where (b.value BETWEEN 303 AND 645)) return b.id,e.targetId, e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回仓库拥有的事项,返回其源点的id乘61的值,以及目标点的id的最大值对46取余的最大值",
        "output": "match(a:repository)-[e:has]->(b:issue) return a.id * 61, MAX(MAX(b.id) % 46)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id在8到18之间或id大于3,且id小于6的节点",
        "output": "match(a where ((a.id BETWEEN 8 AND 18) or a.id > 3) and a.id < 6) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,gender, 数据为(166,8,'famale'),(191,27,'male'),(154,32,'male')的子查询作为输入表, 以属性height作为相等条件,请帮我找出全部与person有关系的person节点,且person节点的性别等于male,并返回这些点的薪资减1697的数量,以及薪资减1263的值",
        "output": "with p as (select * from (VALUES(166,8,'famale'),(191,27,'male'),(154,32,'male')) as t(height,id,gender))MATCH (a:person WHERE a.height = p.height) -[e ]->(b:person WHERE b.gender = 'male') RETURN COUNT(b.salary - 1697), b.salary - 1263 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以694,657,74,250作为请求点id, 以属性id作为相等条件,给出与city巴黎有关,且与company Bilibili有关系的university节点",
        "output": "with p as (select * from (VALUES(694),(657),(74),(250)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '巴黎')) -[e:city_contain_university ]-(b:university) -[e2:university_cooperate_company ]-(c:company WHERE c.name = 'Bilibili') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出投资公司微软的person,和这些person投资的公司",
        "output": "match(a:company where name = '微软')<-[e:invest]-(b:person)-[e2:invest]->(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为郑雪的person,以及与其有关的person,并返回郑雪的薪资和这些person的名字",
        "output": "match(a:person where name = '郑雪')-[e]-(b:person) return a.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与腾讯公司有关联，且与吴月女士有关联的贷款节点，并返回它们的ID、金额和权重。",
        "output": "match(a:company where a.name='腾讯')-[e]->(b:loan)<-[e2]-(c:person where c.name='吴月') return b.id, b.amount, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表112,688,864, 源点的id等于输入表id,请帮我查找类型为comment_belong_film,以及满足条件权重在108.58到123.26之间的边",
        "output": "with p as (select * from (VALUES(112),(688),(864)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:comment_belong_film WHERE e.weight BETWEEN ASYMMETRIC 108.58 AND 123.26 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表550,901,336,963,641, 以属性id作为相等条件,请帮我找出以拥有关系关联了标签文艺的电影",
        "output": "with p as (select * from (VALUES(550),(901),(336),(963),(641)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.name = '文艺')) <-[e:film_has_tag ]-(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出薪水为空、与medicine有关联的医生节点。返回这些节点的薪水除以3838后的余数，以及他们的身高减去174再乘以178的结果。",
        "output": "match(a:medicine)-[e]->(b:doctor where (b.salary is null)) return b.salary % 3838, (b.height - 174) * 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询XiaoHu相关的公司，然后查询XiaoHu偿还的其他贷款，并返回这些信息。",
        "output": "match(a:account where a.name = 'XiaoHu')-[e]-(b:company), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前194个类别不等于皮肤药或类别不是感冒药,且价格不为空的药品",
        "output": "match(a:medicine where (a.category <> '皮肤药' or a.category <> '感冒药') and (a.price is not null)) return a limit 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部company以peopleNumber分组的scale, 根据scale升序排序",
        "output": "match(a:company) return a.scale group by a.peopleNumber order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下从Comment_297出发，沿着属于关系走了3步后的电影节点",
        "output": "match(a:comment where a.name='Comment_297')-[e:belong]->{3,3}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询身高不为空或薪资大于7712的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:user where (a.height is not null) or a.salary > 7712)-[e:likes]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回62个与孙雪和吴伟都存在关系的person节点",
        "output": "match(a where a.name='孙雪')-[e]->(b:person)<-[e2]-(c where c.name='吴伟') return b limit 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和公司腾讯有雇佣关系的person,再返回以创造关系关联了腾讯的软件",
        "output": "match(a:company where a.name = '腾讯')-[e:employee]->(b:person),(a:company where a.name = '腾讯')<-[e2:creates]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 在电影院和上映的电影之间查找边。",
        "output": "match(a:cinema)-[e:releases]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于person,边标签等于提交,以及f1小于11,目标点id小于873的边",
        "output": "match(a:person)-[e:commits where e.f1 < 11 and e.targetId < 873]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询forum推特contain的user,被其他forum contain的数量",
        "output": "match(a:forum where a.name='推特')-[e:contain]->(b:user)<-[e2:contain]-(c:forum) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person黄月关联的person,和黄月关联的person",
        "output": "match(a:person)<-[e:relates]-(b:person where name = '黄月')-[e2:relates]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与person张月存在pay关系且与person黄建聪存在knows关系的person节点的id,person张月的身高，以及person黄建聪的性别。",
        "output": "match(a:person where a.name='张月')-[e:pay]->(b:person)<-[e2:knows]-(c:person where c.name='黄建聪') return a.height,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,salary,name, 数据为(150,4800,'赵宏')的子查询作为输入表, 源点的height等于输入表height,找出全部源点标签等于电影,目标点标签等于标签,标签等于film_has_tag的边",
        "output": "with p as (select * from (VALUES(150,4800,'赵宏')) as t(height,salary,name))MATCH (a:film WHERE a.height = p.height) -[e:film_has_tag ]->(b:tag) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与张思琪相关的评论，以及张思琪创建的其他评论，并将它们返回。",
        "output": "match(a:person where a.name = '张思琪')-[e]-(b:comment), (a:person)-[e2:creates]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点权重大于等于756,目标点id小于66或语言是go,且类型为属于的边",
        "output": "match(a where a.weight >= 756)-[e:belong]->(b where b.id < 66 or b.lang = 'go') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出在东京和纽约都有朋友的15个城市。",
        "output": "match(a:city where a.name='东京')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='纽约') return b limit 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以465,727,611,357作为请求点id, 源点的id等于输入表id,帮我查询全部名为马建国的点创造的处方",
        "output": "with p as (select * from (VALUES(465),(727),(611),(357)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '马建国')) -[e:doctor_creates_prescription ]->(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary的最大值除2197的值",
        "output": "return MAX(a.salary) / 2197 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询马伟和王科共有的parent，数量为37。",
        "output": "match(a:person where a.name='马伟')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='王科') return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为Order_329和Order_394的点共同contain的,类型是goods的节点",
        "output": "match(a where a.name = 'Order_329')-[e:contain]->(b:goods)<-[e2:contain]-(c where c.name = 'Order_394') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以82,639作为请求点id, 以属性id作为相等条件,帮我查询与city重庆和深圳都存在city_contain_company关系的点",
        "output": "with p as (select * from (VALUES(82),(639)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '重庆')) -[e:city_contain_company ]->(b) <-[e2:city_contain_company ]-(c:city WHERE c.name = '深圳') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height减183加192的和",
        "output": "return SUM(a.height - 183 + 192) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出部门拥有的医生,返回其源点的id对27取余的最大值,以及目标点的年龄减26加id的值",
        "output": "match(a:department)-[e:has]->(b:doctor) return MAX(a.id % 27), b.age - 26 + b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资分组,计算height的最大值加175的最小值",
        "output": "return MIN(MAX(a.height) + 175) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找被university武汉大学has的department;2: 给出university的2跳以内的环;3: 请帮我找出137个height不为空的teacher,根据id从大到小排列;4: 查询名为何轩和郑轩的,label为teacher的点公共的partner节点的名单;5: 返回id为131的department有关的teacher的friend, 再返回和teacher有关系的relation;6: 给出与学生周梅有student_selects_course关系的3度的环;7: 找出名为华中科技大学的点has的department;8: 请帮我查找所有源点类型为department,目标点类型为teacher,类型为department_has_teacher的边;9: 返回教师教的课程,返回其源点的年龄加6的值,以及目标点的课时除40的值;",
        "output": "查询语句为:1: match(a:department)<-[e:university_has_department]-(b:university where b.name='武汉大学') return a, b;2: match(a:university)->{0,1}(b)->(a) return a.id, b.id as b_id;3: match(a:teacher where (a.height is not null)) return a order by a.id desc limit 137;4: match(a:teacher where a.name='何轩')-[e:partner]->(b)<-[e2:partner]-(c:teacher where c.name='郑轩') return b.name;5: match(a:department where id = '131')-[e]-(b:teacher)-[e2:friend]->(c), (b:teacher)-[e3:relation]->(d) return a, b, c, d;6: match(a:student where name = '周梅')-[e:student_selects_course]->{2,2}(b)->(a) return a.id, b.id as b_id;7: match(a where a.name='华中科技大学')-[e:university_has_department]->(b:department) return b;8: match(a:department)-[e:department_has_teacher]->(b:teacher) return e;9: match(a:teacher)-[e:teacher_teach_course]->(b:course) return a.age + 6, b.courseHour / 40;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找大学的三角的环,边label为合作, 并返回这些点的id",
        "output": "match(a:university)-[e:cooperate]->(b)-[e2:cooperate]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我查找158个age小于42的person,根据gender从小到大排列;2: 请帮我查找源点id小于等于39,薪资减8726对5473取余不是5914,或薪资在3603到7844之间,边标签等于person_lover_person,且f0不等于745或f1是false或源点id加44小于等于159.62的边,返回这些边的源点id乘144的值;3: 帮我查询和person有关联的person节点,并根据其性别分组,返回性别,以及身高减163的和;4: 查找id为172的点的name;5: 查找和person点有knows关系的person节点,且边满足条件weight小于191.75,目标person节点name是马科;6: 查找所有与吴建国存在person_family_person关系的person,person与person存在person_colleague_person关系的点,返回这些点的gender;7: 请帮我查找全部与person有关系的person节点,且person节点的height不为空,并返回这些点的salary的个数乘9224的值,以及age乘16的值;8: 查找名为张若涵和郑梅的,label为person的点公共的lover节点的名单;9: 找出person的三角的环,边类型为person_lover_person, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:person where a.age < 42) return a order by a.gender asc limit 158;2: match(a where (a.id <= 39 and a.salary - 8726 % 5473 <> 5914) or (a.salary BETWEEN 3603 AND 7844))-[e:person_lover_person where e.f0 <> 745 or e.f1 = false or e.srcId + 44 <= 159.62]->(b) return e.srcId * 144;3: match(a:person)-[e:person_friend_person]-(b:person) return b.gender, SUM(b.height - 163) group by b.gender;4: match(a where a.id = '172') return a.name;5: match(a:person)-[e:knows where e.weight < 191.75]->(b:person where b.name = '马科') return b;6: match(a where a.name = '吴建国')-[e:person_family_person]->(b:person)-[e2:person_colleague_person]->(c:person) return c.gender;7: match(a:person)-[e]->(b:person where (b.height is not null)) return COUNT(b.salary) * 9224, b.age * 16;8: match(a:person where a.name='张若涵')-[e:person_lover_person]->(b)<-[e2:person_lover_person]-(c:person where c.name='郑梅') return b.name;9: match(a:person)-[e:person_lover_person]->(b)-[e2:person_lover_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和作家韩科有关的读者,再帮我查询和韩科认识的其他作家,返回它们",
        "output": "match(a:author where a.name = '韩科')-[e]-(b:reader), (a:author)-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表427,196, 以属性id作为相等条件,给出标签为person的点,返回92个",
        "output": "with p as (select * from (VALUES(427),(196)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a LIMIT 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "星数加137的最小值",
        "output": "MIN(a.stars + 137)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与名为杜强的用户为朋友，或者与该用户的任何朋友为朋友的所有帖子。",
        "output": "match(a:user where n.name=杜强)-[e:friend]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与读者点有关联的书节点，按创建时间和名称分组，返回时间和名称。",
        "output": "match(a:reader)-[e:likes]-(b:book) return b.createTime, b.name group by b.createTime, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于comment,名为Comment_132的点,返回这些点的name",
        "output": "match(a:comment where a.name = 'Comment_132') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为赵轩的卖家存在关联，或者与其关联人存在关联的商品。",
        "output": "match(a:seller where n.name=赵轩)-[e:relation]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 请帮我找出和名为计算机学院的department有friend关系,或有friend的friend关系的student;2: 请帮我找出名为南京大学的university,以及与其有关的student,并返回南京大学的level和这些student的height;3: 帮我查询194个和标签等于大学的点有university_has_department关系的部门,并且和这些部门有department_has_student关系的学生;4: 帮我查询学生选择的课程,返回其源点的身高减169除89的平均值,以及目标点的学分加4的求和值;5: 帮我查询和university清华大学有关的university,称为X,再帮我查询和这个X有关联的其他university,以及和X有关联的teacher;6: 查询id为152的university有关的student的partner, 再查询和student有关系的friend;7: 返回与教师马月有关系的部门, 返回和这些部门有关联的教师的,id减99的值;8: 查找与名为韩科和吴国强的点共同选择的,标签为课程的节点;",
        "output": "查询语句为:1: match(a:department where n.name=计算机学院)-[e:friend]->{1,2}(b:student) return b;2: match(a:university where name = '南京大学')-[e]-(b:student) return a.level, b.height;3: match(a:university)-[e:university_has_department]->(b:department)-[e2:department_has_student]->(c:student) return c limit 194;4: match(a:student)-[e:student_selects_course]->(b:course) return AVG((a.height - 169) / 89), SUM(b.credit + 4);5: match(a:university where a.name = '清华大学')-[e]-(b:university), (b:university)-[e2]-(c:university),(b:university)-[e3]-(d:teacher) return a, b, c, d;6: match(a:university where id = '152')-[e]-(b:student)-[e2:partner]->(c), (b:student)-[e3:friend]->(d) return a, b, c, d;7: match(a:teacher where a.name= '马月')-[e]-(b:department)-[e2]-(c:teacher) return c.id - 99;8: match(a where a.name = '韩科')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c where c.name = '吴国强') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有标签为person或company或software的点",
        "output": "match(a:person | company | software) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和名为Prescription_334的prescription有relation关系,或有relation的relation关系的medicine",
        "output": "match(a:prescription where n.name=Prescription_334)-[e:relation]->{1,2}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户的3度以内的环",
        "output": "match(a:user)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从university南京大学出发,经过label为has的边,走3到6度到达的department点",
        "output": "match(a:university where a.name='南京大学')-[e:has]->{3,6}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回147个名为横店影院的点releases的类型是film的节点,且其category不是文艺",
        "output": "match(a where a.name='横店影院')-[e:releases]->(b:film where b.category <> '文艺') return b limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询账号Light的所有伙伴,的权重除权重的最小值",
        "output": "match(a:account where a.name= 'Light')-[e:partner]->(b) return MIN(e.weight / e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person陈思思有关的person,再查找和陈思思喜欢的其他person,返回它们",
        "output": "match(a:person where a.name = '陈思思')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为城市,名为北京的点,返回这些点的面积,id,价值",
        "output": "match(a:city where a.name = '北京') return a.area, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person点有支付关系的person节点,且边满足条件源点id的和等于33,目标person节点满足条件性别不等于famale",
        "output": "match(a:person)-[e:pay where SUM(e.srcId) = 33]->(b:person where b.gender <> 'famale') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 给出person赵科的全部类型为伙伴的边,并根据源点id从大到小排列,返回133个;2: 找出公司美团的所有标签等于伙伴的边,并根据目标点id降序排列,返回13个;3: 帮我查询label为person的点;4: 请帮我找出名为Mysql和Redis的,标签为software的点公共的friend节点的名单;5: 给出标签为person的点,并根据身高升序排列;6: 帮我查询181个名为郑梅的点buy的label为software的节点,且其value等于226且stars的最小值乘936小于等于936;",
        "output": "查询语句为:1: match(a:person where a.name = '赵科')-[e:partner]->(b) return b order by e.srcId desc limit 133;2: match(a:company where a.name = '美团')-[e:partner]->(b) return b order by e.targetId desc limit 13;3: match(a:person) return a;4: match(a:software where a.name='Mysql')-[e:friend]->(b)<-[e2:friend]-(c:software where c.name='Redis') return b.name;5: match(a:person) return a order by a.height asc;6: match(a where a.name='郑梅')-[e:person_buy_software]->(b:software where b.value = 226 and MIN(b.stars) * 936 <= 936) return b limit 181;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出城市广州包含的大学,以及包含这些大学的城市",
        "output": "match(a:city where name = '广州')-[e:contain]->(b:university)<-[e2:contain]-(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale',190,4727),('famale',190,4943)作为请求表数据,属性分别为gender,height,salary, 以属性salary作为相等条件,找出28个age大于11且gender不是famale的doctor,根据id升序排列",
        "output": "with p as (select * from (VALUES('famale',190,4727),('famale',190,4943)) as t(gender,height,salary))MATCH (a:doctor WHERE a.salary = p.salary AND (a.age > 11 AND a.gender <> 'famale')) RETURN a ORDER BY a.id LIMIT 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询急诊部的医生，即doctor,以及他们所属的department,返回这些点的名称。",
        "output": "match(a where a.name = '急诊部')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与公司Bilibili和谷歌都存在属于关系的点",
        "output": "match(a:company where a.name='Bilibili')-[e:belong]->(b)<-[e2:belong]-(c:company where c.name='谷歌') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 返回133个department计算机学院和文学院,共同的friend;2: 查找student郑若涵的标签为relation的边,并根据weight从大到小排列,返回161个;3: 查找被部门生物学院拥有的教师;",
        "output": "查询语句为:1: match(a:department where a.name='计算机学院')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='文学院') return b limit 133;2: match(a:student where a.name = '郑若涵')-[e:relation]->(b) return b order by e.weight desc limit 161;3: match(a:teacher)<-[e:department_has_teacher]-(b:department where b.name='生物学院') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出既属于急诊部又属于内科的点",
        "output": "match(a:department where a.name='急诊部')-[e:has]->(b)<-[e2:has]-(c:department where c.name='内科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前170个类型为knows的边",
        "output": "match(a)-[e:knows]->(b) return e limit 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表733,485, 源点的id等于输入表id,请帮我查找所有id为25的software关联的software,和以buy关系关联了这些software的其他person",
        "output": "with p as (select * from (VALUES(733),(485)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.id = '25')) -[e ]-(b:software) <-[e2:person_buy_software ]-(c:person) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回id为154的account关联的account,和以transfer关系关联了这些account的其他account;2: 给出160个id为空或人数不等于882,且价值大于638的公司,根据名字从小到大排列;3: 查询和person徐思琪有关的person,再查询和徐思琪person_invest_company的其他company,返回它们;4: 给出与company腾讯有company_apply_loan关系的3跳的环;5: 返回全部和名为蚂蚁集团的company有friend关系,或有friend的friend关系的loan;",
        "output": "查询语句为:1: match(a:account where a.id = '154')-[e]-(b:account)<-[e2:account_transfer_account]-(c:account) return b,c;2: match(a:company where ((a.id is null) or a.peopleNumber <> 882) and a.value > 638) return a order by a.name asc limit 160;3: match(a:person where a.name = '徐思琪')-[e]-(b:person), (a:person)-[e2:person_invest_company]->(c:company) return a, b, c;4: match(a:company where name = '腾讯')-[e:company_apply_loan]->{2,2}(b)->(a) return a.id, b.id as b_id;5: match(a:company where n.name=蚂蚁集团)-[e:friend]->{1,2}(b:loan) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点年龄大于5,边标签等于喜欢,且满足条件f0小于等于684,时间戳等于2026年02月12日且目标点id等于162的边,返回这些边的源点id乘41的值",
        "output": "match(a where a.age > 5)-[e:likes where e.f0 <= 684 and e.timeStamp = '2026-02-12' and e.targetId = 162]->(b) return e.srcId * 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为Hive的person或公司或软件,以及与其有关的person,并返回Hive的是否开源和这些person的薪资",
        "output": "match(a:person | company | software where name = 'Hive')-[e]-(b:person) return a.openSource, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签等于部门,边标签等于拥有,且满足条件源点id在55到72之间且目标点id小于等于98的边",
        "output": "match(a:department)-[e:has where (e.srcId BETWEEN 55 AND 72) and e.targetId <= 98]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,stars,lang, 数据为('Spark',793,'java'),('Geaflow',786,'rust'), 源点的stars等于输入表stars,请帮我查找和公司Bilibili有2到5度关系的公司",
        "output": "with p as (select * from (VALUES('Spark',793,'java'),('Geaflow',786,'rust')) as t(name,stars,lang))MATCH (a:company WHERE a.stars = p.stars AND (a.name = 'Bilibili')) -[e ]->{2,5}(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄为22的person认识的person的名称,以及这些person 购买的软件的名称",
        "output": "match(a:person where a.age = 22)-[e:knows]->(b:person)-[e2:buy]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 给出与person杜雪和王建聪都存在person_pay_person关系的点;2: 查找和person王宏有person_knows_person关系的person,再查找以person_knows_person关系关联了王宏的person;3: 找出和person吴伟有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person;4: 返回所有person的朋友,或其朋友的朋友;5: 找出person赵伟pay的person,被其他person knows的数量;6: 查找与person赵月和马国强都存在person_knows_person关系的点;7: 帮我查询所有person以年龄,名字分组的薪资, 根据薪资从小到大排序;",
        "output": "查询语句为:1: match(a:person where a.name='杜雪')-[e:person_pay_person]->(b)<-[e2:person_pay_person]-(c:person where c.name='王建聪') return b;2: match(a:person where a.name = '王宏')-[e:person_knows_person]->(b:person),(a:person where a.name = '王宏')<-[e2:person_knows_person]-(c:person)return a, b, c;3: match(a:person where a.name = '吴伟')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;4: match(a:person)-[e:friend]->{1,2}(b) return b;5: match(a:person where a.name='赵伟')-[e:person_pay_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);6: match(a:person where a.name='赵月')-[e:person_knows_person]->(b)<-[e2:person_knows_person]-(c:person where c.name='马国强') return b;7: match(a:person) return a.salary group by a.age, a.name order by a.salary asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询作家张月 认识的作家,返回作家 认识的作家的height的平均值除171的值",
        "output": "match(a:author where name = '张月')-[e:knows]->(b:author)-[e2:knows]->(c:author) return AVG(c.height) / 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary加6207的求和值",
        "output": "SUM(a.salary + 6207)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值分组,计算价值乘146的值",
        "output": "return a.value * 146 group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出197个名为韩宏的点教的标签等于课程的节点,且其课时大于等于30或学分不为空",
        "output": "match(a where a.name='韩宏')-[e:teach]->(b:course where b.courseHour >= 30 or (b.credit is not null)) return b limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出带有部门标签的点，按大小排序。",
        "output": "match(a:department) return a order by a.size desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表323,8,972,623,888, 源点的id等于输入表id,给出50个名字不是腾讯,人数等于973,人数不为空的公司,根据规格从大到小排列",
        "output": "with p as (select * from (VALUES(323),(8),(972),(623),(888)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name <> '腾讯' AND a.peopleNumber = 973 AND a.peopleNumber IS NOT NULL)) RETURN a ORDER BY a.scale DESC LIMIT 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以942,193作为请求点id, 以属性id作为相等条件,查找大学四川大学 拥有的部门,返回部门 拥有的学生的年龄减68的值 ",
        "output": "with p as (select * from (VALUES(942),(193)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (name = '四川大学')) -[e:university_has_department ]->(b:department) -[e2:department_has_student ]->(c:student) RETURN c.age - 68 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘id的最小值",
        "output": "MIN(a.id * a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与用户有关系的用户节点,且用户节点的id不为空,并返回这些用户的height的最小值加身高的最大值,以及用户的身高加156减5乘身高的值",
        "output": "match(a:user)-[e]->(b:user where (b.id is not null)) return MAX(MIN(b.height) + b.height), (b.height + 156 - 5) * b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查找169个与Prescription_431和Prescription_319都存在关系的prescription节点;2: 帮我查询用户Tom的标签为相关者的边,并根据源点id从大到小排列,返回17个;3: 查询类型是处方的点,返回36个;4: 计算所有user的id减58的值;5: 查询源点类型为用户,边类型为user_creates_issue的边,返回这些边的源点id减52除94的最小值,和权重乘113.03加权重加803的值;",
        "output": "查询语句为:1: match(a where a.name='Prescription_431')-[e]->(b:prescription)<-[e2]-(c where c.name='Prescription_319') return b limit 169;2: match(a:user where a.name = 'Tom')-[e:relation]->(b) return b order by e.srcId desc limit 17;3: match(a:prescription) return a limit 36;4: match(a:user) return a.id - 58;5: match(a:user)-[e:user_creates_issue]->(b) return MIN((e.srcId - 52) / 94), e.weight * 113.03 + e.weight + 803;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找卖家杜月 回答的买家,返回买家 查看的商品的sellerNumber的个数乘249.36的值",
        "output": "match(a:seller where name = '杜月')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return COUNT(c.sellerNumber) * 249.36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 找出和tag科幻有关的post,称为X,再找出和这个X有关联的其他user,以及和X有关联的user;2: 查找名为韩思琪的用户,以及与其有关的论坛,并返回韩思琪的薪资和这些论坛的id;3: 找出所有名为何科的,name不等于Post_469的partner,返回这些partner的name,和边的f1;4: 查找名为Post_362的post,以及与其有关的post,并返回Post_362的id和这些post的lang;5: 帮我查询和论坛知乎有关的用户,称为X,再帮我查询和这个X有关联的其他论坛,以及和X有关联的用户;6: 返回所有源点label为用户,边label为user_publish_post的边,返回这些边的权重加151.77对980取余对948取余的值,和weight的和对权重取余的值;7: 给出名为喜剧的标签,以及与其有关的论坛,并返回喜剧的id和这些论坛的价值;8: 请帮我找出全部与帖子有关系的论坛节点,且论坛节点的id为空,并返回这些点的人数减264的值,以及id除81的值;9: 查找所有源点createTime的最大值为306,目标点name为郑思琪或salary为空,且name不是张红,且标签等于forum_contain_person的边;",
        "output": "查询语句为:1: match(a:tag where a.name = '科幻')-[e]-(b:post), (b:post)-[e2]-(c:user),(b:post)-[e3]-(d:user) return a, b, c, d;2: match(a:user where name = '韩思琪')-[e]-(b:forum) return a.salary, b.id;3: match(a where a.name='何科')-[e:partner]->(b where b.name <> 'Post_469') return b.name,e.f1;4: match(a:post where name = 'Post_362')-[e]-(b:post) return a.id, b.lang;5: match(a:forum where a.name = '知乎')-[e]-(b:user), (b:user)-[e2]-(c:forum),(b:user)-[e3]-(d:user) return a, b, c, d;6: match(a:user)-[e:user_publish_post]->(b) return e.weight + 151.77 % 980 % 948, SUM(e.weight) % e.weight;7: match(a:tag where name = '喜剧')-[e]-(b:forum) return a.id, b.value;8: match(a:post)-[e]->(b:forum where (b.id is null)) return b.peopleNumber - 264, b.id / 81;9: match(a where MAX(a.createTime) = 306)-[e:forum_contain_person]->(b where (b.name = '郑思琪' or (b.salary is null)) and b.name <> '张红') return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person有关联的person节点,并根据其name,salary,height分组,返回name,salary,height,以及id除14乘3966的值",
        "output": "match(a:person)-[e:person_family_person]-(b:person) return b.name, b.salary, b.height, b.id / 14 * 3966 group by b.name, b.salary, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部person以height,name,gender分组的salary, 根据salary从大到小排序",
        "output": "match(a:person) return a.salary group by a.height, a.name, a.gender order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person点有knows关系的person节点,且边满足条件targetId是49,目标person节点age在64到74之间",
        "output": "match(a:person)-[e:knows where e.targetId = 49]->(b:person where (b.age BETWEEN 64 AND 74)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为吴建聪的点的,height小于159或name为张梅的partner,返回这些partner的gender,和边的f1",
        "output": "match(a where a.name='吴建聪')-[e:partner]->(b where b.height < 159 or b.name = '张梅') return b.gender,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出115个权重在263到861之间的药品,根据id从大到小排列",
        "output": "match(a:medicine where (a.weight BETWEEN 263 AND 861)) return a order by a.id desc limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(10,159,'male'),(25,155,'famale')作为请求表数据,属性分别为id,height,gender, 源点的gender等于输入表gender,给出id为73的publisher有关的author的relation, 再给出和author有关系的friend",
        "output": "with p as (select * from (VALUES(10,159,'male'),(25,155,'famale')) as t(id,height,gender))MATCH (a:publisher WHERE a.gender = p.gender AND (id = '73')) -[e ]-(b:author) -[e2:relation ]->(c) , (b:author) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和帖子Post_224有1到4度关系的论坛",
        "output": "match(a:post where a.name='Post_224')-[e]->{1,4}(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person韩轩存在申请关系,且与账号BIN存在存款关系的贷款节点，返回这些贷款的权重,id,及person韩轩的年龄,及账号BIN的是否冻结",
        "output": "match(a:person where a.name='韩轩')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='BIN') return a.age,b.weight, b.id,c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有和名为Comment_415的评论有伙伴关系,或有伙伴的伙伴关系的电影",
        "output": "match(a:comment where n.name=Comment_415)-[e:partner]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "权重除权重的值",
        "output": "a.weight / a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person王思思有喜欢关系的3度的环",
        "output": "match(a:person where name = '王思思')-[e:likes]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与作家徐轩有关,且与作家张科有关系的作家节点",
        "output": "match(a:author where a.name='徐轩')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='张科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person何思琪的所有相关者,的srcId的最大值减100的求和值",
        "output": "match(a:person where a.name= '何思琪')-[e:relation]->(b) return SUM(MAX(e.srcId) - 100)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找所有韩国强的点诊断的病人,然后请帮我查找韩国强被拥有的部门,一起返回",
        "output": "match(a where a.name = '韩国强')-[e:doctor_diagnose_patient]->(b:patient),(a where a.name = '韩国强')<-[e2:department_has_doctor]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 查找名为知乎的点contain的全部person,并对这些点的id进行求和;2: 给出user publish的post,返回其源点的age的最大值减62的最大值,以及目标点的value乘468的最小值;3: 帮我查询名为张雪的点publish的post;",
        "output": "查询语句为:1: match(a where a.name='知乎')-[e:forum_contain_person]->(b:person) return SUM(b.id);2: match(a:user)-[e:user_publish_post]->(b:post) return MAX(MAX(a.age) - 62), MIN(b.value * 468);3: match(a where a.name='张雪')-[e:user_publish_post]->(b:post) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回account的2跳以内的环",
        "output": "match(a:account)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出郑轩所有的部门，然后找出郑轩所在的部门，将两者合并并返回。",
        "output": "match(a where a.name = '郑轩')-[e:belong]->(b:department),(a where a.name = '郑轩')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和读者黄轩有关的书,称为X,再帮我查询和这个X有关联的其他读者,以及和X有关联的作家",
        "output": "match(a:reader where a.name = '黄轩')-[e]-(b:book), (b:book)-[e2]-(c:reader),(b:book)-[e3]-(d:author) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出电影院上映的电影,返回其源点的id乘97的值,以及目标点的id乘53的最小值",
        "output": "match(a:cinema)-[e:releases]->(b:film) return a.id * 97, MIN(b.id * 53)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,gender,id, 数据为(86,'male',93),(56,'male',4),(72,'male',87),(2,'male',92), 源点的gender等于输入表gender,帮我查询和loan defaultName之间有loan_deposit_account关系的account",
        "output": "with p as (select * from (VALUES(86,'male',93),(56,'male',4),(72,'male',87),(2,'male',92)) as t(age,gender,id))MATCH (a:loan WHERE a.gender = p.gender AND (a.name = 'defaultName')) -[e:loan_deposit_account ]->(b:account) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与103个类型为person的节点有knows关系的所有person节点，以及这些person节点之间的knows关系。",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person) return c limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有标签等于订单的点，并按照id升序排列。",
        "output": "match(a:orders) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我查找全部与person黄雪有关系的person的年龄;2: 请帮我找出和类型是person的点有person_likes_person关系的person,并且和这些person有person_pay_person关系的person,并且和这些person有person_knows_person关系的person;3: 请帮我查找标签为person的全部点,并根据height从小到大排列;4: 给出label为person的点,返回177个;5: 找出名为孙若涵的person,以及与其有关的person,并返回孙若涵的name和这些person的height;6: 请帮我找出名为张轩的person,以及与其有关的person,并返回张轩的身高和这些person的身高;7: 查找与名为杜思琪和吴伟的点共同认识的,label为person的节点;8: 帮我查询与名为韩建国和王建国的点共同pay的,label为person的节点;",
        "output": "查询语句为:1: match(a:person where a.name='黄雪')-[e]-(b:person) return b.age;2: match(a:person)-[e:person_likes_person]->(b:person)-[e2:person_pay_person]->(c:person)-[e3:person_knows_person]->(d:person) return d;3: match(a:person) return a order by a.height asc;4: match(a:person) return a limit 177;5: match(a:person where name = '孙若涵')-[e]-(b:person) return a.name, b.height;6: match(a:person where name = '张轩')-[e]-(b:person) return a.height, b.height;7: match(a where a.name = '杜思琪')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '吴伟') return b;8: match(a where a.name = '韩建国')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c where c.name = '王建国') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与buyer Tom有关系的seller的gender",
        "output": "match(a:buyer where a.name='Tom')-[e]-(b:seller) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为size,name,value, 数据为(63,'计算机学院',89), 以属性name作为相等条件,查找teacher何轩的所有标签等于friend的边,并根据srcId从小到大排列,返回2个",
        "output": "with p as (select * from (VALUES(63,'计算机学院',89)) as t(size,name,value))MATCH (a:teacher WHERE a.name = p.name AND (a.name = '何轩')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId LIMIT 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从韩月出发，沿着likes类型的边走1到4度，可以到达哪个点？",
        "output": "match(a:person where a.name='韩月')-[e:likes]->{1,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出所有person以id,身高,性别分组的身高, 根据身高降序排序;2: 请帮我查找和账号有关联的账号节点,并根据其id,名字,上次登录时间分组,返回id,名字,上次登录时间,以及价值减585的值;3: 给出person杜国强apply的loan,被其他company apply的数量;",
        "output": "查询语句为:1: match(a:person) return a.height group by a.id, a.height, a.gender order by a.height desc;2: match(a:account)-[e:account_transfer_account]-(b:account) return b.id, b.name, b.lastLoginTime, b.value - 585 group by b.id, b.name, b.lastLoginTime;3: match(a:person where a.name='杜国强')-[e:person_apply_loan]->(b:loan)<-[e2:company_apply_loan]-(c:company) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为周建聪的,语言不是go,语言等于c++的相关者,返回这些相关者的名字,和边的f0,目标点id,源点id",
        "output": "match(a where a.name='周建聪')-[e:relation]->(b where b.lang <> 'go' and b.lang = 'c++') return b.name,e.f0, e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person杜宏存在支付关系,且与person马雪存在喜欢关系的person节点，返回这些person的薪资,年龄,名字,及person杜宏的薪资,及person马雪的薪资",
        "output": "match(a:person where a.name='杜宏')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='马雪') return a.salary,b.salary, b.age, b.name,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值减82对46取余的值",
        "output": "AVG(a.id) - 82 % 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询被电影院横店影院上映的电影",
        "output": "match(a:film)<-[e:cinema_releases_film]-(b:cinema where b.name='横店影院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回34个与杜若涵和徐建聪都存在关系的person节点",
        "output": "match(a where a.name='杜若涵')-[e]->(b:person)<-[e2]-(c where c.name='徐建聪') return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,height,id, 数据为(75,151,63),(56,197,32), 源点的height等于输入表height,找出从大学重庆大学出发,经过类型是university_has_department的边,走3度到达的部门点",
        "output": "with p as (select * from (VALUES(75,151,63),(56,197,32)) as t(age,height,id))MATCH (a:university WHERE a.height = p.height AND (a.name = '重庆大学')) -[e:university_has_department ]->{3,3}(b:department) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找华中科技大学所在城市，并返回该城市中公司的规模、员工人数。",
        "output": "match(a:university where name = '华中科技大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c.scale, c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,height,name, 数据为(4617,160,'Tom'),(5937,159,'Jimmy'),(6035,165,'何红')的子查询作为输入表, 以属性height作为相等条件,帮我查询名为Prescription_427的prescription",
        "output": "with p as (select * from (VALUES(4617,160,'Tom'),(5937,159,'Jimmy'),(6035,165,'何红')) as t(salary,height,name))MATCH (a:prescription WHERE a.height = p.height AND (a.name = 'Prescription_427')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与账户节点account关联的账户节点，并按其名称和最后登录时间分组，返回名称和最后登录时间。",
        "output": "match(a:account)-[e:transfer]-(b:account) return b.name, b.lastLoginTime group by b.name, b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对id取余的值",
        "output": "a.id % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出198个名为loan_3的点deposit的标签等于account的节点,且其value不为空",
        "output": "match(a where a.name='loan_3')-[e:deposit]->(b:account where (b.value is not null)) return b limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与孙轩有支付关系的人和与吴思琪有喜欢关系的人，并返回它们。",
        "output": "match(a:person where a.name = '孙轩')-[e:pay]->(b:person),(c:person where c.name = '吴思琪')-[e2:likes]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从病人周思琪出发，经过接受类型的边，走2到4步到达的处方点。",
        "output": "match(a:patient where a.name='周思琪')-[e:accept]->{2,4}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点标签等于doctor,边标签等于creates,且srcId大于等于23或f1小于等于99的边",
        "output": "match(a:doctor)-[e:creates where e.srcId >= 23 or e.f1 <= 99]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照电影院ID从大到小排序，同时提供电影院名称和座位数量。",
        "output": "match(a:cinema) return a.id group by a.id, a.name, a.size order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为韩建国的,age小于41且age大于等于31的lover,返回这些lover的id,和边的targetId,weight",
        "output": "match(a where a.name='韩建国')-[e:lover]->(b where b.age < 41 and b.age >= 31) return b.id,e.targetId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点满足条件age的最大值小于7728或age小于92,目标点满足条件value在302到763之间且openSource不是false,或id小于等于54,且label为commits的边",
        "output": "match(a where MAX(a.age) < 7728 or a.age < 92)-[e:commits]->(b where ((b.value BETWEEN 302 AND 763) and b.openSource <> false) or b.id <= 54) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和person点有喜欢关系的person节点,且边满足条件权重不为空,目标person节点id为空",
        "output": "match(a:person)-[e:likes where (e.weight is not null)]->(b:person where (b.id is null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和郑梅有认识关系的作者，再帮我查找认识郑梅的作者。",
        "output": "match(a:author where a.name = '郑梅')-[e:knows]->(b:author),(a:author where a.name = '郑梅')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person有关系的person节点,且person节点的身高大于等于174,并返回这些person的id乘id除68的最小值,以及person的salary的最小值减5444对薪资取余的求和值",
        "output": "match(a:person)-[e]->(b:person where b.height >= 174) return MIN(b.id * b.id / 68), SUM(MIN(b.salary) - 5444 % b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我找出所有university以name,id分组的name, 根据name升序排序;2: 找出全部杭州的点属于的国家,然后找出杭州被属于的公司,一起返回;3: 查询和城市上海有关的大学,再查询和上海city_contain_university的其他大学,返回它们;4: 返回全部country以id,peopleNumber分组的peopleNumber, 根据peopleNumber升序排序;5: 找出id为124的点的名字,价值;6: 请帮我查找所有源点满足条件面积不是86536,目标点满足条件价值小于880且名字是北京大学,且标签等于city_contain_university的边;7: 查询以contain关系关联了university浙江大学的city;8: 返回所有city的relation,或其relation的relation;9: 请帮我找出和company谷歌有关的country,称为X,再请帮我找出和这个X有关联的其他country,以及和X有关联的university;",
        "output": "查询语句为:1: match(a:university) return a.name group by a.name, a.id order by a.name asc;2: match(a where a.name = '杭州')-[e:city_belong_country]->(b:country),(a where a.name = '杭州')<-[e2:company_belong_city]-(c:company) return a, b, c;3: match(a:city where a.name = '上海')-[e]-(b:university), (a:city)-[e2:city_contain_university]->(c:university) return a, b, c;4: match(a:country) return a.peopleNumber group by a.id, a.peopleNumber order by a.peopleNumber asc;5: match(a where a.id = '124') return a.name, a.value;6: match(a where a.area <> 86536)-[e:city_contain_university]->(b where b.value < 880 and b.name = '北京大学') return e;7: match(a:university where a.name='浙江大学')<-[e:city_contain_university]-(b:city) return b;8: match(a:city)-[e:relation]->{1,2}(b) return b;9: match(a:company where a.name = '谷歌')-[e]-(b:country), (b:country)-[e2]-(c:country),(b:country)-[e3]-(d:university) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表201,864,279,372, 源点的id等于输入表id,查找所有course以value,courseHour分组的id, 根据id降序排序",
        "output": "with p as (select * from (VALUES(201),(864),(279),(372)) as t(id)) MATCH (a:course WHERE a.id = p.id) RETURN a.id GROUP BY a.value, a.courseHour ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和书百年孤独之间有book_refers_book关系的书",
        "output": "match(a:book where a.name='百年孤独')-[e:book_refers_book]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与李宏和吴红都有关联的人，并返回他们的年龄",
        "output": "match(a:person where a.name='李宏')-[e]->(b:person)<-[e2]-(c:person where c.name='吴红') return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为部门的点,返回6个",
        "output": "match(a:department) return a limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为person的点,返回165个",
        "output": "match(a:person) return a limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,gender, 数据为(64,72,'male')的子查询作为输入表, 源点的gender等于输入表gender,帮我查询标签为reader_likes_book,以及满足条件f0乘849大于109.18或srcId不为空,且f1不是false的边",
        "output": "with p as (select * from (VALUES(64,72,'male')) as t(age,id,gender))MATCH (a WHERE a.gender = p.gender) -[e:reader_likes_book WHERE (e.f0 * 849 > 109.18 OR e.srcId IS NOT NULL) AND e.f1 <> FALSE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为黄梅的author,以及与其有关的author,并返回黄梅的age和这些author的age",
        "output": "match(a:author where name = '黄梅')-[e]-(b:author) return a.age, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与《西虹市首富》和《神探狄仁杰》都有关系的41个评论节点。",
        "output": "match(a where a.name='西虹市首富')-[e]->(b:comment)<-[e2]-(c where c.name='神探狄仁杰') return b limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从Zeus账户出发，通过转账类型的边，进行一次跳跃后到达的账户点。",
        "output": "match(a:account where a.name='Zeus')-[e:transfer]->{1,1}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有大学的value的数量对287取余的值",
        "output": "match(a:university) return COUNT(a.value) % 287",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回名为吴月和吴轩的,类型为doctor的点公共的relation节点的名单;2: 找出id为71的点的height,gender,age;3: 查找全部源点类型是doctor,边类型是doctor_belong_department,且满足条件targetId为空的边;4: 返回全部和名为Prescription_391的处方有伙伴关系,或有伙伴的伙伴关系的药品;5: 找出name是Prescription_424或weight小于等于358,且createTime不是2005年11月02日的节点;6: 帮我查询doctor的三角的环,边label为doctor_creates_prescription, 并返回这些点的id;7: 查找与医生杜梅有doctor_diagnose_patient关系的1跳以内的环;8: 请帮我找出标签等于prescription的全部点,并根据createTime升序排列;9: 请帮我找出所有部门以名字,id分组的地址, 根据地址从大到小排序;",
        "output": "查询语句为:1: match(a:doctor where a.name='吴月')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='吴轩') return b.name;2: match(a where a.id = '71') return a.height, a.gender, a.age;3: match(a:doctor)-[e:doctor_belong_department where (e.targetId is null)]->(b) return e;4: match(a:prescription where n.name=Prescription_391)-[e:partner]->{1,2}(b:medicine) return b;5: match(a where (a.name = 'Prescription_424' or a.weight <= 358) and a.createTime <> '2005-11-02') return a;6: match(a:doctor)-[e:doctor_creates_prescription]->(b)-[e2:doctor_creates_prescription]-(c)->(a) return a,b.id as b_id,c.id as c_id;7: match(a:doctor where name = '杜梅')-[e:doctor_diagnose_patient]->{0,0}(b)->(a) return a.id, b.id as b_id;8: match(a:prescription) return a order by a.createTime asc;9: match(a:department) return a.address group by a.name, a.id order by a.address desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有cinema的id对64取余的值",
        "output": "match(a:cinema) return a.id % 64",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和买家马思思有2到5跳关系的商品",
        "output": "match(a:buyer where a.name='马思思')-[e]->{2,5}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和person陈宏之间有likes关系的person",
        "output": "match(a:person where a.name='陈宏')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关联的person节点，这些节点的salary不为空。然后将这些节点的salary加上5814并求平均值，同时计算它们的age除以94后的余数。",
        "output": "match(a:person)-[e]->(b:person where (b.salary is not null)) return AVG(b.salary + 5814), b.age % 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询person的1度的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询，艺术学院和文学院共有多少个合作伙伴。",
        "output": "match(a:department where a.name='艺术学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='文学院') return b limit 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生韩建国的所有相关者,的源点id除145的值",
        "output": "match(a:doctor where a.name= '韩建国')-[e:relation]->(b) return e.srcId / 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与蚂蚁集团存在雇佣关系的person,person与公司存在属于关系的点,返回这些点的名字",
        "output": "match(a where a.name = '蚂蚁集团')-[e:employee]->(b:person)-[e2:belong]->(c:company) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以932,900作为请求点id, 以属性id作为相等条件,找出前85个满足条件id为空的电影院",
        "output": "with p as (select * from (VALUES(932),(900)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.id IS NULL)) RETURN a LIMIT 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,createTime分组,计算peopleNumber对296取余的最大值",
        "output": "return MAX(a.peopleNumber % 296) group by a.id, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询和person有关联的person节点,并根据其薪资分组,返回薪资,以及年龄乘82的最小值;2: 返回person的1度以内的环;3: 查找与person郑思琪和陈月都存在person_likes_person关系的点;4: 查询全部与person吴轩有关系的person的salary;5: 给出源点类型为person,目标点类型为person,类型为person_pay_person的边;6: 请帮我查找person喜欢的person,返回其源点的薪资减2714的个数,以及目标点的id乘91的平均值;7: 返回和person吴思思有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person;8: 查询person认识的person,返回其源点的id减id除92的最小值,以及目标点的年龄减24乘182的值;9: 帮我查询person孙若涵的全部类型为伙伴的边,并根据f1从小到大排列,返回74个;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person]-(b:person) return b.salary, MIN(b.age * 82) group by b.salary;2: match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id;3: match(a:person where a.name='郑思琪')-[e:person_likes_person]->(b)<-[e2:person_likes_person]-(c:person where c.name='陈月') return b;4: match(a:person where a.name='吴轩')-[e]-(b:person) return b.salary;5: match(a:person)-[e:person_pay_person]->(b:person) return e;6: match(a:person)-[e:person_likes_person]->(b:person) return COUNT(a.salary - 2714), AVG(b.id * 91);7: match(a:person where a.name = '吴思思')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;8: match(a:person)-[e:person_knows_person]->(b:person) return MIN((a.id - a.id) / 92), (b.age - 24) * 182;9: match(a:person where a.name = '孙若涵')-[e:partner]->(b) return b order by e.f1 asc limit 74;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被电影院好视影院上映的电影,和好视影院上映的电影",
        "output": "match(a:film)<-[e:releases]-(b:cinema where name = '好视影院')-[e2:releases]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到郑若涵和周科都提交过的内容。",
        "output": "match(a:person where a.name='郑若涵')-[e:commits]->(b)<-[e2:commits]-(c:person where c.name='周科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'jL', 'Df', 'ov'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('jL', 'Df', 'ov') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与读者王建国有关系的读者的薪资",
        "output": "match(a:reader where a.name='王建国')-[e]-(b:reader) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出徐雪和陈思琪共同的伙伴节点，这些节点的标签与用户相等。",
        "output": "match(a:user where a.name='徐雪')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='陈思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询和buyer孙若涵有buyer_creates_orders关系的orders,再帮我查询以buyer_cancel_orders关系关联了孙若涵的orders",
        "output": "match(a:buyer where a.name = '孙若涵')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '孙若涵')<-[e2:buyer_cancel_orders]-(c:orders)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与TheShy有转账关系的账号，以及这些账号之间的转账关系，并返回这些关系的ID。",
        "output": "match(a where a.name = 'TheShy')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为person,目标点label为person,label为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和名为周建国的seller有friend关系,或有friend的friend关系的goods",
        "output": "match(a:seller where n.name=周建国)-[e:friend]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师的3跳以内的环",
        "output": "match(a:teacher)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除178减9809的值",
        "output": "a.height / 178 - 9809",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问Zookeeper使用的软件是什么？返回所用软件的编程语言。",
        "output": "match(a:software where name = 'Zookeeper')-[e:uses]->(b:software)-[e2:uses]->(c:software) return c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出赵月出版的并且他知道的书",
        "output": "match(a:publisher where a.name = '赵月')-[e:publish]->(b:book)-[e2:knows]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取赵思琪相关的古代主题帖",
        "output": "match(a:user where a.name='赵思琪')-[e:publish]-(b:post)-[e2:has]-(c:tag where c.name='古代') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部JavaGuid的点拥有的合并请求,然后帮我查询JavaGuid被喜欢的用户,一起返回",
        "output": "match(a where a.name = 'JavaGuid')-[e:has]->(b:pullRequest),(a where a.name = 'JavaGuid')<-[e2:likes]-(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为韩思思的点的,id大于等于39或名字小于26的相关者,返回这些相关者的名字,和边的权重,源点id",
        "output": "match(a where a.name='韩思思')-[e:relation]->(b where b.id >= 39 or b.name < 26) return b.name,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最小值除939加740的最大值",
        "output": "MAX(MIN(a.value) / 939 + 740)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减value的平均值",
        "output": "AVG(a.value - a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从seller马国强出发，通过has类型的边，走1到4步到达的goods点",
        "output": "match(a:seller where a.name='马国强')-[e:has]->{1,4}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找102个和标签为读者的点有喜欢关系的书,且和这些书有引用关系的书",
        "output": "match(a:reader)-[e:likes]->(b:book)-[e2:refers]->(c:book) return c limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询作者ID为106的书籍的引用，以及书籍相关的引用。",
        "output": "match(a:author where id = '106')-[e]-(b:book)-[e2:refers]->(c), (b:book)-[e3:refers]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person何思思有关的company,再查询和何思思apply的其他loan,返回它们",
        "output": "match(a:person where a.name = '何思思')-[e]-(b:company), (a:person)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出商品的3度的环",
        "output": "match(a:goods)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与周红和李思琪都有关联的65个论坛节点",
        "output": "match(a where a.name='周红')-[e]->(b:forum)<-[e2]-(c where c.name='李思琪') return b limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('止痛药',882,77),('皮肤药',716,50),('感冒药',887,10)作为请求表数据,属性分别为category,weight,id, 源点的id等于输入表id,请帮我查找前189个类型是doctor_belong_department的边",
        "output": "with p as (select * from (VALUES('止痛药',882,77),('皮肤药',716,50),('感冒药',887,10)) as t(category,weight,id))MATCH (a WHERE a.id = p.id) -[e:doctor_belong_department ]->(b) RETURN e LIMIT 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与徐宏存在朋友关系的人，以及这些人之间存在的朋友关系节点，并返回这些节点的名字。",
        "output": "match(a where a.name = '徐宏')-[e:friend]->(b:person)-[e2:friend]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(true,390,'SprintBoot'),(true,153,'Geaflow')作为请求表数据,属性分别为openSource,stars,name, 以属性name作为相等条件,请帮我找出从person张宏出发,经过标签等于person_buy_software的边,走3度或4度到达的软件点",
        "output": "with p as (select * from (VALUES(true,390,'SprintBoot'),(true,153,'Geaflow')) as t(openSource,stars,name))MATCH (a:person WHERE a.name = p.name AND (a.name = '张宏')) -[e:person_buy_software ]->{3,4}(b:software) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出类型为company_creates_software,并且满足条件weight的最小值大于等于114或f0小于等于965的边",
        "output": "match(a)-[e:company_creates_software where MIN(e.weight) >= 114 or e.f0 <= 965]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为scale,peopleNumber,name, 数据为('large',779,'字节'),('small',868,'Bilibili'),('small',574,'Bilibili')的子查询作为输入表, 以属性scale作为相等条件,请帮我找出person何强的全部标签等于partner的边,并根据targetId升序排列,返回169个",
        "output": "with p as (select * from (VALUES('large',779,'字节'),('small',868,'Bilibili'),('small',574,'Bilibili')) as t(scale,peopleNumber,name))MATCH (a:person WHERE a.scale = p.scale AND (a.name = '何强')) -[e:partner ]->(b) RETURN b ORDER BY e.targetId LIMIT 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出名为经管学院的点的,name不是李思思,id不为空的partner,返回这些partner的salary,和边的srcId,weight;2: 找出所有课程以名字分组的价值, 根据价值从小到大排序;3: 帮我查询标签等于university,名为武汉大学的点,返回这些点的level,name;4: 查找所有名为杜若涵的点选择的课程;5: 返回id为117的学生关联的课程,和以选择关系关联了这些课程的其他学生;6: 查找名为清华大学的大学,以及与其有关的部门,并返回清华大学的id和这些部门的价值;7: 找出与university有关系的student节点,且student节点的id小于32,并返回这些点的id加33减187的值,以及salary的个数对3123取余的值;8: 查找label为department_has_teacher,以及f1不是false的边;",
        "output": "查询语句为:1: match(a where a.name='经管学院')-[e:partner]->(b where b.name <> '李思思' and (b.id is not null)) return b.salary,e.srcId, e.weight;2: match(a:course) return a.value group by a.name order by a.value asc;3: match(a:university where a.name = '武汉大学') return a.level, a.name;4: match(a where a.name='杜若涵')-[e:student_selects_course]->(b:course) return b;5: match(a:student where a.id = '117')-[e]-(b:course)<-[e2:student_selects_course]-(c:student) return b,c;6: match(a:university where name = '清华大学')-[e]-(b:department) return a.id, b.value;7: match(a:university)-[e]->(b:student where b.id < 32) return b.id + 33 - 187, COUNT(b.salary) % 3123;8: match(a)-[e:department_has_teacher where e.f1 <> false]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出103个和类型为department的点有has关系的doctor,以及和这些doctor有belong关系的department",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与读者何梅存在喜欢关系,且与书孤城存在引用关系的书节点，返回这些书的价格,id,创建时间,及读者何梅的身高,及书孤城的类别",
        "output": "match(a:reader where a.name='何梅')-[e:likes]->(b:book)<-[e2:refers]-(c:book where c.name='孤城') return a.height,b.price, b.id, b.createTime,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高乘158的和",
        "output": "SUM(a.height * 158)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询评论Comment_416属于的电影,以及上映这些电影的电影院",
        "output": "match(a:comment where name = 'Comment_416')-[e:belong]->(b:film)<-[e2:releases]-(c:cinema) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person喜欢的评论,返回其源点的年龄加71的最大值,以及目标点的id减66的值",
        "output": "match(a:person)-[e:likes]->(b:comment) return MAX(a.age + 71), b.id - 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为订单的点,返回111个",
        "output": "match(a:orders) return a limit 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为字节的country,以及与其有关的company,并返回字节的id和这些company的name",
        "output": "match(a:country where name = '字节')-[e]-(b:company) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为lastLoginTime,value,name, 数据为(2006-11-05,312,'BIN'),(1999-03-09,161,'TheShy'),(2010-01-16,632,'Light')的子查询作为输入表, 以属性name作为相等条件,给出前66个满足条件peopleNumber在554到934之间且name不等于美团,或scale等于medium的company",
        "output": "with p as (select * from (VALUES(2006-11-05,312,'BIN'),(1999-03-09,161,'TheShy'),(2010-01-16,632,'Light')) as t(lastLoginTime,value,name))MATCH (a:company WHERE a.name = p.name AND (a.peopleNumber BETWEEN ASYMMETRIC 554 AND 934 AND a.name <> '美团' OR a.scale = 'medium')) RETURN a LIMIT 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询amount大于7116.57,id等于1904.45的节点",
        "output": "match(a where a.amount > 7116.57 and a.id = 1904.45) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出81个与标签为'person'的点有'watch'关系的电影，并且这些电影与'has'关系的标签相关。",
        "output": "match(a:person)-[e:watch]->(b:film)-[e2:has]->(c:tag) return c limit 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person有关的人，或者这些人有关的人。",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 请帮我查找源点名字等于XXD或是否冻结是true,边标签等于account_repay_loan,且f0为971且时间戳不等于1996年05月23日的边,返回这些边的targetId的最小值加145的和;2: 请帮我找出person的1度的环;3: 帮我查询名为defaultName的贷款,以及与其有关的person,并返回defaultName的金额和这些person的薪资;4: 找出label为person的点;5: 请帮我找出被loan defaultName deposit的account;6: 给出person赵国强的所有类型是相关者的边,并根据目标点id降序排列,返回22个;7: 查询和account Geaflow123有account_repay_loan关系的loan,再查询以account_repay_loan关系关联了 Geaflow123的loan;8: 查询与名为Bilibili和滴滴的点共同申请的,类型为贷款的节点;",
        "output": "查询语句为:1: match(a where a.name = 'XXD' or a.isBlock = true)-[e:account_repay_loan where e.f0 = 971 and e.timeStamp <> '1996-05-23']->(b) return SUM(MIN(e.targetId) + 145);2: match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id;3: match(a:loan where name = 'defaultName')-[e]-(b:person) return a.amount, b.salary;4: match(a:person) return a;5: match(a:account)<-[e:loan_deposit_account]-(b:loan where b.name='defaultName') return a, b;6: match(a:person where a.name = '赵国强')-[e:relation]->(b) return b order by e.targetId desc limit 22;7: match(a:account where a.name = 'Geaflow123')-[e:account_repay_loan]->(b:loan),(a:account where a.name = 'Geaflow123')<-[e2:account_repay_loan]-(c:loan)return a, b, c;8: match(a where a.name = 'Bilibili')-[e:company_apply_loan]->(b:loan)<-[e2:company_apply_loan]-(c where c.name = '滴滴') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与'标签动作'有关联，并与'王宏'有关联的'person'节点，然后返回他们的性别、年龄和姓名。",
        "output": "match(a:tag where a.name='动作')-[e]->(b:person)<-[e2]-(c:person where c.name='王宏') return b.gender, b.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找公司字节申请的贷款,以及还款这些贷款的账号, 令贷款的是否冻结等于账号的名字,令贷款的是否冻结等于账号的是否冻结,令账号的id等于贷款的id的最大值, 返回公司的人数,贷款的金额,账号的价值",
        "output": "match(a:company where name = '字节')-[e:apply]->(b:loan)<-[e2:repay]-(c:account) let b.isBlock = c.name,let b.isBlock = c.isBlock,let c.id = MAX(b.id) return a.peopleNumber,b.amount,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user韩轩有likes关系的post,再查询以publish关系关联了韩轩的post",
        "output": "match(a:user where a.name = '韩轩')-[e:likes]->(b:post),(a:user where a.name = '韩轩')<-[e2:publish]-(c:post)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与 Amily 买家有关，且商品为香蕉的订单。",
        "output": "match(a:buyer where a.name='Amily')-[e:creates]-(b:orders)-[e2:contain]-(c:goods where c.name='香蕉') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照'国家'标签对点进行筛选，并按照点ID降序排列。",
        "output": "match(a:country) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点类型为person,目标点类型为person,类型为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找性别大于192或id为77的person购买的软件的名称,以及这些软件 使用的软件的名称",
        "output": "match(a:person where a.gender > 192 or a.id = 77)-[e:buy]->(b:software)-[e2:uses]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和company滴滴有关的person,再找出和滴滴employee的其他person,返回它们",
        "output": "match(a:company where a.name = '滴滴')-[e]-(b:person), (a:company)-[e2:employee]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为郑轩的点支付的所有person,并对这些person的薪资进行求和",
        "output": "match(a where a.name='郑轩')-[e:pay]->(b:person) return SUM(b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与北京大学有关的大学，并查找这些大学中的所有系，然后将它们返回。",
        "output": "match(a:university where a.name = '北京大学')-[e]-(b:university), (a:university)-[e2:has]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从书百年孤独出发,经过label为引用的边,走2跳或3跳到达的书点",
        "output": "match(a:book where a.name='百年孤独')-[e:refers]->{2,3}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找属于城市武汉的大学,和这些大学属于的城市",
        "output": "match(a:city where name = '武汉')<-[e:belong]-(b:university)-[e2:belong]->(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与商品ID为199的订单有关的朋友，再给出与订单有关的朋友。",
        "output": "match(a:goods where id = '199')-[e]-(b:orders)-[e2:friend]->(c), (b:orders)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以842,155,15,497,548作为请求点id, 源点的id等于输入表id,请帮我查找id不为空且地址等于南区的部门拥有的医生的名称,以及这些医生 创造的处方的名称",
        "output": "with p as (select * from (VALUES(842),(155),(15),(497),(548)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.id IS NOT NULL AND a.address = '南区')) -[e:department_has_doctor ]->(b:doctor) -[e2:doctor_creates_prescription ]->(c:prescription) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person杜月和马思思都存在恋人关系的点",
        "output": "match(a:person where a.name='杜月')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='马思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以属于关系关联了电影我不是药神的评论",
        "output": "match(a:film where a.name='我不是药神')<-[e:belong]-(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id,scale分组,计算peopleNumber的个数除900的值",
        "output": "return COUNT(a.peopleNumber) / 900 group by a.name, a.id, a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与周思琪有关的公司，再查询周思琪购买的其他软件，返回它们。",
        "output": "match(a:person where a.name = '周思琪')-[e]-(b:company), (a:person)-[e2:buy]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部id为22的软件关联的公司,和以属于关系关联了这些公司的其他person",
        "output": "match(a:software where a.id = 22)-[e]-(b:company)<-[e2:belong]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为发布,以及目标点id不是55的边",
        "output": "match(a)-[e:publish where e.targetId <> 55]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person creates的comment,返回其源点的height的平均值除156的个数,以及目标点的wordCount除333的数量",
        "output": "match(a:person)-[e:creates]->(b:comment) return COUNT(AVG(a.height) / 156), COUNT(b.wordCount / 333)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找和部门艺术学院有department_has_teacher关系的教师,再请帮我查找以department_has_student关系关联了艺术学院的学生;2: 查找所有与course大学物理有关系的department的size;3: 返回与university有关系的student节点,且student节点的gender为male,并返回这些点的height除height的值,以及height减169乘93的平均值;4: 请帮我查找student的3度的环;",
        "output": "查询语句为:1: match(a:department where a.name = '艺术学院')-[e:department_has_teacher]->(b:teacher),(a:department where a.name = '艺术学院')<-[e2:department_has_student]-(c:student)return a, b, c;2: match(a:course where a.name='大学物理')-[e]-(b:department) return b.size;3: match(a:university)-[e]->(b:student where b.gender = 'male') return b.height / b.height, AVG((b.height - 169) * 93);4: match(a:student)->{2,2}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id,value分组,计算level除2的最小值",
        "output": "return MIN(a.level / 2) group by a.name, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询140个与PR-403和PR-233都存在关系的仓库节点",
        "output": "match(a where a.name='PR-403')-[e]->(b:repository)<-[e2]-(c where c.name='PR-233') return b limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "金额加5885.72的值",
        "output": "a.amount + 5885.72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找标签等于person的点,并根据年龄从小到大排列;2: 查找被person孙若涵likes的person;3: 查询93个与孙建国和周建国都存在关系的person节点;",
        "output": "查询语句为:1: match(a:person) return a order by a.age asc;2: match(a:person)<-[e:person_likes_person]-(b:person where b.name='孙若涵') return a, b;3: match(a where a.name='孙建国')-[e]->(b:person)<-[e2]-(c where c.name='周建国') return b limit 93;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company华为有employee关系的person,再返回以employee关系关联了华为的person",
        "output": "match(a:company where a.name = '华为')-[e:employee]->(b:person),(a:company where a.name = '华为')<-[e2:employee]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出forum contain的user,返回其源点的id除49加89的平均值,以及目标点的age的和加41的和",
        "output": "match(a:forum)-[e:contain]->(b:user) return AVG(a.id / 49 + 89), SUM(SUM(b.age) + 41)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与标签为'person'的点有'knows'关系的'person'，以及这些'person'之间的'knows'关系，以及这些'person'与'company'之间的'belong'关系。",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person)-[e3:belong]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出购买软件Spark使用的软件,的person",
        "output": "match(a:software where name = 'Spark')-[e:uses]->(b:software)<-[e2:buy]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找薪资为3951或更高且ID大于等于65的人的姓名、他们所属的公司名称。",
        "output": "match(a:person where a.salary = 3951 and a.id >= 65)-[e:knows]->(b:person)-[e2:belong]->(c:company) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找杭州的点belong的country,然后查找杭州被belong的university,一起返回",
        "output": "match(a where a.name = '杭州')-[e:belong]->(b:country),(a where a.name = '杭州')<-[e2:belong]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出用户源点类型为user、边类型为creates的边，并返回这些边中目标ID除以172取余的结果，以及f0乘以983的最大值。",
        "output": "match(a:user)-[e:creates]->(b) return e.targetId % 172, MAX(e.f0 * 983)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间,价格分组,计算id乘41的值",
        "output": "return a.id * 41 group by a.createTime, a.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签等于公司的点有雇佣关系的person,以及和这些person有提交关系的软件,以及和这些软件有使用关系的软件",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:commits]->(c:software)-[e3:uses]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与'country'标签相关的城市，这些城市包含的公司与大学有合作关系。",
        "output": "match(a:country)-[e:contain]->(b:city)-[e2:contain]->(c:company)-[e3:cooperate]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签为company的点有apply关系的loan,并且和这些loan有deposit关系的account,并且和这些account有transfer关系的account",
        "output": "match(a:company)-[e:apply]->(b:loan)-[e2:deposit]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与作家吴国强有联系的作家",
        "output": "match(a:author where a.name='吴国强')<-[e:knows]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与user韩雪有关系的post, 返回和这些post有关联的post的,id乘56减645的值",
        "output": "match(a:user where a.name= '韩雪')-[e]-(b:post)-[e2]-(c:post) return c.id * 56 - 645",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找61个id小于72且名字是泰坦尼克号且id小于22的电影,根据价值降序排列",
        "output": "match(a:film where a.id < 72 and a.name = '泰坦尼克号' and a.id < 22) return a order by a.value desc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时满足以下条件的个人：他们与标签为'person'的节点有认识关系，并且他们属于与这些个人相关的公司，并且这些公司与软件有关联。",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:belong]->(c:company)-[e3:creates]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与中国相关的大学，并返回它们。另外，请帮我查询包含中国的其他城市，也返回它们。",
        "output": "match(a:country where a.name = '中国')-[e]-(b:university), (a:country)-[e2:contain]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以喜欢关系关联了帖子Post_181的用户",
        "output": "match(a:post where a.name='Post_181')<-[e:likes]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为person,边label为family的边,返回这些边的srcId的求和值除138的求和值,和weight的最大值除weight减176的值",
        "output": "match(a:person)-[e:family]->(b) return SUM(SUM(e.srcId) / 138), MAX(e.weight) / e.weight - 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与《呐喊》有关系的作者",
        "output": "match(a:book where a.name='呐喊')<-[e:write]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找与名为重庆大学和华中科技大学的点共同拥有的,类型是部门的节点;2: 请帮我查找122个id为空或价值小于292或大小的数量大于等于143的部门,根据大小从小到大排列;3: 找出全部和teacher陈科之间有teacher_teach_course关系的course;",
        "output": "查询语句为:1: match(a where a.name = '重庆大学')-[e:university_has_department]->(b:department)<-[e2:university_has_department]-(c where c.name = '华中科技大学') return b;2: match(a:department where (a.id is null) or a.value < 292 or COUNT(a.size) >= 143) return a order by a.size asc limit 122;3: match(a:teacher where a.name='陈科')-[e:teacher_teach_course]->(b:course) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出所有person以薪资分组的性别, 根据性别从小到大排序;2: 查询和person王轩之间有person_parent_person关系的person;3: 查询person韩月关联的person,被其他person关联的数量;",
        "output": "查询语句为:1: match(a:person) return a.gender group by a.salary order by a.gender asc;2: match(a:person where a.name='王轩')-[e:person_parent_person]->(b:person) return b;3: match(a:person where a.name='韩月')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出王建聪partner的朋友关系？",
        "output": "match(a:user where a.name='王建聪')-[e:partner]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与person有关系的person节点,且person节点的名字不等于郑强,并返回这些person的薪资乘薪资的值,以及person的id的最大值乘id的最小值",
        "output": "match(a:person)-[e]->(b:person where b.name <> '郑强') return b.salary * b.salary, MIN(MAX(b.id) * b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有哪些作家，他们的年龄不为空，且认识哪些其他作家？同时，这些作家之间又认识哪些其他作家？",
        "output": "match(a:author where (a.age is not null))-[e:knows]->(b:author)-[e2:knows]->(c:author) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供与买家王宏有关联的商品，以及包含在订单Order_322中的商品。",
        "output": "match(a:buyer where a.name = '王宏')-[e:look]->(b:goods),(c:orders where c.name = 'Order_322')-[e2:contain]->(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 给出全部名为张思思的,薪资不等于6347或名字等于杜科的伙伴,返回这些伙伴的id,和边的f1;2: 找出标签等于publisher,名为周若涵的点,返回这些点的age,id;3: 请帮我查找2个与java程序设计和孤城都存在关系的读者节点;4: 返回全部和reader韩建聪之间有reader_likes_book关系的book;5: 找出与publisher杜月有关系的reader的age;6: 给出百年孤独的点认识的书,然后给出百年孤独被认识的书,一起返回;7: 请帮我查找编辑的三角的环,边label为publisher_publish_book, 并返回这些点的id;8: 请帮我找出标签为author的点,并根据height降序排列;9: 给出id为51的读者有关的作家的伙伴, 再给出和作家有关系的相关者;",
        "output": "查询语句为:1: match(a where a.name='张思思')-[e:partner]->(b where b.salary <> 6347 or b.name = '杜科') return b.id,e.f1;2: match(a:publisher where a.name = '周若涵') return a.age, a.id;3: match(a where a.name='java程序设计')-[e]->(b:reader)<-[e2]-(c where c.name='孤城') return b limit 2;4: match(a:reader where a.name='韩建聪')-[e:reader_likes_book]->(b:book) return b;5: match(a:publisher where a.name='杜月')-[e]-(b:reader) return b.age;6: match(a where a.name = '百年孤独')-[e:knows]->(b:book),(a where a.name = '百年孤独')<-[e2:knows]-(c:book) return a, b, c;7: match(a:publisher)-[e:publisher_publish_book]->(b)-[e2:publisher_publish_book]-(c)->(a) return a,b.id as b_id,c.id as c_id;8: match(a:author) return a order by a.height desc;9: match(a:reader where id = '51')-[e]-(b:author)-[e2:partner]->(c), (b:author)-[e3:relation]->(d) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与订单有关联的卖家节点，其中卖家节点的ID大于53。然后返回这些节点的身高总和加上175，以及它们的ID差的平均值。",
        "output": "match(a:orders)-[e]->(b:seller where b.id > 53) return SUM(b.height + 175), AVG(b.id - b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定一个人作为源点，软件作为目标点，以及一个提交的边。",
        "output": "match(a:person)-[e:commits]->(b:software) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有标签为账号或贷款或公司的点",
        "output": "match(a:account | loan | company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型是person,边类型是购买,并且f1等于true或权重小于等于157.36的边",
        "output": "match(a:person)-[e:buy where e.f1 = true or e.weight <= 157.36]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到何宏，沿着标签为提交的边走2到5度，到达一个软件点。",
        "output": "match(a:person where a.name='何宏')-[e:commits]->{2,5}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表562, 以属性id作为相等条件,找出和person有关联的company节点,并根据其peopleNumber,name分组,返回peopleNumber,name,以及id加id的值",
        "output": "with p as (select * from (VALUES(562)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_belong_company ]-(b:company) RETURN b.peopleNumber, b.name, b.id + b.id GROUP BY b.peopleNumber, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为person,边label为恋人,且f0不为空,f1不等于true,或源点id大于167的边",
        "output": "match(a:person)-[e:lover where ((e.f0 is not null) and e.f1 <> true) or e.srcId > 167]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为中国科技大学的点拥有的所有部门,并对这些部门的名字进行求和",
        "output": "match(a where a.name='中国科技大学')-[e:has]->(b:department) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以contain关系关联了city武汉的country",
        "output": "match(a:city where a.name='武汉')<-[e:country_contain_city]-(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询仓库JavaGuid拥有的合并请求, 令合并请求的创建时间等于合并请求的名字, 返回仓库的语言, 合并请求的创建时间",
        "output": "match(a:repository where a.name='JavaGuid')-[e:has]->(b:pullRequest) let b.createTime = b.name return a.lang,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与电子科技大学和学生韩梅相关的节点",
        "output": "match(a:university where a.name='电子科技大学')-[e:has]-(b:department)-[e2:has]-(c:student where c.name='韩梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "peopleNumber加29786的平均值",
        "output": "AVG(a.peopleNumber + 29786)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点满足条件salary不为空,height为空,或name不是李思思,目标点满足条件createTime为2033年07月11日且createTime不等于2023年04月29日,或createTime等于2033年04月02日,且标签等于accept的边",
        "output": "match(a where ((a.salary is not null) and (a.height is null)) or a.name <> '李思思')-[e:accept]->(b where (b.createTime = '2033-07-11' and b.createTime <> '2023-04-29') or b.createTime = '2033-04-02') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点标签等于person,边标签等于观看的边,返回这些边的源点id除168的值,和目标点id对78取余的值",
        "output": "match(a:person)-[e:watch]->(b) return e.srcId / 168, e.targetId % 78",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型为person或公司或软件的点",
        "output": "match(a:person | company | software) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,gender, 数据为(83,'赵国强','male'),(8,'李建国','male')的子查询作为输入表, 源点的name等于输入表name,找出所有源点满足条件name不是Alice或age小于等于96,目标点满足条件gender是male且salary在2556到9092之间,id不等于85,且类型是person_lover_person的边",
        "output": "with p as (select * from (VALUES(83,'赵国强','male'),(8,'李建国','male')) as t(id,name,gender))MATCH (a WHERE a.name = p.name AND (a.name <> 'Alice' OR a.age <= 96)) -[e:person_lover_person ]->(b WHERE b.gender = 'male' AND b.salary BETWEEN ASYMMETRIC 2556 AND 9092 AND b.id <> 85) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与美国存在包含关系的城市,城市与国家存在属于关系的点,返回这些点的面积",
        "output": "match(a where a.name = '美国')-[e:contain]->(b:city)-[e2:belong]->(c:country) return c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询何梅的伙伴",
        "output": "match(a:doctor where a.name='何梅')-[e:relation]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和comment Comment_312之间有belong关系的film",
        "output": "match(a:comment where a.name='Comment_312')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出购买软件Mysql使用的软件,的person",
        "output": "match(a:software where name = 'Mysql')-[e:uses]->(b:software)<-[e2:buy]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取孙若涵发布的帖子中包含的标签",
        "output": "match(a:user where a.name = '孙若涵')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,value,name分组,计算id乘id的最大值",
        "output": "return MAX(a.id * a.id) group by a.level, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是prescription的点,返回175个",
        "output": "match(a:prescription) return a limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为巴黎和天津的点共同包含的,标签为大学的节点",
        "output": "match(a where a.name = '巴黎')-[e:contain]->(b:university)<-[e2:contain]-(c where c.name = '天津') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询论坛百度贴吧包含的用户, 令用户的id等于论坛的价值的最大值,令用户的名字等于用户的名字, 返回论坛的人数, 用户的性别",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:user) let b.id = MAX(a.value),let b.name = b.name return a.peopleNumber,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从订单Order_318出发,经过标签为包含的边,走2到4度到达的商品点",
        "output": "match(a:orders where a.name='Order_318')-[e:contain]->{2,4}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与patient何伟和马思琪都存在accept关系的点",
        "output": "match(a:patient where a.name='何伟')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='马思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与推特存在包含关系的用户,用户与帖子存在发布关系的点,返回这些点的字数",
        "output": "match(a where a.name = '推特')-[e:contain]->(b:user)-[e2:publish]->(c:post) return c.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出company cooperate中value不大于414的university的名称，以及这些university所在的城市名称。",
        "output": "match(a:company where a.value <= 414)-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找has department经管学院has的student,的department",
        "output": "match(a:department where name = '经管学院')-[e:has]->(b:student)<-[e2:has]-(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出51个与陈国强和杜强都存在关系的处方节点;2: 返回与部门眼科有关系的部门, 返回和这些部门有关联的药品的,id加87的个数;3: 帮我查询doctor陈建国 creates的prescription,返回prescription contain的medicine的id的平均值减id减weight的值 ;4: 请帮我查找和doctor有关联的department节点,并根据其name,address,id分组,返回name,address,id,以及weight加866的最小值;5: 给出doctor郑月的类型为partner的边,并根据weight升序排列,返回23个;6: 查询doctor的三角的环,边标签等于doctor_creates_prescription, 并返回这些点的id;7: 请帮我找出处方Prescription_282包含的药品,被其他处方包含的数量;8: 请帮我查找和药品999感冒灵有2跳或3跳关系的处方;",
        "output": "查询语句为:1: match(a where a.name='陈国强')-[e]->(b:prescription)<-[e2]-(c where c.name='杜强') return b limit 51;2: match(a:department where a.name= '眼科')-[e]-(b:department)-[e2]-(c:medicine) return COUNT(c.id + 87);3: match(a:doctor where name = '陈建国')-[e:doctor_creates_prescription]->(b:prescription)-[e2:prescription_contain_medicine]->(c:medicine) return AVG(c.id) - c.id - c.weight;4: match(a:doctor)-[e:doctor_belong_department]-(b:department) return b.name, b.address, b.id, MIN(b.weight + 866) group by b.name, b.address, b.id;5: match(a:doctor where a.name = '郑月')-[e:partner]->(b) return b order by e.weight asc limit 23;6: match(a:doctor)-[e:doctor_creates_prescription]->(b)-[e2:doctor_creates_prescription]-(c)->(a) return a,b.id as b_id,c.id as c_id;7: match(a:prescription where a.name='Prescription_282')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c:prescription) return COUNT(c);8: match(a:medicine where a.name='999感冒灵')-[e]->{2,3}(b:prescription) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和user点有creates关系的pullRequest节点,且边满足条件timeStamp大于11,目标pullRequest节点createTime不是2004年08月24日",
        "output": "match(a:user)-[e:creates where e.timeStamp > 11]->(b:pullRequest where b.createTime <> '2004-08-24') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部goods以value分组的sellerNumber, 根据sellerNumber升序排序",
        "output": "match(a:goods) return a.sellerNumber group by a.value order by a.sellerNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出与student徐思琪和徐强都存在student_selects_course关系的点;2: 找出大学清华大学拥有的部门,被其他大学拥有的数量;3: 找出被大学复旦大学拥有的部门;4: 请帮我找出和teacher马若涵有teacher_teach_course关系的course,以及和teacher杜若涵有teacher_teach_course关系的course,将它们都返回;5: 找出大小在93到99之间,id不是43的部门拥有的学生的名称,以及这些学生 选择的课程的名称;",
        "output": "查询语句为:1: match(a:student where a.name='徐思琪')-[e:student_selects_course]->(b)<-[e2:student_selects_course]-(c:student where c.name='徐强') return b;2: match(a:university where a.name='清华大学')-[e:university_has_department]->(b:department)<-[e2:university_has_department]-(c:university) return COUNT(c);3: match(a:department)<-[e:university_has_department]-(b:university where b.name='复旦大学') return a, b;4: match(a:teacher where a.name = '马若涵')-[e:teacher_teach_course]->(b:course),(c:teacher where c.name = '杜若涵')-[e2:teacher_teach_course]->(d:course)return a, b, c, d;5: match(a:department where (a.size BETWEEN 93 AND 99) and a.id <> 43)-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return b.name as b_name, c.name as c_name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 查找和department有关联的doctor节点,并根据其gender,height分组,返回gender,height,以及age减65的值;2: 查询部门拥有的医生,返回其源点的权重对858取余的最小值,以及目标点的薪资加1485的数量;3: 请帮我找出与病人杜若涵有关系的医生, 返回和这些医生有关联的药品的,id加79的值;4: 帮我查询与medicine头孢有关系的patient, 返回和这些patient有关联的patient的,height对170取余的值;5: 给出全部id为30的doctor关联的patient,和以diagnose关系关联了这些patient的其他doctor;6: 请帮我查找所有和patient王科有2到5跳关系的doctor;7: 查找id为120的部门关联的医生,和以拥有关系关联了这些医生的其他部门;8: 帮我查询所有与prescription Prescription_447有关系的medicine的name;",
        "output": "查询语句为:1: match(a:department)-[e:department_has_doctor]-(b:doctor) return b.gender, b.height, b.age - 65 group by b.gender, b.height;2: match(a:department)-[e:department_has_doctor]->(b:doctor) return MIN(a.weight % 858), COUNT(b.salary + 1485);3: match(a:patient where a.name= '杜若涵')-[e]-(b:doctor)-[e2]-(c:medicine) return c.id + 79;4: match(a:medicine where a.name= '头孢')-[e]-(b:patient)-[e2]-(c:patient) return c.height % 170;5: match(a:doctor where a.id = '30')-[e]-(b:patient)<-[e2:doctor_diagnose_patient]-(c:doctor) return b,c;6: match(a:patient where a.name='王科')-[e]->{2,5}(b:doctor) return b;7: match(a:department where a.id = '120')-[e]-(b:doctor)<-[e2:department_has_doctor]-(c:department) return b,c;8: match(a:prescription where a.name='Prescription_447')-[e]-(b:medicine) return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部学生以年龄,薪资,性别分组的id, 根据id降序排序",
        "output": "match(a:student) return a.id group by a.age, a.salary, a.gender order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表73, 源点的id等于输入表id,返回所有国家以面积,人数,名字分组的面积, 根据面积升序排序",
        "output": "with p as (select * from (VALUES(73)) as t(id)) MATCH (a:country WHERE a.id = p.id) RETURN a.area GROUP BY a.area, a.peopleNumber, a.name ORDER BY a.area ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其名字,薪资,身高分组,返回名字,薪资,身高,以及身高加180的值",
        "output": "match(a:person)-[e:pay]-(b:person) return b.name, b.salary, b.height, b.height + 180 group by b.name, b.salary, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为三体的书,以及与其有关的编辑,并返回三体的id和这些编辑的薪资",
        "output": "match(a:book where name = '三体')-[e]-(b:publisher) return a.id, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和大学清华大学有关系的大学,返回这些点的面积",
        "output": "match(a:university where a.name='清华大学')-[e]-(b:university) return b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找标签等于reader_likes_book,且权重小于等于154.63的边;2: 返回年龄大于57或薪资大于等于5691的节点;3: 给出类型为作家的所有点,并根据薪资降序排列;4: 返回与编辑赵建国存在publisher_publish_book关系,且与书白夜行存在book_refers_book关系的书节点，返回这些书的名字,id,及编辑赵建国的性别,及书白夜行的名字;5: 请帮我找出全部源点类型是reader,目标点类型是book,类型是reader_likes_book的边;6: 查询id为197的book有关的book的refers, 再查询和book有关系的refers;7: 给出reader吴伟的friend的friend的friend;",
        "output": "查询语句为:1: match(a)-[e:reader_likes_book where e.weight <= 154.63]->(b) return e;2: match(a where a.age > 57 or a.salary >= 5691) return a;3: match(a:author) return a order by a.salary desc;4: match(a:publisher where a.name='赵建国')-[e:publisher_publish_book]->(b:book)<-[e2:book_refers_book]-(c:book where c.name='白夜行') return a.gender,b.name, b.id,c.name;5: match(a:reader)-[e:reader_likes_book]->(b:book) return e;6: match(a:book where id = '197')-[e]-(b:book)-[e2:book_refers_book]->(c), (b:book)-[e3:book_refers_book]->(d) return a, b, c, d;7: match(a:reader where a.name='吴伟')-[e:friend]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询94个名为陈红的点likes的类型是post的节点,且其lang是French或name是Post_186",
        "output": "match(a where a.name='陈红')-[e:likes]->(b:post where b.lang = 'French' or b.name = 'Post_186') return b limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和医生有关联的病人节点,并根据其身高,年龄分组,返回身高,年龄,以及id除15的值",
        "output": "match(a:doctor)-[e:diagnose]-(b:patient) return b.height, b.age, b.id / 15 group by b.height, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有耳鼻喉科的点has的doctor,然后请帮我找出耳鼻喉科被belong的doctor,一起返回",
        "output": "match(a where a.name = '耳鼻喉科')-[e:has]->(b:doctor),(a where a.name = '耳鼻喉科')<-[e2:belong]-(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 帮我查询与person郑宏和赵梅都存在person_likes_person关系的点;2: 请帮我找出和person张思琪有person_pay_person关系的person,以及和person马雪有person_knows_person关系的person,将它们都返回;3: 查找person likes的person,返回其源点的age乘3的最大值,以及目标点的id减72的值;4: 请帮我找出和名为李伟的person有伙伴关系,或有伙伴的伙伴关系的person;5: 请帮我找出label为person的点,并根据age从大到小排列;6: 给出前115个标签为person_likes_person的边;7: 查询和标签为person的点有person_likes_person关系的person,以及和这些person有person_knows_person关系的person,以及和这些person有person_knows_person关系的person;",
        "output": "查询语句为:1: match(a:person where a.name='郑宏')-[e:person_likes_person]->(b)<-[e2:person_likes_person]-(c:person where c.name='赵梅') return b;2: match(a:person where a.name = '张思琪')-[e:person_pay_person]->(b:person),(c:person where c.name = '马雪')-[e2:person_knows_person]->(d:person)return a, b, c, d;3: match(a:person)-[e:person_likes_person]->(b:person) return MAX(a.age * 3), b.id - 72;4: match(a:person where n.name=李伟)-[e:partner]->{1,2}(b:person) return b;5: match(a:person) return a order by a.age desc;6: match(a)-[e:person_likes_person]->(b) return e limit 115;7: match(a:person)-[e:person_likes_person]->(b:person)-[e2:person_knows_person]->(c:person)-[e3:person_knows_person]->(d:person) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表231, 源点的id等于输入表id,请帮我找出29个年龄不为空,身高大于等于184的person,根据性别降序排列",
        "output": "with p as (select * from (VALUES(231)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.age IS NOT NULL AND a.height >= 184)) RETURN a ORDER BY a.gender DESC LIMIT 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和标签文艺有3到5度关系的电影院",
        "output": "match(a:tag where a.name='文艺')-[e]->{3,5}(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型是学生,边类型是选择,且f0小于等于622,f1的平均值小于等于15的边",
        "output": "match(a:student)-[e:selects where e.f0 <= 622 and AVG(e.f1) <= 15]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与defaultName和defaultName1有关的所有公司节点，共有113个。",
        "output": "match(a where a.name='defaultName')-[e]->(b:company)<-[e2]-(c where c.name='defaultName1') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 查找全部和名为黄思思的person有partner关系,或有partner的partner关系的account;2: 查找名为蚂蚁集团和腾讯的,类型是company的点公共的friend节点的名单;3: 找出person以名字,薪资分组的年龄, 根据年龄从小到大排序;4: 查询id为87的点的peopleNumber,scale;5: 返回24个account BIN和XiaoHu,共同的relation;",
        "output": "查询语句为:1: match(a:person where n.name=黄思思)-[e:partner]->{1,2}(b:account) return b;2: match(a:company where a.name='蚂蚁集团')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='腾讯') return b.name;3: match(a:person) return a.age group by a.name, a.salary order by a.age asc;4: match(a where a.id = '87') return a.peopleNumber, a.scale;5: match(a:account where a.name='BIN')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='XiaoHu') return b limit 24;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和person吴强有person_likes_person关系的person,再帮我查询以person_likes_person关系关联了吴强的person",
        "output": "match(a:person where a.name = '吴强')-[e:person_likes_person]->(b:person),(a:person where a.name = '吴强')<-[e2:person_likes_person]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为还款,并且f0不为空或f0为空,且f1等于false的边",
        "output": "match(a)-[e:repay where ((e.f0 is not null) or (e.f0 is null)) and e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 帮我查询名为赵宏和何月的,label为buyer的点公共的relation节点的名单;2: 找出所有买家以性别,身高,名字分组的薪资, 根据薪资从小到大排序;3: 帮我查询buyer consult的seller,返回其源点的height对186取余的最小值,以及目标点的age减76的值;4: 查询名为孙建聪和郑思琪的,label为买家的点公共的朋友节点的名单;5: 查找label为seller的点;",
        "output": "查询语句为:1: match(a:buyer where a.name='赵宏')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='何月') return b.name;2: match(a:buyer) return a.salary group by a.gender, a.height, a.name order by a.salary asc;3: match(a:buyer)-[e:buyer_consult_seller]->(b:seller) return MIN(a.height % 186), b.age - 76;4: match(a:buyer where a.name='孙建聪')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='郑思琪') return b.name;5: match(a:seller) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生陈若涵创造的处方,被其他病人接受的数量",
        "output": "match(a:doctor where a.name='陈若涵')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以894,880作为请求点id, 以属性id作为相等条件,返回前185个满足条件name为Prescription_355的prescription",
        "output": "with p as (select * from (VALUES(894),(880)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_355')) RETURN a LIMIT 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person韩梅支付的person,和韩梅支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where name = '韩梅')-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'Zd'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('Zd') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出同时属于Bilibili和蚂蚁集团的点",
        "output": "match(a:company where a.name='Bilibili')-[e:belong]->(b)<-[e2:belong]-(c:company where c.name='蚂蚁集团') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有person以name,salary分组的salary, 根据salary从大到小排序",
        "output": "match(a:person) return a.salary group by a.name, a.salary order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,salary, 数据为(71,81,3552)的子查询作为输入表, 源点的id等于输入表id,帮我查询名为知乎的点包含的person,并对这些点的薪资进行求和",
        "output": "with p as (select * from (VALUES(71,81,3552)) as t(age,id,salary))MATCH (a WHERE a.id = p.id AND (a.name = '知乎')) -[e:forum_contain_person ]->(b:person) RETURN SUM(b.salary) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型是city,边类型是contain,以及满足条件srcId大于131且srcId大于158且f1大于171.64的边",
        "output": "match(a:city)-[e:contain where e.srcId > 131 and e.srcId > 158 and e.f1 > 171.64]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,height, 数据为(22,2031,153)的子查询作为输入表, 源点的salary等于输入表salary,返回和forum中国诗词论坛有关的forum,再返回和中国诗词论坛forum_contain_post的其他post,返回它们",
        "output": "with p as (select * from (VALUES(22,2031,153)) as t(id,salary,height))MATCH (a:forum WHERE a.salary = p.salary AND (a.name = '中国诗词论坛')) -[e ]-(b:forum) , (a:forum) -[e2:forum_contain_post ]->(c:post) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与patient韩月和韩红都存在accept关系的点",
        "output": "match(a:patient where a.name='韩月')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='韩红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表555, 源点的id等于输入表id,请帮我查找全部源点标签为处方,边标签为prescription_contain_medicine,且权重为空或f0为745的边",
        "output": "with p as (select * from (VALUES(555)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) -[e:prescription_contain_medicine WHERE e.weight IS NULL OR e.f0 = 745 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id的最大值减28的最小值",
        "output": "return MIN(MAX(a.id) - 28) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为69的点的价值,名字",
        "output": "match(a where a.id = 69) return a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight对447取余的值",
        "output": "a.weight % 447",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别,名字,薪资分组,计算id除68的值",
        "output": "return a.id / 68 group by a.gender, a.name, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对89取余的最小值",
        "output": "MIN(a.id % 89)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与杭州相关的所有国家，并返回它们。",
        "output": "match(a:city where a.name = '杭州')-[e]-(b:country), (a:city)-[e2:belong]->(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与teacher赵若涵有关,且与department物理学院有关系的course节点",
        "output": "match(a:teacher where a.name='赵若涵')-[e:teach]-(b:course)-[e2:belong]-(c:department where c.name='物理学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件名字是古代或价值在220到760之间的节点",
        "output": "match(a where a.name = '古代' or (a.value BETWEEN 220 AND 760)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回与名为李红和马宏的点共同认识的,类型为person的节点",
        "output": "match(a where a.name = '李红')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '马宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与四川大学有has关系，并且与孙宏老师有has关系的department节点。请返回这些department的id、value和name，以及四川大学的level和孙宏老师的name。",
        "output": "match(a:university where a.name='四川大学')-[e:has]->(b:department)<-[e2:has]-(c:teacher where c.name='孙宏') return a.level,b.id, b.value, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('徐月',21,186),('郑思思',31,151)作为请求表数据,属性分别为name,id,height, 以属性name作为相等条件,给出源点value在737到932之间,id不是65,边类型是software_uses_software,且满足条件weight在140.31到169.17之间且srcId在99到183之间的边,返回这些边的targetId减98的值",
        "output": "with p as (select * from (VALUES('徐月',21,186),('郑思思',31,151)) as t(name,id,height))MATCH (a WHERE a.name = p.name AND (a.value BETWEEN ASYMMETRIC 737 AND 932 AND a.id <> 65)) -[e:software_uses_software WHERE e.weight BETWEEN ASYMMETRIC 140.31 AND 169.17 AND e.srcId BETWEEN ASYMMETRIC 99 AND 183 ]->(b) RETURN e.targetId - 98 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与杜强和张红都有联系的person节点。",
        "output": "match(a where a.name='杜强')-[e]->(b:person)<-[e2]-(c where c.name='张红') return b limit 136",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person赵月有3到6度关系的person",
        "output": "match(a:person where a.name='赵月')-[e]->{3,6}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘65的最小值",
        "output": "MIN(a.id * 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查询与大学中国科技大学有university_has_department关系的2度以内的环;2: 查找全部源点标签为teacher,边标签为teacher_teach_course的边,返回这些边的weight减130.29的值,和srcId的最小值除srcId的最小值;3: 查询名为体育学院的点has的全部teacher,并对这些点的name进行求和;4: 给出123个与清华大学和电子科技大学都存在关系的课程节点;5: 查询源点label为university,边label为university_has_department的边,返回这些边的f0加735的值,和srcId乘146的求和值;6: 查询label为course的点;7: 查找大学重庆大学 拥有的部门,返回部门 拥有的学生的id对5取余的值 ;",
        "output": "查询语句为:1: match(a:university where name = '中国科技大学')-[e:university_has_department]->{0,1}(b)->(a) return a.id, b.id as b_id;2: match(a:teacher)-[e:teacher_teach_course]->(b) return e.weight - 130.29, MIN(MIN(e.srcId) / e.srcId);3: match(a where a.name='体育学院')-[e:department_has_teacher]->(b:teacher) return SUM(b.name);4: match(a where a.name='清华大学')-[e]->(b:course)<-[e2]-(c where c.name='电子科技大学') return b limit 123;5: match(a:university)-[e:university_has_department]->(b) return e.f0 + 735, SUM(e.srcId * 146);6: match(a:course) return a;7: match(a:university where name = '重庆大学')-[e:university_has_department]->(b:department)-[e2:department_has_student]->(c:student) return c.id % 5;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与Bilibili有合作关系的软件，再找出与Bilibili合作的软件。",
        "output": "match(a:company where a.name = 'Bilibili')-[e:creates]->(b:software),(a:company where a.name = 'Bilibili')<-[e2:creates]-(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表754,879,814,679, 源点的id等于输入表id,请帮我查找以knows关系关联了author黄建国的author",
        "output": "with p as (select * from (VALUES(754),(879),(814),(679)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.name = '黄建国')) <-[e:author_knows_author ]-(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有label为cinema的点",
        "output": "match(a:cinema) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,大小,id分组,计算value的最大值除648的值",
        "output": "return MAX(a.value) / 648 group by a.value, a.size, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person郑国强有认识关系的2跳的环",
        "output": "match(a:person where name = '郑国强')-[e:knows]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部id为112的大学关联的公司,和以包含关系关联了这些公司的其他城市",
        "output": "match(a:university where a.id = 112)-[e]-(b:company)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person的三角的环,边label为likes, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出company的2跳的环",
        "output": "match(a:company)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据address分组,计算size除164除505减805的值",
        "output": "return a.size / 164 / 505 - 805 group by a.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为读者,名为陈建聪的点,返回这些点的身高",
        "output": "match(a:reader where a.name = '陈建聪') return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,height, 数据为(96,5,151),(13,89,172)的子查询作为输入表, 源点的height等于输入表height,找出全部郑科的点支付的person,然后找出郑科被认识的person,一起返回",
        "output": "with p as (select * from (VALUES(96,5,151),(13,89,172)) as t(age,id,height))MATCH (a WHERE a.height = p.height AND (a.name = '郑科')) -[e:person_pay_person ]->(b:person) , (a WHERE a.name = '郑科') <-[e2:person_knows_person ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为合并请求的点,返回104个",
        "output": "match(a:pullRequest) return a limit 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与ID为114的账号有关联的账号及其相关者。",
        "output": "match(a:account where id = '114')-[e]-(b:account)-[e2:partner]->(c), (b:account)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与公司ID为89的合作伙伴，以及与软件相关的合作伙伴。",
        "output": "match(a:company where id = '89')-[e]-(b:software)-[e2:partner]->(c), (b:software)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于编辑,边标签等于发布的边,返回这些边的targetId的最小值除149的平均值,和权重对113.75取余除94的值",
        "output": "match(a:publisher)-[e:publish]->(b) return AVG(MIN(e.targetId) / 149), e.weight % 113.75 / 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为仓库的点,返回21个",
        "output": "match(a:repository) return a limit 21",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家马国强咨询的卖家, 令卖家的身高等于卖家的薪资,令买家的薪资等于买家的名字, 返回买家的身高, 卖家的名字",
        "output": "match(a:buyer where a.name='马国强')-[e:consult]->(b:seller) let b.height = b.salary,let a.salary = a.name return a.height,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前98个价值小于581或名字不等于572或规格不是large的公司",
        "output": "match(a:company where a.value < 581 or a.name <> 572 or a.scale <> 'large') return a limit 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和course有关联的department节点,并根据其id,size,name分组,返回id,size,name,以及id乘24的值",
        "output": "match(a:course)-[e:belong]-(b:department) return b.id, b.size, b.name, b.id * 24 group by b.id, b.size, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找同时与陈国强和李雪有关联的人。",
        "output": "match(a:person where a.name='陈国强')-[e:pay]-(b:person)-[e2:likes]-(c:person where c.name='李雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户喜欢的仓库,返回其源点的id加47的值,以及目标点的id乘id的值",
        "output": "match(a:user)-[e:likes]->(b:repository) return a.id + 47, b.id * b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为少年闰土的book,以及与其有关的author,并返回少年闰土的price和这些author的gender",
        "output": "match(a:book where name = '少年闰土')-[e]-(b:author) return a.price, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为计算机体系结构的,名字为生物学院或价值大于等于74的伙伴,返回这些伙伴的价值,和边的f1,权重,源点id",
        "output": "match(a where a.name='计算机体系结构')-[e:partner]->(b where b.name = '生物学院' or b.value >= 74) return b.value,e.f1, e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点label为country,边label为contain的边,返回这些边的targetId减65的值,和srcId除86的值",
        "output": "match(a:country)-[e:contain]->(b) return e.targetId - 65, e.srcId / 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下person吴月申请的loan节点对应的deposit账户",
        "output": "match(a:person where a.name = '吴月')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和编辑李伟有关系的书或读者或编辑,返回这些点的id,创建时间",
        "output": "match(a:publisher where a.name='李伟')-[e]-(b:book | reader | publisher) return b.id, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询与person周建聪有关系的贷款, 返回和这些贷款有关联的公司的,价值加价值的最大值",
        "output": "match(a:person where a.name= '周建聪')-[e]-(b:loan)-[e2]-(c:company) return MAX(c.value + c.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被repository Mybatis has的issue,和Mybatis has的user",
        "output": "match(a:issue)<-[e:has]-(b:repository where name = 'Mybatis')-[e2:has]->(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和仓库Flink有2度关系的仓库",
        "output": "match(a:repository where a.name='Flink')-[e]->{2,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有按性别、身高和 ID 分组的人的性别，并按从大到小排序。",
        "output": "match(a:person) return a.gender group by a.gender, a.height, a.id order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型为论坛的点有包含关系的用户,并且和这些用户有发布关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:publish]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person李科有属于关系的3度的环",
        "output": "match(a:person where name = '李科')-[e:belong]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以664,776,653,651,762作为请求点id, 源点的id等于输入表id,请帮我找出29个age为6或id大于等于10的person,根据salary从小到大排列",
        "output": "with p as (select * from (VALUES(664),(776),(653),(651),(762)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.age = 6 OR a.id >= 10)) RETURN a ORDER BY a.salary LIMIT 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出周梅的点accept的prescription,然后给出周梅被diagnose的doctor,一起返回;2: 查询部门的3跳以内的环;3: 请帮我查找height不为空,name等于黄思思,或id为空的节点;4: 给出全部和部门点有拥有关系的医生节点,且边满足条件f1等于true,目标医生节点满足条件性别不等于male;5: 帮我查询名为耳鼻喉科的部门,以及与其有关的病人,并返回耳鼻喉科的名字和这些病人的薪资;6: 请帮我找出处方的三角的环,边标签为prescription_contain_medicine, 并返回这些点的id;7: 查询全部与medicine头孢有关系的department的address;8: 请帮我找出和病人赵轩有patient_accept_prescription关系的处方,以及和病人韩建国有patient_accept_prescription关系的处方,将它们都返回;",
        "output": "查询语句为:1: match(a where a.name = '周梅')-[e:patient_accept_prescription]->(b:prescription),(a where a.name = '周梅')<-[e2:doctor_diagnose_patient]-(c:doctor) return a, b, c;2: match(a:department)->{0,2}(b)->(a) return a.id, b.id as b_id;3: match(a where ((a.height is not null) and a.name = '黄思思') or (a.id is null)) return a;4: match(a:department)-[e:department_has_doctor where e.f1 = true]->(b:doctor where b.gender <> 'male') return b;5: match(a:department where name = '耳鼻喉科')-[e]-(b:patient) return a.name, b.salary;6: match(a:prescription)-[e:prescription_contain_medicine]->(b)-[e2:prescription_contain_medicine]-(c)->(a) return a,b.id as b_id,c.id as c_id;7: match(a:medicine where a.name='头孢')-[e]-(b:department) return b.address;8: match(a:patient where a.name = '赵轩')-[e:patient_accept_prescription]->(b:prescription),(c:patient where c.name = '韩建国')-[e2:patient_accept_prescription]->(d:prescription)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被编辑陈伟发布的书",
        "output": "match(a:book)<-[e:publish]-(b:publisher where b.name='陈伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被buyer徐科consult的seller,和徐科look的goods",
        "output": "match(a:seller)<-[e:consult]-(b:buyer where name = '徐科')-[e2:look]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出20个与李建聪和王轩都存在关系的卖家或买家或商品节点",
        "output": "match(a where a.name='李建聪')-[e]->(b:seller | buyer | goods)<-[e2]-(c where c.name='王轩') return b limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和post Post_258有3度关系的forum",
        "output": "match(a:post where a.name='Post_258')-[e]->{3,3}(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询28个和类型为user的点有publish关系的post,以及和这些post有has关系的tag",
        "output": "match(a:user)-[e:publish]->(b:post)-[e2:has]->(c:tag) return c limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询订单包含的商品,返回其源点的id减85的值,以及目标点的id加44乘1368.43的最大值",
        "output": "match(a:orders)-[e:contain]->(b:goods) return a.id - 85, MAX((b.id + 44) * 1368.43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为北京和重庆的,标签等于city的点公共的relation节点的名单",
        "output": "match(a:city where a.name='北京')-[e:relation]->(b)<-[e2:relation]-(c:city where c.name='重庆') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找处方Prescription_325的标签等于伙伴的边,并根据f1从大到小排列,返回178个",
        "output": "match(a:prescription where a.name = 'Prescription_325')-[e:partner]->(b) return b order by e.f1 desc limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person类型的点，然后按照薪资从低到高排序。",
        "output": "match(a:person) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和pullRequest PR-153有1度或2度关系的user",
        "output": "match(a:pullRequest where a.name='PR-153')-[e]->{1,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id乘17减5的值",
        "output": "return a.id * 17 - 5 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出课程属于的部门,返回其源点的价值对386取余的值,以及目标点的大小除50的和",
        "output": "match(a:course)-[e:belong]->(b:department) return a.value % 386, SUM(b.size / 50)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person李建聪和马红都存在父母关系的点",
        "output": "match(a:person where a.name='李建聪')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='马红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person李建国支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='李建国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出110个id小于等于11的person,根据age升序排列",
        "output": "match(a:person where a.id <= 11) return a order by a.age asc limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询性别不是famale且性别是male的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:user where a.gender <> 'famale' and a.gender = 'male')-[e:likes]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与人有关的评论，这些评论创建了某物，并且这些评论属于某个电影。同时，找出那些电影拥有某个标签。",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照商品名称、ID和价格对商品进行分组，并按照价格从大到小排序。",
        "output": "match(a:goods) return a.value group by a.name, a.id, a.price order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算id除86的值",
        "output": "return a.id / 86 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些既在大众影院上映，也在横店影院上映的电影。",
        "output": "match(a where a.name = '大众影院')-[e:releases]->(b:film)<-[e2:releases]-(c where c.name = '横店影院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与何思思和周科都认识的人，并返回他们的年龄、姓名、何思思的性别和周科的姓名。",
        "output": "match(a:person where a.name='何思思')-[e:knows]->(b:person)<-[e2:knows]-(c:person where c.name='周科') return a.gender,b.age, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点id不等于161或height不等于153,且gender等于male,目标点name为白夜行,wordCount不为空,或wordCount为空,且类型是likes的边",
        "output": "match(a where (a.id <> 161 or a.height <> 153) and a.gender = 'male')-[e:likes]->(b where (b.name = '白夜行' and (b.wordCount is not null)) or (b.wordCount is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄小于4,性别是famale且名字是吴月的节点",
        "output": "match(a where a.age < 4 and a.gender = 'famale' and a.name = '吴月') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询97个公司滴滴和谷歌,共同的伙伴",
        "output": "match(a:company where a.name='滴滴')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='谷歌') return b limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出has student Tom的department,和这些department has的teacher",
        "output": "match(a:student where name = 'Tom')<-[e:has]-(b:department)-[e2:has]->(c:teacher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以发布关系关联了书java程序设计的编辑",
        "output": "match(a:book where a.name='java程序设计')<-[e:publish]-(b:publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为郑思琪的学生有朋友关系，或者有朋友的朋友关系的课程。",
        "output": "match(a:student where n.name=郑思琪)-[e:friend]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id的最小值除12的值",
        "output": "return MIN(a.id) / 12 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部id为71的person关联的person,和以likes关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 71)-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询publish book悲惨世界knows的book,的publisher",
        "output": "match(a:book where name = '悲惨世界')-[e:knows]->(b:book)<-[e2:publish]-(c:publisher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与编辑有关系的作家节点,且作家节点的id不为空,并返回这些作家的薪资对薪资取余的数量,以及作家的height的和除身高的数量",
        "output": "match(a:publisher)-[e]->(b:author where (b.id is not null)) return COUNT(b.salary % b.salary), COUNT(SUM(b.height) / b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 帮我查询名为张若涵的点投资的公司,并对这些点的价值进行求和;2: 请帮我查找标签为company的点,并根据name升序排列;3: 请帮我找出源点标签为person,目标点标签为loan,标签为person_apply_loan的边;4: 查找所有和person徐雪之间有person_apply_loan关系的loan;5: 给出全部名为吴月的点拥有的账号;6: 找出从person郑红出发,经过标签等于person_invest_company的边,走1到4跳到达的公司点;",
        "output": "查询语句为:1: match(a where a.name='张若涵')-[e:person_invest_company]->(b:company) return SUM(b.value);2: match(a:company) return a order by a.name asc;3: match(a:person)-[e:person_apply_loan]->(b:loan) return e;4: match(a:person where a.name='徐雪')-[e:person_apply_loan]->(b:loan) return b;5: match(a where a.name='吴月')-[e:person_own_account]->(b:account) return b;6: match(a:person where a.name='郑红')-[e:person_invest_company]->{1,4}(b:company) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与腾讯合作的大学，以及这些大学所在的城市，并返回这些城市的ID。",
        "output": "match(a where a.name = '腾讯')-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,peopleNumber,scale分组,计算id除51的平均值",
        "output": "return AVG(a.id / 51) group by a.value, a.peopleNumber, a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出赵若涵的二阶关系伙伴",
        "output": "match(a:user where a.name='赵若涵')-[e:relation]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与韩强有朋友的友人，以及与韩强有同事关系的同事。",
        "output": "match(a:person where a.name = '韩强')-[e:friend]->(b:person),(a:person where a.name = '韩强')<-[e2:colleague]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和用户李思琪有关的用户,称为X,再请帮我找出和这个X有关联的其他帖子,以及和X有关联的标签",
        "output": "match(a:user where a.name = '李思琪')-[e]-(b:user), (b:user)-[e2]-(c:post),(b:user)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出身高加164不等于38或id小于4的学生选择的课程的名称,以及这些课程 属于的部门的名称",
        "output": "match(a:student where a.height + 164 <> 38 or a.id < 4)-[e:selects]->(b:course)-[e2:belong]->(c:department) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表452,809,951,740, 以属性id作为相等条件,查询名为李轩的点diagnose的patient,并对这些点的age进行求和",
        "output": "with p as (select * from (VALUES(452),(809),(951),(740)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '李轩')) -[e:doctor_diagnose_patient ]->(b:patient) RETURN SUM(b.age) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以820,87作为请求点id, 源点的id等于输入表id,返回类型为company的点,返回14个",
        "output": "with p as (select * from (VALUES(820),(87)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a LIMIT 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下郑国强的朋友的关系伙伴",
        "output": "match(a:person where a.name='郑国强')-[e:friend]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查找17个创建时间为2032年01月07日且名字为Prescription_214,权重不等于359的处方,根据id降序排列;2: 请帮我找出与部门放射科有关系的处方的创建时间;3: 请帮我找出标签等于doctor的点,返回161个;",
        "output": "查询语句为:1: match(a:prescription where a.createTime = '2032-01-07' and a.name = 'Prescription_214' and a.weight <> 359) return a order by a.id desc limit 17;2: match(a:department where a.name='放射科')-[e]-(b:prescription) return b.createTime;3: match(a:doctor) return a limit 161;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出34个名为周伟的点属于的标签为公司的节点,且节点id大于41且价值不等于792",
        "output": "match(a where a.name='周伟')-[e:belong]->(b:company where b.id > 41 and b.value <> 792) return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回96个和类型是书的点有引用关系的书,且和这些书有引用关系的书",
        "output": "match(a:book)-[e:refers]->(b:book)-[e2:refers]->(c:book) return c limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,name, 数据为(29,78,'陈伟'),(76,48,'郑思琪'),(52,75,'何若涵'),(99,3,'周思思')的子查询作为输入表, 源点的name等于输入表name,请帮我查找195个prescription Prescription_454和Prescription_145,共同的partner",
        "output": "with p as (select * from (VALUES(29,78,'陈伟'),(76,48,'郑思琪'),(52,75,'何若涵'),(99,3,'周思思')) as t(age,id,name))MATCH (a:prescription WHERE a.name = p.name AND (a.name = 'Prescription_454')) -[e:partner ]->(b) <-[e2:partner ]-(c:prescription WHERE c.name = 'Prescription_145') RETURN b LIMIT 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以58,159,658,456作为请求点id, 源点的id等于输入表id,请帮我找出被用户王建国发布的帖子",
        "output": "with p as (select * from (VALUES(58),(159),(658),(456)) as t(id)) MATCH (a:post WHERE a.id = p.id) <-[e:user_publish_post ]-(b:user WHERE b.name = '王建国') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与名为陈思思的人有朋友关系，或者有朋友的朋友关系的账户",
        "output": "match(a:person where n.name=陈思思)-[e:friend]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下李梅喜欢的电影评论",
        "output": "match(a:person where a.name = '李梅')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王国强和person王梅都有关联的人，并返回他们的身高、年龄和薪资。",
        "output": "match(a:person where a.name='王国强')-[e]->(b:person)<-[e2]-(c:person where c.name='王梅') return b.height, b.age, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表554, 源点的id等于输入表id,返回从部门法学院出发,经过标签等于department_has_teacher的边,走1到3度到达的教师点",
        "output": "with p as (select * from (VALUES(554)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '法学院')) -[e:department_has_teacher ]->{1,3}(b:teacher) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person周宏喜欢的person,和周宏支付的person",
        "output": "match(a:person)<-[e:likes]-(b:person where name = '周宏')-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询贷款loan_96存款的账号,以及转账这些账号的账号",
        "output": "match(a:loan where name = 'loan_96')-[e:deposit]->(b:account)<-[e2:transfer]-(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询学生周红 选择的课程,返回课程 属于的部门的价值除价值的值",
        "output": "match(a:student where name = '周红')-[e:selects]->(b:course)-[e2:belong]->(c:department) return c.value / c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与publisher徐梅和何国强都存在publish关系的点",
        "output": "match(a:publisher where a.name='徐梅')-[e:publish]->(b)<-[e2:publish]-(c:publisher where c.name='何国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为处方的点,并根据id降序排列",
        "output": "match(a:prescription) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "孙思琪和徐科是112个买家的共同合作伙伴。",
        "output": "match(a:buyer where a.name='孙思琪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='徐科') return b limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找公司谷歌 雇佣的person,返回person 购买的软件的id的求和值乘18的数量 ",
        "output": "match(a:company where name = '谷歌')-[e:company_employee_person]->(b:person)-[e2:person_buy_software]->(c:software) return COUNT(SUM(c.id) * 18)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为王伟的person,以及与其有关的company,并返回王伟的salary和这些company的id",
        "output": "match(a:person where name = '王伟')-[e]-(b:company) return a.salary, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马建国喜欢和被支付的所有person，一起返回。",
        "output": "match(a where a.name = '马建国')-[e:likes]->(b:person),(a where a.name = '马建国')<-[e2:pay]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回大学的三角的环,边标签等于university_has_department, 并返回这些点的id",
        "output": "match(a:university)-[e:university_has_department]->(b)-[e2:university_has_department]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为wordCount,name,id, 数据为(801,'Comment_128',54),(852,'Comment_287',58),(932,'Comment_418',28),(294,'Comment_309',19), 以属性id作为相等条件,查找所有与person李梅有关系的comment的id",
        "output": "with p as (select * from (VALUES(801,'Comment_128',54),(852,'Comment_287',58),(932,'Comment_418',28),(294,'Comment_309',19)) as t(wordCount,name,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '李梅')) -[e ]-(b:comment) RETURN b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为越南的公司或大学,以及与其有关的公司,并返回越南的名字和这些公司的名字",
        "output": "match(a:company | university where name = '越南')-[e]-(b:company) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为李梅的节点接受的病人或药品",
        "output": "match(a where a.name='李梅')-[e:accept]->(b:patient | medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点salary不为空,age大于4,目标点name是ISSUE-325且id大于57,或status不等于Closed,且label为creates的边",
        "output": "match(a where (a.salary is not null) and a.age > 4)-[e:creates]->(b where (b.name = 'ISSUE-325' and b.id > 57) or b.status <> 'Closed') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person likes的person,返回其源点的height除height加id的最小值,以及目标点的height的最大值对180取余对154取余的值",
        "output": "match(a:person)-[e:likes]->(b:person) return MIN(a.height / a.height + a.id), MAX(b.height) % 180 % 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回film的2跳以内的环",
        "output": "match(a:film)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找152个名为韩伟的点喜欢的标签等于仓库的节点,且其名字为Kafka",
        "output": "match(a where a.name='韩伟')-[e:likes]->(b:repository where b.name = 'Kafka') return b limit 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "取消买家陈科的订单，返回包含该订单商品类别的信息。",
        "output": "match(a:buyer where name = '陈科')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为李雪的点观看的所有电影,并对这些电影的价值进行求和",
        "output": "match(a where a.name='李雪')-[e:watch]->(b:film) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Spark和Geaflow有什么共同点？",
        "output": "match(a:software where a.name='Spark')-[e:relation]->(b)<-[e2:relation]-(c:software where c.name='Geaflow') return b limit 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2,314,'南京大学')作为请求表数据,属性分别为level,value,name, 以属性level作为相等条件,请帮我找出名为阿里的company,以及与其有关的company,并返回阿里的name和这些company的scale",
        "output": "with p as (select * from (VALUES(2,314,'南京大学')) as t(level,value,name))MATCH (a:company WHERE a.level = p.level AND (name = '阿里')) -[e ]-(b:company) RETURN a.name, b.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回电影标签下，绿巨人和少年足球两个节点的共同伙伴列表。",
        "output": "match(a:film where a.name='绿巨人')-[e:partner]->(b)<-[e2:partner]-(c:film where c.name='少年足球') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('small',847,'微软')作为请求表数据,属性分别为scale,peopleNumber,name, 源点的scale等于输入表scale,查找名为TheShy的点transfer的全部account,并对这些点的lastLoginTime进行求和",
        "output": "with p as (select * from (VALUES('small',847,'微软')) as t(scale,peopleNumber,name))MATCH (a WHERE a.scale = p.scale AND (a.name = 'TheShy')) -[e:account_transfer_account ]->(b:account) RETURN SUM(b.lastLoginTime) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(false,937,134.88),(false,937,121.42)作为请求表数据,属性分别为f1,f0,weight, 源点的f0等于输入表f0,给出名为电子科技大学的university,以及与其有关的university,并返回电子科技大学的name和这些university的name",
        "output": "with p as (select * from (VALUES(false,937,134.88),(false,937,121.42)) as t(f1,f0,weight))MATCH (a:university WHERE a.f0 = p.f0 AND (name = '电子科技大学')) -[e ]-(b:university) RETURN a.name, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找所有和书少年闰土有3到6度关系的编辑;2: 给出所有源点标签等于author,目标点标签等于author,标签等于author_knows_author的边;3: 查询被author赵思琪write的book;4: 给出和book罪与罚有book_refers_book关系的book,以及和book白夜行有book_refers_book关系的book,将它们都返回;5: 请帮我查找读者以年龄,名字,薪资分组的id, 根据id升序排序;6: 找出所有作家以名字,身高,性别分组的年龄, 根据年龄升序排序;7: 返回69个和label为publisher的点有publisher_publish_book关系的book,以及和这些book有book_refers_book关系的book;",
        "output": "查询语句为:1: match(a:book where a.name='少年闰土')-[e]->{3,6}(b:publisher) return b;2: match(a:author)-[e:author_knows_author]->(b:author) return e;3: match(a:book)<-[e:author_write_book]-(b:author where b.name='赵思琪') return a, b;4: match(a:book where a.name = '罪与罚')-[e:book_refers_book]->(b:book),(c:book where c.name = '白夜行')-[e2:book_refers_book]->(d:book)return a, b, c, d;5: match(a:reader) return a.id group by a.age, a.name, a.salary order by a.id asc;6: match(a:author) return a.age group by a.name, a.height, a.gender order by a.age asc;7: match(a:publisher)-[e:publisher_publish_book]->(b:book)-[e2:book_refers_book]->(c:book) return c limit 69;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出191个与CSDN和中国军事论坛都存在关系的forum节点",
        "output": "match(a where a.name='CSDN')-[e]->(b:forum)<-[e2]-(c where c.name='中国军事论坛') return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与吴科有联系的人。",
        "output": "match(a:person where a.name='吴科')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有读者以薪资分组的名字, 根据名字从大到小排序",
        "output": "match(a:reader) return a.name group by a.salary order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签为课程,目标点标签为部门,标签为大学或课程或部门的边",
        "output": "match(a:course)-[e:university | course | department]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回包含公司阿里属于的城市,的国家",
        "output": "match(a:company where name = '阿里')-[e:belong]->(b:city)<-[e2:contain]-(c:country) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与loan_27存在存款关系的账号,账号与账号存在转账关系的点,返回这些点的id",
        "output": "match(a where a.name = 'loan_27')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 查询类型为buyer_cancel_orders,以及满足条件时间戳不是2011年03月20日的边;2: 请帮我找出名为Order_220的订单,以及与其有关的买家,并返回Order_220的价格和这些买家的id;3: 给出label为buyer的点,并根据name降序排列;",
        "output": "查询语句为:1: match(a)-[e:buyer_cancel_orders where e.timeStamp <> '2011-03-20']->(b) return e;2: match(a:orders where name = 'Order_220')-[e]-(b:buyer) return a.price, b.id;3: match(a:buyer) return a order by a.name desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找164个名为黄月的点likes的标签等于person的节点,且其age大于9",
        "output": "match(a where a.name='黄月')-[e:likes]->(b:person where b.age > 9) return b limit 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与标签为'university'的点有'has'关系的部门，以及这些部门有'has'关系的学生，以及这些学生有'selects'关系的课程。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为北京大学的点拥有的部门",
        "output": "match(a where a.name='北京大学')-[e:university_has_department]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照创建时间升序排序所有以id、创建时间和名字为组别的处方。",
        "output": "match(a:prescription) return a.createTime group by a.id, a.createTime, a.name order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找编辑张建国发布的书,以及撰写这些书的作家",
        "output": "match(a:publisher where name = '张建国')-[e:publish]->(b:book)<-[e2:write]-(c:author) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以191,748,151作为请求点id, 以属性id作为相等条件,帮我查询174个peopleNumber的平均值小于341的company,根据scale从小到大排列",
        "output": "with p as (select * from (VALUES(191),(748),(151)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (AVG(a.peopleNumber) < 341)) RETURN a ORDER BY a.scale LIMIT 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,name,salary, 数据为('famale','Amily',2735),('male','孙宏',7816),('male','李雪',4346), 源点的salary等于输入表salary,查询与person郑建聪有关系的person, 返回和这些person有关联的person的,年龄乘34的最小值",
        "output": "with p as (select * from (VALUES('famale','Amily',2735),('male','孙宏',7816),('male','李雪',4346)) as t(gender,name,salary))MATCH (a:person WHERE a.salary = p.salary AND (a.name = '郑建聪')) -[e ]-(b:person) -[e2 ]-(c:person) RETURN MIN(c.age * 34) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(161,4720,'Alan'),(180,3010,'黄若涵'),(177,1700,'赵宏')作为请求表数据,属性分别为height,salary,name, 以属性salary作为相等条件,查找源点标签等于patient,边标签等于patient_accept_prescription的边,返回这些边的f0减848的值,和srcId乘145的和",
        "output": "with p as (select * from (VALUES(161,4720,'Alan'),(180,3010,'黄若涵'),(177,1700,'赵宏')) as t(height,salary,name))MATCH (a:patient WHERE a.salary = p.salary) -[e:patient_accept_prescription ]->(b) RETURN e.f0 - 848, SUM(e.srcId * 145) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找类型为company的点,返回74个;2: 找出76个名为赵建国的点认识的label为person的节点,且其年龄为空或id大于79;3: 查询类型为software_uses_software,且满足条件f1是true的边;4: 返回名为Bilibili的company;",
        "output": "查询语句为:1: match(a:company) return a limit 74;2: match(a where a.name='赵建国')-[e:person_knows_person]->(b:person where (b.age is null) or b.id > 79) return b limit 76;3: match(a)-[e:software_uses_software where e.f1 = true]->(b) return e;4: match(a:company where a.name = 'Bilibili') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 清华大学合作的公司有哪些",
        "output": "match(a:company)<-[e:cooperate]-(b:university where b.name='清华大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(99,184,'famale')作为请求表数据,属性分别为id,height,gender, 以属性height作为相等条件,查找和person杜若涵有person_friend_person关系的person,以及和person黄轩有person_family_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(99,184,'famale')) as t(id,height,gender))MATCH (a:person WHERE a.height = p.height AND (a.name = '杜若涵')) -[e:person_friend_person ]->(b:person) , (c:person WHERE c.name = '黄轩') -[e2:person_family_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前103个标签等于恋人的边",
        "output": "match(a)-[e:lover]->(b) return e limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和patient黄科有关的doctor,再查找和黄科accept的其他prescription,返回它们",
        "output": "match(a:patient where a.name = '黄科')-[e]-(b:doctor), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和处方有关联的药品节点,并根据其权重,id分组,返回权重,id,以及权重减权重的求和值",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.weight, b.id, SUM(b.weight - b.weight) group by b.weight, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有医生（源点）到处方（目标）的边，并且这些边都带有'creates'标签。",
        "output": "match(a:doctor)-[e:creates]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出prescription Prescription_456的标签等于relation的边,并根据srcId升序排列,返回156个",
        "output": "match(a:prescription where a.name = 'Prescription_456')-[e:relation]->(b) return b order by e.srcId asc limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出名为赵强和马国强的,类型是person的点公共的父母节点的名单;2: 查找标签为person_friend_person,并且满足条件目标点id减目标点id小于等于125.59的边;3: 查找和person韩建聪有关系的person节点,返回这些点的age,id,name;4: 给出与person徐红有关,且与person李建聪有关系的person节点;5: 找出类型是person的点,返回67个;6: 返回性别等于male,薪资大于7584的person认识的person的名称,以及这些person 认识的person的名称;7: 帮我查询全部与person有关系的person节点,且person节点的id大于85,并返回这些点的年龄减2的最小值,以及height的平均值对159取余的最大值;8: 请帮我查找和person有关联的person节点,并根据其身高分组,返回身高,以及id的最小值除id的值;",
        "output": "查询语句为:1: match(a:person where a.name='赵强')-[e:person_parent_person]->(b)<-[e2:person_parent_person]-(c:person where c.name='马国强') return b.name;2: match(a)-[e:person_friend_person where e.targetId - e.targetId <= 125.59]->(b) return e;3: match(a:person where a.name='韩建聪')-[e]-(b:person) return b.age, b.id, b.name;4: match(a:person where a.name='徐红')-[e:person_parent_person]-(b:person)-[e2:person_colleague_person]-(c:person where c.name='李建聪') return b;5: match(a:person) return a limit 67;6: match(a:person where a.gender = 'male' and a.salary > 7584)-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name;7: match(a:person)-[e]->(b:person where b.id > 85) return MIN(b.age - 2), MAX(AVG(b.height) % 159);8: match(a:person)-[e:person_colleague_person]-(b:person) return b.height, MIN(b.id) / b.id group by b.height;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person孙雪pay的person, 令person(a)的salary等于person(b)的salary,令person的age等于person的id加42的和,令person的age等于person的gender, 返回person(a)的age, person(b)的height",
        "output": "match(a:person where a.name='孙雪')-[e:pay]->(b:person) let a.salary = b.salary,let a.age = SUM(a.id + 42),let b.age = b.gender return a.age,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前91个类型是属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与标签'其他'存在关系且与评论'Comment_110'存在关系的电影院节点的大小。",
        "output": "match(a:tag where a.name='其他')-[e]->(b:cinema)<-[e2]-(c:comment where c.name='Comment_110') return b.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight除82的最大值",
        "output": "MAX(a.weight / 82)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与澳大利亚相关的城市，然后列出澳大利亚包含的其他城市，并将它们全部返回。",
        "output": "match(a:country where a.name = '澳大利亚')-[e]-(b:city), (a:country)-[e2:contain]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为账号,名为BIN的点,返回这些点的创建时间",
        "output": "match(a:account where a.name = 'BIN') return a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 145个用户节点与黄思思和Jimmy有关联。",
        "output": "match(a where a.name='黄思思')-[e]->(b:user)<-[e2]-(c where c.name='Jimmy') return b limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与韩红存在喜欢关系的人，以及这些人之间存在的认识关系的节点，并返回这些节点的身高。",
        "output": "match(a where a.name = '韩红')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与10个类型为person的节点有恋爱关系的person，以及与这些person有朋友关系的person。",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person) return c limit 10",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有id为84的person关联的person,和以支付关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 84)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我找出大学电子科技大学的伙伴的朋友的相关者;2: 帮我查询37个和标签等于部门的点有department_has_student关系的学生,且和这些学生有student_selects_course关系的课程;3: 查询university四川大学 has的department,返回department has的teacher的salary加9967的值 ;4: 找出前108个标签为department_has_student的边;5: 帮我查询id为40的课程关联的学生,和以拥有关系关联了这些学生的其他部门;6: 查询与department生物学院和计算机学院都存在department_has_teacher关系的点;",
        "output": "查询语句为:1: match(a:university where a.name='电子科技大学')-[e:partner]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d;2: match(a:department)-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return c limit 37;3: match(a:university where name = '四川大学')-[e:university_has_department]->(b:department)-[e2:department_has_teacher]->(c:teacher) return c.salary + 9967;4: match(a)-[e:department_has_student]->(b) return e limit 108;5: match(a:course where a.id = '40')-[e]-(b:student)<-[e2:department_has_student]-(c:department) return b,c;6: match(a:department where a.name='生物学院')-[e:department_has_teacher]->(b)<-[e2:department_has_teacher]-(c:department where c.name='计算机学院') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部book以name,name,price分组的id, 根据id升序排序",
        "output": "match(a:book) return a.id group by a.name, a.name, a.price order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找名叫做徐轩的人，返回他们的名字。",
        "output": "match(a:person where a.name = '徐轩') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与大学相关的部门，以及与其他大学有拥有关系的这些部门。",
        "output": "match(a:university where a.id = '197')-[e]-(b:department)<-[e2:has]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找repository has的pullRequest,返回其源点的stars除857加weight加284的值,以及目标点的changeFileNumber除167的值",
        "output": "match(a:repository)-[e:has]->(b:pullRequest) return a.stars / 857 + a.weight + 284, b.changeFileNumber / 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight对484取余的值",
        "output": "a.weight % 484",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为李宏的点的,id在48到63之间且创建时间不是2033年11月15日的相关者,返回这些相关者的名字,和边的权重,f0",
        "output": "match(a where a.name='李宏')-[e:relation]->(b where (b.id BETWEEN 48 AND 63) and b.createTime <> '2033-11-15') return b.name,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为person的所有点,并根据身高从大到小排列",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出与company华为和滴滴都存在company_cooperate_university关系的点;2: 请帮我找出城市属于的国家,返回其源点的人数减8891的值,以及目标点的id加99对694取余加57136减27001的值;3: 请帮我查找name是Bilibili或name不等于Bilibili的company cooperate的university的名称,以及这些university belong的city的名称;",
        "output": "查询语句为:1: match(a:company where a.name='华为')-[e:company_cooperate_university]->(b)<-[e2:company_cooperate_university]-(c:company where c.name='滴滴') return b;2: match(a:city)-[e:city_belong_country]->(b:country) return a.peopleNumber - 8891, b.id + 99 % 694 + 57136 - 27001;3: match(a:company where a.name = 'Bilibili' or a.name <> 'Bilibili')-[e:company_cooperate_university]->(b:university)-[e2:university_belong_city]->(c:city) return b.name as b_name, c.name as c_name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型为person的点有喜欢关系的person,且和这些person有支付关系的person,且和这些person有喜欢关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person)-[e3:likes]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与名为黄思琪的人有直接或间接友谊关系的评论。",
        "output": "match(a:person where n.name=黄思琪)-[e:friend]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出用户黄建聪发布的帖子,被其他论坛包含的数量",
        "output": "match(a:user where a.name='黄建聪')-[e:user_publish_post]->(b:post)<-[e2:forum_contain_post]-(c:forum) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询和电影院有关联的电影节点,并根据其id,价值,类别分组,返回id,价值,类别,以及id对19取余加id的值;2: 请帮我找出所有cinema以name,address分组的size, 根据size升序排序;3: 请帮我找出标签为标签的点,并根据价值升序排列;4: 找出名为UME的,名字不是神探狄仁杰且价值在740到899之间的相关者,返回这些相关者的价值,和边的f0,权重,源点id;5: 查询9个value大于等于91或id小于52或value不等于447的film,根据id从大到小排列;6: 请帮我找出和标签动作有关的评论,称为X,再请帮我找出和这个X有关联的其他电影,以及和X有关联的电影;7: 请帮我查找标签等于film的点;8: 帮我查询197个名字不是大众影院的电影院,根据id从小到大排列;9: 返回和cinema好视影院有cinema_releases_film关系的film,以及和film复仇者联盟有film_has_tag关系的tag,将它们都返回;",
        "output": "查询语句为:1: match(a:cinema)-[e:cinema_releases_film]-(b:film) return b.id, b.value, b.category, b.id % 19 + b.id group by b.id, b.value, b.category;2: match(a:cinema) return a.size group by a.name, a.address order by a.size asc;3: match(a:tag) return a order by a.value asc;4: match(a where a.name='UME')-[e:relation]->(b where b.name <> '神探狄仁杰' and (b.value BETWEEN 740 AND 899)) return b.value,e.f0, e.weight, e.srcId;5: match(a:film where a.value >= 91 or a.id < 52 or a.value <> 447) return a order by a.id desc limit 9;6: match(a:tag where a.name = '动作')-[e]-(b:comment), (b:comment)-[e2]-(c:film),(b:comment)-[e3]-(d:film) return a, b, c, d;7: match(a:film) return a;8: match(a:cinema where a.name <> '大众影院') return a order by a.id asc limit 197;9: match(a:cinema where a.name = '好视影院')-[e:cinema_releases_film]->(b:film),(c:film where c.name = '复仇者联盟')-[e2:film_has_tag]->(d:tag)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前135个人数不等于618的公司",
        "output": "match(a:company where a.peopleNumber <> 618) return a limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查询源点id小于58,边label为publisher_publish_book,且满足条件targetId小于等于159的边,返回这些边的srcId减25对76取余的数量;2: 找出132个和标签为书的点有book_refers_book关系的书,以及和这些书有book_refers_book关系的书;3: 帮我查询书悲惨世界的所有类型是引用的边,并根据权重降序排列,返回71个;4: 请帮我找出全部与编辑有关系的编辑节点,且编辑节点的身高除168对191取余除id除196加7878乘166减11的平均值不是150,并返回这些点的height的个数减身高的平均值,以及薪资对7479取余的平均值;5: 请帮我找出id为142的编辑关联的书,和以撰写关系关联了这些书的其他作家;6: 帮我查询reader likes的book,返回其源点的salary除5781除45的值,以及目标点的id对94取余的最大值;7: 帮我查询所有和reader杜若涵之间有reader_likes_book关系的book;8: 请帮我找出书的三角的环,边label为book_refers_book, 并返回这些点的id;",
        "output": "查询语句为:1: match(a where a.id < 58)-[e:publisher_publish_book where e.targetId <= 159]->(b) return COUNT(e.srcId - 25 % 76);2: match(a:book)-[e:book_refers_book]->(b:book)-[e2:book_refers_book]->(c:book) return c limit 132;3: match(a:book where a.name = '悲惨世界')-[e:book_refers_book]->(b) return b order by e.weight desc limit 71;4: match(a:publisher)-[e]->(b:publisher where AVG((b.height / 168 % 191 / b.id / 196 + 7878) * 166 - 11) <> 150) return AVG(COUNT(b.height) - b.height), AVG(b.salary % 7479);5: match(a:publisher where a.id = '142')-[e]-(b:book)<-[e2:author_write_book]-(c:author) return b,c;6: match(a:reader)-[e:reader_likes_book]->(b:book) return a.salary / 5781 / 45, MAX(b.id % 94);7: match(a:reader where a.name='杜若涵')-[e:reader_likes_book]->(b:book) return b;8: match(a:book)-[e:book_refers_book]->(b)-[e2:book_refers_book]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是事项的点,返回178个",
        "output": "match(a:issue) return a limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出合并请求属于的仓库,返回其源点的id乘95的最大值,以及目标点的权重乘577的和",
        "output": "match(a:pullRequest)-[e:belong]->(b:repository) return MAX(a.id * 95), SUM(b.weight * 577)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与论坛推特有关系的论坛, 返回和这些论坛有关联的帖子的,id的最大值除4的值",
        "output": "match(a:forum where a.name= '推特')-[e]-(b:forum)-[e2]-(c:post) return MAX(c.id) / 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为孙雪的点relates的person,并对这些person的id进行求和",
        "output": "match(a where a.name='孙雪')-[e:relates]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 返回和书有关联的书节点,并根据其创建时间分组,返回创建时间,以及id乘96除94的平均值;2: 找出从reader吴建国出发,经过label为reader_likes_book的边,走2到4度到达的book点;3: 查找70个age为空的reader,根据id升序排列;",
        "output": "查询语句为:1: match(a:book)-[e:book_refers_book]-(b:book) return b.createTime, AVG(b.id * 96 / 94) group by b.createTime;2: match(a:reader where a.name='吴建国')-[e:reader_likes_book]->{2,4}(b:book) return b;3: match(a:reader where (a.age is null)) return a order by a.id asc limit 70;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找185个和标签等于公司的点有雇佣关系的person,并且和这些person有认识关系的person",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:knows]->(c:person) return c limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表200,827,755,348, 以属性id作为相等条件,找出全部与论坛CSDN有关系的用户的薪资",
        "output": "with p as (select * from (VALUES(200),(827),(755),(348)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = 'CSDN')) -[e ]-(b:user) RETURN b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查询和country美国有关的university,称为X,再查询和这个X有关联的其他university,以及和X有关联的university",
        "output": "match(a:country where a.name = '美国')-[e]-(b:university), (b:university)-[e2]-(c:university),(b:university)-[e3]-(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 找出名为杜轩的person;2: 请帮我找出所有id为198的person关联的person,和以pay关系关联了这些person的其他person;3: 查询person的相关者,或其相关者的相关者;4: 查询从person韩雪出发,经过标签为person_pay_person的边,走2跳或3跳到达的person点;5: 请帮我查找49个名为Amily的点likes的label为person的节点,且其age小于50或salary大于等于3055;6: 找出与person吴轩有person_pay_person关系的2度的环;7: 给出类型是person的点,并根据名字升序排列;8: 请帮我查找person认识的person,返回其源点的身高除192的数量,以及目标点的id减63的值;",
        "output": "查询语句为:1: match(a:person where a.name = '杜轩') return a;2: match(a:person where a.id = '198')-[e]-(b:person)<-[e2:person_pay_person]-(c:person) return b,c;3: match(a:person)-[e:relation]->{1,2}(b) return b;4: match(a:person where a.name='韩雪')-[e:person_pay_person]->{2,3}(b:person) return b;5: match(a where a.name='Amily')-[e:person_likes_person]->(b:person where b.age < 50 or b.salary >= 3055) return b limit 49;6: match(a:person where name = '吴轩')-[e:person_pay_person]->{1,1}(b)->(a) return a.id, b.id as b_id;7: match(a:person) return a order by a.name asc;8: match(a:person)-[e:person_knows_person]->(b:person) return COUNT(a.height / 192), b.id - 63;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以60,763,359,814,125作为请求点id, 以属性id作为相等条件,帮我查询全部源点标签等于用户,边标签等于user_creates_issue的边,返回这些边的目标点id除98加权重加权重的值,和权重除权重的最小值",
        "output": "with p as (select * from (VALUES(60),(763),(359),(814),(125)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_creates_issue ]->(b) RETURN e.targetId / 98 + e.weight + e.weight, MIN(e.weight / e.weight) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型为部门,边类型为拥有,并且满足条件目标点id在8到38之间的边",
        "output": "match(a:department)-[e:has where (e.targetId BETWEEN 8 AND 38)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回159个age在18到99之间或name不是周国强的person,根据name从小到大排列;2: 请帮我找出与名为赵国强和吴强的点共同relates的,标签等于person的节点;3: 查找person杜建聪 关联的person,返回person 认识的person的id减91的值 ;4: 请帮我找出103个height在177到188之间的person,根据name升序排列;5: 计算所有person的身高乘162的值;6: 给出142个与周宏和黄梅都存在关系的person节点;7: 请帮我找出173个与徐伟和李国强都存在关系的person节点;8: 找出与person何建国有person_friend_person关系的1度的环;",
        "output": "查询语句为:1: match(a:person where (a.age BETWEEN 18 AND 99) or a.name <> '周国强') return a order by a.name asc limit 159;2: match(a where a.name = '赵国强')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '吴强') return b;3: match(a:person where name = '杜建聪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c.id - 91;4: match(a:person where (a.height BETWEEN 177 AND 188)) return a order by a.name asc limit 103;5: match(a:person) return a.height * 162;6: match(a where a.name='周宏')-[e]->(b:person)<-[e2]-(c where c.name='黄梅') return b limit 142;7: match(a where a.name='徐伟')-[e]->(b:person)<-[e2]-(c where c.name='李国强') return b limit 173;8: match(a:person where name = '何建国')-[e:person_friend_person]->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和买家马国强有咨询关系的卖家,再帮我查询以取消关系关联了马国强的订单",
        "output": "match(a:buyer where a.name = '马国强')-[e:consult]->(b:seller),(a:buyer where a.name = '马国强')<-[e2:cancel]-(c:orders)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person赵红的全部label为family的边,并根据srcId升序排列,返回4个",
        "output": "match(a:person where a.name = '赵红')-[e:family]->(b) return b order by e.srcId asc limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与韩国强存在属于关系的部门,部门与医生存在拥有关系的点,返回这些点的薪资",
        "output": "match(a where a.name = '韩国强')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点id小于55,目标点id为62,且类型为拥有的边",
        "output": "match(a where a.id < 55)-[e:has]->(b where b.id = 62) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与华为有合作关系的大学，并返回这些大学所在城市的名字。",
        "output": "match(a where a.name = '华为')-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 找出前3个标签为city_belong_country的边;2: 找出名为纽约和北京的,标签为city的点公共的friend节点的名单;3: 给出全部源点类型是company,目标点类型是university,类型是company_cooperate_university的边;4: 请帮我查找名为微软的company;5: 给出所有和国家越南有2到5跳关系的城市;6: 给出和城市伦敦有city_contain_university关系的大学,以及和城市北京有city_contain_company关系的公司,将它们都返回;7: 返回与university清华大学有关系的country, 返回和这些country有关联的country的,peopleNumber减71350的值;",
        "output": "查询语句为:1: match(a)-[e:city_belong_country]->(b) return e limit 3;2: match(a:city where a.name='纽约')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='北京') return b.name;3: match(a:company)-[e:company_cooperate_university]->(b:university) return e;4: match(a:company where a.name = '微软') return a;5: match(a:country where a.name='越南')-[e]->{2,5}(b:city) return b;6: match(a:city where a.name = '伦敦')-[e:city_contain_university]->(b:university),(c:city where c.name = '北京')-[e2:city_contain_company]->(d:company)return a, b, c, d;7: match(a:university where a.name= '清华大学')-[e]-(b:country)-[e2]-(c:country) return c.peopleNumber - 71350;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person的三角的环,边类型是申请, 并返回这些点的id",
        "output": "match(a:person)-[e:apply]->(b)-[e2:apply]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与买家周建聪有咨询关系的3度以内的环",
        "output": "match(a:buyer where name = '周建聪')-[e:consult]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和订单Order_370有关的买家,再返回和Order_370包含的其他商品,返回它们",
        "output": "match(a:orders where a.name = 'Order_370')-[e]-(b:buyer), (a:orders)-[e2:contain]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询和person张建国有person_commits_software关系的software,以及和company华为有company_creates_software关系的software,将它们都返回;2: 帮我查询和软件有关联的软件节点,并根据其开源,价值,星数分组,返回开源,价值,星数,以及星数乘436的最小值;3: 返回person属于的公司,返回其源点的id加84的值,以及目标点的人数乘523的求和值;4: 请帮我找出和公司谷歌有关的公司,称为X,再请帮我找出和这个X有关联的其他公司,以及和X有关联的软件;5: 查找源点label为company,边label为company_employee_person的边,返回这些边的weight的和乘190.44的值,和srcId加136的数量;6: 请帮我查找源点价值大于等于289,名字不是华为,或人数不为空,边类型为company_employee_person,且f0小于等于508或f1不是true,且源点id不为空的边,返回这些边的权重乘139.33的最大值;7: 查询和person李雪有person_buy_software关系的软件,以及和person杜月有person_knows_person关系的person,将它们都返回;8: 返回和person有关联的软件节点,并根据其星数,价值,开源分组,返回星数,价值,开源,以及价值对983取余的值;9: 返回全部和person郑轩有关系的公司节点,返回这些点的人数,名字;",
        "output": "查询语句为:1: match(a:person where a.name = '张建国')-[e:person_commits_software]->(b:software),(c:company where c.name = '华为')-[e2:company_creates_software]->(d:software)return a, b, c, d;2: match(a:software)-[e:software_uses_software]-(b:software) return b.openSource, b.value, b.stars, MIN(b.stars * 436) group by b.openSource, b.value, b.stars;3: match(a:person)-[e:person_belong_company]->(b:company) return a.id + 84, SUM(b.peopleNumber * 523);4: match(a:company where a.name = '谷歌')-[e]-(b:company), (b:company)-[e2]-(c:company),(b:company)-[e3]-(d:software) return a, b, c, d;5: match(a:company)-[e:company_employee_person]->(b) return SUM(e.weight) * 190.44, COUNT(e.srcId + 136);6: match(a where (a.value >= 289 and a.name <> '华为') or (a.peopleNumber is not null))-[e:company_employee_person where (e.f0 <= 508 or e.f1 <> true) and (e.srcId is not null)]->(b) return MAX(e.weight * 139.33);7: match(a:person where a.name = '李雪')-[e:person_buy_software]->(b:software),(c:person where c.name = '杜月')-[e2:person_knows_person]->(d:person)return a, b, c, d;8: match(a:person)-[e:person_buy_software]-(b:software) return b.stars, b.value, b.openSource, b.value % 983 group by b.stars, b.value, b.openSource;9: match(a:person where a.name='郑轩')-[e]-(b:company) return b.peopleNumber, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询和城市有关联的国家节点,并根据其id,价值,人数分组,返回id,价值,人数,以及id对id取余除960的和;2: 给出和大学南京大学有关的国家,称为X,再给出和这个X有关联的其他城市,以及和X有关联的国家;3: 查询与大学电子科技大学有university_belong_city关系的3度的环;4: 查询和公司有关联的大学节点,并根据其等级,名字分组,返回等级,名字,以及等级乘2的数量;5: 查找和company谷歌有关的university,再查找和谷歌company_belong_city的其他city,返回它们;",
        "output": "查询语句为:1: match(a:city)-[e:city_belong_country]-(b:country) return b.id, b.value, b.peopleNumber, SUM(b.id % b.id / 960) group by b.id, b.value, b.peopleNumber;2: match(a:university where a.name = '南京大学')-[e]-(b:country), (b:country)-[e2]-(c:city),(b:country)-[e3]-(d:country) return a, b, c, d;3: match(a:university where name = '电子科技大学')-[e:university_belong_city]->{2,2}(b)->(a) return a.id, b.id as b_id;4: match(a:company)-[e:company_cooperate_university]-(b:university) return b.level, b.name, COUNT(b.level * 2) group by b.level, b.name;5: match(a:company where a.name = '谷歌')-[e]-(b:university), (a:company)-[e2:company_belong_city]->(c:city) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和编辑周建国有关的读者,称为X,再请帮我查找和这个X有关联的其他编辑,以及和X有关联的作家",
        "output": "match(a:publisher where a.name = '周建国')-[e]-(b:reader), (b:reader)-[e2]-(c:publisher),(b:reader)-[e3]-(d:author) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person的1度以内的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出film的三角的环,边类型是film_has_tag, 并返回这些点的id",
        "output": "match(a:film)-[e:film_has_tag]->(b)-[e2:film_has_tag]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为王月的doctor,以及与其有关的department,并返回王月的name和这些department的name",
        "output": "match(a:doctor where name = '王月')-[e]-(b:department) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出评论Comment_177的类型是相关者的边,并根据源点id降序排列,返回55个",
        "output": "match(a:comment where a.name = 'Comment_177')-[e:relation]->(b) return b order by e.srcId desc limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为周建国和周思思的点共同教的,类型为课程的节点",
        "output": "match(a where a.name = '周建国')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '周思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我查找与department放射科有关系的medicine, 返回和这些medicine有关联的patient的,id对48取余的值;2: 请帮我查找名为Prescription_117的处方;3: 请帮我找出id为10的点的薪资,id,年龄;4: 返回department急诊部 has的doctor,返回doctor creates的prescription的weight的平均值加weight减75的数量 ;5: 找出源点类型为病人,边类型为patient_accept_prescription,且f1不是false的边;6: 给出和医生有关联的部门节点,并根据其权重,地址分组,返回权重,地址,以及权重加权重的和;7: 请帮我查找类型为药品,名为999感冒灵的点,返回这些点的名字,价格,id;",
        "output": "查询语句为:1: match(a:department where a.name= '放射科')-[e]-(b:medicine)-[e2]-(c:patient) return c.id % 48;2: match(a:prescription where a.name = 'Prescription_117') return a;3: match(a where a.id = '10') return a.salary, a.id, a.age;4: match(a:department where name = '急诊部')-[e:department_has_doctor]->(b:doctor)-[e2:doctor_creates_prescription]->(c:prescription) return COUNT(AVG(c.weight) + c.weight - 75);5: match(a:patient)-[e:patient_accept_prescription where e.f1 <> false]->(b) return e;6: match(a:doctor)-[e:doctor_belong_department]-(b:department) return b.weight, b.address, SUM(b.weight + b.weight) group by b.weight, b.address;7: match(a:medicine where a.name = '999感冒灵') return a.name, a.price, a.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,id,salary, 数据为('famale',8,7694),('famale',3,2132), 以属性salary作为相等条件,找出id为42的company有关的person的relation, 再找出和person有关系的friend",
        "output": "with p as (select * from (VALUES('famale',8,7694),('famale',3,2132)) as t(gender,id,salary))MATCH (a:company WHERE a.salary = p.salary AND (id = '42')) -[e ]-(b:person) -[e2:relation ]->(c) , (b:person) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家郑宏撰写的书,以及喜欢这些书的读者, 令书的名字等于读者的薪资对薪资取余乘163, 返回作家的id,书的创建时间,读者的id",
        "output": "match(a:author where name = '郑宏')-[e:write]->(b:book)<-[e2:likes]-(c:reader) let b.name = c.salary % c.salary * 163 return a.id,b.createTime,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与卖家马伟有回答关系的1跳以内的环",
        "output": "match(a:seller where name = '马伟')-[e:ask]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从company滴滴出发,经过标签等于cooperate的边,走3跳或4跳到达的university点",
        "output": "match(a:company where a.name='滴滴')-[e:cooperate]->{3,4}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person马红有关的软件,再帮我查询和马红属于的其他公司,返回它们",
        "output": "match(a:person where a.name = '马红')-[e]-(b:software), (a:person)-[e2:belong]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age的最小值对age取余乘198的值",
        "output": "MIN(a.age) % a.age * 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(945,2,'北京大学'),(893,3,'北京大学'),(991,1,'中国科技大学')作为请求表数据,属性分别为value,level,name, 以属性level作为相等条件,帮我查询前161个value不是195或peopleNumber大于等于2617或name不是东京的city",
        "output": "with p as (select * from (VALUES(945,2,'北京大学'),(893,3,'北京大学'),(991,1,'中国科技大学')) as t(value,level,name))MATCH (a:city WHERE a.level = p.level AND (a.value <> 195 OR a.peopleNumber >= 2617 OR a.name <> '东京')) RETURN a LIMIT 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出88个与吴月和韩科都存在关系的书或读者节点",
        "output": "match(a where a.name='吴月')-[e]->(b:book | reader)<-[e2]-(c where c.name='韩科') return b limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为21的account关联的account,和以deposit关系关联了这些account的其他loan",
        "output": "match(a:account where a.id = 21)-[e]-(b:account)<-[e2:deposit]-(c:loan) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 请帮我查找与卖家有关系的卖家节点,且卖家节点的名字是Amily,并返回这些点的薪资除7068的值,以及薪资乘薪资加4825除薪资的最小值;2: 帮我查询和buyer吴若涵有buyer_creates_orders关系的orders,再帮我查询以buyer_look_goods关系关联了吴若涵的goods;3: 返回源点age小于等于60且height不为空且id小于等于7,目标点value小于等于447,且label为buyer_creates_orders的边;4: 给出被订单Order_244包含的商品;5: 查找名为李月的,价格大于141.33的相关者,返回这些相关者的id,和边的源点id,f0,f1;6: 请帮我查找和买家黄思琪有关的订单,称为X,再请帮我查找和这个X有关联的其他订单,以及和X有关联的买家;7: 给出名为郑思思的买家,以及与其有关的买家,并返回郑思思的薪资和这些买家的性别;8: 返回名为Order_242和Order_341的,标签等于订单的点公共的朋友节点的名单;",
        "output": "查询语句为:1: match(a:seller)-[e]->(b:seller where b.name = 'Amily') return b.salary / 7068, MIN((b.salary * b.salary + 4825) / b.salary);2: match(a:buyer where a.name = '吴若涵')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '吴若涵')<-[e2:buyer_look_goods]-(c:goods)return a, b, c;3: match(a where a.age <= 60 and (a.height is not null) and a.id <= 7)-[e:buyer_creates_orders]->(b where b.value <= 447) return e;4: match(a:goods)<-[e:orders_contain_goods]-(b:orders where b.name='Order_244') return a, b;5: match(a where a.name='李月')-[e:relation]->(b where b.price > 141.33) return b.id,e.srcId, e.f0, e.f1;6: match(a:buyer where a.name = '黄思琪')-[e]-(b:orders), (b:orders)-[e2]-(c:orders),(b:orders)-[e3]-(d:buyer) return a, b, c, d;7: match(a:buyer where name = '郑思思')-[e]-(b:buyer) return a.salary, b.gender;8: match(a:orders where a.name='Order_242')-[e:friend]->(b)<-[e2:friend]-(c:orders where c.name='Order_341') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,名字,id分组,计算id加98的值",
        "output": "return a.id + 98 group by a.weight, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为164的person关联的person,和以喜欢关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 164)-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 找出与buyer韩梅有关,且与goods矿泉水有关系的orders节点;2: 查询所有和orders Order_401有关系的goods节点,返回这些点的name,value,category;3: 请帮我查找和卖家马思琪有关的买家,再请帮我查找和马思琪seller_has_goods的其他商品,返回它们;4: 请帮我找出与seller杜若涵有关系的buyer, 返回和这些buyer有关联的seller的,height乘height的平均值;5: 请帮我查找以has关系关联了goods手机的seller;6: 查询与订单有关系的订单节点,且订单节点的价值为空,并返回这些点的value的平均值乘87的值,以及id减34的值;",
        "output": "查询语句为:1: match(a:buyer where a.name='韩梅')-[e:buyer_cancel_orders]-(b:orders)-[e2:orders_contain_goods]-(c:goods where c.name='矿泉水') return b;2: match(a:orders where a.name='Order_401')-[e]-(b:goods) return b.name, b.value, b.category;3: match(a:seller where a.name = '马思琪')-[e]-(b:buyer), (a:seller)-[e2:seller_has_goods]->(c:goods) return a, b, c;4: match(a:seller where a.name= '杜若涵')-[e]-(b:buyer)-[e2]-(c:seller) return AVG(c.height * c.height);5: match(a:goods where a.name='手机')<-[e:seller_has_goods]-(b:seller) return b;6: match(a:orders)-[e]->(b:orders where (b.value is null)) return AVG(b.value) * 87, b.id - 34;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被订单包含数量大于168的商品,记为relationCount,再查询这些商品包含的买家",
        "output": "match(a:goods) let a.relationCount = SUM((a:goods)<-[e:contain]-(b:orders) => b.id) match(a where a.relationCount > 168)-[e2:contain]->(c:buyer) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与buyer郑雪有关系的orders, 返回和这些orders有关联的goods的,sellerNumber乘sellerNumber的值",
        "output": "match(a:buyer where a.name= '郑雪')-[e]-(b:orders)-[e2]-(c:goods) return c.sellerNumber * c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名叫周轩的用户。",
        "output": "match(a:user where a.name = '周轩') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出用户的1跳的环",
        "output": "match(a:user)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出名为泰坦尼克号的点has的所有tag,并对这些点的name进行求和",
        "output": "match(a where a.name='泰坦尼克号')-[e:film_has_tag]->(b:tag) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以895作为请求点id, 以属性id作为相等条件,请帮我查找所有部门以id,大小分组的价值, 根据价值从小到大排序",
        "output": "with p as (select * from (VALUES(895)) as t(id)) MATCH (a:department WHERE a.id = p.id) RETURN a.value GROUP BY a.id, a.size ORDER BY a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司滴滴有关的账号,再找出和滴滴申请的其他贷款,返回它们",
        "output": "match(a:company where a.name = '滴滴')-[e]-(b:account), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person认识的person,返回其源点的id乘79的数量,以及目标点的薪资减5053的最大值",
        "output": "match(a:person)-[e:knows]->(b:person) return COUNT(a.id * 79), MAX(b.salary - 5053)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减id的值",
        "output": "a.id - a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出用户王思琪喜欢的帖子,以及包含这些帖子的论坛",
        "output": "match(a:user where name = '王思琪')-[e:likes]->(b:post)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与陈梅有雇佣关系的个人，再给出与陈梅有喜欢的关系的个人。",
        "output": "match(a:person where a.name = '陈梅')-[e:pay]->(b:person),(a:person where a.name = '陈梅')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出75个height在159到199之间,gender不等于famale的person,根据id降序排列",
        "output": "match(a:person where (a.height BETWEEN 159 AND 199) and a.gender <> 'famale') return a order by a.id desc limit 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 帮我查询前75个类型是buyer_look_goods的边;2: 查找与buyer徐思琪存在buyer_creates_orders关系,且与goods矿泉水存在orders_contain_goods关系的orders节点，返回这些orders的name,及buyer徐思琪的name,及goods矿泉水的price;3: 帮我查询buyer的3跳以内的环;4: 返回被seller吴国强has的goods;",
        "output": "查询语句为:1: match(a)-[e:buyer_look_goods]->(b) return e limit 75;2: match(a:buyer where a.name='徐思琪')-[e:buyer_creates_orders]->(b:orders)<-[e2:orders_contain_goods]-(c:goods where c.name='矿泉水') return a.name,b.name,c.price;3: match(a:buyer)->{0,2}(b)->(a) return a.id, b.id as b_id;4: match(a:goods)<-[e:seller_has_goods]-(b:seller where b.name='吴国强') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 返回和作家周建聪有3到6跳关系的读者;2: 查询所有和book三体有1到3跳关系的author;3: 帮我查询名为徐建国的作家,以及与其有关的书,并返回徐建国的性别和这些书的id;4: 查询全部id为153的reader关联的book,和以knows关系关联了这些book的其他book;",
        "output": "查询语句为:1: match(a:author where a.name='周建聪')-[e]->{3,6}(b:reader) return b;2: match(a:book where a.name='三体')-[e]->{1,3}(b:author) return b;3: match(a:author where name = '徐建国')-[e]-(b:book) return a.gender, b.id;4: match(a:reader where a.id = '153')-[e]-(b:book)<-[e2:knows]-(c:book) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出company cooperate的university, 令university的name的值等于containuniversity的city的value的和, 再查找university cooperate的company",
        "output": "match(a:company)-[e:cooperate]->(b:university) let b.name = SUM((b:university)<-[e2:contain]-(c:city) => c.value) match(b:university)-[e3:cooperate]->(d:company) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按照身高降序，找出所有按id、性别和薪资分组的人的身高。",
        "output": "match(a:person) return a.height group by a.id, a.gender, a.salary order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与病人马建国相关的所有部门，并获取他所接受的所有处方。",
        "output": "match(a:patient where a.name = '马建国')-[e]-(b:department), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点name的和为157或name不是韩伟或gender为male,边标签等于knows,且满足条件targetId大于等于189或weight为空的边,返回这些边的targetId的最大值减90的最小值",
        "output": "match(a where SUM(a.name) = 157 or a.name <> '韩伟' or a.gender = 'male')-[e:knows where e.targetId >= 189 or (e.weight is null)]->(b) return MIN(MAX(e.targetId) - 90)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为person的点,返回147个",
        "output": "match(a:person) return a limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找30个与何若涵和黄雪都存在关系的person节点",
        "output": "match(a where a.name='何若涵')-[e]->(b:person)<-[e2]-(c where c.name='黄雪') return b limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算年龄除年龄对195取余的最小值",
        "output": "return MIN(a.age / a.age % 195) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person韩月之间有knows关系的person",
        "output": "match(a:person where a.name='韩月')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为Alice的节点拥有的商品或订单",
        "output": "match(a where a.name='Alice')-[e:has]->(b:goods | orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为周思琪和李月的,类型为person的点公共的partner节点的名单",
        "output": "match(a:person where a.name='周思琪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出喜欢书计算机网络的读者,和这些读者喜欢的书",
        "output": "match(a:book where name = '计算机网络')<-[e:likes]-(b:reader)-[e2:likes]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person有关系的person节点,且person节点的salary小于7609,并返回这些person的age除87除9207减4215的值,以及person的salary乘salary的最小值",
        "output": "match(a:person)-[e]->(b:person where b.salary < 7609) return b.age / 87 / 9207 - 4215, MIN(b.salary * b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询和account Light有account_repay_loan关系的loan,以及和loan defaultName有loan_deposit_account关系的account,将它们都返回",
        "output": "match(a:account where a.name = 'Light')-[e:account_repay_loan]->(b:loan),(c:loan where c.name = 'defaultName')-[e2:loan_deposit_account]->(d:account)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与浙江大学有合作关系的公司，以及包含韩国的 city，并将它们全部返回。",
        "output": "match(a:university where a.name = '浙江大学')-[e:cooperate]->(b:company),(c:country where c.name = '韩国')-[e2:contain]->(d:city) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为JavaGuid的repository,以及与其有关的pullRequest,并返回JavaGuid的id和这些pullRequest的name",
        "output": "match(a:repository where name = 'JavaGuid')-[e]-(b:pullRequest) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找与订单Order_179有关系的买家的薪资",
        "output": "match(a:orders where a.name='Order_179')-[e]-(b:buyer) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为李月和周月的点共同投资的,label为公司的节点",
        "output": "match(a where a.name = '李月')-[e:invest]->(b:company)<-[e2:invest]-(c where c.name = '周月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找129个与马宏和赵国强都存在关系的课程节点",
        "output": "match(a where a.name='马宏')-[e]->(b:course)<-[e2]-(c where c.name='赵国强') return b limit 129",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与买家郑建国有查看关系的1跳以内的环",
        "output": "match(a:buyer where name = '郑建国')-[e:look]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘24的值",
        "output": "a.id * 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出论坛包含的用户,返回其源点的value的数量对858取余的数量,以及目标点的身高对身高取余的值",
        "output": "match(a:forum)-[e:contain]->(b:user) return COUNT(COUNT(a.value) % 858), b.height % b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从forum中国军事论坛出发,经过类型为contain的边,走3到6度到达的user点",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:contain]->{3,6}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回184个名字为法学院的部门,根据价值从大到小排列",
        "output": "match(a:department where a.name = '法学院') return a order by a.value desc limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找7个与Bilibili和字节都存在关系的person或company或software节点",
        "output": "match(a where a.name='Bilibili')-[e]->(b:person | company | software)<-[e2]-(c where c.name='字节') return b limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找大学的三角的环,边标签为合作, 并返回这些点的id",
        "output": "match(a:university)-[e:cooperate]->(b)-[e2:cooperate]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为部门的全部点,并根据价值升序排列",
        "output": "match(a:department) return a order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person喜欢的person, 令person(b)的薪资的值等于喜欢person的person的id的数量, 再查找person认识的person",
        "output": "match(a:person)-[e:likes]->(b:person) let b.salary = COUNT((b:person)<-[e2:likes]-(c:person) => c.id) match(b:person)-[e3:knows]->(d:person) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵强和马建国的共同相关者，共有46人。",
        "output": "match(a:person where a.name='赵强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='马建国') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出7个名为Redis的点uses的类型是software的节点,且其id小于60",
        "output": "match(a where a.name='Redis')-[e:uses]->(b:software where b.id < 60) return b limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找赵强这个人。",
        "output": "match(a:person where a.name = '赵强') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出卖家陈思琪回答的买家节点查看的商品",
        "output": "match(a:seller where a.name = '陈思琪')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按权重对处方进行分组，并按照降序排列权重。",
        "output": "match(a:prescription) return a.weight group by a.weight order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与类型为'person'的点有'parent'关系的'person'，以及这些'person'的'parent'关系，以及这些'person'的'colleague'关系。",
        "output": "match(a:person)-[e:parent]->(b:person)-[e2:parent]->(c:person)-[e3:colleague]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出王轩创建的评论",
        "output": "match(a:comment)<-[e:creates]-(b:person where b.name='王轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值乘80的值",
        "output": "MAX(a.id) * 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,isBlock,createTime分组,计算id减97的最大值",
        "output": "return MAX(a.id - 97) group by a.value, a.isBlock, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询黄思琪和孙雪之间存在喜欢关系的共同点。",
        "output": "match(a:person where a.name='黄思琪')-[e:likes]->(b)<-[e2:likes]-(c:person where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减40的最小值",
        "output": "MIN(a.id - 40)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关的人，或者这些人再往上追溯的关联人员",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回标签为医生的所有点,并根据id降序排列",
        "output": "match(a:doctor) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,srcId,targetId, 数据为(131.26,164,181),(110.66,34,162), 源点的srcId等于输入表srcId,找出与名为赵伟和王建国的点共同knows的,类型为author的节点",
        "output": "with p as (select * from (VALUES(131.26,164,181),(110.66,34,162)) as t(weight,srcId,targetId))MATCH (a WHERE a.srcId = p.srcId AND (a.name = '赵伟')) -[e:author_knows_author ]->(b:author) <-[e2:author_knows_author ]-(c WHERE c.name = '王建国') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部帖子以创建时间,id,语言分组的字数, 根据字数从大到小排序",
        "output": "match(a:post) return a.wordCount group by a.createTime, a.id, a.lang order by a.wordCount desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight的求和值对18取余的和",
        "output": "SUM(SUM(a.weight) % 18)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除99的值",
        "output": "a.age / 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回20个age减80大于等于28的author,根据age升序排列",
        "output": "match(a:author where a.age - 80 >= 28) return a order by a.age asc limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与person节点关联的account节点的name、createTime和lastLoginTime,并按组分组。",
        "output": "match(a:person)-[e:own]-(b:account) return b.name, b.createTime, b.lastLoginTime group by b.name, b.createTime, b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 找出和person有关联的person节点,并根据其id分组,返回id,以及年龄乘年龄的值;2: 给出id为188的person有关的person的伙伴, 再给出和person有关系的伙伴;3: 帮我查询全部韩建聪的点knows的person,然后帮我查询韩建聪被pay的person,一起返回;4: 找出与person吴雪有关系的person, 返回和这些person有关联的person的,id除32除薪资的数量;5: 找出id为179的点的gender;6: 返回被person赵雪knows的person;7: 给出马雪的点knows的person,然后给出马雪被knows的person,一起返回;8: 找出被person赵思思认识的person;",
        "output": "查询语句为:1: match(a:person)-[e:person_pay_person]-(b:person) return b.id, b.age * b.age group by b.id;2: match(a:person where id = '188')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d;3: match(a where a.name = '韩建聪')-[e:person_knows_person]->(b:person),(a where a.name = '韩建聪')<-[e2:person_pay_person]-(c:person) return a, b, c;4: match(a:person where a.name= '吴雪')-[e]-(b:person)-[e2]-(c:person) return COUNT(c.id / 32 / c.salary);5: match(a where a.id = '179') return a.gender;6: match(a:person)<-[e:person_knows_person]-(b:person where b.name='赵雪') return a, b;7: match(a where a.name = '马雪')-[e:person_knows_person]->(b:person),(a where a.name = '马雪')<-[e2:person_knows_person]-(c:person) return a, b, c;8: match(a:person)<-[e:person_knows_person]-(b:person where b.name='赵思思') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签为公司,目标点标签为城市,标签为公司或大学或城市的边",
        "output": "match(a:company)-[e:company | university | city]->(b:city) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为95的点的id",
        "output": "match(a where a.id = 95) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资减8867减8880的值",
        "output": "a.salary - 8867 - 8880",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询郑梅和赵思思的共同朋友，共有154个。",
        "output": "match(a:person where a.name='郑梅')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵思思') return b limit 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出郑若涵的点认识的person,然后请帮我找出郑若涵被雇佣的公司,一起返回",
        "output": "match(a where a.name = '郑若涵')-[e:knows]->(b:person),(a where a.name = '郑若涵')<-[e2:employee]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,peopleNumber,name, 数据为(81,29952,'越南'),(83,77853,'法国'),(59,73218,'美国')的子查询作为输入表, 以属性id作为相等条件,返回标签等于大学的所有点,并根据等级降序排列",
        "output": "with p as (select * from (VALUES(81,29952,'越南'),(83,77853,'法国'),(59,73218,'美国')) as t(id,peopleNumber,name))MATCH (a:university WHERE a.id = p.id) RETURN a ORDER BY a.level DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出buyer cancel的orders, 令orders的name的值等于createsorders的buyer的height的最大值, 再查找orders contain的goods",
        "output": "match(a:buyer)-[e:cancel]->(b:orders) let b.name = MAX((b:orders)<-[e2:creates]-(c:buyer) => c.height) match(b:orders)-[e3:contain]->(d:goods) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和订单有关联的商品节点,并根据其价格,销量,价值分组,返回价格,销量,价值,以及价值乘899的数量",
        "output": "match(a:orders)-[e:orders_contain_goods]-(b:goods) return b.price, b.sellerNumber, b.value, COUNT(b.value * 899) group by b.price, b.sellerNumber, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出薪资加2046乘1023大于197,身高为空的person认识的person的名称,以及这些person 关联的person的名称",
        "output": "match(a:person where (a.salary + 2046) * 1023 > 197 and (a.height is null))-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签等于person,边标签等于parent,且满足条件srcId小于等于159,targetId为空的边",
        "output": "match(a:person)-[e:parent where e.srcId <= 159 and (e.targetId is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和作家有关联的作家节点,并根据其薪资,名字分组,返回薪资,名字,以及id减15除7380的最小值",
        "output": "match(a:author)-[e:knows]-(b:author) return b.salary, b.name, MIN((b.id - 15) / 7380) group by b.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 请帮我查找所有和名为吴雪的用户有伙伴关系,或有伙伴的伙伴关系的帖子;2: 请帮我找出与名为中国军事论坛和知乎的点共同包含的,label为帖子的节点;3: 返回源点标签为用户,边标签为user_publish_post,以及满足条件目标点id大于104或目标点id等于123,且f1不等于true的边;4: 给出前165个name不是赵红且gender不等于male的person;5: 请帮我找出源点类型为帖子,边类型为post_has_tag的边,返回这些边的目标点id除目标点id乘173加710的个数,和权重对137.29取余的值;6: 找出与论坛中国军事论坛存在forum_contain_post关系,且与标签喜剧存在post_has_tag关系的帖子节点，返回这些帖子的价值,语言,创建时间,及论坛中国军事论坛的人数,及标签喜剧的价值;7: 找出和用户有关联的帖子节点,并根据其价值分组,返回价值,以及id的平均值除82减68对773取余乘953的值;8: 请帮我查找和论坛有关联的person节点,并根据其性别,薪资,年龄分组,返回性别,薪资,年龄,以及age的最小值除15的平均值;",
        "output": "查询语句为:1: match(a:user where n.name=吴雪)-[e:partner]->{1,2}(b:post) return b;2: match(a where a.name = '中国军事论坛')-[e:forum_contain_post]->(b:post)<-[e2:forum_contain_post]-(c where c.name = '知乎') return b;3: match(a:user)-[e:user_publish_post where (e.targetId > 104 or e.targetId = 123) and e.f1 <> true]->(b) return e;4: match(a:person where a.name <> '赵红' and a.gender <> 'male') return a limit 165;5: match(a:post)-[e:post_has_tag]->(b) return COUNT(e.targetId / e.targetId * 173 + 710), e.weight % 137.29;6: match(a:forum where a.name='中国军事论坛')-[e:forum_contain_post]->(b:post)<-[e2:post_has_tag]-(c:tag where c.name='喜剧') return a.peopleNumber,b.value, b.lang, b.createTime,c.value;7: match(a:user)-[e:user_publish_post]-(b:post) return b.value, AVG(b.id) / 82 - 68 % 773 * 953 group by b.value;8: match(a:forum)-[e:forum_contain_person]-(b:person) return b.gender, b.salary, b.age, AVG(MIN(b.age) / 15) group by b.gender, b.salary, b.age;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查询和贷款defaultName有关的公司,称为X,再查询和这个X有关联的其他账号,以及和X有关联的person;2: 查询person Jimmy own的account,返回account repay的loan的weight乘816的值 ;3: 请帮我查找所有和名为华为的公司有朋友关系,或有朋友的朋友关系的贷款;4: 找出全部源点满足条件id大于68或年龄在55到72之间,目标点满足条件人数大于等于608或价值大于213,且label为person_invest_company的边;5: 帮我查询以转账关系关联了账号LX001的账号;6: 查找loan defaultName的partner的partner的partner;7: 请帮我查找id为193的点的名字,id;",
        "output": "查询语句为:1: match(a:loan where a.name = 'defaultName')-[e]-(b:company), (b:company)-[e2]-(c:account),(b:company)-[e3]-(d:person) return a, b, c, d;2: match(a:person where name = 'Jimmy')-[e:person_own_account]->(b:account)-[e2:account_repay_loan]->(c:loan) return c.weight * 816;3: match(a:company where n.name=华为)-[e:friend]->{1,2}(b:loan) return b;4: match(a where a.id > 68 or (a.age BETWEEN 55 AND 72))-[e:person_invest_company]->(b where b.peopleNumber >= 608 or b.value > 213) return e;5: match(a:account where a.name='LX001')<-[e:account_transfer_account]-(b:account) return b;6: match(a:loan where a.name='defaultName')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d;7: match(a where a.id = '193') return a.name, a.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找48个和类型是卖家的点有回答关系的买家,以及和这些买家有咨询关系的卖家",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:consult]->(c:seller) return c limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出XXD和Light之间转账的账户。",
        "output": "match(a:account where a.name='XXD')-[e:transfer]->(b)<-[e2:transfer]-(c:account where c.name='Light') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为76的部门有关的医生的伙伴, 再给出和医生有关系的相关者",
        "output": "match(a:department where id = 76)-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 给出类型是patient的点,返回193个;2: 请帮我找出所有和病人陈若涵有2到5度关系的部门;3: 返回label为department,名为呼吸科的点,返回这些点的weight,address;4: 查找名为孙梅的,weight大于936的partner,返回这些partner的id,和边的weight,srcId;5: 查询名为Prescription_211的prescription,以及与其有关的department,并返回Prescription_211的id和这些department的name;6: 返回名为王红的点belong的所有department,并对这些点的id进行求和;7: 给出名为Prescription_280的点包含的全部药品,并对这些点的价格进行求和;",
        "output": "查询语句为:1: match(a:patient) return a limit 193;2: match(a:patient where a.name='陈若涵')-[e]->{2,5}(b:department) return b;3: match(a:department where a.name = '呼吸科') return a.weight, a.address;4: match(a where a.name='孙梅')-[e:partner]->(b where b.weight > 936) return b.id,e.weight, e.srcId;5: match(a:prescription where name = 'Prescription_211')-[e]-(b:department) return a.id, b.name;6: match(a where a.name='王红')-[e:doctor_belong_department]->(b:department) return SUM(b.id);7: match(a where a.name='Prescription_280')-[e:prescription_contain_medicine]->(b:medicine) return SUM(b.price);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和订单Order_225之间有包含关系的商品",
        "output": "match(a:orders where a.name='Order_225')-[e:contain]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和course形势与政策有关系的student或department或university,返回这些点的salary,id",
        "output": "match(a:course where a.name='形势与政策')-[e]-(b:student | department | university) return b.salary, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被company字节cooperate的university",
        "output": "match(a:university)<-[e:cooperate]-(b:company where b.name='字节') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找卖家王伟回答的买家,被其他卖家回答的数量",
        "output": "match(a:seller where a.name='王伟')-[e:ask]->(b:buyer)<-[e2:ask]-(c:seller) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person马宏creates的comment,和马宏likes的comment",
        "output": "match(a:comment)<-[e:creates]-(b:person where name = '马宏')-[e2:likes]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 查找名为黄梅的点consult的全部seller,并对这些点的age进行求和;2: 给出所有orders以price,value,id分组的id, 根据id从大到小排序;3: 查找84个名为赵梅的点查看的类型是商品的节点,且节点价值等于196或id等于14;4: 请帮我找出与商品有关系的订单节点,且订单节点的价格为3281.08,并返回这些点的price的和减价格对4662.21取余加592的值,以及id的最小值除24对877取余的值;5: 帮我查询买家周轩的相关者,的f0对786取余乘776的值;6: 帮我查询源点name不等于黄科或age在51到74之间,目标点value等于70或name不是Order_112或value是263,且类型为buyer_cancel_orders的边;",
        "output": "查询语句为:1: match(a where a.name='黄梅')-[e:buyer_consult_seller]->(b:seller) return SUM(b.age);2: match(a:orders) return a.id group by a.price, a.value, a.id order by a.id desc;3: match(a where a.name='赵梅')-[e:buyer_look_goods]->(b:goods where b.value = 196 or b.id = 14) return b limit 84;4: match(a:goods)-[e]->(b:orders where b.price = 3281.08) return SUM(b.price) - b.price % 4662.21 + 592, MIN(b.id) / 24 % 877;5: match(a:buyer where a.name= '周轩')-[e:relation]->(b) return e.f0 % 786 * 776;6: match(a where a.name <> '黄科' or (a.age BETWEEN 51 AND 74))-[e:buyer_cancel_orders]->(b where b.value = 70 or b.name <> 'Order_112' or b.value = 263) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加84乘value的最大值",
        "output": "MAX((a.id + 84) * a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和loan loan_50之间有deposit关系的account",
        "output": "match(a:loan where a.name='loan_50')-[e:deposit]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点类别小于等于40,价值为空,或类别为文艺,边标签等于拥有,且目标点id小于等于151,f1为false的边,返回这些边的f0乘f0的值",
        "output": "match(a where (a.category <= 40 and (a.value is null)) or a.category = '文艺')-[e:has where e.targetId <= 151 and e.f1 = false]->(b) return e.f0 * e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(55,165,46),(31,176,20)作为请求表数据,属性分别为id,height,age, 源点的age等于输入表age,请帮我找出person的三角的环,边标签等于person_likes_person, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(55,165,46),(31,176,20)) as t(id,height,age))MATCH (a:person WHERE a.age = p.age) -[e:person_likes_person ]->(b) -[e2:person_likes_person ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为放射科的,gender为male或name不等于周梅的relation,返回这些relation的gender,和边的targetId,srcId,weight",
        "output": "match(a where a.name='放射科')-[e:relation]->(b where b.gender = 'male' or b.name <> '周梅') return b.gender,e.targetId, e.srcId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回153个权重大于131且状态等于Running的事项,根据名字降序排列",
        "output": "match(a:issue where a.weight > 131 and a.status = 'Running') return a order by a.name desc limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和病人陈宏有关的病人,称为X,再返回和这个X有关联的其他处方,以及和X有关联的药品",
        "output": "match(a:patient where a.name = '陈宏')-[e]-(b:patient), (b:patient)-[e2]-(c:prescription),(b:patient)-[e3]-(d:medicine) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回仓库FSM 拥有的用户,返回用户 喜欢的仓库的星数乘515的个数",
        "output": "match(a:repository where name = 'FSM')-[e:has]->(b:user)-[e2:likes]->(c:repository) return COUNT(c.stars * 515)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询和医生相关的处方节点，并按重量分组，返回重量。",
        "output": "match(a:doctor)-[e:creates]-(b:prescription) return b.weight group by b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前94个label为创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与郑伟和周宏都有关联的人，并返回他们的ID和姓名。",
        "output": "match(a:person where a.name='郑伟')-[e]->(b:person)<-[e2]-(c:person where c.name='周宏') return b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出类型为person,名为韩国强的点,返回这些点的性别,名字,id;2: 请帮我查找person李强的全部标签等于friend的边,并根据f0降序排列,返回89个;3: 给出187个person李轩和马建聪,共同的partner;",
        "output": "查询语句为:1: match(a:person where a.name = '韩国强') return a.gender, a.name, a.id;2: match(a:person where a.name = '李强')-[e:friend]->(b) return b order by e.f0 desc limit 89;3: match(a:person where a.name='李轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='马建聪') return b limit 187;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有起点标签为买家，终点标签为订单，标签为取消的边。",
        "output": "match(a:buyer)-[e:cancel]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出国家英国包含的城市, 令城市的名字等于国家的价值,令城市的id等于城市的名字,令国家的id等于城市的面积减80140, 返回国家的人数, 城市的id",
        "output": "match(a:country where a.name='英国')-[e:contain]->(b:city) let b.name = a.value,let b.id = b.name,let a.id = b.area - 80140 return a.peopleNumber,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和论坛中国军事论坛有关系的论坛,返回这些点的价值,名字",
        "output": "match(a:forum where a.name='中国军事论坛')-[e]-(b:forum) return b.value, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询120个loan loan_63和loan_0,共同的friend",
        "output": "match(a:loan where a.name='loan_63')-[e:friend]->(b)<-[e2:friend]-(c:loan where c.name='loan_0') return b limit 120",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我找出全部名为武汉大学的点has的department;2: 查询全部源点label为教师,边label为teacher_teach_course的边,返回这些边的f0减856对762取余的个数,和源点id加122的值;3: 找出id为83的点的价值;4: 返回和教师有关联的课程节点,并根据其名字,学分分组,返回名字,学分,以及id加96的值;5: 返回全部和教师陈建聪之间有teacher_teach_course关系的课程;6: 返回标签等于course的点,返回123个;7: 给出所有名为法学院的点的,name不是郑科的partner,返回这些partner的gender,和边的targetId,f0;8: 帮我查询和部门有关联的学生节点,并根据其性别分组,返回性别,以及身高减身高的值;9: 返回和部门有关联的教师节点,并根据其身高,性别,名字分组,返回身高,性别,名字,以及身高减身高的求和值;",
        "output": "查询语句为:1: match(a where a.name='武汉大学')-[e:university_has_department]->(b:department) return b;2: match(a:teacher)-[e:teacher_teach_course]->(b) return COUNT(e.f0 - 856 % 762), e.srcId + 122;3: match(a where a.id = '83') return a.value;4: match(a:teacher)-[e:teacher_teach_course]-(b:course) return b.name, b.credit, b.id + 96 group by b.name, b.credit;5: match(a:teacher where a.name='陈建聪')-[e:teacher_teach_course]->(b:course) return b;6: match(a:course) return a limit 123;7: match(a where a.name='法学院')-[e:partner]->(b where b.name <> '郑科') return b.gender,e.targetId, e.f0;8: match(a:department)-[e:department_has_student]-(b:student) return b.gender, b.height - b.height group by b.gender;9: match(a:department)-[e:department_has_teacher]-(b:teacher) return b.height, b.gender, b.name, SUM(b.height - b.height) group by b.height, b.gender, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为105的点的stars,name,value",
        "output": "match(a where a.id = 105) return a.stars, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询127个和类型是cinema的点有releases关系的film,以及和这些film有has关系的tag",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为122的user publish的post, 并将post有关的tag的id的数量赋值给post的id, 接着查询post的id小于122的post has的tag",
        "output": "match(a:user where a.id = 122)-[e:publish]->(b:post) let b.id = COUNT((b:post)-[e2]-(c:tag) => c.id) match(b:post where b.id < 122)-[e3:has]->(d:tag) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与电影院横店影院有关系的电影, 返回和这些电影有关联的评论的,字数减132的平均值",
        "output": "match(a:cinema where a.name= '横店影院')-[e]-(b:film)-[e2]-(c:comment) return AVG(c.wordCount - 132)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询issue ISSUE-391 belong的repository节点has的user",
        "output": "match(a:issue where a.name = 'ISSUE-391')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表902,197,630, 源点的id等于输入表id,请帮我查找和prescription Prescription_445有关的prescription,称为X,再请帮我查找和这个X有关联的其他prescription,以及和X有关联的prescription",
        "output": "with p as (select * from (VALUES(902),(197),(630)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_445')) -[e ]-(b:prescription) , (b:prescription) -[e2 ]-(c:prescription) , (b:prescription) -[e3 ]-(d:prescription) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为赵科的点支付的person",
        "output": "match(a where a.name='赵科')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有类型为账号或公司或person的点",
        "output": "match(a:account | company | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出author何雪的friend,的srcId乘184的值",
        "output": "match(a:author where a.name= '何雪')-[e:friend]->(b) return e.srcId * 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前124个标签等于认识的边",
        "output": "match(a)-[e:knows]->(b) return e limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询带有标签 'publisher' 的数据，并按薪资从高到低排序。",
        "output": "match(a:publisher) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为北京大学的,id不是67或名字不是东京的相关者,返回这些相关者的人数,和边的权重,目标点id",
        "output": "match(a where a.name='北京大学')-[e:relation]->(b where b.id <> 67 or b.name <> '东京') return b.peopleNumber,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以拥有关系关联了学生张伟的部门",
        "output": "match(a:student where a.name='张伟')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回物理学院相关者的相关者。",
        "output": "match(a:department where a.name='物理学院')-[e:relation]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为陈轩的点likes的book",
        "output": "match(a where a.name='陈轩')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person周梅有likes关系的1度的环",
        "output": "match(a:person where name = '周梅')-[e:likes]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出天涯论坛和知乎上关于同一个主题的前159篇相关文章",
        "output": "match(a:forum where a.name='天涯论坛')-[e:relation]->(b)<-[e2:relation]-(c:forum where c.name='知乎') return b limit 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找76个peopleNumber不为空的company,根据name降序排列",
        "output": "match(a:company where (a.peopleNumber is not null)) return a order by a.name desc limit 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表335,60, 以属性id作为相等条件,给出所有源点标签为person,边标签为person_belong_company,并且权重为空或目标点id为空的边",
        "output": "with p as (select * from (VALUES(335),(60)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_belong_company WHERE e.weight IS NULL OR e.targetId IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('male',21,5573),('male',38,9510)作为请求表数据,属性分别为gender,age,salary, 以属性gender作为相等条件,给出和订单Order_459有关的卖家,再给出和Order_459orders_contain_goods的其他商品,返回它们",
        "output": "with p as (select * from (VALUES('male',21,5573),('male',38,9510)) as t(gender,age,salary))MATCH (a:orders WHERE a.gender = p.gender AND (a.name = 'Order_459')) -[e ]-(b:seller) , (a:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person陈雪 knows的person,返回person relates的person的age乘49的平均值",
        "output": "match(a:person where name = '陈雪')-[e:knows]->(b:person)-[e2:relates]->(c:person) return AVG(c.age * 49)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为category,value,name, 数据为('家具',476,'桌子')的子查询作为输入表, 源点的value等于输入表value,找出与buyer韩轩和王建聪都存在buyer_cancel_orders关系的点",
        "output": "with p as (select * from (VALUES('家具',476,'桌子')) as t(category,value,name))MATCH (a:buyer WHERE a.value = p.value AND (a.name = '韩轩')) -[e:buyer_cancel_orders ]->(b) <-[e2:buyer_cancel_orders ]-(c:buyer WHERE c.name = '王建聪') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询184个名为王思思的点回答的标签等于买家的节点,且其身高大于等于156且id在87到95之间",
        "output": "match(a where a.name='王思思')-[e:ask]->(b:buyer where b.height >= 156 and (b.id BETWEEN 87 AND 95)) return b limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,身高分组,计算薪资加7366的数量",
        "output": "return COUNT(a.salary + 7366) group by a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按name分组所有的patient的height，然后按照height升序排序。",
        "output": "match(a:patient) return a.height group by a.name order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person buy数量大于55的software,记为relationCount,再查询这些software buy的company",
        "output": "match(a:software) let a.relationCount = COUNT((a:software)<-[e:buy]-(b:person) => b.id) match(a where a.relationCount > 55)-[e2:buy]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与名为何宏和马科的点共同咨询，并且标签为'卖家'的节点。",
        "output": "match(a where a.name = '何宏')-[e:consult]->(b:seller)<-[e2:consult]-(c where c.name = '马科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person孙梅观看的电影",
        "output": "match(a:film)<-[e:watch]-(b:person where b.name='孙梅') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,height分组,计算height乘height的值",
        "output": "return a.height * a.height group by a.salary, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出所有医生以年龄分组的年龄, 根据年龄升序排序;2: 请帮我查找所有药品以id分组的id, 根据id从大到小排序;3: 返回部门耳鼻喉科 拥有的医生,返回医生 诊断的病人的id减74减173的数量 ;",
        "output": "查询语句为:1: match(a:doctor) return a.age group by a.age order by a.age asc;2: match(a:medicine) return a.id group by a.id order by a.id desc;3: match(a:department where name = '耳鼻喉科')-[e:department_has_doctor]->(b:doctor)-[e2:doctor_diagnose_patient]->(c:patient) return COUNT(c.id - 74 - 173);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有用户源点和喜欢边，计算它们对应的f0乘745的乘积之和，以及f0的乘积之和减去857乘164的最小值。",
        "output": "match(a:user)-[e:likes]->(b) return SUM(e.f0 * 745), MIN((SUM(e.f0) - 857) * 164)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与person孙轩有关系的person的名字",
        "output": "match(a:person where a.name='孙轩')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以680,744,605作为请求点id, 源点的id等于输入表id,帮我查询被person吴科关联的person",
        "output": "with p as (select * from (VALUES(680),(744),(605)) as t(id)) MATCH (a:person WHERE a.id = p.id) <-[e:relates ]-(b:person WHERE b.name = '吴科') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件value大于等于320的节点",
        "output": "match(a where a.value >= 320) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 给出名为蚂蚁集团和字节的,标签为公司的点公共的相关者节点的名单;2: 请帮我查找所有名为马思琪的,value在119到312之间或name是Light的friend,返回这些friend的id,和边的weight;3: 查找全部TheShy的点transfer的account,然后查找TheShy被deposit的loan,一起返回;4: 查找源点满足条件名字不是Light,目标点满足条件权重为空,金额为空,且类型为account_repay_loan的边;5: 返回所有源点类型是person,边类型是person_own_account,以及满足条件targetId大于6的边;6: 请帮我查找所有和person点有拥有关系的账号节点,且边满足条件权重等于133.15,目标账号节点是否冻结不是true;7: 请帮我查找与person何雪和吴思思都存在person_invest_company关系的点;8: 帮我查询被账号Light转账的账号;9: 请帮我找出account以id,createTime分组的createTime, 根据createTime从大到小排序;",
        "output": "查询语句为:1: match(a:company where a.name='蚂蚁集团')-[e:relation]->(b)<-[e2:relation]-(c:company where c.name='字节') return b.name;2: match(a where a.name='马思琪')-[e:friend]->(b where (b.value BETWEEN 119 AND 312) or b.name = 'Light') return b.id,e.weight;3: match(a where a.name = 'TheShy')-[e:account_transfer_account]->(b:account),(a where a.name = 'TheShy')<-[e2:loan_deposit_account]-(c:loan) return a, b, c;4: match(a where a.name <> 'Light')-[e:account_repay_loan]->(b where (b.weight is null) and (b.amount is null)) return e;5: match(a:person)-[e:person_own_account where e.targetId > 6]->(b) return e;6: match(a:person)-[e:person_own_account where e.weight = 133.15]->(b:account where b.isBlock <> true) return b;7: match(a:person where a.name='何雪')-[e:person_invest_company]->(b)<-[e2:person_invest_company]-(c:person where c.name='吴思思') return b;8: match(a:account)<-[e:account_transfer_account]-(b:account where b.name='Light') return a, b;9: match(a:account) return a.createTime group by a.id, a.createTime order by a.createTime desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与何红、黄轩有关的作家节点。",
        "output": "match(a:author where a.name='何红')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='黄轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询全部person以name,height,id分组的id, 根据id升序排序;2: 查询名为郑宏的person,以及与其有关的person,并返回郑宏的薪资和这些person的薪资;3: 查询全部源点类型是person,边类型是person_knows_person的边,返回这些边的f0加817的值,和srcId除43的值;4: 返回名为杜国强的,性别是famale的朋友,返回这些朋友的年龄,和边的f0,f1;5: 帮我查询所有王强的点pay的person,然后帮我查询王强被likes的person,一起返回;",
        "output": "查询语句为:1: match(a:person) return a.id group by a.name, a.height, a.id order by a.id asc;2: match(a:person where name = '郑宏')-[e]-(b:person) return a.salary, b.salary;3: match(a:person)-[e:person_knows_person]->(b) return e.f0 + 817, e.srcId / 43;4: match(a where a.name='杜国强')-[e:friend]->(b where b.gender = 'famale') return b.age,e.f0, e.f1;5: match(a where a.name = '王强')-[e:person_pay_person]->(b:person),(a where a.name = '王强')<-[e2:person_likes_person]-(c:person) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部类型是公司的点",
        "output": "match(a:company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(54,'悬疑',614),(85,'其他',926),(58,'喜剧',569), 以属性name作为相等条件,查询166个名为百度贴吧的点contain的标签等于person的节点,且其salary减7617减8减id大于等于16,age在38到55之间",
        "output": "with p as (select * from (VALUES(54,'悬疑',614),(85,'其他',926),(58,'喜剧',569)) as t(id,name,value))MATCH (a WHERE a.name = p.name AND (a.name = '百度贴吧')) -[e:forum_contain_person ]->(b:person WHERE b.salary - 7617 - 8 - b.id >= 16 AND b.age BETWEEN ASYMMETRIC 38 AND 55) RETURN b LIMIT 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出陈伟的点认识的person,然后找出陈伟被关联的person,一起返回",
        "output": "match(a where a.name = '陈伟')-[e:knows]->(b:person),(a where a.name = '陈伟')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些apply了loan但salary为空或者name为孙红的person，以及他们对应的loan和loan deposit的account名称",
        "output": "match(a:person where (a.salary is null) or a.name = '孙红')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回相关者或相关者的相关者。",
        "output": "match(a:company)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找满足条件id不为空的节点;2: 查找全部university以id,level分组的value, 根据value从大到小排序;3: 返回所有与country有关系的city节点,且city节点的value小于512,并返回这些点的id乘id的值,以及area的最小值对35404取余的求和值;4: 帮我查询名为微软的公司;5: 找出全部城市以人数,面积,id分组的id, 根据id降序排序;6: 查询198个id不等于30或name不等于华中科技大学或value大于等于675的university,根据name降序排列;7: 给出company以name分组的name, 根据name升序排序;",
        "output": "查询语句为:1: match(a where (a.id is not null)) return a;2: match(a:university) return a.value group by a.id, a.level order by a.value desc;3: match(a:country)-[e]->(b:city where b.value < 512) return b.id * b.id, SUM(MIN(b.area) % 35404);4: match(a:company where a.name = '微软') return a;5: match(a:city) return a.id group by a.peopleNumber, a.area, a.id order by a.id desc;6: match(a:university where a.id <> 30 or a.name <> '华中科技大学' or a.value >= 675) return a order by a.name desc limit 198;7: match(a:company) return a.name group by a.name order by a.name asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找周红这个人。",
        "output": "match(a:person where a.name = '周红') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 找出和账号XXD有关的公司,再找出和XXD account_transfer_account的其他账号,返回它们;2: 返回id为134的person关联的账号,和以拥有关系关联了这些账号的其他person;3: 返回全部与蚂蚁集团存在company_apply_loan关系的loan,loan与account存在loan_deposit_account关系的点,返回这些点的id;4: 查找person吴建聪的所有类型是partner的边,并根据targetId从小到大排列,返回178个;",
        "output": "查询语句为:1: match(a:account where a.name = 'XXD')-[e]-(b:company), (a:account)-[e2:account_transfer_account]->(c:account) return a, b, c;2: match(a:person where a.id = '134')-[e]-(b:account)<-[e2:person_own_account]-(c:person) return b,c;3: match(a where a.name = '蚂蚁集团')-[e:company_apply_loan]->(b:loan)-[e2:loan_deposit_account]->(c:account) return c.id;4: match(a:person where a.name = '吴建聪')-[e:partner]->(b) return b order by e.targetId asc limit 178;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为张雪和黄月的点共同申请的,类型为贷款的节点",
        "output": "match(a where a.name = '张雪')-[e:apply]->(b:loan)<-[e2:apply]-(c where c.name = '黄月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找城市武汉包含的公司,以及合作这些公司的大学",
        "output": "match(a:city where name = '武汉')-[e:contain]->(b:company)<-[e2:cooperate]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找company creates的software,返回其源点的peopleNumber对585取余的数量,以及目标点的stars减503的值",
        "output": "match(a:company)-[e:creates]->(b:software) return COUNT(a.peopleNumber % 585), b.stars - 503",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找满足条件价值在287到769之间,价值为空且名字不是其他的节点",
        "output": "match(a where (a.value BETWEEN 287 AND 769) and (a.value is null) and a.name <> '其他') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与名为'内科'的部门有关联关系，或者与这些关联关系有关联关系的医生。",
        "output": "match(a:department where n.name=内科)-[e:relation]->{1,2}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前144个满足条件size小于等于471的cinema",
        "output": "match(a:cinema where a.size <= 471) return a limit 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为Tom的节点watch的tag或cinema",
        "output": "match(a where a.name='Tom')-[e:watch]->(b:tag | cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询forum的3跳的环",
        "output": "match(a:forum)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person认识的person,返回其源点的id减88的最大值,以及目标点的id的平均值乘id的值",
        "output": "match(a:person)-[e:knows]->(b:person) return MAX(a.id - 88), AVG(b.id) * b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person陈轩有关的person,再查找和陈轩恋人的其他person,返回它们",
        "output": "match(a:person where a.name = '陈轩')-[e]-(b:person), (a:person)-[e2:lover]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为郑红的节点watch的comment或person",
        "output": "match(a where a.name='郑红')-[e:watch]->(b:comment | person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有起点是教师，终点是课程，且标签为'教'的边。",
        "output": "match(a:teacher)-[e:teach]->(b:course) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与课程有关系的课程节点,且课程节点的id小于94,并返回这些课程的价值对321取余乘358的最大值,以及课程的课时减课时的值",
        "output": "match(a:course)-[e]->(b:course where b.id < 94) return MAX(b.value % 321 * 358), b.courseHour - b.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找公司的三角的环,边标签为雇佣, 并返回这些点的id",
        "output": "match(a:company)-[e:employee]->(b)-[e2:employee]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回订单Order_231包含的商品, 令订单的价格等于订单的id的最小值,令商品的id等于订单的名字, 返回订单的id, 商品的价格",
        "output": "match(a:orders where a.name='Order_231')-[e:contain]->(b:goods) let a.price = MIN(a.id),let b.id = a.name return a.id,b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与李轩患者有关联的accept关系，并且与医疗酒精药物有关联的prescription节点。返回这些prescription的weight、name以及李轩患者的gender和医疗酒精药物的价格。",
        "output": "match(a:patient where a.name='李轩')-[e:accept]->(b:prescription)<-[e2:contain]-(c:medicine where c.name='医疗酒精') return a.gender,b.weight, b.name,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回22个与类型为'person'的点有'属于'关系的公司，以及这些公司与软件之间的'创建'关系。",
        "output": "match(a:person)-[e:belong]->(b:company)-[e2:creates]->(c:software) return c limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询和film变形金刚有关的comment,称为X,再查询和这个X有关联的其他tag,以及和X有关联的cinema",
        "output": "match(a:film where a.name = '变形金刚')-[e]-(b:comment), (b:comment)-[e2]-(c:tag),(b:comment)-[e3]-(d:cinema) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出company谷歌的所有relation,的weight的最小值乘190.58的值",
        "output": "match(a:company where a.name= '谷歌')-[e:relation]->(b) return MIN(e.weight) * 190.58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与论坛百度贴吧有关系的论坛的名字",
        "output": "match(a:forum where a.name='百度贴吧')-[e]-(b:forum) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为用户的全部点,并根据年龄降序排列",
        "output": "match(a:user) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部类型是教师或部门或大学的点",
        "output": "match(a:teacher | department | university) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为user且名为Amily的点，返回这些点的id、salary和gender。",
        "output": "match(a:user where a.name = 'Amily') return a.id, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为ISSUE-191的事项,以及与其有关的合并请求,并返回ISSUE-191的id和这些合并请求的名字",
        "output": "match(a:issue where name = 'ISSUE-191')-[e]-(b:pullRequest) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为孙若涵的forum或user,以及与其有关的post,并返回孙若涵的height和这些post的createTime",
        "output": "match(a:forum | user where name = '孙若涵')-[e]-(b:post) return a.height, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(35,'科幻',771),(36,'喜剧',88),(59,'喜剧',497),(17,'其他',75)的子查询作为输入表, 源点的name等于输入表name,返回99个名为孙建国的点喜欢的label为评论的节点,且节点创建时间不等于2002年03月23日或id在19到35之间",
        "output": "with p as (select * from (VALUES(35,'科幻',771),(36,'喜剧',88),(59,'喜剧',497),(17,'其他',75)) as t(id,name,value))MATCH (a WHERE a.name = p.name AND (a.name = '孙建国')) -[e:person_likes_comment ]->(b:comment WHERE b.createTime <> '2002-03-23' OR b.id BETWEEN ASYMMETRIC 19 AND 35) RETURN b LIMIT 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person的lover，或者person的lover的lover",
        "output": "match(a:person)-[e:lover]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与买家相关的卖家节点，按名称分组并返回。",
        "output": "match(a:buyer)-[e:consult]-(b:seller) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表951, 以属性id作为相等条件,给出从student王雪出发,经过标签等于student_selects_course的边,走1跳到达的course点",
        "output": "with p as (select * from (VALUES(951)) as t(id)) MATCH (a:student WHERE a.id = p.id AND (a.name = '王雪')) -[e:student_selects_course ]->(b:course) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有类型为用户的点",
        "output": "match(a:user) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从大学到部门的边已经存在。",
        "output": "match(a:university)-[e:has]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与类型为person的实体拥有关系的账号，以及这些账号的还款和存款关系。",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为空且年龄小于等于81的买家咨询的卖家的名称,以及这些卖家 回答的买家的名称",
        "output": "match(a:buyer where (a.id is null) and a.age <= 81)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与陈伟和李轩有关联的130个课程节点。",
        "output": "match(a where a.name='陈伟')-[e]->(b:course)<-[e2]-(c where c.name='李轩') return b limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和buyer郑月有look关系的goods,再请帮我找出以consult关系关联了郑月的seller",
        "output": "match(a:buyer where a.name = '郑月')-[e:look]->(b:goods),(a:buyer where a.name = '郑月')<-[e2:consult]-(c:seller)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为medicine且被Prescription_358和Prescription_410共同包含的所有节点",
        "output": "match(a where a.name = 'Prescription_358')-[e:contain]->(b:medicine)<-[e2:contain]-(c where c.name = 'Prescription_410') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从处方Prescription_193出发,经过标签为包含的边,走1跳到达的药品点",
        "output": "match(a:prescription where a.name='Prescription_193')-[e:contain]->{1,1}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找艺术学院和物理学院部门点公共的朋友节点名单。",
        "output": "match(a:department where a.name='艺术学院')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='物理学院') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person何月存在apply关系,且与account LX001存在deposit关系的loan节点，返回这些loan的amount,id,及person何月的gender,及account LX001的createTime",
        "output": "match(a:person where a.name='何月')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='LX001') return a.gender,b.amount, b.id,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找账号Light转账的账号,以及转账这些账号的账号, 令账号的id等于账号的名字的数量,令账号(c)的上次登录时间等于账号(a)的创建时间的最大值,令账号的价值等于账号的价值除885, 返回账号(a)的创建时间,账号(b)的创建时间,账号(c)的价值",
        "output": "match(a:account where name = 'Light')-[e:transfer]->(b:account)<-[e2:transfer]-(c:account) let b.id = COUNT(b.name),let c.lastLoginTime = MAX(a.createTime),let a.value = a.value / 885 return a.createTime,b.createTime,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为ISSUE-413的issue,以及与其有关的repository,并返回ISSUE-413的id和这些repository的id",
        "output": "match(a:issue where name = 'ISSUE-413')-[e]-(b:repository) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为王建聪的issue或pullRequest,以及与其有关的pullRequest,并返回王建聪的height和这些pullRequest的createTime",
        "output": "match(a:issue | pullRequest where name = '王建聪')-[e]-(b:pullRequest) return a.height, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找35个与韩月和徐轩都存在关系的film或person或cinema节点",
        "output": "match(a where a.name='韩月')-[e]->(b:film | person | cinema)<-[e2]-(c where c.name='徐轩') return b limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为24的goods相关的seller及其伙伴，再查找与seller有关的伙伴",
        "output": "match(a:goods where id = '24')-[e]-(b:seller)-[e2:partner]->(c), (b:seller)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为少年闰土的节点knows的publisher",
        "output": "match(a where a.name='少年闰土')-[e:knows]->(b:publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回源点类型为医生,目标点类型为病人,类型为doctor_diagnose_patient的边;2: 找出类别不等于发烧药的节点;3: 查询70个薪资为空或身高小于181,且年龄为空的病人,根据薪资从大到小排列;4: 帮我查询全部源点类型为prescription,目标点类型为medicine,类型为prescription_contain_medicine的边;5: 帮我查询类型是药品的点,返回27个;6: 请帮我找出全部id为23的病人关联的处方,和以接受关系关联了这些处方的其他病人;7: 给出和处方Prescription_170有prescription_contain_medicine关系的药品,以及和医生孙红有doctor_diagnose_patient关系的病人,将它们都返回;8: 请帮我查找4个id是97的药品,根据名字升序排列;",
        "output": "查询语句为:1: match(a:doctor)-[e:doctor_diagnose_patient]->(b:patient) return e;2: match(a where a.category <> '发烧药') return a;3: match(a:patient where ((a.salary is null) or a.height < 181) and (a.age is null)) return a order by a.salary desc limit 70;4: match(a:prescription)-[e:prescription_contain_medicine]->(b:medicine) return e;5: match(a:medicine) return a limit 27;6: match(a:patient where a.id = '23')-[e]-(b:prescription)<-[e2:patient_accept_prescription]-(c:patient) return b,c;7: match(a:prescription where a.name = 'Prescription_170')-[e:prescription_contain_medicine]->(b:medicine),(c:doctor where c.name = '孙红')-[e2:doctor_diagnose_patient]->(d:patient)return a, b, c, d;8: match(a:medicine where a.id = 97) return a order by a.name asc limit 4;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型为大学的点有拥有关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有与名为'孙强'的人有相关者关系，或者与这些相关者相关者关系的评论。",
        "output": "match(a:person where n.name=孙强)-[e:relation]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,人数分组,计算人数加808的和",
        "output": "return SUM(a.peopleNumber + 808) group by a.name, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被医生李伟属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where b.name='李伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,value, 数据为('西虹市首富',55,155), 以属性id作为相等条件,查找和cinema有关联的film节点,并根据其id,value分组,返回id,value,以及value除230的值",
        "output": "with p as (select * from (VALUES('西虹市首富',55,155)) as t(name,id,value))MATCH (a:cinema WHERE a.id = p.id) -[e:cinema_releases_film ]-(b:film) RETURN b.id, b.value, b.value / 230 GROUP BY b.id, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询前93个标签等于book_refers_book的边;2: 给出和publisher徐月有关的reader,称为X,再给出和这个X有关联的其他book,以及和X有关联的reader;3: 返回所有id为142的读者关联的书,和以发布关系关联了这些书的其他编辑;4: 查询类型是publisher的所有点,并根据name升序排列;5: 查找以发布关系关联了书计算机网络的编辑;6: 查找以撰写关系关联了书悲惨世界的作家;7: 帮我查询123个薪资小于4890的作家,根据id从小到大排列;8: 查询薪资在6229到8054之间或身高在167到187之间或id为空的节点;9: 返回全部和book白夜行有3到5跳关系的reader;",
        "output": "查询语句为:1: match(a)-[e:book_refers_book]->(b) return e limit 93;2: match(a:publisher where a.name = '徐月')-[e]-(b:reader), (b:reader)-[e2]-(c:book),(b:reader)-[e3]-(d:reader) return a, b, c, d;3: match(a:reader where a.id = '142')-[e]-(b:book)<-[e2:publisher_publish_book]-(c:publisher) return b,c;4: match(a:publisher) return a order by a.name asc;5: match(a:book where a.name='计算机网络')<-[e:publisher_publish_book]-(b:publisher) return b;6: match(a:book where a.name='悲惨世界')<-[e:author_write_book]-(b:author) return b;7: match(a:author where a.salary < 4890) return a order by a.id asc limit 123;8: match(a where (a.salary BETWEEN 6229 AND 8054) or (a.height BETWEEN 167 AND 187) or (a.id is null)) return a;9: match(a:book where a.name='白夜行')-[e]->{3,5}(b:reader) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与给定人物相关的其他人，以及这些人与给定人物之间的认识关系。",
        "output": "match(a:person where a.id = '30')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出id为142的goods有关的orders的partner, 再给出和orders有关系的relation",
        "output": "match(a:goods where id = '142')-[e]-(b:orders)-[e2:partner]->(c), (b:orders)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于电影或person的点",
        "output": "match(a:film | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('浙江大学',2,473)作为请求表数据,属性分别为name,level,value, 以属性level作为相等条件,帮我查询所有源点类型为city,边类型为city_belong_country,并且srcId不是193或weight的个数大于等于678,且targetId为空的边",
        "output": "with p as (select * from (VALUES('浙江大学',2,473)) as t(name,level,value))MATCH (a:city WHERE a.level = p.level) -[e:city_belong_country WHERE (e.srcId <> 193 OR COUNT(e.weight) >= 678) AND e.targetId IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部标签等于编辑的点",
        "output": "match(a:publisher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找论坛知乎的全部标签等于朋友的边,并根据权重升序排列,返回134个",
        "output": "match(a:forum where a.name = '知乎')-[e:friend]->(b) return b order by e.weight asc limit 134",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出与cinema UME存在cinema_releases_film关系,且与tag历史存在film_has_tag关系的film节点，返回这些film的category,及cinema UME的name,及tag历史的name",
        "output": "match(a:cinema where a.name='UME')-[e:cinema_releases_film]->(b:film)<-[e2:film_has_tag]-(c:tag where c.name='历史') return a.name,b.category,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找标签为person,名称为黄若涵的地点，并返回这些地点的性别。",
        "output": "match(a:person where a.name = '黄若涵') return a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件是否冻结不等于false,价值乘578大于等于60且价值大于393的节点",
        "output": "match(a where a.isBlock <> false and a.value * 578 >= 60 and a.value > 393) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出169个名为黄梅的点咨询的类型是卖家的节点,且节点id不等于82且id大于95",
        "output": "match(a where a.name='黄梅')-[e:consult]->(b:seller where b.id <> 82 and b.id > 95) return b limit 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 给出评论Comment_464属于的电影,被其他person观看的数量;2: 找出类型是cinema,名为横店影院的点,返回这些点的id,size;3: 帮我查询源点label为person,边label为person_likes_comment,并且满足条件权重在112.22到157.16之间或f0小于518,且f1等于false的边;4: 找出与comment Comment_369有关系的tag, 返回和这些tag有关联的tag的,id除id的最大值;",
        "output": "查询语句为:1: match(a:comment where a.name='Comment_464')-[e:comment_belong_film]->(b:film)<-[e2:person_watch_film]-(c:person) return COUNT(c);2: match(a:cinema where a.name = '横店影院') return a.id, a.size;3: match(a:person)-[e:person_likes_comment where ((e.weight BETWEEN 112.22 AND 157.16) or e.f0 < 518) and e.f1 = false]->(b) return e;4: match(a:comment where a.name= 'Comment_369')-[e]-(b:tag)-[e2]-(c:tag) return MAX(c.id / c.id);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,gender,salary, 数据为('赵科','male',1491),('何若涵','male',8972)的子查询作为输入表, 源点的salary等于输入表salary,查询所有买家以薪资分组的性别, 根据性别从大到小排序",
        "output": "with p as (select * from (VALUES('赵科','male',1491),('何若涵','male',8972)) as t(name,gender,salary))MATCH (a:buyer WHERE a.salary = p.salary) RETURN a.gender GROUP BY a.salary ORDER BY a.gender DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(4078,31,77),(7333,99,9)作为请求表数据,属性分别为salary,age,id, 以属性age作为相等条件,帮我查询和标签为person的点有person_belong_company关系的公司,以及和这些公司有company_employee_person关系的person,以及和这些person有person_belong_company关系的公司",
        "output": "with p as (select * from (VALUES(4078,31,77),(7333,99,9)) as t(salary,age,id))MATCH (a:person WHERE a.age = p.age) -[e:person_belong_company ]->(b:company) -[e2:company_employee_person ]->(c:person) -[e3:person_belong_company ]->(d:company) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "面积乘12197的数量",
        "output": "COUNT(a.area * 12197)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询publisher的三角的环,边label为publish, 并返回这些点的id",
        "output": "match(a:publisher)-[e:publish]->(b)-[e2:publish]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以'bV', 'rw'作为输入,返回number",
        "output": "Call TRIANGLECOUNT('bV', 'rw') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和王科有喜欢关系的人，这些人之间又存在认识关系，返回这些人的名字。",
        "output": "match(a where a.name = '王科')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以32作为输入调用pageRank函数,返回id, value",
        "output": "Call PAGERANK(32) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(378,2013-04-01,2),(532,2014-03-01,218)作为请求表数据,属性分别为value,createTime,peopleNumber, 以属性value作为相等条件,给出前46个满足条件salary大于等于3691且salary不等于1349的person",
        "output": "with p as (select * from (VALUES(378,2013-04-01,2),(532,2014-03-01,218)) as t(value,createTime,peopleNumber))MATCH (a:person WHERE a.value = p.value AND (a.salary >= 3691 AND a.salary <> 1349)) RETURN a LIMIT 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司美团有雇佣关系的person,再找出以雇佣关系关联了美团的person",
        "output": "match(a:company where a.name = '美团')-[e:employee]->(b:person),(a:company where a.name = '美团')<-[e2:employee]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和事项ISSUE-249有关的用户,再给出和ISSUE-249属于的其他仓库,返回它们",
        "output": "match(a:issue where a.name = 'ISSUE-249')-[e]-(b:user), (a:issue)-[e2:belong]->(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,amount,weight分组,计算amount减8686.72的值",
        "output": "return a.amount - 8686.72 group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄、ID和姓名对教师进行分组，然后根据性别降序排序。",
        "output": "match(a:teacher) return a.gender group by a.age, a.id, a.name order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出买家周思思的伙伴,的目标点id乘22的值",
        "output": "match(a:buyer where a.name= '周思思')-[e:partner]->(b) return e.targetId * 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询法学院的学生选择了哪些课程",
        "output": "match(a:department where a.name = '法学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为武汉的节点包含的大学或城市或公司",
        "output": "match(a where a.name='武汉')-[e:contain]->(b:university | city | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询44个与ISSUE-271和ISSUE-424都存在关系的用户或事项节点",
        "output": "match(a where a.name='ISSUE-271')-[e]->(b:user | issue)<-[e2]-(c where c.name='ISSUE-424') return b limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('天涯论坛',136,9)作为请求表数据,属性分别为name,peopleNumber,id, 源点的id等于输入表id,给出178个名为吴宏的点publish的标签等于post的节点,且其lang等于Japanese或name为Post_123",
        "output": "with p as (select * from (VALUES('天涯论坛',136,9)) as t(name,peopleNumber,id))MATCH (a WHERE a.id = p.id AND (a.name = '吴宏')) -[e:user_publish_post ]->(b:post WHERE b.lang = 'Japanese' OR b.name = 'Post_123') RETURN b LIMIT 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和城市杭州之间有包含关系的大学",
        "output": "match(a:city where a.name='杭州')-[e:contain]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与马思思存在取消关系的订单，然后找出订单中包含商品（即orders与goods存在包含关系）的点，最后返回这些点的类别（category)。",
        "output": "match(a where a.name = '马思思')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和城市天津有3度或4度关系的国家",
        "output": "match(a:city where a.name='天津')-[e]->{3,4}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询author的3跳的环",
        "output": "match(a:author)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我查找全部person以id分组的gender, 根据gender降序排序;2: 返回所有郑思琪的点knows的person,然后返回郑思琪被knows的person,一起返回;3: 给出陈梅的点认识的person,然后给出陈梅被支付的person,一起返回;4: 查找label为person,名为赵国强的点,返回这些点的age;5: 给出被person孙强认识的person;6: 请帮我找出被person韩伟knows的person;7: 请帮我找出和person有关联的person节点,并根据其性别,id分组,返回性别,id,以及id除41对64取余的最小值;8: 找出id为74的person关联的person,和以pay关系关联了这些person的其他person;9: 帮我查询和person张红有person_likes_person关系的person,再帮我查询以person_knows_person关系关联了张红的person;",
        "output": "查询语句为:1: match(a:person) return a.gender group by a.id order by a.gender desc;2: match(a where a.name = '郑思琪')-[e:person_knows_person]->(b:person),(a where a.name = '郑思琪')<-[e2:person_knows_person]-(c:person) return a, b, c;3: match(a where a.name = '陈梅')-[e:person_knows_person]->(b:person),(a where a.name = '陈梅')<-[e2:person_pay_person]-(c:person) return a, b, c;4: match(a:person where a.name = '赵国强') return a.age;5: match(a:person)<-[e:person_knows_person]-(b:person where b.name='孙强') return a, b;6: match(a:person)<-[e:person_knows_person]-(b:person where b.name='韩伟') return a, b;7: match(a:person)-[e:person_likes_person]-(b:person) return b.gender, b.id, MIN(b.id / 41 % 64) group by b.gender, b.id;8: match(a:person where a.id = '74')-[e]-(b:person)<-[e2:person_pay_person]-(c:person) return b,c;9: match(a:person where a.name = '张红')-[e:person_likes_person]->(b:person),(a:person where a.name = '张红')<-[e2:person_knows_person]-(c:person)return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有处方，按名字排序。",
        "output": "match(a:prescription) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为李月的教师,以及与其有关的大学,并返回李月的名字和这些大学的名字",
        "output": "match(a:teacher where name = '李月')-[e]-(b:university) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和账号Geaflow123有还款关系的贷款,再帮我查询以还款关系关联了Geaflow123的贷款",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:repay]->(b:loan),(a:account where a.name = 'Geaflow123')<-[e2:repay]-(c:loan)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找和book百年孤独有1到4跳关系的reader;2: 请帮我找出reader以height分组的id, 根据id从大到小排序;3: 返回23个author黄科和王建国,共同的relation;4: 请帮我找出作家马思思的全部label为伙伴的边,并根据目标点id从大到小排列,返回114个;",
        "output": "查询语句为:1: match(a:book where a.name='百年孤独')-[e]->{1,4}(b:reader) return b;2: match(a:reader) return a.id group by a.height order by a.id desc;3: match(a:author where a.name='黄科')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='王建国') return b limit 23;4: match(a:author where a.name = '马思思')-[e:partner]->(b) return b order by e.targetId desc limit 114;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有从'person'出发，到'账号'为目标，且标记为'拥有'的边。",
        "output": "match(a:person)-[e:own]->(b:account) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找与名为张伟和郑科的点共同creates的,类型为orders的节点",
        "output": "match(a where a.name = '张伟')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c where c.name = '郑科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为XXRepo的用户或事项,以及与其有关的仓库,并返回XXRepo的权重和这些仓库的id",
        "output": "match(a:user | issue where name = 'XXRepo')-[e]-(b:repository) return a.weight, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与公司Bilibili有关系的大学的id",
        "output": "match(a:company where a.name='Bilibili')-[e]-(b:university) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 给出id为184的点的id;2: 请帮我找出买家取消的订单,返回其源点的年龄加3除42的值,以及目标点的价值除价值的最大值;3: 返回和buyer有关联的goods节点,并根据其category分组,返回category,以及id除98的值;4: 返回和买家有关联的订单节点,并根据其价值,id,价格分组,返回价值,id,价格,以及价格对4017.24取余的求和值;5: 查找所有buyer以gender,name,height分组的salary, 根据salary降序排序;6: 请帮我找出全部与商品有关系的买家节点,且买家节点的性别等于famale,并返回这些点的薪资对9832取余的值,以及年龄减9的最小值;7: 给出与卖家马若涵有关系的买家, 返回和这些买家有关联的卖家的,age的求和值除27的值;8: 找出与名为赵国强和孙思琪的点共同has的,类型为goods的节点;9: 给出和买家有关联的卖家节点,并根据其id,薪资,名字分组,返回id,薪资,名字,以及身高减150的值;",
        "output": "查询语句为:1: match(a where a.id = '184') return a.id;2: match(a:buyer)-[e:buyer_cancel_orders]->(b:orders) return (a.age + 3) / 42, MAX(b.value / b.value);3: match(a:buyer)-[e:buyer_look_goods]-(b:goods) return b.category, b.id / 98 group by b.category;4: match(a:buyer)-[e:buyer_creates_orders]-(b:orders) return b.value, b.id, b.price, SUM(b.price % 4017.24) group by b.value, b.id, b.price;5: match(a:buyer) return a.salary group by a.gender, a.name, a.height order by a.salary desc;6: match(a:goods)-[e]->(b:buyer where b.gender = 'famale') return b.salary % 9832, MIN(b.age - 9);7: match(a:seller where a.name= '马若涵')-[e]-(b:buyer)-[e2]-(c:seller) return SUM(c.age) / 27;8: match(a where a.name = '赵国强')-[e:seller_has_goods]->(b:goods)<-[e2:seller_has_goods]-(c where c.name = '孙思琪') return b;9: match(a:buyer)-[e:buyer_consult_seller]-(b:seller) return b.id, b.salary, b.name, b.height - 150 group by b.id, b.salary, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和user郑思思之间有creates关系的pullRequest",
        "output": "match(a:user where a.name='郑思思')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与cinema好视影院有releases关系的3跳的环",
        "output": "match(a:cinema where name = '好视影院')-[e:releases]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与论坛有关系的帖子节点,且帖子节点的价值在182到452之间,并返回这些帖子的id的最大值除94的最小值,以及帖子的id对id取余的和",
        "output": "match(a:forum)-[e]->(b:post where (b.value BETWEEN 182 AND 452)) return MIN(MAX(b.id) / 94), SUM(b.id % b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签为buyer的点有consult关系的seller,以及和这些seller有ask关系的buyer,以及和这些buyer有look关系的goods",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:look]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找喜欢用户周若涵发布的帖子,的用户",
        "output": "match(a:user where name = '周若涵')-[e:publish]->(b:post)<-[e2:likes]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 返回3个和类型是university的点有university_belong_city关系的city,并且和这些city有city_contain_university关系的university;2: 请帮我找出label为国家的点,返回123个;3: 返回label为city_belong_country,且满足条件权重不为空的边;4: 找出城市包含的大学,返回其源点的peopleNumber的最小值减人数的值,以及目标点的等级乘1的最大值;5: 查询id为51的company有关的city的partner, 再查询和city有关系的relation;6: 返回所有大学以等级,价值分组的等级, 根据等级升序排序;7: 请帮我查找所有公司以名字,规格分组的名字, 根据名字降序排序;",
        "output": "查询语句为:1: match(a:university)-[e:university_belong_city]->(b:city)-[e2:city_contain_university]->(c:university) return c limit 3;2: match(a:country) return a limit 123;3: match(a)-[e:city_belong_country where (e.weight is not null)]->(b) return e;4: match(a:city)-[e:city_contain_university]->(b:university) return MIN(a.peopleNumber) - a.peopleNumber, MAX(b.level * 1);5: match(a:company where id = '51')-[e]-(b:city)-[e2:partner]->(c), (b:city)-[e3:relation]->(d) return a, b, c, d;6: match(a:university) return a.level group by a.level, a.value order by a.level asc;7: match(a:company) return a.name group by a.name, a.scale order by a.name desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为徐轩的点的,创建时间等于2013年12月25日,字数小于93的朋友,返回这些朋友的名字,和边的f0,f1",
        "output": "match(a where a.name='徐轩')-[e:friend]->(b where b.createTime = '2013-12-25' and b.wordCount < 93) return b.name,e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为复仇者联盟的电影,以及与其有关的person,并返回复仇者联盟的名字和这些person的性别",
        "output": "match(a:film where name = '复仇者联盟')-[e]-(b:person) return a.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值乘550的值",
        "output": "a.value * 550",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为韩国强和吴雪的点共同likes的,标签为repository的节点",
        "output": "match(a where a.name = '韩国强')-[e:likes]->(b:repository)<-[e2:likes]-(c where c.name = '吴雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户喜欢的所有边，计算这些边的f0属性加711的结果之和以及它们的weight属性对157.94取余后的值。",
        "output": "match(a:user)-[e:likes]->(b) return SUM(e.f0 + 711), e.weight % 157.94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部源点类型是user,边类型是likes的边,返回这些边的f0加f0的数量,和targetId对87取余除196.34乘190.80加828加targetId的值",
        "output": "match(a:user)-[e:likes]->(b) return COUNT(e.f0 + e.f0), e.targetId % 87 / 196.34 * 190.80 + 828 + e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与作家黄思思和周思思都存在撰写关系的点",
        "output": "match(a:author where a.name='黄思思')-[e:write]->(b)<-[e2:write]-(c:author where c.name='周思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表125,819,695,480,665, 源点的id等于输入表id,找出与person周梅有关,且与person赵轩有关系的person节点",
        "output": "with p as (select * from (VALUES(125),(819),(695),(480),(665)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '周梅')) -[e:person_pay_person ]-(b:person) -[e2:person_likes_person ]-(c:person WHERE c.name = '赵轩') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person吴若涵有parent关系的1度以内的环",
        "output": "match(a:person where name = '吴若涵')-[e:parent]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以接受关系关联了处方Prescription_327的病人",
        "output": "match(a:prescription where a.name='Prescription_327')<-[e:accept]-(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和goods短袖有2到4跳关系的orders",
        "output": "match(a:goods where a.name='短袖')-[e]->{2,4}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与作者张梅有写作关系的书籍，以及与张梅有关联的作者。",
        "output": "match(a:author where a.name = '张梅')-[e:write]->(b:book),(a:author where a.name = '张梅')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找杜科的合作伙伴的朋友的朋友",
        "output": "match(a:person where a.name='杜科')-[e:partner]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以57,947作为请求点id, 以属性id作为相等条件,请帮我查找从大学复旦大学出发,经过类型是university_cooperate_company的边,走1到3跳到达的公司点",
        "output": "with p as (select * from (VALUES(57),(947)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name = '复旦大学')) -[e:university_cooperate_company ]->{1,3}(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Bilibili的贷款,以及与其有关的公司,并返回Bilibili的名字和这些公司的价值",
        "output": "match(a:loan where name = 'Bilibili')-[e]-(b:company) return a.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除175对3679取余的值",
        "output": "a.height / 175 % 3679",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,id, 数据为(65,153,57),(92,151,91),(52,166,13),(95,191,81)的子查询作为输入表, 源点的height等于输入表height,计算所有读者的id的个数除55的求和值",
        "output": "with p as (select * from (VALUES(65,153,57),(92,151,91),(52,166,13),(95,191,81)) as t(age,height,id))MATCH (a:reader WHERE a.height = p.height) RETURN SUM(COUNT(a.id) / 55) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出course大学物理 belong的department,返回department has的student的age的最小值除95的个数",
        "output": "match(a:course where name = '大学物理')-[e:belong]->(b:department)-[e2:has]->(c:student) return COUNT(MIN(c.age) / 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 一个女性，性别不是男性，知道一个人的名字，以及这个人认识的人的姓名。",
        "output": "match(a:person where a.gender = 'famale' and a.gender <> 'male')-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件id大于等于20或value不为空,且value在251到359之间的节点",
        "output": "match(a where (a.id >= 20 or (a.value is not null)) and (a.value BETWEEN 251 AND 359)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资除6841的值",
        "output": "a.salary / 6841",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按地址升序排列，找出南区中权重大于或等于393的前31个地址",
        "output": "match(a:department where a.address = '南区' and a.weight >= 393) return a order by a.address asc limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和prescription Prescription_190有2跳或3跳关系的prescription",
        "output": "match(a:prescription where a.name='Prescription_190')-[e]->{2,3}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以383,833,53,776,488作为请求点id, 以属性id作为相等条件,请帮我查找与company阿里和华为都存在company_apply_loan关系的点",
        "output": "with p as (select * from (VALUES(383),(833),(53),(776),(488)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) -[e:company_apply_loan ]->(b) <-[e2:company_apply_loan ]-(c:company WHERE c.name = '华为') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Bilibili的贷款或公司,以及与其有关的person,并返回Bilibili的名字和这些person的身高",
        "output": "match(a:loan | company where name = 'Bilibili')-[e]-(b:person) return a.name, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为赵伟的点认识的全部person,并对这些person的身高进行求和",
        "output": "match(a where a.name='赵伟')-[e:knows]->(b:person) return SUM(b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person何建国之间有购买关系的软件",
        "output": "match(a:person where a.name='何建国')-[e:buy]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出user马思思的标签等于friend的边,并根据srcId降序排列,返回49个",
        "output": "match(a:user where a.name = '马思思')-[e:friend]->(b) return b order by e.srcId desc limit 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为58的标签有关的用户的相关者, 再给出和用户有关系的伙伴",
        "output": "match(a:tag where id = 58)-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出和华为有合作关系的大学，以及和巴黎有包含关系的大学。",
        "output": "match(a:company where a.name = '华为')-[e:cooperate]->(b:university),(c:city where c.name = '巴黎')-[e2:contain]->(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出身高小于169的人喜欢的人和这些人喜欢的人。",
        "output": "match(a:person where a.height < 169)-[e:likes]->(b:person)-[e2:likes]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 请帮我找出与公司谷歌有关系的person, 返回和这些person有关联的贷款的,amount的数量对金额取余的值;2: 请帮我找出和person有关联的loan节点,并根据其amount,id分组,返回amount,id,以及amount加2233.06减9264.41的最大值;3: 请帮我查找label为贷款的点;4: 返回全部loan以amount,id分组的amount, 根据amount升序排序;5: 查询与company有关系的person节点,且person节点的gender不等于famale,并返回这些点的height的最大值对177取余的平均值,以及age的求和值对age取余的值;6: 查找类型为公司,名为Bilibili的点,返回这些点的名字;7: 给出119个value乘197大于等于379且name不是美团且scale为large的company,根据scale升序排列;8: 请帮我找出名为defaultName和defaultName1的,类型是loan的点公共的partner节点的名单;",
        "output": "查询语句为:1: match(a:company where a.name= '谷歌')-[e]-(b:person)-[e2]-(c:loan) return COUNT(c.amount) % c.amount;2: match(a:person)-[e:person_apply_loan]-(b:loan) return b.amount, b.id, MAX(b.amount + 2233.06 - 9264.41) group by b.amount, b.id;3: match(a:loan) return a;4: match(a:loan) return a.amount group by a.amount, a.id order by a.amount asc;5: match(a:company)-[e]->(b:person where b.gender <> 'famale') return AVG(MAX(b.height) % 177), SUM(b.age) % b.age;6: match(a:company where a.name = 'Bilibili') return a.name;7: match(a:company where a.value * 197 >= 379 and a.name <> '美团' and a.scale = 'large') return a order by a.scale asc limit 119;8: match(a:loan where a.name='defaultName')-[e:partner]->(b)<-[e2:partner]-(c:loan where c.name='defaultName1') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名叫郑国强的买家。",
        "output": "match(a:buyer where a.name = '郑国强') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和城市上海有包含关系的公司,再查询以包含关系关联了上海的大学",
        "output": "match(a:city where a.name = '上海')-[e:contain]->(b:company),(a:city where a.name = '上海')<-[e2:contain]-(c:university)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被买家杜雪咨询的卖家",
        "output": "match(a:seller)<-[e:consult]-(b:buyer where b.name='杜雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回buyer黄建聪与seller节点之间的consult关系，并且这些seller节点拥有'香蕉'这个has-one关系，然后返回这些seller节点的height,buyer黄建聪的age以及'香蕉'的price。",
        "output": "match(a:buyer where a.name='黄建聪')-[e:consult]->(b:seller)<-[e2:has]-(c:goods where c.name='香蕉') return a.age,b.height,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 找出department数学学院 has的teacher,返回teacher teach的course的courseHour对30取余的值 ;2: 给出与student Tom有关系的teacher, 返回和这些teacher有关联的university的,level的最大值对4取余的值;3: 查询前180个id小于等于12的教师;4: 请帮我查找与学生周建聪和韩月都存在student_selects_course关系的点;5: 帮我查询和大学有关联的部门节点,并根据其id,价值分组,返回id,价值,以及id减80的值;6: 查找满足条件课时大于41或id不是65的节点;7: 给出名为韩雪的student,以及与其有关的department,并返回韩雪的salary和这些department的name;",
        "output": "查询语句为:1: match(a:department where name = '数学学院')-[e:department_has_teacher]->(b:teacher)-[e2:teacher_teach_course]->(c:course) return c.courseHour % 30;2: match(a:student where a.name= 'Tom')-[e]-(b:teacher)-[e2]-(c:university) return MAX(c.level) % 4;3: match(a:teacher where a.id <= 12) return a limit 180;4: match(a:student where a.name='周建聪')-[e:student_selects_course]->(b)<-[e2:student_selects_course]-(c:student where c.name='韩月') return b;5: match(a:university)-[e:university_has_department]-(b:department) return b.id, b.value, b.id - 80 group by b.id, b.value;6: match(a where a.courseHour > 41 or a.id <> 65) return a;7: match(a:student where name = '韩雪')-[e]-(b:department) return a.salary, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为130的person关联的person, 并将person有关的person的id的最大值赋值给person(b)的年龄, 接着查询person(b)的年龄小于130的person关联的person",
        "output": "match(a:person where a.id = 130)-[e:relates]->(b:person) let b.age = MAX((b:person)-[e2]-(c:person) => c.id) match(b:person where b.age < 130)-[e3:relates]->(d:person) return b.age, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为BIN的点还款的所有贷款,并对这些贷款的金额进行求和",
        "output": "match(a where a.name='BIN')-[e:repay]->(b:loan) return SUM(b.amount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以teach关系关联了course程序设计的teacher",
        "output": "match(a:course where a.name='程序设计')<-[e:teach]-(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为45的作家撰写的书, 并将书有关的作家的年龄的平均值赋值给书的价格, 接着查询书的价格小于45的书认识的书",
        "output": "match(a:author where a.id = 45)-[e:write]->(b:book) let b.price = AVG((b:book)-[e2]-(c:author) => c.age) match(b:book where b.price < 45)-[e3:knows]->(d:book) return b.price, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,height, 数据为(17,5634,161),(49,1222,174),(64,1682,154),(52,5609,163)的子查询作为输入表, 以属性salary作为相等条件,找出id为118的课程有关的部门的伙伴, 再找出和部门有关系的伙伴",
        "output": "with p as (select * from (VALUES(17,5634,161),(49,1222,174),(64,1682,154),(52,5609,163)) as t(id,salary,height))MATCH (a:course WHERE a.salary = p.salary AND (id = '118')) -[e ]-(b:department) -[e2:partner ]->(c) , (b:department) -[e3:partner ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出由医生李梅和马伟共同创建的点",
        "output": "match(a:doctor where a.name='李梅')-[e:creates]->(b)<-[e2:creates]-(c:doctor where c.name='马伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找与person李月存在person_knows_person关系,且与person徐科存在person_likes_person关系的person节点，返回这些person的age,及person李月的id,及person徐科的salary;2: 找出名为徐科的person,以及与其有关的person,并返回徐科的name和这些person的id;3: 请帮我查找和person韩强有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person;4: 帮我查询与名为黄梅和何科的点共同pay的,label为person的节点;",
        "output": "查询语句为:1: match(a:person where a.name='李月')-[e:person_knows_person]->(b:person)<-[e2:person_likes_person]-(c:person where c.name='徐科') return a.id,b.age,c.salary;2: match(a:person where name = '徐科')-[e]-(b:person) return a.name, b.id;3: match(a:person where a.name = '韩强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;4: match(a where a.name = '黄梅')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c where c.name = '何科') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出部门艺术学院的所有label为伙伴的边,并根据f1降序排列,返回26个",
        "output": "match(a:department where a.name = '艺术学院')-[e:partner]->(b) return b order by e.f1 desc limit 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出南区电影院发行且ID不是692的电影名称以及它们具有的标签。",
        "output": "match(a:cinema where a.id <> 692 and a.address = '南区')-[e:releases]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下周建国的朋友的朋友的关系",
        "output": "match(a:buyer where a.name='周建国')-[e:friend]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被comment Comment_456 belong的film",
        "output": "match(a:film)<-[e:belong]-(b:comment where b.name='Comment_456') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找180个账号LX001和Geaflow123,共同的朋友",
        "output": "match(a:account where a.name='LX001')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Geaflow123') return b limit 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为徐伟的节点teach的department或teacher",
        "output": "match(a where a.name='徐伟')-[e:teach]->(b:department | teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询company cooperate的university, 令university的level的值等于containuniversity的city的name的平均值, 再查找university cooperate的company",
        "output": "match(a:company)-[e:cooperate]->(b:university) let b.level = AVG((b:university)<-[e2:contain]-(c:city) => c.name) match(b:university)-[e3:cooperate]->(d:company) return b.level, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出何伟发表过的帖子，以及这些帖子关联的标签。返回这些帖子和标签的名字。",
        "output": "match(a where a.name = '何伟')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为3的点的id,salary,age",
        "output": "match(a where a.id = 3) return a.id, a.salary, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为Jimmy和韩月的点共同consult的,标签为seller的节点",
        "output": "match(a where a.name = 'Jimmy')-[e:consult]->(b:seller)<-[e2:consult]-(c where c.name = '韩月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 查找被病人马雪接受的处方;2: 请帮我查找所有部门以名字,地址,权重分组的id, 根据id降序排序;3: 请帮我查找类型为医生的所有点,并根据年龄从大到小排列;4: 返回前136个标签为doctor_diagnose_patient的边;5: 请帮我找出名为王红的点belong的department,并对这些点的weight进行求和;",
        "output": "查询语句为:1: match(a:prescription)<-[e:patient_accept_prescription]-(b:patient where b.name='马雪') return a, b;2: match(a:department) return a.id group by a.name, a.address, a.weight order by a.id desc;3: match(a:doctor) return a order by a.age desc;4: match(a)-[e:doctor_diagnose_patient]->(b) return e limit 136;5: match(a where a.name='王红')-[e:doctor_belong_department]->(b:department) return SUM(b.weight);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与贷款相关的账户节点，按上次登录时间、价值和名称分组并返回。",
        "output": "match(a:loan)-[e:deposit]-(b:account) return b.lastLoginTime, b.value, b.name group by b.lastLoginTime, b.value, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为83的标签关联的标签,和以拥有关系关联了这些标签的其他帖子",
        "output": "match(a:tag where a.id = 83)-[e]-(b:tag)<-[e2:has]-(c:post) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与郑强存在cancel关系的orders,orders与goods存在contain关系的点,返回这些点的price",
        "output": "match(a where a.name = '郑强')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询user赵月likes的repository, 令repository的lang等于repository的id, 返回user的age, repository的lang",
        "output": "match(a:user where a.name='赵月')-[e:likes]->(b:repository) let b.lang = b.id return a.age,b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找28个名字等于赵月或年龄在54到80之间的person,根据薪资从小到大排列",
        "output": "match(a:person where a.name = '赵月' or (a.age BETWEEN 54 AND 80)) return a order by a.salary asc limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询两个人的伴侣关系。",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person何科有关系的person的名字",
        "output": "match(a:person where a.name='何科')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找薪资为空或名字不是马思琪的person认识的person的名称,以及这些person 认识的person的名称",
        "output": "match(a:person where (a.salary is null) or a.name <> '马思琪')-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age的最小值加63减153的和",
        "output": "SUM(MIN(a.age) + 63 - 153)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以958,879,198,945,624作为请求点id, 源点的id等于输入表id,查询所有部门的朋友,或其朋友的朋友",
        "output": "with p as (select * from (VALUES(958),(879),(198),(945),(624)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e:friend ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,性别,薪资分组,计算薪资加薪资的值",
        "output": "return a.salary + a.salary group by a.age, a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有company以value分组的name, 根据name从大到小排序",
        "output": "match(a:company) return a.name group by a.value order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和repository JavaGuid之间有has关系的user",
        "output": "match(a:repository where a.name='JavaGuid')-[e:has]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出共同拥有名称为Post_320和Post_336的点，且标签为label的节点。",
        "output": "match(a where a.name = 'Post_320')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_336') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出prescription Prescription_102 contain的medicine,以及contain这些medicine的prescription",
        "output": "match(a:prescription where name = 'Prescription_102')-[e:contain]->(b:medicine)<-[e2:contain]-(c:prescription) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出名为'知网'和'中国军事论坛'的论坛公共节点。",
        "output": "match(a:forum where a.name='知网')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='中国军事论坛') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "大小乘大小的值",
        "output": "a.size * a.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为阿里和腾讯的,label为公司的点公共的伙伴节点的名单",
        "output": "match(a:company where a.name='阿里')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='腾讯') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为5的软件有关的软件的伙伴, 再返回和软件有关系的相关者",
        "output": "match(a:software where id = 5)-[e]-(b:software)-[e2:partner]->(c), (b:software)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与大学相关的课程节点，如果它们的学分大于4，则返回这些节点ID之和除以58的最大结果，以及这些节点的课时数对44取余的结果。",
        "output": "match(a:university)-[e]->(b:course where b.credit > 4) return MAX(SUM(b.id) / 58), b.courseHour % 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为马思思的点的,名字是大学英语且学分大于等于4的相关者,返回这些相关者的学分,和边的f0",
        "output": "match(a where a.name='马思思')-[e:relation]->(b where b.name = '大学英语' and b.credit >= 4) return b.credit,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算id除93的平均值",
        "output": "return AVG(a.id / 93) group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部源点类型是仓库,边类型是拥有,并且满足条件f0大于554或源点id不等于104或目标点id对13取余为566的边",
        "output": "match(a:repository)-[e:has where e.f0 > 554 or e.srcId <> 104 or e.targetId % 13 = 566]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找goods的1度的环",
        "output": "match(a:goods)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以514,670,185,780作为请求点id, 源点的id等于输入表id,请帮我找出类型是person_pay_person,且满足条件f0小于等于867的边",
        "output": "with p as (select * from (VALUES(514),(670),(185),(780)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_pay_person WHERE e.f0 <= 867 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询95个名为马月的点认识的标签为person的节点,且其身高不等于190且名字等于吴强",
        "output": "match(a where a.name='马月')-[e:knows]->(b:person where b.height <> 190 and b.name = '吴强') return b limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 查找67个和类型是账号的点有account_transfer_account关系的账号,且和这些账号有account_repay_loan关系的贷款;2: 查询名为XiaoHu和Faker的,标签为账号的点公共的朋友节点的名单;3: 查询person吴宏的label为相关者的边,并根据f0降序排列,返回169个;4: 找出与loan defaultName有loan_deposit_account关系的3跳以内的环;5: 查找和名为马雪的person有partner关系,或有partner的partner关系的company;6: 查找与贷款defaultName有loan_deposit_account关系的2度的环;7: 请帮我查找名为XiaoHu的点transfer的全部account,并对这些点的name进行求和;8: 查找id为69的person有关的贷款的相关者, 再查找和贷款有关系的相关者;9: 返回标签等于loan的所有点,并根据amount从大到小排列;",
        "output": "查询语句为:1: match(a:account)-[e:account_transfer_account]->(b:account)-[e2:account_repay_loan]->(c:loan) return c limit 67;2: match(a:account where a.name='XiaoHu')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Faker') return b.name;3: match(a:person where a.name = '吴宏')-[e:relation]->(b) return b order by e.f0 desc limit 169;4: match(a:loan where name = 'defaultName')-[e:loan_deposit_account]->{0,2}(b)->(a) return a.id, b.id as b_id;5: match(a:person where n.name=马雪)-[e:partner]->{1,2}(b:company) return b;6: match(a:loan where name = 'defaultName')-[e:loan_deposit_account]->{1,1}(b)->(a) return a.id, b.id as b_id;7: match(a where a.name='XiaoHu')-[e:account_transfer_account]->(b:account) return SUM(b.name);8: match(a:person where id = '69')-[e]-(b:loan)-[e2:relation]->(c), (b:loan)-[e3:relation]->(d) return a, b, c, d;9: match(a:loan) return a order by a.amount desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出34个与马科和黄宏都存在关系的医学节点。",
        "output": "match(a where a.name='马科')-[e]->(b:medicine)<-[e2]-(c where c.name='黄宏') return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,lastLoginTime,createTime, 数据为(43,2015-11-08,2034-05-10),(15,2018-01-29,2007-02-23),(97,2015-08-08,2003-07-08),(39,2014-07-04,2008-11-19)的子查询作为输入表, 以属性id作为相等条件,找出与公司微软有关,且与账号Light有关系的贷款节点",
        "output": "with p as (select * from (VALUES(43,2015-11-08,2034-05-10),(15,2018-01-29,2007-02-23),(97,2015-08-08,2003-07-08),(39,2014-07-04,2008-11-19)) as t(id,lastLoginTime,createTime))MATCH (a:company WHERE a.id = p.id AND (a.name = '微软')) -[e:company_apply_loan ]-(b:loan) -[e2:loan_deposit_account ]-(c:account WHERE c.name = 'Light') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师徐宏教的课程, 令教师的身高等于教师的id,令课程的价值等于课程的学分, 返回教师的身高, 课程的名字",
        "output": "match(a:teacher where a.name='徐宏')-[e:teach]->(b:course) let a.height = a.id,let b.value = b.credit return a.height,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询徐思琪咨询的卖家的商品",
        "output": "match(a:buyer where a.name = '徐思琪')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和公司有关联的大学节点,并根据其id,等级分组,返回id,等级,以及value的最大值对价值取余的个数",
        "output": "match(a:company)-[e:cooperate]-(b:university) return b.id, b.level, COUNT(MAX(b.value) % b.value) group by b.id, b.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(41,'美团',228), 以属性value作为相等条件,请帮我查找id为65的点的薪资,名字,性别",
        "output": "with p as (select * from (VALUES(41,'美团',228)) as t(id,name,value))MATCH (a WHERE a.value = p.value AND (a.id = '65')) RETURN a.salary, a.name, a.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为王若涵的点的,id为29且age小于56的relation,返回这些relation的gender,和边的weight,targetId,f0",
        "output": "match(a where a.name='王若涵')-[e:relation]->(b where b.id = 29 and b.age < 56) return b.gender,e.weight, e.targetId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查找源点label为person,边label为person_likes_person,且满足条件f0小于等于883或f1不是false,且weight大于等于139的边;2: 帮我查询person郑梅pay的person,被其他person pay的数量;3: 查询源点name不等于郑轩,name不是郑雪,或gender不等于male,边标签等于person_pay_person,且满足条件srcId为空的边,返回这些边的weight对weight取余的和;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person where (e.f0 <= 883 or e.f1 <> false) and e.weight >= 139]->(b) return e;2: match(a:person where a.name='郑梅')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c:person) return COUNT(c);3: match(a where (a.name <> '郑轩' and a.name <> '郑雪') or a.gender <> 'male')-[e:person_pay_person where (e.srcId is null)]->(b) return SUM(e.weight % e.weight);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找43个名为黄强的点撰写的label为书的节点,且节点名字是三体或id等于50",
        "output": "match(a where a.name='黄强')-[e:write]->(b:book where b.name = '三体' or b.id = 50) return b limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为杜思琪的节点关联的person",
        "output": "match(a where a.name='杜思琪')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找读者喜欢的书,返回其源点的薪资对9344取余的最大值,以及目标点的价格对36取余加465的值",
        "output": "match(a:reader)-[e:likes]->(b:book) return MAX(a.salary % 9344), b.price % 36 + 465",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person周强 拥有的账号,返回账号 转账的账号的id除id的个数",
        "output": "match(a:person where name = '周强')-[e:own]->(b:account)-[e2:transfer]->(c:account) return COUNT(c.id / c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 返回与company华为有company_belong_city关系的1跳以内的环;2: 查询和company有关联的university节点,并根据其value,id分组,返回value,id,以及id的求和值加66的值;3: 请帮我找出标签等于大学的点,并根据等级从大到小排列;4: 查找城市纽约的全部类型为伙伴的边,并根据源点id升序排列,返回93个;5: 帮我查询和大学有关联的城市节点,并根据其名字,价值,id分组,返回名字,价值,id,以及人数减9458的值;6: 请帮我查找和city有关联的university节点,并根据其id,level分组,返回id,level,以及value减6的个数;7: 给出标签为university,名为清华大学的点,返回这些点的id;",
        "output": "查询语句为:1: match(a:company where name = '华为')-[e:company_belong_city]->{0,0}(b)->(a) return a.id, b.id as b_id;2: match(a:company)-[e:company_cooperate_university]-(b:university) return b.value, b.id, SUM(b.id) + 66 group by b.value, b.id;3: match(a:university) return a order by a.level desc;4: match(a:city where a.name = '纽约')-[e:partner]->(b) return b order by e.srcId asc limit 93;5: match(a:university)-[e:university_belong_city]-(b:city) return b.name, b.value, b.id, b.peopleNumber - 9458 group by b.name, b.value, b.id;6: match(a:city)-[e:city_contain_university]-(b:university) return b.id, b.level, COUNT(b.value - 6) group by b.id, b.level;7: match(a:university where a.name = '清华大学') return a.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点和目标点都是person，且类型为family的边。",
        "output": "match(a:person)-[e:family]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与department呼吸科有has关系的医生，以及与医生马国强有creates关系的处方，并返回它们。",
        "output": "match(a:department where a.name = '呼吸科')-[e:has]->(b:doctor),(c:doctor where c.name = '马国强')-[e2:creates]->(d:prescription) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,salary,id, 数据为(186,3580,21),(182,6539,66),(159,2926,22),(188,7477,12), 源点的height等于输入表height,请帮我找出病人接受的处方,返回其源点的身高除身高的值,以及目标点的weight的平均值减263的值",
        "output": "with p as (select * from (VALUES(186,3580,21),(182,6539,66),(159,2926,22),(188,7477,12)) as t(height,salary,id))MATCH (a:patient WHERE a.height = p.height) -[e:patient_accept_prescription ]->(b:prescription) RETURN a.height / a.height, AVG(b.weight) - 263 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,age, 数据为('Amily',158,20),('马雪',165,23),('赵强',193,77), 以属性height作为相等条件,返回名为周思思和陈宏的,标签等于用户的点公共的伙伴节点的名单",
        "output": "with p as (select * from (VALUES('Amily',158,20),('马雪',165,23),('赵强',193,77)) as t(name,height,age))MATCH (a:user WHERE a.height = p.height AND (a.name = '周思思')) -[e:partner ]->(b) <-[e2:partner ]-(c:user WHERE c.name = '陈宏') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出编辑的1跳以内的环",
        "output": "match(a:publisher)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出韩强创建的评论节点所属的电影",
        "output": "match(a:person where a.name = '韩强')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前187个类型为family的边",
        "output": "match(a)-[e:family]->(b) return e limit 187",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与doctor黄思琪有belong关系的1度以内的环",
        "output": "match(a:doctor where name = '黄思琪')-[e:belong]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找观看电影建国大业的person,和这些person喜欢的评论",
        "output": "match(a:film where name = '建国大业')<-[e:watch]-(b:person)-[e2:likes]->(c:comment) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为张若涵的点的,名字不等于Comment_260,字数小于572的相关者,返回这些相关者的id,和边的f1,源点id",
        "output": "match(a where a.name='张若涵')-[e:relation]->(b where b.name <> 'Comment_260' and b.wordCount < 572) return b.id,e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型是帖子,目标点类型是标签,类型是用户或论坛的边",
        "output": "match(a:post)-[e:user | forum]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找医生黄科的全部伙伴,的目标点id乘78乘170的值",
        "output": "match(a:doctor where a.name= '黄科')-[e:partner]->(b) return e.targetId * 78 * 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为韩若涵和杜若涵的点共同喜欢的,标签为评论的节点",
        "output": "match(a where a.name = '韩若涵')-[e:likes]->(b:comment)<-[e2:likes]-(c where c.name = '杜若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找订单类型为Order_289的点，并返回它们的名字。",
        "output": "match(a:orders where a.name = 'Order_289') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找199个名为张月的点创造的label为合并请求的节点,且节点id小于等于64或创建时间不等于2001年10月31日",
        "output": "match(a where a.name='张月')-[e:creates]->(b:pullRequest where b.id <= 64 or b.createTime <> '2001-10-31') return b limit 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为中国军事论坛和推特的,标签等于论坛的点公共的朋友节点的名单",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='推特') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 帮我查询university中国科技大学的所有类型为friend的边,并根据targetId升序排列,返回118个;2: 请帮我查找全部源点类型是city,目标点类型是country,类型是city_belong_country的边;3: 找出名为谷歌和字节的,类型是company的点公共的friend节点的名单;4: 返回与university有关系的city节点,且city节点的area大于95147,并返回这些点的value乘887的值,以及id除27的值;5: 找出大学浙江大学合作的公司,被其他大学合作的数量;6: 查找95个company阿里和华为,共同的partner;",
        "output": "查询语句为:1: match(a:university where a.name = '中国科技大学')-[e:friend]->(b) return b order by e.targetId asc limit 118;2: match(a:city)-[e:city_belong_country]->(b:country) return e;3: match(a:company where a.name='谷歌')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='字节') return b.name;4: match(a:university)-[e]->(b:city where b.area > 95147) return b.value * 887, b.id / 27;5: match(a:university where a.name='浙江大学')-[e:university_cooperate_company]->(b:company)<-[e2:university_cooperate_company]-(c:university) return COUNT(c);6: match(a:company where a.name='阿里')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='华为') return b limit 95;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为计算机学院的节点拥有的部门",
        "output": "match(a where a.name='计算机学院')-[e:has]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出作家的三角的环,边标签等于撰写, 并返回这些点的id",
        "output": "match(a:author)-[e:write]->(b)-[e2:write]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资加9211的求和值",
        "output": "SUM(a.salary + 9211)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,height, 数据为(59,'徐伟',168),(17,'王思琪',173), 源点的id等于输入表id,帮我查询person认识的person,返回其源点的height的和对170取余的值,以及目标点的薪资乘薪资对170取余的平均值",
        "output": "with p as (select * from (VALUES(59,'徐伟',168),(17,'王思琪',173)) as t(id,name,height))MATCH (a:person WHERE a.id = p.id) -[e:person_knows_person ]->(b:person) RETURN SUM(a.height) % 170, AVG(b.salary * b.salary % 170) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前155个满足条件salary为空且gender是male的author",
        "output": "match(a:author where (a.salary is null) and a.gender = 'male') return a limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为好视影院的电影院",
        "output": "match(a:cinema where a.name = '好视影院') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person的三角的环,边类型是friend, 并返回这些点的id",
        "output": "match(a:person)-[e:friend]->(b)-[e2:friend]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为contain,并且满足条件srcId小于等于822且f1不等于false,或f1不是true的边",
        "output": "match(a)-[e:contain where (e.srcId <= 822 and e.f1 <> false) or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和名为腾讯的公司有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:company where n.name=腾讯)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('浙江大学',3,99)作为请求表数据,属性分别为name,level,id, 源点的level等于输入表level,查找大学以价值,id分组的价值, 根据价值升序排序",
        "output": "with p as (select * from (VALUES('浙江大学',3,99)) as t(name,level,id))MATCH (a:university WHERE a.level = p.level) RETURN a.value GROUP BY a.value, a.id ORDER BY a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询113个和label为person的点有家人关系的person,且和这些person有父母关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person) return c limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person有关系的person节点,且person节点的薪资除8548小于61,并返回这些person的年龄对33取余对173取余的平均值,以及person的身高对160取余的值",
        "output": "match(a:person)-[e]->(b:person where b.salary / 8548 < 61) return AVG(b.age % 33 % 173), b.height % 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和用户郑国强有关的用户,再返回和郑国强发布的其他帖子,返回它们",
        "output": "match(a:user where a.name = '郑国强')-[e]-(b:user), (a:user)-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和标签等于部门的点有拥有关系的教师,并且和这些教师有教关系的课程,并且和这些课程有属于关系的部门",
        "output": "match(a:department)-[e:has]->(b:teacher)-[e2:teach]->(c:course)-[e3:belong]->(d:department) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为孙科的,薪资大于4596的伙伴,返回这些伙伴的薪资,和边的权重",
        "output": "match(a where a.name='孙科')-[e:partner]->(b where b.salary > 4596) return b.salary,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为账号的点,返回28个",
        "output": "match(a:account) return a limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "归还由Light账户偿还的贷款",
        "output": "match(a:loan)<-[e:repay]-(b:account where b.name='Light') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和帖子Post_231有关系的用户,返回这些点的薪资",
        "output": "match(a:post where a.name='Post_231')-[e]-(b:user) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以113作为请求点id, 以属性id作为相等条件,给出user黄建国likes的post节点has的tag",
        "output": "with p as (select * from (VALUES(113)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '黄建国')) -[e:user_likes_post ]->(b:post) -[e2:post_has_tag ]->(c:tag) RETURN c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找city北京belong的country,被其他city belong的数量",
        "output": "match(a:city where a.name='北京')-[e:city_belong_country]->(b:country)<-[e2:city_belong_country]-(c:city) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与Account Light和TheShy之间存在转会关系的球员。",
        "output": "match(a:account where a.name='Light')-[e:transfer]->(b)<-[e2:transfer]-(c:account where c.name='TheShy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与国家英国有关系的城市的面积",
        "output": "match(a:country where a.name='英国')-[e]-(b:city) return b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找一下这部电影的配音演员，或者配音演员的配音演员。",
        "output": "match(a:film)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('Prescription_118',95,143),('Prescription_432',52,901)作为请求表数据,属性分别为name,id,weight, 以属性id作为相等条件,给出全部源点label为user,边label为user_likes_repository的边,返回这些边的weight乘131.88的值,和weight的最大值乘154.56的最小值",
        "output": "with p as (select * from (VALUES('Prescription_118',95,143),('Prescription_432',52,901)) as t(name,id,weight))MATCH (a:user WHERE a.id = p.id) -[e:user_likes_repository ]->(b) RETURN e.weight * 131.88, MIN(MAX(e.weight) * 154.56) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找91个等级大于等于28,价值为空,价值为空的大学,根据价值从小到大排列",
        "output": "match(a:university where a.level >= 28 and (a.value is null) and (a.value is null)) return a order by a.value asc limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person周梅拥有的账号,被其他账号转账的数量",
        "output": "match(a:person where a.name='周梅')-[e:own]->(b:account)<-[e2:transfer]-(c:account) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以356,272,51,322作为请求点id, 源点的id等于输入表id,帮我查询和reader有关联的book节点,并根据其name分组,返回name,以及price乘70除90乘85的值",
        "output": "with p as (select * from (VALUES(356),(272),(51),(322)) as t(id)) MATCH (a:reader WHERE a.id = p.id) -[e:reader_likes_book ]-(b:book) RETURN b.name, b.price * 70 / 90 * 85 GROUP BY b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回名为周轩的person,以及与其有关的person,并返回周轩的年龄和这些person的名字;2: 找出从person徐雪出发,经过label为person_knows_person的边,走3到6跳到达的person点;3: 找出名为陈科和赵宏的,类型是person的点公共的朋友节点的名单;4: 请帮我找出与person王雪和马若涵都存在person_pay_person关系的点;5: 查找和person有关联的person节点,并根据其id,年龄,薪资分组,返回id,年龄,薪资,以及身高减185乘73的最小值;6: 查询person赵宏的全部标签等于relation的边,并根据srcId从小到大排列,返回52个;7: 查询与person孙建国有person_pay_person关系的2度以内的环;8: 给出所有person以性别分组的薪资, 根据薪资从大到小排序;",
        "output": "查询语句为:1: match(a:person where name = '周轩')-[e]-(b:person) return a.age, b.name;2: match(a:person where a.name='徐雪')-[e:person_knows_person]->{3,6}(b:person) return b;3: match(a:person where a.name='陈科')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵宏') return b.name;4: match(a:person where a.name='王雪')-[e:person_pay_person]->(b)<-[e2:person_pay_person]-(c:person where c.name='马若涵') return b;5: match(a:person)-[e:person_likes_person]-(b:person) return b.id, b.age, b.salary, MIN((b.height - 185) * 73) group by b.id, b.age, b.salary;6: match(a:person where a.name = '赵宏')-[e:relation]->(b) return b order by e.srcId asc limit 52;7: match(a:person where name = '孙建国')-[e:person_pay_person]->{0,1}(b)->(a) return a.id, b.id as b_id;8: match(a:person) return a.salary group by a.gender order by a.salary desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与何若涵和黄轩有关联的公共人物节点列表，标签为'person'。",
        "output": "match(a:person where a.name='何若涵')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='黄轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我查找全部和学生李建聪有关系的部门节点,返回这些点的id;2: 请帮我查找3个id为29且大小不为空,或大小为292的部门,根据价值升序排列;3: 请帮我找出所有大学以id,名字分组的id, 根据id从大到小排序;4: 查询名为土木学院的点拥有的全部学生,并对这些点的薪资进行求和;5: 查询学生孙思琪选择的课程,被其他教师教的数量;6: 给出源点类型为student,目标点类型为course,类型为student_selects_course的边;7: 请帮我找出所有student的relation,或其relation的relation;",
        "output": "查询语句为:1: match(a:student where a.name='李建聪')-[e]-(b:department) return b.id;2: match(a:department where (a.id = 29 and (a.size is not null)) or a.size = 292) return a order by a.value asc limit 3;3: match(a:university) return a.id group by a.id, a.name order by a.id desc;4: match(a where a.name='土木学院')-[e:department_has_student]->(b:student) return SUM(b.salary);5: match(a:student where a.name='孙思琪')-[e:student_selects_course]->(b:course)<-[e2:teacher_teach_course]-(c:teacher) return COUNT(c);6: match(a:student)-[e:student_selects_course]->(b:course) return e;7: match(a:student)-[e:relation]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找到叫做越南的国家",
        "output": "match(a:country where a.name = '越南') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 找出前167个标签等于buyer_creates_orders的边;2: 给出所有与订单有关系的卖家节点,且卖家节点的名字不等于64,并返回这些点的id除id的最大值,以及身高加179的最大值;3: 请帮我找出47个与短袖和鞋子都存在关系的seller节点;",
        "output": "查询语句为:1: match(a)-[e:buyer_creates_orders]->(b) return e limit 167;2: match(a:orders)-[e]->(b:seller where b.name <> 64) return MAX(b.id / b.id), MAX(b.height + 179);3: match(a where a.name='短袖')-[e]->(b:seller)<-[e2]-(c where c.name='鞋子') return b limit 47;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是课程的点有属于关系的部门,并且和这些部门有拥有关系的学生,并且和这些学生有选择关系的课程",
        "output": "match(a:course)-[e:belong]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和名为陈雪的学生有朋友关系,或有朋友的朋友关系的课程",
        "output": "match(a:student where n.name=陈雪)-[e:friend]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "在百度贴吧中包含forum的帖子",
        "output": "match(a:post)<-[e:contain]-(b:forum where b.name='百度贴吧') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和公司蚂蚁集团有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的贷款",
        "output": "match(a:company where a.name = '蚂蚁集团')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:loan) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取department体育学院的所有教师，以及他们所教课程的ID和名称。",
        "output": "match(a:department where name = '体育学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出Comment_488所属的电影，然后找出创建Comment_488的人，一起返回。",
        "output": "match(a where a.name = 'Comment_488')-[e:belong]->(b:film),(a where a.name = 'Comment_488')<-[e2:creates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为华为的节点申请的账号",
        "output": "match(a where a.name='华为')-[e:apply]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询前191个类型是person_family_person的边",
        "output": "match(a)-[e:person_family_person]->(b) return e limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回74个和类型为seller的点有ask关系的buyer,以及和这些buyer有look关系的goods",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点身高不等于176,身高小于等于198,目标点薪资加7640的平均值小于196或年龄小于等于15,且类型是支付的边",
        "output": "match(a where a.height <> 176 and a.height <= 198)-[e:pay]->(b where AVG(b.salary + 7640) < 196 or b.age <= 15) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为杜若涵的人，并返回他们的ID、工资和姓名。",
        "output": "match(a:person where a.name = '杜若涵') return a.id, a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出forum的三角的环,边类型是contain, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为person的点,返回157个",
        "output": "match(a:person) return a limit 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部id为109的doctor关联的patient,和以diagnose关系关联了这些patient的其他doctor",
        "output": "match(a:doctor where a.id = '109')-[e]-(b:patient)<-[e2:doctor_diagnose_patient]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出陈轩和王月的共同朋友，一共有12人。",
        "output": "match(a:person where a.name='陈轩')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='王月') return b limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person王思琪commits的software,被其他software uses的数量",
        "output": "match(a:person where a.name='王思琪')-[e:commits]->(b:software)<-[e2:uses]-(c:software) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我找出和person李科有关的person,再请帮我找出和李科person_family_person的其他person,返回它们;2: 请帮我找出名为王思思的点认识的person;3: 请帮我查找全部与person孙强有关系的person的gender;4: 给出191个与Alice和Jimmy都存在关系的person节点;5: 返回以认识关系关联了person韩伟的person;",
        "output": "查询语句为:1: match(a:person where a.name = '李科')-[e]-(b:person), (a:person)-[e2:person_family_person]->(c:person) return a, b, c;2: match(a where a.name='王思思')-[e:knows]->(b:person) return b;3: match(a:person where a.name='孙强')-[e]-(b:person) return b.gender;4: match(a where a.name='Alice')-[e]->(b:person)<-[e2]-(c where c.name='Jimmy') return b limit 191;5: match(a:person where a.name='韩伟')<-[e:knows]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与赵思琪和王建国都有关系的151个处方节点",
        "output": "match(a where a.name='赵思琪')-[e]->(b:prescription)<-[e2]-(c where c.name='王建国') return b limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,level,name, 数据为(941,1,'四川大学'),(8,1,'武汉大学'),(859,1,'华中科技大学'),(124,2,'复旦大学')的子查询作为输入表, 以属性level作为相等条件,查询公司字节的所有类型为相关者的边,并根据目标点id从大到小排列,返回163个",
        "output": "with p as (select * from (VALUES(941,1,'四川大学'),(8,1,'武汉大学'),(859,1,'华中科技大学'),(124,2,'复旦大学')) as t(value,level,name))MATCH (a:company WHERE a.level = p.level AND (a.name = '字节')) -[e:relation ]->(b) RETURN b ORDER BY e.targetId DESC LIMIT 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 给出买家周思思查看的商品,被其他买家查看的数量;2: 返回与名为马雪和孙伟的点共同创造的,label为订单的节点;3: 找出全部buyer的relation,或其relation的relation;4: 帮我查询源点id小于39,边标签为buyer_creates_orders,且timeStamp不是2003年03月13日且timeStamp不等于2029年06月01日,或targetId不为空的边,返回这些边的f0乘900的值;5: 帮我查询名为马建聪和杜科的,标签为seller的点公共的friend节点的名单;6: 给出全部orders以value分组的value, 根据value升序排序;7: 查询25个名为郑雪的点consult的标签等于seller的节点,且其gender不是famale;8: 帮我查询和buyer有关联的seller节点,并根据其id,height分组,返回id,height,以及id乘id的和;",
        "output": "查询语句为:1: match(a:buyer where a.name='周思思')-[e:buyer_look_goods]->(b:goods)<-[e2:buyer_look_goods]-(c:buyer) return COUNT(c);2: match(a where a.name = '马雪')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c where c.name = '孙伟') return b;3: match(a:buyer)-[e:relation]->{1,2}(b) return b;4: match(a where a.id < 39)-[e:buyer_creates_orders where (e.timeStamp <> '2003-03-13' and e.timeStamp <> '2029-06-01') or (e.targetId is not null)]->(b) return e.f0 * 900;5: match(a:seller where a.name='马建聪')-[e:friend]->(b)<-[e2:friend]-(c:seller where c.name='杜科') return b.name;6: match(a:orders) return a.value group by a.value order by a.value asc;7: match(a where a.name='郑雪')-[e:buyer_consult_seller]->(b:seller where b.gender <> 'famale') return b limit 25;8: match(a:buyer)-[e:buyer_consult_seller]-(b:seller) return b.id, b.height, SUM(b.id * b.id) group by b.id, b.height;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与账号XiaoHu有转账关系并与其贷款defaultName有还款关系的账号ID、XiaoHu账号的价值和defaultName贷款的金额。",
        "output": "match(a:account where a.name='XiaoHu')-[e:transfer]->(b:account)<-[e2:repay]-(c:loan where c.name='defaultName') return a.value,b.id,c.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回陈科创建的所有订单，以及这些订单中包含的商品销售量。",
        "output": "match(a where a.name = '陈科')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回重庆大学。",
        "output": "match(a:university where a.name = '重庆大学') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出76个forum中国军事论坛和CSDN,共同的partner",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:partner]->(b)<-[e2:partner]-(c:forum where c.name='CSDN') return b limit 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出doctor陈轩的全部relation,的srcId除135的值",
        "output": "match(a:doctor where a.name= '陈轩')-[e:relation]->(b) return e.srcId / 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的和乘61的平均值",
        "output": "AVG(SUM(a.id) * 61)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与loan_95存在deposit关系的account,account与account存在transfer关系的点,返回这些点的isBlock",
        "output": "match(a where a.name = 'loan_95')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找address不等于C栋且name是横店影院的cinema releases的film的名称,以及这些film has的tag的名称",
        "output": "match(a:cinema where a.address <> 'C栋' and a.name = '横店影院')-[e:releases]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与名为吴伟和赵伟的点共同ask的,标签等于buyer的节点",
        "output": "match(a where a.name = '吴伟')-[e:ask]->(b:buyer)<-[e2:ask]-(c where c.name = '赵伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,value, 数据为('Bilibili',36,67),('Bilibili',33,709), 源点的value等于输入表value,找出和大学有关联的城市节点,并根据其面积,人数分组,返回面积,人数,以及value的数量加974的个数",
        "output": "with p as (select * from (VALUES('Bilibili',36,67),('Bilibili',33,709)) as t(name,id,value))MATCH (a:university WHERE a.value = p.value) -[e:university_belong_city ]-(b:city) RETURN b.area, b.peopleNumber, COUNT(COUNT(b.value) + 974) GROUP BY b.area, b.peopleNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和处方Prescription_458有关的处方,再返回和Prescription_458包含的其他药品,返回它们",
        "output": "match(a:prescription where a.name = 'Prescription_458')-[e]-(b:prescription), (a:prescription)-[e2:contain]->(c:medicine) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字分组,计算年龄减年龄的平均值",
        "output": "return AVG(a.age - a.age) group by a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有郑梅的点accept的prescription,然后查找郑梅被diagnose的doctor,一起返回",
        "output": "match(a where a.name = '郑梅')-[e:accept]->(b:prescription),(a where a.name = '郑梅')<-[e2:diagnose]-(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 请帮我查找全部源点标签等于person,目标点标签等于film,标签等于person_watch_film的边;2: 给出全部和person点有likes关系的comment节点,且边满足条件f1不等于true,目标comment节点id大于等于96;3: 给出前1个label为film_has_tag的边;",
        "output": "查询语句为:1: match(a:person)-[e:person_watch_film]->(b:film) return e;2: match(a:person)-[e:person_likes_comment where e.f1 <> true]->(b:comment where b.id >= 96) return b;3: match(a)-[e:film_has_tag]->(b) return e limit 1;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减63的平均值",
        "output": "AVG(a.id - 63)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与类型为'人'的实体建立支付和喜欢关系的另外97个人。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:likes]->(c:person) return c limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回149个与韩建国和杜强都存在关系的software节点;2: 请帮我查找与person赵轩和李建国都存在person_commits_software关系的点;3: 找出以knows关系关联了person马建国的person;",
        "output": "查询语句为:1: match(a where a.name='韩建国')-[e]->(b:software)<-[e2]-(c where c.name='杜强') return b limit 149;2: match(a:person where a.name='赵轩')-[e:person_commits_software]->(b)<-[e2:person_commits_software]-(c:person where c.name='李建国') return b;3: match(a:person where a.name='马建国')<-[e:person_knows_person]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出喜欢仓库Tugraph的用户,和这些用户喜欢的仓库",
        "output": "match(a:repository where name = 'Tugraph')<-[e:likes]-(b:user)-[e2:likes]->(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李国强存在诊断关系的病人,病人与处方存在接受关系的点,返回这些点的创建时间",
        "output": "match(a where a.name = '李国强')-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有一个叫做文学院的地方？",
        "output": "match(a:department where a.name = '文学院') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找Comment_208所属电影节点has的标签。",
        "output": "match(a:comment where a.name = 'Comment_208')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为createTime,wordCount,price, 数据为(2015-01-22,870,20),(2010-04-15,637,68),(2029-05-21,427,83),(2020-10-29,296,82)的子查询作为输入表, 源点的price等于输入表price,请帮我找出所有名为呐喊的点的,价格为空的引用,返回这些引用的id,和边的f0,源点id",
        "output": "with p as (select * from (VALUES(2015-01-22,870,20),(2010-04-15,637,68),(2029-05-21,427,83),(2020-10-29,296,82)) as t(createTime,wordCount,price))MATCH (a WHERE a.price = p.price AND (a.name = '呐喊')) -[e:book_refers_book ]->(b WHERE b.price IS NULL) RETURN b.id, e.f0, e.srcId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和标签等于person的点有认识关系的person,以及和这些person有喜欢关系的person,以及和这些person有喜欢关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:likes]->(c:person)-[e3:likes]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出buyer类型的源点和creates类型的边，然后将这些边的weight除以193.48，并将结果与srcId相乘23。",
        "output": "match(a:buyer)-[e:creates]->(b) return e.weight / 193.48, e.srcId * 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与账号类型的点有还款关联的贷款，以及与这些贷款有存款关联的账号，同时还要找到与这些账号有转账关联的账号。",
        "output": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "权重除权重加783的值",
        "output": "a.weight / a.weight + 783",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有id为177的电影关联的电影,和以上映关系关联了这些电影的其他电影院",
        "output": "match(a:film where a.id = 177)-[e]-(b:film)<-[e2:releases]-(c:cinema) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点标签等于person,边标签等于属于的边,返回这些边的源点id对157取余的最小值,和源点id减156的值",
        "output": "match(a:person)-[e:belong]->(b) return MIN(e.srcId % 157), e.srcId - 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回王宏的伙伴的伙伴的伙伴。",
        "output": "match(a:user where a.name='王宏')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出人口至少为69048且名为'英国'的国家所包含的所有城市的名称，以及这些城市所在的国家名称。",
        "output": "match(a:country where a.name = '英国' and a.peopleNumber >= 69048)-[e:contain]->(b:city)-[e2:belong]->(c:country) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与编辑张科有关系的书的字数",
        "output": "match(a:publisher where a.name='张科')-[e]-(b:book) return b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 查询与buyer有关系的orders节点,且orders节点的name等于Order_432,并返回这些点的id对36取余的平均值,以及id除76的求和值;2: 给出满足条件sellerNumber不是825.14的节点;3: 查询112个与椅子和键盘都存在关系的商品节点;4: 返回和买家有关联的商品节点,并根据其价格,名字分组,返回价格,名字,以及销量加1455.58的求和值;5: 请帮我找出与seller周思琪有seller_has_goods关系的3度的环;6: 请帮我找出与名为周雪和王科的点共同创造的,标签为订单的节点;7: 查找和买家赵宏有buyer_creates_orders关系的订单,再查找以buyer_cancel_orders关系关联了赵宏的订单;8: 给出前159个id不为空或age不等于24的buyer;9: 请帮我查找以咨询关系关联了卖家黄月的买家;",
        "output": "查询语句为:1: match(a:buyer)-[e]->(b:orders where b.name = 'Order_432') return AVG(b.id % 36), SUM(b.id / 76);2: match(a where a.sellerNumber <> 825.14) return a;3: match(a where a.name='椅子')-[e]->(b:goods)<-[e2]-(c where c.name='键盘') return b limit 112;4: match(a:buyer)-[e:buyer_look_goods]-(b:goods) return b.price, b.name, SUM(b.sellerNumber + 1455.58) group by b.price, b.name;5: match(a:seller where name = '周思琪')-[e:seller_has_goods]->{2,2}(b)->(a) return a.id, b.id as b_id;6: match(a where a.name = '周雪')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c where c.name = '王科') return b;7: match(a:buyer where a.name = '赵宏')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '赵宏')<-[e2:buyer_cancel_orders]-(c:orders)return a, b, c;8: match(a:buyer where (a.id is not null) or a.age <> 24) return a limit 159;9: match(a:seller where a.name='黄月')<-[e:buyer_consult_seller]-(b:buyer) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表652, 源点的id等于输入表id,返回名为浙江大学和重庆大学的,label为大学的点公共的朋友节点的名单",
        "output": "with p as (select * from (VALUES(652)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name = '浙江大学')) -[e:friend ]->(b) <-[e2:friend ]-(c:university WHERE c.name = '重庆大学') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为吴国强的点accept的所有prescription,并对这些prescription的createTime进行求和",
        "output": "match(a where a.name='吴国强')-[e:accept]->(b:prescription) return SUM(b.createTime)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,age,salary, 数据为('徐建聪',35,4125), 源点的age等于输入表age,查找和person何月有关的person,再查找和何月person_parent_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES('徐建聪',35,4125)) as t(name,age,salary))MATCH (a:person WHERE a.age = p.age AND (a.name = '何月')) -[e ]-(b:person) , (a:person) -[e2:person_parent_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被company华为cooperate的university,和华为belong的city",
        "output": "match(a:university)<-[e:cooperate]-(b:company where name = '华为')-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找全部与post有关系的post节点,且post节点的name不是Post_392,并返回这些点的id除57加725的最小值,以及value除53的求和值",
        "output": "match(a:post)-[e]->(b:post where b.name <> 'Post_392') return MIN(b.id / 57 + 725), SUM(b.value / 53)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和评论点有属于关系的电影节点,且边满足条件f0等于717,目标电影节点满足条件id不等于37",
        "output": "match(a:comment)-[e:belong where e.f0 = 717]->(b:film where b.id <> 37) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person孙思琪knows的person,和孙思琪buy的software",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '孙思琪')-[e2:buy]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person王轩关联的person, 令person(b)的名字等于person(a)的名字,令person的年龄等于person的身高乘身高,令person(a)的年龄等于person(b)的名字, 返回person(a)的id, person(b)的性别",
        "output": "match(a:person where a.name='王轩')-[e:relates]->(b:person) let b.name = a.name,let b.age = b.height * b.height,let a.age = b.name return a.id,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与蚂蚁集团有关系的人。",
        "output": "match(a:company where a.name='蚂蚁集团')<-[e:belong]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出国家澳大利亚包含的城市,以及包含这些城市的国家, 令国家的面积等于国家的面积乘52436加88587乘70453, 返回国家(a)的名字,城市(b)的id,国家(c)的面积",
        "output": "match(a:country where name = '澳大利亚')-[e:contain]->(b:city)<-[e2:contain]-(c:country) let c.area = (c.area * 52436 + 88587) * 70453 return a.name,b.id,c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查找与书少年闰土有book_refers_book关系的1度的环",
        "output": "match(a:book where name = '少年闰土')-[e:book_refers_book]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表757,2,222,678,152, 以属性id作为相等条件,帮我查询全部id为15的company关联的university,和以cooperate关系关联了这些university的其他company",
        "output": "with p as (select * from (VALUES(757),(2),(222),(678),(152)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.id = '15')) -[e ]-(b:university) <-[e2:company_cooperate_university ]-(c:company) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出seller以height,name,salary分组的gender, 根据gender升序排序",
        "output": "match(a:seller) return a.gender group by a.height, a.name, a.salary order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id小于等于13且名字不等于Sam的用户发布的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:user where a.id <= 13 and a.name <> 'Sam')-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为83的person knows的person, 并将person有关的person的height的和赋值给person(b)的id, 接着查询person(b)的id小于83的person likes的person",
        "output": "match(a:person where a.id = 83)-[e:knows]->(b:person) let b.id = SUM((b:person)-[e2]-(c:person) => c.height) match(b:person where b.id < 83)-[e3:likes]->(d:person) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person韩强的全部label为伙伴的边,并根据权重从小到大排列,返回151个",
        "output": "match(a:person where a.name = '韩强')-[e:partner]->(b) return b order by e.weight asc limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对72取余的个数",
        "output": "COUNT(a.age % 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与用户杜若涵和帖子Post_233有关的标签节点，并返回它们的ID和名称。",
        "output": "match(a:user where a.name='杜若涵')-[e]->(b:tag)<-[e2]-(c:post where c.name='Post_233') return b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有商品点，按照销量排序",
        "output": "match(a:goods) return a order by a.sellerNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找和书有关联的书节点,并根据其创建时间,字数分组,返回创建时间,字数,以及字数除646的最小值;2: 查询id为30的点的性别;3: 查询author郑伟的partner的partner的partner;4: 帮我查询名为呐喊的book;5: 请帮我找出全部和名为韩宏的作家有朋友关系,或有朋友的朋友关系的作家;6: 请帮我找出全部读者以id,薪资,年龄分组的性别, 根据性别降序排序;7: 给出被编辑徐轩发布的书;",
        "output": "查询语句为:1: match(a:book)-[e:book_refers_book]-(b:book) return b.createTime, b.wordCount, MIN(b.wordCount / 646) group by b.createTime, b.wordCount;2: match(a where a.id = '30') return a.gender;3: match(a:author where a.name='郑伟')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d;4: match(a:book where a.name = '呐喊') return a;5: match(a:author where n.name=韩宏)-[e:friend]->{1,2}(b:author) return b;6: match(a:reader) return a.gender group by a.id, a.salary, a.age order by a.gender desc;7: match(a:book)<-[e:publisher_publish_book]-(b:publisher where b.name='徐轩') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有user以salary分组的id, 根据id降序排序",
        "output": "match(a:user) return a.id group by a.salary order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询处方笺编号为401的处方。",
        "output": "match(a:prescription where a.name = 'Prescription_401') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(6844,73,'famale'),(9336,59,'famale')作为请求表数据,属性分别为salary,id,gender, 以属性gender作为相等条件,找出所有和course程序设计有关系的course节点,返回这些点的value,name,courseHour",
        "output": "with p as (select * from (VALUES(6844,73,'famale'),(9336,59,'famale')) as t(salary,id,gender))MATCH (a:course WHERE a.gender = p.gender AND (a.name = '程序设计')) -[e ]-(b:course) RETURN b.value, b.name, b.courseHour ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别分组,计算年龄除35的值",
        "output": "return a.age / 35 group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询93个名为蚂蚁集团的点employee的类型为person的节点,且其height为空或name等于陈若涵",
        "output": "match(a where a.name='蚂蚁集团')-[e:employee]->(b:person where (b.height is null) or b.name = '陈若涵') return b limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找person源点与company目标点之间标签为'belong'的边。",
        "output": "match(a:person)-[e:belong]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为孤城的publisher或book,以及与其有关的author,并返回孤城的createTime和这些author的salary",
        "output": "match(a:publisher | book where name = '孤城')-[e]-(b:author) return a.createTime, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有类型为标签的点",
        "output": "match(a:tag) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出读者王科 喜欢的书,返回书 认识的书的id加70乘677加89的值",
        "output": "match(a:reader where name = '王科')-[e:likes]->(b:book)-[e2:knows]->(c:book) return (c.id + 70) * 677 + 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(166,'吴雪','male')作为请求表数据,属性分别为height,name,gender, 源点的gender等于输入表gender,查找名为陈宏的点cancel的orders",
        "output": "with p as (select * from (VALUES(166,'吴雪','male')) as t(height,name,gender))MATCH (a WHERE a.gender = p.gender AND (a.name = '陈宏')) -[e:buyer_cancel_orders ]->(b:orders) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person以id分组的薪资, 根据薪资降序排序",
        "output": "match(a:person) return a.salary group by a.id order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找账号Geaflow123的全部类型为伙伴的边,并根据源点id从小到大排列,返回168个",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:partner]->(b) return b order by e.srcId asc limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与文艺和其他存在关系的135个Cinemas节点。",
        "output": "match(a where a.name='文艺')-[e]->(b:cinema)<-[e2]-(c where c.name='其他') return b limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我查找名为陈建国和Sam的,类型是person的点公共的朋友节点的名单;2: 找出从person赵月出发,经过标签等于person_likes_comment的边,走3到6度到达的评论点;3: 帮我查询以belong关系关联了film绿巨人的comment;4: 查找199个person李雪和黄伟,共同的伙伴;5: 返回和person黄月有关的电影院,再返回和黄月person_likes_comment的其他评论,返回它们;6: 请帮我查找名为Comment_152的comment,以及与其有关的tag,并返回Comment_152的id和这些tag的name;",
        "output": "查询语句为:1: match(a:person where a.name='陈建国')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='Sam') return b.name;2: match(a:person where a.name='赵月')-[e:person_likes_comment]->{3,6}(b:comment) return b;3: match(a:film where a.name='绿巨人')<-[e:comment_belong_film]-(b:comment) return b;4: match(a:person where a.name='李雪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='黄伟') return b limit 199;5: match(a:person where a.name = '黄月')-[e]-(b:cinema), (a:person)-[e2:person_likes_comment]->(c:comment) return a, b, c;6: match(a:comment where name = 'Comment_152')-[e]-(b:tag) return a.id, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为何轩的用户,以及与其有关的论坛,并返回何轩的性别和这些论坛的价值",
        "output": "match(a:user where name = '何轩')-[e]-(b:forum) return a.gender, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以93, 42作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(93, 42) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person徐思琪的标签等于相关者的边,并根据目标点id从大到小排列,返回154个",
        "output": "match(a:person where a.name = '徐思琪')-[e:relation]->(b) return b order by e.targetId desc limit 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前87个标签为creates的边",
        "output": "match(a)-[e:creates]->(b) return e limit 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询62个名为陈伟的点申请的类型是贷款的节点,且节点金额小于3797.92且金额不是6939.67",
        "output": "match(a where a.name='陈伟')-[e:apply]->(b:loan where b.amount < 3797.92 and b.amount <> 6939.67) return b limit 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵科创造的评论节点属于的电影",
        "output": "match(a:person where a.name = '赵科')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签为用户,边标签为喜欢,且满足条件时间戳不等于2030年11月07日且时间戳不是2026年10月06日,目标点id小于74的边",
        "output": "match(a:user)-[e:likes where e.timeStamp <> '2030-11-07' and e.timeStamp <> '2026-10-06' and e.targetId < 74]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您要查询哪个公司（Company)的字节员工（Employee)购买了哪些软件（Software)?",
        "output": "match(a:company where a.name = '字节')-[e:employee]->(b:person)-[e2:buy]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前105个满足条件性别等于famale且身高在153到155之间的person",
        "output": "match(a:person where a.gender = 'famale' and (a.height BETWEEN 153 AND 155)) return a limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,price,name, 数据为(372,191.02,'Order_305'),(87,1171.00,'Order_491'),(228,1150.49,'Order_184'),(654,937.33,'Order_266')的子查询作为输入表, 源点的price等于输入表price,请帮我查找和买家有关联的卖家节点,并根据其身高分组,返回身高,以及id的求和值对75取余的个数",
        "output": "with p as (select * from (VALUES(372,191.02,'Order_305'),(87,1171.00,'Order_491'),(228,1150.49,'Order_184'),(654,937.33,'Order_266')) as t(value,price,name))MATCH (a:buyer WHERE a.price = p.price) -[e:buyer_consult_seller ]-(b:seller) RETURN b.height, COUNT(SUM(b.id) % 75) GROUP BY b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('Order_378',32,167),('Order_409',93,207),('Order_345',96,734)作为请求表数据,属性分别为name,id,value, 源点的value等于输入表value,请帮我找出90个名为孙建国的点has的label为goods的节点,且其price大于186.43",
        "output": "with p as (select * from (VALUES('Order_378',32,167),('Order_409',93,207),('Order_345',96,734)) as t(name,id,value))MATCH (a WHERE a.value = p.value AND (a.name = '孙建国')) -[e:seller_has_goods ]->(b:goods WHERE b.price > 186.43) RETURN b LIMIT 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与买家赵伟和商品椅子相关的卖家节点。",
        "output": "match(a:buyer where a.name='赵伟')-[e:consult]-(b:seller)-[e2:has]-(c:goods where c.name='椅子') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与person孙伟和person Jack有关联的节点，并返回它们的身高。",
        "output": "match(a:person where a.name='孙伟')-[e]->(b:person)<-[e2]-(c:person where c.name='Jack') return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出观看电影泰坦尼克号的person,和这些person创造的评论",
        "output": "match(a:film where name = '泰坦尼克号')<-[e:watch]-(b:person)-[e2:creates]->(c:comment) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询193个名为PR-115的点属于的标签为仓库的节点,且其语言为java或权重小于等于820",
        "output": "match(a where a.name='PR-115')-[e:belong]->(b:repository where b.lang = 'java' or b.weight <= 820) return b limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找被公司腾讯属于的城市;2: 返回与country法国有country_contain_city关系的3跳的环;3: 返回从大学重庆大学出发,经过label为university_cooperate_company的边,走2度到达的公司点;4: 帮我查询155个与杭州和东京都存在关系的university节点;5: 请帮我找出名为杭州的city;6: 找出与city伦敦和上海都存在city_contain_university关系的点;7: 给出所有和city巴黎之间有city_contain_company关系的company;8: 查找和国家中国有关的城市,再查找和中国country_contain_city的其他城市,返回它们;9: 请帮我找出名为伦敦的city;",
        "output": "查询语句为:1: match(a:city)<-[e:company_belong_city]-(b:company where b.name='腾讯') return a, b;2: match(a:country where name = '法国')-[e:country_contain_city]->{2,2}(b)->(a) return a.id, b.id as b_id;3: match(a:university where a.name='重庆大学')-[e:university_cooperate_company]->{2,2}(b:company) return b;4: match(a where a.name='杭州')-[e]->(b:university)<-[e2]-(c where c.name='东京') return b limit 155;5: match(a:city where a.name = '杭州') return a;6: match(a:city where a.name='伦敦')-[e:city_contain_university]->(b)<-[e2:city_contain_university]-(c:city where c.name='上海') return b;7: match(a:city where a.name='巴黎')-[e:city_contain_company]->(b:company) return b;8: match(a:country where a.name = '中国')-[e]-(b:city), (a:country)-[e2:country_contain_city]->(c:city) return a, b, c;9: match(a:city where a.name = '伦敦') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与读者Tom存在喜欢关系,且与书少年闰土存在引用关系的书节点，返回这些书的id,价格,创建时间,及读者Tom的名字,及书少年闰土的创建时间",
        "output": "match(a:reader where a.name='Tom')-[e:likes]->(b:book)<-[e2:refers]-(c:book where c.name='少年闰土') return a.name,b.id, b.price, b.createTime,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为建国大业的film或cinema或person,以及与其有关的comment,并返回建国大业的category和这些comment的wordCount",
        "output": "match(a:film | cinema | person where name = '建国大业')-[e]-(b:comment) return a.category, b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为23的person提交的软件, 并将软件有关的person的年龄的和赋值给软件的名字, 接着查询软件的名字小于23的软件使用的软件",
        "output": "match(a:person where a.id = 23)-[e:commits]->(b:software) let b.name = SUM((b:software)-[e2]-(c:person) => c.age) match(b:software where b.name < 23)-[e3:uses]->(d:software) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与周国强和黄雪都有关联的所有46个人。",
        "output": "match(a where a.name='周国强')-[e]->(b:person)<-[e2]-(c where c.name='黄雪') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出两个与'person'类型有关联，且这两个'person'之间存在喜欢关系的对象，并找出与这些对象有关联的'person'。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person) return c limit 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出论坛中国诗词论坛包含的用户, 令用户的身高等于用户的名字,令论坛的人数等于论坛的价值,令论坛的人数等于论坛的价值减565, 返回论坛的人数, 用户的薪资",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]->(b:user) let b.height = b.name,let a.peopleNumber = a.value,let a.peopleNumber = a.value - 565 return a.peopleNumber,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person徐建国knows的person, 令person(b)的height等于person(a)的id,令person的age等于person的height对height取余,令person的salary等于person的name, 返回person(a)的gender, person(b)的salary",
        "output": "match(a:person where a.name='徐建国')-[e:knows]->(b:person) let b.height = a.id,let a.age = a.height % a.height,let a.salary = a.name return a.gender,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出那些既不是耳鼻喉科医生也不是在C栋办公的医生的名字，以及他们诊断过的病人名字。",
        "output": "match(a:department where a.name <> '耳鼻喉科' or a.address = 'C栋')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为放射科的点的,身高不为空,身高为空的伙伴,返回这些伙伴的id,和边的f1",
        "output": "match(a where a.name='放射科')-[e:partner]->(b where (b.height is not null) and (b.height is null)) return b.id,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找44到69之间大学中ID大于15的部门以及它们的教师名称。",
        "output": "match(a:university where a.id > 15 and (a.id BETWEEN 44 AND 69))-[e:has]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找61个和标签等于电影院的点有上映关系的电影,且和这些电影有拥有关系的标签",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点label为forum,边label为contain,以及满足条件weight小于等于198.33的边",
        "output": "match(a:forum)-[e:contain where e.weight <= 198.33]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与书呐喊有关系的作家, 返回和这些作家有关联的书的,id对id取余除56乘72的值",
        "output": "match(a:book where a.name= '呐喊')-[e]-(b:author)-[e2]-(c:book) return c.id % c.id / 56 * 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,性别,名字分组,计算salary的最小值乘5161的最小值",
        "output": "return MIN(MIN(a.salary) * 5161) group by a.age, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出132个person何轩和李梅,共同的伙伴",
        "output": "match(a:person where a.name='何轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李梅') return b limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是用户的点有创造关系的事项,并且和这些事项有属于关系的仓库,并且和这些仓库有拥有关系的事项",
        "output": "match(a:user)-[e:creates]->(b:issue)-[e2:belong]->(c:repository)-[e3:has]->(d:issue) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person李宏申请的贷款,以及申请这些贷款的person",
        "output": "match(a:person where name = '李宏')-[e:apply]->(b:loan)<-[e2:apply]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,id,salary, 数据为('male',51,9062),('male',98,6582)的子查询作为输入表, 以属性salary作为相等条件,请帮我查找名为郑红的person,以及与其有关的person,并返回郑红的id和这些person的名字",
        "output": "with p as (select * from (VALUES('male',51,9062),('male',98,6582)) as t(gender,id,salary))MATCH (a:person WHERE a.salary = p.salary AND (name = '郑红')) -[e ]-(b:person) RETURN a.id, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄小于86且薪资不为空的person喜欢的person的名称,以及这些person 喜欢的person的名称",
        "output": "match(a:person where a.age < 86 and (a.salary is not null))-[e:likes]->(b:person)-[e2:likes]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有patient的id除23的值",
        "output": "match(a:patient) return a.id / 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询label为'loan',名称为'defaultName'的点，返回它们的weight和ID。",
        "output": "match(a:loan where a.name = 'defaultName') return a.weight, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和person陈若涵之间有父母关系的person",
        "output": "match(a:person where a.name='陈若涵')-[e:parent]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age减age的平均值",
        "output": "AVG(a.age - a.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为post且名为Post_296的点，返回这些点的语言（lang)和创建时间（createTime)。",
        "output": "match(a:post where a.name = 'Post_296') return a.lang, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找用户的朋友,或其朋友的朋友",
        "output": "match(a:user)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为106的person认识的person, 并将person有关的person的id的最大值赋值给person(b)的身高, 接着查询person(b)的身高小于106的person关联的person",
        "output": "match(a:person where a.id = 106)-[e:knows]->(b:person) let b.height = MAX((b:person)-[e2]-(c:person) => c.id) match(b:person where b.height < 106)-[e3:relates]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点标签为buyer,边标签为creates,以及满足条件targetId大于等于84,timeStamp为2003年06月08日的边",
        "output": "match(a:buyer)-[e:creates where e.targetId >= 84 and e.timeStamp = '2003-06-08']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为孙若涵和王国强的,label为person的点公共的colleague节点的名单",
        "output": "match(a:person where a.name='孙若涵')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='王国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点类型为书,边类型为引用的边,返回这些边的目标点id乘81的值,和f0对896取余的最小值",
        "output": "match(a:book)-[e:refers]->(b) return e.targetId * 81, MIN(e.f0 % 896)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,weight,address, 数据为(85,712,'北区'),(72,410,'南区'),(45,255,'B座'),(50,340,'西区'), 以属性weight作为相等条件,找出所有标签等于药品的点",
        "output": "with p as (select * from (VALUES(85,712,'北区'),(72,410,'南区'),(45,255,'B座'),(50,340,'西区')) as t(id,weight,address))MATCH (a:medicine WHERE a.weight = p.weight) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出王宏和何建聪的共同朋友，共有149个。",
        "output": "match(a:user where a.name='王宏')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='何建聪') return b limit 149",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名为张轩且标签为人的人的年龄和薪水。",
        "output": "match(a:person where a.name = '张轩') return a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点标签为user且边标签为likes的边，返回这些边的f0加上943的和以及它们的weight的最大值再加上158.66。",
        "output": "match(a:user)-[e:likes]->(b) return SUM(e.f0 + 943), MAX(MAX(e.weight) + 158.66)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字的平均值大于14且名字等于外科的部门拥有的医生的名称,以及这些医生 诊断的病人的名称",
        "output": "match(a:department where AVG(a.name) > 14 and a.name = '外科')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与课程大学物理有关系的学生的身高",
        "output": "match(a:course where a.name='大学物理')-[e]-(b:student) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取 person 的关联人，或者关联人的关联人",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被电影拥有数量大于90的标签,记为relationCount,再查询这些标签拥有的电影院",
        "output": "match(a:tag) let a.relationCount = SUM((a:tag)<-[e:has]-(b:film) => b.id) match(a where a.relationCount > 90)-[e2:has]->(c:cinema) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Redis和Mysql的,类型是软件的点公共的相关者节点的名单",
        "output": "match(a:software where a.name='Redis')-[e:relation]->(b)<-[e2:relation]-(c:software where c.name='Mysql') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前13个类型为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与医生吴轩有关系的处方的创建时间",
        "output": "match(a:doctor where a.name='吴轩')-[e]-(b:prescription) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前73个age为21的person",
        "output": "match(a:person where a.age = 21) return a limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件scale为medium或peopleNumber在850到951之间的节点",
        "output": "match(a where a.scale = 'medium' or (a.peopleNumber BETWEEN 850 AND 951)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询98个名为生物学院的点拥有的标签等于教师的节点,且其身高大于194且名字为黄梅",
        "output": "match(a where a.name='生物学院')-[e:has]->(b:teacher where b.height > 194 and b.name = '黄梅') return b limit 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,height,id, 数据为('王建聪',162,19),('黄宏',194,8)的子查询作为输入表, 源点的height等于输入表height,查找与person孙红有person_knows_person关系的2跳的环",
        "output": "with p as (select * from (VALUES('王建聪',162,19),('黄宏',194,8)) as t(name,height,id))MATCH (a:person WHERE a.height = p.height AND (name = '孙红')) -[e:person_knows_person ]->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为138的点的createTime",
        "output": "match(a where a.id = 138) return a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部与读者有关系的读者节点,且读者节点的名字是马建聪,并返回这些点的年龄对年龄取余的数量,以及薪资除3142的最大值",
        "output": "match(a:reader)-[e]->(b:reader where b.name = '马建聪') return COUNT(b.age % b.age), MAX(b.salary / 3142)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出放射科属于哪个部门的医生。",
        "output": "match(a:department where a.name = '放射科')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回朋友的朋友，或朋友的朋友的朋友",
        "output": "match(a:company)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为广州的节点包含的国家或城市或公司",
        "output": "match(a where a.name='广州')-[e:contain]->(b:country | city | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与赵月有支付关系的人和与吴宏有支付关系的人，然后将它们都返回。",
        "output": "match(a:person where a.name = '赵月')-[e:pay]->(b:person),(c:person where c.name = '吴宏')-[e2:pay]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与徐思琪有关的医生，并获取徐思琪接受过的所有处方，然后将两者一起返回。",
        "output": "match(a:patient where a.name = '徐思琪')-[e]-(b:doctor), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'VD'作为输入调用KHOP函数,返回运算结果",
        "output": "Call KHOP('VD') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询19个卖家赵雪和赵月,共同的相关者",
        "output": "match(a:seller where a.name='赵雪')-[e:relation]->(b)<-[e2:relation]-(c:seller where c.name='赵月') return b limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有名为黄科的点认识的作家",
        "output": "match(a where a.name='黄科')-[e:author_knows_author]->(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有处方的id减86的值",
        "output": "match(a:prescription) return a.id - 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,gender,id, 数据为(161,'male',58),(169,'famale',90), 源点的height等于输入表height,给出名为星际穿越的film",
        "output": "with p as (select * from (VALUES(161,'male',58),(169,'famale',90)) as t(height,gender,id))MATCH (a:film WHERE a.height = p.height AND (a.name = '星际穿越')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person韩月有关,且与person孙思思有关系的person节点",
        "output": "match(a:person where a.name='韩月')-[e:knows]-(b:person)-[e2:knows]-(c:person where c.name='孙思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按名称分组并排序药物类别。",
        "output": "match(a:medicine) return a.category group by a.name order by a.category desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回标签为帖子,名为Post_102的点,返回这些点的价值,id,创建时间;2: 查找与forum百度贴吧和知网都存在forum_contain_post关系的点;3: 查询181个id是198的person,根据性别从小到大排列;4: 查找全部论坛的伙伴,或其伙伴的伙伴;5: 请帮我找出所有id为138的论坛关联的帖子,和以包含关系关联了这些帖子的其他论坛;6: 查询名为杜月的点likes的post;",
        "output": "查询语句为:1: match(a:post where a.name = 'Post_102') return a.value, a.id, a.createTime;2: match(a:forum where a.name='百度贴吧')-[e:forum_contain_post]->(b)<-[e2:forum_contain_post]-(c:forum where c.name='知网') return b;3: match(a:person where a.id = 198) return a order by a.gender asc limit 181;4: match(a:forum)-[e:partner]->{1,2}(b) return b;5: match(a:forum where a.id = '138')-[e]-(b:post)<-[e2:forum_contain_post]-(c:forum) return b,c;6: match(a where a.name='杜月')-[e:user_likes_post]->(b:post) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出名为韩建国的person,以及与其有关的person,并返回韩建国的gender和这些person的id;2: 请帮我找出104个年龄除10的平均值是192的person,根据身高从小到大排列;3: 查找id为86的person有关的person的relation, 再查找和person有关系的relation;4: 请帮我找出id为132的person有关的person的relation, 再请帮我找出和person有关系的partner;5: 查询和名为韩宏的person有partner关系,或有partner的partner关系的person;6: 查询id为49的person关联的person,和以likes关系关联了这些person的其他person;7: 给出与person郑建聪有关系的person, 返回和这些person有关联的person的,height的个数乘187的值;8: 找出名为赵雪的person,以及与其有关的person,并返回赵雪的年龄和这些person的年龄;",
        "output": "查询语句为:1: match(a:person where name = '韩建国')-[e]-(b:person) return a.gender, b.id;2: match(a:person where AVG(a.age / 10) = 192) return a order by a.height asc limit 104;3: match(a:person where id = '86')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d;4: match(a:person where id = '132')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d;5: match(a:person where n.name=韩宏)-[e:partner]->{1,2}(b:person) return b;6: match(a:person where a.id = '49')-[e]-(b:person)<-[e2:person_likes_person]-(c:person) return b,c;7: match(a:person where a.name= '郑建聪')-[e]-(b:person)-[e2]-(c:person) return COUNT(c.height) * 187;8: match(a:person where name = '赵雪')-[e]-(b:person) return a.age, b.age;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以5作为请求点id, 源点的id等于输入表id,请帮我找出标签为读者的全部点,并根据性别从小到大排列",
        "output": "with p as (select * from (VALUES(5)) as t(id)) MATCH (a:reader WHERE a.id = p.id) RETURN a ORDER BY a.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与 person 相关联的 software 节点，并按语言分组，返回语言。",
        "output": "match(a:person)-[e:buy]-(b:software) return b.lang group by b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与医生吴轩和医生王宏相关的部门节点。",
        "output": "match(a:doctor where a.name='吴轩')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='王宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,name,salary, 数据为('male','张强',8871),('male','何建聪',6988),('famale','吴月',5295)的子查询作为输入表, 源点的gender等于输入表gender,查询公司谷歌雇佣的person节点提交的软件",
        "output": "with p as (select * from (VALUES('male','张强',8871),('male','何建聪',6988),('famale','吴月',5295)) as t(gender,name,salary))MATCH (a:company WHERE a.gender = p.gender AND (a.name = '谷歌')) -[e:company_employee_person ]->(b:person) -[e2:person_commits_software ]->(c:software) RETURN c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为PR-50的合并请求,以及与其有关的仓库,并返回PR-50的名字和这些仓库的id",
        "output": "match(a:pullRequest where name = 'PR-50')-[e]-(b:repository) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出88个名为马强的点喜欢的标签为评论的节点,且其创建时间不是2022年08月11日或名字小于114",
        "output": "match(a where a.name='马强')-[e:likes]->(b:comment where b.createTime <> '2022-08-11' or b.name < 114) return b limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询韩建聪的点认识的person,然后帮我查询韩建聪被雇佣的公司,一起返回",
        "output": "match(a where a.name = '韩建聪')-[e:knows]->(b:person),(a where a.name = '韩建聪')<-[e2:employee]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person陈思思有认识关系的person,再找出以支付关系关联了陈思思的person",
        "output": "match(a:person where a.name = '陈思思')-[e:knows]->(b:person),(a:person where a.name = '陈思思')<-[e2:pay]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与微软存在员工关系且与郑思琪有认识关系的个人，并返回他们的ID、工资、年龄、微软的名称和郑思琪的名称。",
        "output": "match(a:company where a.name='微软')-[e:employee]->(b:person)<-[e2:knows]-(c:person where c.name='郑思琪') return a.name,b.id, b.salary, b.age,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表892,750,542,702, 源点的id等于输入表id,请帮我查找病人孙宏的相关者的朋友的朋友",
        "output": "with p as (select * from (VALUES(892),(750),(542),(702)) as t(id)) MATCH (a:patient WHERE a.id = p.id AND (a.name = '孙宏')) -[e:relation ]->(b) -[e2:friend ]->(c) -[e3:friend ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以relates关系关联了person王宏的person",
        "output": "match(a:person where a.name='王宏')<-[e:relates]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出公司蚂蚁集团合作的大学,以及包含这些大学的城市",
        "output": "match(a:company where name = '蚂蚁集团')-[e:cooperate]->(b:university)<-[e2:contain]-(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 找出类型为software的点,并根据value从大到小排列;2: 计算所有person的年龄加94的求和值;3: 请帮我找出以提交关系关联了软件Redis的person;",
        "output": "查询语句为:1: match(a:software) return a order by a.value desc;2: match(a:person) return SUM(a.age + 94);3: match(a:software where a.name='Redis')<-[e:person_commits_software]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被学生王思思选择的课程,和王思思选择的课程",
        "output": "match(a:course)<-[e:selects]-(b:student where name = '王思思')-[e2:selects]->(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找国家法国包含的城市,被其他大学属于的数量",
        "output": "match(a:country where a.name='法国')-[e:contain]->(b:city)<-[e2:belong]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 帮我查询被电影少年足球拥有的标签;2: 给出comment Comment_143的标签等于friend的边,并根据f0从大到小排列,返回57个;3: 查询与评论Comment_379有关,且与标签科幻有关系的电影节点;4: 帮我查询76个与悬疑和其他都存在关系的标签节点;5: 请帮我找出157个value为空或name不等于古代或name是悬疑的tag,根据name升序排列;6: 查询label为tag的全部点,并根据name从小到大排列;7: 查找cinema横店影院的所有标签为relation的边,并根据f0降序排列,返回170个;8: 给出与名为郑科和杜思思的点共同likes的,label为comment的节点;",
        "output": "查询语句为:1: match(a:tag)<-[e:film_has_tag]-(b:film where b.name='少年足球') return a, b;2: match(a:comment where a.name = 'Comment_143')-[e:friend]->(b) return b order by e.f0 desc limit 57;3: match(a:comment where a.name='Comment_379')-[e:comment_belong_film]-(b:film)-[e2:film_has_tag]-(c:tag where c.name='科幻') return b;4: match(a where a.name='悬疑')-[e]->(b:tag)<-[e2]-(c where c.name='其他') return b limit 76;5: match(a:tag where (a.value is null) or a.name <> '古代' or a.name = '悬疑') return a order by a.name asc limit 157;6: match(a:tag) return a order by a.name asc;7: match(a:cinema where a.name = '横店影院')-[e:relation]->(b) return b order by e.f0 desc limit 170;8: match(a where a.name = '郑科')-[e:person_likes_comment]->(b:comment)<-[e2:person_likes_comment]-(c where c.name = '杜思思') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找orders Order_368的全部label为friend的边,并根据weight升序排列,返回194个",
        "output": "match(a:orders where a.name = 'Order_368')-[e:friend]->(b) return b order by e.weight asc limit 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生何国强诊断的病人, 令医生的年龄等于医生的年龄,令病人的性别等于医生的id除86, 返回医生的身高, 病人的年龄",
        "output": "match(a:doctor where a.name='何国强')-[e:diagnose]->(b:patient) let a.age = a.age,let b.gender = a.id / 86 return a.height,b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('我不是药神',1,815),('少年足球',27,502)作为请求表数据,属性分别为name,id,value, 以属性id作为相等条件,给出label为cinema的点,返回103个",
        "output": "with p as (select * from (VALUES('我不是药神',1,815),('少年足球',27,502)) as t(name,id,value))MATCH (a:cinema WHERE a.id = p.id) RETURN a LIMIT 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为大学的点,返回178个",
        "output": "match(a:university) return a limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person有关联的软件节点,并根据其是否开源分组,返回是否开源,以及星数乘808的平均值",
        "output": "match(a:person)-[e:buy]-(b:software) return b.openSource, AVG(b.stars * 808) group by b.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和country法国有关系的country,返回这些点的peopleNumber,scale",
        "output": "match(a:country where a.name='法国')-[e]-(b:country) return b.peopleNumber, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与周强和陈国强相关的141人",
        "output": "match(a:person where a.name='周强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈国强') return b limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为账号,目标点标签为贷款,标签为贷款或person或账号的边",
        "output": "match(a:account)-[e:loan | person | account]->(b:loan) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于合并请求或用户或仓库的点",
        "output": "match(a:pullRequest | user | repository) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签为doctor,边标签为diagnose的边,返回这些边的srcId的个数除146的值,和srcId除183的和",
        "output": "match(a:doctor)-[e:diagnose]->(b) return COUNT(e.srcId) / 146, SUM(e.srcId / 183)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对id取余的值",
        "output": "a.id % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从person黄宏出发,经过label为喜欢的边,走3到6度到达的评论点",
        "output": "match(a:person where a.name='黄宏')-[e:likes]->{3,6}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为Tugraph的节点拥有的用户或合并请求或仓库",
        "output": "match(a where a.name='Tugraph')-[e:has]->(b:user | pullRequest | repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为38的点的身高,年龄",
        "output": "match(a where a.id = 38) return a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找buyer郑建国look的goods,被其他buyer look的数量",
        "output": "match(a:buyer where a.name='郑建国')-[e:look]->(b:goods)<-[e2:look]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出所有与company有关系的company节点,且company节点的name不是谷歌,并返回这些点的peopleNumber乘636的平均值,以及id加id的值",
        "output": "match(a:company)-[e]->(b:company where b.name <> '谷歌') return AVG(b.peopleNumber * 636), b.id + b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与重庆大学合作的company。",
        "output": "match(a:company)<-[e:cooperate]-(b:university where b.name='重庆大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与美团公司和账号Geaflow123相关的贷款记录",
        "output": "match(a:company where a.name='美团')-[e:apply]-(b:loan)-[e2:deposit]-(c:account where c.name='Geaflow123') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与处方Prescription_354有关联的所有药品，以及由医生徐宏创建的所有处方，并将它们全部返回。",
        "output": "match(a:prescription where a.name = 'Prescription_354')-[e:contain]->(b:medicine),(c:doctor where c.name = '徐宏')-[e2:creates]->(d:prescription) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回等级为空,id大于等于1的大学拥有的部门的名称,以及这些部门 拥有的学生的名称",
        "output": "match(a:university where (a.level is null) and a.id >= 1)-[e:has]->(b:department)-[e2:has]->(c:student) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有与名为何伟的读者有联系或相关联的书。",
        "output": "match(a:reader where n.name=何伟)-[e:relation]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有源节点类型为电影，目标节点类型为标签，边类型为具有的边。",
        "output": "match(a:film)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与用户李梅存在创造关系,且与仓库XXRepo存在属于关系的合并请求节点，返回这些合并请求的变更文件数,及用户李梅的性别,及仓库XXRepo的语言",
        "output": "match(a:user where a.name='李梅')-[e:creates]->(b:pullRequest)<-[e2:belong]-(c:repository where c.name='XXRepo') return a.gender,b.changeFileNumber,c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出和person何若涵有2跳或3跳关系的person;2: 查询person杜梅的friend的friend的partner;3: 请帮我查找标签等于person的点,并根据gender从小到大排列;4: 给出91个person杜宏和陈月,共同的相关者;5: 帮我查询和person马科有关的person,再帮我查询和马科person_likes_person的其他person,返回它们;6: 给出和person有关联的person节点,并根据其性别,年龄分组,返回性别,年龄,以及age的数量减年龄的值;",
        "output": "查询语句为:1: match(a:person where a.name='何若涵')-[e]->{2,3}(b:person) return b;2: match(a:person where a.name='杜梅')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d;3: match(a:person) return a order by a.gender asc;4: match(a:person where a.name='杜宏')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈月') return b limit 91;5: match(a:person where a.name = '马科')-[e]-(b:person), (a:person)-[e2:person_likes_person]->(c:person) return a, b, c;6: match(a:person)-[e:person_knows_person]-(b:person) return b.gender, b.age, COUNT(b.age) - b.age group by b.gender, b.age;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前89个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部公司以id,名字分组的价值, 根据价值升序排序",
        "output": "match(a:company) return a.value group by a.id, a.name order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2226,52,'male')作为请求表数据,属性分别为salary,id,gender, 以属性id作为相等条件,查询全部person以id,salary分组的gender, 根据gender降序排序",
        "output": "with p as (select * from (VALUES(2226,52,'male')) as t(salary,id,gender))MATCH (a:person WHERE a.id = p.id) RETURN a.gender GROUP BY a.id, a.salary ORDER BY a.gender DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部源点label为person,边label为commits,以及weight大于等于161.32或f0大于769,且f1是true的边",
        "output": "match(a:person)-[e:commits where (e.weight >= 161.32 or e.f0 > 769) and e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以911作为请求点id, 以属性id作为相等条件,返回152个大小不等于52,名字为生物学院,或价值不是30的部门,根据价值从大到小排列",
        "output": "with p as (select * from (VALUES(911)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.size <> 52 AND a.name = '生物学院' OR a.value <> 30)) RETURN a ORDER BY a.value DESC LIMIT 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问美国和日本这两个国家之间有什么共同点吗？",
        "output": "match(a:country where a.name='美国')-[e:relation]->(b)<-[e2:relation]-(c:country where c.name='日本') return b limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的3度的环",
        "output": "match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与华为公司有关且与Kafka软件相关的个人节点。",
        "output": "match(a:company where a.name='华为')-[e:employee]-(b:person)-[e2:buy]-(c:software where c.name='Kafka') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为郑国强的节点喜欢的person",
        "output": "match(a where a.name='郑国强')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出repository Tugraph的所有label为friend的边,并根据f0升序排列,返回102个",
        "output": "match(a:repository where a.name = 'Tugraph')-[e:friend]->(b) return b order by e.f0 asc limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有由黄雪所写的书及其作者信息",
        "output": "match(a where a.name = '黄雪')-[e:write]->(b:book),(a where a.name = '黄雪')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为118的点的id,名字,价值",
        "output": "match(a where a.id = 118) return a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找company cooperate的university,返回其源点的id的和除id的值,以及目标点的id对72取余的数量",
        "output": "match(a:company)-[e:cooperate]->(b:university) return SUM(a.id) / a.id, COUNT(b.id % 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以42,130作为请求点id, 以属性id作为相等条件,给出全部标签为reader的点",
        "output": "with p as (select * from (VALUES(42),(130)) as t(id)) MATCH (a:reader WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age的最小值对2取余除72的平均值",
        "output": "AVG(MIN(a.age) % 2 / 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与seller节点关联的 goods 节点，按名称分组并返回名称。",
        "output": "match(a:seller)-[e:has]-(b:goods) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询一个人的家庭成员，以及这些家庭成员的家庭成员。",
        "output": "match(a:person)-[e:family]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,amount,weight, 数据为(18,9888.75,130),(65,4829.25,296), 以属性weight作为相等条件,请帮我找出和贷款有关联的账号节点,并根据其创建时间分组,返回创建时间,以及id的最小值减id的值",
        "output": "with p as (select * from (VALUES(18,9888.75,130),(65,4829.25,296)) as t(id,amount,weight))MATCH (a:loan WHERE a.weight = p.weight) -[e:loan_deposit_account ]-(b:account) RETURN b.createTime, MIN(b.id) - b.id GROUP BY b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询周伟和徐若涵的家人节点，类型为person。",
        "output": "match(a:person where a.name='周伟')-[e:family]->(b)<-[e2:family]-(c:person where c.name='徐若涵') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查询前77个标签等于company_employee_person的边;2: 请帮我找出与名为郑伟和吴思琪的点共同购买的,label为软件的节点;3: 帮我查询名为华为的公司;",
        "output": "查询语句为:1: match(a)-[e:company_employee_person]->(b) return e limit 77;2: match(a where a.name = '郑伟')-[e:person_buy_software]->(b:software)<-[e2:person_buy_software]-(c where c.name = '吴思琪') return b;3: match(a:company where a.name = '华为') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为film或cinema或person的点",
        "output": "match(a:film | cinema | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与城市巴黎有关系的国家, 返回和这些国家有关联的城市的,面积加57819的值",
        "output": "match(a:city where a.name= '巴黎')-[e]-(b:country)-[e2]-(c:city) return c.area + 57819",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与author何思思有关,且与book少年闰土有关系的author节点",
        "output": "match(a:author where a.name='何思思')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='少年闰土') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 计算所有书的id减31的最大值;2: 请帮我找出名为呐喊的书,以及与其有关的作家,并返回呐喊的创建时间和这些作家的id;3: 给出173个作家吴红和黄思思,共同的相关者;4: 帮我查询年龄大于83或薪资小于2067或身高等于176的节点;5: 请帮我找出id为42的点的height,gender,name;6: 给出类型是书的点,返回75个;7: 查询名为孤城和三体的,标签为书的点公共的引用节点的名单;8: 帮我查询与名为陈科和李梅的点共同撰写的,label为书的节点;",
        "output": "查询语句为:1: match(a:book) return MAX(a.id - 31);2: match(a:book where name = '呐喊')-[e]-(b:author) return a.createTime, b.id;3: match(a:author where a.name='吴红')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='黄思思') return b limit 173;4: match(a where a.age > 83 or a.salary < 2067 or a.height = 176) return a;5: match(a where a.id = '42') return a.height, a.gender, a.name;6: match(a:book) return a limit 75;7: match(a:book where a.name='孤城')-[e:book_refers_book]->(b)<-[e2:book_refers_book]-(c:book where c.name='三体') return b.name;8: match(a where a.name = '陈科')-[e:author_write_book]->(b:book)<-[e2:author_write_book]-(c where c.name = '李梅') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为Faker的节点还款的公司或账号",
        "output": "match(a where a.name='Faker')-[e:repay]->(b:company | account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对43取余的最小值",
        "output": "MIN(a.age % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出person陈强申请的贷款,被其他公司申请的数量",
        "output": "match(a:person where a.name='陈强')-[e:person_apply_loan]->(b:loan)<-[e2:company_apply_loan]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与郑轩和徐雪有关联的人，返回他们的薪资和姓名。",
        "output": "match(a:person where a.name='郑轩')-[e]->(b:person)<-[e2]-(c:person where c.name='徐雪') return b.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我找出公司腾讯 雇佣的person,返回person 购买的软件的价值加632的值 ;2: 帮我查询person张强commits的software,被其他company creates的数量;3: 找出以buy关系关联了software Geaflow的person;4: 请帮我找出以提交关系关联了软件Mysql的person;5: 请帮我查找以提交关系关联了软件Mysql的person;6: 给出label为公司的点,返回108个;7: 返回软件以星数分组的id, 根据id从大到小排序;",
        "output": "查询语句为:1: match(a:company where name = '腾讯')-[e:company_employee_person]->(b:person)-[e2:person_buy_software]->(c:software) return c.value + 632;2: match(a:person where a.name='张强')-[e:person_commits_software]->(b:software)<-[e2:company_creates_software]-(c:company) return COUNT(c);3: match(a:software where a.name='Geaflow')<-[e:person_buy_software]-(b:person) return b;4: match(a:software where a.name='Mysql')<-[e:person_commits_software]-(b:person) return b;5: match(a:software where a.name='Mysql')<-[e:person_commits_software]-(b:person) return b;6: match(a:company) return a limit 108;7: match(a:software) return a.id group by a.stars order by a.id desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部公司以规格分组的id, 根据id升序排序",
        "output": "match(a:company) return a.id group by a.scale order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回course操作系统的全部label为friend的边,并根据f0升序排列,返回153个",
        "output": "match(a:course where a.name = '操作系统')-[e:friend]->(b) return b order by e.f0 asc limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id分组,计算age乘74除5126的个数",
        "output": "return COUNT(a.age * 74 / 5126) group by a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与吴伟有顾问关系的卖家，再找出与吴伟有取消订单关系的订单。",
        "output": "match(a:buyer where a.name = '吴伟')-[e:consult]->(b:seller),(a:buyer where a.name = '吴伟')<-[e2:cancel]-(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找和买家有关联的订单节点,并根据其价值分组,返回价值,以及价值乘268的最小值",
        "output": "match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.value, MIN(b.value * 268) group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询创造处方Prescription_185的医生,和这些医生创造的处方",
        "output": "match(a:prescription where name = 'Prescription_185')<-[e:creates]-(b:doctor)-[e2:creates]->(c:prescription) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和仓库点有拥有关系的事项节点,且边满足条件目标点id不为空,目标事项节点满足条件名字为ISSUE-319",
        "output": "match(a:repository)-[e:has where (e.targetId is not null)]->(b:issue where b.name = 'ISSUE-319') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出标签为forum_contain_post,并且满足条件f1不等于true的边",
        "output": "match(a)-[e:forum_contain_post where e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别,年龄,名字分组,计算身高对186取余的最小值",
        "output": "return MIN(a.height % 186) group by a.gender, a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部person的相关者,或其相关者的相关者",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,年龄,id分组,计算salary的最大值加1550的值",
        "output": "return MAX(a.salary) + 1550 group by a.salary, a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询107个person张国强和周宏,共同的家人;2: 计算所有person的薪资乘3858除年龄对188取余的值;3: 请帮我找出从person马红出发,经过label为person_parent_person的边,走1到4跳到达的person点;4: 找出以relates关系关联了person吴建国的person;",
        "output": "查询语句为:1: match(a:person where a.name='张国强')-[e:person_family_person]->(b)<-[e2:person_family_person]-(c:person where c.name='周宏') return b limit 107;2: match(a:person) return a.salary * 3858 / a.age % 188;3: match(a:person where a.name='马红')-[e:person_parent_person]->{1,4}(b:person) return b;4: match(a:person where a.name='吴建国')<-[e:relates]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被公司创造数量大于176的软件,记为relationCount,再查询这些软件创造的公司",
        "output": "match(a:software) let a.relationCount = SUM((a:software)<-[e:creates]-(b:company) => b.id) match(a where a.relationCount > 176)-[e2:creates]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表813,203,6,92, 源点的id等于输入表id,请帮我找出所有和company阿里有关系的account节点,返回这些点的createTime",
        "output": "with p as (select * from (VALUES(813),(203),(6),(92)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) -[e ]-(b:account) RETURN b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以109,426,220,69作为请求点id, 以属性id作为相等条件,查询university浙江大学的标签等于friend的边,并根据targetId降序排列,返回194个",
        "output": "with p as (select * from (VALUES(109),(426),(220),(69)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name = '浙江大学')) -[e:friend ]->(b) RETURN b ORDER BY e.targetId DESC LIMIT 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与大学浙江大学有关系的城市的价值",
        "output": "match(a:university where a.name='浙江大学')-[e]-(b:city) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与Post_446和Post_276有相同tag标签的节点",
        "output": "match(a where a.name = 'Post_446')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_276') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出id为102的大学有关的城市的相关者, 再给出和城市有关系的相关者",
        "output": "match(a:university where id = '102')-[e]-(b:city)-[e2:relation]->(c), (b:city)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与李思琪有支付关联的人。",
        "output": "match(a:person where a.name='李思琪')<-[e:pay]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有id为1的商品关联的商品,和以拥有关系关联了这些商品的其他卖家",
        "output": "match(a:goods where a.id = '1')-[e]-(b:goods)<-[e2:seller_has_goods]-(c:seller) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为person的点有创造关系的评论,且和这些评论有属于关系的电影,且和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为孙红的点申请的贷款",
        "output": "match(a where a.name='孙红')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资乘2433的值",
        "output": "a.salary * 2433",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部标签以价值分组的id, 根据id升序排序",
        "output": "match(a:tag) return a.id group by a.value order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出前103个label为person_colleague_person的边;2: 找出id为153的点的salary;3: 帮我查询159个名字小于6983且年龄为55的person,根据年龄降序排列;4: 找出与person郑思思存在person_colleague_person关系,且与person陈思琪存在person_family_person关系的person节点，返回这些person的年龄,名字,id,及person郑思思的年龄,及person陈思琪的id;5: 找出所有person以身高,名字分组的薪资, 根据薪资从大到小排序;6: 请帮我找出与person王若涵有person_friend_person关系的3跳以内的环;",
        "output": "查询语句为:1: match(a)-[e:person_colleague_person]->(b) return e limit 103;2: match(a where a.id = '153') return a.salary;3: match(a:person where a.name < 6983 and a.age = 55) return a order by a.age desc limit 159;4: match(a:person where a.name='郑思思')-[e:person_colleague_person]->(b:person)<-[e2:person_family_person]-(c:person where c.name='陈思琪') return a.age,b.age, b.name, b.id,c.id;5: match(a:person) return a.salary group by a.height, a.name order by a.salary desc;6: match(a:person where name = '王若涵')-[e:person_friend_person]->{0,2}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与订单相关的订单，以及取消这些订单的其他买家。",
        "output": "match(a:orders where a.id = '26')-[e]-(b:orders)<-[e2:cancel]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出家人之间的person-to-person边",
        "output": "match(a:person)-[e:family]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被doctor creates数量大于162的prescription,记为relationCount,再查询这些prescription creates的prescription",
        "output": "match(a:prescription) let a.relationCount = MAX((a:prescription)<-[e:creates]-(b:doctor) => b.id) match(a where a.relationCount > 162)-[e2:creates]->(c:prescription) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回city的3跳以内的环",
        "output": "match(a:city)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被buyer creates数量大于53的orders,记为relationCount,再查询这些orders creates的seller",
        "output": "match(a:orders) let a.relationCount = COUNT((a:orders)<-[e:creates]-(b:buyer) => b.id) match(a where a.relationCount > 53)-[e2:creates]->(c:seller) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,age,id, 数据为('吴红',43,91),('李若涵',81,93),('何伟',87,77)的子查询作为输入表, 源点的id等于输入表id,给出comment的三角的环,边标签等于comment_belong_film, 并返回这些点的id",
        "output": "with p as (select * from (VALUES('吴红',43,91),('李若涵',81,93),('何伟',87,77)) as t(name,age,id))MATCH (a:comment WHERE a.id = p.id) -[e:comment_belong_film ]->(b) -[e2:comment_belong_film ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以has关系关联了doctor赵建聪的department",
        "output": "match(a:doctor where a.name='赵建聪')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签等于person,边标签等于申请的边,返回这些边的f0加f0的值,和权重加162.12加105.32的值",
        "output": "match(a:person)-[e:apply]->(b) return e.f0 + e.f0, e.weight + 162.12 + 105.32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为电影的点,返回55个",
        "output": "match(a:film) return a limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我找出编辑吴若涵发布的书,被其他编辑发布的数量;2: 请帮我找出编辑王轩的相关者的引用的相关者;3: 查询与名为杜伟和徐若涵的点共同发布的,类型为书的节点;4: 帮我查询和名为杜思思的author有partner关系,或有partner的partner关系的author;",
        "output": "查询语句为:1: match(a:publisher where a.name='吴若涵')-[e:publisher_publish_book]->(b:book)<-[e2:publisher_publish_book]-(c:publisher) return COUNT(c);2: match(a:publisher where a.name='王轩')-[e:relation]->(b)-[e2:book_refers_book]->(c)-[e3:relation]->(d) return d;3: match(a where a.name = '杜伟')-[e:publisher_publish_book]->(b:book)<-[e2:publisher_publish_book]-(c where c.name = '徐若涵') return b;4: match(a:author where n.name=杜思思)-[e:partner]->{1,2}(b:author) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表827,346,666, 以属性id作为相等条件,返回user马思琪的所有类型为partner的边,并根据f0降序排列,返回82个",
        "output": "with p as (select * from (VALUES(827),(346),(666)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '马思琪')) -[e:partner ]->(b) RETURN b ORDER BY e.f0 DESC LIMIT 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为赵伟和Amily的点共同创造的,标签等于评论的节点",
        "output": "match(a where a.name = '赵伟')-[e:creates]->(b:comment)<-[e2:creates]-(c where c.name = 'Amily') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与ID为69的处方相关的用户关系，并查询与这些用户有关系的用户的朋友。",
        "output": "match(a:prescription where id = '69')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回167个名为马建国的点支付的标签为person的节点,且节点名字不等于黄红且薪资的求和值大于76",
        "output": "match(a where a.name='马建国')-[e:pay]->(b:person where b.name <> '黄红' and SUM(b.salary) > 76) return b limit 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有由医生创建，指向处方的边。",
        "output": "match(a:doctor)-[e:creates]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询reader陈建国likes的book,以及knows这些book的book",
        "output": "match(a:reader where name = '陈建国')-[e:likes]->(b:book)<-[e2:knows]-(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和goods杯子有关系的goods,返回这些点的category",
        "output": "match(a:goods where a.name='杯子')-[e]-(b:goods) return b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为goods的点,并根据sellerNumber从小到大排列",
        "output": "match(a:goods) return a order by a.sellerNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表824,795,558,172,565, 以属性id作为相等条件,查找全部与person吴轩有关系的loan的id",
        "output": "with p as (select * from (VALUES(824),(795),(558),(172),(565)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴轩')) -[e ]-(b:loan) RETURN b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回性别是famale或id在77到78之间的person观看的电影的名称,以及这些电影 拥有的标签的名称",
        "output": "match(a:person where a.gender = 'famale' or (a.id BETWEEN 77 AND 78))-[e:watch]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为李若涵的点的,人数不为空,规格是small的朋友,返回这些朋友的规格,和边的f0,权重,源点id",
        "output": "match(a where a.name='李若涵')-[e:friend]->(b where (b.peopleNumber is not null) and b.scale = 'small') return b.scale,e.f0, e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为何雪和张强的,label为用户的点公共的相关者节点的名单",
        "output": "match(a:user where a.name='何雪')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Person赵强从起点出发，沿着提交类型的边走了3个跳，到达了终点。",
        "output": "match(a:person where a.name='赵强')-[e:commits]->{3,3}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于部门,名为经管学院的点,返回这些点的id,价值,名字",
        "output": "match(a:department where a.name = '经管学院') return a.id, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,gender,age, 数据为(172,'famale',30), 源点的age等于输入表age,请帮我查找全部id为172的person关联的person,和以pay关系关联了这些person的其他person",
        "output": "with p as (select * from (VALUES(172,'famale',30)) as t(height,gender,age))MATCH (a:person WHERE a.age = p.age AND (a.id = '172')) -[e ]-(b:person) <-[e2:person_pay_person ]-(c:person) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为30的点的年龄,名字,身高",
        "output": "match(a where a.id = 30) return a.age, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是软件的全部点,并根据语言从大到小排列",
        "output": "match(a:software) return a order by a.lang desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和国家中国有关系的公司或国家或大学,返回这些点的id,价值,等级",
        "output": "match(a:country where a.name='中国')-[e]-(b:company | country | university) return b.id, b.value, b.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出publisher的三角的环,边标签等于publish, 并返回这些点的id",
        "output": "match(a:publisher)-[e:publish]->(b)-[e2:publish]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 查询标签为buyer_look_goods,以及targetId是14的边;2: 找出名为Order_122的订单,以及与其有关的商品,并返回Order_122的价格和这些商品的名字;3: 给出全部与黄强存在buyer_cancel_orders关系的订单,订单与商品存在orders_contain_goods关系的点,返回这些点的id;4: 请帮我查找190个id在62到62之间且gender不是famale,或name不是郑国强的buyer,根据height从大到小排列;",
        "output": "查询语句为:1: match(a)-[e:buyer_look_goods where e.targetId = 14]->(b) return e;2: match(a:orders where name = 'Order_122')-[e]-(b:goods) return a.price, b.name;3: match(a where a.name = '黄强')-[e:buyer_cancel_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c.id;4: match(a:buyer where ((a.id BETWEEN 62 AND 62) and a.gender <> 'famale') or a.name <> '郑国强') return a order by a.height desc limit 190;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为size,value,id, 数据为(61,845,68),(83,139,92),(59,120,14),(78,461,8), 源点的value等于输入表value,请帮我找出所有名为徐建聪的,课时为43的朋友,返回这些朋友的id,和边的目标点id,f0",
        "output": "with p as (select * from (VALUES(61,845,68),(83,139,92),(59,120,14),(78,461,8)) as t(size,value,id))MATCH (a WHERE a.value = p.value AND (a.name = '徐建聪')) -[e:friend ]->(b WHERE b.courseHour = 43) RETURN b.id, e.targetId, e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 返回165个与四川大学和南京大学都存在关系的大学节点;2: 查找76个scale等于medium的company,根据value升序排列;3: 帮我查询城市上海的所有标签为朋友的边,并根据权重升序排列,返回88个;4: 返回源点类型为city,边类型为city_contain_university,且满足条件srcId不是4或srcId小于等于18或srcId大于31的边;5: 给出与university重庆大学有关系的country, 返回和这些country有关联的university的,id乘92减78的值;6: 查询和company Bilibili有company_belong_city关系的city,再查询以company_cooperate_university关系关联了 Bilibili的university;",
        "output": "查询语句为:1: match(a where a.name='四川大学')-[e]->(b:university)<-[e2]-(c where c.name='南京大学') return b limit 165;2: match(a:company where a.scale = 'medium') return a order by a.value asc limit 76;3: match(a:city where a.name = '上海')-[e:friend]->(b) return b order by e.weight asc limit 88;4: match(a:city)-[e:city_contain_university where e.srcId <> 4 or e.srcId <= 18 or e.srcId > 31]->(b) return e;5: match(a:university where a.name= '重庆大学')-[e]-(b:country)-[e2]-(c:university) return c.id * 92 - 78;6: match(a:company where a.name = 'Bilibili')-[e:company_belong_city]->(b:city),(a:company where a.name = 'Bilibili')<-[e2:company_cooperate_university]-(c:university)return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以189,90,962,648作为请求点id, 源点的id等于输入表id,帮我查询和person有关联的person节点,并根据其薪资,性别分组,返回薪资,性别,以及id除66的值",
        "output": "with p as (select * from (VALUES(189),(90),(962),(648)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_knows_person ]-(b:person) RETURN b.salary, b.gender, b.id / 66 GROUP BY b.salary, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为何轩的点的,创建时间是2005年07月07日的相关者,返回这些相关者的创建时间,和边的目标点id,f1",
        "output": "match(a where a.name='何轩')-[e:relation]->(b where b.createTime = '2005-07-07') return b.createTime,e.targetId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出滴滴和字节同时申请的贷款节点",
        "output": "match(a where a.name = '滴滴')-[e:apply]->(b:loan)<-[e2:apply]-(c where c.name = '字节') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询和韩建聪有恋人关系的对象，以及和张月有恋人关系的对象，返回两者。",
        "output": "match(a:person where a.name = '韩建聪')-[e:lover]->(b:person),(c:person where c.name = '张月')-[e2:lover]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 找出publisher以height,salary,gender分组的height, 根据height从大到小排序;2: 查询和编辑点有发布关系的书节点,且边满足条件权重在105.23到138.46之间,目标书节点满足条件名字是百年孤独;3: 找出作家张红撰写的书,被其他作家撰写的数量;",
        "output": "查询语句为:1: match(a:publisher) return a.height group by a.height, a.salary, a.gender order by a.height desc;2: match(a:publisher)-[e:publisher_publish_book where (e.weight BETWEEN 105.23 AND 138.46)]->(b:book where b.name = '百年孤独') return b;3: match(a:author where a.name='张红')-[e:author_write_book]->(b:book)<-[e2:author_write_book]-(c:author) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与孙国强有knows关系且与郑建国有knows关系的节点，返回这些节点的性别、ID、年龄、孙国强的身高以及郑建国的名字。",
        "output": "match(a:person where a.name='孙国强')-[e:knows]->(b:person)<-[e2:knows]-(c:person where c.name='郑建国') return a.height,b.gender, b.id, b.age,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找has tag喜剧的post,和这些post has的tag",
        "output": "match(a:tag where name = '喜剧')<-[e:has]-(b:post)-[e2:has]->(c:tag) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前192个满足条件id在75到86之间,id大于等于8,id不为空的prescription",
        "output": "match(a:prescription where (a.id BETWEEN 75 AND 86) and a.id >= 8 and (a.id is not null)) return a limit 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary加3635的值",
        "output": "a.salary + 3635",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询183个与周雪和杜轩都存在关系的cinema节点",
        "output": "match(a where a.name='周雪')-[e]->(b:cinema)<-[e2]-(c where c.name='杜轩') return b limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为韩建国的人的性别和身高",
        "output": "match(a:person where a.name = '韩建国') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点类型为医生,边类型为诊断,且权重不为空或目标点id大于等于199或权重不等于188.41的边",
        "output": "match(a:doctor)-[e:diagnose where (e.weight is not null) or e.targetId >= 199 or e.weight <> 188.41]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找薪资在6368到7049之间的person属于的公司的名称,以及这些公司 雇佣的person的名称",
        "output": "match(a:person where (a.salary BETWEEN 6368 AND 7049))-[e:belong]->(b:company)-[e2:employee]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与论坛推特有关联的人，以及那些将推特关联起来的人。",
        "output": "match(a:forum where a.name = '推特')-[e:contain]->(b:person),(a:forum where a.name = '推特')<-[e2:contain]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出孙建聪喜欢和Post_386相关的标签和标签。",
        "output": "match(a:user where a.name = '孙建聪')-[e:likes]->(b:post),(c:post where c.name = 'Post_386')-[e2:has]->(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部person的partner,或其partner的partner",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与书白夜行有关且涉及计算机网络的书目。",
        "output": "match(a:book where a.name='计算机网络')-[e:refers]-(b:book)-[e2:refers]-(c:book where c.name='白夜行') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找周梅在微软公司的同事或联系人。",
        "output": "match(a:company where a.name='微软')-[e:employee]-(b:person)-[e2:knows]-(c:person where c.name='周梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回所有student以name,age,gender分组的age, 根据age从小到大排序;2: 请帮我找出department的三角的环,边类型是department_has_teacher, 并返回这些点的id;3: 帮我查询university以value,id,name分组的level, 根据level升序排序;",
        "output": "查询语句为:1: match(a:student) return a.age group by a.name, a.age, a.gender order by a.age asc;2: match(a:department)-[e:department_has_teacher]->(b)-[e2:department_has_teacher]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:university) return a.level group by a.value, a.id, a.name order by a.level asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 给出150个与三体和计算机网络都存在关系的编辑节点;2: 帮我查询reader以id,height分组的gender, 根据gender从大到小排序;3: 查询和书百年孤独有book_refers_book关系的书,以及和作家张建国有author_write_book关系的书,将它们都返回;4: 查询类型为编辑的点,返回107个;5: 查询与author徐宏有关系的publisher的age;",
        "output": "查询语句为:1: match(a where a.name='三体')-[e]->(b:publisher)<-[e2]-(c where c.name='计算机网络') return b limit 150;2: match(a:reader) return a.gender group by a.id, a.height order by a.gender desc;3: match(a:book where a.name = '百年孤独')-[e:book_refers_book]->(b:book),(c:author where c.name = '张建国')-[e2:author_write_book]->(d:book)return a, b, c, d;4: match(a:publisher) return a limit 107;5: match(a:author where a.name='徐宏')-[e]-(b:publisher) return b.age;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找177个名为少年闰土的点knows的标签等于book的节点,且节点name不等于百年孤独且category不是小说",
        "output": "match(a where a.name='少年闰土')-[e:knows]->(b:book where b.name <> '百年孤独' and b.category <> '小说') return b limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名为郑轩和陈科的，标签为'person'的共同爱人节点列表。",
        "output": "match(a:person where a.name='郑轩')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='陈科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与'呐喊'和'罪与罚'都有关联，并返回它们各自的id、wordCount、price以及'呐喊'和'罪与罚'的名称。",
        "output": "match(a:book where a.name='呐喊')-[e:refers]->(b:book)<-[e2:refers]-(c:book where c.name='罪与罚') return a.name,b.id, b.wordCount, b.price,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 帮我查询83个person周伟和何建聪,共同的父母;2: 返回和person有关联的person节点,并根据其身高分组,返回身高,以及身高除身高的最大值;3: 查找源点满足条件身高小于等于158或薪资大于等于2052,且年龄小于3237,目标点满足条件薪资大于8744且身高大于199,或性别等于male,且类型为person_family_person的边;4: 查询和类型是person的点有person_parent_person关系的person,并且和这些person有person_colleague_person关系的person,并且和这些person有person_friend_person关系的person;5: 找出满足条件salary的平均值小于175或id小于39的节点;6: 返回label为person,名为孙建聪的点,返回这些点的名字;7: 找出和person韩宏有关的person,再找出和韩宏person_parent_person的其他person,返回它们;",
        "output": "查询语句为:1: match(a:person where a.name='周伟')-[e:person_parent_person]->(b)<-[e2:person_parent_person]-(c:person where c.name='何建聪') return b limit 83;2: match(a:person)-[e:person_family_person]-(b:person) return b.height, MAX(b.height / b.height) group by b.height;3: match(a where (a.height <= 158 or a.salary >= 2052) and a.age < 3237)-[e:person_family_person]->(b where (b.salary > 8744 and b.height > 199) or b.gender = 'male') return e;4: match(a:person)-[e:person_parent_person]->(b:person)-[e2:person_colleague_person]->(c:person)-[e3:person_friend_person]->(d:person) return d;5: match(a where AVG(a.salary) < 175 or a.id < 39) return a;6: match(a:person where a.name = '孙建聪') return a.name;7: match(a:person where a.name = '韩宏')-[e]-(b:person), (a:person)-[e2:person_parent_person]->(c:person) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出名为复旦大学的点has的所有department,并对这些点的value进行求和;2: 返回和course线性代数有关的teacher,称为X,再返回和这个X有关联的其他student,以及和X有关联的teacher;3: 查询源点name不等于陈雪或id小于等于39,且id不为空,边标签为teacher_teach_course,且f0小于等于605的边,返回这些边的weight乘151.80加515的值;",
        "output": "查询语句为:1: match(a where a.name='复旦大学')-[e:university_has_department]->(b:department) return SUM(b.value);2: match(a:course where a.name = '线性代数')-[e]-(b:teacher), (b:teacher)-[e2]-(c:student),(b:teacher)-[e3]-(d:teacher) return a, b, c, d;3: match(a where (a.name <> '陈雪' or a.id <= 39) and (a.id is not null))-[e:teacher_teach_course where e.f0 <= 605]->(b) return e.weight * 151.80 + 515;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下名为'Order_158'且类型的点，然后返回它们的id",
        "output": "match(a:orders where a.name = 'Order_158') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为何若涵的点publish的全部post,并对这些post的lang进行求和",
        "output": "match(a where a.name='何若涵')-[e:publish]->(b:post) return SUM(b.lang)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以968作为请求点id, 源点的id等于输入表id,返回类型为person,名为韩建国的点,返回这些点的性别,id",
        "output": "with p as (select * from (VALUES(968)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩建国')) RETURN a.gender, a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表790,407,34,946, 以属性id作为相等条件,给出所有id为85的medicine关联的department,和以belong关系关联了这些department的其他doctor",
        "output": "with p as (select * from (VALUES(790),(407),(34),(946)) as t(id)) MATCH (a:medicine WHERE a.id = p.id AND (a.id = '85')) -[e ]-(b:department) <-[e2:doctor_belong_department ]-(c:doctor) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为复旦大学和电子科技大学的,类型为大学的点公共的相关者节点的名单",
        "output": "match(a:university where a.name='复旦大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='电子科技大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,名字,id分组,计算id减33的最大值",
        "output": "return MAX(a.id - 33) group by a.age, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出年龄在35到88之间且名字等于张伟的person喜欢的person的名称,以及这些person 支付的person的名称",
        "output": "match(a:person where (a.age BETWEEN 35 AND 88) and a.name = '张伟')-[e:likes]->(b:person)-[e2:pay]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与 Prescription_255 和 Prescription_497 存在关系的 prescription 节点的 name 和 weight。",
        "output": "match(a:prescription where a.name='Prescription_255')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_497') return b.name, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与公司Bilibili有关,且与国家越南有关系的城市节点",
        "output": "match(a:company where a.name='Bilibili')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='越南') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为Post_429的点拥有的标签",
        "output": "match(a where a.name='Post_429')-[e:post_has_tag]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和buyer周建聪有look关系的goods,再找出以cancel关系关联了周建聪的orders",
        "output": "match(a:buyer where a.name = '周建聪')-[e:look]->(b:goods),(a:buyer where a.name = '周建聪')<-[e2:cancel]-(c:orders)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与forum推特存在contain关系,且与post Post_164存在publish关系的user节点，返回这些user的age,salary,及forum推特的name,及post Post_164的lang",
        "output": "match(a:forum where a.name='推特')-[e:contain]->(b:user)<-[e2:publish]-(c:post where c.name='Post_164') return a.name,b.age, b.salary,c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑宏有联系的人",
        "output": "match(a:person where a.name='郑宏')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间,权重分组,计算id乘19的个数",
        "output": "return COUNT(a.id * 19) group by a.createTime, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,大小,名字分组,计算size的最小值减356乘945的和",
        "output": "return SUM((MIN(a.size) - 356) * 945) group by a.id, a.size, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关的人，或者这些人再往上追溯的关联人员",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person王轩有关系的person, 返回和这些person有关联的person的,id加id的最小值",
        "output": "match(a:person where a.name= '王轩')-[e]-(b:person)-[e2]-(c:person) return MIN(c.id + c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和国家美国之间有包含关系的城市",
        "output": "match(a:country where a.name='美国')-[e:contain]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与吴建聪存在belong关系的department,department与doctor存在has关系的点,返回这些点的gender",
        "output": "match(a where a.name = '吴建聪')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以194,213,245作为请求点id, 以属性id作为相等条件,返回源点height不为空,gender不是male,或salary的数量不是21,目标点name等于我不是药神且id小于36,且类型为person_watch_film的边",
        "output": "with p as (select * from (VALUES(194),(213),(245)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.height IS NOT NULL AND a.gender <> 'male' OR COUNT(a.salary) <> 21)) -[e:person_watch_film ]->(b WHERE b.name = '我不是药神' AND b.id < 36) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出韩伟的朋友的伙伴。",
        "output": "match(a:person where a.name='韩伟')-[e:relation]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找名为马轩的点拥有的全部商品,并对这些点的名字进行求和",
        "output": "match(a where a.name='马轩')-[e:seller_has_goods]->(b:goods) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找40个与用户类型为'user'的点有'likes'关系的帖子，并且这些帖子与相应的标签有'has'关系。",
        "output": "match(a:user)-[e:likes]->(b:post)-[e2:has]->(c:tag) return c limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 找出label为account的点,返回8个;2: 返回person何科申请的贷款,被其他person申请的数量;3: 计算所有贷款的id对27取余的值;4: 帮我查询满足条件性别为famale,身高不等于89的节点;5: 请帮我找出与名为美团和腾讯的点共同apply的,类型是loan的节点;",
        "output": "查询语句为:1: match(a:account) return a limit 8;2: match(a:person where a.name='何科')-[e:person_apply_loan]->(b:loan)<-[e2:person_apply_loan]-(c:person) return COUNT(c);3: match(a:loan) return a.id % 27;4: match(a where a.gender = 'famale' and a.height <> 89) return a;5: match(a where a.name = '美团')-[e:company_apply_loan]->(b:loan)<-[e2:company_apply_loan]-(c where c.name = '腾讯') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从病人吴思琪出发,经过类型为接受的边,走1到3跳到达的处方点",
        "output": "match(a:patient where a.name='吴思琪')-[e:accept]->{1,3}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以属于关系关联了电影功夫的评论",
        "output": "match(a:film where a.name='功夫')<-[e:belong]-(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出被吴思思支付的人。",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='吴思思') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和用户周轩之间有发布关系的帖子",
        "output": "match(a:user where a.name='周轩')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person张轩有关系的person或company或software,返回这些点的id,value,lang",
        "output": "match(a:person where a.name='张轩')-[e]-(b:person | company | software) return b.id, b.value, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "将公司作为源点，大学作为目标点，并且类型为合作的边。",
        "output": "match(a:company)-[e:cooperate]->(b:university) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找一部叫《星际穿越》的电影",
        "output": "match(a:film where a.name = '星际穿越') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点value小于等于881,边标签等于has,且满足条件targetId小于等于55且weight是177.80的边,返回这些边的srcId乘srcId加srcId除166的值",
        "output": "match(a where a.value <= 881)-[e:has where e.targetId <= 55 and e.weight = 177.80]->(b) return (e.srcId * e.srcId + e.srcId) / 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为李思琪和陈强的,标签为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='李思琪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person徐月有2跳关系的person",
        "output": "match(a:person where a.name='徐月')-[e]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,lastLoginTime,isBlock, 数据为(814,2030-07-08,false)的子查询作为输入表, 以属性lastLoginTime作为相等条件,查找与person张红有person_invest_company关系的3度的环",
        "output": "with p as (select * from (VALUES(814,2030-07-08,false)) as t(value,lastLoginTime,isBlock))MATCH (a:person WHERE a.lastLoginTime = p.lastLoginTime AND (name = '张红')) -[e:person_invest_company ]->{2,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与某人有关联的其他人，以及这些人之间的关联关系。",
        "output": "match(a:person where a.id = '51')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为179的person的恋人，再帮我找出与该person相关的同事。",
        "output": "match(a:person where id = '179')-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:colleague]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与公司美团有申请关系的2跳的环",
        "output": "match(a:company where name = '美团')-[e:apply]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出61个名字不是PR-381或变更文件数在314到780之间的合并请求,根据变更文件数从大到小排列",
        "output": "match(a:pullRequest where a.name <> 'PR-381' or (a.changeFileNumber BETWEEN 314 AND 780)) return a order by a.changeFileNumber desc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找全部源点类型为account,边类型为account_repay_loan的边,返回这些边的f0减799减18的值,和srcId除50的值",
        "output": "match(a:account)-[e:account_repay_loan]->(b) return e.f0 - 799 - 18, e.srcId / 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的个数对626取余的值",
        "output": "COUNT(a.value) % 626",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据人数,规格,价值分组,计算peopleNumber的最大值除941的最小值",
        "output": "return MIN(MAX(a.peopleNumber) / 941) group by a.peopleNumber, a.scale, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 comment 节点关联的 film 节点，并根据 category、name、id 分组，返回 category、name、id。",
        "output": "match(a:comment)-[e:belong]-(b:film) return b.category, b.name, b.id group by b.category, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的3度的环",
        "output": "match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找事项ISSUE-59的类型为相关者的边,并根据f1降序排列,返回183个",
        "output": "match(a:issue where a.name = 'ISSUE-59')-[e:relation]->(b) return b order by e.f1 desc limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值加631的和",
        "output": "SUM(a.value + 631)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person何伟有关,且与软件Geaflow有关系的软件节点",
        "output": "match(a:person where a.name='何伟')-[e:commits]-(b:software)-[e2:uses]-(c:software where c.name='Geaflow') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到buyer的合作伙伴，或者是合作伙伴的合作伙伴。",
        "output": "match(a:buyer)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询id小于等于28,名字不等于眼科且权重在16到885之间的节点",
        "output": "match(a where a.id <= 28 and a.name <> '眼科' and (a.weight BETWEEN 16 AND 885)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person陈雪有购买关系的2度以内的环",
        "output": "match(a:person where name = '陈雪')-[e:buy]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询155个和标签为仓库的点有拥有关系的用户,且和这些用户有创造关系的事项",
        "output": "match(a:repository)-[e:has]->(b:user)-[e2:creates]->(c:issue) return c limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person吴雪有关的公司,再查找和吴雪购买的其他软件,返回它们",
        "output": "match(a:person where a.name = '吴雪')-[e]-(b:company), (a:person)-[e2:buy]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,size,name, 数据为(526,90,'体育学院'),(351,81,'经管学院'),(575,75,'物理学院')的子查询作为输入表, 以属性size作为相等条件,给出学生韩雪的全部label为伙伴的边,并根据权重降序排列,返回33个",
        "output": "with p as (select * from (VALUES(526,90,'体育学院'),(351,81,'经管学院'),(575,75,'物理学院')) as t(value,size,name))MATCH (a:student WHERE a.size = p.size AND (a.name = '韩雪')) -[e:partner ]->(b) RETURN b ORDER BY e.weight DESC LIMIT 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和教师有关联的课程节点,并根据其名字分组,返回名字,以及id的数量减73除39减921的最大值",
        "output": "match(a:teacher)-[e:teach]-(b:course) return b.name, MAX((COUNT(b.id) - 73) / 39 - 921) group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以280,813,911,481,33作为请求点id, 以属性id作为相等条件,查询年龄不是42的person拥有的账号的名称,以及这些账号 转账的账号的名称",
        "output": "with p as (select * from (VALUES(280),(813),(911),(481),(33)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.age <> 42)) -[e:person_own_account ]->(b:account) -[e2:account_transfer_account ]->(c:account) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以704,44,184作为请求点id, 以属性id作为相等条件,请帮我找出标签等于loan_deposit_account,并且源点id小于等于16的边",
        "output": "with p as (select * from (VALUES(704),(44),(184)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:loan_deposit_account WHERE e.srcId <= 16 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影建国大业的全部朋友,的权重乘113.83减134的最小值",
        "output": "match(a:film where a.name= '建国大业')-[e:friend]->(b) return MIN(e.weight * 113.83 - 134)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我查找154个与大学物理和线性代数都存在关系的university节点;2: 请帮我找出全部大学以id,名字分组的id, 根据id降序排序;3: 帮我查询全部源点label为学生,边label为student_selects_course,并且满足条件权重不是154.30的边;4: 帮我查询id为72的大学有关的学生的伙伴, 再帮我查询和学生有关系的伙伴;5: 帮我查询与名为华中科技大学和重庆大学的点共同拥有的,label为部门的节点;",
        "output": "查询语句为:1: match(a where a.name='大学物理')-[e]->(b:university)<-[e2]-(c where c.name='线性代数') return b limit 154;2: match(a:university) return a.id group by a.id, a.name order by a.id desc;3: match(a:student)-[e:student_selects_course where e.weight <> 154.30]->(b) return e;4: match(a:university where id = '72')-[e]-(b:student)-[e2:partner]->(c), (b:student)-[e3:partner]->(d) return a, b, c, d;5: match(a where a.name = '华中科技大学')-[e:university_has_department]->(b:department)<-[e2:university_has_department]-(c where c.name = '重庆大学') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为SprintBoot的person或公司或软件,以及与其有关的公司,并返回SprintBoot的是否开源和这些公司的价值",
        "output": "match(a:person | company | software where name = 'SprintBoot')-[e]-(b:company) return a.openSource, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和用户马建国有关系的论坛节点,返回这些点的id,名字",
        "output": "match(a:user where a.name='马建国')-[e]-(b:forum) return b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Tom的person,以及与其有关的person,并返回Tom的id和这些person的薪资",
        "output": "match(a:person where name = 'Tom')-[e]-(b:person) return a.id, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 返回被城市杭州包含的公司;2: 给出类型为company的全部点,并根据id升序排列;3: 查找被城市东京属于的国家;4: 请帮我查找与城市北京和纽约都存在city_belong_country关系的点;",
        "output": "查询语句为:1: match(a:company)<-[e:city_contain_company]-(b:city where b.name='杭州') return a, b;2: match(a:company) return a order by a.id asc;3: match(a:country)<-[e:city_belong_country]-(b:city where b.name='东京') return a, b;4: match(a:city where a.name='北京')-[e:city_belong_country]->(b)<-[e2:city_belong_country]-(c:city where c.name='纽约') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为Prescription_428的处方",
        "output": "match(a:prescription where a.name = 'Prescription_428') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('美团','small',72)作为请求表数据,属性分别为name,scale,id, 源点的name等于输入表name,返回197个公司谷歌和滴滴,共同的相关者",
        "output": "with p as (select * from (VALUES('美团','small',72)) as t(name,scale,id))MATCH (a:company WHERE a.name = p.name AND (a.name = '谷歌')) -[e:relation ]->(b) <-[e2:relation ]-(c:company WHERE c.name = '滴滴') RETURN b LIMIT 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询publisher的partner,或其partner的partner",
        "output": "match(a:publisher)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以660,39,28作为请求点id, 以属性id作为相等条件,给出全部和person张雪有2到4度关系的person",
        "output": "with p as (select * from (VALUES(660),(39),(28)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '张雪')) -[e ]->{2,4}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回李若涵的friend关系",
        "output": "match(a:buyer where a.name='李若涵')-[e:relation]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询全部学生以id,性别分组的身高, 根据身高从大到小排序;2: 返回全部与teacher李宏有关系的university的level;3: 查询id为149的teacher关联的course,和以teach关系关联了这些course的其他teacher;4: 给出和student有关联的course节点,并根据其id分组,返回id,以及credit乘credit的数量;5: 请帮我查找id为189的教师有关的大学的朋友, 再请帮我查找和大学有关系的朋友;6: 计算所有部门的价值加价值的求和值;7: 返回所有经管学院的点has的teacher,然后返回经管学院被has的university,一起返回;8: 查询被university北京大学has的department;9: 帮我查询名为艺术学院的部门;",
        "output": "查询语句为:1: match(a:student) return a.height group by a.id, a.gender order by a.height desc;2: match(a:teacher where a.name='李宏')-[e]-(b:university) return b.level;3: match(a:teacher where a.id = '149')-[e]-(b:course)<-[e2:teacher_teach_course]-(c:teacher) return b,c;4: match(a:student)-[e:student_selects_course]-(b:course) return b.id, COUNT(b.credit * b.credit) group by b.id;5: match(a:teacher where id = '189')-[e]-(b:university)-[e2:friend]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d;6: match(a:department) return SUM(a.value + a.value);7: match(a where a.name = '经管学院')-[e:department_has_teacher]->(b:teacher),(a where a.name = '经管学院')<-[e2:university_has_department]-(c:university) return a, b, c;8: match(a:department)<-[e:university_has_department]-(b:university where b.name='北京大学') return a, b;9: match(a:department where a.name = '艺术学院') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有和company Bilibili有2跳关系的software",
        "output": "match(a:company where a.name='Bilibili')-[e]->{2,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被公司创造数量大于70的软件,记为relationCount,再查询这些软件创造的person",
        "output": "match(a:software) let a.relationCount = AVG((a:software)<-[e:creates]-(b:company) => b.id) match(a where a.relationCount > 70)-[e2:creates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person的伙伴,或其伙伴的伙伴",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有年龄小于40的用户发布的帖子以及它们所包含的标签。",
        "output": "match(a:user where a.age < 40)-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的1度以内的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为谷歌的,权重大于等于686的伙伴,返回这些伙伴的id,和边的源点id,f1,目标点id",
        "output": "match(a where a.name='谷歌')-[e:partner]->(b where b.weight >= 686) return b.id,e.srcId, e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询54个论坛推特和知网,共同的朋友",
        "output": "match(a:forum where a.name='推特')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='知网') return b limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从公司Bilibili出发,经过标签等于雇佣的边,走3跳到达的person点",
        "output": "match(a:company where a.name='Bilibili')-[e:employee]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与university四川大学有关,且与country美国有关系的city节点",
        "output": "match(a:university where a.name='四川大学')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='美国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(false,65,'rust'),(true,95,'java'),(true,0,'java')作为请求表数据,属性分别为openSource,id,lang, 源点的id等于输入表id,给出id为187的company关联的software,和以buy关系关联了这些software的其他person",
        "output": "with p as (select * from (VALUES(false,65,'rust'),(true,95,'java'),(true,0,'java')) as t(openSource,id,lang))MATCH (a:company WHERE a.id = p.id AND (a.id = '187')) -[e ]-(b:software) <-[e2:person_buy_software ]-(c:person) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出按年龄和工资分组的人的工资，并按升序排序。",
        "output": "match(a:person) return a.salary group by a.id, a.age, a.salary order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回一个人同事的同事，或同事同事的同事。",
        "output": "match(a:person)-[e:colleague]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到与郑强和李轩有关的所有课程节点，共133个。",
        "output": "match(a where a.name='郑强')-[e]->(b:course)<-[e2]-(c where c.name='李轩') return b limit 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回赵强和张若涵共同申请的贷款节点",
        "output": "match(a where a.name = '赵强')-[e:apply]->(b:loan)<-[e2:apply]-(c where c.name = '张若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(180,9117,'famale')作为请求表数据,属性分别为height,salary,gender, 以属性gender作为相等条件,找出年龄是1,年龄小于5461,或性别为famale的节点",
        "output": "with p as (select * from (VALUES(180,9117,'famale')) as t(height,salary,gender))MATCH (a WHERE a.gender = p.gender AND (a.age = 1 AND a.age < 5461 OR a.gender = 'famale')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是大学的所有点,并根据id升序排列",
        "output": "match(a:university) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表512,279, 源点的id等于输入表id,返回全部标签为软件的点",
        "output": "with p as (select * from (VALUES(512),(279)) as t(id)) MATCH (a:software WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 查找所有seller以id分组的gender, 根据gender降序排序;2: 查询和buyer周强有buyer_consult_seller关系的seller,再查询以buyer_look_goods关系关联了周强的goods;3: 给出id不为空,年龄为空的买家取消的订单的名称,以及这些订单 包含的商品的名称;",
        "output": "查询语句为:1: match(a:seller) return a.gender group by a.id order by a.gender desc;2: match(a:buyer where a.name = '周强')-[e:buyer_consult_seller]->(b:seller),(a:buyer where a.name = '周强')<-[e2:buyer_look_goods]-(c:goods)return a, b, c;3: match(a:buyer where (a.id is not null) and (a.age is null))-[e:buyer_cancel_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return b.name as b_name, c.name as c_name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签等于person,目标点标签等于person,标签等于person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Bob存在likes关系的post,post与tag存在has关系的点,返回这些点的name",
        "output": "match(a where a.name = 'Bob')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司蚂蚁集团创造的软件,以及使用这些软件的软件, 令公司的名字等于软件的id的最小值加21的最小值,令公司的星数等于软件的是否开源, 返回公司(a)的名字,软件(b)的价值,软件(c)的是否开源",
        "output": "match(a:company where name = '蚂蚁集团')-[e:creates]->(b:software)<-[e2:uses]-(c:software) let a.name = MIN(MIN(b.id) + 21),let a.stars = c.openSource return a.name,b.value,c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找王思思的朋友的伙伴。",
        "output": "match(a:author where a.name='王思思')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前86个标签等于refers的边",
        "output": "match(a)-[e:refers]->(b) return e limit 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和帖子Post_143有1度或2度关系的用户",
        "output": "match(a:post where a.name='Post_143')-[e]->{1,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 帮我查询类型是account的所有点,并根据lastLoginTime升序排列;2: 请帮我找出id为32的点的规格,人数,名字;3: 请帮我查找和person有关联的loan节点,并根据其id,amount,weight分组,返回id,amount,weight,以及weight除weight的最小值;4: 给出person李国强的friend,的targetId的最小值除targetId的最小值;",
        "output": "查询语句为:1: match(a:account) return a order by a.lastLoginTime asc;2: match(a where a.id = '32') return a.scale, a.peopleNumber, a.name;3: match(a:person)-[e:person_apply_loan]-(b:loan) return b.id, b.amount, b.weight, MIN(b.weight / b.weight) group by b.id, b.amount, b.weight;4: match(a:person where a.name= '李国强')-[e:friend]->(b) return MIN(MIN(e.targetId) / e.targetId);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出贷款的3度的环",
        "output": "match(a:loan)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与作家陈思思有关,且与作家王雪有关系的作家节点",
        "output": "match(a:author where a.name='陈思思')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='王雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为'古代'的标签",
        "output": "match(a:tag where a.name = '古代') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person陈思思有关系的person,返回这些点的id,年龄,身高",
        "output": "match(a:person where a.name='陈思思')-[e]-(b:person) return b.id, b.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与patient郑红有关系的prescription, 返回和这些prescription有关联的department的,id的平均值乘84的平均值",
        "output": "match(a:patient where a.name= '郑红')-[e]-(b:prescription)-[e2]-(c:department) return AVG(AVG(c.id) * 84)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为16的tag有关的forum的friend, 再请帮我找出和forum有关系的friend",
        "output": "match(a:tag where id = 16)-[e]-(b:forum)-[e2:friend]->(c), (b:forum)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被卖家回答数量大于140的买家,记为relationCount,再查询这些买家回答的订单",
        "output": "match(a:buyer) let a.relationCount = MAX((a:buyer)<-[e:ask]-(b:seller) => b.id) match(a where a.relationCount > 140)-[e2:ask]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点性别为famale,目标点名字不是操作系统且名字小于43,学分小于等于4,且类型是选择的边",
        "output": "match(a where a.gender = 'famale')-[e:selects]->(b where b.name <> '操作系统' and b.name < 43 and b.credit <= 4) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部和名为王红的user有relation关系,或有relation的relation关系的post",
        "output": "match(a:user where n.name=王红)-[e:relation]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回杭州与腾讯有合作关系的大学。",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]-(b:university)-[e2:belong]-(c:city where c.name='杭州') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部美国的点包含的城市,然后找出美国被属于的城市,一起返回",
        "output": "match(a where a.name = '美国')-[e:country_contain_city]->(b:city),(a where a.name = '美国')<-[e2:city_belong_country]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于用户的点,并根据身高降序排列",
        "output": "match(a:user) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回计算机学院标签的点的大小和价值。",
        "output": "match(a:department where a.name = '计算机学院') return a.size, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与武汉大学存在has关系的department,department与teacher存在has关系的点,返回这些点的name",
        "output": "match(a where a.name = '武汉大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是orders的点",
        "output": "match(a:orders) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,name,lang, 数据为(177,'Calcite','rust'),(333,'Calcite','go')的子查询作为输入表, 以属性value作为相等条件,请帮我找出全部软件以名字,开源,价值分组的价值, 根据价值降序排序",
        "output": "with p as (select * from (VALUES(177,'Calcite','rust'),(333,'Calcite','go')) as t(value,name,lang))MATCH (a:software WHERE a.value = p.value) RETURN a.value GROUP BY a.name, a.openSource, a.value ORDER BY a.value DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查找17个和label为doctor的点有doctor_belong_department关系的department,且和这些department有department_has_doctor关系的doctor;2: 返回和医生周科有关的病人,称为X,再返回和这个X有关联的其他医生,以及和X有关联的处方;3: 返回与部门眼科有department_has_doctor关系的1度以内的环;4: 返回doctor何建聪diagnose的patient节点accept的prescription;5: 返回gender不是male或name不是何宏的doctor diagnose的patient的名称,以及这些patient accept的prescription的名称;6: 帮我查询所有与呼吸科存在department_has_doctor关系的doctor,doctor与prescription存在doctor_creates_prescription关系的点,返回这些点的weight;7: 给出医生赵科 创造的处方,返回处方 包含的药品的权重加217的平均值 ;8: 请帮我找出127个医生王思思和赵红,共同的朋友;9: 请帮我查找department以name,id,weight分组的id, 根据id从大到小排序;",
        "output": "查询语句为:1: match(a:doctor)-[e:doctor_belong_department]->(b:department)-[e2:department_has_doctor]->(c:doctor) return c limit 17;2: match(a:doctor where a.name = '周科')-[e]-(b:patient), (b:patient)-[e2]-(c:doctor),(b:patient)-[e3]-(d:prescription) return a, b, c, d;3: match(a:department where name = '眼科')-[e:department_has_doctor]->{0,0}(b)->(a) return a.id, b.id as b_id;4: match(a:doctor where a.name = '何建聪')-[e:doctor_diagnose_patient]->(b:patient)-[e2:patient_accept_prescription]->(c:prescription) return c;5: match(a:doctor where a.gender <> 'male' or a.name <> '何宏')-[e:doctor_diagnose_patient]->(b:patient)-[e2:patient_accept_prescription]->(c:prescription) return b.name as b_name, c.name as c_name;6: match(a where a.name = '呼吸科')-[e:department_has_doctor]->(b:doctor)-[e2:doctor_creates_prescription]->(c:prescription) return c.weight;7: match(a:doctor where name = '赵科')-[e:doctor_creates_prescription]->(b:prescription)-[e2:prescription_contain_medicine]->(c:medicine) return AVG(c.weight + 217);8: match(a:doctor where a.name='王思思')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='赵红') return b limit 127;9: match(a:department) return a.id group by a.name, a.id, a.weight order by a.id desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与goods有关系的seller节点,且seller节点的salary大于等于3857,并返回这些seller的height对196取余的最大值,以及seller的id的最小值除id的和",
        "output": "match(a:goods)-[e]->(b:seller where b.salary >= 3857) return MAX(b.height % 196), SUM(MIN(b.id) / b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出用户赵轩创造的事项,以及创造这些事项的用户",
        "output": "match(a:user where name = '赵轩')-[e:creates]->(b:issue)<-[e2:creates]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于商品,名为苹果的点,返回这些点的价格,名字,id",
        "output": "match(a:goods where a.name = '苹果') return a.price, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为weight,f1,f0, 数据为(167.53,false,557),(198.92,false,682)的子查询作为输入表, 源点的f1等于输入表f1,帮我查询类型是person的全部点,并根据id升序排列",
        "output": "with p as (select * from (VALUES(167.53,false,557),(198.92,false,682)) as t(weight,f1,f0))MATCH (a:person WHERE a.f1 = p.f1) RETURN a ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,年龄分组,计算height的最大值除165除4105加85的值",
        "output": "return MAX(a.height) / 165 / 4105 + 85 group by a.name, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与张梅存在likes关系的comment,comment与film存在belong关系的点,返回这些点的category",
        "output": "match(a where a.name = '张梅')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回buyer cancel的orders,返回其源点的age乘age的数量,以及目标点的id加55的最小值",
        "output": "match(a:buyer)-[e:cancel]->(b:orders) return COUNT(a.age * a.age), MIN(b.id + 55)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被teacher李强teach的course",
        "output": "match(a:course)<-[e:teach]-(b:teacher where b.name='李强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person周轩的全部类型为伙伴的边,并根据权重从大到小排列,返回70个",
        "output": "match(a:person where a.name = '周轩')-[e:partner]->(b) return b order by e.weight desc limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和用户周宏有关的标签,再请帮我找出和周宏发布的其他帖子,返回它们",
        "output": "match(a:user where a.name = '周宏')-[e]-(b:tag), (a:user)-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以337,230,376,593作为请求点id, 以属性id作为相等条件,查询名为中国诗词论坛的点contain的全部person,并对这些点的age进行求和",
        "output": "with p as (select * from (VALUES(337),(230),(376),(593)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '中国诗词论坛')) -[e:forum_contain_person ]->(b:person) RETURN SUM(b.age) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,age,salary, 数据为(30,14,2987),(77,8,7298), 以属性id作为相等条件,请帮我查找51个id的最大值不是5的prescription,根据weight降序排列",
        "output": "with p as (select * from (VALUES(30,14,2987),(77,8,7298)) as t(id,age,salary))MATCH (a:prescription WHERE a.id = p.id AND (MAX(a.id) <> 5)) RETURN a ORDER BY a.weight DESC LIMIT 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为loan_27的点的,是否冻结不等于false或是否冻结为false的相关者,返回这些相关者的是否冻结,和边的源点id",
        "output": "match(a where a.name='loan_27')-[e:relation]->(b where b.isBlock <> false or b.isBlock = false) return b.isBlock,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为Kafka的点的,是否开源为false或是否开源等于false的相关者,返回这些相关者的id,和边的权重",
        "output": "match(a where a.name='Kafka')-[e:relation]->(b where b.openSource = false or b.openSource = false) return b.id,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查询全部源点id为20或名字为徐建聪或id在1到89之间,目标点权重不为空,且类型是person_apply_loan的边;2: 查询与company腾讯有关系的company的id;3: 请帮我查找被account Faker repay的loan;4: 返回与名为孙梅和Alice的点共同invest的,标签等于company的节点;",
        "output": "查询语句为:1: match(a where a.id = 20 or a.name = '徐建聪' or (a.id BETWEEN 1 AND 89))-[e:person_apply_loan]->(b where (b.weight is not null)) return e;2: match(a:company where a.name='腾讯')-[e]-(b:company) return b.id;3: match(a:loan)<-[e:account_repay_loan]-(b:account where b.name='Faker') return a, b;4: match(a where a.name = '孙梅')-[e:person_invest_company]->(b:company)<-[e2:person_invest_company]-(c where c.name = 'Alice') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为黄伟的repository,以及与其有关的pullRequest,并返回黄伟的name和这些pullRequest的createTime",
        "output": "match(a:repository where name = '黄伟')-[e]-(b:pullRequest) return a.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(79,'郑梅',1385)作为请求表数据,属性分别为id,name,salary, 以属性id作为相等条件,给出label为商品的点,返回48个",
        "output": "with p as (select * from (VALUES(79,'郑梅',1385)) as t(id,name,salary))MATCH (a:goods WHERE a.id = p.id) RETURN a LIMIT 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出creates software Calcite的company,和这些company employee的person",
        "output": "match(a:software where name = 'Calcite')<-[e:creates]-(b:company)-[e2:employee]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于部门的所有点,并根据名字降序排列",
        "output": "match(a:department) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与city上海有关系的country的peopleNumber",
        "output": "match(a:city where a.name='上海')-[e]-(b:country) return b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马强own的account, 令account的createTime等于account的id对id取余减0,令account的createTime等于account的createTime,令person的value等于account的value加713加945, 返回person的gender, account的id",
        "output": "match(a:person where a.name='马强')-[e:own]->(b:account) let b.createTime = b.id % b.id - 0,let b.createTime = b.createTime,let a.value = b.value + 713 + 945 return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(5495,'黄红',161)作为请求表数据,属性分别为salary,name,height, 以属性name作为相等条件,请帮我找出类型是帖子的点,返回107个",
        "output": "with p as (select * from (VALUES(5495,'黄红',161)) as t(salary,name,height))MATCH (a:post WHERE a.name = p.name) RETURN a LIMIT 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和商品短袖有关的订单,称为X,再请帮我找出和这个X有关联的其他订单,以及和X有关联的商品",
        "output": "match(a:goods where a.name = '短袖')-[e]-(b:orders), (b:orders)-[e2]-(c:orders),(b:orders)-[e3]-(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以认识关系关联了person徐思琪的person",
        "output": "match(a:person where a.name='徐思琪')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与评论相关的评论和以创建关系与这些评论相关的其他作者。",
        "output": "match(a:comment where a.id = '164')-[e]-(b:comment)<-[e2:creates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出周宏用户发布的与喜剧标签相关的帖子。",
        "output": "match(a:user where a.name='周宏')-[e:likes]-(b:post)-[e2:has]-(c:tag where c.name='喜剧') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以472,885,641,476,599作为请求点id, 以属性id作为相等条件,给出buyer以gender分组的age, 根据age升序排序",
        "output": "with p as (select * from (VALUES(472),(885),(641),(476),(599)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) RETURN a.age GROUP BY a.gender ORDER BY a.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('微软',3,552),('腾讯',27,3),('Bilibili',55,154),('Bilibili',3,476)作为请求表数据,属性分别为name,id,value, 源点的id等于输入表id,帮我查询id为124的点的name,value",
        "output": "with p as (select * from (VALUES('微软',3,552),('腾讯',27,3),('Bilibili',55,154),('Bilibili',3,476)) as t(name,id,value))MATCH (a WHERE a.id = p.id AND (a.id = '124')) RETURN a.name, a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于公司,名为滴滴的点,返回这些点的规格",
        "output": "match(a:company where a.name = '滴滴') return a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找被部门计算机学院拥有的学生",
        "output": "match(a:student)<-[e:department_has_student]-(b:department where b.name='计算机学院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与韩雪存在creates关系的comment,comment与film存在belong关系的点,返回这些点的value",
        "output": "match(a where a.name = '韩雪')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回47个拥有own关系且与这些account有repay关系的loan,其中标签为person。",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan) return c limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为person的所有点,并根据性别降序排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和名为Zeus的账号有伙伴关系,或有伙伴的伙伴关系的账号",
        "output": "match(a:account where n.name=Zeus)-[e:partner]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价格分组,计算id的数量乘50对3672.44取余的平均值",
        "output": "return AVG(COUNT(a.id) * 50 % 3672.44) group by a.name, a.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找write book呐喊的author,和这些author write的book",
        "output": "match(a:book where name = '呐喊')<-[e:write]-(b:author)-[e2:write]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和公司美团有关的贷款,称为X,再请帮我查找和这个X有关联的其他公司,以及和X有关联的账号",
        "output": "match(a:company where a.name = '美团')-[e]-(b:loan), (b:loan)-[e2]-(c:company),(b:loan)-[e3]-(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,age, 数据为(3548,'韩雪',86),(6730,'何红',16), 源点的name等于输入表name,返回和post有关联的tag节点,并根据其name,value分组,返回name,value,以及value减4的求和值",
        "output": "with p as (select * from (VALUES(3548,'韩雪',86),(6730,'何红',16)) as t(salary,name,age))MATCH (a:post WHERE a.name = p.name) -[e:post_has_tag ]-(b:tag) RETURN b.name, b.value, SUM(b.value - 4) GROUP BY b.name, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和城市有关联的大学节点,并根据其id分组,返回id,以及等级除3的值",
        "output": "match(a:city)-[e:contain]-(b:university) return b.id, b.level / 3 group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点性别为famale,边标签等于创造,且时间戳等于2002年02月23日,时间戳不等于2001年08月06日的边,返回这些边的权重除191.62的值",
        "output": "match(a where a.gender = 'famale')-[e:creates where e.timeStamp = '2002-02-23' and e.timeStamp <> '2001-08-06']->(b) return e.weight / 191.62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回徐建国有喜欢关系的人，以及这些人中与徐建国有认识关系的人。",
        "output": "match(a:person where a.name = '徐建国')-[e:likes]->(b:person),(a:person where a.name = '徐建国')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为周建聪的person,以及与其有关的person,并返回周建聪的salary和这些person的salary",
        "output": "match(a:person where name = '周建聪')-[e]-(b:person) return a.salary, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查询一个与标签为'大学'的点有has关系的部门，以及与这些部门有has关系的学生？",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student) return c limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表142,922,833,565,940, 以属性id作为相等条件,找出以contain关系关联了medicine散利痛的prescription",
        "output": "with p as (select * from (VALUES(142),(922),(833),(565),(940)) as t(id)) MATCH (a:medicine WHERE a.id = p.id AND (a.name = '散利痛')) <-[e:prescription_contain_medicine ]-(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找与名为马月和张强的点共同认识的,标签为person的节点;2: 请帮我找出标签为person的全部点,并根据salary从小到大排列;3: 帮我查询全部陈红的点认识的person,然后帮我查询陈红被关联的person,一起返回;4: 请帮我查找和person有关联的person节点,并根据其身高分组,返回身高,以及id的最大值减67的值;5: 给出与person黄轩有关系的person的薪资;6: 找出标签为person的点,并根据名字从大到小排列;7: 给出满足条件id为空或id不为空的节点;8: 请帮我找出标签等于person的全部点,并根据id降序排列;9: 查询所有源点满足条件id不为空或身高大于163,目标点满足条件年龄除47对75取余不等于95且id在29到47之间且薪资在4578到5547之间,且标签为person_family_person的边;",
        "output": "查询语句为:1: match(a where a.name = '马月')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '张强') return b;2: match(a:person) return a order by a.salary asc;3: match(a where a.name = '陈红')-[e:knows]->(b:person),(a where a.name = '陈红')<-[e2:relates]-(c:person) return a, b, c;4: match(a:person)-[e:person_colleague_person]-(b:person) return b.height, MAX(b.id) - 67 group by b.height;5: match(a:person where a.name='黄轩')-[e]-(b:person) return b.salary;6: match(a:person) return a order by a.name desc;7: match(a where (a.id is null) or (a.id is not null)) return a;8: match(a:person) return a order by a.id desc;9: match(a where (a.id is not null) or a.height > 163)-[e:person_family_person]->(b where b.age / 47 % 75 <> 95 and (b.id BETWEEN 29 AND 47) and (b.salary BETWEEN 4578 AND 5547)) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(9061,'male',86)作为请求表数据,属性分别为salary,gender,id, 以属性gender作为相等条件,查找和seller王轩有关的buyer,再查找和王轩seller_has_goods的其他goods,返回它们",
        "output": "with p as (select * from (VALUES(9061,'male',86)) as t(salary,gender,id))MATCH (a:seller WHERE a.gender = p.gender AND (a.name = '王轩')) -[e ]-(b:buyer) , (a:seller) -[e2:seller_has_goods ]->(c:goods) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和seller吴若涵有关的orders,称为X,再查询和这个X有关联的其他goods,以及和X有关联的buyer",
        "output": "match(a:seller where a.name = '吴若涵')-[e]-(b:orders), (b:orders)-[e2]-(c:goods),(b:orders)-[e3]-(d:buyer) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找2个createTime不等于2031年12月04日的issue,根据name降序排列",
        "output": "match(a:issue where a.createTime <> '2031-12-04') return a order by a.name desc limit 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 帮我查询和person马雪有1到4跳关系的person;2: 找出名为赵思思的,gender不是famale或salary不等于6185的relation,返回这些relation的salary,和边的weight;3: 给出person以id,身高分组的年龄, 根据年龄降序排序;4: 给出所有person的伙伴,或其伙伴的伙伴;5: 找出person支付的person,返回其源点的年龄对47取余的值,以及目标点的age的个数对44取余的值;",
        "output": "查询语句为:1: match(a:person where a.name='马雪')-[e]->{1,4}(b:person) return b;2: match(a where a.name='赵思思')-[e:relation]->(b where b.gender <> 'famale' or b.salary <> 6185) return b.salary,e.weight;3: match(a:person) return a.age group by a.id, a.height order by a.age desc;4: match(a:person)-[e:partner]->{1,2}(b) return b;5: match(a:person)-[e:person_pay_person]->(b:person) return a.age % 47, COUNT(b.age) % 44;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询属于广州的城市所在的国家，返回该国家包含的城市的面积、价值和人口数量。",
        "output": "match(a:city where name = '广州')-[e:belong]->(b:country)-[e2:contain]->(c:city) return c.area, c.value, c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出马思琪和张红的共同作者。",
        "output": "match(a:author where a.name='马思琪')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='张红') return b limit 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出赵月喜欢的人，这些人被其他人认识的数量。",
        "output": "match(a:person where a.name='赵月')-[e:likes]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 给出类型是订单的全部点,并根据id升序排列;2: 给出buyer李梅consult的seller节点has的goods;3: 给出名为何强和张科的,标签等于buyer的点公共的relation节点的名单;4: 请帮我找出id为114的orders有关的buyer的friend, 再请帮我找出和buyer有关系的friend;5: 请帮我查找和buyer孙轩有关的orders,称为X,再请帮我查找和这个X有关联的其他goods,以及和X有关联的orders;6: 帮我查询和orders Order_161有关的goods,再帮我查询和 Order_161orders_contain_goods的其他goods,返回它们;7: 找出label为buyer_consult_seller,并且f1不是false,timeStamp不是2010年09月11日,srcId为空的边;8: 查询goods的1跳以内的环;",
        "output": "查询语句为:1: match(a:orders) return a order by a.id asc;2: match(a:buyer where a.name = '李梅')-[e:buyer_consult_seller]->(b:seller)-[e2:seller_has_goods]->(c:goods) return c;3: match(a:buyer where a.name='何强')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='张科') return b.name;4: match(a:orders where id = '114')-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:friend]->(d) return a, b, c, d;5: match(a:buyer where a.name = '孙轩')-[e]-(b:orders), (b:orders)-[e2]-(c:goods),(b:orders)-[e3]-(d:orders) return a, b, c, d;6: match(a:orders where a.name = 'Order_161')-[e]-(b:goods), (a:orders)-[e2:orders_contain_goods]->(c:goods) return a, b, c;7: match(a)-[e:buyer_consult_seller where e.f1 <> false and e.timeStamp <> '2010-09-11' and (e.srcId is null)]->(b) return e;8: match(a:goods)->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person喜欢的person,返回其源点的身高对183取余的值,以及目标点的年龄加68的值",
        "output": "match(a:person)-[e:likes]->(b:person) return a.height % 183, b.age + 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算level除3的最大值",
        "output": "return MAX(a.level / 3) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为计算机网络的书",
        "output": "match(a:book where a.name = '计算机网络') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为buyer且名为杜建国和陈建国的朋友的交集。",
        "output": "match(a:buyer where a.name='杜建国')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='陈建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为赵强的点关联的全部person,并对这些person的id进行求和",
        "output": "match(a where a.name='赵强')-[e:relates]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以459,502,870,665作为请求点id, 源点的id等于输入表id,找出所有person的partner,或其partner的partner",
        "output": "with p as (select * from (VALUES(459),(502),(870),(665)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value分组,计算stars乘719的最小值",
        "output": "return MIN(a.stars * 719) group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有被名为赵月和赵科的点都喜欢的、label为person的节点",
        "output": "match(a where a.name = '赵月')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有马科的点教的课程,然后给出马科被拥有的部门,一起返回",
        "output": "match(a where a.name = '马科')-[e:teach]->(b:course),(a where a.name = '马科')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部id为68的person关联的person,和以支付关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 68)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出伦敦包含的所有公司，再找出伦敦所在的国家，然后把它们一起返回。",
        "output": "match(a where a.name = '伦敦')-[e:contain]->(b:company),(a where a.name = '伦敦')<-[e2:contain]-(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为108的forum contain的post, 并将post有关的user的height的最小值赋值给post的value, 接着查询post的value小于108的post has的tag",
        "output": "match(a:forum where a.id = 108)-[e:contain]->(b:post) let b.value = MIN((b:post)-[e2]-(c:user) => c.height) match(b:post where b.value < 108)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询XiaoHu账户的还款记录，并返回该账户的存款账户余额和创建时间。",
        "output": "match(a:account where name = 'XiaoHu')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.value, c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与卖家有关系的卖家节点,且卖家节点的年龄在23到58之间,并返回这些卖家的id减26的求和值,以及卖家的年龄除94加7805的平均值",
        "output": "match(a:seller)-[e]->(b:seller where (b.age BETWEEN 23 AND 58)) return SUM(b.id - 26), AVG(b.age / 94 + 7805)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和名为功夫的电影有朋友关系,或有朋友的朋友关系的标签",
        "output": "match(a:film where n.name=功夫)-[e:friend]->{1,2}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与何伟存在喜欢关系的person,person与person存在认识关系的点,返回这些点的身高",
        "output": "match(a where a.name = '何伟')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与陈宏存在喜欢关系的person,person与person存在支付关系的点,返回这些点的id",
        "output": "match(a where a.name = '陈宏')-[e:likes]->(b:person)-[e2:pay]->(c:person) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与ID为170的标签相关的评论的关联，再给出与评论有关系的合作伙伴。",
        "output": "match(a:tag where id = '170')-[e]-(b:comment)-[e2:relation]->(c), (b:comment)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被贷款loan_43存款的账号,和loan_43存款的账号",
        "output": "match(a:account)<-[e:deposit]-(b:loan where name = 'loan_43')-[e2:deposit]->(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为孤城的节点关联的作家",
        "output": "match(a where a.name='孤城')-[e:relates]->(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,name,value分组,计算id除86的和",
        "output": "return SUM(a.id / 86) group by a.level, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我找出大学重庆大学拥有的部门,被其他大学拥有的数量;2: 找出137个名为华中科技大学的点拥有的标签为部门的节点,且其大小不等于56且大小大于52;3: 找出和学生有关联的课程节点,并根据其课时分组,返回课时,以及课时减21的值;4: 请帮我找出和teacher李宏有teacher_teach_course关系的course,以及和student黄伟有student_selects_course关系的course,将它们都返回;5: 请帮我查找名为数据结构的course,以及与其有关的teacher,并返回数据结构的id和这些teacher的name;6: 帮我查询被department物理学院has的teacher;7: 给出全部与student有关系的university节点,且university节点的value小于等于723,并返回这些点的level对1取余的最大值,以及id减67的求和值;",
        "output": "查询语句为:1: match(a:university where a.name='重庆大学')-[e:university_has_department]->(b:department)<-[e2:university_has_department]-(c:university) return COUNT(c);2: match(a where a.name='华中科技大学')-[e:university_has_department]->(b:department where b.size <> 56 and b.size > 52) return b limit 137;3: match(a:student)-[e:student_selects_course]-(b:course) return b.courseHour, b.courseHour - 21 group by b.courseHour;4: match(a:teacher where a.name = '李宏')-[e:teacher_teach_course]->(b:course),(c:student where c.name = '黄伟')-[e2:student_selects_course]->(d:course)return a, b, c, d;5: match(a:course where name = '数据结构')-[e]-(b:teacher) return a.id, b.name;6: match(a:teacher)<-[e:department_has_teacher]-(b:department where b.name='物理学院') return a, b;7: match(a:student)-[e]->(b:university where b.value <= 723) return MAX(b.level % 1), SUM(b.id - 67);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和person杜强有1跳或2跳关系的person",
        "output": "match(a:person where a.name='杜强')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,peopleNumber分组,计算peopleNumber减786的平均值",
        "output": "return AVG(a.peopleNumber - 786) group by a.id, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person徐建国relates的person,以及relates这些person的person",
        "output": "match(a:person where name = '徐建国')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签等于person的点,返回136个",
        "output": "match(a:person) return a limit 136",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵红认识的person,以及认识这些person的person",
        "output": "match(a:person where name = '赵红')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找评论Comment_161属于的电影节点拥有的标签",
        "output": "match(a:comment where a.name = 'Comment_161')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回陈雪认识的人的身高、ID和姓名。",
        "output": "match(a:person where name = '陈雪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c.height, c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前156个类型是拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取韩红患者接受的处方，由其他医生创建的数量",
        "output": "match(a:patient where a.name='韩红')-[e:accept]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表327,221,891, 以属性id作为相等条件,查询从卖家郑建聪出发,经过标签为seller_has_goods的边,走1度到达的商品点",
        "output": "with p as (select * from (VALUES(327),(221),(891)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (a.name = '郑建聪')) -[e:seller_has_goods ]->(b:goods) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与'呐喊'和'孤城'相关的，且标签为'book'的节点",
        "output": "match(a where a.name = '呐喊')-[e:relates]->(b:book)<-[e2:relates]-(c where c.name = '孤城') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回赵科患者和Prescription_338处方中存在的药品节点，并返回它们的重量、价格和名称。",
        "output": "match(a:patient where a.name='赵科')-[e]->(b:medicine)<-[e2]-(c:prescription where c.name='Prescription_338') return b.weight, b.price, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为事项,名为ISSUE-425的点,返回这些点的id,状态,权重",
        "output": "match(a:issue where a.name = 'ISSUE-425') return a.id, a.status, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家郑思思创造的订单, 令买家的名字等于买家的薪资加薪资的最小值,令买家的id等于订单的名字的数量, 返回买家的名字, 订单的id",
        "output": "match(a:buyer where a.name='郑思思')-[e:creates]->(b:orders) let a.name = MIN(a.salary + a.salary),let a.id = COUNT(b.name) return a.name,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与仓库Mybatis有关系的仓库的星数",
        "output": "match(a:repository where a.name='Mybatis')-[e]-(b:repository) return b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高除身高减9950的值",
        "output": "a.height / a.height - 9950",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(43,'数据结构',1),(36,'操作系统',4)作为请求表数据,属性分别为courseHour,name,credit, 以属性name作为相等条件,请帮我查找所有id为23的student关联的course,和以selects关系关联了这些course的其他student",
        "output": "with p as (select * from (VALUES(43,'数据结构',1),(36,'操作系统',4)) as t(courseHour,name,credit))MATCH (a:student WHERE a.name = p.name AND (a.id = '23')) -[e ]-(b:course) <-[e2:student_selects_course ]-(c:student) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出61个价值不为空且价值大于等于657,或名字不等于杯子的商品,根据价格从小到大排列",
        "output": "match(a:goods where ((a.value is not null) and a.value >= 657) or a.name <> '杯子') return a order by a.price asc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找黄思琪和赵月这两位作家在公共伙伴节点中的名单。",
        "output": "match(a:author where a.name='黄思琪')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='赵月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为美团的点雇佣的person",
        "output": "match(a where a.name='美团')-[e:employee]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有comment的partner,或者它们的伙伴",
        "output": "match(a:comment)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最大值乘value的最大值",
        "output": "MAX(MAX(a.value) * a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名字不为'苹果'，销量不大于661.96，且ID不为52的96个商品，并按名字升序排序。",
        "output": "match(a:goods where a.id <> 52 and a.name <> '苹果' and a.sellerNumber <= 661.96) return a order by a.name asc limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,age,salary分组,计算salary除3415的值",
        "output": "return a.salary / 3415 group by a.id, a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 所有与读者相关的作者，以及与他们知道关系的其他作者。",
        "output": "match(a:reader where a.id = '121')-[e]-(b:author)<-[e2:knows]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据scale,peopleNumber,id分组,计算peopleNumber除838的值",
        "output": "return a.peopleNumber / 838 group by a.scale, a.peopleNumber, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与书有关系的读者节点,且读者节点的名字不等于杜月,并返回这些读者的height的平均值除身高的个数,以及读者的薪资减8378乘62的和",
        "output": "match(a:book)-[e]->(b:reader where b.name <> '杜月') return COUNT(AVG(b.height) / b.height), SUM((b.salary - 8378) * 62)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的salary的最小值对薪资取余对7取余的值",
        "output": "match(a:person) return MIN(a.salary) % a.salary % 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 请帮我查找从person韩建国出发,经过label为person_own_account的边,走1度到达的account点;2: 给出名为Bilibili的company;3: 请帮我找出被person孙雪own的account;4: 给出与person有关系的贷款节点,且贷款节点的权重小于994,并返回这些点的id减88的平均值,以及权重除87除6182.76加28的和;5: 查询person李强的所有label为relation的边,并根据weight升序排列,返回178个;6: 找出person张建国拥有的账号,被其他账号转账的数量;7: 请帮我找出153个createTime等于2025年01月21日且value小于等于714的account,根据value升序排列;",
        "output": "查询语句为:1: match(a:person where a.name='韩建国')-[e:person_own_account]->{1,1}(b:account) return b;2: match(a:company where a.name = 'Bilibili') return a;3: match(a:account)<-[e:person_own_account]-(b:person where b.name='孙雪') return a, b;4: match(a:person)-[e]->(b:loan where b.weight < 994) return AVG(b.id - 88), SUM(b.weight / 87 / 6182.76 + 28);5: match(a:person where a.name = '李强')-[e:relation]->(b) return b order by e.weight asc limit 178;6: match(a:person where a.name='张建国')-[e:person_own_account]->(b:account)<-[e2:account_transfer_account]-(c:account) return COUNT(c);7: match(a:account where a.createTime = '2025-01-21' and a.value <= 714) return a order by a.value asc limit 153;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找创造病人马宏接受的处方,的医生",
        "output": "match(a:patient where name = '马宏')-[e:accept]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被城市属于数量大于116的国家,记为relationCount,再查询这些国家属于的公司",
        "output": "match(a:country) let a.relationCount = MAX((a:country)<-[e:belong]-(b:city) => b.id) match(a where a.relationCount > 116)-[e2:belong]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与电影相关的标签节点，按名称分组并返回。",
        "output": "match(a:film)-[e:has]-(b:tag) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为82的cinema相关的person的朋友，再返回与该person相关的关系。",
        "output": "match(a:cinema where id = '82')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找所有与名为'吴月'的用户有'关系'或'有关系'的post。",
        "output": "match(a:user where n.name=吴月)-[e:relation]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前77个label为包含的边",
        "output": "match(a)-[e:contain]->(b) return e limit 77",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表999,385, 以属性id作为相等条件,请帮我找出person徐宏 watch的film,返回film has的tag的id加80的值 ",
        "output": "with p as (select * from (VALUES(999),(385)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '徐宏')) -[e:person_watch_film ]->(b:film) -[e2:film_has_tag ]->(c:tag) RETURN c.id + 80 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与贷款defaultName有关联的人的申请信息",
        "output": "match(a:loan where a.name='defaultName')<-[e:apply]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与赵梅和何雪都有关的191个处方节点",
        "output": "match(a where a.name='赵梅')-[e]->(b:prescription)<-[e2]-(c where c.name='何雪') return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出王红所有的物品，以及与王红联系的买家，一并返回。",
        "output": "match(a where a.name = '王红')-[e:has]->(b:goods),(a where a.name = '王红')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表34,390,312,162, 以属性id作为相等条件,返回全部与person陈月有关系的person的身高",
        "output": "with p as (select * from (VALUES(34),(390),(312),(162)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '陈月')) -[e ]-(b:person) RETURN b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是student的全部点,并根据name从小到大排列",
        "output": "match(a:student) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回122个书少年闰土和罪与罚,共同的引用",
        "output": "match(a:book where a.name='少年闰土')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='罪与罚') return b limit 122",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与部门内科有拥有关系的3跳以内的环",
        "output": "match(a:department where name = '内科')-[e:has]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回4个和标签为教师的点有教关系的课程,且和这些课程有属于关系的部门",
        "output": "match(a:teacher)-[e:teach]->(b:course)-[e2:belong]->(c:department) return c limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有用户的相关者,或其相关者的相关者",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是事项或用户的点",
        "output": "match(a:issue | user) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person吴梅有创造关系的1度的环",
        "output": "match(a:person where name = '吴梅')-[e:creates]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为56的comment对应的person的partner信息，以及这个person相关的friend信息。",
        "output": "match(a:comment where id = '56')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为seller的所有点,并根据gender降序排列",
        "output": "match(a:seller) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我查找teacher的3度以内的环;2: 帮我查询标签等于department_has_teacher,且满足条件目标点id大于等于113,源点id不等于38,或权重小于163.86的边;3: 查询与大学中国科技大学和华中科技大学都存在university_has_department关系的点;4: 找出部门法学院 拥有的学生,返回学生 选择的课程的课时除20的值 ;5: 返回所有名为生物学院的点拥有的学生;6: 给出student的三角的环,边标签等于student_selects_course, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:teacher)->{0,2}(b)->(a) return a.id, b.id as b_id;2: match(a)-[e:department_has_teacher where (e.targetId >= 113 and e.srcId <> 38) or e.weight < 163.86]->(b) return e;3: match(a:university where a.name='中国科技大学')-[e:university_has_department]->(b)<-[e2:university_has_department]-(c:university where c.name='华中科技大学') return b;4: match(a:department where name = '法学院')-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return c.courseHour / 20;5: match(a where a.name='生物学院')-[e:department_has_student]->(b:student) return b;6: match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 找出全部名为微软的点合作的大学;2: 给出29个大学南京大学和复旦大学,共同的朋友;3: 帮我查询所有源点标签为city,边标签为city_belong_country,并且满足条件weight不等于950,f1是false,或f1不等于true的边;",
        "output": "查询语句为:1: match(a where a.name='微软')-[e:company_cooperate_university]->(b:university) return b;2: match(a:university where a.name='南京大学')-[e:friend]->(b)<-[e2:friend]-(c:university where c.name='复旦大学') return b limit 29;3: match(a:city)-[e:city_belong_country where (e.weight <> 950 and e.f1 = false) or e.f1 <> true]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(915,16,43)作为请求表数据,属性分别为value,peopleNumber,id, 以属性value作为相等条件,找出标签为帖子,名为Post_162的点,返回这些点的创建时间,字数",
        "output": "with p as (select * from (VALUES(915,16,43)) as t(value,peopleNumber,id))MATCH (a:post WHERE a.value = p.value AND (a.name = 'Post_162')) RETURN a.createTime, a.wordCount ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表580,893,913, 源点的id等于输入表id,请帮我查找全部和名为放射科的部门有相关者关系,或有相关者的相关者关系的医生",
        "output": "with p as (select * from (VALUES(580),(893),(913)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (n.name = 放射科)) -[e:relation ]->{1,2}(b:doctor) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为173的person关联的person, 并将person有关的person的名字的最小值赋值给person(b)的性别, 接着查询person(b)的性别小于173的person认识的person",
        "output": "match(a:person where a.id = 173)-[e:relates]->(b:person) let b.gender = MIN((b:person)-[e2]-(c:person) => c.name) match(b:person where b.gender < 173)-[e3:knows]->(d:person) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询Post_263帖子的相关人以及他们的伙伴。",
        "output": "match(a:post where a.name='Post_263')-[e:relation]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找与腾讯有投资关系的人",
        "output": "match(a:company where a.name='腾讯')<-[e:invest]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出黄若涵和陈轩共同的朋友列表。",
        "output": "match(a:person where a.name='黄若涵')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,value, 数据为('浙江大学',91,371),('电子科技大学',54,842),('北京大学',95,857)的子查询作为输入表, 源点的name等于输入表name,返回前108个标签为country_contain_city的边",
        "output": "with p as (select * from (VALUES('浙江大学',91,371),('电子科技大学',54,842),('北京大学',95,857)) as t(name,id,value))MATCH (a WHERE a.name = p.name) -[e:country_contain_city ]->(b) RETURN e LIMIT 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为创造,且源点id大于等于163的边",
        "output": "match(a)-[e:creates where e.srcId >= 163]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 给出名为周思琪的,height大于等于1643,gender不等于male的partner,返回这些partner的gender,和边的f1;2: 请帮我找出源点身高不为空或名字为王梅或薪资不为空,边类型为person_pay_person,且f1不是true,srcId的最小值乘源点id是583且f0在631到741之间的边,返回这些边的源点id乘76减179.00对99取余的求和值;3: 给出类型是person,名为杜伟的点,返回这些点的年龄,名字;4: 找出和person有关联的person节点,并根据其身高,名字,年龄分组,返回身高,名字,年龄,以及年龄加年龄的值;5: 帮我查询马雪的点支付的person,然后帮我查询马雪被认识的person,一起返回;6: 帮我查询全部id为93的person关联的person,和以pay关系关联了这些person的其他person;7: 请帮我查找名为韩强的person;8: 帮我查询类型为person_pay_person,以及满足条件srcId大于等于91的边;9: 请帮我查找被person周雪喜欢的person;",
        "output": "查询语句为:1: match(a where a.name='周思琪')-[e:partner]->(b where b.height >= 1643 and b.gender <> 'male') return b.gender,e.f1;2: match(a where (a.height is not null) or a.name = '王梅' or (a.salary is not null))-[e:person_pay_person where e.f1 <> true and MIN(e.srcId) * e.srcId = 583 and (e.f0 BETWEEN 631 AND 741)]->(b) return SUM(e.srcId * 76 - 179.00 % 99);3: match(a:person where a.name = '杜伟') return a.age, a.name;4: match(a:person)-[e:person_pay_person]-(b:person) return b.height, b.name, b.age, b.age + b.age group by b.height, b.name, b.age;5: match(a where a.name = '马雪')-[e:person_pay_person]->(b:person),(a where a.name = '马雪')<-[e2:person_knows_person]-(c:person) return a, b, c;6: match(a:person where a.id = '93')-[e]-(b:person)<-[e2:person_pay_person]-(c:person) return b,c;7: match(a:person where a.name = '韩强') return a;8: match(a)-[e:person_pay_person where e.srcId >= 91]->(b) return e;9: match(a:person)<-[e:person_likes_person]-(b:person where b.name='周雪') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我查找与person马思琪有关,且与person赵建国有关系的person节点;2: 请帮我查找28个name不是马雪或height为空或salary除5670不等于18的person,根据id升序排列;3: 查询以relates关系关联了person赵科的person;4: 找出person郑月的所有类型为family的边,并根据srcId从大到小排列,返回64个;5: 请帮我查找person孙若涵的同事的同事的同事;6: 查找所有和person张轩有3度关系的person;",
        "output": "查询语句为:1: match(a:person where a.name='马思琪')-[e:person_friend_person]-(b:person)-[e2:person_lover_person]-(c:person where c.name='赵建国') return b;2: match(a:person where a.name <> '马雪' or (a.height is null) or a.salary / 5670 <> 18) return a order by a.id asc limit 28;3: match(a:person where a.name='赵科')<-[e:relates]-(b:person) return b;4: match(a:person where a.name = '郑月')-[e:person_family_person]->(b) return b order by e.srcId desc limit 64;5: match(a:person where a.name='孙若涵')-[e:person_colleague_person]->(b)-[e2:person_colleague_person]->(c)-[e3:person_colleague_person]->(d) return d;6: match(a:person where a.name='张轩')-[e]->{3,3}(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杭州这座城市。",
        "output": "match(a:city where a.name = '杭州') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为吴强的人有关联的人员，包括其伙伴或者伙伴的伙伴。",
        "output": "match(a:person where n.name=吴强)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和公司Bilibili有2到4跳关系的person",
        "output": "match(a:company where a.name='Bilibili')-[e]->{2,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的三角的环,边标签为支付, 并返回这些点的id",
        "output": "match(a:person)-[e:pay]->(b)-[e2:pay]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据规格分组,计算人数对人数取余的值",
        "output": "return a.peopleNumber % a.peopleNumber group by a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为天涯论坛的节点包含的用户或帖子或标签",
        "output": "match(a where a.name='天涯论坛')-[e:contain]->(b:user | post | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回write book孤城的author,和这些author write的book",
        "output": "match(a:book where name = '孤城')<-[e:write]-(b:author)-[e2:write]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为97的person有关的person的friend, 再返回和person有关系的colleague",
        "output": "match(a:person where id = 97)-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:colleague]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与Bob存在回答关系的买家,买家与订单存在创造关系的点,返回这些点的价格",
        "output": "match(a where a.name = 'Bob')-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,name,salary, 数据为(187,'孙科',2324),(177,'郑建聪',1412), 源点的salary等于输入表salary,返回全部杜伟的点relates的person,然后返回杜伟被knows的person,一起返回",
        "output": "with p as (select * from (VALUES(187,'孙科',2324),(177,'郑建聪',1412)) as t(height,name,salary))MATCH (a WHERE a.salary = p.salary AND (a.name = '杜伟')) -[e:relates ]->(b:person) , (a WHERE a.name = '杜伟') <-[e2:knows ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与 person 相关联的 software 节点，按名称分组并返回。",
        "output": "match(a:person)-[e:buy]-(b:software) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,amount,weight分组,计算weight除194的最小值",
        "output": "return MIN(a.weight / 194) group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出141个名为李伟的点创造的类型为事项的节点,且其权重不为空,状态等于Running",
        "output": "match(a where a.name='李伟')-[e:creates]->(b:issue where (b.weight is not null) and b.status = 'Running') return b limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出前71个gender不是male且height大于等于197,或gender是male的person;2: 请帮我找出和person马梅有关的person,再请帮我找出和马梅person_knows_person的其他person,返回它们;3: 返回标签为person_knows_person,以及满足条件权重为空,源点id不等于73的边;4: 返回person的1跳的环;",
        "output": "查询语句为:1: match(a:person where (a.gender <> 'male' and a.height >= 197) or a.gender = 'male') return a limit 71;2: match(a:person where a.name = '马梅')-[e]-(b:person), (a:person)-[e2:person_knows_person]->(c:person) return a, b, c;3: match(a)-[e:person_knows_person where (e.weight is null) and e.srcId <> 73]->(b) return e;4: match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 与赵轩有关的电子科技大学部门",
        "output": "match(a:university where a.name='电子科技大学')-[e:has]-(b:department)-[e2:has]-(c:student where c.name='赵轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值分组,计算价值减644的值",
        "output": "return a.value - 644 group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和评论Comment_492有2度或3度关系的电影院",
        "output": "match(a:comment where a.name='Comment_492')-[e]->{2,3}(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找112个名为何建国的点接受的标签为处方的节点,且其名字是Prescription_132,权重在304到541之间",
        "output": "match(a where a.name='何建国')-[e:accept]->(b:prescription where b.name = 'Prescription_132' and (b.weight BETWEEN 304 AND 541)) return b limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person点有relates关系的person节点,且边满足条件f0在751到923之间,目标person节点id在7到80之间",
        "output": "match(a:person)-[e:relates where (e.f0 BETWEEN 751 AND 923)]->(b:person where (b.id BETWEEN 7 AND 80)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person支付的person, 令person(b)的身高的值等于喜欢person的person的id的求和值, 再查找person认识的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.height = SUM((b:person)<-[e2:likes]-(c:person) => c.id) match(b:person)-[e3:knows]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出4个和标签等于person的点有认识关系的person,以及和这些person有购买关系的软件",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:buy]->(c:software) return c limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与急诊部有相关者关系的医生，或与急诊部有相关者相关者关系的医生。",
        "output": "match(a:department where n.name=急诊部)-[e:relation]->{1,2}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出comment Comment_204 belong的film, 令film的id等于comment的wordCount的平均值,令comment的wordCount等于comment的id,令film的id等于comment的name的最大值, 返回comment的name, film的name",
        "output": "match(a:comment where a.name='Comment_204')-[e:belong]->(b:film) let b.id = AVG(a.wordCount),let a.wordCount = a.id,let b.id = MAX(a.name) return a.name,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点类型是部门,目标点类型是教师,类型是教师或部门的边",
        "output": "match(a:department)-[e:teacher | department]->(b:teacher) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询部门拥有的医生, 令医生的身高的值等于拥有医生的部门的权重的最小值, 再查找医生创造的处方",
        "output": "match(a:department)-[e:has]->(b:doctor) let b.height = MIN((b:doctor)<-[e2:has]-(c:department) => c.weight) match(b:doctor)-[e3:creates]->(d:prescription) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 请帮我找出类型为person的点,返回143个;2: 请帮我查找源点类型为person,边类型为person_creates_comment,以及满足条件targetId小于等于57,targetId小于等于3且f0等于988的边;3: 请帮我找出和电影院有关联的电影节点,并根据其名字,价值分组,返回名字,价值,以及id减75的最小值;4: 帮我查询复仇者联盟的点拥有的标签,然后帮我查询复仇者联盟被上映的电影院,一起返回;",
        "output": "查询语句为:1: match(a:person) return a limit 143;2: match(a:person)-[e:person_creates_comment where e.targetId <= 57 and e.targetId <= 3 and e.f0 = 988]->(b) return e;3: match(a:cinema)-[e:cinema_releases_film]-(b:film) return b.name, b.value, MIN(b.id - 75) group by b.name, b.value;4: match(a where a.name = '复仇者联盟')-[e:film_has_tag]->(b:tag),(a where a.name = '复仇者联盟')<-[e2:cinema_releases_film]-(c:cinema) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出被医生周伟创造的处方;2: 请帮我找出医生吴梅创造的处方,被其他病人接受的数量;3: 查询部门的伙伴,或其伙伴的伙伴;4: 帮我查询所有放射科的点拥有的医生,然后帮我查询放射科被属于的医生,一起返回;",
        "output": "查询语句为:1: match(a:prescription)<-[e:doctor_creates_prescription]-(b:doctor where b.name='周伟') return a, b;2: match(a:doctor where a.name='吴梅')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:patient_accept_prescription]-(c:patient) return COUNT(c);3: match(a:department)-[e:partner]->{1,2}(b) return b;4: match(a where a.name = '放射科')-[e:department_has_doctor]->(b:doctor),(a where a.name = '放射科')<-[e2:doctor_belong_department]-(c:doctor) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被医生陈强属于的部门,和陈强属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '陈强')-[e2:belong]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person赵宏存在喜欢关系,且与电影我不是药神存在属于关系的评论节点，返回这些评论的字数,id,创建时间,及person赵宏的名字,及电影我不是药神的类别",
        "output": "match(a:person where a.name='赵宏')-[e:likes]->(b:comment)<-[e2:belong]-(c:film where c.name='我不是药神') return a.name,b.wordCount, b.id, b.createTime,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以766,967,829,617,711作为请求点id, 源点的id等于输入表id,查询forum天涯论坛 contain的post,返回post has的tag的id乘30的最大值 ",
        "output": "with p as (select * from (VALUES(766),(967),(829),(617),(711)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (name = '天涯论坛')) -[e:forum_contain_post ]->(b:post) -[e2:post_has_tag ]->(c:tag) RETURN MAX(c.id * 30) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出15个与大学有合作关系的公司，以及这些公司与哪些城市有合作关系。",
        "output": "match(a:university)-[e:cooperate]->(b:company)-[e2:belong]->(c:city) return c limit 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找全部和person赵若涵之间有person_likes_person关系的person;2: 返回源点标签等于person,边标签等于person_pay_person的边,返回这些边的srcId的最大值减91的个数,和targetId减targetId的值;3: 找出所有和person韩雪有2到5跳关系的person;4: 找出person以id分组的id, 根据id升序排序;5: 请帮我查找名为Bob的点likes的所有person,并对这些点的age进行求和;6: 找出person以height分组的name, 根据name从大到小排序;",
        "output": "查询语句为:1: match(a:person where a.name='赵若涵')-[e:person_likes_person]->(b:person) return b;2: match(a:person)-[e:person_pay_person]->(b) return COUNT(MAX(e.srcId) - 91), e.targetId - e.targetId;3: match(a:person where a.name='韩雪')-[e]->{2,5}(b:person) return b;4: match(a:person) return a.id group by a.id order by a.id asc;5: match(a where a.name='Bob')-[e:person_likes_person]->(b:person) return SUM(b.age);6: match(a:person) return a.name group by a.height order by a.name desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出publisher吴若涵publish的book节点relates的book",
        "output": "match(a:publisher where a.name = '吴若涵')-[e:publish]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出前191个标签等于buyer_look_goods的边",
        "output": "match(a)-[e:buyer_look_goods]->(b) return e limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以199,128,843,321,689作为请求点id, 源点的id等于输入表id,查找名为计算机网络的,name等于孤城的refers,返回这些refers的createTime,和边的weight,f0,targetId",
        "output": "with p as (select * from (VALUES(199),(128),(843),(321),(689)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '计算机网络')) -[e:book_refers_book ]->(b WHERE b.name = '孤城') RETURN b.createTime, e.weight, e.f0, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出城市的三角的环,边类型为包含, 并返回这些点的id",
        "output": "match(a:city)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与person节点相关的person节点，并按其height进行分组，然后返回这些节点的高度。",
        "output": "match(a:person)-[e:pay]-(b:person) return b.height group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person赵科 支付的person,返回person 支付的person的薪资除3848的平均值",
        "output": "match(a:person where name = '赵科')-[e:pay]->(b:person)-[e2:pay]->(c:person) return AVG(c.salary / 3848)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找评论Comment_468 属于的电影,返回电影 拥有的标签的价值加211的值",
        "output": "match(a:comment where name = 'Comment_468')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.value + 211",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person徐轩 认识的person,返回person 认识的person的height的求和值对159取余的值",
        "output": "match(a:person where name = '徐轩')-[e:knows]->(b:person)-[e2:knows]->(c:person) return SUM(c.height) % 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑思琪存在咨询关系的卖家,卖家与买家存在回答关系的点,返回这些点的身高",
        "output": "match(a where a.name = '郑思琪')-[e:consult]->(b:seller)-[e2:ask]->(c:buyer) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出既是周思琪朋友又是李科朋友的医生名单。",
        "output": "match(a:doctor where a.name='周思琪')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='李科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出tag的2度的环",
        "output": "match(a:tag)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘46的值",
        "output": "a.id * 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以包含关系关联了帖子Post_148的论坛",
        "output": "match(a:post where a.name='Post_148')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘0的值",
        "output": "a.id * 0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回130个id大于等于19的company,根据name降序排列",
        "output": "match(a:company where a.id >= 19) return a order by a.name desc limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有读者的薪资除2589乘年龄乘74的最大值",
        "output": "match(a:reader) return MAX(a.salary / 2589 * a.age * 74)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前17个满足条件创建时间是2030年11月19日的帖子",
        "output": "match(a:post where a.createTime = '2030-11-19') return a limit 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person周国强pay的person, 令person(b)的gender等于person(a)的id减90,令person(a)的salary等于person(b)的name的平均值, 返回person(a)的age, person(b)的id",
        "output": "match(a:person where a.name='周国强')-[e:pay]->(b:person) let b.gender = a.id - 90,let a.salary = AVG(b.name) return a.age,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和user陈雪有2度关系的user",
        "output": "match(a:user where a.name='陈雪')-[e]->{2,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出和标签等于person的点有person_pay_person关系的person,且和这些person有person_pay_person关系的person,且和这些person有person_knows_person关系的person;2: 查找所有徐轩的点pay的person,然后查找徐轩被knows的person,一起返回;3: 给出person赵月的全部类型为相关者的边,并根据目标点id从小到大排列,返回57个;4: 帮我查询person韩思琪的全部label为伙伴的边,并根据目标点id从大到小排列,返回23个;5: 找出和person有关联的person节点,并根据其age,id,name分组,返回age,id,name,以及id减17的值;6: 给出person郑强的全部标签等于朋友的边,并根据源点id降序排列,返回84个;7: 查找person吴思思likes的person,被其他person knows的数量;8: 查找person的伙伴,或其伙伴的伙伴;",
        "output": "查询语句为:1: match(a:person)-[e:person_pay_person]->(b:person)-[e2:person_pay_person]->(c:person)-[e3:person_knows_person]->(d:person) return d;2: match(a where a.name = '徐轩')-[e:person_pay_person]->(b:person),(a where a.name = '徐轩')<-[e2:person_knows_person]-(c:person) return a, b, c;3: match(a:person where a.name = '赵月')-[e:relation]->(b) return b order by e.targetId asc limit 57;4: match(a:person where a.name = '韩思琪')-[e:partner]->(b) return b order by e.targetId desc limit 23;5: match(a:person)-[e:person_knows_person]-(b:person) return b.age, b.id, b.name, b.id - 17 group by b.age, b.id, b.name;6: match(a:person where a.name = '郑强')-[e:friend]->(b) return b order by e.srcId desc limit 84;7: match(a:person where a.name='吴思思')-[e:person_likes_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);8: match(a:person)-[e:partner]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(6884,'famale',85),(2912,'male',2),(4887,'male',54)作为请求表数据,属性分别为salary,gender,id, 源点的salary等于输入表salary,给出29个name不等于黄强的reader,根据age从小到大排列",
        "output": "with p as (select * from (VALUES(6884,'famale',85),(2912,'male',2),(4887,'male',54)) as t(salary,gender,id))MATCH (a:reader WHERE a.salary = p.salary AND (a.name <> '黄强')) RETURN a ORDER BY a.age LIMIT 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person吴宏pay的person, 令person的id等于person的age,令person(b)的gender等于person(a)的id对23取余加7, 返回person(a)的name, person(b)的name",
        "output": "match(a:person where a.name='吴宏')-[e:pay]->(b:person) let b.id = b.age,let b.gender = a.id % 23 + 7 return a.name,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点身高大于197,性别是famale,边标签等于喜欢,且满足条件权重为空的边,返回这些边的weight的个数减131.78的求和值",
        "output": "match(a where a.height > 197 and a.gender = 'famale')-[e:likes where (e.weight is null)]->(b) return SUM(COUNT(e.weight) - 131.78)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出用户喜欢的35个标签为自己的帖子，以及这些帖子所涉及的所有标签",
        "output": "match(a:user)-[e:likes]->(b:post)-[e2:has]->(c:tag) return c limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询person点相关的评论节点，并按其ID分组，返回ID。",
        "output": "match(a:person)-[e:creates]-(b:comment) return b.id group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被仓库Flink拥有的事项,和Flink拥有的合并请求",
        "output": "match(a:issue)<-[e:has]-(b:repository where name = 'Flink')-[e2:has]->(c:pullRequest) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回185个权重为352或权重为339或金额大于等于6579.88的贷款,根据金额从小到大排列",
        "output": "match(a:loan where a.weight = 352 or a.weight = 339 or a.amount >= 6579.88) return a order by a.amount asc limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出权重大于395的94个处方，按照id从大到小排序",
        "output": "match(a:prescription where a.weight > 395) return a order by a.id desc limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为srcId,f0,f1, 数据为(42,900,true)的子查询作为输入表, 源点的f0等于输入表f0,查询标签等于forum_contain_post,并且f1是true,f1不等于false且权重大于105.47的边",
        "output": "with p as (select * from (VALUES(42,900,true)) as t(srcId,f0,f1))MATCH (a WHERE a.f0 = p.f0) -[e:forum_contain_post WHERE e.f1 = TRUE AND e.f1 <> FALSE AND e.weight > 105.47 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person杜建国喜欢的person, 令person的名字等于person的id,令person(a)的名字等于person(b)的身高的最大值, 返回person(a)的身高, person(b)的性别",
        "output": "match(a:person where a.name='杜建国')-[e:likes]->(b:person) let a.name = a.id,let a.name = MAX(b.height) return a.height,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询张国强和何红之间是否存在接受关系。",
        "output": "match(a:patient where a.name='张国强')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='何红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出大小小于89的部门拥有的教师的名称,以及这些教师 教的课程的名称",
        "output": "match(a:department where a.size < 89)-[e:has]->(b:teacher)-[e2:teach]->(c:course) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据规格,id,价值分组,计算id对id取余的值",
        "output": "return a.id % a.id group by a.scale, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出王建聪喜欢的人",
        "output": "match(a:person)<-[e:likes]-(b:person where b.name='王建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出一个人所有的朋友，或一个人朋友的朋友。",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出和university华中科技大学有university_cooperate_company关系的company,再给出以university_cooperate_company关系关联了华中科技大学的company;2: 给出被城市纽约包含的公司;3: 查找和类型是company的点有company_belong_city关系的city,以及和这些city有city_contain_company关系的company,以及和这些company有company_belong_city关系的city;4: 请帮我查找全部源点类型为国家,边类型为country_contain_city,以及目标点id等于168的边;5: 计算所有公司的value的求和值加124的值;",
        "output": "查询语句为:1: match(a:university where a.name = '华中科技大学')-[e:university_cooperate_company]->(b:company),(a:university where a.name = '华中科技大学')<-[e2:university_cooperate_company]-(c:company)return a, b, c;2: match(a:company)<-[e:city_contain_company]-(b:city where b.name='纽约') return a, b;3: match(a:company)-[e:company_belong_city]->(b:city)-[e2:city_contain_company]->(c:company)-[e3:company_belong_city]->(d:city) return d;4: match(a:country)-[e:country_contain_city where e.targetId = 168]->(b) return e;5: match(a:company) return SUM(a.value) + 124;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回105个名为杜科的点knows的类型是person的节点,且其height为空或id小于等于70",
        "output": "match(a where a.name='杜科')-[e:knows]->(b:person where (b.height is null) or b.id <= 70) return b limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为lastLoginTime,isBlock,createTime, 数据为(2009-10-19,false,2015-11-15),(2024-06-30,false,1998-01-19)的子查询作为输入表, 以属性createTime作为相等条件,返回company的3度以内的环",
        "output": "with p as (select * from (VALUES(2009-10-19,false,2015-11-15),(2024-06-30,false,1998-01-19)) as t(lastLoginTime,isBlock,createTime))MATCH (a:company WHERE a.createTime = p.createTime) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找id为34的点的wordCount;2: 请帮我查找和标签为person的点有person_likes_comment关系的评论,且和这些评论有comment_belong_film关系的电影,且和这些电影有film_has_tag关系的标签;3: 找出person喜欢的评论,返回其源点的年龄减6减id的值,以及目标点的wordCount的最小值加991的值;4: 请帮我找出id为61的点的类别,价值,名字;",
        "output": "查询语句为:1: match(a where a.id = '34') return a.wordCount;2: match(a:person)-[e:person_likes_comment]->(b:comment)-[e2:comment_belong_film]->(c:film)-[e3:film_has_tag]->(d:tag) return d;3: match(a:person)-[e:person_likes_comment]->(b:comment) return a.age - 6 - a.id, MIN(b.wordCount) + 991;4: match(a where a.id = '61') return a.category, a.value, a.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为university的所有点,并根据value从小到大排列",
        "output": "match(a:university) return a order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回陈国强这个publisher标签下的点，并返回这些点的height和gender。",
        "output": "match(a:publisher where a.name = '陈国强') return a.height, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Ee', 10作为输入调用pageRank函数,返回id, value",
        "output": "Call PAGERANK('Ee', 10) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些销量不超过1391.95或者名称不包含'键盘'的商品，按照价值从低到高排序，数量为179个。",
        "output": "match(a:goods where a.sellerNumber <= 1391.95 or a.name <> '键盘') return a order by a.value asc limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被医生诊断数量大于180的病人,记为relationCount,再查询这些病人诊断的病人",
        "output": "match(a:patient) let a.relationCount = MAX((a:patient)<-[e:diagnose]-(b:doctor) => b.id) match(a where a.relationCount > 180)-[e2:diagnose]->(c:patient) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与大学南京大学有关系的学生的id",
        "output": "match(a:university where a.name='南京大学')-[e]-(b:student) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询被person黄梅喜欢的评论;2: 查找电影院上映的电影,返回其源点的id的最小值对93取余的最小值,以及目标点的id对30取余的值;3: 返回电影院的三角的环,边类型是cinema_releases_film, 并返回这些点的id;4: 请帮我查找类型为comment的所有点,并根据wordCount从大到小排列;",
        "output": "查询语句为:1: match(a:comment)<-[e:person_likes_comment]-(b:person where b.name='黄梅') return a, b;2: match(a:cinema)-[e:cinema_releases_film]->(b:film) return MIN(MIN(a.id) % 93), b.id % 30;3: match(a:cinema)-[e:cinema_releases_film]->(b)-[e2:cinema_releases_film]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a:comment) return a order by a.wordCount desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出位于重庆的公司，获取这些公司的合作大学的名称、ID和级别。",
        "output": "match(a:city where name = '重庆')-[e:contain]->(b:company)-[e2:cooperate]->(c:university) return c.name, c.id, c.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为level,name,value, 数据为(2,'武汉大学',123),(3,'重庆大学',480),(4,'重庆大学',526),(1,'复旦大学',409), 以属性value作为相等条件,请帮我找出country contain的city,返回其源点的peopleNumber除40546的平均值,以及目标点的peopleNumber减2230的数量",
        "output": "with p as (select * from (VALUES(2,'武汉大学',123),(3,'重庆大学',480),(4,'重庆大学',526),(1,'复旦大学',409)) as t(level,name,value))MATCH (a:country WHERE a.value = p.value) -[e:country_contain_city ]->(b:city) RETURN AVG(a.peopleNumber / 40546), COUNT(b.peopleNumber - 2230) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关系的person节点,且person节点的salary为空,并返回这些person的id加25的值,以及person的height加188的值",
        "output": "match(a:person)-[e]->(b:person where (b.salary is null)) return b.id + 25, b.height + 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与用户吴宏相关的人员，以及他喜欢的其他帖子，并将它们返回。",
        "output": "match(a:user where a.name = '吴宏')-[e]-(b:person), (a:user)-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与名为'徐科'的人相关的所有person节点，并返回这些节点中salary的总和、salary除以9404的值、以及age加92的值。",
        "output": "match(a:person)-[e]->(b:person where b.name = '徐科') return SUM(b.salary) / b.salary / 9404, b.age + 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有大学的等级减3的值",
        "output": "match(a:university) return a.level - 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和买家杜伟之间有取消关系的订单",
        "output": "match(a:buyer where a.name='杜伟')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询源点标签等于city,边标签等于city_contain_company,且满足条件f1为true的边;2: 给出全部名为韩国的点contain的city;3: 查找源点人数不为空,边类型为country_contain_city,且目标点id为空的边,返回这些边的weight的最大值除权重的值;4: 找出id小于175,人数大于85848且人数小于96763的节点;5: 返回company滴滴的relation的relation的friend;6: 找出与名为东京和北京的点共同包含的,类型为公司的节点;7: 请帮我查找所有源点label为大学,边label为university_cooperate_company,且f0减668的最小值大于等于156且源点id小于等于54,或目标点id大于等于78的边;",
        "output": "查询语句为:1: match(a:city)-[e:city_contain_company where e.f1 = true]->(b) return e;2: match(a where a.name='韩国')-[e:country_contain_city]->(b:city) return b;3: match(a where (a.peopleNumber is not null))-[e:country_contain_city where (e.targetId is null)]->(b) return MAX(e.weight) / e.weight;4: match(a where a.id < 175 and a.peopleNumber > 85848 and a.peopleNumber < 96763) return a;5: match(a:company where a.name='滴滴')-[e:relation]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d;6: match(a where a.name = '东京')-[e:city_contain_company]->(b:company)<-[e2:city_contain_company]-(c where c.name = '北京') return b;7: match(a:university)-[e:university_cooperate_company where (MIN(e.f0 - 668) >= 156 and e.srcId <= 54) or e.targetId >= 78]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和大学浙江大学有关的城市,再给出和浙江大学属于的其他城市,返回它们",
        "output": "match(a:university where a.name = '浙江大学')-[e]-(b:city), (a:university)-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与医生周思琪有关系的处方的名字",
        "output": "match(a:doctor where a.name='周思琪')-[e]-(b:prescription) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为悬疑的标签,以及与其有关的帖子,并返回悬疑的价值和这些帖子的id",
        "output": "match(a:tag where name = '悬疑')-[e]-(b:post) return a.value, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查找43个编辑Alice和张雪,共同的朋友",
        "output": "match(a:publisher where a.name='Alice')-[e:friend]->(b)<-[e2:friend]-(c:publisher where c.name='张雪') return b limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person的2跳以内的环",
        "output": "match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 周科commits的software被其他person commits的数量。",
        "output": "match(a:person where a.name='周科')-[e:commits]->(b:software)<-[e2:commits]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为CSDN的,语言是French或名字不是Post_384的相关者,返回这些相关者的价值,和边的f1,源点id,权重",
        "output": "match(a where a.name='CSDN')-[e:relation]->(b where b.lang = 'French' or b.name <> 'Post_384') return b.value,e.f1, e.srcId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与南京大学存在belong关系的city,city与country存在belong关系的点,返回这些点的area",
        "output": "match(a where a.name = '南京大学')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算value减value的值",
        "output": "return a.value - a.value group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找认识person郑红的person,和这些person家人的person",
        "output": "match(a:person where name = '郑红')<-[e:knows]-(b:person)-[e2:family]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有教师的id乘25的值",
        "output": "match(a:teacher) return a.id * 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(17,'西虹市首富',195),(55,'泰坦尼克号',117),(19,'复仇者联盟',74)作为请求表数据,属性分别为id,name,value, 源点的value等于输入表value,给出film has的tag,返回其源点的id对id取余减id的个数,以及目标点的value的最大值除410加70加675的值",
        "output": "with p as (select * from (VALUES(17,'西虹市首富',195),(55,'泰坦尼克号',117),(19,'复仇者联盟',74)) as t(id,name,value))MATCH (a:film WHERE a.value = p.value) -[e:film_has_tag ]->(b:tag) RETURN COUNT(a.id % a.id - a.id), MAX(b.value) / 410 + 70 + 675 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Flink的,状态不等于Closed且权重不是163的伙伴,返回这些伙伴的权重,和边的权重,源点id",
        "output": "match(a where a.name='Flink')-[e:partner]->(b where b.status <> 'Closed' and b.weight <> 163) return b.weight,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被买家郑轩取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='郑轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与传染部存在拥有关系的医生,医生与病人存在诊断关系的点,返回这些点的性别",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找56个大学重庆大学和武汉大学,共同的伙伴",
        "output": "match(a:university where a.name='重庆大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='武汉大学') return b limit 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找前161个满足条件薪资大于1849的医生",
        "output": "match(a:doctor where a.salary > 1849) return a limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,age,gender, 数据为(7159,6,'male'),(9344,56,'famale'),(1919,7,'famale'), 以属性salary作为相等条件,查询全部源点类型是person,边类型是person_friend_person,且目标点id在50到140之间或目标点id不是107的边",
        "output": "with p as (select * from (VALUES(7159,6,'male'),(9344,56,'famale'),(1919,7,'famale')) as t(salary,age,gender))MATCH (a:person WHERE a.salary = p.salary) -[e:person_friend_person WHERE e.targetId BETWEEN ASYMMETRIC 50 AND 140 OR e.targetId <> 107 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与部门有关系的大学节点,且大学节点的id大于等于76,并返回这些大学的level的个数加2的值,以及大学的id加13的求和值",
        "output": "match(a:department)-[e]->(b:university where b.id >= 76) return COUNT(b.level) + 2, SUM(b.id + 13)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有tag的value的平均值乘569的值",
        "output": "match(a:tag) return AVG(a.value) * 569",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询韩伟支付的人的薪资和性别。",
        "output": "match(a:person where name = '韩伟')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c.salary, c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出大学的3度以内的环",
        "output": "match(a:university)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与评论Comment_457有关系的person, 返回和这些person有关联的person的,height的个数对身高取余的值",
        "output": "match(a:comment where a.name= 'Comment_457')-[e]-(b:person)-[e2]-(c:person) return COUNT(c.height) % c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回华中科技大学。",
        "output": "match(a:university where a.name = '华中科技大学') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被用户张建聪喜欢的帖子,和张建聪发布的帖子",
        "output": "match(a:post)<-[e:likes]-(b:user where name = '张建聪')-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点类型是医生,目标点类型是部门,类型是药品或处方或病人的边",
        "output": "match(a:doctor)-[e:medicine | prescription | patient]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与person张科有关系的person的id",
        "output": "match(a:person where a.name='张科')-[e]-(b:person) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从孙思琪出发，沿着她喜欢的方向走3到5度，到达某个帖子点。",
        "output": "match(a:user where a.name='孙思琪')-[e:likes]->{3,5}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询耳鼻喉科的点拥有的医生,然后帮我查询耳鼻喉科被属于的医生,一起返回",
        "output": "match(a where a.name = '耳鼻喉科')-[e:has]->(b:doctor),(a where a.name = '耳鼻喉科')<-[e2:belong]-(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找id为79的person有关的person的恋人, 再请帮我查找和person有关系的父母;2: 请帮我找出全部源点name不等于Sam,目标点name不等于周建聪,且label为person_lover_person的边;3: 查询与person马梅有person_lover_person关系的3跳的环;4: 找出所有源点满足条件薪资小于等于2651,目标点满足条件性别不是famale,薪资为空且性别大于等于2,且标签为person_parent_person的边;5: 返回和person郑雪有person_friend_person关系的person,再返回以person_lover_person关系关联了郑雪的person;6: 找出id为62的点的名字,年龄;7: 查找被person陈思思knows的person;8: 查找名为马轩和徐雪的,类型是person的点公共的父母节点的名单;9: 帮我查询源点类型为person,边类型为person_family_person,并且满足条件f0大于等于558,targetId小于等于118的边;",
        "output": "查询语句为:1: match(a:person where id = '79')-[e]-(b:person)-[e2:person_lover_person]->(c), (b:person)-[e3:person_parent_person]->(d) return a, b, c, d;2: match(a where a.name <> 'Sam')-[e:person_lover_person]->(b where b.name <> '周建聪') return e;3: match(a:person where name = '马梅')-[e:person_lover_person]->{2,2}(b)->(a) return a.id, b.id as b_id;4: match(a where a.salary <= 2651)-[e:person_parent_person]->(b where b.gender <> 'famale' and (b.salary is null) and b.gender >= 2) return e;5: match(a:person where a.name = '郑雪')-[e:person_friend_person]->(b:person),(a:person where a.name = '郑雪')<-[e2:person_lover_person]-(c:person)return a, b, c;6: match(a where a.id = '62') return a.name, a.age;7: match(a:person)<-[e:knows]-(b:person where b.name='陈思思') return a, b;8: match(a:person where a.name='马轩')-[e:person_parent_person]->(b)<-[e2:person_parent_person]-(c:person where c.name='徐雪') return b.name;9: match(a:person)-[e:person_family_person where e.f0 >= 558 and e.targetId <= 118]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,name,gender, 数据为(190,'赵伟','male'),(171,'黄宏','famale'),(155,'黄科','famale'), 以属性gender作为相等条件,请帮我找出从doctor马伟出发,经过label为doctor_diagnose_patient的边,走2跳到达的patient点",
        "output": "with p as (select * from (VALUES(190,'赵伟','male'),(171,'黄宏','famale'),(155,'黄科','famale')) as t(height,name,gender))MATCH (a:doctor WHERE a.gender = p.gender AND (a.name = '马伟')) -[e:doctor_diagnose_patient ]->{2,2}(b:patient) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找144个名为何雪的点拥有的标签为账号的节点,且节点上次登录时间等于2029年08月26日;2: 给出贷款defaultName的所有标签为朋友的边,并根据目标点id降序排列,返回91个;3: 查找与账号Zeus和XXD都存在account_repay_loan关系的点;",
        "output": "查询语句为:1: match(a where a.name='何雪')-[e:person_own_account]->(b:account where b.lastLoginTime = '2029-08-26') return b limit 144;2: match(a:loan where a.name = 'defaultName')-[e:friend]->(b) return b order by e.targetId desc limit 91;3: match(a:account where a.name='Zeus')-[e:account_repay_loan]->(b)<-[e2:account_repay_loan]-(c:account where c.name='XXD') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回张梅医生的丈夫的朋友",
        "output": "match(a:doctor where a.name='张梅')-[e:partner]->(b)-[e2:partner]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person孙建聪支付的person,以及支付这些person的person",
        "output": "match(a:person where name = '孙建聪')-[e:pay]->(b:person)<-[e2:pay]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为公司的点,返回42个",
        "output": "match(a:company) return a limit 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以562,656,753,715,800作为请求点id, 源点的id等于输入表id,请帮我查找被person杜科commits的software",
        "output": "with p as (select * from (VALUES(562),(656),(753),(715),(800)) as t(id)) MATCH (a:software WHERE a.id = p.id) <-[e:person_commits_software ]-(b:person WHERE b.name = '杜科') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为185的account关联的account,和以transfer关系关联了这些account的其他account",
        "output": "match(a:account where a.id = 185)-[e]-(b:account)<-[e2:transfer]-(c:account) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为马国强的节点likes的forum或user或tag",
        "output": "match(a where a.name='马国强')-[e:likes]->(b:forum | user | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有作家的伙伴,或其伙伴的伙伴",
        "output": "match(a:author)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以249作为请求点id, 以属性id作为相等条件,查找和person有关联的person节点,并根据其名字,性别,年龄分组,返回名字,性别,年龄,以及id减65的和",
        "output": "with p as (select * from (VALUES(249)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_knows_person ]-(b:person) RETURN b.name, b.gender, b.age, SUM(b.id - 65) GROUP BY b.name, b.gender, b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回张月认识的其他作家。",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='张月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询32个和标签为合并请求的点有属于关系的仓库,以及和这些仓库有拥有关系的事项",
        "output": "match(a:pullRequest)-[e:belong]->(b:repository)-[e2:has]->(c:issue) return c limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,salary,gender分组,计算salary的求和值对3653取余的平均值",
        "output": "return AVG(SUM(a.salary) % 3653) group by a.id, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询论坛的相关者,或其相关者的相关者",
        "output": "match(a:forum)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与阿里存在属于关系的城市,城市与国家存在属于关系的点,返回这些点的人数",
        "output": "match(a where a.name = '阿里')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帖子源点和标签目标点之间拥有边。",
        "output": "match(a:post)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出某人的同事，或某同事的同事。",
        "output": "match(a:person)-[e:colleague]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,id分组,计算id对34取余的求和值",
        "output": "return SUM(a.id % 34) group by a.weight, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询41个名为武汉大学的点has的标签为department的节点,且节点id除9的最小值不等于57",
        "output": "match(a where a.name='武汉大学')-[e:has]->(b:department where MIN(b.id / 9) <> 57) return b limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与耳鼻喉科部门有has关系的医生，以及赵国强接受的处方。",
        "output": "match(a:department where a.name = '耳鼻喉科')-[e:has]->(b:doctor),(c:patient where c.name = '赵国强')-[e2:accept]->(d:prescription) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生何思琪创造的处方,被其他医生创造的数量",
        "output": "match(a:doctor where a.name='何思琪')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为王国强的点的,年龄在22到29之间的相关者,返回这些相关者的身高,和边的目标点id,源点id",
        "output": "match(a where a.name='王国强')-[e:relation]->(b where (b.age BETWEEN 22 AND 29)) return b.height,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与电影相关的评论节点，限制长度不为729,并返回这些点的ID对53取余对948取余的值，以及ID对43取余的最大值。",
        "output": "match(a:film)-[e]->(b:comment where b.wordCount <> 729) return b.id % 53 % 948, MAX(b.id % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款以金额分组的id, 根据id降序排序",
        "output": "match(a:loan) return a.id group by a.amount order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与course有关系的course节点,且course节点的credit大于46,并返回这些course的id加71的最大值,以及course的courseHour对47取余加3的最大值",
        "output": "match(a:course)-[e]->(b:course where b.credit > 46) return MAX(b.id + 71), MAX(b.courseHour % 47 + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为Bilibili的,名字等于北京大学或等级不等于3的朋友,返回这些朋友的id,和边的权重,源点id",
        "output": "match(a where a.name='Bilibili')-[e:friend]->(b where b.name = '北京大学' or b.level <> 3) return b.id,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与韩红有喜欢关系的评论，以及这些评论中与电影Comment_418有关联的所有电影。",
        "output": "match(a:person where a.name = '韩红')-[e:likes]->(b:comment),(c:comment where c.name = 'Comment_418')-[e2:belong]->(d:film) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前139个满足条件id不是57或id不等于1338.98的商品",
        "output": "match(a:goods where a.id <> 57 or a.id <> 1338.98) return a limit 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和吴雪有家庭关系的人，以及这些人之间有朋友关系的点，并返回这些点的名字。",
        "output": "match(a where a.name = '吴雪')-[e:family]->(b:person)-[e2:friend]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出论坛CSDN的伙伴,的srcId的个数除37减f0的值",
        "output": "match(a:forum where a.name= 'CSDN')-[e:partner]->(b) return COUNT(e.srcId) / 37 - e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按身高降序分组并查找所有的人，他们按照age、name和gender进行分类。",
        "output": "match(a:person) return a.height group by a.age, a.name, a.gender order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与教师赵宏有关系的部门的名字",
        "output": "match(a:teacher where a.name='赵宏')-[e]-(b:department) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部经管学院的点has的teacher,然后找出经管学院被has的university,一起返回",
        "output": "match(a where a.name = '经管学院')-[e:has]->(b:teacher),(a where a.name = '经管学院')<-[e2:has]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以383作为请求点id, 源点的id等于输入表id,帮我查询所有源点类型是forum,边类型是forum_contain_person,并且满足条件targetId小于等于175或f1不是true,且f0不是974的边",
        "output": "with p as (select * from (VALUES(383)) as t(id)) MATCH (a:forum WHERE a.id = p.id) -[e:forum_contain_person WHERE (e.targetId <= 175 OR e.f1 <> TRUE) AND e.f0 <> 974 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 给出所有id为137的post关联的post,和以publish关系关联了这些post的其他user;2: 返回所有forum以peopleNumber分组的name, 根据name从小到大排序;3: 查询所有名为中国军事论坛的点contain的post;4: 返回从user陈梅出发,经过类型是user_likes_post的边,走3跳或4跳到达的post点;5: 请帮我查找43个论坛天涯论坛和中国军事论坛,共同的伙伴;",
        "output": "查询语句为:1: match(a:post where a.id = '137')-[e]-(b:post)<-[e2:user_publish_post]-(c:user) return b,c;2: match(a:forum) return a.name group by a.peopleNumber order by a.name asc;3: match(a where a.name='中国军事论坛')-[e:forum_contain_post]->(b:post) return b;4: match(a:user where a.name='陈梅')-[e:user_likes_post]->{3,4}(b:post) return b;5: match(a:forum where a.name='天涯论坛')-[e:partner]->(b)<-[e2:partner]-(c:forum where c.name='中国军事论坛') return b limit 43;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出账号Light的朋友,的weight的平均值对179.52取余的和",
        "output": "match(a:account where a.name= 'Light')-[e:friend]->(b) return SUM(AVG(e.weight) % 179.52)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表583,632,901,368, 源点的id等于输入表id,给出全部书的引用,或其引用的引用",
        "output": "with p as (select * from (VALUES(583),(632),(901),(368)) as t(id)) MATCH (a:book WHERE a.id = p.id) -[e:book_refers_book ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除47的最大值",
        "output": "MAX(a.id / 47)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与事项ISSUE-495有关系的用户的年龄",
        "output": "match(a:issue where a.name='ISSUE-495')-[e]-(b:user) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请告诉我医生李梅所在的部门，并返回该部门所有医生的性别。",
        "output": "match(a:doctor where name = '李梅')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点类型为买家,边类型为查看,以及源点id大于87或f1是false的边",
        "output": "match(a:buyer)-[e:look where e.srcId > 87 or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 给出和部门经管学院有关的课程,再给出和经管学院department_has_teacher的其他教师,返回它们;2: 请帮我查找学生选择的课程,返回其源点的身高减174的值,以及目标点的id乘86加2的值;3: 返回141个名为体育学院的点has的类型为student的节点,且其height大于190且name等于徐国强;4: 找出所有与课程形势与政策有关系的大学的id;5: 查找部门法学院的类型为相关者的边,并根据目标点id升序排列,返回9个;6: 请帮我找出所有student的relation,或其relation的relation;",
        "output": "查询语句为:1: match(a:department where a.name = '经管学院')-[e]-(b:course), (a:department)-[e2:department_has_teacher]->(c:teacher) return a, b, c;2: match(a:student)-[e:student_selects_course]->(b:course) return a.height - 174, b.id * 86 + 2;3: match(a where a.name='体育学院')-[e:department_has_student]->(b:student where b.height > 190 and b.name = '徐国强') return b limit 141;4: match(a:course where a.name='形势与政策')-[e]-(b:university) return b.id;5: match(a:department where a.name = '法学院')-[e:relation]->(b) return b order by e.targetId asc limit 9;6: match(a:student)-[e:relation]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出名为何伟和李强的,标签为person的点公共的friend节点的名单",
        "output": "match(a:person where a.name='何伟')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='李强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与13个类型为部门的点存在拥有关系的医生，以及这些医生所在的部门。",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c limit 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部cinema的partner,或其partner的partner",
        "output": "match(a:cinema)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出用户徐红发布的帖子所包含的标签。",
        "output": "match(a:user where a.name = '徐红')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出年龄等于158的节点",
        "output": "match(a where a.age = 158) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算height减height的值",
        "output": "return a.height - a.height group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person马宏有朋友关系的person,再给出以朋友关系关联了马宏的person",
        "output": "match(a:person where a.name = '马宏')-[e:friend]->(b:person),(a:person where a.name = '马宏')<-[e2:friend]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询185个person孙强和陈梅,共同的parent",
        "output": "match(a:person where a.name='孙强')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='陈梅') return b limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回周建国和王宏这两位医生共同的伙伴信息，共有101条。",
        "output": "match(a:doctor where a.name='周建国')-[e:partner]->(b)<-[e2:partner]-(c:doctor where c.name='王宏') return b limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,createTime,name, 数据为(202,1997-12-29,'百度贴吧'),(593,1999-10-27,'知乎'),(210,2019-05-08,'天涯论坛'),(738,2009-12-09,'中国诗词论坛')的子查询作为输入表, 源点的createTime等于输入表createTime,返回和user有关联的post节点,并根据其lang,value分组,返回lang,value,以及id对0取余的平均值",
        "output": "with p as (select * from (VALUES(202,1997-12-29,'百度贴吧'),(593,1999-10-27,'知乎'),(210,2019-05-08,'天涯论坛'),(738,2009-12-09,'中国诗词论坛')) as t(value,createTime,name))MATCH (a:user WHERE a.createTime = p.createTime) -[e:user_publish_post ]-(b:post) RETURN b.lang, b.value, AVG(b.id % 0) GROUP BY b.lang, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我查找源点类型是部门,边类型是department_has_teacher,以及满足条件源点id大于等于114的边;2: 帮我查询104个id不是49或gender等于famale或age大于62的teacher,根据name从小到大排列;3: 请帮我查找部门生物学院的所有朋友,的weight的求和值加171.25加656的值;4: 给出和部门有关联的教师节点,并根据其年龄,名字分组,返回年龄,名字,以及身高加176的值;5: 给出全部和department经管学院有3度或4度关系的student;",
        "output": "查询语句为:1: match(a:department)-[e:department_has_teacher where e.srcId >= 114]->(b) return e;2: match(a:teacher where a.id <> 49 or a.gender = 'famale' or a.age > 62) return a order by a.name asc limit 104;3: match(a:department where a.name= '生物学院')-[e:friend]->(b) return SUM(e.weight) + 171.25 + 656;4: match(a:department)-[e:department_has_teacher]-(b:teacher) return b.age, b.name, b.height + 176 group by b.age, b.name;5: match(a:department where a.name='经管学院')-[e]->{3,4}(b:student) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点满足条件身高大于等于170或id为空,目标点满足条件名字等于孙国强且性别不等于famale,且类型为回答的边",
        "output": "match(a where a.height >= 170 or (a.id is null))-[e:ask]->(b where b.name = '孙国强' and b.gender <> 'famale') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被公司属于数量大于120的城市,记为relationCount,再查询这些城市属于的国家",
        "output": "match(a:city) let a.relationCount = COUNT((a:city)<-[e:belong]-(b:company) => b.id) match(a where a.relationCount > 120)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询buyer为吴轩创建的订单，返回包含在这些订单中的商品的名称和ID。",
        "output": "match(a:buyer where name = '吴轩')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.name, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person节点相关的所有person节点，然后按照它们的id进行分组，并返回这些id。",
        "output": "match(a:person)-[e:parent]-(b:person) return b.id group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person杜梅有关的cinema,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的tag",
        "output": "match(a:person where a.name = '杜梅')-[e]-(b:cinema), (b:cinema)-[e2]-(c:person),(b:cinema)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,salary,id, 数据为('male',9574,44),('famale',9423,60)的子查询作为输入表, 源点的salary等于输入表salary,请帮我查找184个名为张宏的点咨询的类型为卖家的节点,且其身高除168大于70,年龄小于等于1152",
        "output": "with p as (select * from (VALUES('male',9574,44),('famale',9423,60)) as t(gender,salary,id))MATCH (a WHERE a.salary = p.salary AND (a.name = '张宏')) -[e:buyer_consult_seller ]->(b:seller WHERE b.height / 168 > 70 AND b.age <= 1152) RETURN b LIMIT 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出30个和类型是书的点有引用关系的书,且和这些书有引用关系的书",
        "output": "match(a:book)-[e:refers]->(b:book)-[e2:refers]->(c:book) return c limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与ID为35的影院有关的影院的合作伙伴，再请帮我找出与影院有关系的任何关系。",
        "output": "match(a:cinema where id = '35')-[e]-(b:cinema)-[e2:partner]->(c), (b:cinema)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为王伟的点的,id小于57的伙伴,返回这些伙伴的性别,和边的f1,目标点id",
        "output": "match(a where a.name='王伟')-[e:partner]->(b where b.id < 57) return b.gender,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出department皮肤科has的doctor,被其他department has的数量",
        "output": "match(a:department where a.name='皮肤科')-[e:has]->(b:doctor)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表918,916,957,52,229, 源点的id等于输入表id,查找源点id大于等于45且id乘35除86大于35,或name不等于李国强,边标签为doctor_belong_department,且targetId小于等于48且srcId在67到166之间,或targetId是182的边,返回这些边的weight的最大值减113.43的最小值",
        "output": "with p as (select * from (VALUES(918),(916),(957),(52),(229)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id >= 45 AND a.id * 35 / 86 > 35 OR a.name <> '李国强')) -[e:doctor_belong_department WHERE e.targetId <= 48 AND e.srcId BETWEEN ASYMMETRIC 67 AND 166 OR e.targetId = 182 ]->(b) RETURN MIN(MAX(e.weight) - 113.43) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从编辑马思思出发,经过标签为发布的边,走2跳或3跳到达的书点",
        "output": "match(a:publisher where a.name='马思思')-[e:publish]->{2,3}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否提供浙江大学各个部门及其教师的ID、年龄和薪资信息？",
        "output": "match(a:university where name = '浙江大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return c.id, c.age, c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出和论坛有关联的帖子节点,并根据其语言,名字,价值分组,返回语言,名字,价值,以及id的最小值乘28的值;2: 给出源点gender不等于famale,边标签等于user_likes_post,且srcId在67到191之间,f0大于909,f1不是false的边,返回这些边的weight乘195.93减11的求和值;3: 找出tag的1跳的环;4: 请帮我查找论坛的三角的环,边label为forum_contain_post, 并返回这些点的id;5: 返回全部源点类型是论坛,边类型是forum_contain_person,且f0小于等于794的边;6: 给出user周月的全部标签为relation的边,并根据f0从大到小排列,返回107个;7: 查找forum中国诗词论坛contain的post,被其他user likes的数量;8: 返回forum CSDN contain的post,被其他user publish的数量;",
        "output": "查询语句为:1: match(a:forum)-[e:forum_contain_post]-(b:post) return b.lang, b.name, b.value, MIN(b.id) * 28 group by b.lang, b.name, b.value;2: match(a where a.gender <> 'famale')-[e:user_likes_post where (e.srcId BETWEEN 67 AND 191) and e.f0 > 909 and e.f1 <> false]->(b) return SUM(e.weight * 195.93 - 11);3: match(a:tag)->{0,0}(b)->(a) return a.id, b.id as b_id;4: match(a:forum)-[e:forum_contain_post]->(b)-[e2:forum_contain_post]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a:forum)-[e:forum_contain_person where e.f0 <= 794]->(b) return e;6: match(a:user where a.name = '周月')-[e:relation]->(b) return b order by e.f0 desc limit 107;7: match(a:forum where a.name='中国诗词论坛')-[e:forum_contain_post]->(b:post)<-[e2:user_likes_post]-(c:user) return COUNT(c);8: match(a:forum where a.name='CSDN')-[e:forum_contain_post]->(b:post)<-[e2:user_publish_post]-(c:user) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以657,897作为请求点id, 以属性id作为相等条件,请帮我找出155个类别不等于动作的电影,根据id升序排列",
        "output": "with p as (select * from (VALUES(657),(897)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.category <> '动作')) RETURN a ORDER BY a.id LIMIT 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回155个和标签为医生的点有诊断关系的病人,且和这些病人有接受关系的处方",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与徐科有关的人，以及徐科支付给其他人的人，并将他们返回。",
        "output": "match(a:person where a.name = '徐科')-[e]-(b:person), (a:person)-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为马若涵和陈伟的,类型为person的点公共的朋友节点的名单",
        "output": "match(a:person where a.name='马若涵')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型是属于,并且满足条件目标点id不为空且f0不等于944且f1等于true的边",
        "output": "match(a)-[e:belong where (e.targetId is not null) and e.f0 <> 944 and e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person赵国强有关系的person的gender",
        "output": "match(a:person where a.name='赵国强')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与仓库Kafka和Flink都存在拥有关系的点",
        "output": "match(a:repository where a.name='Kafka')-[e:has]->(b)<-[e2:has]-(c:repository where c.name='Flink') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从英国出发，经过包含类型的边，走3到5跳到达哪个城市？",
        "output": "match(a:country where a.name='英国')-[e:contain]->{3,5}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和country越南有关的university,再查询和越南contain的其他city,返回它们",
        "output": "match(a:country where a.name = '越南')-[e]-(b:university), (a:country)-[e2:contain]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与名为李雪的医生有关联，或者与该医生关联的人所在的部门。",
        "output": "match(a:doctor where n.name=李雪)-[e:relation]->{1,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前95个标签等于创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以403,68,127作为请求点id, 源点的id等于输入表id,查询名为知乎和中国诗词论坛的,标签等于论坛的点公共的朋友节点的名单",
        "output": "with p as (select * from (VALUES(403),(68),(127)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '知乎')) -[e:friend ]->(b) <-[e2:friend ]-(c:forum WHERE c.name = '中国诗词论坛') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找何强曾经就职的公司，以及他拥有股权的公司。",
        "output": "match(a where a.name = '何强')-[e:belong]->(b:company),(a where a.name = '何强')<-[e2:employee]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门的三角的环,边类型是拥有, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以935,675,57作为请求点id, 源点的id等于输入表id,找出116个id小于79或salary在4516到9947之间或age不为空的person,根据height升序排列",
        "output": "with p as (select * from (VALUES(935),(675),(57)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.id < 79 OR a.salary BETWEEN ASYMMETRIC 4516 AND 9947 OR a.age IS NOT NULL)) RETURN a ORDER BY a.height LIMIT 116",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对78取余的数量",
        "output": "COUNT(a.id % 78)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出所有源点类型为forum,边类型为forum_contain_post的边,返回这些边的weight对123.90取余加34的个数,和weight的最大值除196.01加15减832的值;2: 查询forum中国诗词论坛的全部标签为relation的边,并根据srcId降序排列,返回27个;3: 找出id为74的点的createTime,peopleNumber;4: 请帮我找出与论坛CSDN有关,且与标签其他有关系的帖子节点;5: 找出全部与论坛天涯论坛有关系的用户的性别;6: 请帮我查找名为孙国强和黄建国的,类型为用户的点公共的相关者节点的名单;7: 查找person的1跳以内的环;8: 帮我查询论坛知乎的伙伴的朋友的伙伴;",
        "output": "查询语句为:1: match(a:forum)-[e:forum_contain_post]->(b) return COUNT(e.weight % 123.90 + 34), MAX(e.weight) / 196.01 + 15 - 832;2: match(a:forum where a.name = '中国诗词论坛')-[e:relation]->(b) return b order by e.srcId desc limit 27;3: match(a where a.id = '74') return a.createTime, a.peopleNumber;4: match(a:forum where a.name='CSDN')-[e:forum_contain_post]-(b:post)-[e2:post_has_tag]-(c:tag where c.name='其他') return b;5: match(a:forum where a.name='天涯论坛')-[e]-(b:user) return b.gender;6: match(a:user where a.name='孙国强')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='黄建国') return b.name;7: match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id;8: match(a:forum where a.name='知乎')-[e:partner]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点类型为买家,边类型为咨询的边,返回这些边的源点id减52的值,和srcId的最大值除192的值",
        "output": "match(a:buyer)-[e:consult]->(b) return e.srcId - 52, MAX(e.srcId) / 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 请帮我查找全部源点标签为person,边标签为person_apply_loan的边,返回这些边的权重对135.76取余的值,和源点id减源点id的和;2: 给出全部person的relation,或其relation的relation;3: 请帮我查找与王红存在person_own_account关系的账号,账号与贷款存在account_repay_loan关系的点,返回这些点的id;4: 帮我查询标签等于账号,名为Zeus的点,返回这些点的id,是否冻结;5: 请帮我找出33个身高不是154的person,根据名字升序排列;6: 请帮我查找62个账号TheShy和BIN,共同的朋友;7: 查找loan的三角的环,边标签为loan_deposit_account, 并返回这些点的id;8: 请帮我查找前62个类型是loan_deposit_account的边;",
        "output": "查询语句为:1: match(a:person)-[e:person_apply_loan]->(b) return e.weight % 135.76, SUM(e.srcId - e.srcId);2: match(a:person)-[e:relation]->{1,2}(b) return b;3: match(a where a.name = '王红')-[e:person_own_account]->(b:account)-[e2:account_repay_loan]->(c:loan) return c.id;4: match(a:account where a.name = 'Zeus') return a.id, a.isBlock;5: match(a:person where a.height <> 154) return a order by a.name asc limit 33;6: match(a:account where a.name='TheShy')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='BIN') return b limit 62;7: match(a:loan)-[e:loan_deposit_account]->(b)-[e2:loan_deposit_account]-(c)->(a) return a,b.id as b_id,c.id as c_id;8: match(a)-[e:loan_deposit_account]->(b) return e limit 62;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和公司点有属于关系的城市节点,且边满足条件f1不是false,目标城市节点面积大于39449",
        "output": "match(a:company)-[e:belong where e.f1 <> false]->(b:city where b.area > 39449) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找买家取消的订单,返回其源点的salary的最小值除薪资的最大值,以及目标点的价格对1733.01取余的值",
        "output": "match(a:buyer)-[e:cancel]->(b:orders) return MAX(MIN(a.salary) / a.salary), b.price % 1733.01",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家杜科取消的订单中包含的商品",
        "output": "match(a:buyer where a.name = '杜科')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前126个标签为创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查找178个name是蚂蚁集团且name是华为,name不等于华为的company,根据id升序排列",
        "output": "match(a:company where a.name = '蚂蚁集团' and a.name = '华为' and a.name <> '华为') return a order by a.id asc limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边类型为pay, 并返回这些点的id",
        "output": "match(a:person)-[e:pay]->(b)-[e2:pay]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为level,name,value, 数据为(3,'南京大学',487),(4,'华中科技大学',323),(1,'四川大学',231), 以属性level作为相等条件,给出和国家中国有关的大学,再给出和中国country_contain_city的其他城市,返回它们",
        "output": "with p as (select * from (VALUES(3,'南京大学',487),(4,'华中科技大学',323),(1,'四川大学',231)) as t(level,name,value))MATCH (a:country WHERE a.level = p.level AND (a.name = '中国')) -[e ]-(b:university) , (a:country) -[e2:country_contain_city ]->(c:city) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为何月的点own的account",
        "output": "match(a where a.name='何月')-[e:own]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和部门生物学院之间有拥有关系的教师",
        "output": "match(a:department where a.name='生物学院')-[e:has]->(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的三角的环,边标签等于支付, 并返回这些点的id",
        "output": "match(a:person)-[e:pay]->(b)-[e2:pay]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点为person且边类型为friend的边，计算这些边的srcId除以15再加上178.97后对150.92取余的平均值，以及f0对f0取余后再对162取余的结果。",
        "output": "match(a:person)-[e:friend]->(b) return AVG(e.srcId / 15 + 178.97 % 150.92), e.f0 % e.f0 % 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和'吴雪'以及'三体'相关的作者信息",
        "output": "match(a:author where a.name='吴雪')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='三体') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,gender, 数据为(47,9751,'male'),(73,5310,'male'), 源点的age等于输入表age,找出与person黄轩有关系的person, 返回和这些person有关联的person的,身高乘身高的值",
        "output": "with p as (select * from (VALUES(47,9751,'male'),(73,5310,'male')) as t(age,salary,gender))MATCH (a:person WHERE a.age = p.age AND (a.name = '黄轩')) -[e ]-(b:person) -[e2 ]-(c:person) RETURN c.height * c.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和合并请求有关联的仓库节点,并根据其权重,语言分组,返回权重,语言,以及id减51加985的最大值",
        "output": "match(a:pullRequest)-[e:belong]-(b:repository) return b.weight, b.lang, MAX(b.id - 51 + 985) group by b.weight, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(560,'Bilibili',73),(990,'华为',28),(854,'美团',81)作为请求表数据,属性分别为value,name,id, 源点的name等于输入表name,查找以拥有关系关联了账号XiaoHu的person",
        "output": "with p as (select * from (VALUES(560,'Bilibili',73),(990,'华为',28),(854,'美团',81)) as t(value,name,id))MATCH (a:account WHERE a.name = p.name AND (a.name = 'XiaoHu')) <-[e:person_own_account ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点类型为软件,目标点类型为软件,类型为person或公司或软件的边",
        "output": "match(a:software)-[e:person | company | software]->(b:software) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值对82取余乘42除820的和",
        "output": "SUM(MIN(a.id) % 82 * 42 / 820)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表571, 源点的id等于输入表id,返回源点满足条件名字等于何建国或身高不为空或薪资小于等于2663,目标点满足条件人数为空,且类型为person_belong_company的边",
        "output": "with p as (select * from (VALUES(571)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '何建国' OR a.height IS NOT NULL OR a.salary <= 2663)) -[e:person_belong_company ]->(b WHERE b.peopleNumber IS NULL) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表21,846, 源点的id等于输入表id,请帮我查找82个与李若涵和郑若涵都存在关系的author节点",
        "output": "with p as (select * from (VALUES(21),(846)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '李若涵')) -[e ]->(b:author) <-[e2 ]-(c WHERE c.name = '郑若涵') RETURN b LIMIT 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以购买关系关联了软件Spark的person",
        "output": "match(a:software where a.name='Spark')<-[e:buy]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 给出标签为标签,名为其他的点,返回这些点的id,名字,价值;2: 帮我查询id为72的点的名字;3: 找出22个与文艺和动作都存在关系的person节点;4: 返回所有用户的伙伴,或其伙伴的伙伴;5: 请帮我找出全部和user张国强之间有user_publish_post关系的post;6: 给出15个和类型为forum的点有forum_contain_post关系的post,以及和这些post有post_has_tag关系的tag;7: 计算所有帖子的字数乘字数的值;",
        "output": "查询语句为:1: match(a:tag where a.name = '其他') return a.id, a.name, a.value;2: match(a where a.id = '72') return a.name;3: match(a where a.name='文艺')-[e]->(b:person)<-[e2]-(c where c.name='动作') return b limit 22;4: match(a:user)-[e:partner]->{1,2}(b) return b;5: match(a:user where a.name='张国强')-[e:user_publish_post]->(b:post) return b;6: match(a:forum)-[e:forum_contain_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c limit 15;7: match(a:post) return a.wordCount * a.wordCount;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我查找forum天涯论坛contain的post节点has的tag;2: 找出名为百度贴吧的论坛,以及与其有关的用户,并返回百度贴吧的名字和这些用户的身高;3: 给出label为forum的点,返回196个;4: 查询源点名字不等于天涯论坛,人数为空,边类型是forum_contain_post,且f1为true,f1是true的边,返回这些边的f0减817的值;5: 请帮我找出全部名为Post_251的点的,id为空,id为空的relation,返回这些relation的id,和边的f1;",
        "output": "查询语句为:1: match(a:forum where a.name = '天涯论坛')-[e:forum_contain_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c;2: match(a:forum where name = '百度贴吧')-[e]-(b:user) return a.name, b.height;3: match(a:forum) return a limit 196;4: match(a where a.name <> '天涯论坛' and (a.peopleNumber is null))-[e:forum_contain_post where e.f1 = true and e.f1 = true]->(b) return e.f0 - 817;5: match(a where a.name='Post_251')-[e:relation]->(b where (b.id is null) and (b.id is null)) return b.id,e.f1;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据scale分组,计算peopleNumber的平均值加724的值",
        "output": "return AVG(a.peopleNumber) + 724 group by a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与部门传染部有关系的处方的id",
        "output": "match(a:department where a.name='传染部')-[e]-(b:prescription) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与论坛天涯论坛存在包含关系,且与帖子Post_390存在喜欢关系的用户节点，返回这些用户的身高,薪资,年龄,及论坛天涯论坛的名字,及帖子Post_390的价值",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:user)<-[e2:likes]-(c:post where c.name='Post_390') return a.name,b.height, b.salary, b.age,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('马科',97,7177)作为请求表数据,属性分别为name,id,salary, 源点的salary等于输入表salary,请帮我找出从书呐喊出发,经过标签为book_refers_book的边,走1跳或2跳到达的书点",
        "output": "with p as (select * from (VALUES('马科',97,7177)) as t(name,id,salary))MATCH (a:book WHERE a.salary = p.salary AND (a.name = '呐喊')) -[e:book_refers_book ]->{1,2}(b:book) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以812,726作为请求点id, 以属性id作为相等条件,帮我查询前160个满足条件height在169到191之间或age小于等于56的person",
        "output": "with p as (select * from (VALUES(812),(726)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.height BETWEEN ASYMMETRIC 169 AND 191 OR a.age <= 56)) RETURN a LIMIT 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出学生的1跳的环",
        "output": "match(a:student)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'eb', 'jf'作为输入调用triangleCount函数,返回运算结果",
        "output": "Call TRIANGLECOUNT('eb', 'jf') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询13个大学南京大学和四川大学,共同的朋友",
        "output": "match(a:university where a.name='南京大学')-[e:friend]->(b)<-[e2:friend]-(c:university where c.name='四川大学') return b limit 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我查找和person有关联的software节点,并根据其openSource分组,返回openSource,以及stars减421的和;2: 请帮我找出全部名为Redis的,开源不等于false,名字等于Zookeeper的朋友,返回这些朋友的星数,和边的f1,目标点id,f0;3: 请帮我查找和软件Redis有关的person,称为X,再请帮我查找和这个X有关联的其他公司,以及和X有关联的公司;4: 请帮我查找与person周强有关,且与软件Flink有关系的person节点;5: 查询和软件有关联的软件节点,并根据其星数,开源分组,返回星数,开源,以及id加85的个数;6: 帮我查询165个id大于等于9或价值为空,且价值大于212的软件,根据id从大到小排列;7: 请帮我找出被software Hadoop uses的software;8: 请帮我查找192个与Calcite和Redis都存在关系的公司节点;9: 给出id为124的person关联的person,和以雇佣关系关联了这些person的其他公司;",
        "output": "查询语句为:1: match(a:person)-[e:person_commits_software]-(b:software) return b.openSource, SUM(b.stars - 421) group by b.openSource;2: match(a where a.name='Redis')-[e:friend]->(b where b.openSource <> false and b.name = 'Zookeeper') return b.stars,e.f1, e.targetId, e.f0;3: match(a:software where a.name = 'Redis')-[e]-(b:person), (b:person)-[e2]-(c:company),(b:person)-[e3]-(d:company) return a, b, c, d;4: match(a:person where a.name='周强')-[e:person_knows_person]-(b:person)-[e2:person_buy_software]-(c:software where c.name='Flink') return b;5: match(a:software)-[e:software_uses_software]-(b:software) return b.stars, b.openSource, COUNT(b.id + 85) group by b.stars, b.openSource;6: match(a:software where (a.id >= 9 or (a.value is null)) and a.value > 212) return a order by a.id desc limit 165;7: match(a:software)<-[e:software_uses_software]-(b:software where b.name='Hadoop') return a, b;8: match(a where a.name='Calcite')-[e]->(b:company)<-[e2]-(c where c.name='Redis') return b limit 192;9: match(a:person where a.id = '124')-[e]-(b:person)<-[e2:company_employee_person]-(c:company) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出168个与程序设计和高等数学都存在关系的教师或学生或大学节点",
        "output": "match(a where a.name='程序设计')-[e]->(b:teacher | student | university)<-[e2]-(c where c.name='高等数学') return b limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person黄国强relates的person,以及knows这些person的person",
        "output": "match(a:person where name = '黄国强')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出163个订单Order_108和Order_212,共同的相关者",
        "output": "match(a:orders where a.name='Order_108')-[e:relation]->(b)<-[e2:relation]-(c:orders where c.name='Order_212') return b limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出seller的relation,或其relation的relation",
        "output": "match(a:seller)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为物理学院的,id不等于28的朋友,返回这些朋友的名字,和边的权重,f0",
        "output": "match(a where a.name='物理学院')-[e:friend]->(b where b.id <> 28) return b.name,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出175个和标签等于person的点有喜欢关系的person,以及和这些person有喜欢关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person) return c limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照大学名称、价值、ID分组并按ID降序排序。",
        "output": "match(a:university) return a.id group by a.value, a.name, a.id order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出评论属于的电影,返回其源点的字数乘26的值,以及目标点的价值对价值取余的平均值",
        "output": "match(a:comment)-[e:belong]->(b:film) return a.wordCount * 26, AVG(b.value % b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为公司，目标点标签为贷款，且标签为申请的边。",
        "output": "match(a:company)-[e:apply]->(b:loan) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询186个与张若涵和马红都存在关系的药品或病人节点",
        "output": "match(a where a.name='张若涵')-[e]->(b:medicine | patient)<-[e2]-(c where c.name='马红') return b limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为王伟的person,以及与其有关的person,并返回王伟的薪资和这些person的薪资",
        "output": "match(a:person where name = '王伟')-[e]-(b:person) return a.salary, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点label为合并请求,边label为属于,且满足条件权重小于146的边",
        "output": "match(a:pullRequest)-[e:belong where e.weight < 146]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为吴建国的点的,权重不是582或名字为放射科的相关者,返回这些相关者的id,和边的权重,源点id,目标点id",
        "output": "match(a where a.name='吴建国')-[e:relation]->(b where b.weight <> 582 or b.name = '放射科') return b.id,e.weight, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到一个共同标签为'部门'的节点，该节点属于Amily和张伟。",
        "output": "match(a where a.name = 'Amily')-[e:belong]->(b:department)<-[e2:belong]-(c where c.name = '张伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家何梅查看的商品，其他卖家拥有的数量。",
        "output": "match(a:buyer where a.name='何梅')-[e:look]->(b:goods)<-[e2:has]-(c:seller) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary乘1933的个数",
        "output": "COUNT(a.salary * 1933)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与作家赵雪有关,且与书罪与罚有关系的作家节点",
        "output": "match(a:author where a.name='赵雪')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='罪与罚') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询标签等于标签的点,返回184个",
        "output": "match(a:tag) return a limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表121,44,833,693,80, 以属性id作为相等条件,查询所有person以salary,age,id分组的salary, 根据salary降序排序",
        "output": "with p as (select * from (VALUES(121),(44),(833),(693),(80)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.salary GROUP BY a.salary, a.age, a.id ORDER BY a.salary DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询杜思琪咨询的卖家的商品",
        "output": "match(a:buyer where a.name = '杜思琪')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型是公司的点有申请关系的贷款,且和这些贷款有存款关系的账号,且和这些账号有转账关系的账号",
        "output": "match(a:company)-[e:apply]->(b:loan)-[e2:deposit]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除60加id的值",
        "output": "a.id / 60 + a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和cinema点有releases关系的film节点,且边满足条件srcId不是186,目标film节点id小于27",
        "output": "match(a:cinema)-[e:releases where e.srcId <> 186]->(b:film where b.id < 27) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "人数乘779的值",
        "output": "a.peopleNumber * 779",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与赵伟存在支付关系的person,person与person存在支付关系的点,返回这些点的性别",
        "output": "match(a where a.name = '赵伟')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有作家的朋友,或其朋友的朋友",
        "output": "match(a:author)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Comment的partner,或者是partner的partner。",
        "output": "match(a:comment)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被论坛天涯论坛包含的用户",
        "output": "match(a:user)<-[e:contain]-(b:forum where b.name='天涯论坛') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最大值乘价值的和",
        "output": "SUM(MAX(a.value) * a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与名为杜建国的用户有伙伴关系，或者有伙伴伙伴关系的帖子。",
        "output": "match(a:user where n.name=杜建国)-[e:partner]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回8个与韩月和郑梅都存在关系的person节点",
        "output": "match(a where a.name='韩月')-[e]->(b:person)<-[e2]-(c where c.name='郑梅') return b limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点名字为赵月或身高小于等于180,且id是20,目标点id减id大于等于501,且标签为发布的边",
        "output": "match(a where (a.name = '赵月' or a.height <= 180) and a.id = 20)-[e:publish]->(b where b.id - b.id >= 501) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与标签11相关的用户的朋友，再找出这些用户的朋友。",
        "output": "match(a:tag where id = '11')-[e]-(b:user)-[e2:friend]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以80, 68作为输入调用triangleCount函数,返回number",
        "output": "Call TRIANGLECOUNT(80, 68) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前151个满足条件value是699且scale是small,或peopleNumber大于等于92的company",
        "output": "match(a:company where (a.value = 699 and a.scale = 'small') or a.peopleNumber >= 92) return a limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与ID为73的贷款账户有关的朋友，再查询与这些朋友有关系的伙伴。",
        "output": "match(a:loan where id = '73')-[e]-(b:account)-[e2:friend]->(c), (b:account)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为146的person关联的贷款,和以申请关系关联了这些贷款的其他公司",
        "output": "match(a:person where a.id = 146)-[e]-(b:loan)<-[e2:apply]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出按照age、name和salary分组的所有用户的身高，并按照身高从低到高进行排序。",
        "output": "match(a:user) return a.height group by a.age, a.name, a.salary order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为陈科和黄若涵的,类型是person的点公共的伙伴节点的名单",
        "output": "match(a:person where a.name='陈科')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='黄若涵') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王伟的点的,价值不是352的相关者,返回这些相关者的语言,和边的权重,f0",
        "output": "match(a where a.name='王伟')-[e:relation]->(b where b.value <> 352) return b.lang,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点满足条件id为空且name不是重庆大学,或name不等于重庆大学,目标点满足条件id小于31且value是344,且类型为has的边",
        "output": "match(a where ((a.id is null) and a.name <> '重庆大学') or a.name <> '重庆大学')-[e:has]->(b where b.id < 31 and b.value = 344) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查询和标签为person的点有person_own_account关系的账号,且和这些账号有account_transfer_account关系的账号,且和这些账号有account_repay_loan关系的贷款;2: 帮我查询所有id为84的loan关联的account,和以own关系关联了这些account的其他person;3: 返回和person有关联的company节点,并根据其value,scale,peopleNumber分组,返回value,scale,peopleNumber,以及id对27取余的数量;4: 找出源点类型为person,边类型为person_own_account的边,返回这些边的targetId除116的值,和targetId减16减targetId乘weight的和;5: 查找前14个满足条件height在186到186之间,name不是孙红,或name不等于周科的person;6: 帮我查询person的friend,或其friend的friend;7: 请帮我找出前31个类型为person_own_account的边;8: 返回defaultName1的点deposit的account,然后返回defaultName1被repay的account,一起返回;",
        "output": "查询语句为:1: match(a:person)-[e:person_own_account]->(b:account)-[e2:account_transfer_account]->(c:account)-[e3:account_repay_loan]->(d:loan) return d;2: match(a:loan where a.id = '84')-[e]-(b:account)<-[e2:person_own_account]-(c:person) return b,c;3: match(a:person)-[e:person_invest_company]-(b:company) return b.value, b.scale, b.peopleNumber, COUNT(b.id % 27) group by b.value, b.scale, b.peopleNumber;4: match(a:person)-[e:person_own_account]->(b) return e.targetId / 116, SUM((e.targetId - 16 - e.targetId) * e.weight);5: match(a:person where ((a.height BETWEEN 186 AND 186) and a.name <> '孙红') or a.name <> '周科') return a limit 14;6: match(a:person)-[e:friend]->{1,2}(b) return b;7: match(a)-[e:person_own_account]->(b) return e limit 31;8: match(a where a.name = 'defaultName1')-[e:loan_deposit_account]->(b:account),(a where a.name = 'defaultName1')<-[e2:account_repay_loan]-(c:account) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和patient孙思琪有accept关系的prescription,再给出以accept关系关联了孙思琪的prescription",
        "output": "match(a:patient where a.name = '孙思琪')-[e:accept]->(b:prescription),(a:patient where a.name = '孙思琪')<-[e2:accept]-(c:prescription)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高升序排列，买家类型查询。",
        "output": "match(a:buyer) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型为公司,名为字节的点,返回这些点的价值,规格,id",
        "output": "match(a:company where a.name = '字节') return a.value, a.scale, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询张轩的点knows的person,然后帮我查询张轩被knows的person,一起返回",
        "output": "match(a where a.name = '张轩')-[e:knows]->(b:person),(a where a.name = '张轩')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查找所有label为course的点;2: 查询大学清华大学的类型是伙伴的边,并根据目标点id降序排列,返回74个;3: 查找和department有关联的teacher节点,并根据其age,id分组,返回age,id,以及height对height取余的值;4: 查询label为教师的点,并根据性别升序排列;5: 返回从部门法学院出发,经过标签等于department_has_student的边,走3到5跳到达的学生点;",
        "output": "查询语句为:1: match(a:course) return a;2: match(a:university where a.name = '清华大学')-[e:partner]->(b) return b order by e.targetId desc limit 74;3: match(a:department)-[e:department_has_teacher]-(b:teacher) return b.age, b.id, b.height % b.height group by b.age, b.id;4: match(a:teacher) return a order by a.gender asc;5: match(a:department where a.name='法学院')-[e:department_has_student]->{3,5}(b:student) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,名字分组,计算id除62的最小值",
        "output": "return MIN(a.id / 62) group by a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有标记为'医生'的点，按照身高从高到低排序。",
        "output": "match(a:doctor) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与韩建聪和何思琪有关联的人。",
        "output": "match(a:person where a.name='韩建聪')-[e:friend]-(b:person)-[e2:parent]-(c:person where c.name='何思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有Post_419中包含标签的元素，并返回这些元素所关联的用户。",
        "output": "match(a where a.name = 'Post_419')-[e:has]->(b:tag),(a where a.name = 'Post_419')<-[e2:publish]-(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查询和作家有关联的作家节点,并根据其薪资,身高,性别分组,返回薪资,身高,性别,以及身高减197的值",
        "output": "match(a:author)-[e:author_knows_author]-(b:author) return b.salary, b.height, b.gender, b.height - 197 group by b.salary, b.height, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为腾讯的company,以及与其有关的university,并返回腾讯的peopleNumber和这些university的id",
        "output": "match(a:company where name = '腾讯')-[e]-(b:university) return a.peopleNumber, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person以薪资,名字分组的薪资, 根据薪资从大到小排序",
        "output": "match(a:person) return a.salary group by a.salary, a.name order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为loan_9的点存款的所有账号,并对这些账号的名字进行求和",
        "output": "match(a where a.name='loan_9')-[e:deposit]->(b:account) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找拥有合并请求PR-232的仓库,和这些仓库拥有的事项",
        "output": "match(a:pullRequest where name = 'PR-232')<-[e:has]-(b:repository)-[e2:has]->(c:issue) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王思琪的company或software,以及与其有关的person,并返回王思琪的gender和这些person的age",
        "output": "match(a:company | software where name = '王思琪')-[e]-(b:person) return a.gender, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出评论Comment_226的全部朋友,的目标点id减目标点id的值",
        "output": "match(a:comment where a.name= 'Comment_226')-[e:friend]->(b) return e.targetId - e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与韩月和何国强有关的所有publisher节点。",
        "output": "match(a where a.name='韩月')-[e]->(b:publisher)<-[e2]-(c where c.name='何国强') return b limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person王轩有喜欢关系的person,再找出以支付关系关联了王轩的person",
        "output": "match(a:person where a.name = '王轩')-[e:likes]->(b:person),(a:person where a.name = '王轩')<-[e2:pay]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找Comment_211的第三个伙伴。",
        "output": "match(a:comment where a.name='Comment_211')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和大学有关联的城市节点,并根据其人数,价值分组,返回人数,价值,以及面积对面积取余对93118取余的最小值",
        "output": "match(a:university)-[e:belong]-(b:city) return b.peopleNumber, b.value, MIN(b.area % b.area % 93118) group by b.peopleNumber, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,gender,name, 数据为(2962,'male','周雪'),(8184,'male','张月'),(8456,'famale','韩思思')的子查询作为输入表, 源点的salary等于输入表salary,返回和person何国强有关的person,再返回和何国强person_lover_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(2962,'male','周雪'),(8184,'male','张月'),(8456,'famale','韩思思')) as t(salary,gender,name))MATCH (a:person WHERE a.salary = p.salary AND (a.name = '何国强')) -[e ]-(b:person) , (a:person) -[e2:person_lover_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以37,149,703作为请求点id, 源点的id等于输入表id,查找源点名字不等于中国诗词论坛且人数等于846,边标签为forum_contain_person,且满足条件f0不是515的边,返回这些边的源点id乘96的平均值",
        "output": "with p as (select * from (VALUES(37),(149),(703)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name <> '中国诗词论坛' AND a.peopleNumber = 846)) -[e:forum_contain_person WHERE e.f0 <> 515 ]->(b) RETURN AVG(e.srcId * 96) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找所有从人源点流向公司目标点的边，且边标签为'belong'。",
        "output": "match(a:person)-[e:belong]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出取消了马梅或孙强订单的点",
        "output": "match(a:buyer where a.name='马梅')-[e:cancel]->(b)<-[e2:cancel]-(c:buyer where c.name='孙强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出作家周月的所有标签等于朋友的边,并根据f1升序排列,返回83个",
        "output": "match(a:author where a.name = '周月')-[e:friend]->(b) return b order by e.f1 asc limit 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "在知乎论坛中，获取包含特定标签的帖子。",
        "output": "match(a:forum where a.name = '知乎')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与卖家陈伟和吴雪都存在拥有关系的点",
        "output": "match(a:seller where a.name='陈伟')-[e:has]->(b)<-[e2:has]-(c:seller where c.name='吴雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有doctor的friend,或其friend的friend",
        "output": "match(a:doctor)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回赵红拥有的账号",
        "output": "match(a:account)<-[e:own]-(b:person where b.name='赵红') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查名为Zeus的账户。",
        "output": "match(a:account where a.name = 'Zeus') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Faker的节点还款的person或贷款",
        "output": "match(a where a.name='Faker')-[e:repay]->(b:person | loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找198个人，按年龄升序排列，其中身高为空。",
        "output": "match(a:person where (a.height is null)) return a order by a.age asc limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与孙科存在喜欢关系的评论,评论与电影存在属于关系的点,返回这些点的类别",
        "output": "match(a where a.name = '孙科')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找103个和label为person的点有likes关系的person,并且和这些person有knows关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:knows]->(c:person) return c limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 返回24个创建时间不是2024年08月18日或是否冻结是true,且id大于74的账号,根据价值从小到大排列;2: 查找和company蚂蚁集团有关系的person节点,返回这些点的gender;3: 查询名为微软和Bilibili的,标签等于company的点公共的partner节点的名单;4: 查找前109个类型为person_invest_company的边;5: 返回类型是account的所有点,并根据id从大到小排列;6: 请帮我找出account以isBlock,createTime分组的createTime, 根据createTime升序排序;7: 给出与账号Geaflow123有关系的公司, 返回和这些公司有关联的person的,身高加171的最小值;",
        "output": "查询语句为:1: match(a:account where (a.createTime <> '2024-08-18' or a.isBlock = true) and a.id > 74) return a order by a.value asc limit 24;2: match(a:company where a.name='蚂蚁集团')-[e]-(b:person) return b.gender;3: match(a:company where a.name='微软')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='Bilibili') return b.name;4: match(a)-[e:person_invest_company]->(b) return e limit 109;5: match(a:account) return a order by a.id desc;6: match(a:account) return a.createTime group by a.isBlock, a.createTime order by a.createTime asc;7: match(a:account where a.name= 'Geaflow123')-[e]-(b:company)-[e2]-(c:person) return MIN(c.height + 171);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为韩轩和王伟的,类型为person的点公共的伙伴节点的名单",
        "output": "match(a:person where a.name='韩轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='王伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和account Faker有1到3度关系的account",
        "output": "match(a:account where a.name='Faker')-[e]->{1,3}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和电影泰坦尼克号之间有拥有关系的标签",
        "output": "match(a:film where a.name='泰坦尼克号')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签为软件,边标签为使用的边,返回这些边的权重除权重的值,和targetId的最小值加129的和",
        "output": "match(a:software)-[e:uses]->(b) return e.weight / e.weight, SUM(MIN(e.targetId) + 129)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出gender不等于male的buyer creates的orders的名称,以及这些orders contain的goods的名称",
        "output": "match(a:buyer where a.gender <> 'male')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('计算机体系结构',113,53),('数据结构',485,71)作为请求表数据,属性分别为name,value,id, 源点的name等于输入表name,查找全部名为马强的点selects的course",
        "output": "with p as (select * from (VALUES('计算机体系结构',113,53),('数据结构',485,71)) as t(name,value,id))MATCH (a WHERE a.name = p.name AND (a.name = '马强')) -[e:student_selects_course ]->(b:course) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与company字节存在employee关系,且与software Redis存在buy关系的person节点，返回这些person的gender,name,id,及company字节的value,及software Redis的lang",
        "output": "match(a:company where a.name='字节')-[e:employee]->(b:person)<-[e2:buy]-(c:software where c.name='Redis') return a.value,b.gender, b.name, b.id,c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为has,以及targetId为空,srcId不是140且targetId大于119的边",
        "output": "match(a)-[e:has where (e.targetId is null) and e.srcId <> 140 and e.targetId > 119]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person赵建聪出发,经过类型为朋友的边,走1到3度到达的person点",
        "output": "match(a:person where a.name='赵建聪')-[e:friend]->{1,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和公司微软有关系的大学或城市,返回这些点的id",
        "output": "match(a:company where a.name='微软')-[e]-(b:university | city) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询gender是male或age的最大值大于3310或salary小于1608的节点",
        "output": "match(a where a.gender = 'male' or MAX(a.age) > 3310 or a.salary < 1608) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与账户 XiaoHu 相关的贷款，再找出 XiaoHu 偿还的其他贷款，返回它们。",
        "output": "match(a:account where a.name = 'XiaoHu')-[e]-(b:loan), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person杜伟有invest关系的3跳的环",
        "output": "match(a:person where name = '杜伟')-[e:invest]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的年龄减年龄减1179加id的最小值",
        "output": "match(a:person) return MIN(a.age - a.age - 1179 + a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 返回所有和person杜科有关系的person节点,返回这些点的身高,年龄,性别;2: 给出与名为周思思和赵红的点共同likes的,标签等于person的节点;3: 请帮我查找132个与马科和黄梅都存在关系的person节点;4: 帮我查询person的relation,或其relation的relation;5: 查询标签等于person的点,并根据age降序排列;6: 请帮我找出171个名为马科的点pay的标签等于person的节点,且节点name为王梅,gender等于famale;7: 返回与person郑思思和郑伟都存在person_knows_person关系的点;8: 返回与person郑轩和韩雪都存在person_likes_person关系的点;9: 给出和person李思琪之间有person_knows_person关系的person;",
        "output": "查询语句为:1: match(a:person where a.name='杜科')-[e]-(b:person) return b.height, b.age, b.gender;2: match(a where a.name = '周思思')-[e:person_likes_person]->(b:person)<-[e2:person_likes_person]-(c where c.name = '赵红') return b;3: match(a where a.name='马科')-[e]->(b:person)<-[e2]-(c where c.name='黄梅') return b limit 132;4: match(a:person)-[e:relation]->{1,2}(b) return b;5: match(a:person) return a order by a.age desc;6: match(a where a.name='马科')-[e:person_pay_person]->(b:person where b.name = '王梅' and b.gender = 'famale') return b limit 171;7: match(a:person where a.name='郑思思')-[e:person_knows_person]->(b)<-[e2:person_knows_person]-(c:person where c.name='郑伟') return b;8: match(a:person where a.name='郑轩')-[e:person_likes_person]->(b)<-[e2:person_likes_person]-(c:person where c.name='韩雪') return b;9: match(a:person where a.name='李思琪')-[e:person_knows_person]->(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询和person有关联的person节点,并根据其id,名字分组,返回id,名字,以及身高对身高取余的平均值",
        "output": "match(a:person)-[e:person_parent_person]-(b:person) return b.id, b.name, AVG(b.height % b.height) group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前22个学分的最大值大于1的课程",
        "output": "match(a:course where MAX(a.credit) > 1) return a limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和film变形金刚有3到5度关系的person",
        "output": "match(a:film where a.name='变形金刚')-[e]->{3,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(61,5718,91)作为请求表数据,属性分别为id,salary,age, 源点的salary等于输入表salary,查找所有源点满足条件金额小于7380.05,目标点满足条件价值不为空或是否冻结为true,且类型是loan_deposit_account的边",
        "output": "with p as (select * from (VALUES(61,5718,91)) as t(id,salary,age))MATCH (a WHERE a.salary = p.salary AND (a.amount < 7380.05)) -[e:loan_deposit_account ]->(b WHERE b.value IS NOT NULL OR b.isBlock = TRUE) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person孙月有关的person,称为X,再查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '孙月')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Order_274的节点包含的卖家或订单",
        "output": "match(a where a.name='Order_274')-[e:contain]->(b:seller | orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与Faker账号相关的贷款，并查找与Faker还款相关的其他贷款，然后将它们返回。",
        "output": "match(a:account where a.name = 'Faker')-[e]-(b:loan), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点标签为城市,边标签为包含的边,返回这些边的目标点id乘146的值,和f0减810的最大值",
        "output": "match(a:city)-[e:contain]->(b) return e.targetId * 146, MAX(e.f0 - 810)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,身高,性别分组,计算身高乘187的平均值",
        "output": "return AVG(a.height * 187) group by a.name, a.height, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 帮我查询id为169的点的gender;2: 返回与university北京大学存在university_has_department关系,且与teacher赵建国存在department_has_teacher关系的department节点，返回这些department的size,id,value,及university北京大学的name,及teacher赵建国的age;3: 查找所有大学以名字,id分组的等级, 根据等级从小到大排序;4: 返回29个名为法学院的点拥有的label为学生的节点,且节点性别为male且名字不是李月;5: 请帮我查找label为university_has_department,并且f0不是903的边;",
        "output": "查询语句为:1: match(a where a.id = '169') return a.gender;2: match(a:university where a.name='北京大学')-[e:university_has_department]->(b:department)<-[e2:department_has_teacher]-(c:teacher where c.name='赵建国') return a.name,b.size, b.id, b.value,c.age;3: match(a:university) return a.level group by a.name, a.id order by a.level asc;4: match(a where a.name='法学院')-[e:department_has_student]->(b:student where b.gender = 'male' and b.name <> '李月') return b limit 29;5: match(a)-[e:university_has_department where e.f0 <> 903]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person杜红有关的person，以及与杜红进行过交易的other person，并将它们返回。",
        "output": "match(a:person where a.name = '杜红')-[e]-(b:person), (a:person)-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与标签为'book'的点有refers关系的book节点。",
        "output": "match(a:book)-[e:refers]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和department有关联的doctor节点,并根据其name,gender分组,返回name,gender,以及salary对3299取余的值",
        "output": "match(a:department)-[e:has]-(b:doctor) return b.name, b.gender, b.salary % 3299 group by b.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询国家包含的城市,返回其源点的id的最小值对0取余减42910的平均值,以及目标点的价值加价值的值",
        "output": "match(a:country)-[e:contain]->(b:city) return AVG(MIN(a.id) % 0 - 42910), b.value + b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,gender,name, 数据为(77,'famale','李强'),(63,'famale','杜伟'),(54,'male','张若涵')的子查询作为输入表, 源点的name等于输入表name,请帮我找出书的引用,或其引用的引用",
        "output": "with p as (select * from (VALUES(77,'famale','李强'),(63,'famale','杜伟'),(54,'male','张若涵')) as t(id,gender,name))MATCH (a:book WHERE a.name = p.name) -[e:book_refers_book ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和账号Light之间有还款关系的贷款",
        "output": "match(a:account where a.name='Light')-[e:repay]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询徐建国的同事朋友的恋人",
        "output": "match(a:person where a.name='徐建国')-[e:colleague]->(b)-[e2:friend]->(c)-[e3:lover]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回源点名字不是孤城,边标签等于book_refers_book,且源点id大于133,目标点id在48到142之间,权重大于147.42的边,返回这些边的权重对144.11取余的值;2: 查找reader的三角的环,边标签等于reader_likes_book, 并返回这些点的id;3: 找出与publisher陈轩有publisher_publish_book关系的2跳的环;",
        "output": "查询语句为:1: match(a where a.name <> '孤城')-[e:book_refers_book where e.srcId > 133 and (e.targetId BETWEEN 48 AND 142) and e.weight > 147.42]->(b) return e.weight % 144.11;2: match(a:reader)-[e:reader_likes_book]->(b)-[e2:reader_likes_book]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:publisher where name = '陈轩')-[e:publisher_publish_book]->{1,1}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,id,category, 数据为(953,98,'皮肤药'),(421,73,'皮肤药'),(109,90,'止痛药'),(346,97,'其他'), 以属性weight作为相等条件,查找和医生孙思思有关的部门,再查找和孙思思doctor_diagnose_patient的其他病人,返回它们",
        "output": "with p as (select * from (VALUES(953,98,'皮肤药'),(421,73,'皮肤药'),(109,90,'止痛药'),(346,97,'其他')) as t(weight,id,category))MATCH (a:doctor WHERE a.weight = p.weight AND (a.name = '孙思思')) -[e ]-(b:department) , (a:doctor) -[e2:doctor_diagnose_patient ]->(c:patient) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈科和张国强共同创造了一些东西。",
        "output": "match(a:buyer where a.name='陈科')-[e:creates]->(b)<-[e2:creates]-(c:buyer where c.name='张国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型是买家,边类型是创造,且f0不为空或f0为空,且时间戳不等于2000年02月06日的边",
        "output": "match(a:buyer)-[e:creates where ((e.f0 is not null) or (e.f0 is null)) and e.timeStamp <> '2000-02-06']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与被标记为'person'的节点有创建关系的评论，以及这些评论与之有关联的电影，并且这些电影又与某些标签有拥有关系。",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出薪资除1073的平均值为2169的节点",
        "output": "match(a where AVG(a.salary / 1073) = 2169) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出学生选择的课程, 令课程的id的值等于教课程的教师的名字的和, 再查找课程属于的部门",
        "output": "match(a:student)-[e:selects]->(b:course) let b.id = SUM((b:course)<-[e2:teach]-(c:teacher) => c.name) match(b:course)-[e3:belong]->(d:department) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,scale,peopleNumber, 数据为(1,'large',610),(14,'small',864)的子查询作为输入表, 以属性scale作为相等条件,找出全部源点类型为university,边类型为university_cooperate_company的边,返回这些边的targetId加85的值,和f0减f0加103的值",
        "output": "with p as (select * from (VALUES(1,'large',610),(14,'small',864)) as t(id,scale,peopleNumber))MATCH (a:university WHERE a.scale = p.scale) -[e:university_cooperate_company ]->(b) RETURN e.targetId + 85, e.f0 - e.f0 + 103 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person张思思有观看关系的3度的环",
        "output": "match(a:person where name = '张思思')-[e:watch]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找99个和类型是医生的点有属于关系的部门,且和这些部门有拥有关系的医生",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,id,name, 数据为('male',9,'韩思琪'),('famale',34,'赵宏'), 源点的name等于输入表name,查找全部名为韩红的点own的account",
        "output": "with p as (select * from (VALUES('male',9,'韩思琪'),('famale',34,'赵宏')) as t(gender,id,name))MATCH (a WHERE a.name = p.name AND (a.name = '韩红')) -[e:person_own_account ]->(b:account) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被账号转账数量大于198的账号,记为relationCount,再查询这些账号转账的公司",
        "output": "match(a:account) let a.relationCount = AVG((a:account)<-[e:transfer]-(b:account) => b.id) match(a where a.relationCount > 198)-[e2:transfer]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,amount,weight, 数据为(50,4388.29,49),(87,3105.17,331),(38,9223.48,826),(89,3007.28,611), 以属性amount作为相等条件,请帮我找出账号Light 转账的账号,返回账号 转账的账号的id对28取余加42的值 ",
        "output": "with p as (select * from (VALUES(50,4388.29,49),(87,3105.17,331),(38,9223.48,826),(89,3007.28,611)) as t(id,amount,weight))MATCH (a:account WHERE a.amount = p.amount AND (name = 'Light')) -[e:account_transfer_account ]->(b:account) -[e2:account_transfer_account ]->(c:account) RETURN c.id % 28 + 42 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id的最大值减44的值",
        "output": "return MAX(a.id) - 44 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person黄月拥有的账号,被其他账号转账的数量",
        "output": "match(a:person where a.name='黄月')-[e:own]->(b:account)<-[e2:transfer]-(c:account) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与华中科技大学和电子科技大学有has关系的department。",
        "output": "match(a:university where a.name = '华中科技大学')-[e:has]->(b:department),(c:university where c.name = '电子科技大学')-[e2:has]->(d:department) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与合并请求PR-187有关系的事项的权重",
        "output": "match(a:pullRequest where a.name='PR-187')-[e]-(b:issue) return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与孙建国有父母关系的人，然后找出与孙建国有恋人关系的人。",
        "output": "match(a:person where a.name = '孙建国')-[e:parent]->(b:person),(a:person where a.name = '孙建国')<-[e2:lover]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与字节公司有合作伙伴关系或合作伙伴的合作伙伴关系的贷款公司。",
        "output": "match(a:company where n.name=字节)-[e:partner]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减28的值",
        "output": "a.id - 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与帖子Post_141有关系的用户, 返回和这些用户有关联的帖子的,wordCount的求和值减367的最小值",
        "output": "match(a:post where a.name= 'Post_141')-[e]-(b:user)-[e2]-(c:post) return MIN(SUM(c.wordCount) - 367)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被读者陈梅喜欢的书",
        "output": "match(a:book)<-[e:likes]-(b:reader where b.name='陈梅') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person陈思思认识的person,以及认识这些person的person, 令person(c)的性别等于person(b)的身高的最大值, 返回person(a)的年龄,person(b)的年龄,person(c)的薪资",
        "output": "match(a:person where name = '陈思思')-[e:knows]->(b:person)<-[e2:knows]-(c:person) let c.gender = MAX(b.height) return a.age,b.age,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 杜建聪写的书有哪些关联？",
        "output": "match(a:author where a.name = '杜建聪')-[e:write]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person王雪knows的person,以及knows这些person的person",
        "output": "match(a:person where name = '王雪')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有谷歌的点employee的person,然后返回谷歌被belong的person,一起返回",
        "output": "match(a where a.name = '谷歌')-[e:employee]->(b:person),(a where a.name = '谷歌')<-[e2:belong]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找29个person张建国和黄宏,共同的恋人",
        "output": "match(a:person where a.name='张建国')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='黄宏') return b limit 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person杜月有关,且与标签历史有关系的电影节点",
        "output": "match(a:person where a.name='杜月')-[e:watch]-(b:film)-[e2:has]-(c:tag where c.name='历史') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照年龄从小到大排序，对person的id、身高和薪资进行分组。",
        "output": "match(a:person) return a.age group by a.id, a.height, a.salary order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 给出和account BIN有account_repay_loan关系的loan,再给出以account_transfer_account关系关联了 BIN的account;2: 返回源点name不等于Light,边类型为account_repay_loan,且targetId不等于81或f0对658取余的最大值小于754或timeStamp为2029年09月30日的边,返回这些边的f0减950减151.96的个数;3: 找出和person有关联的company节点,并根据其value,scale分组,返回value,scale,以及peopleNumber对552取余的值;4: 找出和person赵梅有person_own_account关系的account,以及和company字节有company_apply_loan关系的loan,将它们都返回;5: 帮我查询5个与Zeus和XiaoHu都存在关系的company节点;",
        "output": "查询语句为:1: match(a:account where a.name = 'BIN')-[e:account_repay_loan]->(b:loan),(a:account where a.name = 'BIN')<-[e2:account_transfer_account]-(c:account)return a, b, c;2: match(a where a.name <> 'Light')-[e:account_repay_loan where e.targetId <> 81 or MAX(e.f0 % 658) < 754 or e.timeStamp = '2029-09-30']->(b) return COUNT(e.f0 - 950 - 151.96);3: match(a:person)-[e:person_invest_company]-(b:company) return b.value, b.scale, b.peopleNumber % 552 group by b.value, b.scale;4: match(a:person where a.name = '赵梅')-[e:person_own_account]->(b:account),(c:company where c.name = '字节')-[e2:company_apply_loan]->(d:loan)return a, b, c, d;5: match(a where a.name='Zeus')-[e]->(b:company)<-[e2]-(c where c.name='XiaoHu') return b limit 5;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照薪资和性别分组，然后对每个分组按照年龄从小到大排序。",
        "output": "match(a:user) return a.age group by a.salary, a.gender order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出黄强和赵科的朋友节点，它们都是人的类型。",
        "output": "match(a:person where a.name='黄强')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表887,768,669, 以属性id作为相等条件,查找类型是person的点",
        "output": "with p as (select * from (VALUES(887),(768),(669)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为数据结构的点属于的所有部门,并对这些部门的id进行求和",
        "output": "match(a where a.name='数据结构')-[e:belong]->(b:department) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找大学四川大学属于的城市,以及属于这些城市的公司",
        "output": "match(a:university where name = '四川大学')-[e:belong]->(b:city)<-[e2:belong]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有徐思琪喜欢的书，并且这些书之间有引用关系，返回这些引用关系中的点名。",
        "output": "match(a where a.name = '徐思琪')-[e:likes]->(b:book)-[e2:refers]->(c:book) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与复旦大学有关的部门，以及与教师马红有关的课程，并将结果返回。",
        "output": "match(a:university where a.name = '复旦大学')-[e:has]->(b:department),(c:teacher where c.name = '马红')-[e2:teach]->(d:course) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询医生张建国创造的处方,被其他医生创造的数量",
        "output": "match(a:doctor where a.name='张建国')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为UME的点releases的所有film,并对这些film的category进行求和",
        "output": "match(a where a.name='UME')-[e:releases]->(b:film) return SUM(b.category)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有person的伙伴,或其伙伴的伙伴",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 找出城市属于的国家,返回其源点的id除13对9249取余的求和值,以及目标点的人数对38735取余的数量;2: 帮我查询company腾讯的类型为relation的边,并根据f0从大到小排列,返回25个;3: 给出名字等于滴滴且人数为空,或名字是华为的节点;4: 给出从城市伦敦出发,经过类型是city_contain_university的边,走1到3跳到达的大学点;5: 查询所有名为美团的,value在121到818之间,name大于1777的partner,返回这些partner的name,和边的srcId;",
        "output": "查询语句为:1: match(a:city)-[e:city_belong_country]->(b:country) return SUM(a.id / 13 % 9249), COUNT(b.peopleNumber % 38735);2: match(a:company where a.name = '腾讯')-[e:relation]->(b) return b order by e.f0 desc limit 25;3: match(a where (a.name = '滴滴' and (a.peopleNumber is null)) or a.name = '华为') return a;4: match(a:city where a.name='伦敦')-[e:city_contain_university]->{1,3}(b:university) return b;5: match(a where a.name='美团')-[e:partner]->(b where (b.value BETWEEN 121 AND 818) and b.name > 1777) return b.name,e.srcId;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person陈梅有2跳关系的person",
        "output": "match(a:person where a.name='陈梅')-[e]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和post Post_218有关的tag,称为X,再请帮我查找和这个X有关联的其他forum,以及和X有关联的post",
        "output": "match(a:post where a.name = 'Post_218')-[e]-(b:tag), (b:tag)-[e2]-(c:forum),(b:tag)-[e3]-(d:post) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门急诊部 拥有的医生,返回医生 诊断的病人的薪资除7423的值",
        "output": "match(a:department where name = '急诊部')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return c.salary / 7423",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person关联的person, 令person(b)的id的值等于认识person的person的薪资的平均值, 再查找person认识的person",
        "output": "match(a:person)-[e:relates]->(b:person) let b.id = AVG((b:person)<-[e2:knows]-(c:person) => c.salary) match(b:person)-[e3:knows]->(d:person) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的三角的环,边标签为朋友, 并返回这些点的id",
        "output": "match(a:person)-[e:friend]->(b)-[e2:friend]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 返回所有与评论Comment_390有关系的标签的价值;2: 查询和评论有关联的电影节点,并根据其价值,类别,id分组,返回价值,类别,id,以及id加15的求和值;3: 给出和film有关联的tag节点,并根据其name,value分组,返回name,value,以及id乘id的值;4: 返回comment Comment_342的relation的friend的relation;5: 给出全部id为106的电影院关联的评论,和以喜欢关系关联了这些评论的其他person;6: 请帮我找出类型是comment,名为Comment_292的点,返回这些点的id;7: 请帮我查找评论属于的电影,返回其源点的id减19的值,以及目标点的价值对833取余的值;8: 查找label为电影院的全部点,并根据大小降序排列;9: 查找person徐思琪观看的电影,被其他电影院上映的数量;",
        "output": "查询语句为:1: match(a:comment where a.name='Comment_390')-[e]-(b:tag) return b.value;2: match(a:comment)-[e:comment_belong_film]-(b:film) return b.value, b.category, b.id, SUM(b.id + 15) group by b.value, b.category, b.id;3: match(a:film)-[e:film_has_tag]-(b:tag) return b.name, b.value, b.id * b.id group by b.name, b.value;4: match(a:comment where a.name='Comment_342')-[e:relation]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d;5: match(a:cinema where a.id = '106')-[e]-(b:comment)<-[e2:person_likes_comment]-(c:person) return b,c;6: match(a:comment where a.name = 'Comment_292') return a.id;7: match(a:comment)-[e:comment_belong_film]->(b:film) return a.id - 19, b.value % 833;8: match(a:cinema) return a order by a.size desc;9: match(a:person where a.name='徐思琪')-[e:person_watch_film]->(b:film)<-[e2:cinema_releases_film]-(c:cinema) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与大学相关的课程节点，限制课程节点ID小于等于92,并返回这些课程节点ID的数量除以72的值，以及这些课程节点的价值取余后的值。",
        "output": "match(a:university)-[e]->(b:course where b.id <= 92) return COUNT(b.id) / 72, b.value % b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与读者郑雪和书《呐喊》相关的所有书节点",
        "output": "match(a:reader where a.name='郑雪')-[e:likes]-(b:book)-[e2:refers]-(c:book where c.name='呐喊') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为中国军事论坛的点的,薪资不为空的朋友,返回这些朋友的薪资,和边的目标点id,f0",
        "output": "match(a where a.name='中国军事论坛')-[e:friend]->(b where (b.salary is not null)) return b.salary,e.targetId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点类型为学生,边类型为选择的边,返回这些边的源点id除143乘890的平均值,和f0加952除843的值",
        "output": "match(a:student)-[e:selects]->(b) return AVG(e.srcId / 143 * 890), (e.f0 + 952) / 843",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age分组,计算height除182的值",
        "output": "return a.height / 182 group by a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和label为论坛的点有包含关系的用户,并且和这些用户有喜欢关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:likes]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有从病人节点出发，到处方节点，并且标签为接受的边。",
        "output": "match(a:patient)-[e:accept]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表210,906, 以属性id作为相等条件,请帮我找出和person李建国有关的person,再请帮我找出和李建国person_family_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(210),(906)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李建国')) -[e ]-(b:person) , (a:person) -[e2:person_family_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找person郑强认识的person,被其他person支付的数量;2: 给出和person有关联的person节点,并根据其id,性别分组,返回id,性别,以及id对69取余的平均值;3: 找出person韩伟的相关者的相关者的相关者;",
        "output": "查询语句为:1: match(a:person where a.name='郑强')-[e:person_knows_person]->(b:person)<-[e2:person_pay_person]-(c:person) return COUNT(c);2: match(a:person)-[e:person_likes_person]-(b:person) return b.id, b.gender, AVG(b.id % 69) group by b.id, b.gender;3: match(a:person where a.name='韩伟')-[e:relation]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与公司阿里有关系的person, 返回和这些person有关联的person的,年龄加69的平均值",
        "output": "match(a:company where a.name= '阿里')-[e]-(b:person)-[e2]-(c:person) return AVG(c.age + 69)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为英国的国家，返回其面积、人口和名称。",
        "output": "match(a:country where a.name = '英国') return a.area, a.peopleNumber, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出seller的1跳的环",
        "output": "match(a:seller)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与张建聪存在咨询关系的卖家，以及这些卖家拥有的商品，并返回这些商品的名字。",
        "output": "match(a where a.name = '张建聪')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出城市标签的点，按人数从多到少排序。",
        "output": "match(a:city) return a order by a.peopleNumber desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有账户名为'TheShy'的最后登录时间",
        "output": "match(a:account where a.name = 'TheShy') return a.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部源点标签为用户,边标签为user_creates_issue,并且满足条件源点id大于等于145且目标点id在50到174之间的边",
        "output": "match(a:user)-[e:user_creates_issue where e.srcId >= 145 and (e.targetId BETWEEN 50 AND 174)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被大学北京大学属于的城市",
        "output": "match(a:city)<-[e:belong]-(b:university where b.name='北京大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和大学有关联的公司节点,并根据其人数分组,返回人数,以及价值减价值的和",
        "output": "match(a:university)-[e:cooperate]-(b:company) return b.peopleNumber, SUM(b.value - b.value) group by b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出Amily和韩宏作为读者的共同伙伴节点列表。",
        "output": "match(a:reader where a.name='Amily')-[e:partner]->(b)<-[e2:partner]-(c:reader where c.name='韩宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "'请找出由Kate支付的人，并返回这个人认识的人的年龄。'",
        "output": "match(a:person where name = 'kate')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与编辑徐建聪和王梅都存在发布关系的点",
        "output": "match(a:publisher where a.name='徐建聪')-[e:publish]->(b)<-[e2:publish]-(c:publisher where c.name='王梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为Prescription_219的点包含的全部药品,并对这些点的id进行求和",
        "output": "match(a where a.name='Prescription_219')-[e:prescription_contain_medicine]->(b:medicine) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点标签为事项,目标点标签为仓库,标签为合并请求或用户的边",
        "output": "match(a:issue)-[e:pullRequest | user]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出部门拥有的教师, 令教师的身高的值等于拥有教师的部门的大小的平均值, 再查找教师教的课程",
        "output": "match(a:department)-[e:has]->(b:teacher) let b.height = AVG((b:teacher)<-[e2:has]-(c:department) => c.size) match(b:teacher)-[e3:teach]->(d:course) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和person点有pay关系的person节点,且边满足条件f0小于等于914,目标person节点满足条件id等于43",
        "output": "match(a:person)-[e:person_pay_person where e.f0 <= 914]->(b:person where b.id = 43) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出company阿里belong的city,被其他university belong的数量",
        "output": "match(a:company where a.name='阿里')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查询patient黄红的全部partner,的targetId对128取余乘110.21的值;2: 给出patient陈红 accept的prescription,返回prescription contain的medicine的weight减326减219的值 ;3: 请帮我找出和prescription Prescription_373之间有prescription_contain_medicine关系的medicine;4: 查找gender不是9293或name等于周红的节点;5: 帮我查询标签为处方的点,返回9个;6: 返回与名为韩思琪和杜雪的点共同属于的,label为部门的节点;7: 返回源点age大于8且name为张雪,age小于66,边标签等于doctor_creates_prescription,且f1不是true或weight不为空或f0在518到974之间的边,返回这些边的weight乘142.27的数量;8: 查找与名为赵思思和黄建聪的点共同diagnose的,类型为patient的节点;9: 查询类型为医生的点,返回66个;",
        "output": "查询语句为:1: match(a:patient where a.name= '黄红')-[e:partner]->(b) return e.targetId % 128 * 110.21;2: match(a:patient where name = '陈红')-[e:patient_accept_prescription]->(b:prescription)-[e2:prescription_contain_medicine]->(c:medicine) return c.weight - 326 - 219;3: match(a:prescription where a.name='Prescription_373')-[e:prescription_contain_medicine]->(b:medicine) return b;4: match(a where a.gender <> 9293 or a.name = '周红') return a;5: match(a:prescription) return a limit 9;6: match(a where a.name = '韩思琪')-[e:doctor_belong_department]->(b:department)<-[e2:doctor_belong_department]-(c where c.name = '杜雪') return b;7: match(a where a.age > 8 and a.name = '张雪' and a.age < 66)-[e:doctor_creates_prescription where e.f1 <> true or (e.weight is not null) or (e.f0 BETWEEN 518 AND 974)]->(b) return COUNT(e.weight * 142.27);8: match(a where a.name = '赵思思')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = '黄建聪') return b;9: match(a:doctor) return a limit 66;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person张宏有关,且与person李强有关系的person节点",
        "output": "match(a:person where a.name='张宏')-[e:likes]-(b:person)-[e2:knows]-(c:person where c.name='李强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点weight小于522或createTime是2032年08月17日,且lang不等于c,边类型是has,且满足条件srcId大于等于186的边,返回这些边的targetId的最小值减35减109减127.01乘142除f0的值",
        "output": "match(a where (a.weight < 522 or a.createTime = '2032-08-17') and a.lang <> 'c')-[e:has where e.srcId >= 186]->(b) return (MIN(e.targetId) - 35 - 109 - 127.01) * 142 / e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表915, 以属性id作为相等条件,查询seller马宏的全部friend,的srcId乘101的值",
        "output": "with p as (select * from (VALUES(915)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (a.name = '马宏')) -[e:friend ]->(b) RETURN e.srcId * 101 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出与teacher何红有关系的course, 返回和这些course有关联的course的,credit减2的最大值;2: 请帮我查找与department体育学院和艺术学院都存在department_has_teacher关系的点;3: 查找university四川大学的全部类型是relation的边,并根据f0降序排列,返回41个;",
        "output": "查询语句为:1: match(a:teacher where a.name= '何红')-[e]-(b:course)-[e2]-(c:course) return MAX(c.credit - 2);2: match(a:department where a.name='体育学院')-[e:department_has_teacher]->(b)<-[e2:department_has_teacher]-(c:department where c.name='艺术学院') return b;3: match(a:university where a.name = '四川大学')-[e:relation]->(b) return b order by e.f0 desc limit 41;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与医生韩国强有诊断关系的患者，再帮我查找与韩国强的处方创建关系。",
        "output": "match(a:doctor where a.name = '韩国强')-[e:diagnose]->(b:patient),(a:doctor where a.name = '韩国强')<-[e2:creates]-(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为credit,id,courseHour, 数据为(3,75,26), 以属性id作为相等条件,给出全部与计算机学院存在department_has_student关系的学生,学生与课程存在student_selects_course关系的点,返回这些点的名字",
        "output": "with p as (select * from (VALUES(3,75,26)) as t(credit,id,courseHour))MATCH (a WHERE a.id = p.id AND (a.name = '计算机学院')) -[e:department_has_student ]->(b:student) -[e2:student_selects_course ]->(c:course) RETURN c.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有orders类型的点，按照name的字母顺序从大到小排序。",
        "output": "match(a:orders) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛的三角的环,边标签等于包含, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与课程马克思原理和数据结构都存在属于关系的点",
        "output": "match(a:course where a.name='马克思原理')-[e:belong]->(b)<-[e2:belong]-(c:course where c.name='数据结构') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算value减973除35对857取余的个数",
        "output": "return COUNT((a.value - 973) / 35 % 857) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,薪资,id分组,计算薪资减2633的个数",
        "output": "return COUNT(a.salary - 2633) group by a.name, a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 返回person watch的film,返回其源点的salary乘1105的值,以及目标点的value乘99的平均值;2: 帮我查询名为韩红的点喜欢的所有评论,并对这些点的字数进行求和;3: 返回person likes的comment,返回其源点的age减40的值,以及目标点的id减id的平均值;4: 给出名为历史的标签,以及与其有关的标签,并返回历史的价值和这些标签的名字;5: 给出所有名为马科的点creates的comment;",
        "output": "查询语句为:1: match(a:person)-[e:person_watch_film]->(b:film) return a.salary * 1105, AVG(b.value * 99);2: match(a where a.name='韩红')-[e:person_likes_comment]->(b:comment) return SUM(b.wordCount);3: match(a:person)-[e:person_likes_comment]->(b:comment) return a.age - 40, AVG(b.id - b.id);4: match(a:tag where name = '历史')-[e]-(b:tag) return a.value, b.name;5: match(a where a.name='马科')-[e:person_creates_comment]->(b:comment) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为郑红的点发布的帖子",
        "output": "match(a where a.name='郑红')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 帮我查询类型为person的所有点,并根据薪资降序排列;2: 找出所有名为黄思思的点relates的person;3: 返回123个person何轩和王宏,共同的朋友;4: 请帮我找出id为136的点的gender;5: 找出person的朋友,或其朋友的朋友;6: 查找person马梅的全部label为父母的边,并根据目标点id从大到小排列,返回182个;",
        "output": "查询语句为:1: match(a:person) return a order by a.salary desc;2: match(a where a.name='黄思思')-[e:relates]->(b:person) return b;3: match(a:person where a.name='何轩')-[e:person_friend_person]->(b)<-[e2:person_friend_person]-(c:person where c.name='王宏') return b limit 123;4: match(a where a.id = '136') return a.gender;5: match(a:person)-[e:person_friend_person]->{1,2}(b) return b;6: match(a:person where a.name = '马梅')-[e:person_parent_person]->(b) return b order by e.targetId desc limit 182;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与seller有关联的buyer节点，这些节点的高度至少为15，并返回以下信息：这些节点年龄的平均值减去98和22的差值的数量，以及它们薪水的平均值减去5867。",
        "output": "match(a:seller)-[e]->(b:buyer where b.height >= 15) return COUNT(AVG(b.age) - 98 - 22), AVG(b.salary - 5867)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回name不等于786或name不是大学物理的course belong的department的名称,以及这些department has的teacher的名称",
        "output": "match(a:course where a.name <> 786 or a.name <> '大学物理')-[e:belong]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出39个名为Prescription_120的点包含的label为药品的节点,且其权重小于879",
        "output": "match(a where a.name='Prescription_120')-[e:contain]->(b:medicine where b.weight < 879) return b limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点area小于等于46668,value大于8293,或area大于62143,目标点name等于华中科技大学且id为954,且类型为contain的边",
        "output": "match(a where (a.area <= 46668 and a.value > 8293) or a.area > 62143)-[e:contain]->(b where b.name = '华中科技大学' and b.id = 954) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以78, 'VY'作为输入调用triangleCount函数,返回number",
        "output": "Call TRIANGLECOUNT(78, 'VY') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与用户陈伟有发布关系的1跳以内的环",
        "output": "match(a:user where name = '陈伟')-[e:publish]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为90的seller的所有buyer关系，再查找这些buyer相关的partner",
        "output": "match(a:seller where id = '90')-[e]-(b:buyer)-[e2:relation]->(c), (b:buyer)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出14个与Order_482和Order_189有关系的orders节点。",
        "output": "match(a where a.name='Order_482')-[e]->(b:orders)<-[e2]-(c where c.name='Order_189') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与person孙雪有关系的person的age",
        "output": "match(a:person where a.name='孙雪')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person杜建国观看的电影,以及观看这些电影的person",
        "output": "match(a:person where name = '杜建国')-[e:watch]->(b:film)<-[e2:watch]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与买家徐红有关联，并包含椅子商品的订单。返回这些订单的名称、价格、价值以及买家徐红和椅子商品的销售量。",
        "output": "match(a:buyer where a.name='徐红')-[e:creates]->(b:orders)<-[e2:contain]-(c:goods where c.name='椅子') return a.name,b.name, b.price, b.value,c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘id的平均值",
        "output": "AVG(a.id * a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与订单Order_224和Order_441有关的商品，返回它们的类别、价格和销量。",
        "output": "match(a:orders where a.name='Order_224')-[e]->(b:goods)<-[e2]-(c:orders where c.name='Order_441') return b.category, b.price, b.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回那些apply贷款但peopleNumber不为656的company的贷款名称和对应的账户名称。",
        "output": "match(a:company where a.peopleNumber <> 656)-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为80的大学有关的课程的朋友, 再请帮我找出和课程有关系的伙伴",
        "output": "match(a:university where id = 80)-[e]-(b:course)-[e2:friend]->(c), (b:course)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有陈强的点consult的seller,然后查询陈强被ask的seller,一起返回",
        "output": "match(a where a.name = '陈强')-[e:consult]->(b:seller),(a where a.name = '陈强')<-[e2:ask]-(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与学生吴红存在选择关系,且与部门生物学院存在属于关系的课程节点，返回这些课程的学分,课时,及学生吴红的性别,及部门生物学院的大小",
        "output": "match(a:student where a.name='吴红')-[e:selects]->(b:course)<-[e2:belong]-(c:department where c.name='生物学院') return a.gender,b.credit, b.courseHour,c.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与微软公司合作且被其他城市包含的大学数量。",
        "output": "match(a:company where a.name='微软')-[e:cooperate]->(b:university)<-[e2:contain]-(c:city) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与何思思存在friend关系的person,person与person存在parent关系的点,返回这些点的height",
        "output": "match(a where a.name = '何思思')-[e:friend]->(b:person)-[e2:parent]->(c:person) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与person节点相关的person节点，按其id、薪资和年龄进行分组，并返回id、薪资和年龄。",
        "output": "match(a:person)-[e:colleague]-(b:person) return b.id, b.salary, b.age group by b.id, b.salary, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为JavaGuid的节点拥有的合并请求或用户",
        "output": "match(a where a.name='JavaGuid')-[e:has]->(b:pullRequest | user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表688, 以属性id作为相等条件,给出165个创建时间不等于2022年05月02日或名字不等于Comment_179,且创建时间不是1999年11月17日的评论,根据名字从小到大排列",
        "output": "with p as (select * from (VALUES(688)) as t(id)) MATCH (a:comment WHERE a.id = p.id AND ((a.createTime <> '2022-05-02' OR a.name <> 'Comment_179') AND a.createTime <> '1999-11-17')) RETURN a ORDER BY a.name LIMIT 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与大学华中科技大学有关系的公司的规格",
        "output": "match(a:university where a.name='华中科技大学')-[e]-(b:company) return b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表143,244,109, 源点的id等于输入表id,请帮我找出全部源点类型是用户,边类型是user_likes_post,且满足条件时间戳不是2004年09月05日,时间戳不等于2025年05月30日,或时间戳不是2006年06月09日的边",
        "output": "with p as (select * from (VALUES(143),(244),(109)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_likes_post WHERE e.timeStamp <> '2004-09-05' AND e.timeStamp <> '2025-05-30' OR e.timeStamp <> '2006-06-09' ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与22个买家类型的点存在关联关系的订单，并且这些订单中包含的商品。",
        "output": "match(a:buyer)-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height加188加168乘height的值",
        "output": "return (a.height + 188 + 168) * a.height group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询存款person徐梅拥有的账号,的贷款",
        "output": "match(a:person where name = '徐梅')-[e:own]->(b:account)<-[e2:deposit]-(c:loan) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以120作为请求点id, 以属性id作为相等条件,查找和person点有belong关系的company节点,且边满足条件f1不是true,目标company节点满足条件value在286到707之间",
        "output": "with p as (select * from (VALUES(120)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_belong_company WHERE e.f1 <> TRUE ]->(b:company WHERE b.value BETWEEN ASYMMETRIC 286 AND 707) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与company微软有关系的person的salary",
        "output": "match(a:company where a.name='微软')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据性别,id分组,计算薪资加6111的最大值",
        "output": "return MAX(a.salary + 6111) group by a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与吴思思和Bob有关联的人的年龄和性别。",
        "output": "match(a:person where a.name='吴思思')-[e]->(b:person)<-[e2]-(c:person where c.name='Bob') return b.age, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型为软件,边类型为使用的边,返回这些边的targetId的求和值除119的值,和f0乘646的值",
        "output": "match(a:software)-[e:uses]->(b) return SUM(e.targetId) / 119, e.f0 * 646",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足以下条件的person：性别为male或者年龄在44到163之间（包括44和163），并且薪资大于5891，然后按照id降序排列。",
        "output": "match(a:person where (a.gender = 'male' or a.age + 44 + 5708 <= 163) and a.salary > 5891) return a order by a.id desc limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为java程序设计的点关联的书",
        "output": "match(a where a.name='java程序设计')-[e:relates]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person何思思的全部伙伴,的源点id除147的最小值",
        "output": "match(a:person where a.name= '何思思')-[e:partner]->(b) return MIN(e.srcId / 147)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出121个和类型为person的点有支付关系的person,且和这些person有认识关系的person",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:knows]->(c:person) return c limit 121",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为orders的全部点,并根据price降序排列",
        "output": "match(a:orders) return a order by a.price desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部person以年龄,名字,身高分组的年龄, 根据年龄从大到小排序",
        "output": "match(a:person) return a.age group by a.age, a.name, a.height order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为作家的点,返回6个",
        "output": "match(a:author) return a limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找周伟和赵建聪共有的账号节点。",
        "output": "match(a where a.name = '周伟')-[e:own]->(b:account)<-[e2:own]-(c where c.name = '赵建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有与标签关联的电影，以及这些电影在其他电影院的上映情况。",
        "output": "match(a:tag where a.id = '74')-[e]-(b:film)<-[e2:releases]-(c:cinema) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询从浙江大学出发，沿着标签为拥有的边走1到3度，到达哪个部门点。",
        "output": "match(a:university where a.name='浙江大学')-[e:has]->{1,3}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出和公司滴滴之间有company_cooperate_university关系的大学;2: 请帮我查找标签为大学的点,返回85个;3: 请帮我找出所有university以level,value分组的level, 根据level升序排序;4: 给出和company有关联的university节点,并根据其name分组,返回name,以及value除528的最小值;5: 返回标签为company的点,返回87个;6: 请帮我找出city以id分组的peopleNumber, 根据peopleNumber从小到大排序;",
        "output": "查询语句为:1: match(a:company where a.name='滴滴')-[e:company_cooperate_university]->(b:university) return b;2: match(a:university) return a limit 85;3: match(a:university) return a.level group by a.level, a.value order by a.level asc;4: match(a:company)-[e:company_cooperate_university]-(b:university) return b.name, MIN(b.value / 528) group by b.name;5: match(a:company) return a limit 87;6: match(a:city) return a.peopleNumber group by a.id order by a.peopleNumber asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为tag的所有点,并根据value从大到小排列",
        "output": "match(a:tag) return a order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Geaflow的software,以及与其有关的software,并返回Geaflow的lang和这些software的stars",
        "output": "match(a:software where name = 'Geaflow')-[e]-(b:software) return a.lang, b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点满足条件id为空且height的平均值乘187不等于186,身高不为空,目标点满足条件性别等于famale或年龄不为空,且身高小于等于177,且label为认识的边",
        "output": "match(a where (a.id is null) and AVG(a.height) * 187 <> 186 and (a.height is not null))-[e:knows]->(b where (b.gender = 'famale' or (b.age is not null)) and b.height <= 177) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出所有person类型的点，按照height从高到低排序",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和person点有creates关系的comment节点,且边满足条件weight小于166.46,目标comment节点id在2到52之间",
        "output": "match(a:person)-[e:creates where e.weight < 166.46]->(b:comment where (b.id BETWEEN 2 AND 52)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和用户赵雪有关的事项,再查询和赵雪创造的其他事项,返回它们",
        "output": "match(a:user where a.name = '赵雪')-[e]-(b:issue), (a:user)-[e2:creates]->(c:issue) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查询和公司阿里有company_cooperate_university关系的大学,以及和公司美团有company_belong_city关系的城市,将它们都返回;2: 查找名为美团的点cooperate的university;3: 帮我查询标签为university_cooperate_company,以及满足条件源点id不为空且目标点id大于等于80,源点id在65到132之间的边;4: 查询所有源点类型为company,边类型为company_belong_city的边,返回这些边的weight除198.74除798除154.13加177减199.90的最大值,和targetId除39的值;5: 请帮我查找全部id为178的country关联的university,和以contain关系关联了这些university的其他city;6: 返回university四川大学 belong的city,返回city contain的university的level减2的求和值 ;7: 查询类型为country_contain_city,并且满足条件源点id小于120,源点id大于等于135且权重等于125.44的边;8: 请帮我查找全部标签为城市的点;9: 帮我查询与城市上海和巴黎都存在city_contain_company关系的点;",
        "output": "查询语句为:1: match(a:company where a.name = '阿里')-[e:company_cooperate_university]->(b:university),(c:company where c.name = '美团')-[e2:company_belong_city]->(d:city)return a, b, c, d;2: match(a where a.name='美团')-[e:company_cooperate_university]->(b:university) return b;3: match(a)-[e:university_cooperate_company where (e.srcId is not null) and e.targetId >= 80 and (e.srcId BETWEEN 65 AND 132)]->(b) return e;4: match(a:company)-[e:company_belong_city]->(b) return MAX(e.weight / 198.74 / 798 / 154.13 + 177 - 199.90), e.targetId / 39;5: match(a:country where a.id = '178')-[e]-(b:university)<-[e2:city_contain_university]-(c:city) return b,c;6: match(a:university where name = '四川大学')-[e:university_belong_city]->(b:city)-[e2:city_contain_university]->(c:university) return SUM(c.level - 2);7: match(a)-[e:country_contain_city where e.srcId < 120 and e.srcId >= 135 and e.weight = 125.44]->(b) return e;8: match(a:city) return a;9: match(a:city where a.name='上海')-[e:city_contain_company]->(b)<-[e2:city_contain_company]-(c:city where c.name='巴黎') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有person以年龄分组的名字, 根据名字从大到小排序",
        "output": "match(a:person) return a.name group by a.age order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的id减18的值",
        "output": "match(a:company) return a.id - 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person李红有invest关系的1度的环",
        "output": "match(a:person where name = '李红')-[e:invest]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与seller吴思琪有关系的orders的price",
        "output": "match(a:seller where a.name='吴思琪')-[e]-(b:orders) return b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表928,967, 以属性id作为相等条件,请帮我找出满足条件价值大于等于131,id大于50的节点",
        "output": "with p as (select * from (VALUES(928),(967)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.value >= 131 AND a.id > 50)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有买家关联的物品，以及与这些物品有has关系的其他卖家。",
        "output": "match(a:buyer where a.id = '50')-[e]-(b:goods)<-[e2:has]-(c:seller) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有源点为大学，边类型为拥有的边，并返回这些边weight的最小值减去191.89,以及权重与权重相乘再除以f0的值。",
        "output": "match(a:university)-[e:has]->(b) return MIN(e.weight) - 191.89, (e.weight + e.weight) * e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创造医生徐轩创造的处方,的医生",
        "output": "match(a:doctor where name = '徐轩')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,id,height, 数据为(7575,17,150),(8350,75,170),(8591,46,150),(7829,24,165), 源点的height等于输入表height,请帮我找出publisher李科的relation,的weight除174.69乘44的最大值",
        "output": "with p as (select * from (VALUES(7575,17,150),(8350,75,170),(8591,46,150),(7829,24,165)) as t(salary,id,height))MATCH (a:publisher WHERE a.height = p.height AND (a.name = '李科')) -[e:relation ]->(b) RETURN MAX(e.weight / 174.69 * 44) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 给出user的三角的环,边类型是user_likes_repository, 并返回这些点的id;2: 查询标签等于用户的点,返回117个;3: 给出用户李红的所有伙伴,的f0加503的值;4: 查找用户孙若涵的朋友的相关者的朋友;5: 给出标签等于issue_belong_repository,并且满足条件f0为空的边;6: 找出所有prescription以createTime,weight,name分组的id, 根据id降序排序;",
        "output": "查询语句为:1: match(a:user)-[e:user_likes_repository]->(b)-[e2:user_likes_repository]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:user) return a limit 117;3: match(a:user where a.name= '李红')-[e:partner]->(b) return e.f0 + 503;4: match(a:user where a.name='孙若涵')-[e:friend]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d;5: match(a)-[e:issue_belong_repository where (e.f0 is null)]->(b) return e;6: match(a:prescription) return a.id group by a.createTime, a.weight, a.name order by a.id desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为19的点的性别,身高",
        "output": "match(a where a.id = 19) return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出65个名为徐强的点发布的类型为书的节点,且节点id大于等于83",
        "output": "match(a where a.name='徐强')-[e:publish]->(b:book where b.id >= 83) return b limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前132个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为96的教师教的课程, 并将课程有关的大学的等级的求和值赋值给课程的名字, 接着查询课程的名字小于96的课程属于的部门",
        "output": "match(a:teacher where a.id = 96)-[e:teach]->(b:course) let b.name = SUM((b:course)-[e2]-(c:university) => c.level) match(b:course where b.name < 96)-[e3:belong]->(d:department) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有与department有关系的prescription,以及以accept关系接受这些prescription的其他patient。",
        "output": "match(a:department where a.id = '62')-[e]-(b:prescription)<-[e2:accept]-(c:patient) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是仓库的点,并根据权重从大到小排列",
        "output": "match(a:repository) return a order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person有关联的person节点,并根据其id,名字分组,返回id,名字,以及薪资加薪资的最小值",
        "output": "match(a:person)-[e:likes]-(b:person) return b.id, b.name, MIN(b.salary + b.salary) group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为李梅的点的,字数小于64的伙伴,返回这些伙伴的创建时间,和边的f0",
        "output": "match(a where a.name='李梅')-[e:partner]->(b where b.wordCount < 64) return b.createTime,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和电影绿巨人有关的电影院,再查找和绿巨人拥有的其他标签,返回它们",
        "output": "match(a:film where a.name = '绿巨人')-[e]-(b:cinema), (a:film)-[e2:has]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与'TheShy'账户有关联，或者与该账户的伙伴有关联的贷款。",
        "output": "match(a:account where n.name=TheShy)-[e:partner]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为马思琪的买家点，并返回他们的ID和年龄。",
        "output": "match(a:buyer where a.name = '马思琪') return a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有person的relation,或其relation的relation",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与何建国有关联的爱人，或者爱人的爱人。",
        "output": "match(a:person where n.name=何建国)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出doctor Bob的标签等于friend的边,并根据f0从大到小排列,返回118个",
        "output": "match(a:doctor where a.name = 'Bob')-[e:friend]->(b) return b order by e.f0 desc limit 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为28的用户关联的用户,和以拥有关系关联了这些用户的其他仓库",
        "output": "match(a:user where a.id = 28)-[e]-(b:user)<-[e2:has]-(c:repository) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person杜月认识的person节点购买的软件",
        "output": "match(a:person where a.name = '杜月')-[e:knows]->(b:person)-[e2:buy]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有与名为张科的买家有合作关系，或者有合作伙伴关系的订单。",
        "output": "match(a:buyer where n.name=张科)-[e:partner]->{1,2}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找与名为黄思思和Alan的点共同诊断的,标签为病人的节点;2: 请帮我查找id为22的点的id;3: 请帮我找出与doctor吴伟有关系的medicine的weight;4: 帮我查询doctor的三角的环,边标签等于doctor_diagnose_patient, 并返回这些点的id;5: 找出全部和doctor马红有关系的department节点,返回这些点的weight;6: 查询处方的三角的环,边类型是prescription_contain_medicine, 并返回这些点的id;7: 给出和doctor郑红之间有doctor_belong_department关系的department;",
        "output": "查询语句为:1: match(a where a.name = '黄思思')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = 'Alan') return b;2: match(a where a.id = '22') return a.id;3: match(a:doctor where a.name='吴伟')-[e]-(b:medicine) return b.weight;4: match(a:doctor)-[e:doctor_diagnose_patient]->(b)-[e2:doctor_diagnose_patient]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a:doctor where a.name='马红')-[e]-(b:department) return b.weight;6: match(a:prescription)-[e:prescription_contain_medicine]->(b)-[e2:prescription_contain_medicine]-(c)->(a) return a,b.id as b_id,c.id as c_id;7: match(a:doctor where a.name='郑红')-[e:doctor_belong_department]->(b:department) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 给出id为13的tag关联的film,和以releases关系关联了这些film的其他cinema;2: 帮我查询film的三角的环,边类型为film_has_tag, 并返回这些点的id;3: 请帮我找出全部和tag喜剧有2度关系的film;4: 给出名为徐思琪和陈思思的,类型为person的点公共的朋友节点的名单;",
        "output": "查询语句为:1: match(a:tag where a.id = '13')-[e]-(b:film)<-[e2:cinema_releases_film]-(c:cinema) return b,c;2: match(a:film)-[e:film_has_tag]->(b)-[e2:film_has_tag]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:tag where a.name='喜剧')-[e]->{2,2}(b:film) return b;4: match(a:person where a.name='徐思琪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈思思') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person张建国喜欢的person,和张建国喜欢的person",
        "output": "match(a:person)<-[e:likes]-(b:person where name = '张建国')-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表939,797,274,568, 以属性id作为相等条件,返回111个age小于63,id大于等于46且gender不是male的author,根据id降序排列",
        "output": "with p as (select * from (VALUES(939),(797),(274),(568)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.age < 63 AND a.id >= 46 AND a.gender <> 'male')) RETURN a ORDER BY a.id DESC LIMIT 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找doctor赵思琪creates的prescription,以及accept这些prescription的patient, 令prescription的name等于prescription的weight乘24, 返回doctor的id,prescription的createTime,patient的id",
        "output": "match(a:doctor where name = '赵思琪')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) let b.name = b.weight * 24 return a.id,b.createTime,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询清华大学的点属于的城市,然后查询清华大学被包含的城市,一起返回",
        "output": "match(a where a.name = '清华大学')-[e:belong]->(b:city),(a where a.name = '清华大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(57,57,'male'),(8,30,'famale'),(30,53,'famale')作为请求表数据,属性分别为id,age,gender, 源点的age等于输入表age,返回person马梅的标签等于partner的边,并根据f1从大到小排列,返回166个",
        "output": "with p as (select * from (VALUES(57,57,'male'),(8,30,'famale'),(30,53,'famale')) as t(id,age,gender))MATCH (a:person WHERE a.age = p.age AND (a.name = '马梅')) -[e:partner ]->(b) RETURN b ORDER BY e.f1 DESC LIMIT 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询与person黄月和何红都存在person_colleague_person关系的点",
        "output": "match(a:person where a.name='黄月')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='何红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出合作城市纽约包含的大学,的公司",
        "output": "match(a:city where name = '纽约')-[e:contain]->(b:university)<-[e2:cooperate]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2011-09-15,'XiaoHu',false),(2028-06-02,'LX001',true),(2019-09-17,'BIN',true)作为请求表数据,属性分别为createTime,name,isBlock, 以属性isBlock作为相等条件,请帮我找出名为滴滴的公司,以及与其有关的公司,并返回滴滴的价值和这些公司的规格",
        "output": "with p as (select * from (VALUES(2011-09-15,'XiaoHu',false),(2028-06-02,'LX001',true),(2019-09-17,'BIN',true)) as t(createTime,name,isBlock))MATCH (a:company WHERE a.isBlock = p.isBlock AND (name = '滴滴')) -[e ]-(b:company) RETURN a.value, b.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为person的点,返回185个",
        "output": "match(a:person) return a limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签为教师,目标点标签为课程,标签为大学或部门或课程的边",
        "output": "match(a:teacher)-[e:university | department | course]->(b:course) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从百度贴吧论坛出发，沿着类型为contain的边走2到4度，到达一个post点。",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->{2,4}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person郑思琪 属于的公司,返回公司 创造的软件的id乘58减40的值",
        "output": "match(a:person where name = '郑思琪')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.id * 58 - 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出贷款loan_3存款的账号, 令贷款的价值等于账号的id,令账号的id等于账号的id的最大值对id取余的最小值, 返回贷款的id, 账号的价值",
        "output": "match(a:loan where a.name='loan_3')-[e:deposit]->(b:account) let a.value = b.id,let b.id = MIN(MAX(b.id) % b.id) return a.id,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我查找71个person马雪和郑国强,共同的friend;2: 查找名为Geaflow的software;3: 给出label为公司的点;4: 帮我查询和公司蚂蚁集团有company_employee_person关系的person,再帮我查询以company_creates_software关系关联了蚂蚁集团的软件;5: 查找person黄红 knows的person,返回person belong的company的peopleNumber乘578的值 ;6: 帮我查询name不等于杜轩的节点;",
        "output": "查询语句为:1: match(a:person where a.name='马雪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='郑国强') return b limit 71;2: match(a:software where a.name = 'Geaflow') return a;3: match(a:company) return a;4: match(a:company where a.name = '蚂蚁集团')-[e:company_employee_person]->(b:person),(a:company where a.name = '蚂蚁集团')<-[e2:company_creates_software]-(c:software)return a, b, c;5: match(a:person where name = '黄红')-[e:person_knows_person]->(b:person)-[e2:person_belong_company]->(c:company) return c.peopleNumber * 578;6: match(a where a.name <> '杜轩') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有源点类型为person,边类型为拥有的边，并计算这些边的源点ID之和，再加上164除以117.10的结果，最后再除以f0。",
        "output": "match(a:person)-[e:own]->(b) return SUM(e.srcId + 164 % 117.10), e.f0 / e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为四川大学的国家,以及与其有关的大学,并返回四川大学的id和这些大学的id",
        "output": "match(a:country where name = '四川大学')-[e]-(b:university) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出前107个类型是person_lover_person的边",
        "output": "match(a)-[e:person_lover_person]->(b) return e limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表822,519, 源点的id等于输入表id,请帮我找出student的1度以内的环",
        "output": "with p as (select * from (VALUES(822),(519)) as t(id)) MATCH (a:student WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person Tom和孙梅都存在朋友关系的点",
        "output": "match(a:person where a.name='Tom')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='孙梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询诊断医生孙雪诊断的病人,的医生",
        "output": "match(a:doctor where name = '孙雪')-[e:diagnose]->(b:patient)<-[e2:diagnose]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从department急诊部出发，通过标签为has的边，走了3跳或4跳后到达的doctor节点。",
        "output": "match(a:department where a.name='急诊部')-[e:has]->{3,4}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和book白夜行有关系的book,返回这些点的salary,gender,id",
        "output": "match(a:book where a.name='白夜行')-[e]-(b:book) return b.salary, b.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与作家何宏有撰写关系，且引用了书《呐喊》的书节点，返回这些书的类别、名称、ID,以及作家何宏的ID和《呐喊》的ID。",
        "output": "match(a:author where a.name='何宏')-[e:write]->(b:book)<-[e2:refers]-(c:book where c.name='呐喊') return a.id,b.category, b.name, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定与电影院好视影院存在上映关系，且标签为'古代'的电影节点，返回这些电影的名字、类别、电影院好视影院的ID以及标签古代的价值。",
        "output": "match(a:cinema where a.name='好视影院')-[e:releases]->(b:film)<-[e2:has]-(c:tag where c.name='古代') return a.id,b.name, b.category,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有公司以规格,人数,名字分组的规格, 根据规格从小到大排序",
        "output": "match(a:company) return a.scale group by a.scale, a.peopleNumber, a.name order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出天涯论坛上有关古代的帖子，并返回这些帖子的字数、创建时间和它们所在论坛以及标签的价值。",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:post)<-[e2:has]-(c:tag where c.name='古代') return a.value,b.wordCount, b.createTime,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出赵国强喜欢过的帖子，并返回这些帖子所拥有的标签名。",
        "output": "match(a where a.name = '赵国强')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person韩伟喜欢的person,以及喜欢这些person的person, 令person(a)的年龄等于person(b)的salary的求和值除1177乘36,令person(b)的性别等于person(c)的id,令person(b)的id等于person(c)的薪资, 返回person(a)的薪资,person(b)的薪资,person(c)的身高",
        "output": "match(a:person where name = '韩伟')-[e:likes]->(b:person)<-[e2:likes]-(c:person) let a.age = SUM(b.salary) / 1177 * 36,let b.gender = c.id,let b.id = c.salary return a.salary,b.salary,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出28个城市天津和纽约,共同的相关者",
        "output": "match(a:city where a.name='天津')-[e:relation]->(b)<-[e2:relation]-(c:city where c.name='纽约') return b limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表785, 以属性id作为相等条件,找出179个gender等于famale或gender不是famale或age减94对165取余是181的buyer,根据gender升序排列",
        "output": "with p as (select * from (VALUES(785)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.gender = 'famale' OR a.gender <> 'famale' OR a.age - 94 % 165 = 181)) RETURN a ORDER BY a.gender LIMIT 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找59个名为字节的点雇佣的标签等于person的节点,且节点性别为famale或名字是韩建国",
        "output": "match(a where a.name='字节')-[e:employee]->(b:person where b.gender = 'famale' or b.name = '韩建国') return b limit 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找用户马轩发布的帖子,以及喜欢这些帖子的用户, 令用户的名字等于用户的性别,令帖子的身高等于用户的id的平均值减12,令帖子的字数等于帖子的价值, 返回用户(a)的身高,帖子(b)的字数,用户(c)的身高",
        "output": "match(a:user where name = '马轩')-[e:publish]->(b:post)<-[e2:likes]-(c:user) let a.name = a.gender,let b.height = AVG(c.id) - 12,let b.wordCount = b.value return a.height,b.wordCount,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出黄思琪和黄宏的共同联系人。",
        "output": "match(a:user where a.name='黄思琪')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='黄宏') return b limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出病人孙强的标签为伙伴的边,并根据权重升序排列,返回122个",
        "output": "match(a:patient where a.name = '孙强')-[e:partner]->(b) return b order by e.weight asc limit 122",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找创建时间为1999年02月16日且人数在39到119之间的论坛包含的用户的名称,以及这些用户 发布的帖子的名称",
        "output": "match(a:forum where a.createTime = '1999-02-16' and (a.peopleNumber BETWEEN 39 AND 119))-[e:contain]->(b:user)-[e2:publish]->(c:post) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部id为10的医生关联的部门,和以属于关系关联了这些部门的其他医生",
        "output": "match(a:doctor where a.id = 10)-[e]-(b:department)<-[e2:belong]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与user何轩有关系的repository的stars",
        "output": "match(a:user where a.name='何轩')-[e]-(b:repository) return b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(91,589,59),(53,296,13),(56,820,81),(51,348,16)作为请求表数据,属性分别为size,value,id, 源点的size等于输入表size,查找teacher以name分组的id, 根据id从小到大排序",
        "output": "with p as (select * from (VALUES(91,589,59),(53,296,13),(56,820,81),(51,348,16)) as t(size,value,id))MATCH (a:teacher WHERE a.size = p.size) RETURN a.id GROUP BY a.name ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有电影院的id减23加16的最小值",
        "output": "match(a:cinema) return MIN(a.id - 23 + 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有包含在美国内的城市，以及这些城市内包含大学的点，并返回这些点的ID。",
        "output": "match(a where a.name = '美国')-[e:contain]->(b:city)-[e2:contain]->(c:university) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被部门拥有数量大于31的学生,记为relationCount,再查询这些学生拥有的课程",
        "output": "match(a:student) let a.relationCount = MIN((a:student)<-[e:has]-(b:department) => b.id) match(a where a.relationCount > 31)-[e2:has]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出一个拥有大学和大学部门、教师和课程的拥有/教关系图。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher)-[e3:teach]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部和名为杜国强的person有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:person where n.name=杜国强)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前43个满足条件名字不等于王若涵或性别不等于famale的用户",
        "output": "match(a:user where a.name <> '王若涵' or a.gender <> 'famale') return a limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和电影院人人影城有1到3度关系的电影院",
        "output": "match(a:cinema where a.name='人人影城')-[e]->{1,3}(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回114个和label为user的点有user_publish_post关系的post,以及和这些post有post_has_tag关系的tag;2: 查询和forum中国军事论坛之间有forum_contain_post关系的post;3: 找出id为175的帖子有关的论坛的伙伴, 再找出和论坛有关系的伙伴;4: 返回和post Post_280有关的forum,称为X,再返回和这个X有关联的其他user,以及和X有关联的post;5: 给出名为知乎的点包含的person;6: 查找从论坛百度贴吧出发,经过标签为forum_contain_post的边,走1到3度到达的帖子点;",
        "output": "查询语句为:1: match(a:user)-[e:user_publish_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c limit 114;2: match(a:forum where a.name='中国军事论坛')-[e:forum_contain_post]->(b:post) return b;3: match(a:post where id = '175')-[e]-(b:forum)-[e2:partner]->(c), (b:forum)-[e3:partner]->(d) return a, b, c, d;4: match(a:post where a.name = 'Post_280')-[e]-(b:forum), (b:forum)-[e2]-(c:user),(b:forum)-[e3]-(d:post) return a, b, c, d;5: match(a where a.name='知乎')-[e:forum_contain_person]->(b:person) return b;6: match(a:forum where a.name='百度贴吧')-[e:forum_contain_post]->{1,3}(b:post) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 计算所有城市的面积乘面积的平均值;2: 请帮我查找城市纽约的标签为相关者的边,并根据权重降序排列,返回80个;3: 返回id小于等于82或name不等于中国科技大学的university cooperate的company的名称,以及这些company cooperate的university的名称;4: 给出源点类型为国家,边类型为country_contain_city的边,返回这些边的权重加137.24的值,和f0减992对52取余的值;5: 给出188个大学武汉大学和重庆大学,共同的朋友;6: 帮我查询名为微软和字节的,标签为公司的点公共的伙伴节点的名单;",
        "output": "查询语句为:1: match(a:city) return AVG(a.area * a.area);2: match(a:city where a.name = '纽约')-[e:relation]->(b) return b order by e.weight desc limit 80;3: match(a:university where a.id <= 82 or a.name <> '中国科技大学')-[e:university_cooperate_company]->(b:company)-[e2:company_cooperate_university]->(c:university) return b.name as b_name, c.name as c_name;4: match(a:country)-[e:country_contain_city]->(b) return e.weight + 137.24, e.f0 - 992 % 52;5: match(a:university where a.name='武汉大学')-[e:friend]->(b)<-[e2:friend]-(c:university where c.name='重庆大学') return b limit 188;6: match(a:company where a.name='微软')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='字节') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我找出部门艺术学院 拥有的教师,返回教师 教的课程的课时减32的值 ;2: 查询部门的1度以内的环;3: 帮我查询名为复旦大学的点has的所有department,并对这些点的id进行求和;4: 请帮我找出满足条件name不是数学学院且size大于87且name不等于经管学院的节点;5: 请帮我查找university中国科技大学 has的department,返回department has的student的age的最大值乘10的最大值 ;6: 返回源点value在271到838之间且level大于等于70,边类型为university_has_department,且targetId不为空或f1是true的边,返回这些边的srcId的平均值除129的个数;",
        "output": "查询语句为:1: match(a:department where name = '艺术学院')-[e:department_has_teacher]->(b:teacher)-[e2:teacher_teach_course]->(c:course) return c.courseHour - 32;2: match(a:department)->{0,0}(b)->(a) return a.id, b.id as b_id;3: match(a where a.name='复旦大学')-[e:university_has_department]->(b:department) return SUM(b.id);4: match(a where a.name <> '数学学院' and a.size > 87 and a.name <> '经管学院') return a;5: match(a:university where name = '中国科技大学')-[e:university_has_department]->(b:department)-[e2:department_has_student]->(c:student) return MAX(MAX(c.age) * 10);6: match(a where (a.value BETWEEN 271 AND 838) and a.level >= 70)-[e:university_has_department where (e.targetId is not null) or e.f1 = true]->(b) return COUNT(AVG(e.srcId) / 129);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点年龄大于47,id等于82,id的数量对28取余大于等于159,目标点学分为空,且标签等于选择的边",
        "output": "match(a where a.age > 47 and a.id = 82 and COUNT(a.id) % 28 >= 159)-[e:selects]->(b where (b.credit is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 返回author的1度的环;2: 请帮我查找源点名字等于郑建国,边标签等于publisher_publish_book,且f0大于717的边,返回这些边的目标点id加目标点id的值;3: 找出类型为publisher的所有点,并根据name升序排列;4: 找出全部名为孙强的,价格等于14的朋友,返回这些朋友的价格,和边的f0,源点id,权重;5: 找出前115个name不是三体的book;",
        "output": "查询语句为:1: match(a:author)->{0,0}(b)->(a) return a.id, b.id as b_id;2: match(a where a.name = '郑建国')-[e:publisher_publish_book where e.f0 > 717]->(b) return e.targetId + e.targetId;3: match(a:publisher) return a order by a.name asc;4: match(a where a.name='孙强')-[e:friend]->(b where b.price = 14) return b.price,e.f0, e.srcId, e.weight;5: match(a:book where a.name <> '三体') return a limit 115;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Sam的,名字不是放射科,权重大于201的相关者,返回这些相关者的地址,和边的权重,目标点id",
        "output": "match(a where a.name='Sam')-[e:relation]->(b where b.name <> '放射科' and b.weight > 201) return b.address,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表922, 源点的id等于输入表id,请帮我找出以属于关系关联了部门内科的医生",
        "output": "with p as (select * from (VALUES(922)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '内科')) <-[e:doctor_belong_department ]-(b:doctor) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于company,名为蚂蚁集团的点,返回这些点的id,value,peopleNumber",
        "output": "match(a:company where a.name = '蚂蚁集团') return a.id, a.value, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回24个价值为空且价值为空,或创建时间为2024年01月09日的论坛,根据id从小到大排列",
        "output": "match(a:forum where ((a.value is null) and (a.value is null)) or a.createTime = '2024-01-09') return a order by a.id asc limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为郑建聪和孙轩的点共同喜欢的,标签为person的节点",
        "output": "match(a where a.name = '郑建聪')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '孙轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person提交的软件, 令软件的id的值等于购买软件的person的id的求和值, 再查找软件使用的软件",
        "output": "match(a:person)-[e:commits]->(b:software) let b.id = SUM((b:software)<-[e2:buy]-(c:person) => c.id) match(b:software)-[e3:uses]->(d:software) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有纽约的点contain的company,然后查找纽约被belong的university,一起返回",
        "output": "match(a where a.name = '纽约')-[e:contain]->(b:company),(a where a.name = '纽约')<-[e2:belong]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于商品的点,返回193个",
        "output": "match(a:goods) return a limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有一个叫马宏和马思思的人，他们之间是否有共同的友人？",
        "output": "match(a:user where a.name='马宏')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='马思思') return b limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出reader赵建国的friend,的f0加621的值",
        "output": "match(a:reader where a.name= '赵建国')-[e:friend]->(b) return e.f0 + 621",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与account Faker有transfer关系的1跳以内的环",
        "output": "match(a:account where name = 'Faker')-[e:transfer]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字为吴若涵的用户",
        "output": "match(a:user where a.name = '吴若涵') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是person,名为何红的点,返回这些点的id,age",
        "output": "match(a:person where a.name = '何红') return a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为180的software关联的software,和以buy关系关联了这些software的其他person",
        "output": "match(a:software where a.id = 180)-[e]-(b:software)<-[e2:buy]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 请帮我查找和user孙月有user_publish_post关系的post,再请帮我查找以user_publish_post关系关联了孙月的post;2: 返回与帖子Post_193和Post_352都存在post_has_tag关系的点;3: 给出标签为post的点;4: 给出从帖子Post_125出发,经过标签等于post_has_tag的边,走3到5度到达的标签点;5: 找出id为72的forum有关的post的friend, 再找出和post有关系的partner;6: 返回所有与标签喜剧有关系的论坛的人数;7: 帮我查询和用户有关联的帖子节点,并根据其价值分组,返回价值,以及id加65的值;8: 返回salary小于9295的节点;",
        "output": "查询语句为:1: match(a:user where a.name = '孙月')-[e:user_publish_post]->(b:post),(a:user where a.name = '孙月')<-[e2:user_publish_post]-(c:post)return a, b, c;2: match(a:post where a.name='Post_193')-[e:post_has_tag]->(b)<-[e2:post_has_tag]-(c:post where c.name='Post_352') return b;3: match(a:post) return a;4: match(a:post where a.name='Post_125')-[e:post_has_tag]->{3,5}(b:tag) return b;5: match(a:forum where id = '72')-[e]-(b:post)-[e2:friend]->(c), (b:post)-[e3:partner]->(d) return a, b, c, d;6: match(a:tag where a.name='喜剧')-[e]-(b:forum) return b.peopleNumber;7: match(a:user)-[e:user_publish_post]-(b:post) return b.value, b.id + 65 group by b.value;8: match(a where a.salary < 9295) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "寻找与复旦大学朋友的伙伴相关的人。",
        "output": "match(a:university where a.name='复旦大学')-[e:friend]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "权重减719的值",
        "output": "a.weight - 719",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为person的所有点,并根据性别降序排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出label为person_buy_software,并且满足条件srcId不为空或targetId不是192的边",
        "output": "match(a)-[e:person_buy_software where (e.srcId is not null) or e.targetId <> 192]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前31个标签等于拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与王月认识的作家。",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='王月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出patient的friend,或其friend的friend",
        "output": "match(a:patient)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "大小对80取余的和",
        "output": "SUM(a.size % 80)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,age,id, 数据为('male',88,15),('famale',36,24)的子查询作为输入表, 源点的age等于输入表age,找出作家陈思思撰写的书,被其他编辑发布的数量",
        "output": "with p as (select * from (VALUES('male',88,15),('famale',36,24)) as t(gender,age,id))MATCH (a:author WHERE a.age = p.age AND (a.name = '陈思思')) -[e:author_write_book ]->(b:book) <-[e2:publisher_publish_book ]-(c:publisher) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与名字不是'郑月'的所有person节点，并返回这些节点中id对52取余的最大值，以及salary的最小值减去薪资乘162的最小值。",
        "output": "match(a:person)-[e]->(b:person where b.name <> '郑月') return MAX(b.id % 52), MIN((MIN(b.salary) - b.salary) * 162)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名为Geaflow123的账户",
        "output": "match(a:account where a.name = 'Geaflow123') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减65的最小值",
        "output": "MIN(a.id - 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id对18取余除id的值",
        "output": "return a.id % 18 / a.id group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与名为徐宏的人有同事关系或同事同事关系的所有人。",
        "output": "match(a:person where n.name=徐宏)-[e:colleague]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点薪资大于等于6682且性别等于famale且性别不等于famale,边类型为认识,且f1小于109的边,返回这些边的f0对785取余的最大值",
        "output": "match(a where a.salary >= 6682 and a.gender = 'famale' and a.gender <> 'famale')-[e:knows where e.f1 < 109]->(b) return MAX(e.f0 % 785)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,salary,id, 数据为(45,6621,86)的子查询作为输入表, 源点的age等于输入表age,返回所有源点类型是doctor,边类型是doctor_diagnose_patient的边,返回这些边的f0加f0的值,和srcId的最大值对114取余的最小值",
        "output": "with p as (select * from (VALUES(45,6621,86)) as t(age,salary,id))MATCH (a:doctor WHERE a.age = p.age) -[e:doctor_diagnose_patient ]->(b) RETURN e.f0 + e.f0, MIN(MAX(e.srcId) % 114) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id乘96的值",
        "output": "return a.id * 96 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和company腾讯有关的university,称为X,再请帮我查找和这个X有关联的其他university,以及和X有关联的country",
        "output": "match(a:company where a.name = '腾讯')-[e]-(b:university), (b:university)-[e2]-(c:university),(b:university)-[e3]-(d:country) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询前132个星数对222取余不等于2的软件;2: 给出和company华为有关的person,再给出和华为company_creates_software的其他software,返回它们;3: 请帮我找出与person郑强和徐轩都存在person_commits_software关系的点;",
        "output": "查询语句为:1: match(a:software where a.stars % 222 <> 2) return a limit 132;2: match(a:company where a.name = '华为')-[e]-(b:person), (a:company)-[e2:company_creates_software]->(c:software) return a, b, c;3: match(a:person where a.name='郑强')-[e:person_commits_software]->(b)<-[e2:person_commits_software]-(c:person where c.name='徐轩') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点label为person,目标点label为软件,label为软件的边",
        "output": "match(a:person)-[e:software]->(b:software) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我查找book少年闰土的所有标签为refers的边,并根据srcId从大到小排列,返回95个;2: 请帮我找出全部和书点有认识关系的书节点,且边满足条件源点id的数量大于等于157.45,目标书节点满足条件价格不等于18;3: 查询被publisher何国强publish的book;4: 查询147个id的求和值不等于183的编辑,根据名字从大到小排列;5: 找出179个gender等于181的author,根据name从小到大排列;6: 给出81个读者周强和陈思思,共同的朋友;",
        "output": "查询语句为:1: match(a:book where a.name = '少年闰土')-[e:book_refers_book]->(b) return b order by e.srcId desc limit 95;2: match(a:book)-[e:knows where COUNT(e.srcId) >= 157.45]->(b:book where b.price <> 18) return b;3: match(a:book)<-[e:publisher_publish_book]-(b:publisher where b.name='何国强') return a, b;4: match(a:publisher where SUM(a.id) <> 183) return a order by a.name desc limit 147;5: match(a:author where a.gender = 181) return a order by a.name asc limit 179;6: match(a:reader where a.name='周强')-[e:friend]->(b)<-[e2:friend]-(c:reader where c.name='陈思思') return b limit 81;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 给出学生陈红的全部标签等于伙伴的边,并根据权重降序排列,返回126个;2: 请帮我找出全部department以size,name,id分组的id, 根据id升序排序;3: 给出118个department数学学院和文学院,共同的friend;4: 返回129个id不等于6,credit在3到4之间且courseHour小于49的course,根据name从小到大排列;5: 查询名为法学院的department;",
        "output": "查询语句为:1: match(a:student where a.name = '陈红')-[e:partner]->(b) return b order by e.weight desc limit 126;2: match(a:department) return a.id group by a.size, a.name, a.id order by a.id asc;3: match(a:department where a.name='数学学院')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='文学院') return b limit 118;4: match(a:course where a.id <> 6 and (a.credit BETWEEN 3 AND 4) and a.courseHour < 49) return a order by a.name asc limit 129;5: match(a:department where a.name = '法学院') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('何思琪',5,153)作为请求表数据,属性分别为name,age,height, 以属性age作为相等条件,给出前1个满足条件scale是large且value为空,id等于76的company",
        "output": "with p as (select * from (VALUES('何思琪',5,153)) as t(name,age,height))MATCH (a:company WHERE a.age = p.age AND (a.scale = 'large' AND a.value IS NULL AND a.id = 76)) RETURN a LIMIT 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出从company谷歌出发,经过类型为company_creates_software的边,走1到4度到达的software点",
        "output": "match(a:company where a.name='谷歌')-[e:company_creates_software]->{1,4}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为罪与罚和百年孤独的,标签等于book的点公共的refers节点的名单",
        "output": "match(a:book where a.name='罪与罚')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='百年孤独') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与person有关系的person节点,且person节点的名字不等于Bob,并返回这些person的薪资加薪资的个数,以及person的年龄减9的最大值",
        "output": "match(a:person)-[e]->(b:person where b.name <> 'Bob') return COUNT(b.salary + b.salary), MAX(b.age - 9)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 计算所有大学的等级加1的平均值;2: 找出类型是国家的点,返回164个;3: 给出93个人数不是64861的国家,根据价值从小到大排列;4: 返回id为125的公司有关的城市的伙伴, 再返回和城市有关系的朋友;",
        "output": "查询语句为:1: match(a:university) return AVG(a.level + 1);2: match(a:country) return a limit 164;3: match(a:country where a.peopleNumber <> 64861) return a order by a.value asc limit 93;4: match(a:company where id = '125')-[e]-(b:city)-[e2:partner]->(c), (b:city)-[e3:friend]->(d) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以399,916作为请求点id, 源点的id等于输入表id,返回77个user何思思和周梅,共同的relation",
        "output": "with p as (select * from (VALUES(399),(916)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '何思思')) -[e:relation ]->(b) <-[e2:relation ]-(c:user WHERE c.name = '周梅') RETURN b LIMIT 77",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部源点满足条件gender不等于famale,gender为famale,目标点满足条件id在15到61之间或name不是Post_335,且label为user_likes_post的边",
        "output": "match(a where a.gender <> 'famale' and a.gender = 'famale')-[e:user_likes_post]->(b where (b.id BETWEEN 15 AND 61) or b.name <> 'Post_335') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person李轩belong的company",
        "output": "match(a:company)<-[e:belong]-(b:person where b.name='李轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与吴月和赵科都有关联的爱人节点。",
        "output": "match(a:person where a.name='吴月')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与买家有关系的商品节点，价值小于374的，然后计算这些节点的价值加上112的和，以及所有卖家数量乘销量之和的平均值。",
        "output": "match(a:buyer)-[e]->(b:goods where b.value < 374) return b.value + 112, AVG(SUM(b.sellerNumber) * b.sellerNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回id为92的教师有关的部门的伙伴, 再返回和部门有关系的朋友;2: 请帮我找出从大学华中科技大学出发,经过类型是university_has_department的边,走2跳到达的部门点;3: 请帮我查找89个student张建国和赵建聪,共同的friend;4: 找出和university清华大学有university_has_department关系的department,再找出以university_has_department关系关联了清华大学的department;5: 返回和教师郑宏有teacher_teach_course关系的课程,以及和大学北京大学有university_has_department关系的部门,将它们都返回;6: 查询75个身高不等于187或薪资为空,且id不是57的教师,根据年龄升序排列;7: 请帮我找出student的partner,或其partner的partner;8: 给出department计算机学院has的student,被其他department has的数量;9: 返回学生的三角的环,边标签为student_selects_course, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:teacher where id = '92')-[e]-(b:department)-[e2:partner]->(c), (b:department)-[e3:friend]->(d) return a, b, c, d;2: match(a:university where a.name='华中科技大学')-[e:university_has_department]->{2,2}(b:department) return b;3: match(a:student where a.name='张建国')-[e:friend]->(b)<-[e2:friend]-(c:student where c.name='赵建聪') return b limit 89;4: match(a:university where a.name = '清华大学')-[e:university_has_department]->(b:department),(a:university where a.name = '清华大学')<-[e2:university_has_department]-(c:department)return a, b, c;5: match(a:teacher where a.name = '郑宏')-[e:teacher_teach_course]->(b:course),(c:university where c.name = '北京大学')-[e2:university_has_department]->(d:department)return a, b, c, d;6: match(a:teacher where (a.height <> 187 or (a.salary is null)) and a.id <> 57) return a order by a.age asc limit 75;7: match(a:student)-[e:partner]->{1,2}(b) return b;8: match(a:department where a.name='计算机学院')-[e:department_has_student]->(b:student)<-[e2:department_has_student]-(c:department) return COUNT(c);9: match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "大小减440的值",
        "output": "a.size - 440",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我查找所有源点满足条件名字不等于字节,目标点满足条件语言不等于go或价值不为空或开源等于true,且类型是company_creates_software的边;2: 查询前158个满足条件人数为空且价值小于67的公司;3: 请帮我找出所有id为7的software关联的software,和以creates关系关联了这些software的其他company;4: 查找和名为陈梅的person有partner关系,或有partner的partner关系的company;5: 找出和person马宏有1到3度关系的公司;",
        "output": "查询语句为:1: match(a where a.name <> '字节')-[e:company_creates_software]->(b where b.lang <> 'go' or (b.value is not null) or b.openSource = true) return e;2: match(a:company where (a.peopleNumber is null) and a.value < 67) return a limit 158;3: match(a:software where a.id = '7')-[e]-(b:software)<-[e2:company_creates_software]-(c:company) return b,c;4: match(a:person where n.name=陈梅)-[e:partner]->{1,2}(b:company) return b;5: match(a:person where a.name='马宏')-[e]->{1,3}(b:company) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以540,841,965,368,771作为请求点id, 以属性id作为相等条件,返回id为46的person有关的person的colleague, 再返回和person有关系的parent",
        "output": "with p as (select * from (VALUES(540),(841),(965),(368),(771)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (id = '46')) -[e ]-(b:person) -[e2:person_colleague_person ]->(c) , (b:person) -[e3:person_parent_person ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被用户张雪喜欢的仓库",
        "output": "match(a:repository)<-[e:likes]-(b:user where b.name='张雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person周思琪认识的person,和周思琪认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '周思琪')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 查询和buyer郑伟有buyer_cancel_orders关系的orders,以及和buyer马科有buyer_look_goods关系的goods,将它们都返回;2: 给出所有和商品短袖有3跳关系的卖家;3: 请帮我找出101个orders Order_346和Order_449,共同的friend;4: 给出和订单Order_494有关的订单,称为X,再给出和这个X有关联的其他商品,以及和X有关联的卖家;5: 计算所有商品的价值除481的值;",
        "output": "查询语句为:1: match(a:buyer where a.name = '郑伟')-[e:buyer_cancel_orders]->(b:orders),(c:buyer where c.name = '马科')-[e2:buyer_look_goods]->(d:goods)return a, b, c, d;2: match(a:goods where a.name='短袖')-[e]->{3,3}(b:seller) return b;3: match(a:orders where a.name='Order_346')-[e:friend]->(b)<-[e2:friend]-(c:orders where c.name='Order_449') return b limit 101;4: match(a:orders where a.name = 'Order_494')-[e]-(b:orders), (b:orders)-[e2]-(c:goods),(b:orders)-[e3]-(d:seller) return a, b, c, d;5: match(a:goods) return a.value / 481;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出和标签历史有关的电影院,称为X,再给出和这个X有关联的其他person,以及和X有关联的评论;2: 查找全部源点label为电影,边label为film_has_tag的边,返回这些边的源点id加12的求和值,和权重除137.71的最小值;3: 请帮我查找全部评论以字数,id,名字分组的字数, 根据字数从大到小排序;4: 找出150个名为孙宏的点喜欢的label为评论的节点,且节点字数在162到570之间;5: 给出从person郑强出发,经过类型为person_creates_comment的边,走3度或4度到达的评论点;",
        "output": "查询语句为:1: match(a:tag where a.name = '历史')-[e]-(b:cinema), (b:cinema)-[e2]-(c:person),(b:cinema)-[e3]-(d:comment) return a, b, c, d;2: match(a:film)-[e:film_has_tag]->(b) return SUM(e.srcId + 12), MIN(e.weight / 137.71);3: match(a:comment) return a.wordCount group by a.wordCount, a.id, a.name order by a.wordCount desc;4: match(a where a.name='孙宏')-[e:person_likes_comment]->(b:comment where (b.wordCount BETWEEN 162 AND 570)) return b limit 150;5: match(a:person where a.name='郑强')-[e:person_creates_comment]->{3,4}(b:comment) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为111的公司有关的公司的伙伴, 再返回和公司有关系的朋友",
        "output": "match(a:company where id = 111)-[e]-(b:company)-[e2:partner]->(c), (b:company)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找192个prescription Prescription_151和Prescription_117,共同的partner",
        "output": "match(a:prescription where a.name='Prescription_151')-[e:partner]->(b)<-[e2:partner]-(c:prescription where c.name='Prescription_117') return b limit 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前151个类型是申请的边",
        "output": "match(a)-[e:apply]->(b) return e limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从person到person，且标签为喜欢的边",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以419,481作为请求点id, 以属性id作为相等条件,请帮我找出和buyer有关联的orders节点,并根据其price,id分组,返回price,id,以及value的最小值对8取余的和",
        "output": "with p as (select * from (VALUES(419),(481)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_cancel_orders ]-(b:orders) RETURN b.price, b.id, SUM(MIN(b.value) % 8) GROUP BY b.price, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除96的最大值",
        "output": "MAX(a.age / 96)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 查找和账号有关联的账号节点,并根据其id,名字分组,返回id,名字,以及价值减121的最小值;2: 查找和贷款defaultName有loan_deposit_account关系的账号,以及和person吴国强有person_invest_company关系的公司,将它们都返回;3: 查找person李思思的朋友,的权重除124.45的平均值;",
        "output": "查询语句为:1: match(a:account)-[e:account_transfer_account]-(b:account) return b.id, b.name, MIN(b.value - 121) group by b.id, b.name;2: match(a:loan where a.name = 'defaultName')-[e:loan_deposit_account]->(b:account),(c:person where c.name = '吴国强')-[e2:person_invest_company]->(d:company)return a, b, c, d;3: match(a:person where a.name= '李思思')-[e:friend]->(b) return AVG(e.weight / 124.45);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点为人、目标点也为人的认识关系",
        "output": "match(a:person)-[e:knows]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按薪水降序排列，找出满足以下条件的人：薪水不为空，且薪水在6155到7055之间，或者薪水为6388。这些人一共有125个。",
        "output": "match(a:person where ((a.salary is not null) and (a.salary BETWEEN 6155 AND 7055)) or a.salary = 6388) return a order by a.salary desc limit 125",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回属于国家法国包含的城市,的公司",
        "output": "match(a:country where name = '法国')-[e:contain]->(b:city)<-[e2:belong]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找大学属于的城市, 令城市的名字的值等于属于城市的大学的等级的最小值, 再查找城市属于的国家",
        "output": "match(a:university)-[e:belong]->(b:city) let b.name = MIN((b:city)<-[e2:belong]-(c:university) => c.level) match(b:city)-[e3:belong]->(d:country) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以pay关系关联了person徐梅的person",
        "output": "match(a:person where a.name='徐梅')<-[e:pay]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为徐强和王轩的,类型为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='徐强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='王轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减0的值",
        "output": "a.id - 0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部prescription的partner,或其partner的partner",
        "output": "match(a:prescription)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 帮我查询城市包含的公司,返回其源点的id除52的值,以及目标点的value的最小值除151的值;2: 查找179个与腾讯和微软都存在关系的country节点;3: 请帮我找出名为杭州的city;4: 请帮我找出所有和university重庆大学有2到4跳关系的university;5: 请帮我找出以包含关系关联了城市广州的国家;",
        "output": "查询语句为:1: match(a:city)-[e:city_contain_company]->(b:company) return a.id / 52, MIN(b.value) / 151;2: match(a where a.name='腾讯')-[e]->(b:country)<-[e2]-(c where c.name='微软') return b limit 179;3: match(a:city where a.name = '杭州') return a;4: match(a:university where a.name='重庆大学')-[e]->{2,4}(b:university) return b;5: match(a:city where a.name='广州')<-[e:country_contain_city]-(b:country) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出名为陈强的person,以及与其有关的person,并返回陈强的age和这些person的id;2: 请帮我查找与person马轩有person_likes_person关系的2度的环;3: 查询和person周雪有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的person;",
        "output": "查询语句为:1: match(a:person where name = '陈强')-[e]-(b:person) return a.age, b.id;2: match(a:person where name = '马轩')-[e:person_likes_person]->{1,1}(b)->(a) return a.id, b.id as b_id;3: match(a:person where a.name = '周雪')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表666, 以属性id作为相等条件,找出36个与郑雪和韩轩都存在关系的buyer节点",
        "output": "with p as (select * from (VALUES(666)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '郑雪')) -[e ]->(b:buyer) <-[e2 ]-(c WHERE c.name = '韩轩') RETURN b LIMIT 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(false,47,2016-05-10),(false,29,2018-01-02)作为请求表数据,属性分别为isBlock,id,lastLoginTime, 以属性lastLoginTime作为相等条件,返回所有id为15的person关联的account,和以deposit关系关联了这些account的其他loan",
        "output": "with p as (select * from (VALUES(false,47,2016-05-10),(false,29,2018-01-02)) as t(isBlock,id,lastLoginTime))MATCH (a:person WHERE a.lastLoginTime = p.lastLoginTime AND (a.id = '15')) -[e ]-(b:account) <-[e2:loan_deposit_account ]-(c:loan) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,name,salary, 数据为('famale','王伟',3739),('male','赵轩',1554), 源点的gender等于输入表gender,返回和电影院人人影城有cinema_releases_film关系的电影,以及和person韩建聪有person_creates_comment关系的评论,将它们都返回",
        "output": "with p as (select * from (VALUES('famale','王伟',3739),('male','赵轩',1554)) as t(gender,name,salary))MATCH (a:cinema WHERE a.gender = p.gender AND (a.name = '人人影城')) -[e:cinema_releases_film ]->(b:film) , (c:person WHERE c.name = '韩建聪') -[e2:person_creates_comment ]->(d:comment) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出哔哩哔哩公司。",
        "output": "match(a:company where a.name = 'Bilibili') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,创建时间,权重分组,计算id加95乘866的值",
        "output": "return (a.id + 95) * 866 group by a.id, a.createTime, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名字是滴滴或人数在654到892之间的节点",
        "output": "match(a where a.name = '滴滴' or (a.peopleNumber BETWEEN 654 AND 892)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询48个名为赵雪的点发布的标签为书的节点,且节点名字不是计算机网络且类别是小说",
        "output": "match(a where a.name='赵雪')-[e:publish]->(b:book where b.name <> '计算机网络' and b.category = '小说') return b limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person马轩支付的person,和马轩喜欢的person",
        "output": "match(a:person)<-[e:pay]-(b:person where name = '马轩')-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有类型为仓库的点",
        "output": "match(a:repository) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有源点满足条件性别等于male且年龄不为空,或性别大于等于43,目标点满足条件名字不是李思琪或身高不是99,且label为buyer_consult_seller的边",
        "output": "match(a where (a.gender = 'male' and (a.age is not null)) or a.gender >= 43)-[e:buyer_consult_seller]->(b where b.name <> '李思琪' or b.height <> 99) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询33个名为周思琪的点likes的label为post的节点,且其createTime等于2015年06月18日且lang不是French;2: 查找标签为标签,名为科幻的点,返回这些点的id,名字;3: 查询和名为Post_172的帖子有伙伴关系,或有伙伴的伙伴关系的标签;4: 请帮我找出所有forum以value分组的peopleNumber, 根据peopleNumber从大到小排序;5: 帮我查询17个名为中国诗词论坛的点包含的标签为person的节点,且节点年龄大于等于27且薪资为空;",
        "output": "查询语句为:1: match(a where a.name='周思琪')-[e:user_likes_post]->(b:post where b.createTime = '2015-06-18' and b.lang <> 'French') return b limit 33;2: match(a:tag where a.name = '科幻') return a.id, a.name;3: match(a:post where n.name=Post_172)-[e:partner]->{1,2}(b:tag) return b;4: match(a:forum) return a.peopleNumber group by a.value order by a.peopleNumber desc;5: match(a where a.name='中国诗词论坛')-[e:forum_contain_person]->(b:person where b.age >= 27 and (b.salary is null)) return b limit 17;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person黄建国之间有喜欢关系的person",
        "output": "match(a:person where a.name='黄建国')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与user相关的post，以及这些post所包含的所有其他forum。",
        "output": "match(a:user where a.id = '141')-[e]-(b:post)<-[e2:contain]-(c:forum) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出全部id为30的person关联的person,和以关联关系关联了这些person的其他person;2: 请帮我查找源点name等于黄建聪或salary加6689乘49乘id加age大于168或salary大于2101,目标点id不为空,且类型是person_parent_person的边;3: 帮我查询person的friend,或其friend的friend;4: 请帮我找出和person点有关联关系的person节点,且边满足条件权重不是124,目标person节点满足条件身高小于185;5: 找出person周轩的全部标签等于同事的边,并根据权重从大到小排列,返回24个;6: 请帮我查找和person Jack有关系的person节点,返回这些点的salary,name;7: 查询label为person,名为马轩的点,返回这些点的身高;8: 给出前182个标签为person_family_person的边;",
        "output": "查询语句为:1: match(a:person where a.id = '30')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;2: match(a where a.name = '黄建聪' or (a.salary + 6689) * 49 * a.id + a.age > 168 or a.salary > 2101)-[e:person_parent_person]->(b where (b.id is not null)) return e;3: match(a:person)-[e:person_friend_person]->{1,2}(b) return b;4: match(a:person)-[e:relates where e.weight <> 124]->(b:person where b.height < 185) return b;5: match(a:person where a.name = '周轩')-[e:person_colleague_person]->(b) return b order by e.weight desc limit 24;6: match(a:person where a.name='Jack')-[e]-(b:person) return b.salary, b.name;7: match(a:person where a.name = '马轩') return a.height;8: match(a)-[e:person_family_person]->(b) return e limit 182;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以779,228,520,324作为请求点id, 以属性id作为相等条件,帮我查询book以id,category分组的name, 根据name从大到小排序",
        "output": "with p as (select * from (VALUES(779),(228),(520),(324)) as t(id)) MATCH (a:book WHERE a.id = p.id) RETURN a.name GROUP BY a.id, a.category ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与订单Order_374有关系的卖家, 返回和这些卖家有关联的卖家的,age的数量乘70除47减31的平均值",
        "output": "match(a:orders where a.name= 'Order_374')-[e]-(b:seller)-[e2]-(c:seller) return AVG(COUNT(c.age) * 70 / 47 - 31)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型为仓库,边类型为拥有,且满足条件源点id在145到168之间,目标点id小于103,目标点id大于等于187的边",
        "output": "match(a:repository)-[e:has where (e.srcId BETWEEN 145 AND 168) and e.targetId < 103 and e.targetId >= 187]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签等于person,目标点标签等于person,标签等于软件的边",
        "output": "match(a:person)-[e:software]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询作家郑强撰写的书, 令作家的类别等于书的id的和加id,令书的年龄等于作家的id, 返回作家的身高, 书的id",
        "output": "match(a:author where a.name='郑强')-[e:write]->(b:book) let a.category = SUM(b.id) + b.id,let b.age = a.id return a.height,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为吴宏的点relates的person",
        "output": "match(a where a.name='吴宏')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,name,age, 数据为(2488,'徐建聪',56)的子查询作为输入表, 源点的name等于输入表name,帮我查询109个名为徐雪的点selects的类型是course的节点,且节点courseHour为空",
        "output": "with p as (select * from (VALUES(2488,'徐建聪',56)) as t(salary,name,age))MATCH (a WHERE a.name = p.name AND (a.name = '徐雪')) -[e:student_selects_course ]->(b:course WHERE b.courseHour IS NULL) RETURN b LIMIT 109",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为20的点的字数,id",
        "output": "match(a where a.id = 20) return a.wordCount, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为四川大学的点拥有的部门",
        "output": "match(a where a.name='四川大学')-[e:has]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为ISSUE-435的点的,语言为c且权重小于等于542的相关者,返回这些相关者的权重,和边的目标点id,源点id",
        "output": "match(a where a.name='ISSUE-435')-[e:relation]->(b where b.lang = 'c' and b.weight <= 542) return b.weight,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与王科（buyer)存在取消关系，且与椅子（goods)存在包含关系的订单（orders)节点，返回这些订单的price、name、以及王科的姓名和王科购买的椅子的值。",
        "output": "match(a:buyer where a.name='王科')-[e:cancel]->(b:orders)<-[e2:contain]-(c:goods where c.name='椅子') return a.name,b.price, b.name,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有id为4的user关联的post,和以likes关系关联了这些post的其他user",
        "output": "match(a:user where a.id = '4')-[e]-(b:post)<-[e2:user_likes_post]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(51,31045,292),(53,24036,977)作为请求表数据,属性分别为id,area,value, 以属性value作为相等条件,返回177个和标签等于company的点有company_belong_city关系的city,并且和这些city有city_contain_company关系的company",
        "output": "with p as (select * from (VALUES(51,31045,292),(53,24036,977)) as t(id,area,value))MATCH (a:company WHERE a.value = p.value) -[e:company_belong_city ]->(b:city) -[e2:city_contain_company ]->(c:company) RETURN c LIMIT 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以43, 51作为输入,返回运算结果",
        "output": "Call PERSONALRANK(43, 51) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有标签为'账号'的点，然后按照创建时间排序。",
        "output": "match(a:account) return a order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和部门数学学院有关系的教师或学生,返回这些点的学分,名字",
        "output": "match(a:department where a.name='数学学院')-[e]-(b:teacher | student) return b.credit, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与作家黄国强存在认识关系,且与书三体存在撰写关系的作家节点，返回这些作家的年龄,身高,名字,及作家黄国强的薪资,及书三体的类别",
        "output": "match(a:author where a.name='黄国强')-[e:knows]->(b:author)<-[e2:write]-(c:book where c.name='三体') return a.salary,b.age, b.height, b.name,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出135个名为何梅的点认识的label为person的节点,且节点id不是4且id不是50",
        "output": "match(a where a.name='何梅')-[e:knows]->(b:person where b.id <> 4 and b.id <> 50) return b limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出类型为country,名为澳大利亚的点,返回这些点的peopleNumber,name;2: 请帮我查找和标签为company的点有company_cooperate_university关系的university,以及和这些university有university_belong_city关系的city,以及和这些city有city_belong_country关系的country;3: 给出全部和公司字节有关系的大学节点,返回这些点的id;",
        "output": "查询语句为:1: match(a:country where a.name = '澳大利亚') return a.peopleNumber, a.name;2: match(a:company)-[e:company_cooperate_university]->(b:university)-[e2:university_belong_city]->(c:city)-[e3:city_belong_country]->(d:country) return d;3: match(a:company where a.name='字节')-[e]-(b:university) return b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以524作为请求点id, 以属性id作为相等条件,请帮我找出person韩轩likes的person,被其他person knows的数量",
        "output": "with p as (select * from (VALUES(524)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩轩')) -[e:person_likes_person ]->(b:person) <-[e2:person_knows_person ]-(c:person) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和医生杜国强有创造关系的处方,再查询以属于关系关联了杜国强的部门",
        "output": "match(a:doctor where a.name = '杜国强')-[e:creates]->(b:prescription),(a:doctor where a.name = '杜国强')<-[e2:belong]-(c:department)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为wordCount,id,category, 数据为(139,85,'科普'),(642,47,'儿童文学')的子查询作为输入表, 源点的wordCount等于输入表wordCount,请帮我找出与reader何思琪有关系的book的name",
        "output": "with p as (select * from (VALUES(139,85,'科普'),(642,47,'儿童文学')) as t(wordCount,id,category))MATCH (a:reader WHERE a.wordCount = p.wordCount AND (a.name = '何思琪')) -[e ]-(b:book) RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和person点有属于关系的公司节点,且边满足条件权重是198.17,目标公司节点id小于等于25",
        "output": "match(a:person)-[e:belong where e.weight = 198.17]->(b:company where b.id <= 25) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与英国有关联的城市",
        "output": "match(a:country where a.name='英国')<-[e:belong]-(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供所有包含在巴黎的公司，以及所有包含在俄罗斯的城市，并返回它们。",
        "output": "match(a:city where a.name = '巴黎')-[e:contain]->(b:company),(c:country where c.name = '俄罗斯')-[e2:contain]->(d:city) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出论坛推特包含的帖子,以及发布这些帖子的用户",
        "output": "match(a:forum where name = '推特')-[e:contain]->(b:post)<-[e2:publish]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和forum知乎有关的tag,称为X,再返回和这个X有关联的其他post,以及和X有关联的tag",
        "output": "match(a:forum where a.name = '知乎')-[e]-(b:tag), (b:tag)-[e2]-(c:post),(b:tag)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与名为陈建国和杜伟的点共同投资的,label为公司的节点",
        "output": "match(a where a.name = '陈建国')-[e:invest]->(b:company)<-[e2:invest]-(c where c.name = '杜伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与post Post_168有has关系的1跳以内的环",
        "output": "match(a:post where name = 'Post_168')-[e:has]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id不等于80,权重在118到767之间的贷款存款的账号的名称,以及这些账号 还款的贷款的名称",
        "output": "match(a:loan where a.id <> 80 and (a.weight BETWEEN 118 AND 767))-[e:deposit]->(b:account)-[e2:repay]->(c:loan) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 计算所有tag的id加30的值;2: 查询person杜若涵watch的film节点has的tag;3: 给出所有与person有关系的tag节点,且tag节点的id为84,并返回这些点的value对833取余的数量,以及id除id的值;",
        "output": "查询语句为:1: match(a:tag) return a.id + 30;2: match(a:person where a.name = '杜若涵')-[e:person_watch_film]->(b:film)-[e2:film_has_tag]->(c:tag) return c;3: match(a:person)-[e]->(b:tag where b.id = 84) return COUNT(b.value % 833), b.id / b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点为电影院，目标点为电影且标签为上映的边。",
        "output": "match(a:cinema)-[e:releases]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和仓库FSM之间有拥有关系的用户",
        "output": "match(a:repository where a.name='FSM')-[e:has]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部标签以价值,名字分组的id, 根据id从大到小排序",
        "output": "match(a:tag) return a.id group by a.value, a.name order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请查询与买家何若涵有创造关系，并包含商品手机的订单。返回这些订单的价格、价值以及买家何若涵的身高和商品手机的价格。",
        "output": "match(a:buyer where a.name='何若涵')-[e:creates]->(b:orders)<-[e2:contain]-(c:goods where c.name='手机') return a.height,b.price, b.value,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为121的person喜欢的person, 并将person有关的person的id的个数赋值给person(b)的身高, 接着查询person(b)的身高小于121的person喜欢的person",
        "output": "match(a:person where a.id = 121)-[e:likes]->(b:person) let b.height = COUNT((b:person)-[e2]-(c:person) => c.id) match(b:person where b.height < 121)-[e3:likes]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 返回类型为medicine的点,返回90个;2: 查询名为孙思思和王宏的,标签为病人的点公共的相关者节点的名单;3: 返回所有源点类型是doctor,边类型是doctor_diagnose_patient,且f1不是true或targetId不是126,且timeStamp不等于2032年05月20日的边;4: 请帮我查找全部与doctor黄思琪有关系的department的weight;5: 请帮我找出所有药品以类别,价格分组的名字, 根据名字从小到大排序;6: 请帮我找出和病人有关联的处方节点,并根据其id分组,返回id,以及id对id取余的值;",
        "output": "查询语句为:1: match(a:medicine) return a limit 90;2: match(a:patient where a.name='孙思思')-[e:relation]->(b)<-[e2:relation]-(c:patient where c.name='王宏') return b.name;3: match(a:doctor)-[e:doctor_diagnose_patient where (e.f1 <> true or e.targetId <> 126) and e.timeStamp <> '2032-05-20']->(b) return e;4: match(a:doctor where a.name='黄思琪')-[e]-(b:department) return b.weight;5: match(a:medicine) return a.name group by a.category, a.price order by a.name asc;6: match(a:patient)-[e:patient_accept_prescription]-(b:prescription) return b.id, b.id % b.id group by b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出源点gender为famale或age小于55或height等于191,边标签等于person_likes_person,且f1不等于true或weight小于等于110.13,且f1不等于false的边,返回这些边的f0的最小值乘795的最大值;2: 请帮我查找person徐红的friend,的srcId对12取余的个数;3: 查询person何建国的所有朋友,的srcId的求和值除源点id的数量;4: 帮我查询person pay的person,返回其源点的id对86取余的值,以及目标点的age的求和值对age取余的值;",
        "output": "查询语句为:1: match(a where a.gender = 'famale' or a.age < 55 or a.height = 191)-[e:person_likes_person where (e.f1 <> true or e.weight <= 110.13) and e.f1 <> false]->(b) return MAX(MIN(e.f0) * 795);2: match(a:person where a.name= '徐红')-[e:friend]->(b) return COUNT(e.srcId % 12);3: match(a:person where a.name= '何建国')-[e:friend]->(b) return COUNT(SUM(e.srcId) / e.srcId);4: match(a:person)-[e:person_pay_person]->(b:person) return a.id % 86, SUM(b.age) % b.age;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为BIN的account,以及与其有关的company,并返回BIN的lastLoginTime和这些company的scale",
        "output": "match(a:account where name = 'BIN')-[e]-(b:company) return a.lastLoginTime, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数除205的和",
        "output": "SUM(a.wordCount / 205)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id,value分组,计算value加value的最小值",
        "output": "return MIN(a.value + a.value) group by a.name, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字,身高分组,计算身高除154减年龄乘9952加96的值",
        "output": "return (a.height / 154 - a.age) * 9952 + 96 group by a.id, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司的伙伴,或其伙伴的伙伴",
        "output": "match(a:company)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找名为外科和眼科的,label为部门的点公共的朋友节点的名单;2: 给出全部id为51的prescription关联的doctor,和以has关系关联了这些doctor的其他department;3: 返回医生郑梅的类型为伙伴的边,并根据权重升序排列,返回23个;",
        "output": "查询语句为:1: match(a:department where a.name='外科')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='眼科') return b.name;2: match(a:prescription where a.id = '51')-[e]-(b:doctor)<-[e2:department_has_doctor]-(c:department) return b,c;3: match(a:doctor where a.name = '郑梅')-[e:partner]->(b) return b order by e.weight asc limit 23;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询年龄大于等于1的person购买的软件的名称,以及这些软件 使用的软件的名称",
        "output": "match(a:person where a.age >= 1)-[e:buy]->(b:software)-[e2:uses]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和读者周伟有1到4度关系的书",
        "output": "match(a:reader where a.name='周伟')-[e]->{1,4}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出ID不是51且人数不为空的公司雇佣的人员名称，以及这些人员提交的软件名称。",
        "output": "match(a:company where a.id <> 51 and (a.peopleNumber is not null))-[e:employee]->(b:person)-[e2:commits]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 计算所有company的id的个数除51的平均值;2: 查找名为吴若涵的,name等于美团或name等于美团的relation,返回这些relation的scale,和边的f1,targetId;3: 请帮我找出company阿里的全部label为partner的边,并根据f1升序排列,返回184个;4: 给出名为defaultName的点存款的所有账号,并对这些点的价值进行求和;",
        "output": "查询语句为:1: match(a:company) return AVG(COUNT(a.id) / 51);2: match(a where a.name='吴若涵')-[e:relation]->(b where b.name = '美团' or b.name = '美团') return b.scale,e.f1, e.targetId;3: match(a:company where a.name = '阿里')-[e:partner]->(b) return b order by e.f1 asc limit 184;4: match(a where a.name='defaultName')-[e:loan_deposit_account]->(b:account) return SUM(b.value);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与论坛推特有关,且与标签喜剧有关系的帖子节点",
        "output": "match(a:forum where a.name='推特')-[e:contain]-(b:post)-[e2:has]-(c:tag where c.name='喜剧') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person赵国强存在pay关系，并且与person杜宏存在likes关系的person节点。返回这些person的id、age以及person赵国强和person杜宏的相应信息。",
        "output": "match(a:person where a.name='赵国强')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='杜宏') return a.name,b.id, b.age,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为24的点的薪资,id,名字",
        "output": "match(a where a.id = 24) return a.salary, a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和名为Hive的software有partner关系,或有partner的partner关系的software",
        "output": "match(a:software where n.name=Hive)-[e:partner]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出department的三角的环,边标签等于has, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于person,名为黄红的点,返回这些点的薪资,id,年龄",
        "output": "match(a:person where a.name = '黄红') return a.salary, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person赵强有关系的person, 返回和这些person有关联的person的,age乘17的值",
        "output": "match(a:person where a.name= '赵强')-[e]-(b:person)-[e2]-(c:person) return c.age * 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表157,97,369, 以属性id作为相等条件,帮我查询与名为徐强和孙国强的点共同creates的,标签等于prescription的节点",
        "output": "with p as (select * from (VALUES(157),(97),(369)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐强')) -[e:doctor_creates_prescription ]->(b:prescription) <-[e2:doctor_creates_prescription ]-(c WHERE c.name = '孙国强') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出出版社为publisher，且性别小于等于9222或者年龄不为空的book的名称，以及这些book认识的book的名称",
        "output": "match(a:publisher where a.gender <= 9222 or (a.age is not null))-[e:publish]->(b:book)-[e2:knows]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑红有关的人，再找出这些人中郑红认识的人，并将他们返回。",
        "output": "match(a:person where a.name = '郑红')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和用户马思琪有2到4跳关系的帖子",
        "output": "match(a:user where a.name='马思琪')-[e]->{2,4}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和buyer吴红之间有cancel关系的orders",
        "output": "match(a:buyer where a.name='吴红')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为黄月的点的,创建时间不是2013年09月27日且名字不是Comment_425的伙伴,返回这些伙伴的字数,和边的权重,f1",
        "output": "match(a where a.name='黄月')-[e:partner]->(b where b.createTime <> '2013-09-27' and b.name <> 'Comment_425') return b.wordCount,e.weight, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以185,19,642,967,692作为请求点id, 源点的id等于输入表id,请帮我查找和buyer有关联的seller节点,并根据其id,age分组,返回id,age,以及age加36的最小值",
        "output": "with p as (select * from (VALUES(185),(19),(642),(967),(692)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_consult_seller ]-(b:seller) RETURN b.id, b.age, MIN(b.age + 36) GROUP BY b.id, b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点标签为论坛,边标签为包含,并且满足条件目标点id是18的边",
        "output": "match(a:forum)-[e:contain where e.targetId = 18]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签为person,目标点标签为person,标签为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为115的城市属于的国家, 并将国家有关的城市的人数的平均值赋值给国家的价值, 接着查询国家的价值小于115的国家包含的城市",
        "output": "match(a:city where a.id = 115)-[e:belong]->(b:country) let b.value = AVG((b:country)-[e2]-(c:city) => c.peopleNumber) match(b:country where b.value < 115)-[e3:contain]->(d:city) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签等于seller,目标点标签等于buyer,标签等于goods或seller的边",
        "output": "match(a:seller)-[e:goods | seller]->(b:buyer) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回全部源点label为person,边label为person_likes_person的边,返回这些边的weight乘160.38的平均值,和f0的最大值除765的值;2: 计算所有person的薪资加9577的值;3: 帮我查询和person吴思琪有person_knows_person关系的person,以及和person孙思思有person_knows_person关系的person,将它们都返回;4: 找出person以id,性别,身高分组的身高, 根据身高从大到小排序;5: 返回与person王宏有person_knows_person关系的1跳的环;6: 返回名为韩思思和何建聪的,标签为person的点公共的相关者节点的名单;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person]->(b) return AVG(e.weight * 160.38), MAX(e.f0) / 765;2: match(a:person) return a.salary + 9577;3: match(a:person where a.name = '吴思琪')-[e:person_knows_person]->(b:person),(c:person where c.name = '孙思思')-[e2:person_knows_person]->(d:person)return a, b, c, d;4: match(a:person) return a.height group by a.id, a.gender, a.height order by a.height desc;5: match(a:person where name = '王宏')-[e:person_knows_person]->{0,0}(b)->(a) return a.id, b.id as b_id;6: match(a:person where a.name='韩思思')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='何建聪') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为李建聪的,id在12到53之间的伙伴,返回这些伙伴的上次登录时间,和边的f0,源点id",
        "output": "match(a where a.name='李建聪')-[e:partner]->(b where (b.id BETWEEN 12 AND 53)) return b.lastLoginTime,e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表935,894,317, 源点的id等于输入表id,给出与person杜月和周梅都存在person_pay_person关系的点",
        "output": "with p as (select * from (VALUES(935),(894),(317)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '杜月')) -[e:person_pay_person ]->(b) <-[e2:person_pay_person ]-(c:person WHERE c.name = '周梅') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "创建一个名为defaultName的贷款",
        "output": "match(a:loan where a.name = 'defaultName') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边类型是creates, 并返回这些点的id",
        "output": "match(a:person)-[e:creates]->(b)-[e2:creates]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,name,salary, 数据为('famale','王若涵',7808),('male','马思思',6879),('male','Jack',6672)的子查询作为输入表, 以属性salary作为相等条件,返回94个与周雪和赵轩都存在关系的person节点",
        "output": "with p as (select * from (VALUES('famale','王若涵',7808),('male','马思思',6879),('male','Jack',6672)) as t(gender,name,salary))MATCH (a WHERE a.salary = p.salary AND (a.name = '周雪')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '赵轩') RETURN b LIMIT 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部孙宏的点commits的software,然后给出孙宏被knows的person,一起返回",
        "output": "match(a where a.name = '孙宏')-[e:commits]->(b:software),(a where a.name = '孙宏')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和university电子科技大学有3到5跳关系的department",
        "output": "match(a:university where a.name='电子科技大学')-[e]->{3,5}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,salary,name分组,计算salary除9546的个数",
        "output": "return COUNT(a.salary / 9546) group by a.gender, a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据weight,name,createTime分组,计算id乘89的值",
        "output": "return a.id * 89 group by a.weight, a.name, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点label为person,边label为支付的边,返回这些边的源点id加115的最小值,和权重减111.33减109加160.80除权重的最大值",
        "output": "match(a:person)-[e:pay]->(b) return MIN(e.srcId + 115), MAX((e.weight - 111.33 - 109 + 160.80) / e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影院UME 上映的电影,返回电影 拥有的标签的价值加823的值",
        "output": "match(a:cinema where name = 'UME')-[e:releases]->(b:film)-[e2:has]->(c:tag) return c.value + 823",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以'dR'作为输入,返回运算结果",
        "output": "Call TRIANGLECOUNT('dR') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和软件SprintBoot有关的person,再请帮我找出和SprintBoot使用的其他软件,返回它们",
        "output": "match(a:software where a.name = 'SprintBoot')-[e]-(b:person), (a:software)-[e2:uses]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找post的2跳的环",
        "output": "match(a:post)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李月卖家所有的商品。",
        "output": "match(a:goods)<-[e:has]-(b:seller where b.name='李月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前25个价值加974小于等于36,名字是微软,或规格为medium的公司",
        "output": "match(a:company where (a.value + 974 <= 36 and a.name = '微软') or a.scale = 'medium') return a limit 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询19个person张轩和韩梅,共同的friend;2: 查找类型是person的全部点,并根据薪资从大到小排列;3: 查找id为138的person有关的person的同事, 再查找和person有关系的恋人;4: 查找以认识关系关联了person吴轩的person;5: 找出person马建国的全部朋友,的权重减权重的平均值;6: 查找和person周伟有person_lover_person关系的person,以及和person陈强有person_lover_person关系的person,将它们都返回;7: 返回全部源点标签等于person,边标签等于person_parent_person的边,返回这些边的f0对732取余的最小值,和权重对180.87取余的最小值;",
        "output": "查询语句为:1: match(a:person where a.name='张轩')-[e:person_friend_person]->(b)<-[e2:person_friend_person]-(c:person where c.name='韩梅') return b limit 19;2: match(a:person) return a order by a.salary desc;3: match(a:person where id = '138')-[e]-(b:person)-[e2:person_colleague_person]->(c), (b:person)-[e3:person_lover_person]->(d) return a, b, c, d;4: match(a:person where a.name='吴轩')<-[e:knows]-(b:person) return b;5: match(a:person where a.name= '马建国')-[e:person_friend_person]->(b) return AVG(e.weight - e.weight);6: match(a:person where a.name = '周伟')-[e:person_lover_person]->(b:person),(c:person where c.name = '陈强')-[e2:person_lover_person]->(d:person)return a, b, c, d;7: match(a:person)-[e:person_parent_person]->(b) return MIN(e.f0 % 732), MIN(e.weight % 180.87);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与贷款有关的名为Bilibili的公司节点，然后返回这些人的人数差和ID模ID的结果。",
        "output": "match(a:loan)-[e]->(b:company where b.name = 'Bilibili') return b.peopleNumber - b.peopleNumber, b.id % b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名字不等于数学学院且大小不是83的部门拥有的学生的名称,以及这些学生 选择的课程的名称",
        "output": "match(a:department where a.name <> '数学学院' and a.size <> 83)-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点身高大于等于194或性别为male,边类型为喜欢,且权重不为空,目标点id为空,或目标点id的数量小于5的边,返回这些边的f0减966减16的和",
        "output": "match(a where a.height >= 194 or a.gender = 'male')-[e:likes where ((e.weight is not null) and (e.targetId is null)) or COUNT(e.targetId) < 5]->(b) return SUM(e.f0 - 966 - 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有源点标签为'买家'，且边标签为'创造'的边，并返回这些边在F0中的值除以683,以及源点ID除以105的值。",
        "output": "match(a:buyer)-[e:creates]->(b) return e.f0 / 683, e.srcId / 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为scale,id,peopleNumber, 数据为('medium',23,511),('small',71,828),('medium',3,651), 源点的id等于输入表id,查找标签为person,名为马建聪的点,返回这些点的age,height",
        "output": "with p as (select * from (VALUES('medium',23,511),('small',71,828),('medium',3,651)) as t(scale,id,peopleNumber))MATCH (a:person WHERE a.id = p.id AND (a.name = '马建聪')) RETURN a.age, a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查一下，有多少在其他部门的学生是在我们艺术学院的。",
        "output": "match(a:department where a.name='艺术学院')-[e:has]->(b:student)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出徐宏卖家所有的商品，以及他拥有的其他商品。",
        "output": "match(a:seller where a.name = '徐宏')-[e]-(b:goods), (a:seller)-[e2:has]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回createTime不是933的account transfer的account的名称,以及这些account transfer的account的名称",
        "output": "match(a:account where a.createTime <> 933)-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与编辑郑强有发布关系且与书孤城有引用关系的书籍节点，并返回这些书籍的名称、ID、编辑郑强的身高和书孤城的ID。",
        "output": "match(a:publisher where a.name='郑强')-[e:publish]->(b:book)<-[e2:refers]-(c:book where c.name='孤城') return a.height,b.name, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为186的person关联的评论,和以创造关系关联了这些评论的其他person",
        "output": "match(a:person where a.id = 186)-[e]-(b:comment)<-[e2:creates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出salary在6388到8836之间或者age小于等于53的person knows的person的姓名。",
        "output": "match(a:person where (a.salary BETWEEN 6388 AND 8836) or a.age <= 53)-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为127的medicine关联的prescription,和以creates关系关联了这些prescription的其他doctor",
        "output": "match(a:medicine where a.id = 127)-[e]-(b:prescription)<-[e2:creates]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和账号点有转账关系的账号节点,且边满足条件f0大于961,目标账号节点满足条件创建时间不是2003年04月08日",
        "output": "match(a:account)-[e:account_transfer_account where e.f0 > 961]->(b:account where b.createTime <> '2003-04-08') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与标签有关系的标签节点,且标签节点的id乘93的数量为443,并返回这些标签的id除54的值,以及标签的id除60的个数",
        "output": "match(a:tag)-[e]->(b:tag where COUNT(b.id * 93) = 443) return b.id / 54, COUNT(b.id / 60)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前131个满足条件id小于等于78或id除id不等于184的用户",
        "output": "match(a:user where a.id <= 78 or a.id / a.id <> 184) return a limit 131",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查询名为杜建国的person;2: 请帮我找出名为王思思的person,以及与其有关的person,并返回王思思的height和这些person的gender;3: 帮我查询和类型为person的点有person_family_person关系的person,以及和这些person有person_parent_person关系的person,以及和这些person有person_colleague_person关系的person;4: 查找前100个满足条件名字等于何强或身高大于等于172,且身高不是167的person;5: 查找全部person的朋友,或其朋友的朋友;6: 返回全部和person张科有关系的person节点,返回这些点的gender,id,age;7: 查询和person周红有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的person;",
        "output": "查询语句为:1: match(a:person where a.name = '杜建国') return a;2: match(a:person where name = '王思思')-[e]-(b:person) return a.height, b.gender;3: match(a:person)-[e:person_family_person]->(b:person)-[e2:person_parent_person]->(c:person)-[e3:person_colleague_person]->(d:person) return d;4: match(a:person where (a.name = '何强' or a.height >= 172) and a.height <> 167) return a limit 100;5: match(a:person)-[e:person_friend_person]->{1,2}(b) return b;6: match(a:person where a.name='张科')-[e]-(b:person) return b.gender, b.id, b.age;7: match(a:person where a.name = '周红')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和film少年足球有关系的comment或tag,返回这些点的createTime,name",
        "output": "match(a:film where a.name='少年足球')-[e]-(b:comment | tag) return b.createTime, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'ty', 'NY'作为输入调用personalRank函数,返回运算结果",
        "output": "Call PERSONALRANK('ty', 'NY') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person杜强有关,且与person黄建国有关系的person节点",
        "output": "match(a:person where a.name='杜强')-[e:parent]-(b:person)-[e2:lover]-(c:person where c.name='黄建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从南京大学出发，通过合作边，步长在1到4之间到达的公司节点",
        "output": "match(a:university where a.name='南京大学')-[e:cooperate]->{1,4}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "提供复仇者联盟电影的标签和发行电影院信息。",
        "output": "match(a where a.name = '复仇者联盟')-[e:has]->(b:tag),(a where a.name = '复仇者联盟')<-[e2:releases]-(c:cinema) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和国家澳大利亚有关的城市,称为X,再查找和这个X有关联的其他大学,以及和X有关联的国家",
        "output": "match(a:country where a.name = '澳大利亚')-[e]-(b:city), (b:city)-[e2]-(c:university),(b:city)-[e3]-(d:country) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询课程的2跳的环",
        "output": "match(a:course)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被course高等数学belong的department",
        "output": "match(a:department)<-[e:belong]-(b:course where b.name='高等数学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为课程的点,返回67个",
        "output": "match(a:course) return a limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查询前199个满足条件id不等于97或id不为空或name不是计算机学院的department;2: 查询与course线性代数有关系的teacher, 返回和这些teacher有关联的university的,id的平均值减71乘2对4取余的值;3: 给出所有和student黄红有3度关系的department;4: 给出和部门土木学院有关的部门,称为X,再给出和这个X有关联的其他教师,以及和X有关联的教师;5: 请帮我找出前94个性别是famale的教师;6: 找出和university重庆大学有关的course,称为X,再找出和这个X有关联的其他course,以及和X有关联的department;7: 查询与university电子科技大学有university_has_department关系的3度的环;",
        "output": "查询语句为:1: match(a:department where a.id <> 97 or (a.id is not null) or a.name <> '计算机学院') return a limit 199;2: match(a:course where a.name= '线性代数')-[e]-(b:teacher)-[e2]-(c:university) return (AVG(c.id) - 71) * 2 % 4;3: match(a:student where a.name='黄红')-[e]->{3,3}(b:department) return b;4: match(a:department where a.name = '土木学院')-[e]-(b:department), (b:department)-[e2]-(c:teacher),(b:department)-[e3]-(d:teacher) return a, b, c, d;5: match(a:teacher where a.gender = 'famale') return a limit 94;6: match(a:university where a.name = '重庆大学')-[e]-(b:course), (b:course)-[e2]-(c:course),(b:course)-[e3]-(d:department) return a, b, c, d;7: match(a:university where name = '电子科技大学')-[e:university_has_department]->{2,2}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回100个医生，这些医生与类型为'部门'的点有'拥有'关系，并且与这些医生有'诊断'关系的患者。",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return c limit 100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵思琪和杜国强这两位人士的家族关系",
        "output": "match(a:person where a.name='赵思琪')-[e:family]->(b)<-[e2:family]-(c:person where c.name='杜国强') return b limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person关联的person,返回其源点的年龄减47除157减31对id取余的个数,以及目标点的薪资加薪资减年龄的值",
        "output": "match(a:person)-[e:relates]->(b:person) return COUNT((a.age - 47) / 157 - 31 % a.id), b.salary + b.salary - b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person何月有关,且与标签文艺有关系的电影节点",
        "output": "match(a:person where a.name='何月')-[e:watch]-(b:film)-[e2:has]-(c:tag where c.name='文艺') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person何梅和赵伟都存在同事关系的点",
        "output": "match(a:person where a.name='何梅')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='赵伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加76的值",
        "output": "a.id + 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为王国强的,id为空或课时在21到34之间的伙伴,返回这些伙伴的学分,和边的f1",
        "output": "match(a where a.name='王国强')-[e:partner]->(b where (b.id is null) or (b.courseHour BETWEEN 21 AND 34)) return b.credit,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与买家相关的订单节点，并按其ID和价值进行分组，返回ID和价值。",
        "output": "match(a:buyer)-[e:cancel]-(b:orders) return b.id, b.value group by b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以78,294,678作为请求点id, 以属性id作为相等条件,给出全部和person韩思琪有关系的person节点,返回这些点的id,name",
        "output": "with p as (select * from (VALUES(78),(294),(678)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩思琪')) -[e ]-(b:person) RETURN b.id, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与doctor徐宏有关,且与doctor王伟有关系的department节点",
        "output": "match(a:doctor where a.name='徐宏')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='王伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与account Zeus和BIN都存在repay关系的点",
        "output": "match(a:account where a.name='Zeus')-[e:repay]->(b)<-[e2:repay]-(c:account where c.name='BIN') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为空或薪资大于等于3302的节点",
        "output": "match(a where (a.id is null) or a.salary >= 3302) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出patient孙强accept的prescription,被其他doctor creates的数量",
        "output": "match(a:patient where a.name='孙强')-[e:accept]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找从department传染部出发,经过标签为department_has_doctor的边,走3到5度到达的doctor点;2: 请帮我查找73个医生陈轩和王思思,共同的伙伴;3: 请帮我查找处方的2度以内的环;4: 找出doctor diagnose的patient,返回其源点的id的最大值乘2的平均值,以及目标点的id加id减salary的最大值;5: 查询全部源点weight在216到297之间,address为C栋,name不等于内科,目标点age减age减85乘198的求和值大于等于92,gender为famale,且类型是department_has_doctor的边;6: 找出与医生吴建国和张月都存在doctor_creates_prescription关系的点;7: 返回全部id为46的medicine关联的patient,和以diagnose关系关联了这些patient的其他doctor;8: 请帮我找出全部id为63的department关联的doctor,和以has关系关联了这些doctor的其他department;9: 找出所有与皮肤科存在department_has_doctor关系的医生,医生与处方存在doctor_creates_prescription关系的点,返回这些点的名字;",
        "output": "查询语句为:1: match(a:department where a.name='传染部')-[e:department_has_doctor]->{3,5}(b:doctor) return b;2: match(a:doctor where a.name='陈轩')-[e:partner]->(b)<-[e2:partner]-(c:doctor where c.name='王思思') return b limit 73;3: match(a:prescription)->{0,1}(b)->(a) return a.id, b.id as b_id;4: match(a:doctor)-[e:doctor_diagnose_patient]->(b:patient) return AVG(MAX(a.id) * 2), MAX(b.id + b.id - b.salary);5: match(a where (a.weight BETWEEN 216 AND 297) and a.address = 'C栋' and a.name <> '内科')-[e:department_has_doctor]->(b where SUM((b.age - b.age - 85) * 198) >= 92 and b.gender = 'famale') return e;6: match(a:doctor where a.name='吴建国')-[e:doctor_creates_prescription]->(b)<-[e2:doctor_creates_prescription]-(c:doctor where c.name='张月') return b;7: match(a:medicine where a.id = '46')-[e]-(b:patient)<-[e2:doctor_diagnose_patient]-(c:doctor) return b,c;8: match(a:department where a.id = '63')-[e]-(b:doctor)<-[e2:department_has_doctor]-(c:department) return b,c;9: match(a where a.name = '皮肤科')-[e:department_has_doctor]->(b:doctor)-[e2:doctor_creates_prescription]->(c:prescription) return c.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与作家类型相关的作家，以及这些作家所写的书籍，以及这些书籍中被引用的书籍。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:write]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被用户韩月发布的帖子",
        "output": "match(a:post)<-[e:publish]-(b:user where b.name='韩月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为PR-65的合并请求,以及与其有关的仓库,并返回PR-65的创建时间和这些仓库的名字",
        "output": "match(a:pullRequest where name = 'PR-65')-[e]-(b:repository) return a.createTime, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找文艺标签",
        "output": "match(a:tag where a.name = '文艺') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与马科存在支付关系的person,person与person存在支付关系的点,返回这些点的年龄",
        "output": "match(a where a.name = '马科')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为何伟的点喜欢的person",
        "output": "match(a where a.name='何伟')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和用户李思思有关的合并请求,称为X,再请帮我找出和这个X有关联的其他事项,以及和X有关联的事项",
        "output": "match(a:user where a.name = '李思思')-[e]-(b:pullRequest), (b:pullRequest)-[e2]-(c:issue),(b:pullRequest)-[e3]-(d:issue) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person knows的person,返回其源点的id乘8的值,以及目标点的height加192的值",
        "output": "match(a:person)-[e:knows]->(b:person) return a.id * 8, b.height + 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));找出和company微软有company_belong_city关系的city,以及和university电子科技大学有university_cooperate_company关系的company,将它们都返回",
        "output": "match(a:company where a.name = '微软')-[e:company_belong_city]->(b:city),(c:university where c.name = '电子科技大学')-[e2:university_cooperate_company]->(d:company)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找找有没有大学和微软、滴滴一起合作的节点",
        "output": "match(a where a.name = '微软')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c where c.name = '滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与赵月有关联的公司，以及与贷款违约名称有关的存款账户，并返回它们。",
        "output": "match(a:person where a.name = '赵月')-[e:invest]->(b:company),(c:loan where c.name = 'defaultName')-[e2:deposit]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被大学中国科技大学合作的公司,和中国科技大学合作的公司",
        "output": "match(a:company)<-[e:cooperate]-(b:university where name = '中国科技大学')-[e2:cooperate]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与黄若涵有选择关系且与赵科有教学关系的课程，并将它们全部返回。",
        "output": "match(a:student where a.name = '黄若涵')-[e:selects]->(b:course),(c:teacher where c.name = '赵科')-[e2:teach]->(d:course) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与杜科存在喜欢关系的评论，找出评论中属于电影的点，并返回这些点的名字。",
        "output": "match(a where a.name = '杜科')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为中国军事论坛的帖子,以及与其有关的用户,并返回中国军事论坛的id和这些用户的性别",
        "output": "match(a:post where name = '中国军事论坛')-[e]-(b:user) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询university四川大学has的department节点has的student",
        "output": "match(a:university where a.name = '四川大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到一个与赵轩和王雪都有联系的人。",
        "output": "match(a where a.name='赵轩')-[e]->(b:person)<-[e2]-(c where c.name='王雪') return b limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找名为杜伟的点的,薪资在3071到3147之间的恋人,返回这些恋人的性别,和边的权重,f1,源点id",
        "output": "match(a where a.name='杜伟')-[e:person_lover_person]->(b where (b.salary BETWEEN 3071 AND 3147)) return b.gender,e.weight, e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数减715的值",
        "output": "a.wordCount - 715",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person何思琪认识的person,被其他person支付的数量",
        "output": "match(a:person where a.name='何思琪')-[e:knows]->(b:person)<-[e2:pay]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我查找14个与生物学院和体育学院都存在关系的department节点;2: 给出名为四川大学的university,以及与其有关的department,并返回四川大学的level和这些department的name;3: 找出label为course,名为大学英语的点,返回这些点的id,courseHour;4: 查询部门的相关者,或其相关者的相关者;5: 找出和teacher有关联的course节点,并根据其value分组,返回value,以及value减597的和;6: 查找id为158的大学有关的教师的伙伴, 再查找和教师有关系的伙伴;",
        "output": "查询语句为:1: match(a where a.name='生物学院')-[e]->(b:department)<-[e2]-(c where c.name='体育学院') return b limit 14;2: match(a:university where name = '四川大学')-[e]-(b:department) return a.level, b.name;3: match(a:course where a.name = '大学英语') return a.id, a.courseHour;4: match(a:department)-[e:relation]->{1,2}(b) return b;5: match(a:teacher)-[e:teacher_teach_course]-(b:course) return b.value, SUM(b.value - 597) group by b.value;6: match(a:university where id = '158')-[e]-(b:teacher)-[e2:partner]->(c), (b:teacher)-[e3:partner]->(d) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我找出与名为周建聪和周国强的点共同选择的,标签等于课程的节点;2: 返回全部和名为体育学院的department有relation关系,或有relation的relation关系的student;3: 给出和student何梅有student_selects_course关系的course,以及和teacher李建国有teacher_teach_course关系的course,将它们都返回;4: 请帮我查找全部名为清华大学的,id不是67或名字为物理学院的相关者,返回这些相关者的大小,和边的源点id,f0;5: 返回部门物理学院 拥有的教师,返回教师 教的课程的价值对977取余的值 ;6: 帮我查询源点gender不是male或salary不为空,边类型为teacher_teach_course,且满足条件f1不等于true或f1不等于true或f1不等于true的边,返回这些边的weight减weight的值;7: 查找学生的三角的环,边类型为student_selects_course, 并返回这些点的id;8: 返回类型是大学的全部点,并根据价值升序排列;9: 找出标签等于department_has_teacher,并且srcId小于19或f1等于false,且f0大于等于549的边;",
        "output": "查询语句为:1: match(a where a.name = '周建聪')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c where c.name = '周国强') return b;2: match(a:department where n.name=体育学院)-[e:relation]->{1,2}(b:student) return b;3: match(a:student where a.name = '何梅')-[e:student_selects_course]->(b:course),(c:teacher where c.name = '李建国')-[e2:teacher_teach_course]->(d:course)return a, b, c, d;4: match(a where a.name='清华大学')-[e:relation]->(b where b.id <> 67 or b.name = '物理学院') return b.size,e.srcId, e.f0;5: match(a:department where name = '物理学院')-[e:department_has_teacher]->(b:teacher)-[e2:teacher_teach_course]->(c:course) return c.value % 977;6: match(a where a.gender <> 'male' or (a.salary is not null))-[e:teacher_teach_course where e.f1 <> true or e.f1 <> true or e.f1 <> true]->(b) return e.weight - e.weight;7: match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id;8: match(a:university) return a order by a.value asc;9: match(a)-[e:department_has_teacher where (e.srcId < 19 or e.f1 = false) and e.f0 >= 549]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person Amily之间有family关系的person",
        "output": "match(a:person where a.name='Amily')-[e:family]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找buyer郑科consult的seller节点ask的buyer",
        "output": "match(a:buyer where a.name = '郑科')-[e:consult]->(b:seller)-[e2:ask]->(c:buyer) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与Comment_360有归属关系的电影，并且这些电影与标签有拥有关系的点。返回这些点的ID。",
        "output": "match(a where a.name = 'Comment_360')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为孙国强的,身高不为空或名字为陈若涵的同事,返回这些同事的名字,和边的权重,f0,源点id",
        "output": "match(a where a.name='孙国强')-[e:colleague]->(b where (b.height is not null) or b.name = '陈若涵') return b.name,e.weight, e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为杜建国和陈红的点共同创造的,label为事项的节点",
        "output": "match(a where a.name = '杜建国')-[e:creates]->(b:issue)<-[e2:creates]-(c where c.name = '陈红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(275,'百度贴吧',2006-01-25),(54,'推特',2032-10-04),(953,'中国诗词论坛',2017-11-27),(770,'推特',2018-03-16)作为请求表数据,属性分别为peopleNumber,name,createTime, 源点的createTime等于输入表createTime,帮我查询forum推特contain的post,被其他forum contain的数量",
        "output": "with p as (select * from (VALUES(275,'百度贴吧',2006-01-25),(54,'推特',2032-10-04),(953,'中国诗词论坛',2017-11-27),(770,'推特',2018-03-16)) as t(peopleNumber,name,createTime))MATCH (a:forum WHERE a.createTime = p.createTime AND (a.name = '推特')) -[e:forum_contain_post ]->(b:post) <-[e2:forum_contain_post ]-(c:forum) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出何伟卖家拥有哪些商品。",
        "output": "match(a:goods)<-[e:has]-(b:seller where b.name='何伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回与prescription Prescription_186有关系的user, 返回和这些user有关联的user的,salary除6881的值",
        "output": "match(a:prescription where a.name= 'Prescription_186')-[e]-(b:user)-[e2]-(c:user) return c.salary / 6881",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出与country中国有关系的city的id",
        "output": "match(a:country where a.name='中国')-[e]-(b:city) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找杜建国朋友的朋友",
        "output": "match(a:user where a.name='杜建国')-[e:friend]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以喜欢关系关联了书孤城的读者",
        "output": "match(a:book where a.name='孤城')<-[e:likes]-(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为department的点,返回90个",
        "output": "match(a:department) return a limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person韩建国创造的评论,和韩建国观看的电影",
        "output": "match(a:comment)<-[e:creates]-(b:person where name = '韩建国')-[e2:watch]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为黄思琪和王红的点共同提交的,类型是软件的节点",
        "output": "match(a where a.name = '黄思琪')-[e:commits]->(b:software)<-[e2:commits]-(c where c.name = '王红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 帮我查询类型为goods,名为苹果的点,返回这些点的id,sellerNumber;2: 给出182个年龄不为空的卖家,根据id从大到小排列;3: 帮我查询和买家有关联的卖家节点,并根据其年龄,性别,id分组,返回年龄,性别,id,以及height的数量减171除6271的值;4: 帮我查询订单以id,价值,名字分组的id, 根据id从大到小排序;5: 查询和buyer孙思琪有buyer_consult_seller关系的seller,再查询以buyer_creates_orders关系关联了孙思琪的orders;6: 帮我查询和订单有关联的商品节点,并根据其销量,价格分组,返回销量,价格,以及id加19的求和值;",
        "output": "查询语句为:1: match(a:goods where a.name = '苹果') return a.id, a.sellerNumber;2: match(a:seller where (a.age is not null)) return a order by a.id desc limit 182;3: match(a:buyer)-[e:buyer_consult_seller]-(b:seller) return b.age, b.gender, b.id, (COUNT(b.height) - 171) / 6271 group by b.age, b.gender, b.id;4: match(a:orders) return a.id group by a.id, a.value, a.name order by a.id desc;5: match(a:buyer where a.name = '孙思琪')-[e:buyer_consult_seller]->(b:seller),(a:buyer where a.name = '孙思琪')<-[e2:buyer_creates_orders]-(c:orders)return a, b, c;6: match(a:orders)-[e:orders_contain_goods]-(b:goods) return b.sellerNumber, b.price, SUM(b.id + 19) group by b.sellerNumber, b.price;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与张伟和赵思思都有关联的40个标签节点",
        "output": "match(a where a.name='张伟')-[e]->(b:tag)<-[e2]-(c where c.name='赵思思') return b limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出《功夫》里主角的朋友的朋友的伙伴",
        "output": "match(a:film where a.name='功夫')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,id,age分组,计算salary乘4551的值",
        "output": "return a.salary * 4551 group by a.salary, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 哪些国家与名为天津的城市有合作伙伴关系，或者与天津有合作伙伴关系的合作伙伴国家。",
        "output": "match(a:city where n.name=天津)-[e:partner]->{1,2}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和author杜伟之间有write关系的book",
        "output": "match(a:author where a.name='杜伟')-[e:write]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找类型为prescription的点",
        "output": "match(a:prescription) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我查找和作家王思琪有author_write_book关系的书,再请帮我查找以author_write_book关系关联了王思琪的书;2: 帮我查询和编辑有关联的书节点,并根据其类别,id,名字分组,返回类别,id,名字,以及id加3的值;3: 返回与名为张月和吴强的点共同认识的,类型是作家的节点;4: 请帮我找出以发布关系关联了书孤城的编辑;5: 查询被author孙科write的book;",
        "output": "查询语句为:1: match(a:author where a.name = '王思琪')-[e:author_write_book]->(b:book),(a:author where a.name = '王思琪')<-[e2:author_write_book]-(c:book)return a, b, c;2: match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.category, b.id, b.name, b.id + 3 group by b.category, b.id, b.name;3: match(a where a.name = '张月')-[e:author_knows_author]->(b:author)<-[e2:author_knows_author]-(c where c.name = '吴强') return b;4: match(a:book where a.name='孤城')<-[e:publisher_publish_book]-(b:publisher) return b;5: match(a:book)<-[e:author_write_book]-(b:author where b.name='孙科') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型为person的点有likes关系的comment,且和这些comment有belong关系的film,且和这些film有has关系的tag",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点标签等于帖子,边标签等于拥有的边,返回这些边的目标点id乘65减164的值,和f0对688取余的值",
        "output": "match(a:post)-[e:has]->(b) return e.targetId * 65 - 164, e.f0 % 688",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除72的值",
        "output": "a.age / 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 其他人对韩国强拥有的账户进行了贷款存款。",
        "output": "match(a:person where a.name='韩国强')-[e:own]->(b:account)<-[e2:deposit]-(c:loan) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出杜轩在其中出演，或者杜轩的朋友在其中出演的电影",
        "output": "match(a:person where n.name=杜轩)-[e:friend]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表963,932,875, 以属性id作为相等条件,请帮我查找名为李思琪的,id为空或语言不是French的朋友,返回这些朋友的价值,和边的时间戳,f0,目标点id",
        "output": "with p as (select * from (VALUES(963),(932),(875)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '李思琪')) -[e:friend ]->(b WHERE b.id IS NULL OR b.lang <> 'French') RETURN b.value, e.timeStamp, e.f0, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回账号Faker转账的账号, 令账号的id等于账号的id乘0, 返回账号(a)的是否冻结, 账号(b)的是否冻结",
        "output": "match(a:account where a.name='Faker')-[e:transfer]->(b:account) let a.id = a.id * 0 return a.isBlock,b.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出纽约与Bilibili有关联的大学节点。",
        "output": "match(a:city where a.name='纽约')-[e:contain]-(b:university)-[e2:cooperate]-(c:company where c.name='Bilibili') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出pay person徐建聪pay的person,的person",
        "output": "match(a:person where name = '徐建聪')-[e:pay]->(b:person)<-[e2:pay]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询likes comment Comment_388的person,和这些person likes的comment",
        "output": "match(a:comment where name = 'Comment_388')<-[e:likes]-(b:person)-[e2:likes]->(c:comment) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为徐月的病人信息",
        "output": "match(a:patient where a.name = '徐月') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与医生有隶属关系（belong)的部门，以及与这些部门有拥有关系（has)的医生，并且这些医生还创建过处方（creates prescription)。",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:creates]->(d:prescription) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有person的朋友,或其朋友的朋友",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和类型为person的点有likes关系的person,且和这些person有knows关系的person,且和这些person有pay关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:knows]->(c:person)-[e3:pay]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 给出label为student_selects_course,以及源点id为空且权重小于104.82的边;2: 请帮我查找和教师徐梅有teacher_teach_course关系的课程,再请帮我查找以teacher_teach_course关系关联了徐梅的课程;3: 给出类型为部门的所有点,并根据大小降序排列;4: 给出和student马强有student_selects_course关系的course,再给出以student_selects_course关系关联了马强的course;5: 请帮我找出源点标签等于部门,边标签等于department_has_teacher的边,返回这些边的weight的最大值对142.90取余的和,和权重除145.79的值;6: 给出所有department的friend,或其friend的friend;7: 帮我查询university清华大学的friend的friend的friend;8: 帮我查询全部教师的伙伴,或其伙伴的伙伴;",
        "output": "查询语句为:1: match(a)-[e:student_selects_course where (e.srcId is null) and e.weight < 104.82]->(b) return e;2: match(a:teacher where a.name = '徐梅')-[e:teacher_teach_course]->(b:course),(a:teacher where a.name = '徐梅')<-[e2:teacher_teach_course]-(c:course)return a, b, c;3: match(a:department) return a order by a.size desc;4: match(a:student where a.name = '马强')-[e:student_selects_course]->(b:course),(a:student where a.name = '马强')<-[e2:student_selects_course]-(c:course)return a, b, c;5: match(a:department)-[e:department_has_teacher]->(b) return SUM(MAX(e.weight) % 142.90), e.weight / 145.79;6: match(a:department)-[e:friend]->{1,2}(b) return b;7: match(a:university where a.name='清华大学')-[e:friend]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d;8: match(a:teacher)-[e:partner]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出拥有标签悬疑的帖子,和这些帖子拥有的标签",
        "output": "match(a:tag where name = '悬疑')<-[e:has]-(b:post)-[e2:has]->(c:tag) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出与person张红和徐月都存在person_creates_comment关系的点",
        "output": "match(a:person where a.name='张红')-[e:person_creates_comment]->(b)<-[e2:person_creates_comment]-(c:person where c.name='徐月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表388, 源点的id等于输入表id,找出部门文学院的所有类型为朋友的边,并根据f0从小到大排列,返回95个",
        "output": "with p as (select * from (VALUES(388)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '文学院')) -[e:friend ]->(b) RETURN b ORDER BY e.f0 LIMIT 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与大学华中科技大学有关,且与学生张月有关系的部门节点",
        "output": "match(a:university where a.name='华中科技大学')-[e:has]-(b:department)-[e2:has]-(c:student where c.name='张月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为Faker的节点转账的贷款或账号",
        "output": "match(a where a.name='Faker')-[e:transfer]->(b:loan | account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回18个名为黄雪的点取消的label为订单的节点,且其价格大于3610.18或名字等于Order_142",
        "output": "match(a where a.name='黄雪')-[e:cancel]->(b:orders where b.price > 3610.18 or b.name = 'Order_142') return b limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与徐建聪有关且与MySQL有关的公司节点，并返回它们的ID和关系价值。",
        "output": "match(a:person where a.name='徐建聪')-[e]->(b:company)<-[e2]-(c:software where c.name='Mysql') return b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与读者有关联的书籍，以及这些书籍与其他编辑之间的发布关系。",
        "output": "match(a:reader where a.id = '178')-[e]-(b:book)<-[e2:publish]-(c:publisher) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与大学有联系的教师，以及与这些教师有联系的其他部门。",
        "output": "match(a:university where a.id = '154')-[e]-(b:teacher)<-[e2:has]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与王强有watch关系的电影，以及这些电影与tag有has关系的点，并返回这些点的价值。",
        "output": "match(a where a.name = '王强')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person点有拥有关系的账号节点,且边满足条件目标点id是165,目标账号节点满足条件名字不是Geaflow123",
        "output": "match(a:person)-[e:own where e.targetId = 165]->(b:account where b.name <> 'Geaflow123') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找名为武汉的点包含的公司;2: 请帮我查找源点等级大于4且名字不等于北京大学且价值为434,边标签为university_cooperate_company,且权重为121.86的边,返回这些边的权重除权重的值;3: 查询大学电子科技大学合作的公司节点合作的大学;4: 找出全部重庆的点包含的公司,然后找出重庆被属于的大学,一起返回;",
        "output": "查询语句为:1: match(a where a.name='武汉')-[e:city_contain_company]->(b:company) return b;2: match(a where a.level > 4 and a.name <> '北京大学' and a.value = 434)-[e:university_cooperate_company where e.weight = 121.86]->(b) return e.weight / e.weight;3: match(a:university where a.name = '电子科技大学')-[e:university_cooperate_company]->(b:company)-[e2:company_cooperate_university]->(c:university) return c;4: match(a where a.name = '重庆')-[e:city_contain_company]->(b:company),(a where a.name = '重庆')<-[e2:university_belong_city]-(c:university) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我查找与名为马轩和周建聪的点共同pay的,类型为person的节点;2: 查询person以身高分组的身高, 根据身高降序排序;3: 请帮我找出与名为徐月和郑伟的点共同喜欢的,类型是person的节点;4: 返回源点薪资大于6035且名字不等于韩国强,边标签为person_knows_person,且目标点id在124到161之间,f0小于等于696,或源点id不为空的边,返回这些边的targetId的平均值除56加167.08的最大值;5: 帮我查询所有与person有关系的person节点,且person节点的id不等于31,并返回这些点的height的数量加193的平均值,以及身高减197的值;6: 请帮我查找全部源点name为马建国或salary等于1146,且id在20到77之间,目标点height为空且gender不是male,或height小于等于172,且类型为person_knows_person的边;7: 查询与person有关系的person节点,且person节点的name等于吴雪,并返回这些点的salary乘6991的值,以及age乘47的值;",
        "output": "查询语句为:1: match(a where a.name = '马轩')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c where c.name = '周建聪') return b;2: match(a:person) return a.height group by a.height order by a.height desc;3: match(a where a.name = '徐月')-[e:person_likes_person]->(b:person)<-[e2:person_likes_person]-(c where c.name = '郑伟') return b;4: match(a where a.salary > 6035 and a.name <> '韩国强')-[e:person_knows_person where ((e.targetId BETWEEN 124 AND 161) and e.f0 <= 696) or (e.srcId is not null)]->(b) return MAX(AVG(e.targetId) / 56 + 167.08);5: match(a:person)-[e]->(b:person where b.id <> 31) return AVG(COUNT(b.height) + 193), b.height - 197;6: match(a where (a.name = '马建国' or a.salary = 1146) and (a.id BETWEEN 20 AND 77))-[e:person_knows_person]->(b where ((b.height is null) and b.gender <> 'male') or b.height <= 172) return e;7: match(a:person)-[e]->(b:person where b.name = '吴雪') return b.salary * 6991, b.age * 47;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有一部电影叫做星际穿越，类型是film?如果有，能否提供该电影的名称以及该电影的类型，以便我进行查询。",
        "output": "match(a:film where a.name = '星际穿越') return a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找47个与耳鼻喉科和内科都存在关系的doctor节点",
        "output": "match(a where a.name='耳鼻喉科')-[e]->(b:doctor)<-[e2]-(c where c.name='内科') return b limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从韩国强医生出发，经过一条属于边的路线，跳了两级到达的部门点是什么？",
        "output": "match(a:doctor where a.name='韩国强')-[e:belong]->{2,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和用户有关联的帖子节点,并根据其名字,字数,价值分组,返回名字,字数,价值,以及value的数量乘525的平均值",
        "output": "match(a:user)-[e:likes]-(b:post) return b.name, b.wordCount, b.value, AVG(COUNT(b.value) * 525) group by b.name, b.wordCount, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以786,320作为请求点id, 以属性id作为相等条件,请帮我查找所有与country中国有关系的country的id",
        "output": "with p as (select * from (VALUES(786),(320)) as t(id)) MATCH (a:country WHERE a.id = p.id AND (a.name = '中国')) -[e ]-(b:country) RETURN b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签等于department,目标点标签等于student,标签等于student的边",
        "output": "match(a:department)-[e:student]->(b:student) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找134个名为郑强的点取消的类型是订单的节点,且节点名字为Order_113,id小于4",
        "output": "match(a where a.name='郑强')-[e:cancel]->(b:orders where b.name = 'Order_113' and b.id < 4) return b limit 134",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找158个用户何若涵和何建国,共同的伙伴",
        "output": "match(a:user where a.name='何若涵')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='何建国') return b limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足以下条件的company：id为138且加26小于10，或者id在42到44之间，或者id不为空，并按照peopleNumber升序排列。",
        "output": "match(a:company where (a.id + 26 < 10 and (a.id BETWEEN 42 AND 44)) or (a.id is not null)) return a order by a.peopleNumber asc limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家韩建国查看的商品, 令买家的id等于买家的性别的最大值,令商品的价格等于商品的名字,令买家的名字等于买家的名字, 返回买家的薪资, 商品的类别",
        "output": "match(a:buyer where a.name='韩建国')-[e:look]->(b:goods) let a.id = MAX(a.gender),let b.price = b.name,let a.name = a.name return a.salary,b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出徐国强申请的贷款，被其他账户偿还的数量。",
        "output": "match(a:person where a.name='徐国强')-[e:apply]->(b:loan)<-[e2:repay]-(c:account) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出123个创建时间是1997年08月12日的论坛,根据id从小到大排列",
        "output": "match(a:forum where a.createTime = '1997-08-12') return a order by a.id asc limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出卖家吴思思回答的买家节点咨询的卖家",
        "output": "match(a:seller where a.name = '吴思思')-[e:ask]->(b:buyer)-[e2:consult]->(c:seller) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,语言,价值分组,计算wordCount的求和值乘243乘649的最小值",
        "output": "return MIN(SUM(a.wordCount) * 243 * 649) group by a.id, a.lang, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以290作为请求点id, 以属性id作为相等条件,帮我查询city伦敦contain的university,被其他city contain的数量",
        "output": "with p as (select * from (VALUES(290)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '伦敦')) -[e:city_contain_university ]->(b:university) <-[e2:city_contain_university ]-(c:city) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出和读者赵宏有关的书籍，以及和赵宏喜欢的其他书籍相关的书籍。",
        "output": "match(a:reader where a.name = '赵宏')-[e]-(b:book), (a:reader)-[e2:likes]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到杜若涵拥有的账户，返回该账户转账记录的最后登录时间。",
        "output": "match(a:person where name = '杜若涵')-[e:own]->(b:account)-[e2:transfer]->(c:account) return c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找王雪创建的订单中，其他买家取消的数量。",
        "output": "match(a:buyer where a.name='王雪')-[e:creates]->(b:orders)<-[e2:cancel]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和卖家韩若涵有关系的商品,返回这些点的性别",
        "output": "match(a:seller where a.name='韩若涵')-[e]-(b:goods) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表564,73,539, 以属性id作为相等条件,找出与publisher郑梅和杜红都存在publisher_publish_book关系的点",
        "output": "with p as (select * from (VALUES(564),(73),(539)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (a.name = '郑梅')) -[e:publisher_publish_book ]->(b) <-[e2:publisher_publish_book ]-(c:publisher WHERE c.name = '杜红') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有编辑的朋友,或其朋友的朋友",
        "output": "match(a:publisher)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询184个处方Prescription_359和Prescription_151,共同的伙伴",
        "output": "match(a:prescription where a.name='Prescription_359')-[e:partner]->(b)<-[e2:partner]-(c:prescription where c.name='Prescription_151') return b limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,gender,salary, 数据为('孙伟','male',9855)的子查询作为输入表, 源点的salary等于输入表salary,查询源点size在68到69之间,size大于等于59,或name不是经管学院,边类型是department_has_teacher,且满足条件srcId小于146的边,返回这些边的targetId的和对82取余的平均值",
        "output": "with p as (select * from (VALUES('孙伟','male',9855)) as t(name,gender,salary))MATCH (a WHERE a.salary = p.salary AND (a.size BETWEEN ASYMMETRIC 68 AND 69 AND a.size >= 59 OR a.name <> '经管学院')) -[e:department_has_teacher WHERE e.srcId < 146 ]->(b) RETURN AVG(SUM(e.targetId) % 82) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到买家陈思琪咨询的卖家，返回该卖家拥有的商品名称和类别。",
        "output": "match(a:buyer where name = '陈思琪')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c.name, c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与病人周建聪和李轩都有关联的药品节点，并返回它们的名字、价格和ID。",
        "output": "match(a:patient where a.name='周建聪')-[e]->(b:medicine)<-[e2]-(c:patient where c.name='李轩') return b.name, b.price, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为推特和中国军事论坛的,标签为forum的点公共的relation节点的名单",
        "output": "match(a:forum where a.name='推特')-[e:relation]->(b)<-[e2:relation]-(c:forum where c.name='中国军事论坛') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与账号BIN有转账关系且与杜月有拥有关系的账号，并返回它们。",
        "output": "match(a:account where a.name = 'BIN')-[e:transfer]->(b:account),(c:person where c.name = '杜月')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表186, 以属性id作为相等条件,帮我查询被处方Prescription_236包含的药品",
        "output": "with p as (select * from (VALUES(186)) as t(id)) MATCH (a:medicine WHERE a.id = p.id) <-[e:prescription_contain_medicine ]-(b:prescription WHERE b.name = 'Prescription_236') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部源点满足条件创建时间小于67且价格小于39,id等于20,目标点满足条件类别是文学,且类型是book_refers_book的边",
        "output": "match(a where a.createTime < 67 and a.price < 39 and a.id = 20)-[e:book_refers_book]->(b where b.category = '文学') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为36的company有关的account的partner, 再查找和account有关系的relation",
        "output": "match(a:company where id = 36)-[e]-(b:account)-[e2:partner]->(c), (b:account)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表201,884, 以属性id作为相等条件,返回和department有关联的student节点,并根据其name,salary,height分组,返回name,salary,height,以及id减20的值",
        "output": "with p as (select * from (VALUES(201),(884)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e:department_has_student ]-(b:student) RETURN b.name, b.salary, b.height, b.id - 20 GROUP BY b.name, b.salary, b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以759作为请求点id, 以属性id作为相等条件,给出被买家孙思思查看的商品",
        "output": "with p as (select * from (VALUES(759)) as t(id)) MATCH (a:goods WHERE a.id = p.id) <-[e:buyer_look_goods ]-(b:buyer WHERE b.name = '孙思思') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person李伟有关的person,再返回和李伟family的其他person,返回它们",
        "output": "match(a:person where a.name = '李伟')-[e]-(b:person), (a:person)-[e2:family]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出student Jimmy的标签等于friend的边,并根据srcId降序排列,返回104个",
        "output": "match(a:student where a.name = 'Jimmy')-[e:friend]->(b) return b order by e.srcId desc limit 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person徐红 支付的person,返回person 认识的person的id加3的最大值",
        "output": "match(a:person where name = '徐红')-[e:pay]->(b:person)-[e2:knows]->(c:person) return MAX(c.id + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为郑雪的点支付的person",
        "output": "match(a where a.name='郑雪')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与 person 点有关联的公司节点，并按规格分组返回。",
        "output": "match(a:person)-[e:belong]-(b:company) return b.scale group by b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询买家的2跳的环",
        "output": "match(a:buyer)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字不是知网或名字不等于中国军事论坛的论坛包含的用户的名称,以及这些用户 发布的帖子的名称",
        "output": "match(a:forum where a.name <> '知网' or a.name <> '中国军事论坛')-[e:contain]->(b:user)-[e2:publish]->(c:post) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出与loan defaultName有关,且与loan defaultName有关系的account节点",
        "output": "match(a:loan where a.name='defaultName')-[e:loan_deposit_account]-(b:account)-[e2:account_repay_loan]-(c:loan where c.name='defaultName') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点名字不等于李轩或id在58到59之间,目标点星数小于等于79,名字是Hive,且label为提交的边",
        "output": "match(a where a.name <> '李轩' or (a.id BETWEEN 58 AND 59))-[e:commits]->(b where b.stars <= 79 and b.name = 'Hive') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出peopleNumber为空的country contain的city的名称,以及这些city contain的company的名称",
        "output": "match(a:country where (a.peopleNumber is null))-[e:contain]->(b:city)-[e2:contain]->(c:company) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足以下条件的person：id不为空，id减去id小于53，或者age等于32。然后按照gender从小到大排序，结果数量为190。",
        "output": "match(a:person where ((a.id is not null) and a.id - a.id < 53) or a.age = 32) return a order by a.gender asc limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下吴梅发的帖子都打上了什么标签",
        "output": "match(a:user where a.name = '吴梅')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为美团的点的,名字等于何若涵的伙伴,返回这些伙伴的性别,和边的源点id,目标点id,权重",
        "output": "match(a where a.name='美团')-[e:partner]->(b where b.name = '何若涵') return b.gender,e.srcId, e.targetId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有从买家节点出发，到商品节点结束，并且标签为'查看'的边。",
        "output": "match(a:buyer)-[e:look]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(false,2000-03-29,2014-11-27),(true,2020-06-12,2020-03-16),(false,2021-02-06,2014-10-10),(true,2024-01-19,2005-03-20)作为请求表数据,属性分别为isBlock,createTime,lastLoginTime, 源点的isBlock等于输入表isBlock,查询与account TheShy有account_repay_loan关系的1度以内的环",
        "output": "with p as (select * from (VALUES(false,2000-03-29,2014-11-27),(true,2020-06-12,2020-03-16),(false,2021-02-06,2014-10-10),(true,2024-01-19,2005-03-20)) as t(isBlock,createTime,lastLoginTime))MATCH (a:account WHERE a.isBlock = p.isBlock AND (name = 'TheShy')) -[e:account_repay_loan ]->{0,0}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回course belong的department,返回其源点的value除976的最小值,以及目标点的value对429取余加67的值",
        "output": "match(a:course)-[e:belong]->(b:department) return MIN(a.value / 976), b.value % 429 + 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表131,655,13,949,343, 源点的id等于输入表id,找出96个person王雪和周国强,共同的friend",
        "output": "with p as (select * from (VALUES(131),(655),(13),(949),(343)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '王雪')) -[e:person_friend_person ]->(b) <-[e2:person_friend_person ]-(c:person WHERE c.name = '周国强') RETURN b LIMIT 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person有关联的film节点,并根据其value,category,name分组,返回value,category,name,以及id除59的最大值",
        "output": "match(a:person)-[e:watch]-(b:film) return b.value, b.category, b.name, MAX(b.id / 59) group by b.value, b.category, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件id小于等于86或id大于35或id不为空的节点",
        "output": "match(a where a.id <= 86 or a.id > 35 or (a.id is not null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以211,203,739作为请求点id, 源点的id等于输入表id,找出名为BIN的点transfer的account,并对这些点的value进行求和",
        "output": "with p as (select * from (VALUES(211),(203),(739)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'BIN')) -[e:account_transfer_account ]->(b:account) RETURN SUM(b.value) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询卖家拥有的商品,返回其源点的身高乘158的值,以及目标点的销量乘182.56的值",
        "output": "match(a:seller)-[e:has]->(b:goods) return a.height * 158, b.sellerNumber * 182.56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,age,name分组,计算age除40的求和值",
        "output": "return SUM(a.age / 40) group by a.salary, a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点salary大于等于1682,边类型为person_creates_comment,且weight为空且timeStamp不是1997年07月23日的边,返回这些边的targetId的最小值除171的值",
        "output": "match(a where a.salary >= 1682)-[e:person_creates_comment where (e.weight is null) and e.timeStamp <> '1997-07-23']->(b) return MIN(e.targetId) / 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person relates数量大于115的person,记为relationCount,再查询这些person knows的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 115)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有医生，这些医生创建了与处方相关的处方，并返回这些医生的名字。",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的年龄减32乘年龄对164取余的值",
        "output": "match(a:person) return (a.age - 32) * a.age % 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张红的用户,以及与其有关的论坛,并返回张红的名字和这些论坛的创建时间",
        "output": "match(a:user where name = '张红')-[e]-(b:forum) return a.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与user杜轩存在creates关系,且与repository Mybatis存在belong关系的issue节点，返回这些issue的status,id,及user杜轩的salary,及repository Mybatis的stars",
        "output": "match(a:user where a.name='杜轩')-[e:creates]->(b:issue)<-[e2:belong]-(c:repository where c.name='Mybatis') return a.salary,b.status, b.id,c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回department has的doctor,返回其源点的weight的数量加289除73的最小值,以及目标点的salary减8853的值",
        "output": "match(a:department)-[e:has]->(b:doctor) return MIN((COUNT(a.weight) + 289) / 73), b.salary - 8853",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,salary,gender, 数据为('陈伟',1801,'male'), 源点的name等于输入表name,查询135个department传染部和外科,共同的friend",
        "output": "with p as (select * from (VALUES('陈伟',1801,'male')) as t(name,salary,gender))MATCH (a:department WHERE a.name = p.name AND (a.name = '传染部')) -[e:friend ]->(b) <-[e2:friend ]-(c:department WHERE c.name = '外科') RETURN b LIMIT 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,gender, 数据为(79,162,'famale'),(40,154,'famale'),(7,173,'famale'),(9,187,'famale')的子查询作为输入表, 以属性gender作为相等条件,返回全部和名为Bob的person有朋友关系,或有朋友的朋友关系的person",
        "output": "with p as (select * from (VALUES(79,162,'famale'),(40,154,'famale'),(7,173,'famale'),(9,187,'famale')) as t(age,height,gender))MATCH (a:person WHERE a.gender = p.gender AND (n.name = Bob)) -[e:friend ]->{1,2}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为68的publisher有关的author的partner, 再帮我查询和author有关系的relation",
        "output": "match(a:publisher where id = 68)-[e]-(b:author)-[e2:partner]->(c), (b:author)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有id为81的account关联的loan,和以apply关系关联了这些loan的其他person",
        "output": "match(a:account where a.id = 81)-[e]-(b:loan)<-[e2:apply]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询全部person以id,身高分组的年龄, 根据年龄升序排序",
        "output": "match(a:person) return a.age group by a.id, a.height order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回马国强喜欢的人，以及他认识的人的年龄、ID和姓名。",
        "output": "match(a:person where name = '马国强')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.age, c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件名字不是Order_293的节点",
        "output": "match(a where a.name <> 'Order_293') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点满足条件规格不等于medium或规格不是large或id减id大于66,目标点满足条件id为空,且标签等于创造的边",
        "output": "match(a where a.scale <> 'medium' or a.scale <> 'large' or a.id - a.id > 66)-[e:creates]->(b where (b.id is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出122个与韩建国和郑强都存在关系的person节点",
        "output": "match(a where a.name='韩建国')-[e]->(b:person)<-[e2]-(c where c.name='郑强') return b limit 122",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询标签为city的全部点,并根据peopleNumber降序排列;2: 请帮我查找与名为武汉和广州的点共同属于的,标签为国家的节点;3: 请帮我找出country俄罗斯的全部friend,的targetId对135取余的值;4: 查询id为109的公司有关的公司的相关者, 再查询和公司有关系的相关者;",
        "output": "查询语句为:1: match(a:city) return a order by a.peopleNumber desc;2: match(a where a.name = '武汉')-[e:city_belong_country]->(b:country)<-[e2:city_belong_country]-(c where c.name = '广州') return b;3: match(a:country where a.name= '俄罗斯')-[e:friend]->(b) return e.targetId % 135;4: match(a:company where id = '109')-[e]-(b:company)-[e2:relation]->(c), (b:company)-[e3:relation]->(d) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查找所有名为好视影院的点上映的电影;2: 请帮我查找类型为person_watch_film,且满足条件srcId不为空且timeStamp不等于2002年03月25日的边;3: 帮我查询和电影院好视影院有关系的评论节点,返回这些点的id;",
        "output": "查询语句为:1: match(a where a.name='好视影院')-[e:cinema_releases_film]->(b:film) return b;2: match(a)-[e:person_watch_film where (e.srcId is not null) and e.timeStamp <> '2002-03-25']->(b) return e;3: match(a:cinema where a.name='好视影院')-[e]-(b:comment) return b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为郑雪的节点认识的person",
        "output": "match(a where a.name='郑雪')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回卖家陈建国回答的买家节点创造的订单",
        "output": "match(a:seller where a.name = '陈建国')-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和医生马月有1跳关系的处方",
        "output": "match(a:doctor where a.name='马月')-[e]->{1,1}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出university has的department, 令department的name的值等于belongdepartment的course的id的和, 再查找department has的teacher",
        "output": "match(a:university)-[e:has]->(b:department) let b.name = SUM((b:department)<-[e2:belong]-(c:course) => c.id) match(b:department)-[e3:has]->(d:teacher) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和person kate之间有喜欢关系的评论",
        "output": "match(a:person where a.name='kate')-[e:likes]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person赵若涵存在观看关系,且与标签其他存在拥有关系的电影节点，返回这些电影的价值,名字,类别,及person赵若涵的id,及标签其他的id",
        "output": "match(a:person where a.name='赵若涵')-[e:watch]->(b:film)<-[e2:has]-(c:tag where c.name='其他') return a.id,b.value, b.name, b.category,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找和作家有关联的作家节点,并根据其身高,性别分组,返回身高,性别,以及薪资减1942的最小值;2: 找出源点性别等于famale或性别不是famale,且age的个数加年龄加43大于32,边标签为author_write_book,且源点id不为空的边,返回这些边的权重加权重的平均值;3: 给出类型为作家,名为赵建国的点,返回这些点的薪资,性别,年龄;4: 查询author write的book,返回其源点的age乘age的值,以及目标点的price的平均值乘77的值;5: 帮我查询和作家有关联的书节点,并根据其id分组,返回id,以及id乘id的最小值;6: 计算所有读者的薪资乘2586的值;7: 给出作家马思思认识的作家节点撰写的书;8: 帮我查询153个age的最大值减age小于87,name是张梅,id大于29的publisher,根据id升序排列;9: 请帮我查找和读者孙思琪有关的读者,称为X,再请帮我查找和这个X有关联的其他书,以及和X有关联的读者;",
        "output": "查询语句为:1: match(a:author)-[e:author_knows_author]-(b:author) return b.height, b.gender, MIN(b.salary - 1942) group by b.height, b.gender;2: match(a where (a.gender = 'famale' or a.gender <> 'famale') and COUNT(a.age) + a.age + 43 > 32)-[e:author_write_book where (e.srcId is not null)]->(b) return AVG(e.weight + e.weight);3: match(a:author where a.name = '赵建国') return a.salary, a.gender, a.age;4: match(a:author)-[e:author_write_book]->(b:book) return a.age * a.age, AVG(b.price) * 77;5: match(a:author)-[e:author_write_book]-(b:book) return b.id, MIN(b.id * b.id) group by b.id;6: match(a:reader) return a.salary * 2586;7: match(a:author where a.name = '马思思')-[e:author_knows_author]->(b:author)-[e2:author_write_book]->(c:book) return c;8: match(a:publisher where MAX(a.age) - a.age < 87 and a.name = '张梅' and a.id > 29) return a order by a.id asc limit 153;9: match(a:reader where a.name = '孙思琪')-[e]-(b:reader), (b:reader)-[e2]-(c:book),(b:reader)-[e3]-(d:reader) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回68个名为UME的点releases的标签等于film的节点,且节点name不是复仇者联盟,id为空",
        "output": "match(a where a.name='UME')-[e:releases]->(b:film where b.name <> '复仇者联盟' and (b.id is null)) return b limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和名为马建国的person有相关者关系,或有相关者的相关者关系的公司",
        "output": "match(a:person where n.name=马建国)-[e:relation]->{1,2}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点标签等于读者,边标签等于喜欢,并且满足条件f0在684到832之间的边",
        "output": "match(a:reader)-[e:likes where (e.f0 BETWEEN 684 AND 832)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为黄轩的,身高不等于181且名字是Sam的相关者,返回这些相关者的性别,和边的权重,源点id,f1",
        "output": "match(a where a.name='黄轩')-[e:relation]->(b where b.height <> 181 and b.name = 'Sam') return b.gender,e.weight, e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从公司阿里出发,经过类型为申请的边,走2到4度到达的贷款点",
        "output": "match(a:company where a.name='阿里')-[e:apply]->{2,4}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马国强喜欢的评论中，其他人也喜欢的数量。",
        "output": "match(a:person where a.name='马国强')-[e:likes]->(b:comment)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询132个名为孙思琪的点认识的label为person的节点,且节点id在57到84之间",
        "output": "match(a where a.name='孙思琪')-[e:knows]->(b:person where (b.id BETWEEN 57 AND 84)) return b limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签等于user的点有creates关系的pullRequest,并且和这些pullRequest有belong关系的repository,并且和这些repository有has关系的user",
        "output": "match(a:user)-[e:creates]->(b:pullRequest)-[e2:belong]->(c:repository)-[e3:has]->(d:user) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为forum，边标签为contain的边，并返回这些边的targetId除以targetId的结果以及f0除以f0的结果。",
        "output": "match(a:forum)-[e:contain]->(b) return e.targetId % e.targetId, e.f0 % e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有person的朋友,或其朋友的朋友",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑国强likes的comment,以及likes这些comment的person, 令comment的height等于person的age乘49,令comment的wordCount等于comment的id的平均值对33取余加36, 返回person(a)的age,comment(b)的wordCount,person(c)的height",
        "output": "match(a:person where name = '郑国强')-[e:likes]->(b:comment)<-[e2:likes]-(c:person) let b.height = a.age * 49,let b.wordCount = AVG(b.id) % 33 + 36 return a.age,b.wordCount,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询用户何伟的标签为伙伴的边,并根据目标点id升序排列,返回22个",
        "output": "match(a:user where a.name = '何伟')-[e:partner]->(b) return b order by e.targetId asc limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和teacher吴思思有teach关系的course,再查询以teach关系关联了吴思思的course",
        "output": "match(a:teacher where a.name = '吴思思')-[e:teach]->(b:course),(a:teacher where a.name = '吴思思')<-[e2:teach]-(c:course)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与patient郑红有关系的prescription的id",
        "output": "match(a:patient where a.name='郑红')-[e]-(b:prescription) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,gender分组,计算height的平均值对181取余的值",
        "output": "return AVG(a.height) % 181 group by a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person郑伟和韩宏都存在认识关系的点",
        "output": "match(a:person where a.name='郑伟')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='韩宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出全部源点label为person,边label为person_pay_person,且满足条件f0是913,源点id为空且时间戳为2013年09月25日的边;2: 查询所有person以性别,id,薪资分组的id, 根据id从大到小排序;3: 给出名为郑科和Alan的,label为person的点公共的partner节点的名单;",
        "output": "查询语句为:1: match(a:person)-[e:person_pay_person where e.f0 = 913 and (e.srcId is null) and e.timeStamp = '2013-09-25']->(b) return e;2: match(a:person) return a.id group by a.gender, a.id, a.salary order by a.id desc;3: match(a:person where a.name='郑科')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='Alan') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前193个满足条件name是黄宏的person",
        "output": "match(a:person where a.name = '黄宏') return a limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和编辑王建聪有发布关系的书,再查找以发布关系关联了王建聪的书",
        "output": "match(a:publisher where a.name = '王建聪')-[e:publish]->(b:book),(a:publisher where a.name = '王建聪')<-[e2:publish]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和买家王建国之间有取消关系的订单",
        "output": "match(a:buyer where a.name='王建国')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下人人影城的合作伙伴关系",
        "output": "match(a:cinema where a.name='人人影城')-[e:partner]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为81的评论有关的电影的朋友, 再查找和电影有关系的朋友",
        "output": "match(a:comment where id = 81)-[e]-(b:film)-[e2:friend]->(c), (b:film)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与ISSUE-161存在属于关系的仓库,仓库与用户存在拥有关系的点,返回这些点的性别",
        "output": "match(a where a.name = 'ISSUE-161')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除194的值",
        "output": "a.height / 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和类型是person的点有likes关系的person,且和这些person有knows关系的person,且和这些person有knows关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:knows]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回所有读者以年龄分组的年龄, 根据年龄降序排序;2: 请帮我查找全部和名为郑轩的读者有伙伴关系,或有伙伴的伙伴关系的书;3: 帮我查询book以name分组的name, 根据name降序排序;4: 返回源点薪资小于7092,薪资在3569到4289之间,性别是male,边标签为reader_likes_book,且f0为空或目标点id为空或f0除f0是167.26的边,返回这些边的权重减191.03的最小值;5: 返回类型是author,名为徐雪的点,返回这些点的height;6: 请帮我查找author孙若涵 write的book,返回book knows的book的id除64的值 ;7: 给出55个薪资大于等于8802或名字不等于赵红,且名字不等于马月的编辑,根据身高降序排列;8: 返回所有和名为周思琪的author有relation关系,或有relation的relation关系的author;",
        "output": "查询语句为:1: match(a:reader) return a.age group by a.age order by a.age desc;2: match(a:reader where n.name=郑轩)-[e:partner]->{1,2}(b:book) return b;3: match(a:book) return a.name group by a.name order by a.name desc;4: match(a where a.salary < 7092 and (a.salary BETWEEN 3569 AND 4289) and a.gender = 'male')-[e:reader_likes_book where (e.f0 is null) or (e.targetId is null) or e.f0 / e.f0 = 167.26]->(b) return MIN(e.weight - 191.03);5: match(a:author where a.name = '徐雪') return a.height;6: match(a:author where name = '孙若涵')-[e:author_write_book]->(b:book)-[e2:knows]->(c:book) return c.id / 64;7: match(a:publisher where (a.salary >= 8802 or a.name <> '赵红') and a.name <> '马月') return a order by a.height desc limit 55;8: match(a:author where n.name=周思琪)-[e:relation]->{1,2}(b:author) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值除69的值",
        "output": "MIN(a.id) / 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出全部和名为广州的city有friend关系,或有friend的friend关系的university;2: 返回所有与city有关系的company节点,且company节点的name不是华为,并返回这些点的peopleNumber的求和值减884的数量,以及id的求和值乘38的值;3: 查找类型是大学的点,返回82个;",
        "output": "查询语句为:1: match(a:city where n.name=广州)-[e:friend]->{1,2}(b:university) return b;2: match(a:city)-[e]->(b:company where b.name <> '华为') return COUNT(SUM(b.peopleNumber) - 884), SUM(b.id) * 38;3: match(a:university) return a limit 82;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary减salary的最小值",
        "output": "return MIN(a.salary - a.salary) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出关联书孤城的书,和这些书引用的书",
        "output": "match(a:book where name = '孤城')<-[e:relates]-(b:book)-[e2:refers]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出名为杜建聪的person,以及与其有关的person,并返回杜建聪的gender和这些person的salary;2: 请帮我查找所有源点满足条件scale是large且id小于等于973,目标点满足条件name是Zookeeper或lang不是c++,且stars为空,且标签为company_creates_software的边;3: 查找person的三角的环,边label为person_knows_person, 并返回这些点的id;4: 查询id为74的点的薪资;5: 查找id为146的person有关的person的friend, 再查找和person有关系的relation;6: 请帮我查找17个name是何科或gender等于male,且age在65到92之间的person,根据gender降序排列;7: 请帮我找出源点薪资小于等于6032且id乘8的和是196,薪资大于等于3058,目标点名字不是谷歌,且类型是person_belong_company的边;8: 帮我查询名为王轩的person;",
        "output": "查询语句为:1: match(a:person where name = '杜建聪')-[e]-(b:person) return a.gender, b.salary;2: match(a where a.scale = 'large' and a.id <= 973)-[e:company_creates_software]->(b where (b.name = 'Zookeeper' or b.lang <> 'c++') and (b.stars is null)) return e;3: match(a:person)-[e:person_knows_person]->(b)-[e2:person_knows_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a where a.id = '74') return a.salary;5: match(a:person where id = '146')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d;6: match(a:person where (a.name = '何科' or a.gender = 'male') and (a.age BETWEEN 65 AND 92)) return a order by a.gender desc limit 17;7: match(a where a.salary <= 6032 and SUM(a.id * 8) = 196 and a.salary >= 3058)-[e:person_belong_company]->(b where b.name <> '谷歌') return e;8: match(a:person where a.name = '王轩') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Bob和陈梅之间没有共同的医生关系。",
        "output": "match(a:doctor where a.name='Bob')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='陈梅') return b limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找地址不是西区,权重不等于315的部门拥有的医生的名称,以及这些医生 创造的处方的名称",
        "output": "match(a:department where a.address <> '西区' and a.weight <> 315)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算height减169加175的值",
        "output": "return a.height - 169 + 175 group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为105的person有关的person的伙伴, 再返回和person有关系的相关者",
        "output": "match(a:person where id = 105)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与大学复旦大学有关系的课程的课时",
        "output": "match(a:university where a.name='复旦大学')-[e]-(b:course) return b.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回forum或relation的relationship。",
        "output": "match(a:forum)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点stars不是667或lang不是go,且value大于等于244,边标签等于uses,且weight为空,weight小于126.68且targetId为空的边,返回这些边的weight除135.81的值",
        "output": "match(a where (a.stars <> 667 or a.lang <> 'go') and a.value >= 244)-[e:uses where (e.weight is null) and e.weight < 126.68 and (e.targetId is null)]->(b) return e.weight / 135.81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查找名为Calcite的软件;2: 返回软件Hive的label为相关者的边,并根据权重从大到小排列,返回85个;3: 查找与person陈建国和何宏都存在person_commits_software关系的点;4: 请帮我找出person吴轩的所有friend,的f0乘972乘554的值;5: 查找全部源点价值大于83且id在38到46之间,或价值的求和值等于16,目标点语言不是c++,语言不是rust,或语言是python,且label为company_creates_software的边;6: 找出95个名为王思琪的点提交的标签为软件的节点,且其语言不等于rust或id不等于60;7: 查询全部和名为韩宏的person有partner关系,或有partner的partner关系的software;8: 请帮我查找公司的3度的环;",
        "output": "查询语句为:1: match(a:software where a.name = 'Calcite') return a;2: match(a:software where a.name = 'Hive')-[e:relation]->(b) return b order by e.weight desc limit 85;3: match(a:person where a.name='陈建国')-[e:person_commits_software]->(b)<-[e2:person_commits_software]-(c:person where c.name='何宏') return b;4: match(a:person where a.name= '吴轩')-[e:friend]->(b) return e.f0 * 972 * 554;5: match(a where (a.value > 83 and (a.id BETWEEN 38 AND 46)) or SUM(a.value) = 16)-[e:company_creates_software]->(b where (b.lang <> 'c++' and b.lang <> 'rust') or b.lang = 'python') return e;6: match(a where a.name='王思琪')-[e:person_commits_software]->(b:software where b.lang <> 'rust' or b.id <> 60) return b limit 95;7: match(a:person where n.name=韩宏)-[e:partner]->{1,2}(b:software) return b;8: match(a:company)->{2,2}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回gender为male或gender大于47的person relates的person的名称,以及这些person knows的person的名称",
        "output": "match(a:person where a.gender = 'male' or a.gender > 47)-[e:relates]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,薪资分组,计算年龄除89的值",
        "output": "return a.age / 89 group by a.height, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回114个salary的最大值大于等于62的seller,根据gender从小到大排列",
        "output": "match(a:seller where MAX(a.salary) >= 62) return a order by a.gender asc limit 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为微软的公司,以及与其有关的贷款,并返回微软的规格和这些贷款的id",
        "output": "match(a:company where name = '微软')-[e]-(b:loan) return a.scale, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和company字节之间有apply关系的loan",
        "output": "match(a:company where a.name='字节')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与TheShy和XXD账号相关的贷款节点",
        "output": "match(a:account where a.name='TheShy')-[e:repay]-(b:loan)-[e2:deposit]-(c:account where c.name='XXD') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为price,id,name, 数据为(118,25,'阿司匹林'),(112,55,'999感冒灵'),(50,69,'阿司匹林'),(209,51,'布洛芬'), 以属性name作为相等条件,请帮我找出id为153的patient关联的prescription,和以creates关系关联了这些prescription的其他doctor",
        "output": "with p as (select * from (VALUES(118,25,'阿司匹林'),(112,55,'999感冒灵'),(50,69,'阿司匹林'),(209,51,'布洛芬')) as t(price,id,name))MATCH (a:patient WHERE a.name = p.name AND (a.id = '153')) -[e ]-(b:prescription) <-[e2:doctor_creates_prescription ]-(c:doctor) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 查询和orders Order_449有1度或2度关系的goods;2: 返回136个订单Order_327和Order_407,共同的伙伴;3: 帮我查询与买家郑宏有关系的卖家, 返回和这些卖家有关联的订单的,价格乘价格的值;4: 请帮我查找满足条件value不等于900或id在39到45之间的节点;",
        "output": "查询语句为:1: match(a:orders where a.name='Order_449')-[e]->{1,2}(b:goods) return b;2: match(a:orders where a.name='Order_327')-[e:partner]->(b)<-[e2:partner]-(c:orders where c.name='Order_407') return b limit 136;3: match(a:buyer where a.name= '郑宏')-[e]-(b:seller)-[e2]-(c:orders) return c.price * c.price;4: match(a where a.value <> 900 or (a.id BETWEEN 39 AND 45)) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回与doctor张国强和马建国都存在doctor_diagnose_patient关系的点",
        "output": "match(a:doctor where a.name='张国强')-[e:doctor_diagnose_patient]->(b)<-[e2:doctor_diagnose_patient]-(c:doctor where c.name='马建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回包含在澳大利亚的所有城市，以及属于澳大利亚的城市。",
        "output": "match(a where a.name = '澳大利亚')-[e:contain]->(b:city),(a where a.name = '澳大利亚')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为defaultName的贷款点的id、金额和权重。",
        "output": "match(a:loan where a.name = 'defaultName') return a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有标签等于prescription的点",
        "output": "match(a:prescription) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为9的用户有关的仓库的朋友, 再找出和仓库有关系的伙伴",
        "output": "match(a:user where id = 9)-[e]-(b:repository)-[e2:friend]->(c), (b:repository)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与韩若涵和吴雪都有关联的66本书。",
        "output": "match(a where a.name='韩若涵')-[e]->(b:book)<-[e2]-(c where c.name='吴雪') return b limit 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为25的论坛包含的帖子, 并将帖子有关的帖子的id的最大值赋值给帖子(b)的id, 接着查询帖子(b)的id小于25的帖子拥有的标签",
        "output": "match(a:forum where a.id = 25)-[e:contain]->(b:post) let b.id = MAX((b:post)-[e2]-(c:post) => c.id) match(b:post where b.id < 25)-[e3:has]->(d:tag) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回陈雪这个人的信息。",
        "output": "match(a:person where a.name = '陈雪') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点标签为买家,边标签为取消的边,返回这些边的权重对169.87取余的值,和targetId的最小值减39的数量",
        "output": "match(a:buyer)-[e:cancel]->(b) return e.weight % 169.87, COUNT(MIN(e.targetId) - 39)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与处方384和312有关的143个用户节点。",
        "output": "match(a where a.name='Prescription_384')-[e]->(b:user)<-[e2]-(c where c.name='Prescription_312') return b limit 143",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,gender,salary, 数据为(187,'famale',4508),(176,'famale',7718),(179,'male',6069),(151,'famale',9721), 源点的gender等于输入表gender,返回类型是seller,名为周建聪的点,返回这些点的salary,gender,height",
        "output": "with p as (select * from (VALUES(187,'famale',4508),(176,'famale',7718),(179,'male',6069),(151,'famale',9721)) as t(height,gender,salary))MATCH (a:seller WHERE a.gender = p.gender AND (a.name = '周建聪')) RETURN a.salary, a.gender, a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询标签为person的所有点,并根据年龄从大到小排列",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与教师杜若涵存在教关系,且与部门计算机学院存在属于关系的课程节点，返回这些课程的价值,课时,id,及教师杜若涵的名字,及部门计算机学院的名字",
        "output": "match(a:teacher where a.name='杜若涵')-[e:teach]->(b:course)<-[e2:belong]-(c:department where c.name='计算机学院') return a.name,b.value, b.courseHour, b.id,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以拥有关系关联了用户王强的仓库",
        "output": "match(a:user where a.name='王强')<-[e:has]-(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person周梅之间有喜欢关系的person",
        "output": "match(a:person where a.name='周梅')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找城市的朋友,或其朋友的朋友",
        "output": "match(a:city)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出用户喜欢但名字不是吴科或黄轩的帖子，并给出这些帖子包含的标签。",
        "output": "match(a:user where a.name <> '吴科' or a.name <> '黄轩')-[e:likes]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下名为Comment_328的评论",
        "output": "match(a:comment where a.name = 'Comment_328') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回7个名为黄强的点诊断的类型为病人的节点,且节点年龄小于等于69",
        "output": "match(a where a.name='黄强')-[e:diagnose]->(b:patient where b.age <= 69) return b limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和买家点有创造关系的订单节点,且边满足条件源点id小于等于179,目标订单节点满足条件名字大于等于172",
        "output": "match(a:buyer)-[e:creates where e.srcId <= 179]->(b:orders where b.name >= 172) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找与comment Comment_103和Comment_337都存在comment_belong_film关系的点;2: 给出类型为评论的所有点,并根据名字从小到大排列;3: 请帮我找出和评论有关联的电影节点,并根据其类别,价值分组,返回类别,价值,以及id对id取余的求和值;4: 请帮我查找全部和person何思琪之间有person_creates_comment关系的comment;5: 请帮我查找所有名为横店影院的点releases的film;6: 请帮我查找评论Comment_246 属于的电影,返回电影 拥有的标签的价值对898取余的值 ;7: 查找名为黄思琪的点喜欢的全部评论,并对这些点的创建时间进行求和;",
        "output": "查询语句为:1: match(a:comment where a.name='Comment_103')-[e:comment_belong_film]->(b)<-[e2:comment_belong_film]-(c:comment where c.name='Comment_337') return b;2: match(a:comment) return a order by a.name asc;3: match(a:comment)-[e:comment_belong_film]-(b:film) return b.category, b.value, SUM(b.id % b.id) group by b.category, b.value;4: match(a:person where a.name='何思琪')-[e:person_creates_comment]->(b:comment) return b;5: match(a where a.name='横店影院')-[e:cinema_releases_film]->(b:film) return b;6: match(a:comment where name = 'Comment_246')-[e:comment_belong_film]->(b:film)-[e2:film_has_tag]->(c:tag) return c.value % 898;7: match(a where a.name='黄思琪')-[e:person_likes_comment]->(b:comment) return SUM(b.createTime);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点类型为仓库,边类型为拥有,且满足条件权重大于198.42或目标点id大于13,且权重不为空的边",
        "output": "match(a:repository)-[e:has where (e.weight > 198.42 or e.targetId > 13) and (e.weight is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与北京大学合作的公司的城市ID、区域和价值，这些公司属于哪个城市。",
        "output": "match(a:university where name = '北京大学')-[e:cooperate]->(b:company)-[e2:belong]->(c:city) return c.id, c.area, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person何伟存在knows关系,且与person赵强存在likes关系的person节点，返回这些person的name,gender,height,及person何伟的salary,及person赵强的gender",
        "output": "match(a:person where a.name='何伟')-[e:knows]->(b:person)<-[e2:likes]-(c:person where c.name='赵强') return a.salary,b.name, b.gender, b.height,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点name不是北京,name为武汉,或value是267,边标签为contain,且srcId大于93的边,返回这些边的srcId的个数乘srcId的个数",
        "output": "match(a where (a.name <> '北京' and a.name = '武汉') or a.value = 267)-[e:contain where e.srcId > 93]->(b) return COUNT(COUNT(e.srcId) * e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查找以contain关系关联了city武汉的country;2: 找出名为韩国的点contain的city,并对这些点的peopleNumber进行求和;3: 找出和university有关联的city节点,并根据其name,value,peopleNumber分组,返回name,value,peopleNumber,以及area的数量乘77392的求和值;4: 查找名为北京的点的,scale等于large或peopleNumber大于61的partner,返回这些partner的name,和边的f0,targetId,weight;",
        "output": "查询语句为:1: match(a:city where a.name='武汉')<-[e:country_contain_city]-(b:country) return b;2: match(a where a.name='韩国')-[e:country_contain_city]->(b:city) return SUM(b.peopleNumber);3: match(a:university)-[e:university_belong_city]-(b:city) return b.name, b.value, b.peopleNumber, SUM(COUNT(b.area) * 77392) group by b.name, b.value, b.peopleNumber;4: match(a where a.name='北京')-[e:partner]->(b where b.scale = 'large' or b.peopleNumber > 61) return b.name,e.f0, e.targetId, e.weight;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(84,329,3),(0,212,4),(86,748,1)作为请求表数据,属性分别为id,value,level, 以属性id作为相等条件,找出112个薪资小于等于6980且身高不是183且年龄是13的教师,根据薪资降序排列",
        "output": "with p as (select * from (VALUES(84,329,3),(0,212,4),(86,748,1)) as t(id,value,level))MATCH (a:teacher WHERE a.id = p.id AND (a.salary <= 6980 AND a.height <> 183 AND a.age = 13)) RETURN a ORDER BY a.salary DESC LIMIT 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和论坛CSDN之间有包含关系的帖子",
        "output": "match(a:forum where a.name='CSDN')-[e:contain]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和买家吴雪之间有取消关系的订单",
        "output": "match(a:buyer where a.name='吴雪')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被医生杜梅属于的部门,和杜梅创造的处方",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '杜梅')-[e2:creates]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 请帮我找出名为其他的tag;2: 给出源点年龄为空,性别是male,性别是famale,目标点价值加641不等于99,id大于43,价值为空,且标签为user_likes_post的边;3: 查找标签为person的点,并根据薪资从小到大排列;4: 给出label为user_publish_post,并且满足条件targetId大于191的边;5: 请帮我找出全部源点label为论坛,边label为forum_contain_person,以及满足条件源点id不是134且目标点id大于44,或f1不等于true的边;6: 找出与用户周雪有user_likes_post关系的3度以内的环;7: 返回源点salary小于等于3465或id为空或gender不是male,边label为user_publish_post,且满足条件f0不是589且targetId小于等于153且targetId不为空的边,返回这些边的weight加weight的值;8: 返回全部和标签历史有1跳或2跳关系的用户;9: 找出帖子Post_490拥有的标签,被其他帖子拥有的数量;",
        "output": "查询语句为:1: match(a:tag where a.name = '其他') return a;2: match(a where (a.age is null) and a.gender = 'male' and a.gender = 'famale')-[e:user_likes_post]->(b where b.value + 641 <> 99 and b.id > 43 and (b.value is null)) return e;3: match(a:person) return a order by a.salary asc;4: match(a)-[e:user_publish_post where e.targetId > 191]->(b) return e;5: match(a:forum)-[e:forum_contain_person where (e.srcId <> 134 and e.targetId > 44) or e.f1 <> true]->(b) return e;6: match(a:user where name = '周雪')-[e:user_likes_post]->{0,2}(b)->(a) return a.id, b.id as b_id;7: match(a where a.salary <= 3465 or (a.id is null) or a.gender <> 'male')-[e:user_publish_post where e.f0 <> 589 and e.targetId <= 153 and (e.targetId is not null)]->(b) return e.weight + e.weight;8: match(a:tag where a.name='历史')-[e]->{1,2}(b:user) return b;9: match(a:post where a.name='Post_490')-[e:post_has_tag]->(b:tag)<-[e2:post_has_tag]-(c:post) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与买家周梅有关系的订单的名字",
        "output": "match(a:buyer where a.name='周梅')-[e]-(b:orders) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与陈国强是同事的人，以及与马宏是朋友的人，并返回他们。",
        "output": "match(a:person where a.name = '陈国强')-[e:colleague]->(b:person),(c:person where c.name = '马宏')-[e2:friend]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘17的平均值",
        "output": "AVG(a.id * 17)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为属于,以及f1不是false或源点id在15到112之间或权重在105.07到107.16之间的边",
        "output": "match(a)-[e:belong where e.f1 <> false or (e.srcId BETWEEN 15 AND 112) or (e.weight BETWEEN 105.07 AND 107.16)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找课程的三角的环,边类型是属于, 并返回这些点的id",
        "output": "match(a:course)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找拥有账号BIN的person,和这些person拥有的账号",
        "output": "match(a:account where name = 'BIN')<-[e:own]-(b:person)-[e2:own]->(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我按ID分组并按照名字升序排列所有的医生名字",
        "output": "match(a:doctor) return a.name group by a.id order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出百度贴吧中帖子节点包含的标签。",
        "output": "match(a:forum where a.name = '百度贴吧')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的数量减8347除76的平均值",
        "output": "AVG((COUNT(a.salary) - 8347) / 76)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为34的person有关的person的friend, 再查找和person有关系的friend",
        "output": "match(a:person where id = 34)-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有贷款以id,金额,权重分组的id, 根据id从大到小排序",
        "output": "match(a:loan) return a.id group by a.id, a.amount, a.weight order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,age, 数据为('陈红',46,60),('Sam',57,34),('杜建聪',62,90),('黄思思',8,86), 以属性name作为相等条件,返回和person何伟有关的person,再返回和何伟person_pay_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES('陈红',46,60),('Sam',57,34),('杜建聪',62,90),('黄思思',8,86)) as t(name,id,age))MATCH (a:person WHERE a.name = p.name AND (a.name = '何伟')) -[e ]-(b:person) , (a:person) -[e2:person_pay_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出谷歌和美团两家公司的共同点。",
        "output": "match(a:company where a.name='谷歌')-[e:apply]->(b)<-[e2:apply]-(c:company where c.name='美团') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 找出所有源点标签等于部门,边标签等于department_has_teacher的边,返回这些边的srcId的最大值加194的值,和权重减113.02的值;2: 查找教师的伙伴,或其伙伴的伙伴;3: 查询所有周梅的点selects的course,然后查询周梅被has的department,一起返回;4: 查询与学生赵科有关系的课程的价值;",
        "output": "查询语句为:1: match(a:department)-[e:department_has_teacher]->(b) return MAX(e.srcId) + 194, e.weight - 113.02;2: match(a:teacher)-[e:partner]->{1,2}(b) return b;3: match(a where a.name = '周梅')-[e:student_selects_course]->(b:course),(a where a.name = '周梅')<-[e2:department_has_student]-(c:department) return a, b, c;4: match(a:student where a.name='赵科')-[e]-(b:course) return b.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回user creates的pullRequest, 令pullRequest的createTime的值等于haspullRequest的repository的name的平均值, 再查找pullRequest belong的repository",
        "output": "match(a:user)-[e:creates]->(b:pullRequest) let b.createTime = AVG((b:pullRequest)<-[e2:has]-(c:repository) => c.name) match(b:pullRequest)-[e3:belong]->(d:repository) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前118个label为拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询读者以性别分组的薪资, 根据薪资升序排序",
        "output": "match(a:reader) return a.salary group by a.gender order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为东京和广州的点共同包含的,标签为大学的节点",
        "output": "match(a where a.name = '东京')-[e:contain]->(b:university)<-[e2:contain]-(c where c.name = '广州') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄降序排序，显示所有标记为'person'的点。",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取Prescription_391中药品在其他处方中的数量",
        "output": "match(a:prescription where a.name='Prescription_391')-[e:contain]->(b:medicine)<-[e2:contain]-(c:prescription) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出student黄强selects的course,以及selects这些course的student, 令course的courseHour等于course的courseHour, 返回student(a)的salary,course(b)的courseHour,student(c)的salary",
        "output": "match(a:student where name = '黄强')-[e:selects]->(b:course)<-[e2:selects]-(c:student) let b.courseHour = b.courseHour return a.salary,b.courseHour,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person张强认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='张强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算课时减47的值",
        "output": "return a.courseHour - 47 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 查询与买家有关系的买家节点,且买家节点的id不为空,并返回这些点的年龄减44乘7204加身高的值,以及身高乘170的和;2: 查找id为146的点的id,age;3: 帮我查询和buyer赵思琪有buyer_cancel_orders关系的orders,再帮我查询以buyer_creates_orders关系关联了赵思琪的orders;",
        "output": "查询语句为:1: match(a:buyer)-[e]->(b:buyer where (b.id is not null)) return (b.age - 44) * 7204 + b.height, SUM(b.height * 170);2: match(a where a.id = '146') return a.id, a.age;3: match(a:buyer where a.name = '赵思琪')-[e:buyer_cancel_orders]->(b:orders),(a:buyer where a.name = '赵思琪')<-[e2:buyer_creates_orders]-(c:orders)return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以27, 'YN', 'gw'作为输入,返回运算结果",
        "output": "Call TRIANGLECOUNT(27, 'YN', 'gw') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以138,268,373作为请求点id, 源点的id等于输入表id,请帮我查找person郑梅的所有标签等于相关者的边,并根据f1升序排列,返回56个",
        "output": "with p as (select * from (VALUES(138),(268),(373)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '郑梅')) -[e:relation ]->(b) RETURN b ORDER BY e.f1 LIMIT 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签为person的点有creates关系的comment,以及和这些comment有belong关系的film,以及和这些film有has关系的tag",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用KHOP函数,以'jg', 14作为输入,返回运算结果",
        "output": "Call KHOP('jg', 14) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary对salary取余的值",
        "output": "a.salary % a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询源点name等于杜强或id的求和值大于等于44或gender不是famale,边label为person_watch_film,且srcId大于110且timeStamp不等于2034年04月24日且f1是true的边,返回这些边的targetId乘52加686的平均值",
        "output": "match(a where a.name = '杜强' or SUM(a.id) >= 44 or a.gender <> 'famale')-[e:person_watch_film where e.srcId > 110 and e.timeStamp <> '2034-04-24' and e.f1 = true]->(b) return AVG(e.targetId * 52 + 686)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回耳鼻喉科医生数量，其他部门也有拥有。",
        "output": "match(a:department where a.name='耳鼻喉科')-[e:has]->(b:doctor)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以425,550,699作为请求点id, 源点的id等于输入表id,给出label为person的点,返回58个",
        "output": "with p as (select * from (VALUES(425),(550),(699)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a LIMIT 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出153个buyer徐思琪和赵科,共同的partner",
        "output": "match(a:buyer where a.name='徐思琪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='赵科') return b limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到从用户王轩出发，通过发布标签的边，走了3步到达的帖子节点。",
        "output": "match(a:user where a.name='王轩')-[e:publish]->{3,3}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询salary为2174或id不为空,且age的最大值乘16不等于89的节点",
        "output": "match(a where (a.salary = 2174 or (a.id is not null)) and MAX(a.age) * 16 <> 89) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询64个用户孙伟和张强,共同的相关者",
        "output": "match(a:user where a.name='孙伟')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b limit 64",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询城市天津包含的公司节点合作的大学",
        "output": "match(a:city where a.name = '天津')-[e:contain]->(b:company)-[e2:cooperate]->(c:university) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算size减67的值",
        "output": "return a.size - 67 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点标签等于学生,边标签等于选择,以及权重小于958或权重除149.71不是607,且目标点id小于等于114的边",
        "output": "match(a:student)-[e:selects where (e.weight < 958 or e.weight / 149.71 <> 607) and e.targetId <= 114]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,薪资分组,计算薪资乘6733的值",
        "output": "return a.salary * 6733 group by a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我找出标签等于person_lover_person,并且满足条件f0大于963的边;2: 请帮我找出与person黄梅和张月都存在person_colleague_person关系的点;3: 帮我查询全部person以年龄,身高,性别分组的身高, 根据身高从大到小排序;4: 返回所有id为79的person关联的person,和以关联关系关联了这些person的其他person;5: 帮我查询类型是person的点,返回13个;",
        "output": "查询语句为:1: match(a)-[e:person_lover_person where e.f0 > 963]->(b) return e;2: match(a:person where a.name='黄梅')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='张月') return b;3: match(a:person) return a.height group by a.age, a.height, a.gender order by a.height desc;4: match(a:person where a.id = '79')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;5: match(a:person) return a limit 13;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,value,scale, 数据为('谷歌',361,'medium'),('蚂蚁集团',850,'large'),('美团',748,'medium'), 以属性name作为相等条件,帮我查询从person吴梅出发,经过类型为person_own_account的边,走2度或3度到达的account点",
        "output": "with p as (select * from (VALUES('谷歌',361,'medium'),('蚂蚁集团',850,'large'),('美团',748,'medium')) as t(name,value,scale))MATCH (a:person WHERE a.name = p.name AND (a.name = '吴梅')) -[e:person_own_account ]->{2,3}(b:account) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与公司相关的人员，包括他们的联系人",
        "output": "match(a:company)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件name不是郑建国且salary不为空的节点",
        "output": "match(a where a.name <> '郑建国' and (a.salary is not null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我查找全部陈梅的点knows的person,然后请帮我查找陈梅被knows的person,一起返回;2: 查询全部名为黄轩的点的,性别不是male,性别不等于male的朋友,返回这些朋友的名字,和边的权重;3: 找出身高大于等于199的person认识的person的名称,以及这些person 喜欢的person的名称;4: 帮我查询全部源点类型为person,边类型为person_pay_person,以及targetId不为空或timeStamp不是2009年05月02日或timeStamp是2024年08月27日的边;5: 查询person吴红的全部类型是伙伴的边,并根据f1从小到大排列,返回46个;6: 请帮我查找类型是person的所有点,并根据id降序排列;7: 给出与person黄建聪和Bob都存在person_pay_person关系的点;8: 返回和名为周思思的person有相关者关系,或有相关者的相关者关系的person;9: 请帮我找出名为吴思思的person,以及与其有关的person,并返回吴思思的名字和这些person的id;",
        "output": "查询语句为:1: match(a where a.name = '陈梅')-[e:person_knows_person]->(b:person),(a where a.name = '陈梅')<-[e2:person_knows_person]-(c:person) return a, b, c;2: match(a where a.name='黄轩')-[e:friend]->(b where b.gender <> 'male' and b.gender <> 'male') return b.name,e.weight;3: match(a:person where a.height >= 199)-[e:person_knows_person]->(b:person)-[e2:person_likes_person]->(c:person) return b.name as b_name, c.name as c_name;4: match(a:person)-[e:person_pay_person where (e.targetId is not null) or e.timeStamp <> '2009-05-02' or e.timeStamp = '2024-08-27']->(b) return e;5: match(a:person where a.name = '吴红')-[e:partner]->(b) return b order by e.f1 asc limit 46;6: match(a:person) return a order by a.id desc;7: match(a:person where a.name='黄建聪')-[e:person_pay_person]->(b)<-[e2:person_pay_person]-(c:person where c.name='Bob') return b;8: match(a:person where n.name=周思思)-[e:relation]->{1,2}(b:person) return b;9: match(a:person where name = '吴思思')-[e]-(b:person) return a.name, b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表438,120,33,618,31, 以属性id作为相等条件,给出类型是university的点,返回114个",
        "output": "with p as (select * from (VALUES(438),(120),(33),(618),(31)) as t(id)) MATCH (a:university WHERE a.id = p.id) RETURN a LIMIT 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以207,630作为请求点id, 以属性id作为相等条件,帮我查询处方的三角的环,边标签为prescription_contain_medicine, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(207),(630)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) -[e:prescription_contain_medicine ]->(b) -[e2:prescription_contain_medicine ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出95个与类型为publisher的实体有publish关系，并且这些实体也引用了其他书籍的书籍。",
        "output": "match(a:publisher)-[e:publish]->(b:book)-[e2:refers]->(c:book) return c limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从吴轩出发，沿着创造标签的路线走1到4度，到达订单点。",
        "output": "match(a:buyer where a.name='吴轩')-[e:creates]->{1,4}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person何梅的partner,的weight减weight的求和值",
        "output": "match(a:person where a.name= '何梅')-[e:partner]->(b) return SUM(e.weight - e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生吴强 创造的处方,返回处方 包含的药品的价格除价格的值",
        "output": "match(a:doctor where name = '吴强')-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return c.price / c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出137个病人点的处方，并找出包含这些药品的处方。",
        "output": "match(a:patient)-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c limit 137",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person相关的person节点，并按性别、年龄和姓名进行分组，然后返回性别、年龄和姓名。",
        "output": "match(a:person)-[e:knows]-(b:person) return b.gender, b.age, b.name group by b.gender, b.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person投资的公司,返回其源点的年龄减年龄的数量,以及目标点的价值对价值取余的个数",
        "output": "match(a:person)-[e:invest]->(b:company) return COUNT(a.age - a.age), COUNT(b.value % b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与公司ID为171的公司有关的朋友，再返回与这些朋友有关联的相关者。",
        "output": "match(a:company where id = '171')-[e]-(b:company)-[e2:friend]->(c), (b:company)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点名字为Order_236,边标签为包含,且目标点id大于117且f1大于113,或目标点id小于等于179的边,返回这些边的源点id对132取余的值",
        "output": "match(a where a.name = 'Order_236')-[e:contain where (e.targetId > 117 and e.f1 > 113) or e.targetId <= 179]->(b) return e.srcId % 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 查找所有与person孙建聪有关系的tag的value;2: 查询和person李雪有person_likes_comment关系的comment,以及和film泰坦尼克号有film_has_tag关系的tag,将它们都返回;3: 查找和名为韩思思的person有相关者关系,或有相关者的相关者关系的电影;4: 请帮我找出所有id为103的person关联的film,和以releases关系关联了这些film的其他cinema;5: 请帮我找出前120个wordCount为空,id不等于97,或createTime不等于1997年10月11日的comment;",
        "output": "查询语句为:1: match(a:person where a.name='孙建聪')-[e]-(b:tag) return b.value;2: match(a:person where a.name = '李雪')-[e:person_likes_comment]->(b:comment),(c:film where c.name = '泰坦尼克号')-[e2:film_has_tag]->(d:tag)return a, b, c, d;3: match(a:person where n.name=韩思思)-[e:relation]->{1,2}(b:film) return b;4: match(a:person where a.id = '103')-[e]-(b:film)<-[e2:cinema_releases_film]-(c:cinema) return b,c;5: match(a:comment where ((a.wordCount is null) and a.id <> 97) or a.createTime <> '1997-10-11') return a limit 120;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为f0,srcId,f1, 数据为(859,196,true),(553,44,false),(794,101,true)的子查询作为输入表, 源点的srcId等于输入表srcId,返回论坛以创建时间,id分组的名字, 根据名字从大到小排序",
        "output": "with p as (select * from (VALUES(859,196,true),(553,44,false),(794,101,true)) as t(f0,srcId,f1))MATCH (a:forum WHERE a.srcId = p.srcId) RETURN a.name GROUP BY a.createTime, a.id ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('西区','大众影院',33)作为请求表数据,属性分别为address,name,id, 源点的name等于输入表name,查询与film神探狄仁杰和泰坦尼克号都存在film_has_tag关系的点",
        "output": "with p as (select * from (VALUES('西区','大众影院',33)) as t(address,name,id))MATCH (a:film WHERE a.name = p.name AND (a.name = '神探狄仁杰')) -[e:film_has_tag ]->(b) <-[e2:film_has_tag ]-(c:film WHERE c.name = '泰坦尼克号') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有label为标签或用户的点",
        "output": "match(a:tag | user) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与书三体有引用关系且出版商为马红的书籍，并将它们都返回。",
        "output": "match(a:book where a.name = '三体')-[e:refers]->(b:book),(c:publisher where c.name = '马红')-[e2:publish]->(d:book) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到从杜强（person）出发，通过创造了（label为creates）的关系，走了3跳或者4跳后到达的评论节点（comment）。",
        "output": "match(a:person where a.name='杜强')-[e:creates]->{3,4}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表943,876,249, 源点的id等于输入表id,请帮我查找电影院的三角的环,边label为cinema_releases_film, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(943),(876),(249)) as t(id)) MATCH (a:cinema WHERE a.id = p.id) -[e:cinema_releases_film ]->(b) -[e2:cinema_releases_film ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找seller ask的buyer,返回其源点的height乘height的值,以及目标点的age的平均值除66的数量",
        "output": "match(a:seller)-[e:ask]->(b:buyer) return a.height * a.height, COUNT(AVG(b.age) / 66)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person徐月喜欢的person,被其他person喜欢的数量",
        "output": "match(a:person where a.name='徐月')-[e:likes]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 返回用户Bob喜欢的帖子,被其他用户喜欢的数量;2: 查询20个名为李雪的点发布的类型是帖子的节点,且其名字为Post_386且语言为Japanese;3: 帮我查询名为杜建聪的点喜欢的帖子;4: 给出和用户有关联的帖子节点,并根据其价值,id,字数分组,返回价值,id,字数,以及wordCount的最小值除718的最小值;5: 帮我查询源点名字为周强或薪资不为空,且年龄在39到82之间,边标签等于user_publish_post,且满足条件源点id不等于104或目标点id小于等于23的边,返回这些边的weight的最小值加105.64对2取余减25的值;",
        "output": "查询语句为:1: match(a:user where a.name='Bob')-[e:user_likes_post]->(b:post)<-[e2:user_likes_post]-(c:user) return COUNT(c);2: match(a where a.name='李雪')-[e:user_publish_post]->(b:post where b.name = 'Post_386' and b.lang = 'Japanese') return b limit 20;3: match(a where a.name='杜建聪')-[e:user_likes_post]->(b:post) return b;4: match(a:user)-[e:user_likes_post]-(b:post) return b.value, b.id, b.wordCount, MIN(MIN(b.wordCount) / 718) group by b.value, b.id, b.wordCount;5: match(a where (a.name = '周强' or (a.salary is not null)) and (a.age BETWEEN 39 AND 82))-[e:user_publish_post where e.srcId <> 104 or e.targetId <= 23]->(b) return MIN(e.weight) + 105.64 % 2 - 25;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以31作为输入调用personalRank函数,返回id, value",
        "output": "Call PERSONALRANK(31) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,薪资分组,计算年龄减8乘2430的值",
        "output": "return (a.age - 8) * 2430 group by a.id, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为选择,且源点id不为空,权重不等于109.94,或目标点id在78到192之间的边",
        "output": "match(a)-[e:selects where ((e.srcId is not null) and e.weight <> 109.94) or (e.targetId BETWEEN 78 AND 192)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(683,163.01,true),(881,156.66,true)作为请求表数据,属性分别为f0,weight,f1, 以属性f0作为相等条件,请帮我找出全部和编辑徐梅有关系的书节点,返回这些点的创建时间",
        "output": "with p as (select * from (VALUES(683,163.01,true),(881,156.66,true)) as t(f0,weight,f1))MATCH (a:publisher WHERE a.f0 = p.f0 AND (a.name = '徐梅')) -[e ]-(b:book) RETURN b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与作者有knows关系的作者，以及他们之间相互认识的所有作者。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author)-[e3:knows]->(d:author) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前32个类型是属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为113的点的创建时间",
        "output": "match(a where a.id = 113) return a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询用户马轩发布的帖子,被其他用户发布的数量",
        "output": "match(a:user where a.name='马轩')-[e:user_publish_post]->(b:post)<-[e2:user_publish_post]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以咨询关系关联了卖家陈科的买家",
        "output": "match(a:seller where a.name='陈科')<-[e:consult]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为何建聪的点选择的课程",
        "output": "match(a where a.name='何建聪')-[e:selects]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id分组,计算价值对110取余的值",
        "output": "return a.value % 110 group by a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找24个与杜宏和李国强都存在关系的orders节点",
        "output": "match(a where a.name='杜宏')-[e]->(b:orders)<-[e2]-(c where c.name='李国强') return b limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到company所属的城市",
        "output": "match(a:city)<-[e:belong]-(b:company where b.name='字节') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(61,'古代',540),(19,'古代',844)作为请求表数据,属性分别为id,name,value, 以属性id作为相等条件,查询189个与Post_297和Post_257都存在关系的标签节点",
        "output": "with p as (select * from (VALUES(61,'古代',540),(19,'古代',844)) as t(id,name,value))MATCH (a WHERE a.id = p.id AND (a.name = 'Post_297')) -[e ]->(b:tag) <-[e2 ]-(c WHERE c.name = 'Post_257') RETURN b LIMIT 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,age,id, 数据为(175,44,81),(152,83,24),(176,56,75),(167,52,66), 源点的height等于输入表height,请帮我查找和person有关联的person节点,并根据其height,id分组,返回height,id,以及id对60取余的个数",
        "output": "with p as (select * from (VALUES(175,44,81),(152,83,24),(176,56,75),(167,52,66)) as t(height,age,id))MATCH (a:person WHERE a.height = p.height) -[e:person_pay_person ]-(b:person) RETURN b.height, b.id, COUNT(b.id % 60) GROUP BY b.height, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对16取余的最小值",
        "output": "MIN(a.id % 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出中国军事论坛。",
        "output": "match(a:forum where a.name = '中国军事论坛') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和读者周国强有关的作家,称为X,再给出和这个X有关联的其他读者,以及和X有关联的作家",
        "output": "match(a:reader where a.name = '周国强')-[e]-(b:author), (b:author)-[e2]-(c:reader),(b:author)-[e3]-(d:author) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以438,909,818作为请求点id, 源点的id等于输入表id,返回名为黄建聪的publisher,以及与其有关的publisher,并返回黄建聪的name和这些publisher的salary",
        "output": "with p as (select * from (VALUES(438),(909),(818)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (name = '黄建聪')) -[e ]-(b:publisher) RETURN a.name, b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询帖子Post_232的全部label为相关者的边,并根据目标点id从小到大排列,返回188个",
        "output": "match(a:post where a.name = 'Post_232')-[e:relation]->(b) return b order by e.targetId asc limit 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有用户创建的边，并返回这些边权重加上179.09的平均值，以及目标点ID除以18的值。",
        "output": "match(a:user)-[e:creates]->(b) return AVG(e.weight + 179.09), e.targetId / 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与公司相关的城市节点，并按面积和人口进行分组，然后返回这些信息。",
        "output": "match(a:company)-[e:belong]-(b:city) return b.area, b.peopleNumber group by b.area, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,年龄分组,计算身高乘188乘156的最小值",
        "output": "return MIN(a.height * 188 * 156) group by a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary除4438减4356的最大值",
        "output": "return MAX(a.salary / 4438 - 4356) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出仓库Tugraph的所有相关者,的f0乘f0对180取余的最小值",
        "output": "match(a:repository where a.name= 'Tugraph')-[e:relation]->(b) return MIN(e.f0 * e.f0 % 180)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以publish关系关联了book呐喊的publisher",
        "output": "match(a:book where a.name='呐喊')<-[e:publish]-(b:publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛的三角的环,边label为包含, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表12,533, 源点的id等于输入表id,给出tag以id,name,value分组的value, 根据value从大到小排序",
        "output": "with p as (select * from (VALUES(12),(533)) as t(id)) MATCH (a:tag WHERE a.id = p.id) RETURN a.value GROUP BY a.id, a.name, a.value ORDER BY a.value DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和部门生物学院之间有拥有关系的教师",
        "output": "match(a:department where a.name='生物学院')-[e:has]->(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 查询账号的3跳的环;2: 找出与账号Light有关,且与贷款defaultName有关系的账号节点;3: 返回176个名为defaultName的点存款的label为账号的节点,且其价值不等于965;",
        "output": "查询语句为:1: match(a:account)->{2,2}(b)->(a) return a.id, b.id as b_id;2: match(a:account where a.name='Light')-[e:account_transfer_account]-(b:account)-[e2:account_repay_loan]-(c:loan where c.name='defaultName') return b;3: match(a where a.name='defaultName')-[e:loan_deposit_account]->(b:account where b.value <> 965) return b limit 176;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件等级减4乘275的平均值大于85的节点",
        "output": "match(a where AVG((a.level - 4) * 275) > 85) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(196,8591,'吴月')作为请求表数据,属性分别为height,salary,name, 源点的salary等于输入表salary,返回所有名为韩思琪的,价值不为空,语言不是go的朋友,返回这些朋友的开源,和边的f1",
        "output": "with p as (select * from (VALUES(196,8591,'吴月')) as t(height,salary,name))MATCH (a WHERE a.salary = p.salary AND (a.name = '韩思琪')) -[e:friend ]->(b WHERE b.value IS NOT NULL AND b.lang <> 'go') RETURN b.openSource, e.f1 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询读者喜欢的书, 令书的名字的值等于喜欢书的读者的名字的平均值, 再查找书关联的书",
        "output": "match(a:reader)-[e:likes]->(b:book) let b.name = AVG((b:book)<-[e2:likes]-(c:reader) => c.name) match(b:book)-[e3:relates]->(d:book) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出74个名为何科的点发布的类型为帖子的节点,且节点字数为空或语言是Japanese",
        "output": "match(a where a.name='何科')-[e:user_publish_post]->(b:post where (b.wordCount is null) or b.lang = 'Japanese') return b limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有172本少年闰土和悲惨世界的共同引用？",
        "output": "match(a:book where a.name='少年闰土')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='悲惨世界') return b limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被何宏支付的人员",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='何宏') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为PR-88和PR-98的,类型是合并请求的点公共的朋友节点的名单",
        "output": "match(a:pullRequest where a.name='PR-88')-[e:friend]->(b)<-[e2:friend]-(c:pullRequest where c.name='PR-98') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与'中国军事论坛'有关联的人员，以及与用户'马思思'有关联的帖子，并返回所有结果。",
        "output": "match(a:forum where a.name = '中国军事论坛')-[e:contain]->(b:person),(c:user where c.name = '马思思')-[e2:publish]->(d:post) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签为大学,目标点标签为部门,标签为大学或课程的边",
        "output": "match(a:university)-[e:university | course]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价格,权重分组,计算id减id的数量",
        "output": "return COUNT(a.id - a.id) group by a.name, a.price, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被医生属于数量大于60的部门,记为relationCount,再查询这些部门属于的处方",
        "output": "match(a:department) let a.relationCount = COUNT((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 60)-[e2:belong]->(c:prescription) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点标签等于person,边标签等于恋人,以及f1为true的边",
        "output": "match(a:person)-[e:lover where e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询71个与Redis和Zookeeper都存在关系的软件或公司节点",
        "output": "match(a where a.name='Redis')-[e]->(b:software | company)<-[e2]-(c where c.name='Zookeeper') return b limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表317,81,242,251,331, 以属性id作为相等条件,帮我查询全部id为10的标签关联的person,和以包含关系关联了这些person的其他论坛",
        "output": "with p as (select * from (VALUES(317),(81),(242),(251),(331)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.id = '10')) -[e ]-(b:person) <-[e2:forum_contain_person ]-(c:forum) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询论坛天涯论坛的label为相关者的边,并根据源点id降序排列,返回108个",
        "output": "match(a:forum where a.name = '天涯论坛')-[e:relation]->(b) return b order by e.srcId desc limit 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和seller韩宏有关的seller,再查询和韩宏ask的其他buyer,返回它们",
        "output": "match(a:seller where a.name = '韩宏')-[e]-(b:seller), (a:seller)-[e2:ask]->(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(4466,'male',163),(6760,'famale',160)作为请求表数据,属性分别为salary,gender,height, 以属性height作为相等条件,给出从person郑轩出发,经过标签为person_pay_person的边,走3跳到达的person点",
        "output": "with p as (select * from (VALUES(4466,'male',163),(6760,'famale',160)) as t(salary,gender,height))MATCH (a:person WHERE a.height = p.height AND (a.name = '郑轩')) -[e:person_pay_person ]->{3,3}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与城市相关联的公司，以及这些公司所属的城市。",
        "output": "match(a:city where a.id = '110')-[e]-(b:city)<-[e2:belong]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被卖家陈建聪回答的买家,和陈建聪回答的买家",
        "output": "match(a:buyer)<-[e:ask]-(b:seller where name = '陈建聪')-[e2:ask]->(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person何国强关联的person,以及认识这些person的person, 令person(b)的薪资等于person(a)的名字, 返回person(a)的id,person(b)的名字,person(c)的薪资",
        "output": "match(a:person where name = '何国强')-[e:relates]->(b:person)<-[e2:knows]-(c:person) let b.salary = a.name return a.id,b.name,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber分组,计算peopleNumber减peopleNumber的值",
        "output": "return a.peopleNumber - a.peopleNumber group by a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person的三角的环,边标签等于喜欢, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的1跳的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以610,391,848,350作为请求点id, 以属性id作为相等条件,请帮我查找全部源点类型是person,边类型是person_creates_comment的边,返回这些边的srcId减43的值,和targetId的最大值对186取余的值",
        "output": "with p as (select * from (VALUES(610),(391),(848),(350)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_creates_comment ]->(b) RETURN e.srcId - 43, MAX(e.targetId) % 186 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询label为药品,名为阿莫新林的点,返回这些点的名字;2: 请帮我找出全部医生以薪资,性别,身高分组的年龄, 根据年龄从小到大排序;3: 查询所有和名为杜宏的doctor有relation关系,或有relation的relation关系的prescription;4: 查找部门急诊部的所有相关者,的f0的最大值对927取余的最大值;5: 查询prescription的1度以内的环;",
        "output": "查询语句为:1: match(a:medicine where a.name = '阿莫新林') return a.name;2: match(a:doctor) return a.age group by a.salary, a.gender, a.height order by a.age asc;3: match(a:doctor where n.name=杜宏)-[e:relation]->{1,2}(b:prescription) return b;4: match(a:department where a.name= '急诊部')-[e:relation]->(b) return MAX(MAX(e.f0) % 927);5: match(a:prescription)->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出身高为192的人的认识的人和这些人有关联的人。",
        "output": "match(a:person where a.height = 192)-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出性别为male，名字不为李科且id小于59的person，按照性别进行降序排序。",
        "output": "match(a:person where a.id < 59 and a.gender = 'male' and a.name <> '李科') return a order by a.gender desc limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询的卖家以及与这些卖家有咨询关系的其他买家。",
        "output": "match(a:seller where a.id = '73')-[e]-(b:seller)<-[e2:consult]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按创建时间降序排序查询以'createTime', 'value'分组的数据。",
        "output": "match(a:forum) return a.createTime group by a.createTime, a.value order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与马建聪有关的人，以及他认识的所有其他人。",
        "output": "match(a:person where a.name = '马建聪')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李月喜欢过的人。",
        "output": "match(a:person where a.name = '李月')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生属于数量大于115的部门,记为relationCount,再查询这些部门属于的部门",
        "output": "match(a:department) let a.relationCount = AVG((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 115)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'iD', 'jN', 49作为输入,返回运算结果",
        "output": "Call PERSONALRANK('iD', 'jN', 49) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有人与人之间的边，如果它们属于'喜欢'的类型，并且源点类型是'人'，目标点类型也是'人'。",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与类型为'person'的元素有关联的'likes'评论，这些评论属于'film'元素，并且这些'film'元素包含'has'标签。",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和药品阿司匹林有关系的医生或药品,返回这些点的价格",
        "output": "match(a:medicine where a.name='阿司匹林')-[e]-(b:doctor | medicine) return b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有和中国诗词论坛有联系的人，或者与这些人有关联的人。",
        "output": "match(a:forum where n.name=中国诗词论坛)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点薪资大于8328,边类型为属于,且满足条件f1不等于false,目标点id是101,源点id为空的边,返回这些边的weight的平均值对117.89取余的值",
        "output": "match(a where a.salary > 8328)-[e:belong where e.f1 <> false and e.targetId = 101 and (e.srcId is null)]->(b) return AVG(e.weight) % 117.89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点标签为person,边标签为申请,并且满足条件权重小于等于135.99或f1不是true的边",
        "output": "match(a:person)-[e:apply where e.weight <= 135.99 or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询与买家孙强存在buyer_consult_seller关系,且与商品椅子存在seller_has_goods关系的卖家节点，返回这些卖家的名字,及买家孙强的名字,及商品椅子的名字",
        "output": "match(a:buyer where a.name='孙强')-[e:buyer_consult_seller]->(b:seller)<-[e2:seller_has_goods]-(c:goods where c.name='椅子') return a.name,b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点id大于等于42且面积小于等于50285且价值小于484,边label为属于,且满足条件源点id等于61或目标点id不是8的边,返回这些边的源点id除116的数量",
        "output": "match(a where a.id >= 42 and a.area <= 50285 and a.value < 484)-[e:belong where e.srcId = 61 or e.targetId <> 8]->(b) return COUNT(e.srcId / 116)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为李月和王月的,类型为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='李月')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='王月') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以支付关系关联了person郑建聪的person",
        "output": "match(a:person where a.name='郑建聪')<-[e:pay]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为孙若涵的节点look的seller或goods或buyer",
        "output": "match(a where a.name='孙若涵')-[e:look]->(b:seller | goods | buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为张国强的电影院,以及与其有关的电影院,并返回张国强的id和这些电影院的地址",
        "output": "match(a:cinema where name = '张国强')-[e]-(b:cinema) return a.id, b.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和国家越南有包含关系的城市,再给出以包含关系关联了越南的城市",
        "output": "match(a:country where a.name = '越南')-[e:contain]->(b:city),(a:country where a.name = '越南')<-[e2:contain]-(c:city)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为87的商品关联的订单,和以取消关系关联了这些订单的其他买家",
        "output": "match(a:goods where a.id = 87)-[e]-(b:orders)<-[e2:cancel]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回拥有仓库Tugraph拥有的事项,的仓库",
        "output": "match(a:repository where name = 'Tugraph')-[e:has]->(b:issue)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为国家,名为澳大利亚的点,返回这些点的价值,名字,id",
        "output": "match(a:country where a.name = '澳大利亚') return a.value, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给所有大学的朋友，或者他们的朋友的朋友。",
        "output": "match(a:university)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算id减1的值",
        "output": "return a.id - 1 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为CSDN的论坛",
        "output": "match(a:forum where a.name = 'CSDN') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为168的forum关联的post,和以likes关系关联了这些post的其他user",
        "output": "match(a:forum where a.id = 168)-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为80的书关联的书, 并将书有关的作家的id的最大值赋值给书的字数, 接着查询书的字数小于80的书关联的书",
        "output": "match(a:book where a.id = 80)-[e:relates]->(b:book) let b.wordCount = MAX((b:book)-[e2]-(c:author) => c.id) match(b:book where b.wordCount < 80)-[e3:relates]->(d:book) return b.wordCount, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出loan的relation,或其relation的relation",
        "output": "match(a:loan)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以67作为请求点id, 源点的id等于输入表id,帮我查询前154个标签等于person_parent_person的边",
        "output": "with p as (select * from (VALUES(67)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_parent_person ]->(b) RETURN e LIMIT 154",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点价值不等于678,边标签为雇佣,且f0大于等于609的边,返回这些边的f0加758的数量",
        "output": "match(a where a.value <> 678)-[e:employee where e.f0 >= 609]->(b) return COUNT(e.f0 + 758)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与学生张月有关系的大学, 返回和这些大学有关联的课程的,课时加38的值",
        "output": "match(a:student where a.name= '张月')-[e]-(b:university)-[e2]-(c:course) return c.courseHour + 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于person的点,返回32个",
        "output": "match(a:person) return a limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和读者王科有关的编辑,再请帮我查找和王科喜欢的其他书,返回它们",
        "output": "match(a:reader where a.name = '王科')-[e]-(b:publisher), (a:reader)-[e2:likes]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person喜欢的person,返回其源点的薪资乘6074的值,以及目标点的age的最小值减79的个数",
        "output": "match(a:person)-[e:likes]->(b:person) return a.salary * 6074, COUNT(MIN(b.age) - 79)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点createTime不等于2014年02月17日且createTime不等于2024年10月15日,或id小于等于90,边label为has,且srcId在55到139之间或f1不等于true或f0在834到998之间的边,返回这些边的targetId加targetId的值",
        "output": "match(a where (a.createTime <> '2014-02-17' and a.createTime <> '2024-10-15') or a.id <= 90)-[e:has where (e.srcId BETWEEN 55 AND 139) or e.f1 <> true or (e.f0 BETWEEN 834 AND 998)]->(b) return e.targetId + e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询doctor belong的department,返回其源点的height加height的最大值,以及目标点的weight的平均值乘weight的平均值",
        "output": "match(a:doctor)-[e:belong]->(b:department) return MAX(a.height + a.height), AVG(AVG(b.weight) * b.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找从电影院横店影院出发,经过标签等于cinema_releases_film的边,走3到5跳到达的电影点;2: 查询所有西虹市首富的点拥有的标签,然后查询西虹市首富被属于的评论,一起返回;3: 请帮我找出cinema UME的全部类型为partner的边,并根据f1从大到小排列,返回64个;4: 找出85个与人人影城和UME都存在关系的person节点;5: 找出与杜国强存在person_likes_comment关系的comment,comment与film存在comment_belong_film关系的点,返回这些点的category;6: 请帮我找出名字是韩思琪或id除93小于8491的person喜欢的评论的名称,以及这些评论 属于的电影的名称;7: 给出label为comment的点,并根据wordCount升序排列;",
        "output": "查询语句为:1: match(a:cinema where a.name='横店影院')-[e:cinema_releases_film]->{3,5}(b:film) return b;2: match(a where a.name = '西虹市首富')-[e:film_has_tag]->(b:tag),(a where a.name = '西虹市首富')<-[e2:comment_belong_film]-(c:comment) return a, b, c;3: match(a:cinema where a.name = 'UME')-[e:partner]->(b) return b order by e.f1 desc limit 64;4: match(a where a.name='人人影城')-[e]->(b:person)<-[e2]-(c where c.name='UME') return b limit 85;5: match(a where a.name = '杜国强')-[e:person_likes_comment]->(b:comment)-[e2:comment_belong_film]->(c:film) return c.category;6: match(a:person where a.name = '韩思琪' or a.id / 93 < 8491)-[e:person_likes_comment]->(b:comment)-[e2:comment_belong_film]->(c:film) return b.name as b_name, c.name as c_name;7: match(a:comment) return a order by a.wordCount asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询114个和label为部门的点有拥有关系的医生,并且和这些医生有属于关系的部门",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c limit 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与王梅相关的贷款以及她申请的其他贷款。",
        "output": "match(a:person where a.name = '王梅')-[e]-(b:loan), (a:person)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找仓库拥有的用户,返回其源点的stars的和乘409的值,以及目标点的年龄加69的数量",
        "output": "match(a:repository)-[e:has]->(b:user) return SUM(a.stars) * 409, COUNT(b.age + 69)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为Prescription_116的处方,以及与其有关的处方,并返回Prescription_116的创建时间和这些处方的id",
        "output": "match(a:prescription where name = 'Prescription_116')-[e]-(b:prescription) return a.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找183个创建时间不等于2017年09月23日的账号,根据id升序排列",
        "output": "match(a:account where a.createTime <> '2017-09-23') return a order by a.id asc limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部大学的相关者,或其相关者的相关者",
        "output": "match(a:university)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与帖子 Post_241 有喜欢关系的用户",
        "output": "match(a:post where a.name='Post_241')<-[e:likes]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale',155,32),('famale',154,2),('famale',197,70)作为请求表数据,属性分别为gender,height,id, 源点的height等于输入表height,查询和订单Order_493有orders_contain_goods关系的商品,以及和买家马伟有buyer_creates_orders关系的订单,将它们都返回",
        "output": "with p as (select * from (VALUES('famale',155,32),('famale',154,2),('famale',197,70)) as t(gender,height,id))MATCH (a:orders WHERE a.height = p.height AND (a.name = 'Order_493')) -[e:orders_contain_goods ]->(b:goods) , (c:buyer WHERE c.name = '马伟') -[e2:buyer_creates_orders ]->(d:orders) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有马月点赞的人，以及所有给马月付款的人，并将结果一起返回。",
        "output": "match(a where a.name = '马月')-[e:likes]->(b:person),(a where a.name = '马月')<-[e2:pay]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person周科之间有认识关系的person",
        "output": "match(a:person where a.name='周科')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height,salary,gender分组,计算salary减8218的平均值",
        "output": "return AVG(a.salary - 8218) group by a.height, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表273,841,648, 源点的id等于输入表id,请帮我找出与person徐月有关系的person的id",
        "output": "with p as (select * from (VALUES(273),(841),(648)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '徐月')) -[e ]-(b:person) RETURN b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与java程序设计存在引用关系的书,书与书存在引用关系的点,返回这些点的价格",
        "output": "match(a where a.name = 'java程序设计')-[e:refers]->(b:book)-[e2:refers]->(c:book) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出卖家回答的买家,返回其源点的id除96的值,以及目标点的年龄减40的值",
        "output": "match(a:seller)-[e:ask]->(b:buyer) return a.id / 96, b.age - 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(9161,187,'周建国'),(7402,198,'黄国强'),(4723,194,'徐建国')作为请求表数据,属性分别为salary,height,name, 源点的salary等于输入表salary,查找卖家陈雪拥有的商品,被其他卖家拥有的数量",
        "output": "with p as (select * from (VALUES(9161,187,'周建国'),(7402,198,'黄国强'),(4723,194,'徐建国')) as t(salary,height,name))MATCH (a:seller WHERE a.salary = p.salary AND (a.name = '陈雪')) -[e:seller_has_goods ]->(b:goods) <-[e2:seller_has_goods ]-(c:seller) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 给出182个名为周梅的点publish的label为book的节点,且其name等于孤城;2: 给出前81个类型是book_refers_book的边;3: 返回与作家马思思有关系的作家, 返回和这些作家有关联的读者的,salary的平均值乘8297的值;4: 请帮我找出和book呐喊有book_refers_book关系的book,再请帮我找出以book_refers_book关系关联了呐喊的book;5: 请帮我找出与读者张红有关系的读者的名字;6: 返回标签为publisher的点,返回150个;7: 找出从读者杜宏出发,经过label为reader_likes_book的边,走1度或2度到达的书点;8: 查找以knows关系关联了book罪与罚的book;9: 请帮我查找与名为何宏和韩建聪的点共同likes的,类型是book的节点;",
        "output": "查询语句为:1: match(a where a.name='周梅')-[e:publisher_publish_book]->(b:book where b.name = '孤城') return b limit 182;2: match(a)-[e:book_refers_book]->(b) return e limit 81;3: match(a:author where a.name= '马思思')-[e]-(b:author)-[e2]-(c:reader) return AVG(c.salary) * 8297;4: match(a:book where a.name = '呐喊')-[e:book_refers_book]->(b:book),(a:book where a.name = '呐喊')<-[e2:book_refers_book]-(c:book)return a, b, c;5: match(a:reader where a.name='张红')-[e]-(b:reader) return b.name;6: match(a:publisher) return a limit 150;7: match(a:reader where a.name='杜宏')-[e:reader_likes_book]->{1,2}(b:book) return b;8: match(a:book where a.name='罪与罚')<-[e:knows]-(b:book) return b;9: match(a where a.name = '何宏')-[e:reader_likes_book]->(b:book)<-[e2:reader_likes_book]-(c where c.name = '韩建聪') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出79个repository Kafka和XXRepo,共同的relation",
        "output": "match(a:repository where a.name='Kafka')-[e:relation]->(b)<-[e2:relation]-(c:repository where c.name='XXRepo') return b limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和label为用户的点有喜欢关系的仓库,并且和这些仓库有拥有关系的用户,并且和这些用户有创造关系的事项",
        "output": "match(a:user)-[e:likes]->(b:repository)-[e2:has]->(c:user)-[e3:creates]->(d:issue) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查询类型是book_refers_book,且f0小于等于686的边;2: 查询与author黄梅有关系的reader, 返回和这些reader有关联的book的,price乘45的和;3: 找出author的1跳以内的环;4: 返回83个与张若涵和马月都存在关系的编辑节点;5: 请帮我查找全部id为147的书关联的书,和以撰写关系关联了这些书的其他作家;6: 帮我查询书以id,价格分组的字数, 根据字数从小到大排序;",
        "output": "查询语句为:1: match(a)-[e:book_refers_book where e.f0 <= 686]->(b) return e;2: match(a:author where a.name= '黄梅')-[e]-(b:reader)-[e2]-(c:book) return SUM(c.price * 45);3: match(a:author)->{0,0}(b)->(a) return a.id, b.id as b_id;4: match(a where a.name='张若涵')-[e]->(b:publisher)<-[e2]-(c where c.name='马月') return b limit 83;5: match(a:book where a.id = '147')-[e]-(b:book)<-[e2:author_write_book]-(c:author) return b,c;6: match(a:book) return a.wordCount group by a.id, a.price order by a.wordCount asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表933, 以属性id作为相等条件,查询id为11的person有关的person的friend, 再查询和person有关系的friend",
        "output": "with p as (select * from (VALUES(933)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (id = '11')) -[e ]-(b:person) -[e2:friend ]->(c) , (b:person) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person孙思思有关系的person的名字",
        "output": "match(a:person where a.name='孙思思')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和用户郑国强之间有创造关系的事项",
        "output": "match(a:user where a.name='郑国强')-[e:creates]->(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回源点标签为company,边标签为company_cooperate_university的边,返回这些边的srcId减184的数量,和targetId减127除170的最小值;2: 查询199个城市巴黎和东京,共同的伙伴;3: 给出被city上海contain的company;",
        "output": "查询语句为:1: match(a:company)-[e:company_cooperate_university]->(b) return COUNT(e.srcId - 184), MIN((e.targetId - 127) / 170);2: match(a:city where a.name='巴黎')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='东京') return b limit 199;3: match(a:company)<-[e:city_contain_company]-(b:city where b.name='上海') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为撰写,以及满足条件权重在143.78到169.11之间的边",
        "output": "match(a)-[e:write where (e.weight BETWEEN 143.78 AND 169.11)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有名为Order_297的点contain的goods",
        "output": "match(a where a.name='Order_297')-[e:orders_contain_goods]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出《呐喊》中引用了其他书籍的引用点，并返回这些引用点的引用书籍类别。",
        "output": "match(a where a.name = '呐喊')-[e:refers]->(b:book)-[e2:refers]->(c:book) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与Kate有pay关系、与何梅有likes关系的人。这些人包括他们的性别、姓名和年龄，以及Kate的性别和何梅的薪水。",
        "output": "match(a:person where a.name='kate')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='何梅') return a.gender,b.gender, b.name, b.age,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为复旦大学的university,以及与其有关的course,并返回复旦大学的level和这些course的value",
        "output": "match(a:university where name = '复旦大学')-[e]-(b:course) return a.level, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "area的最大值加67976的值",
        "output": "MAX(a.area) + 67976",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与电影星际穿越有拥有关系的1跳的环",
        "output": "match(a:film where name = '星际穿越')-[e:has]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与书计算机网络有关系的书, 返回和这些书有关联的书的,id的个数对65取余加206的求和值",
        "output": "match(a:book where a.name= '计算机网络')-[e]-(b:book)-[e2]-(c:book) return SUM(COUNT(c.id) % 65 + 206)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight减328的平均值",
        "output": "AVG(a.weight - 328)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(25,'何科','male'),(99,'陈伟','famale'),(76,'韩思琪','male')作为请求表数据,属性分别为age,name,gender, 源点的gender等于输入表gender,给出56个与吴建聪和赵思琪都存在关系的person节点",
        "output": "with p as (select * from (VALUES(25,'何科','male'),(99,'陈伟','famale'),(76,'韩思琪','male')) as t(age,name,gender))MATCH (a WHERE a.gender = p.gender AND (a.name = '吴建聪')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '赵思琪') RETURN b LIMIT 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与电影院大众影院和人人影城都存在上映关系的点",
        "output": "match(a:cinema where a.name='大众影院')-[e:releases]->(b)<-[e2:releases]-(c:cinema where c.name='人人影城') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与美团有合作关系的大学",
        "output": "match(a:company where a.name='美团')<-[e:cooperate]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找地址为A座的部门拥有的医生的名称,以及这些医生 创造的处方的名称",
        "output": "match(a:department where a.address = 'A座')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 查找和公司Bilibili有关的person,再查找和Bilibili company_apply_loan的其他贷款,返回它们;2: 返回person黄若涵的全部label为friend的边,并根据targetId升序排列,返回9个;3: 请帮我找出和person张思思有person_own_account关系的账号,以及和person黄思琪有person_own_account关系的账号,将它们都返回;4: 找出和公司有关联的贷款节点,并根据其id分组,返回id,以及id加69的值;5: 请帮我查找账号BIN还款的贷款,被其他账号还款的数量;6: 给出14个person王伟和徐思思,共同的相关者;7: 查询前22个类型是person_apply_loan的边;8: 查找被person韩强申请的贷款;9: 帮我查询137个age大于75或id不为空的person,根据name升序排列;",
        "output": "查询语句为:1: match(a:company where a.name = 'Bilibili')-[e]-(b:person), (a:company)-[e2:company_apply_loan]->(c:loan) return a, b, c;2: match(a:person where a.name = '黄若涵')-[e:friend]->(b) return b order by e.targetId asc limit 9;3: match(a:person where a.name = '张思思')-[e:person_own_account]->(b:account),(c:person where c.name = '黄思琪')-[e2:person_own_account]->(d:account)return a, b, c, d;4: match(a:company)-[e:company_apply_loan]-(b:loan) return b.id, b.id + 69 group by b.id;5: match(a:account where a.name='BIN')-[e:account_repay_loan]->(b:loan)<-[e2:account_repay_loan]-(c:account) return COUNT(c);6: match(a:person where a.name='王伟')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='徐思思') return b limit 14;7: match(a)-[e:person_apply_loan]->(b) return e limit 22;8: match(a:loan)<-[e:person_apply_loan]-(b:person where b.name='韩强') return a, b;9: match(a:person where a.age > 75 or (a.id is not null)) return a order by a.name asc limit 137;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点名字不是吴伟或身高不为空,且年龄小于等于186,目标点创建时间不等于2015年12月15日且权重是883,权重在328到882之间,且类型为创造的边",
        "output": "match(a where (a.name <> '吴伟' or (a.height is not null)) and a.age <= 186)-[e:creates]->(b where b.createTime <> '2015-12-15' and b.weight = 883 and (b.weight BETWEEN 328 AND 882)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为大众影院的电影院,以及与其有关的标签,并返回大众影院的地址和这些标签的id",
        "output": "match(a:cinema where name = '大众影院')-[e]-(b:tag) return a.address, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以377作为请求点id, 以属性id作为相等条件,帮我查询和comment Comment_430有2跳关系的tag",
        "output": "with p as (select * from (VALUES(377)) as t(id)) MATCH (a:comment WHERE a.id = p.id AND (a.name = 'Comment_430')) -[e ]->{2,2}(b:tag) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为Post_328的,名字为其他或价值小于437的伙伴,返回这些伙伴的名字,和边的f0,权重,目标点id",
        "output": "match(a where a.name='Post_328')-[e:partner]->(b where b.name = '其他' or b.value < 437) return b.name,e.f0, e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找153个person张思思和马若涵,共同的朋友",
        "output": "match(a:person where a.name='张思思')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='马若涵') return b limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为张建聪的,价值大于42或id小于682的伙伴,返回这些伙伴的星数,和边的f0,源点id,f1",
        "output": "match(a where a.name='张建聪')-[e:partner]->(b where b.value > 42 or b.id < 682) return b.stars,e.f0, e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与周若涵存在同事关系的person,person与person存在家人关系的点,返回这些点的id",
        "output": "match(a where a.name = '周若涵')-[e:colleague]->(b:person)-[e2:family]->(c:person) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询101个既在皮肤科又在耳鼻喉科的朋友",
        "output": "match(a:department where a.name='皮肤科')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='耳鼻喉科') return b limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表26,34, 以属性id作为相等条件,请帮我查找124个和标签等于country的点有country_contain_city关系的city,且和这些city有city_contain_company关系的company",
        "output": "with p as (select * from (VALUES(26),(34)) as t(id)) MATCH (a:country WHERE a.id = p.id) -[e:country_contain_city ]->(b:city) -[e2:city_contain_company ]->(c:company) RETURN c LIMIT 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和买家李雪有关系的订单或卖家或商品,返回这些点的id,身高,年龄",
        "output": "match(a:buyer where a.name='李雪')-[e]-(b:orders | seller | goods) return b.id, b.height, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表142, 以属性id作为相等条件,请帮我查找prescription的3度以内的环",
        "output": "with p as (select * from (VALUES(142)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person有关系的person节点,且person节点的gender不是male,并返回这些person的salary除7979的值,以及person的age减67加89的数量",
        "output": "match(a:person)-[e]->(b:person where b.gender <> 'male') return b.salary / 7979, COUNT(b.age - 67 + 89)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询城市属于的国家,返回其源点的面积对34153取余的和,以及目标点的人数减12905的值",
        "output": "match(a:city)-[e:belong]->(b:country) return SUM(a.area % 34153), b.peopleNumber - 12905",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家李思琪查看的商品,以及拥有这些商品的卖家, 令买家的id等于买家的名字的平均值,令卖家的名字等于买家的薪资的个数, 返回买家的id,商品的价值,卖家的名字",
        "output": "match(a:buyer where name = '李思琪')-[e:look]->(b:goods)<-[e2:has]-(c:seller) let a.id = AVG(a.name),let c.name = COUNT(a.salary) return a.id,b.value,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与68个公司类型的点有归属关系的城市，以及这些城市中包含的公司。",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:company) return c limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和patient点有accept关系的prescription节点,且边满足条件f1不等于false,目标prescription节点name是Prescription_171",
        "output": "match(a:patient)-[e:accept where e.f1 <> false]->(b:prescription where b.name = 'Prescription_171') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照年龄和性别分组，找出每个人的ID,然后按从大到小的顺序排序。",
        "output": "match(a:person) return a.id group by a.age, a.gender order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王建国喜欢的评论，以及这些评论所属电影的ID",
        "output": "match(a:person where name = '王建国')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person孙宏创造的评论,和孙宏观看的电影",
        "output": "match(a:comment)<-[e:creates]-(b:person where name = '孙宏')-[e2:watch]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查找university以name,level,value分组的value, 根据value降序排序",
        "output": "match(a:university) return a.value group by a.name, a.level, a.value order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和comment Comment_122有belong关系的film,再查找以belong关系关联了Comment_122的film",
        "output": "match(a:comment where a.name = 'Comment_122')-[e:belong]->(b:film),(a:comment where a.name = 'Comment_122')<-[e2:belong]-(c:film)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为193的大学关联的公司,和以包含关系关联了这些公司的其他城市",
        "output": "match(a:university where a.id = 193)-[e]-(b:company)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询前174个类型是company_apply_loan的边",
        "output": "match(a)-[e:company_apply_loan]->(b) return e limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到同时被Bilibili和字节标记为城市的节点。",
        "output": "match(a where a.name = 'Bilibili')-[e:belong]->(b:city)<-[e2:belong]-(c where c.name = '字节') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为14的点的id,名字",
        "output": "match(a where a.id = 14) return a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height的数量乘height的平均值",
        "output": "AVG(COUNT(a.height) * a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以587,234,425,733作为请求点id, 源点的id等于输入表id,查询id为196的点的name",
        "output": "with p as (select * from (VALUES(587),(234),(425),(733)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '196')) RETURN a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与buyer郑建国有关,且与goods书有关系的orders节点",
        "output": "match(a:buyer where a.name='郑建国')-[e:creates]-(b:orders)-[e2:contain]-(c:goods where c.name='书') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询眼科部门中，与马国强患者有关的医生。",
        "output": "match(a:department where a.name='眼科')-[e:has]-(b:doctor)-[e2:diagnose]-(c:patient where c.name='马国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company微软有关的city,称为X,再返回和这个X有关联的其他university,以及和X有关联的company",
        "output": "match(a:company where a.name = '微软')-[e]-(b:city), (b:city)-[e2]-(c:university),(b:city)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与用户张梅有关系的事项, 返回和这些事项有关联的事项的,权重除权重的值",
        "output": "match(a:user where a.name= '张梅')-[e]-(b:issue)-[e2]-(c:issue) return c.weight / c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为李思思的person,以及与其有关的person,并返回李思思的薪资和这些person的身高",
        "output": "match(a:person where name = '李思思')-[e]-(b:person) return a.salary, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找138个和类型是大学的点有拥有关系的部门,且和这些部门有拥有关系的教师",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher) return c limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为70的点的价值",
        "output": "match(a where a.id = 70) return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找person李建聪的label为朋友的边,并根据f0从小到大排列,返回135个;2: 请帮我查找类型是person的所有点,并根据性别从小到大排列;3: 查询标签为person的点,并根据id降序排列;4: 查询和person周红有关系的person节点,返回这些点的id;5: 返回全部person以薪资分组的年龄, 根据年龄从小到大排序;6: 返回和person周若涵有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person;7: 请帮我查找全部和person徐若涵之间有person_likes_person关系的person;8: 找出person支付的person,返回其源点的年龄对42取余的值,以及目标点的年龄除28的数量;9: 请帮我查找和person有关联的person节点,并根据其id,salary,gender分组,返回id,salary,gender,以及age乘78的值;",
        "output": "查询语句为:1: match(a:person where a.name = '李建聪')-[e:friend]->(b) return b order by e.f0 asc limit 135;2: match(a:person) return a order by a.gender asc;3: match(a:person) return a order by a.id desc;4: match(a:person where a.name='周红')-[e]-(b:person) return b.id;5: match(a:person) return a.age group by a.salary order by a.age asc;6: match(a:person where a.name = '周若涵')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;7: match(a:person where a.name='徐若涵')-[e:person_likes_person]->(b:person) return b;8: match(a:person)-[e:person_pay_person]->(b:person) return a.age % 42, COUNT(b.age / 28);9: match(a:person)-[e:person_knows_person]-(b:person) return b.id, b.salary, b.gender, b.age * 78 group by b.id, b.salary, b.gender;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有forum点，按ID从小到大排序。",
        "output": "match(a:forum) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有标签为'国家'且名称为'澳大利亚'的点，并返回它们的名字",
        "output": "match(a:country where a.name = '澳大利亚') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有源点类型为部门,边类型为department_has_student,且目标点id大于等于188或目标点id减14对16取余的平均值大于160.38的边",
        "output": "match(a:department)-[e:department_has_student where e.targetId >= 188 or AVG(e.targetId - 14 % 16) > 160.38]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为马国强的点喜欢的书",
        "output": "match(a where a.name='马国强')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为85的person认识的person, 并将person有关的person的身高的求和值赋值给person(b)的身高, 接着查询person(b)的身高小于85的person认识的person",
        "output": "match(a:person where a.id = 85)-[e:knows]->(b:person) let b.height = SUM((b:person)-[e2]-(c:person) => c.height) match(b:person where b.height < 85)-[e3:knows]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为157的person关联的person, 并将person有关的person的性别的最大值赋值给person(b)的薪资, 接着查询person(b)的薪资小于157的person关联的person",
        "output": "match(a:person where a.id = 157)-[e:relates]->(b:person) let b.salary = MAX((b:person)-[e2]-(c:person) => c.gender) match(b:person where b.salary < 157)-[e3:relates]->(d:person) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询user徐国强的全部类型是friend的边,并根据timeStamp从大到小排列,返回34个",
        "output": "match(a:user where a.name = '徐国强')-[e:friend]->(b) return b order by e.timeStamp desc limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被合并请求属于数量大于60的仓库,记为relationCount,再查询这些仓库属于的事项",
        "output": "match(a:repository) let a.relationCount = AVG((a:repository)<-[e:belong]-(b:pullRequest) => b.id) match(a where a.relationCount > 60)-[e2:belong]->(c:issue) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出86个与Tugraph和Kafka都存在关系的issue节点",
        "output": "match(a where a.name='Tugraph')-[e]->(b:issue)<-[e2]-(c where c.name='Kafka') return b limit 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的身高加185的值",
        "output": "match(a:person) return a.height + 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person张雪的类型为相关者的边,并根据f0降序排列,返回27个",
        "output": "match(a:person where a.name = '张雪')-[e:relation]->(b) return b order by e.f0 desc limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出喜欢Post_232的用户。",
        "output": "match(a:post where a.name='Post_232')<-[e:likes]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生诊断的病人, 令病人的性别的值等于诊断病人的医生的年龄的平均值, 再查找病人接受的处方",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) let b.gender = AVG((b:patient)<-[e2:diagnose]-(c:doctor) => c.age) match(b:patient)-[e3:accept]->(d:prescription) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找buyer的朋友，或者朋友的朋友",
        "output": "match(a:buyer)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为user,名为孙强的点,返回这些点的name,id",
        "output": "match(a:user where a.name = '孙强') return a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为35的前113个国家，按照价值从低到高排序。",
        "output": "match(a:country where a.id = 35) return a order by a.value asc limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与张月存在pay关系的person,person与person存在knows关系的点,返回这些点的age",
        "output": "match(a where a.name = '张月')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找university has的department, 令department的name的值等于belongdepartment的course的name的最大值, 再查找department has的teacher",
        "output": "match(a:university)-[e:has]->(b:department) let b.name = MAX((b:department)<-[e2:belong]-(c:course) => c.name) match(b:department)-[e3:has]->(d:teacher) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的2跳以内的环",
        "output": "match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点名字等于孙伟且年龄大于等于94,目标点类别的最小值大于1441.44或价格在1760.92到3995.84之间,且id为空,且类型是查看的边",
        "output": "match(a where a.name = '孙伟' and a.age >= 94)-[e:look]->(b where (MIN(b.category) > 1441.44 or (b.price BETWEEN 1760.92 AND 3995.84)) and (b.id is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部id为196的city关联的city,和以belong关系关联了这些city的其他company",
        "output": "match(a:city where a.id = 196)-[e]-(b:city)<-[e2:belong]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和事项ISSUE-360有关的仓库,称为X,再请帮我查找和这个X有关联的其他用户,以及和X有关联的用户",
        "output": "match(a:issue where a.name = 'ISSUE-360')-[e]-(b:repository), (b:repository)-[e2]-(c:user),(b:repository)-[e3]-(d:user) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('large',653,'华为'),('medium',724,'蚂蚁集团')作为请求表数据,属性分别为scale,peopleNumber,name, 源点的scale等于输入表scale,查找公司的1度的环",
        "output": "with p as (select * from (VALUES('large',653,'华为'),('medium',724,'蚂蚁集团')) as t(scale,peopleNumber,name))MATCH (a:company WHERE a.scale = p.scale) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回94个身高为空或名字等于赵强或性别不是male的person,根据年龄从大到小排列;2: 帮我查询所有源点label为person,边label为person_likes_person的边,返回这些边的f0的平均值减798的平均值,和targetId加11的值;3: 请帮我找出类型为person的全部点,并根据gender降序排列;4: 找出所有person的相关者,或其相关者的相关者;5: 请帮我查找被person韩宏likes的person;6: 请帮我查找label为person的所有点,并根据名字从大到小排列;",
        "output": "查询语句为:1: match(a:person where (a.height is null) or a.name = '赵强' or a.gender <> 'male') return a order by a.age desc limit 94;2: match(a:person)-[e:person_likes_person]->(b) return AVG(AVG(e.f0) - 798), e.targetId + 11;3: match(a:person) return a order by a.gender desc;4: match(a:person)-[e:relation]->{1,2}(b) return b;5: match(a:person)<-[e:person_likes_person]-(b:person where b.name='韩宏') return a, b;6: match(a:person) return a order by a.name desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点label为论坛,目标点label为帖子,label为论坛的边",
        "output": "match(a:forum)-[e:forum]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为account的点,返回35个",
        "output": "match(a:account) return a limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出拥有部门物理学院拥有的教师,的部门",
        "output": "match(a:department where name = '物理学院')-[e:has]->(b:teacher)<-[e2:has]-(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与黄建聪是同事的人，以及与郑科是朋友的人。",
        "output": "match(a:person where a.name = '黄建聪')-[e:colleague]->(b:person),(c:person where c.name = '郑科')-[e2:friend]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有处方以权重,id,名字分组的创建时间, 根据创建时间降序排序",
        "output": "match(a:prescription) return a.createTime group by a.weight, a.id, a.name order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询商品的1跳以内的环",
        "output": "match(a:goods)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询account Geaflow123 transfer的account,返回account repay的loan的weight减237的值",
        "output": "match(a:account where name = 'Geaflow123')-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return c.weight - 237",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询与名为黄月和孙科的点共同relates的,标签等于person的节点",
        "output": "match(a where a.name = '黄月')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '孙科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为周红的点喜欢的person",
        "output": "match(a where a.name='周红')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出37个person王雪和周国强,共同的朋友",
        "output": "match(a:person where a.name='王雪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='周国强') return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我找出以包含关系关联了大学华中科技大学的城市;2: 查找与country俄罗斯和英国都存在country_contain_city关系的点;3: 请帮我查找和university南京大学有关的country,称为X,再请帮我查找和这个X有关联的其他city,以及和X有关联的city;4: 帮我查询city重庆的所有类型是relation的边,并根据weight升序排列,返回154个;5: 帮我查询和country越南有关的university,再帮我查询和越南country_contain_city的其他city,返回它们;6: 找出大学中国科技大学 属于的城市,返回城市 属于的国家的面积除23925的值 ;7: 找出所有和名为蚂蚁集团的company有friend关系,或有friend的friend关系的university;",
        "output": "查询语句为:1: match(a:university where a.name='华中科技大学')<-[e:city_contain_university]-(b:city) return b;2: match(a:country where a.name='俄罗斯')-[e:country_contain_city]->(b)<-[e2:country_contain_city]-(c:country where c.name='英国') return b;3: match(a:university where a.name = '南京大学')-[e]-(b:country), (b:country)-[e2]-(c:city),(b:country)-[e3]-(d:city) return a, b, c, d;4: match(a:city where a.name = '重庆')-[e:relation]->(b) return b order by e.weight asc limit 154;5: match(a:country where a.name = '越南')-[e]-(b:university), (a:country)-[e2:country_contain_city]->(c:city) return a, b, c;6: match(a:university where name = '中国科技大学')-[e:university_belong_city]->(b:city)-[e2:city_belong_country]->(c:country) return c.area / 23925;7: match(a:company where n.name=蚂蚁集团)-[e:friend]->{1,2}(b:university) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被公司微软雇佣的person",
        "output": "match(a:person)<-[e:employee]-(b:company where b.name='微软') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回名叫马梅的病人。",
        "output": "match(a:patient where a.name = '马梅') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为历史的标签,以及与其有关的论坛,并返回历史的名字和这些论坛的人数",
        "output": "match(a:tag where name = '历史')-[e]-(b:forum) return a.name, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,value, 数据为('巴黎',75,667),('北京',50,328)的子查询作为输入表, 以属性value作为相等条件,请帮我找出label为国家,名为越南的点,返回这些点的id",
        "output": "with p as (select * from (VALUES('巴黎',75,667),('北京',50,328)) as t(name,id,value))MATCH (a:country WHERE a.value = p.value AND (a.name = '越南')) RETURN a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点name不等于吴梅,gender不是male且salary不为空,边标签等于knows,且满足条件f0是761或targetId大于等于135或weight小于148.90的边,返回这些边的targetId乘82乘194乘181.49的值",
        "output": "match(a where a.name <> '吴梅' and a.gender <> 'male' and (a.salary is not null))-[e:knows where e.f0 = 761 or e.targetId >= 135 or e.weight < 148.90]->(b) return e.targetId * 82 * 194 * 181.49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表166,313, 以属性id作为相等条件,返回名为Post_429和Post_326的,label为帖子的点公共的相关者节点的名单",
        "output": "with p as (select * from (VALUES(166),(313)) as t(id)) MATCH (a:post WHERE a.id = p.id AND (a.name = 'Post_429')) -[e:relation ]->(b) <-[e2:relation ]-(c:post WHERE c.name = 'Post_326') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取按id和gender分组的所有人的年龄，并按照年龄降序排列。",
        "output": "match(a:person) return a.age group by a.id, a.gender order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表621,59,198,82,884, 以属性id作为相等条件,查询处方的2跳的环",
        "output": "with p as (select * from (VALUES(621),(59),(198),(82),(884)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 帮我查询和卖家有关联的商品节点,并根据其类别,销量分组,返回类别,销量,以及id的求和值加13的值;2: 请帮我找出112个买家杜月和杜雪,共同的相关者;3: 请帮我查找buyer的三角的环,边标签等于buyer_look_goods, 并返回这些点的id;4: 查找所有和商品手机有关系的订单节点,返回这些点的价格;5: 查找和buyer有关联的orders节点,并根据其name分组,返回name,以及price加977.72的和;6: 查询名为Jack的卖家,以及与其有关的商品,并返回Jack的薪资和这些商品的类别;7: 请帮我查找buyer王建聪 creates的orders,返回orders contain的goods的price减1711.48的最小值 ;8: 返回所有商品以销量,价格分组的id, 根据id从小到大排序;",
        "output": "查询语句为:1: match(a:seller)-[e:seller_has_goods]-(b:goods) return b.category, b.sellerNumber, SUM(b.id) + 13 group by b.category, b.sellerNumber;2: match(a:buyer where a.name='杜月')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='杜雪') return b limit 112;3: match(a:buyer)-[e:buyer_look_goods]->(b)-[e2:buyer_look_goods]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a:goods where a.name='手机')-[e]-(b:orders) return b.price;5: match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.name, SUM(b.price + 977.72) group by b.name;6: match(a:seller where name = 'Jack')-[e]-(b:goods) return a.salary, b.category;7: match(a:buyer where name = '王建聪')-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return MIN(c.price - 1711.48);8: match(a:goods) return a.id group by a.sellerNumber, a.price order by a.id asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出作家撰写的书,返回其源点的身高乘174的数量,以及目标点的字数乘13的值",
        "output": "match(a:author)-[e:write]->(b:book) return COUNT(a.height * 174), b.wordCount * 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出和person有关联的person节点,并根据其年龄,身高,名字分组,返回年龄,身高,名字,以及薪资除薪资的求和值;2: 给出与person有关系的person节点,且person节点的id大于36,并返回这些点的age乘54的值,以及age对15取余的最大值;3: 帮我查询全部person以性别分组的名字, 根据名字升序排序;4: 查找源点height为空且id不为空,边类型为person_likes_person,且满足条件f0是656或targetId大于等于38,且srcId大于等于45的边,返回这些边的weight对180.09取余的值;5: 返回与person陈强有person_knows_person关系的3跳的环;6: 请帮我找出和person张伟有关的person,再请帮我找出和张伟person_pay_person的其他person,返回它们;7: 请帮我找出所有与person郑月有关系的person的gender;8: 返回类型是person的点,返回47个;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person]-(b:person) return b.age, b.height, b.name, SUM(b.salary / b.salary) group by b.age, b.height, b.name;2: match(a:person)-[e]->(b:person where b.id > 36) return b.age * 54, MAX(b.age % 15);3: match(a:person) return a.name group by a.gender order by a.name asc;4: match(a where (a.height is null) and (a.id is not null))-[e:person_likes_person where (e.f0 = 656 or e.targetId >= 38) and e.srcId >= 45]->(b) return e.weight % 180.09;5: match(a:person where name = '陈强')-[e:person_knows_person]->{2,2}(b)->(a) return a.id, b.id as b_id;6: match(a:person where a.name = '张伟')-[e]-(b:person), (a:person)-[e2:person_pay_person]->(c:person) return a, b, c;7: match(a:person where a.name='郑月')-[e]-(b:person) return b.gender;8: match(a:person) return a limit 47;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被repository has数量大于20的user,记为relationCount,再查询这些user has的issue",
        "output": "match(a:user) let a.relationCount = SUM((a:user)<-[e:has]-(b:repository) => b.id) match(a where a.relationCount > 20)-[e2:has]->(c:issue) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点标签为person，边标签为申请的边。返回这些边的目标点id减去7乘以750的结果，以及f0减去885的结果。",
        "output": "match(a:person)-[e:apply]->(b) return (e.targetId - 7) * 750, e.f0 - 885",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 返回42个与大众影院和横店影院都存在关系的电影节点;2: 返回comment Comment_287 belong的film,返回film has的tag的id乘13除98乘521的最大值 ;3: 查询标签等于comment的点,返回115个;4: 找出和person有关联的film节点,并根据其id,name分组,返回id,name,以及value的最小值乘value的最大值;",
        "output": "查询语句为:1: match(a where a.name='大众影院')-[e]->(b:film)<-[e2]-(c where c.name='横店影院') return b limit 42;2: match(a:comment where name = 'Comment_287')-[e:comment_belong_film]->(b:film)-[e2:film_has_tag]->(c:tag) return MAX(c.id * 13 / 98 * 521);3: match(a:comment) return a limit 115;4: match(a:person)-[e:person_watch_film]-(b:film) return b.id, b.name, MAX(MIN(b.value) * b.value) group by b.id, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为医生,边label为属于的边,返回这些边的目标点id减目标点id的值,和源点id减190的平均值",
        "output": "match(a:doctor)-[e:belong]->(b) return e.targetId - e.targetId, AVG(e.srcId - 190)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和person陈国强之间有父母关系的person",
        "output": "match(a:person where a.name='陈国强')-[e:parent]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person张国强有pay关系的1跳的环",
        "output": "match(a:person where name = '张国强')-[e:pay]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为韩梅的点creates的comment",
        "output": "match(a where a.name='韩梅')-[e:creates]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person点有投资关系的公司节点,且边满足条件f1为false,目标公司节点满足条件id不为空",
        "output": "match(a:person)-[e:invest where e.f1 = false]->(b:company where (b.id is not null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 找出所有和company点有cooperate关系的university节点,且边满足条件targetId不为空,目标university节点满足条件name不等于武汉大学;2: 找出标签为公司的所有点,并根据id从小到大排列;3: 返回和公司有关联的大学节点,并根据其id,等级分组,返回id,等级,以及id乘id的平均值;4: 给出和名为谷歌的公司有朋友关系,或有朋友的朋友关系的大学;5: 请帮我查找所有country以value分组的peopleNumber, 根据peopleNumber升序排序;6: 找出所有源点label为公司,目标点label为大学,label为company_cooperate_university的边;7: 找出标签等于city的点,返回114个;8: 返回87个name不等于北京,id为空的city,根据value从小到大排列;9: 请帮我查找源点类型为城市,边类型为city_belong_country的边,返回这些边的源点id对171取余的平均值,和源点id乘84的值;",
        "output": "查询语句为:1: match(a:company)-[e:company_cooperate_university where (e.targetId is not null)]->(b:university where b.name <> '武汉大学') return b;2: match(a:company) return a order by a.id asc;3: match(a:company)-[e:company_cooperate_university]-(b:university) return b.id, b.level, AVG(b.id * b.id) group by b.id, b.level;4: match(a:company where n.name=谷歌)-[e:friend]->{1,2}(b:university) return b;5: match(a:country) return a.peopleNumber group by a.value order by a.peopleNumber asc;6: match(a:company)-[e:company_cooperate_university]->(b:university) return e;7: match(a:city) return a limit 114;8: match(a:city where a.name <> '北京' and (a.id is null)) return a order by a.value asc limit 87;9: match(a:city)-[e:city_belong_country]->(b) return AVG(e.srcId % 171), e.srcId * 84;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和评论Comment_382之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_382')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含伦敦和纽约的点",
        "output": "match(a:city where a.name='伦敦')-[e:contain]->(b)<-[e2:contain]-(c:city where c.name='纽约') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点和目标点都标记为'person'，并且它们之间的边被标记为'喜欢'的边。",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为person,名为赵国强的点,返回这些点的id,薪资",
        "output": "match(a:person where a.name = '赵国强') return a.id, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与医生杜月有关联的部门",
        "output": "match(a:doctor where a.name='杜月')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找到李梅和何月共同教授的课程节点？",
        "output": "match(a where a.name = '李梅')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '何月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与徐国强有关联的家庭成员。",
        "output": "match(a:person where n.name=徐国强)-[e:family]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(95,140,'中国诗词论坛')作为请求表数据,属性分别为peopleNumber,value,name, 源点的peopleNumber等于输入表peopleNumber,给出被post Post_303has的tag",
        "output": "with p as (select * from (VALUES(95,140,'中国诗词论坛')) as t(peopleNumber,value,name))MATCH (a:tag WHERE a.peopleNumber = p.peopleNumber) <-[e:post_has_tag ]-(b:post WHERE b.name = 'Post_303') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边类型为支付, 并返回这些点的id",
        "output": "match(a:person)-[e:pay]->(b)-[e2:pay]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Comment_279是哪些电影被其他观众观看了的数量？",
        "output": "match(a:comment where a.name='Comment_279')-[e:belong]->(b:film)<-[e2:watch]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和university南京大学有2到5跳关系的department",
        "output": "match(a:university where a.name='南京大学')-[e]->{2,5}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与卖家郑伟存在回答关系,且与订单Order_394存在取消关系的买家节点，返回这些买家的年龄,性别,及卖家郑伟的身高,及订单Order_394的价值",
        "output": "match(a:seller where a.name='郑伟')-[e:ask]->(b:buyer)<-[e2:cancel]-(c:orders where c.name='Order_394') return a.height,b.age, b.gender,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以751,696,116作为请求点id, 源点的id等于输入表id,给出名为呐喊的书,以及与其有关的读者,并返回呐喊的id和这些读者的性别",
        "output": "with p as (select * from (VALUES(751),(696),(116)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (name = '呐喊')) -[e ]-(b:reader) RETURN a.id, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person徐建国支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='徐建国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找标签等于prescription的点,返回171个",
        "output": "match(a:prescription) return a limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company谷歌之间有employee关系的person",
        "output": "match(a:company where a.name='谷歌')-[e:employee]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和陈轩有关、购买香蕉的订单。",
        "output": "match(a:buyer where a.name='陈轩')-[e:cancel]-(b:orders)-[e2:contain]-(c:goods where c.name='香蕉') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找由医生赵科诊断过的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='赵科') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含论坛推特包含的用户,的论坛",
        "output": "match(a:forum where name = '推特')-[e:contain]->(b:user)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和国家越南有包含关系的城市,再找出以包含关系关联了越南的城市",
        "output": "match(a:country where a.name = '越南')-[e:contain]->(b:city),(a:country where a.name = '越南')<-[e2:contain]-(c:city)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以697作为请求点id, 以属性id作为相等条件,请帮我查找满足条件薪资不为空的节点",
        "output": "with p as (select * from (VALUES(697)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.salary IS NOT NULL)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找吴思思的伴侣的朋友关系",
        "output": "match(a:person where a.name='吴思思')-[e:partner]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出某人或其父母的父母。",
        "output": "match(a:person)-[e:parent]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为电影且与Comment_247和Comment_365两点都有关联的节点",
        "output": "match(a where a.name = 'Comment_247')-[e:belong]->(b:film)<-[e2:belong]-(c where c.name = 'Comment_365') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从department文学院出发，通过has类型的边，经过1或2次跳跃后到达的teacher节点。",
        "output": "match(a:department where a.name='文学院')-[e:has]->{1,2}(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询和company蚂蚁集团之间有company_belong_city关系的city",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:company_belong_city]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询类型是课程的全部点,并根据学分升序排列",
        "output": "match(a:course) return a order by a.credit asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person黄思琪有关系的person,返回这些点的薪资,年龄,id",
        "output": "match(a:person where a.name='黄思琪')-[e]-(b:person) return b.salary, b.age, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,学分分组,计算价值乘131的值",
        "output": "return a.value * 131 group by a.name, a.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找186个名为杜月的点cancel的类型是orders的节点,且节点value是463或id小于63",
        "output": "match(a where a.name='杜月')-[e:cancel]->(b:orders where b.value = 463 or b.id < 63) return b limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 南京大学和电子科技大学都隶属于哪个大学体系？",
        "output": "match(a:university where a.name='南京大学')-[e:belong]->(b)<-[e2:belong]-(c:university where c.name='电子科技大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出人数不为空,名字等于腾讯,或规格不是small的节点",
        "output": "match(a where ((a.peopleNumber is not null) and a.name = '腾讯') or a.scale <> 'small') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家黄雪撰写的书,被其他读者喜欢的数量",
        "output": "match(a:author where a.name='黄雪')-[e:write]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,name分组,计算id的平均值除id的最小值",
        "output": "return MIN(AVG(a.id) / a.id) group by a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与马建聪和郑轩都有关系的所有person节点",
        "output": "match(a:person where a.name='马建聪')-[e:pay]-(b:person)-[e2:likes]-(c:person where c.name='郑轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按照level和name对university进行分组，然后按level升序排序。",
        "output": "match(a:university) return a.level group by a.level, a.name order by a.level asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为王建聪的点接受的所有处方,并对这些处方的名字进行求和",
        "output": "match(a where a.name='王建聪')-[e:accept]->(b:prescription) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找郑雪担任授课教师的课程，以及与郑雪有教关系的课程。",
        "output": "match(a:teacher where a.name = '郑雪')-[e:teach]->(b:course),(a:teacher where a.name = '郑雪')<-[e2:teach]-(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为Jimmy的seller,以及与其有关的goods,并返回Jimmy的id和这些goods的sellerNumber",
        "output": "match(a:seller where name = 'Jimmy')-[e]-(b:goods) return a.id, b.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person王国强knows的person,被其他person likes的数量",
        "output": "match(a:person where a.name='王国强')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,salary,name, 数据为('male',5139,'孙月')的子查询作为输入表, 源点的name等于输入表name,查询论坛的3度以内的环",
        "output": "with p as (select * from (VALUES('male',5139,'孙月')) as t(gender,salary,name))MATCH (a:forum WHERE a.name = p.name) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与论坛有关系的论坛节点,且论坛节点的创建时间不等于2027年10月18日,并返回这些论坛的价值对171取余的值,以及论坛的id对89取余的值",
        "output": "match(a:forum)-[e]->(b:forum where b.createTime <> '2027-10-18') return b.value % 171, b.id % 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以478,223作为请求点id, 以属性id作为相等条件,给出所有publisher以height,age分组的height, 根据height从大到小排序",
        "output": "with p as (select * from (VALUES(478),(223)) as t(id)) MATCH (a:publisher WHERE a.id = p.id) RETURN a.height GROUP BY a.height, a.age ORDER BY a.height DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有类型是作家或书的点",
        "output": "match(a:author | book) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有公司的peopleNumber的个数乘535的值",
        "output": "match(a:company) return COUNT(a.peopleNumber) * 535",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与公司字节有关,且与国家越南有关系的城市节点",
        "output": "match(a:company where a.name='字节')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='越南') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的最大值除2451的值",
        "output": "MAX(a.salary) / 2451",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,id分组,计算weight的个数除717的最大值",
        "output": "return MAX(COUNT(a.weight) / 717) group by a.weight, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点薪资乘6205小于178或id大于等于33,边类型是查看,且目标点id大于等于100且f1不等于true的边,返回这些边的目标点id除目标点id的值",
        "output": "match(a where a.salary * 6205 < 178 or a.id >= 33)-[e:look where e.targetId >= 100 and e.f1 <> true]->(b) return e.targetId / e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出教师的联系人，或者联系人的联系人",
        "output": "match(a:teacher)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签为部门,目标点标签为学生,标签为教师或部门或课程的边",
        "output": "match(a:department)-[e:teacher | department | course]->(b:student) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为136的点的性别,id",
        "output": "match(a where a.id = 136) return a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我找出162个与呐喊和少年闰土都存在关系的author节点;2: 找出所有名为马科的点喜欢的书;3: 给出源点name是陈强或id大于等于4315或gender不等于male,边标签为reader_likes_book,且满足条件f1不等于true或weight小于等于187.07或f1大于等于21的边,返回这些边的srcId减77的值;4: 帮我查询91个与赵建聪和王思思都存在关系的书节点;5: 查找标签为书的点,并根据id从大到小排列;6: 帮我查询名为陈建国的作家;7: 请帮我查找全部源点类型为book,目标点类型为book,类型为book_refers_book的边;8: 帮我查询label为reader_likes_book,且f1等于true,f1等于false且源点id为空的边;9: 查找所有和book孤城有1到4跳关系的author;",
        "output": "查询语句为:1: match(a where a.name='呐喊')-[e]->(b:author)<-[e2]-(c where c.name='少年闰土') return b limit 162;2: match(a where a.name='马科')-[e:reader_likes_book]->(b:book) return b;3: match(a where a.name = '陈强' or a.id >= 4315 or a.gender <> 'male')-[e:reader_likes_book where e.f1 <> true or e.weight <= 187.07 or e.f1 >= 21]->(b) return e.srcId - 77;4: match(a where a.name='赵建聪')-[e]->(b:book)<-[e2]-(c where c.name='王思思') return b limit 91;5: match(a:book) return a order by a.id desc;6: match(a:author where a.name = '陈建国') return a;7: match(a:book)-[e:book_refers_book]->(b:book) return e;8: match(a)-[e:reader_likes_book where e.f1 = true and e.f1 = false and (e.srcId is null)]->(b) return e;9: match(a:book where a.name='孤城')-[e]->{1,4}(b:author) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出account repay的loan, 令loan的amount的值等于applyloan的company的id的最大值, 再查找loan deposit的account",
        "output": "match(a:account)-[e:repay]->(b:loan) let b.amount = MAX((b:loan)<-[e2:apply]-(c:company) => c.id) match(b:loan)-[e3:deposit]->(d:account) return b.amount, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 请帮我查找和patient吴若涵有patient_accept_prescription关系的prescription,以及和patient黄国强有patient_accept_prescription关系的prescription,将它们都返回;2: 返回与部门有关系的药品节点,且药品节点的id大于62,并返回这些点的price的数量加215的最小值,以及id的和对83取余的个数;3: 查询所有doctor以salary,gender,age分组的height, 根据height降序排序;4: 查询全部源点类型为doctor,边类型为doctor_diagnose_patient的边,返回这些边的weight的和加165.46的平均值,和targetId对198取余乘866的最小值;5: 请帮我找出169个与皮肤科和内科都存在关系的patient节点;6: 帮我查询与名为Sam和王轩的点共同creates的,类型为prescription的节点;7: 帮我查询与patient孙建国存在patient_accept_prescription关系,且与medicine散利痛存在prescription_contain_medicine关系的prescription节点，返回这些prescription的name,及patient孙建国的name,及medicine散利痛的name;8: 给出源点weight大于等于69或weight大于等于436,且address是C栋,边标签为department_has_doctor,且srcId大于93或weight等于149.83或weight小于153.86的边,返回这些边的srcId的和乘197的值;",
        "output": "查询语句为:1: match(a:patient where a.name = '吴若涵')-[e:patient_accept_prescription]->(b:prescription),(c:patient where c.name = '黄国强')-[e2:patient_accept_prescription]->(d:prescription)return a, b, c, d;2: match(a:department)-[e]->(b:medicine where b.id > 62) return MIN(COUNT(b.price) + 215), COUNT(SUM(b.id) % 83);3: match(a:doctor) return a.height group by a.salary, a.gender, a.age order by a.height desc;4: match(a:doctor)-[e:doctor_diagnose_patient]->(b) return AVG(SUM(e.weight) + 165.46), MIN(e.targetId % 198 * 866);5: match(a where a.name='皮肤科')-[e]->(b:patient)<-[e2]-(c where c.name='内科') return b limit 169;6: match(a where a.name = 'Sam')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:doctor_creates_prescription]-(c where c.name = '王轩') return b;7: match(a:patient where a.name='孙建国')-[e:patient_accept_prescription]->(b:prescription)<-[e2:prescription_contain_medicine]-(c:medicine where c.name='散利痛') return a.name,b.name,c.name;8: match(a where (a.weight >= 69 or a.weight >= 436) and a.address = 'C栋')-[e:department_has_doctor where e.srcId > 93 or e.weight = 149.83 or e.weight < 153.86]->(b) return SUM(e.srcId) * 197;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,height,salary, 数据为(88,172,1405),(58,160,3809), 以属性salary作为相等条件,查询book呐喊的所有refers,的targetId加173的平均值",
        "output": "with p as (select * from (VALUES(88,172,1405),(58,160,3809)) as t(age,height,salary))MATCH (a:book WHERE a.salary = p.salary AND (a.name = '呐喊')) -[e:book_refers_book ]->(b) RETURN AVG(e.targetId + 173) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));找出和标签等于reader的点有reader_likes_book关系的book,且和这些book有book_refers_book关系的book,且和这些book有book_refers_book关系的book",
        "output": "match(a:reader)-[e:reader_likes_book]->(b:book)-[e2:book_refers_book]->(c:book)-[e3:book_refers_book]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询包含用户杜红喜欢的帖子,的论坛",
        "output": "match(a:user where name = '杜红')-[e:likes]->(b:post)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和名为知网的论坛有伙伴关系,或有伙伴的伙伴关系的帖子",
        "output": "match(a:forum where n.name=知网)-[e:partner]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 给出全部与software有关系的software节点,且software节点的stars在212到475之间,并返回这些点的value的和对value取余的求和值,以及value对196取余除id的平均值;2: 帮我查询174个person孙轩和赵若涵,共同的friend;3: 返回以属于关系关联了公司谷歌的person;4: 返回前94个age不等于88,height为空的person;",
        "output": "查询语句为:1: match(a:software)-[e]->(b:software where (b.stars BETWEEN 212 AND 475)) return SUM(SUM(b.value) % b.value), AVG(b.value % 196 / b.id);2: match(a:person where a.name='孙轩')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵若涵') return b limit 174;3: match(a:company where a.name='谷歌')<-[e:person_belong_company]-(b:person) return b;4: match(a:person where a.age <> 88 and (a.height is null)) return a limit 94;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有合并请求的id的最小值加id的最小值",
        "output": "match(a:pullRequest) return MIN(MIN(a.id) + a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,age,id, 数据为(161,97,85),(153,49,24),(154,90,57), 源点的age等于输入表age,查询167个创建时间是2011年12月12日或权重不等于686的处方,根据权重降序排列",
        "output": "with p as (select * from (VALUES(161,97,85),(153,49,24),(154,90,57)) as t(height,age,id))MATCH (a:prescription WHERE a.age = p.age AND (a.createTime = '2011-12-12' OR a.weight <> 686)) RETURN a ORDER BY a.weight DESC LIMIT 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄为空且身高不是165的教师教的课程的名称,以及这些课程 属于的部门的名称",
        "output": "match(a:teacher where (a.age is null) and a.height <> 165)-[e:teach]->(b:course)-[e2:belong]->(c:department) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有id为139的处方关联的病人,和以诊断关系关联了这些病人的其他医生",
        "output": "match(a:prescription where a.id = 139)-[e]-(b:patient)<-[e2:diagnose]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为patient的点,返回93个",
        "output": "match(a:patient) return a limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出label为论坛且名称为天涯论坛的点，并返回它们的价值。",
        "output": "match(a:forum where a.name = '天涯论坛') return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签为卖家,边标签为拥有,并且满足条件f1等于true,f1是false的边",
        "output": "match(a:seller)-[e:has where e.f1 = true and e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部和名为巴黎的城市有伙伴关系,或有伙伴的伙伴关系的公司",
        "output": "match(a:city where n.name=巴黎)-[e:partner]->{1,2}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与名为马若涵的人有配偶关系或配偶关系的贷款。",
        "output": "match(a:person where n.name=马若涵)-[e:partner]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有公司－大学合作边。",
        "output": "match(a:company)-[e:cooperate]->(b:university) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出110个与何伟和Tom都存在关系的卖家或订单或商品节点",
        "output": "match(a where a.name='何伟')-[e]->(b:seller | orders | goods)<-[e2]-(c where c.name='Tom') return b limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为使用,并且满足条件f0的最大值减923加141.42对源点id取余不是35且f1是true,f0不为空的边",
        "output": "match(a)-[e:uses where MAX(e.f0) - 923 + 141.42 % e.srcId <> 35 and e.f1 = true and (e.f0 is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为法国的country,以及与其有关的city,并返回法国的area和这些city的name",
        "output": "match(a:country where name = '法国')-[e]-(b:city) return a.area, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找157个名为郑思琪的点likes的类型是person的节点,且其gender不是famale且height不为空",
        "output": "match(a where a.name='郑思琪')-[e:person_likes_person]->(b:person where b.gender <> 'famale' and (b.height is not null)) return b limit 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有关联的标签和以has-a关系关联这些标签的其他电影。",
        "output": "match(a:tag where a.id = '24')-[e]-(b:tag)<-[e2:has]-(c:film) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person认识数量大于120的person,记为relationCount,再查询这些person关联的person",
        "output": "match(a:person) let a.relationCount = MAX((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 120)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person杜月有关的person,再查询和杜月父母的其他person,返回它们",
        "output": "match(a:person where a.name = '杜月')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,名字分组,计算id加id的值",
        "output": "return a.id + a.id group by a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询creates person陈科likes的comment,的person",
        "output": "match(a:person where name = '陈科')-[e:likes]->(b:comment)<-[e2:creates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前192个等级小于等于2或价值为空或等级为空的大学",
        "output": "match(a:university where a.level <= 2 or (a.value is null) or (a.level is null)) return a limit 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 找出所有名为韩红的,name等于Prescription_370的partner,返回这些partner的createTime,和边的targetId,f0;2: 查找doctor周科的所有partner,的srcId除15的最小值;3: 请帮我查找全部名为孙强的点diagnose的patient;4: 返回名为马宏和李思思的,标签等于病人的点公共的相关者节点的名单;5: 给出处方Prescription_139包含的药品,被其他处方包含的数量;6: 查找全部与patient郑宏有关系的department的id;7: 查询所有名为皮肤科的点has的doctor;8: 请帮我找出源点gender是famale或height小于等于3373,边类型是doctor_creates_prescription,且满足条件srcId为空或weight等于180.34的边,返回这些边的srcId对92取余的值;",
        "output": "查询语句为:1: match(a where a.name='韩红')-[e:partner]->(b where b.name = 'Prescription_370') return b.createTime,e.targetId, e.f0;2: match(a:doctor where a.name= '周科')-[e:partner]->(b) return MIN(e.srcId / 15);3: match(a where a.name='孙强')-[e:doctor_diagnose_patient]->(b:patient) return b;4: match(a:patient where a.name='马宏')-[e:relation]->(b)<-[e2:relation]-(c:patient where c.name='李思思') return b.name;5: match(a:prescription where a.name='Prescription_139')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c:prescription) return COUNT(c);6: match(a:patient where a.name='郑宏')-[e]-(b:department) return b.id;7: match(a where a.name='皮肤科')-[e:department_has_doctor]->(b:doctor) return b;8: match(a where a.gender = 'famale' or a.height <= 3373)-[e:doctor_creates_prescription where (e.srcId is null) or e.weight = 180.34]->(b) return e.srcId % 92;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询issue ISSUE-325 belong的repository,返回repository has的pullRequest的id对45取余的最大值",
        "output": "match(a:issue where name = 'ISSUE-325')-[e:belong]->(b:repository)-[e2:has]->(c:pullRequest) return MAX(c.id % 45)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回81个与Prescription_176和Prescription_180都存在关系的医生或部门节点",
        "output": "match(a where a.name='Prescription_176')-[e]->(b:doctor | department)<-[e2]-(c where c.name='Prescription_180') return b limit 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和用户郑思琪之间有喜欢关系的帖子",
        "output": "match(a:user where a.name='郑思琪')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与黄轩存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的年龄",
        "output": "match(a where a.name = '黄轩')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person黄红knows的person,和黄红commits的software",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '黄红')-[e2:commits]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和公司腾讯有关的国家,称为X,再请帮我查找和这个X有关联的其他国家,以及和X有关联的大学",
        "output": "match(a:company where a.name = '腾讯')-[e]-(b:country), (b:country)-[e2]-(c:country),(b:country)-[e3]-(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回郑科喜欢的帖子，再返回与郑科有发布关系的帖子。",
        "output": "match(a:user where a.name = '郑科')-[e:likes]->(b:post),(a:user where a.name = '郑科')<-[e2:publish]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age的最小值对69取余对年龄取余的平均值",
        "output": "AVG(MIN(a.age) % 69 % a.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点类型是person,边类型是person_knows_person,以及f1是true且权重对165.41取余减561大于682,或目标点id的最小值小于等于118.99的边",
        "output": "match(a:person)-[e:person_knows_person where (e.f1 = true and e.weight % 165.41 - 561 > 682) or MIN(e.targetId) <= 118.99]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找类型为prescription、名称为Prescription_358的点，并返回它们的id",
        "output": "match(a:prescription where a.name = 'Prescription_358') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为黄梅和郑强的,标签等于person的点公共的parent节点的名单",
        "output": "match(a:person where a.name='黄梅')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='郑强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为pullRequest的所有点,并根据createTime从大到小排列",
        "output": "match(a:pullRequest) return a order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到黄国强病人的处方中包含哪些药品",
        "output": "match(a:patient where a.name = '黄国强')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为何若涵的点喜欢的person",
        "output": "match(a where a.name='何若涵')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查询所有标签等于person的点;2: 请帮我找出名为Geaflow的点使用的软件,并对这些点的价值进行求和;3: 给出person黄强 属于的公司,返回公司 创造的软件的id减14的求和值 ;4: 帮我查询以使用关系关联了软件Spark的软件;5: 帮我查询全部和名为滴滴的company有partner关系,或有partner的partner关系的software;6: 给出person buy的software,返回其源点的salary的最大值加5447的和,以及目标点的stars加stars的最大值;7: 给出以创造关系关联了软件Spark的公司;",
        "output": "查询语句为:1: match(a:person) return a;2: match(a where a.name='Geaflow')-[e:software_uses_software]->(b:software) return SUM(b.value);3: match(a:person where name = '黄强')-[e:person_belong_company]->(b:company)-[e2:company_creates_software]->(c:software) return SUM(c.id - 14);4: match(a:software where a.name='Spark')<-[e:software_uses_software]-(b:software) return b;5: match(a:company where n.name=滴滴)-[e:partner]->{1,2}(b:software) return b;6: match(a:person)-[e:person_buy_software]->(b:software) return SUM(MAX(a.salary) + 5447), MAX(b.stars + b.stars);7: match(a:software where a.name='Spark')<-[e:company_creates_software]-(b:company) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回182个和类型为person的点有person_knows_person关系的person,以及和这些person有person_pay_person关系的person;2: 帮我查询person的三角的环,边label为person_knows_person, 并返回这些点的id;3: 查询和person有关联的person节点,并根据其name,salary,id分组,返回name,salary,id,以及salary除6129的个数;4: 找出全部源点label为person,边label为person_knows_person的边,返回这些边的权重对127.89取余的和,和源点id对47取余对932取余乘源点id的值;5: 给出person的3跳以内的环;6: 查询源点标签为person,边标签为person_pay_person,并且weight是37,f1不是false的边;7: 返回和person有关联的person节点,并根据其age分组,返回age,以及id乘16的值;8: 给出和person王雪有关的person,再给出和王雪person_knows_person的其他person,返回它们;9: 返回标签为person,名为韩伟的点,返回这些点的salary;",
        "output": "查询语句为:1: match(a:person)-[e:person_knows_person]->(b:person)-[e2:person_pay_person]->(c:person) return c limit 182;2: match(a:person)-[e:person_knows_person]->(b)-[e2:person_knows_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:person)-[e:person_likes_person]-(b:person) return b.name, b.salary, b.id, COUNT(b.salary / 6129) group by b.name, b.salary, b.id;4: match(a:person)-[e:person_knows_person]->(b) return SUM(e.weight % 127.89), e.srcId % 47 % 932 * e.srcId;5: match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id;6: match(a:person)-[e:person_pay_person where e.weight = 37 and e.f1 <> false]->(b) return e;7: match(a:person)-[e:person_pay_person]-(b:person) return b.age, b.id * 16 group by b.age;8: match(a:person where a.name = '王雪')-[e]-(b:person), (a:person)-[e2:person_knows_person]->(c:person) return a, b, c;9: match(a:person where a.name = '韩伟') return a.salary;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和名为陈强的person有相关者关系,或有相关者的相关者关系的person",
        "output": "match(a:person where n.name=陈强)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表158,799,492,401, 以属性id作为相等条件,找出全部和公司美团之间有company_belong_city关系的城市",
        "output": "with p as (select * from (VALUES(158),(799),(492),(401)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '美团')) -[e:company_belong_city ]->(b:city) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,gender, 数据为(5,'张建聪','famale'),(67,'Tom','famale'),(96,'何宏','famale')的子查询作为输入表, 以属性gender作为相等条件,返回label为书,名为百年孤独的点,返回这些点的名字",
        "output": "with p as (select * from (VALUES(5,'张建聪','famale'),(67,'Tom','famale'),(96,'何宏','famale')) as t(id,name,gender))MATCH (a:book WHERE a.gender = p.gender AND (a.name = '百年孤独')) RETURN a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "将评论作为起点，电影作为终点，类型为归属的边",
        "output": "match(a:comment)-[e:belong]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与Geaflow123存在还款关系的贷款,贷款与账号存在存款关系的点,返回这些点的创建时间",
        "output": "match(a where a.name = 'Geaflow123')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与帖子相关的帖子，以及这些帖子的喜欢者。",
        "output": "match(a:post where a.id = '64')-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型是doctor,目标点类型是prescription,类型是prescription的边",
        "output": "match(a:doctor)-[e:prescription]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询has user张若涵的repository,和这些repository has的issue",
        "output": "match(a:user where name = '张若涵')<-[e:has]-(b:repository)-[e2:has]->(c:issue) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 查找所有和名为郑伟的买家有相关者关系,或有相关者的相关者关系的商品;2: 查找name等于黄建聪或age为空,且height不为空的节点;3: 找出66个buyer赵建聪和黄若涵,共同的friend;4: 请帮我查找以咨询关系关联了卖家黄科的买家;",
        "output": "查询语句为:1: match(a:buyer where n.name=郑伟)-[e:relation]->{1,2}(b:goods) return b;2: match(a where (a.name = '黄建聪' or (a.age is null)) and (a.height is not null)) return a;3: match(a:buyer where a.name='赵建聪')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='黄若涵') return b limit 66;4: match(a:seller where a.name='黄科')<-[e:buyer_consult_seller]-(b:buyer) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回14个与孙国强和马雪都存在关系的公司节点",
        "output": "match(a where a.name='孙国强')-[e]->(b:company)<-[e2]-(c where c.name='马雪') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为Post_482的点拥有的标签",
        "output": "match(a where a.name='Post_482')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回卖家王建聪回答的买家节点咨询的卖家",
        "output": "match(a:seller where a.name = '王建聪')-[e:ask]->(b:buyer)-[e2:consult]->(c:seller) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出147个person赵宏和张宏,共同的朋友",
        "output": "match(a:person where a.name='赵宏')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='张宏') return b limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被company apply数量大于49的loan,记为relationCount,再查询这些loan apply的person",
        "output": "match(a:loan) let a.relationCount = SUM((a:loan)<-[e:apply]-(b:company) => b.id) match(a where a.relationCount > 49)-[e2:apply]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出37个名为李红的点喜欢的类型为person的节点,且其身高为空或年龄小于等于72",
        "output": "match(a where a.name='李红')-[e:likes]->(b:person where (b.height is null) or b.age <= 72) return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为何梅的,性别的平均值等于54的朋友,返回这些朋友的性别,和边的源点id,f1",
        "output": "match(a where a.name='何梅')-[e:friend]->(b where AVG(b.gender) = 54) return b.gender,e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有起点和终点都是人，且标签为'喜欢'的边。",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和person王建国之间有commits关系的software",
        "output": "match(a:person where a.name='王建国')-[e:commits]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person马建聪有关系的person, 返回和这些person有关联的person的,身高减197的和",
        "output": "match(a:person where a.name= '马建聪')-[e]-(b:person)-[e2]-(c:person) return SUM(c.height - 197)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与person周思琪有likes关系，并与person郑宏有pay关系的所有person节点。返回这些person的id、person周思琪的id以及person郑宏的salary",
        "output": "match(a:person where a.name='周思琪')-[e:likes]->(b:person)<-[e2:pay]-(c:person where c.name='郑宏') return a.id,b.id,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高减155的最大值",
        "output": "MAX(a.height - 155)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与作家王月有撰写关系的1度的环",
        "output": "match(a:author where name = '王月')-[e:write]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边label为喜欢, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,height, 数据为(64,80,151),(31,1,185)的子查询作为输入表, 源点的id等于输入表id,请帮我查找和person有关联的软件节点,并根据其星数,名字,id分组,返回星数,名字,id,以及星数加916的最小值",
        "output": "with p as (select * from (VALUES(64,80,151),(31,1,185)) as t(age,id,height))MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]-(b:software) RETURN b.stars, b.name, b.id, MIN(b.stars + 916) GROUP BY b.stars, b.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找software uses的software, 令software的openSource的值等于buysoftware的person的height的平均值, 再查找software uses的software",
        "output": "match(a:software)-[e:uses]->(b:software) let b.openSource = AVG((b:software)<-[e2:buy]-(c:person) => c.height) match(b:software)-[e3:uses]->(d:software) return b.openSource, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以支付关系关联了person徐科的person",
        "output": "match(a:person where a.name='徐科')<-[e:pay]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出doctor赵若涵 creates的prescription,返回prescription contain的medicine的weight的和除weight的值",
        "output": "match(a:doctor where name = '赵若涵')-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return SUM(c.weight) / c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与'doctor'类型的点存在'belong'关系的'department'，以及这些'department'存在'has'关系的'doctor'，以及这些'doctor'存在'belong'关系的'department'。",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:belong]->(d:department) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为杯子的goods,以及与其有关的orders,并返回杯子的price和这些orders的name",
        "output": "match(a:goods where name = '杯子')-[e]-(b:orders) return a.price, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前199个满足条件身高大于151且性别不是male的医生",
        "output": "match(a:doctor where a.height > 151 and a.gender <> 'male') return a limit 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询Faker转账给哪个账户了。",
        "output": "match(a:account where a.name = 'Faker')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和名为马宏的医生有相关者关系,或有相关者的相关者关系的病人",
        "output": "match(a:doctor where n.name=马宏)-[e:relation]->{1,2}(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点满足条件性别不等于male且年龄在43到47之间,目标点满足条件身高在162到197之间,且标签等于喜欢的边",
        "output": "match(a where a.gender <> 'male' and (a.age BETWEEN 43 AND 47))-[e:likes]->(b where (b.height BETWEEN 162 AND 197)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与用户点相关的帖子节点，并按照它们的id、创建时间和价值进行分组，然后返回这些信息。",
        "output": "match(a:user)-[e:likes]-(b:post) return b.id, b.createTime, b.value group by b.id, b.createTime, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与买家黄思思有关,且与买家黄红有关系的卖家节点",
        "output": "match(a:buyer where a.name='黄思思')-[e:consult]-(b:seller)-[e2:ask]-(c:buyer where c.name='黄红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出26个创建时间不是2008年12月27日的合并请求,根据名字从大到小排列",
        "output": "match(a:pullRequest where a.createTime <> '2008-12-27') return a order by a.name desc limit 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与patient有关系的medicine节点,且medicine节点的id在50到85之间,并返回这些medicine的weight的最小值对571取余乘48的值,以及medicine的weight的和除weight的数量",
        "output": "match(a:patient)-[e]->(b:medicine where (b.id BETWEEN 50 AND 85)) return MIN(b.weight) % 571 * 48, COUNT(SUM(b.weight) / b.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person孙轩有关的person,称为X,再找出和这个X有关联的其他loan,以及和X有关联的loan",
        "output": "match(a:person where a.name = '孙轩')-[e]-(b:person), (b:person)-[e2]-(c:loan),(b:person)-[e3]-(d:loan) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和university武汉大学有关的country,称为X,再请帮我查找和这个X有关联的其他country,以及和X有关联的company",
        "output": "match(a:university where a.name = '武汉大学')-[e]-(b:country), (b:country)-[e2]-(c:country),(b:country)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签等于post,边标签等于has的边,返回这些边的srcId的平均值对11取余乘79的值,和srcId的平均值加93乘61的值",
        "output": "match(a:post)-[e:has]->(b) return AVG(e.srcId) % 11 * 79, (AVG(e.srcId) + 93) * 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我找出label为标签的全部点,并根据价值升序排列;2: 请帮我找出从论坛百度贴吧出发,经过label为forum_contain_post的边,走3跳或4跳到达的帖子点;3: 找出从用户李思思出发,经过标签为user_publish_post的边,走3到5跳到达的帖子点;4: 计算所有用户的height的平均值乘身高的最大值;5: 请帮我找出所有和名为中国诗词论坛的论坛有伙伴关系,或有伙伴的伙伴关系的帖子;6: 帮我查询label为帖子的点,并根据创建时间降序排列;7: 找出论坛CSDN包含的帖子节点拥有的标签;8: 请帮我找出59个名为中国军事论坛的点包含的标签等于帖子的节点,且节点创建时间不是2002年10月17日;9: 查询和person孙强有2跳关系的post;",
        "output": "查询语句为:1: match(a:tag) return a order by a.value asc;2: match(a:forum where a.name='百度贴吧')-[e:forum_contain_post]->{3,4}(b:post) return b;3: match(a:user where a.name='李思思')-[e:user_publish_post]->{3,5}(b:post) return b;4: match(a:user) return MAX(AVG(a.height) * a.height);5: match(a:forum where n.name=中国诗词论坛)-[e:partner]->{1,2}(b:post) return b;6: match(a:post) return a order by a.createTime desc;7: match(a:forum where a.name = 'CSDN')-[e:forum_contain_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c;8: match(a where a.name='中国军事论坛')-[e:forum_contain_post]->(b:post where b.createTime <> '2002-10-17') return b limit 59;9: match(a:person where a.name='孙强')-[e]->{2,2}(b:post) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以20, 'jv', 'Wb'作为输入调用pageRank函数,返回运算结果",
        "output": "Call PAGERANK(20, 'jv', 'Wb') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找city巴黎 belong的country,返回country contain的city的peopleNumber对6372取余的值",
        "output": "match(a:city where name = '巴黎')-[e:belong]->(b:country)-[e2:contain]->(c:city) return c.peopleNumber % 6372",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person何红的全部类型为朋友的边,并根据f0升序排列,返回163个",
        "output": "match(a:person where a.name = '何红')-[e:friend]->(b) return b order by e.f0 asc limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user韩红之间有publish关系的post",
        "output": "match(a:user where a.name='韩红')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表923,592,929, 以属性id作为相等条件,给出doctor赵强creates的prescription,被其他doctor creates的数量",
        "output": "with p as (select * from (VALUES(923),(592),(929)) as t(id)) MATCH (a:doctor WHERE a.id = p.id AND (a.name = '赵强')) -[e:doctor_creates_prescription ]->(b:prescription) <-[e2:doctor_creates_prescription ]-(c:doctor) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师杜若涵教的课程,以及选择这些课程的学生",
        "output": "match(a:teacher where name = '杜若涵')-[e:teach]->(b:course)<-[e2:selects]-(c:student) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找杜国强所有的点创造的处方和他所在的部门，并将两者一起返回。",
        "output": "match(a where a.name = '杜国强')-[e:creates]->(b:prescription),(a where a.name = '杜国强')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前162个标签为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找名为天涯论坛的,id在5到24之间且salary不为空的relation,返回这些relation的id,和边的srcId,f0,weight",
        "output": "match(a where a.name='天涯论坛')-[e:relation]->(b where (b.id BETWEEN 5 AND 24) and (b.salary is not null)) return b.id,e.srcId, e.f0, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与用户吴建国有publish关系的post，以及那些与吴建国有publish关系的post。",
        "output": "match(a:user where a.name = '吴建国')-[e:publish]->(b:post),(a:user where a.name = '吴建国')<-[e2:publish]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(true,87,'Geaflow')作为请求表数据,属性分别为openSource,value,name, 源点的value等于输入表value,请帮我查找前49个满足条件规格不等于medium的公司",
        "output": "with p as (select * from (VALUES(true,87,'Geaflow')) as t(openSource,value,name))MATCH (a:company WHERE a.value = p.value AND (a.scale <> 'medium')) RETURN a LIMIT 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询doctor马思琪 belong的department,返回department has的doctor的id加2对83取余的值",
        "output": "match(a:doctor where name = '马思琪')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.id + 2 % 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找大学南京大学的全部label为相关者的边,并根据源点id升序排列,返回12个",
        "output": "match(a:university where a.name = '南京大学')-[e:relation]->(b) return b order by e.srcId asc limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找和person马若涵有person_friend_person关系的person,再查找以person_parent_person关系关联了马若涵的person;2: 找出和person杜建国有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person;3: 查找和person有关联的person节点,并根据其身高分组,返回身高,以及年龄减42的值;4: 给出和person有关联的person节点,并根据其name分组,返回name,以及id乘11的和;5: 请帮我查找源点类型为person,边类型为person_friend_person,且权重不是111.66,targetId的个数减87大于114,或源点id小于等于75的边;6: 给出88个与赵梅和kate都存在关系的person节点;",
        "output": "查询语句为:1: match(a:person where a.name = '马若涵')-[e:person_friend_person]->(b:person),(a:person where a.name = '马若涵')<-[e2:person_parent_person]-(c:person)return a, b, c;2: match(a:person where a.name = '杜建国')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;3: match(a:person)-[e:person_parent_person]-(b:person) return b.height, b.age - 42 group by b.height;4: match(a:person)-[e:person_colleague_person]-(b:person) return b.name, SUM(b.id * 11) group by b.name;5: match(a:person)-[e:person_friend_person where (e.weight <> 111.66 and COUNT(e.targetId) - 87 > 114) or e.srcId <= 75]->(b) return e;6: match(a where a.name='赵梅')-[e]->(b:person)<-[e2]-(c where c.name='kate') return b limit 88;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person关联数量大于150的person,记为relationCount,再查询这些person认识的person",
        "output": "match(a:person) let a.relationCount = MIN((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 150)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查找143个与腾讯和字节都存在关系的公司节点;2: 请帮我找出和person孙思思有关的软件,再请帮我找出和孙思思person_buy_software的其他软件,返回它们;3: 找出和名为黄伟的person有relation关系,或有relation的relation关系的person;4: 请帮我查找id在15到94之间的节点;",
        "output": "查询语句为:1: match(a where a.name='腾讯')-[e]->(b:company)<-[e2]-(c where c.name='字节') return b limit 143;2: match(a:person where a.name = '孙思思')-[e]-(b:software), (a:person)-[e2:person_buy_software]->(c:software) return a, b, c;3: match(a:person where n.name=黄伟)-[e:relation]->{1,2}(b:person) return b;4: match(a where (a.id BETWEEN 15 AND 94)) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点名字不等于深圳,目标点名字不等于谷歌,且标签等于包含的边",
        "output": "match(a where a.name <> '深圳')-[e:contain]->(b where b.name <> '谷歌') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于department的点,返回3个",
        "output": "match(a:department) return a limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person周雪的所有friend,的weight乘weight的值",
        "output": "match(a:person where a.name= '周雪')-[e:friend]->(b) return e.weight * e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,salary,name, 数据为('male',5589,'郑伟'),('male',3608,'吴建国'), 源点的salary等于输入表salary,帮我查询teacher以name,age分组的salary, 根据salary降序排序",
        "output": "with p as (select * from (VALUES('male',5589,'郑伟'),('male',3608,'吴建国')) as t(gender,salary,name))MATCH (a:teacher WHERE a.salary = p.salary) RETURN a.salary GROUP BY a.name, a.age ORDER BY a.salary DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有经管学院的点拥有的学生,然后返回经管学院被属于的课程,一起返回",
        "output": "match(a where a.name = '经管学院')-[e:has]->(b:student),(a where a.name = '经管学院')<-[e2:belong]-(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算id对61取余的值",
        "output": "return a.id % 61 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询创造医生陈科创造的处方,的医生",
        "output": "match(a:doctor where name = '陈科')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为王建国的节点diagnose的patient或department或doctor",
        "output": "match(a where a.name='王建国')-[e:diagnose]->(b:patient | department | doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的薪资除薪资的个数",
        "output": "match(a:person) return COUNT(a.salary / a.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出买家徐月的所有标签等于相关者的边,并根据源点id降序排列,返回66个",
        "output": "match(a:buyer where a.name = '徐月')-[e:relation]->(b) return b order by e.srcId desc limit 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height分组,计算age乘32的数量",
        "output": "return COUNT(a.age * 32) group by a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回咨询买家吴思思咨询的卖家,的买家",
        "output": "match(a:buyer where name = '吴思思')-[e:consult]->(b:seller)<-[e2:consult]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为person,边label为likes,以及f0在629到896之间或f1不等于true的边",
        "output": "match(a:person)-[e:likes where (e.f0 BETWEEN 629 AND 896) or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签为书,边标签为引用的边,返回这些边的目标点id加38的值,和目标点id除48减507加3的最小值",
        "output": "match(a:book)-[e:refers]->(b) return e.targetId + 38, MIN(e.targetId / 48 - 507 + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询徐若涵认识的人，以及徐若涵有关系的人，一并返回。",
        "output": "match(a where a.name = '徐若涵')-[e:knows]->(b:person),(a where a.name = '徐若涵')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,age,name, 数据为(7586,50,'周梅'),(8301,58,'韩若涵'),(3233,64,'马轩'),(4491,16,'郑思思')的子查询作为输入表, 以属性salary作为相等条件,返回病人以名字,年龄分组的身高, 根据身高从小到大排序",
        "output": "with p as (select * from (VALUES(7586,50,'周梅'),(8301,58,'韩若涵'),(3233,64,'马轩'),(4491,16,'郑思思')) as t(salary,age,name))MATCH (a:patient WHERE a.salary = p.salary) RETURN a.height GROUP BY a.name, a.age ORDER BY a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到教名为陈红和赵雪的课程的节点",
        "output": "match(a where a.name = '陈红')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '赵雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和仓库点有拥有关系的合并请求节点,且边满足条件f1不等于true,目标合并请求节点名字不是PR-163",
        "output": "match(a:repository)-[e:has where e.f1 <> true]->(b:pullRequest where b.name <> 'PR-163') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与forum中国军事论坛和CSDN都存在contain关系的点",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='CSDN') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与王思琪有关联且申请贷款的公司，并返回它们的权重。",
        "output": "match(a where a.name = '王思琪')-[e:invest]->(b:company)-[e2:apply]->(c:loan) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person apply的loan,返回其源点的age减age的值,以及目标点的amount减amount除0的和",
        "output": "match(a:person)-[e:apply]->(b:loan) return a.age - a.age, SUM((b.amount - b.amount) / 0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供非陈强编辑出版的书籍及其关联书籍的名称。",
        "output": "match(a:publisher where a.name <> '陈强')-[e:publish]->(b:book)-[e2:relates]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与马建国有关的人，并找出与马建国有关的所有公司。",
        "output": "match(a:person where a.name = '马建国')-[e]-(b:person), (a:person)-[e2:belong]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的3度以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出person王月关联的person,被其他person认识的数量",
        "output": "match(a:person where a.name='王月')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以355,59,314,727作为请求点id, 以属性id作为相等条件,请帮我查找所有名为Bilibili的点雇佣的person",
        "output": "with p as (select * from (VALUES(355),(59),(314),(727)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Bilibili')) -[e:company_employee_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与仓库Mybatis有关,且与仓库Flink有关系的事项节点",
        "output": "match(a:repository where a.name='Mybatis')-[e:has]-(b:issue)-[e2:belong]-(c:repository where c.name='Flink') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为王轩和何轩的,标签为author的点公共的partner节点的名单",
        "output": "match(a:author where a.name='王轩')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='何轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以215,826作为请求点id, 源点的id等于输入表id,查找137个和label为person的点有person_own_account关系的账号,且和这些账号有account_transfer_account关系的账号",
        "output": "with p as (select * from (VALUES(215),(826)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_own_account ]->(b:account) -[e2:account_transfer_account ]->(c:account) RETURN c LIMIT 137",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回user likes的repository,返回其源点的id加88的平均值,以及目标点的stars乘292的值",
        "output": "match(a:user)-[e:likes]->(b:repository) return AVG(a.id + 88), b.stars * 292",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出拥有TheShy账户的人。",
        "output": "match(a:account where a.name='TheShy')<-[e:own]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为何科和周国强的,标签等于用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='何科')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='周国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询黄建国喜欢哪些书，以及它们被其他哪些书所知道。",
        "output": "match(a:reader where a.name='黄建国')-[e:likes]->(b:book)<-[e2:knows]-(c:book) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和事项ISSUE-477有关系的事项或仓库或合并请求,返回这些点的创建时间,id,变更文件数",
        "output": "match(a:issue where a.name='ISSUE-477')-[e]-(b:issue | repository | pullRequest) return b.createTime, b.id, b.changeFileNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 返回被大学中国科技大学拥有的部门;2: 返回95个与徐建聪和王强都存在关系的university节点;3: 帮我查询student王国强的所有friend,的targetId加66的最小值;4: 找出类型是course的全部点,并根据value从大到小排列;5: 请帮我查找标签为teacher_teach_course,并且f0在611到701之间或源点id不等于79的边;6: 查询名为复旦大学的点拥有的部门,并对这些点的id进行求和;",
        "output": "查询语句为:1: match(a:department)<-[e:university_has_department]-(b:university where b.name='中国科技大学') return a, b;2: match(a where a.name='徐建聪')-[e]->(b:university)<-[e2]-(c where c.name='王强') return b limit 95;3: match(a:student where a.name= '王国强')-[e:friend]->(b) return MIN(e.targetId + 66);4: match(a:course) return a order by a.value desc;5: match(a)-[e:teacher_teach_course where (e.f0 BETWEEN 611 AND 701) or e.srcId <> 79]->(b) return e;6: match(a where a.name='复旦大学')-[e:university_has_department]->(b:department) return SUM(b.id);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为128的药品有关的处方的相关者, 再查询和处方有关系的伙伴",
        "output": "match(a:medicine where id = 128)-[e]-(b:prescription)-[e2:relation]->(c), (b:prescription)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询赵强喜欢的帖子。",
        "output": "match(a:post)<-[e:likes]-(b:user where b.name='赵强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person周若涵的类型为朋友的边,并根据f0从大到小排列,返回75个",
        "output": "match(a:person where a.name = '周若涵')-[e:friend]->(b) return b order by e.f0 desc limit 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与university_id=183的teacher的partner,再返回与teacher有关系的relation。",
        "output": "match(a:university where id = '183')-[e]-(b:teacher)-[e2:partner]->(c), (b:teacher)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与student何雪存在selects关系,且与department物理学院存在belong关系的course节点，返回这些course的courseHour,value,credit,及student何雪的age,及department物理学院的name",
        "output": "match(a:student where a.name='何雪')-[e:selects]->(b:course)<-[e2:belong]-(c:department where c.name='物理学院') return a.age,b.courseHour, b.value, b.credit,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表399,7, 源点的id等于输入表id,帮我查询名为周月和赵红的,类型是person的点公共的家人节点的名单",
        "output": "with p as (select * from (VALUES(399),(7)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '周月')) -[e:person_family_person ]->(b) <-[e2:person_family_person ]-(c:person WHERE c.name = '赵红') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person何梅pay的person,被其他person knows的数量",
        "output": "match(a:person where a.name='何梅')-[e:pay]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出账号的朋友,或其朋友的朋友",
        "output": "match(a:account)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回doctor黄雪belong的department, 令doctor的name等于doctor的age乘11, 返回doctor的id, department的address",
        "output": "match(a:doctor where a.name='黄雪')-[e:belong]->(b:department) let a.name = a.age * 11 return a.id,b.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找电子科技大学所在的中国城市",
        "output": "match(a:university where a.name = '电子科技大学')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前136个类型是has的边",
        "output": "match(a)-[e:has]->(b) return e limit 136",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询全部名为韩若涵的,名字为腾讯的伙伴,返回这些伙伴的名字,和边的时间戳",
        "output": "match(a where a.name='韩若涵')-[e:partner]->(b where b.name = '腾讯') return b.name,e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找公司微软创造的软件, 令公司的id等于公司的人数对972取余, 返回公司的名字, 软件的语言",
        "output": "match(a:company where a.name='微软')-[e:creates]->(b:software) let a.id = a.peopleNumber % 972 return a.name,b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询作家李思思认识的作家, 令作家(b)的性别等于作家(a)的身高除150,令作家的名字等于作家的身高, 返回作家(a)的名字, 作家(b)的薪资",
        "output": "match(a:author where a.name='李思思')-[e:knows]->(b:author) let b.gender = a.height / 150,let b.name = b.height return a.name,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名为吴月和李建国的人中，公共的伙伴节点有哪些？",
        "output": "match(a:person where a.name='吴月')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为病人的点,返回79个",
        "output": "match(a:patient) return a limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出全部和teacher点有teach关系的course节点,且边满足条件f1不是false,目标course节点credit不为空;2: 找出186个等级不为空的大学,根据等级从小到大排列;3: 请帮我查找与名为生物学院和经管学院的点共同拥有的,label为学生的节点;",
        "output": "查询语句为:1: match(a:teacher)-[e:teacher_teach_course where e.f1 <> false]->(b:course where (b.credit is not null)) return b;2: match(a:university where (a.level is not null)) return a order by a.level asc limit 186;3: match(a where a.name = '生物学院')-[e:department_has_student]->(b:student)<-[e2:department_has_student]-(c where c.name = '经管学院') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询病人接受的处方,返回其源点的id减8的值,以及目标点的权重除权重乘84的最大值",
        "output": "match(a:patient)-[e:accept]->(b:prescription) return a.id - 8, MAX(b.weight / b.weight * 84)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与issue ISSUE-410存在belong关系,且与user李思琪存在has关系的repository节点，返回这些repository的createTime,name,及issue ISSUE-410的weight,及user李思琪的gender",
        "output": "match(a:issue where a.name='ISSUE-410')-[e:belong]->(b:repository)<-[e2:has]-(c:user where c.name='李思琪') return a.weight,b.createTime, b.name,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出卖家拥有的商品,返回其源点的薪资乘薪资的最小值,以及目标点的value的个数乘798的值",
        "output": "match(a:seller)-[e:has]->(b:goods) return MIN(a.salary * a.salary), COUNT(b.value) * 798",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定与国家相关的大学节点，其中大学节点的ID为11,返回这些点的level对1取余的平均值，以及level的数量减3的最小值。",
        "output": "match(a:country)-[e]->(b:university where b.id = 11) return AVG(b.level % 1), MIN(COUNT(b.level) - 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 根据publisher节点，获取与它关联的book节点，然后根据category和name属性对它们进行分组，并返回每个组中的category和name属性。",
        "output": "match(a:publisher)-[e:publish]-(b:book) return b.category, b.name group by b.category, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和大学中国科技大学有1到4跳关系的公司",
        "output": "match(a:university where a.name='中国科技大学')-[e]->{1,4}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与李雪有关且购买鞋子的订单。",
        "output": "match(a:buyer where a.name='李雪')-[e:cancel]-(b:orders)-[e2:contain]-(c:goods where c.name='鞋子') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,name,size分组,计算value除720减95对size取余的值",
        "output": "return a.value / 720 - 95 % a.size group by a.value, a.name, a.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与卖家孙科存在回答关系,且与商品鞋子存在查看关系的买家节点，返回这些买家的身高,薪资,及卖家孙科的年龄,及商品鞋子的价格",
        "output": "match(a:seller where a.name='孙科')-[e:ask]->(b:buyer)<-[e2:look]-(c:goods where c.name='鞋子') return a.age,b.height, b.salary,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有处方，并按重要性排序。",
        "output": "match(a:prescription) return a order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,area,value, 数据为('俄罗斯',85309,222),('美国',72565,631),('韩国',91756,454)的子查询作为输入表, 源点的area等于输入表area,请帮我找出city深圳的friend的friend的partner",
        "output": "with p as (select * from (VALUES('俄罗斯',85309,222),('美国',72565,631),('韩国',91756,454)) as t(name,area,value))MATCH (a:city WHERE a.area = p.area AND (a.name = '深圳')) -[e:friend ]->(b) -[e2:friend ]->(c) -[e3:partner ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与书百年孤独有关系的作家的id",
        "output": "match(a:book where a.name='百年孤独')-[e]-(b:author) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以629,894,873作为请求点id, 以属性id作为相等条件,找出源点age为空,边label为author_knows_author,且满足条件f0大于等于611的边,返回这些边的weight除195.16的平均值",
        "output": "with p as (select * from (VALUES(629),(894),(873)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.age IS NULL)) -[e:author_knows_author WHERE e.f0 >= 611 ]->(b) RETURN AVG(e.weight / 195.16) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回账号还款的贷款,返回其源点的value的个数对720取余的值,以及目标点的amount的最大值除7289.49减297的值",
        "output": "match(a:account)-[e:repay]->(b:loan) return COUNT(a.value) % 720, MAX(b.amount) / 7289.49 - 297",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为阿里的点的,id不等于47或金额小于3360.17的相关者,返回这些相关者的id,和边的源点id,目标点id",
        "output": "match(a where a.name='阿里')-[e:relation]->(b where b.id <> 47 or b.amount < 3360.17) return b.id,e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为编辑的点,返回38个",
        "output": "match(a:publisher) return a limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件value小于等于548.77且id大于39的节点",
        "output": "match(a where a.value <= 548.77 and a.id > 39) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找徐伟所属的公司，并返回该公司开发的开源软件的名称。",
        "output": "match(a:person where name = '徐伟')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.name, c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回等级不等于2的节点",
        "output": "match(a where a.level <> 2) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id大于等于54的节点",
        "output": "match(a where a.id >= 54) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,value,price, 数据为('杯子',507,646.30), 以属性price作为相等条件,返回orders Order_462contain的goods,被其他buyer look的数量",
        "output": "with p as (select * from (VALUES('杯子',507,646.30)) as t(name,value,price))MATCH (a:orders WHERE a.price = p.price AND (a.name = 'Order_462')) -[e:orders_contain_goods ]->(b:goods) <-[e2:buyer_look_goods ]-(c:buyer) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,年龄分组,计算id除92的个数",
        "output": "return COUNT(a.id / 92) group by a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表414, 以属性id作为相等条件,帮我查询名为Order_106的订单,以及与其有关的商品,并返回Order_106的名字和这些商品的名字",
        "output": "with p as (select * from (VALUES(414)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (name = 'Order_106')) -[e ]-(b:goods) RETURN a.name, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与repository XXRepo有has关系的3跳以内的环",
        "output": "match(a:repository where name = 'XXRepo')-[e:has]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型为person,目标点类型为person,类型为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前40个满足条件name不等于重庆或value在41到194之间,且id小于12的city",
        "output": "match(a:city where (a.name <> '重庆' or (a.value BETWEEN 41 AND 194)) and a.id < 12) return a limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和person点有认识关系的person节点,且边满足条件源点id在13到167之间,目标person节点身高小于166",
        "output": "match(a:person)-[e:knows where (e.srcId BETWEEN 13 AND 167)]->(b:person where b.height < 166) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为推特的点包含的用户",
        "output": "match(a where a.name='推特')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询和医生相关的处方节点，并按重量分组，返回重量。",
        "output": "match(a:doctor)-[e:creates]-(b:prescription) return b.weight group by b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值加142的最小值",
        "output": "MIN(AVG(a.value) + 142)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(55,'何若涵','famale'),(63,'李轩','male'),(33,'赵科','male')作为请求表数据,属性分别为id,name,gender, 以属性name作为相等条件,帮我查询199个lang小于等于21或id小于88,且stars不是556的software,根据value降序排列",
        "output": "with p as (select * from (VALUES(55,'何若涵','famale'),(63,'李轩','male'),(33,'赵科','male')) as t(id,name,gender))MATCH (a:software WHERE a.name = p.name AND ((a.lang <= 21 OR a.id < 88) AND a.stars <> 556)) RETURN a ORDER BY a.value DESC LIMIT 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,gender,age, 数据为('黄梅','famale',88), 以属性gender作为相等条件,帮我查询全部和处方Prescription_330有1度或2度关系的用户",
        "output": "with p as (select * from (VALUES('黄梅','famale',88)) as t(name,gender,age))MATCH (a:prescription WHERE a.gender = p.gender AND (a.name = 'Prescription_330')) -[e ]->{1,2}(b:user) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被作家认识数量大于27的作家,记为relationCount,再查询这些作家认识的读者",
        "output": "match(a:author) let a.relationCount = MIN((a:author)<-[e:knows]-(b:author) => b.id) match(a where a.relationCount > 27)-[e2:knows]->(c:reader) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询陈轩喜欢的帖子，返回帖子包含的标签值和标签名。",
        "output": "match(a:user where name = '陈轩')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person韩强pay的person节点likes的person",
        "output": "match(a:person where a.name = '韩强')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被仓库JavaGuid拥有的合并请求,和JavaGuid拥有的用户",
        "output": "match(a:pullRequest)<-[e:has]-(b:repository where name = 'JavaGuid')-[e2:has]->(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查询与city深圳和东京都存在city_contain_company关系的点;2: 返回和university有关联的company节点,并根据其id,scale分组,返回id,scale,以及value的求和值除20减70的平均值;3: 返回label为country的点,并根据peopleNumber降序排列;4: 计算所有city的area对area取余的值;5: 请帮我查找名为蚂蚁集团的点属于的城市;6: 帮我查询前32个标签等于city_belong_country的边;",
        "output": "查询语句为:1: match(a:city where a.name='深圳')-[e:city_contain_company]->(b)<-[e2:city_contain_company]-(c:city where c.name='东京') return b;2: match(a:university)-[e:university_cooperate_company]-(b:company) return b.id, b.scale, AVG(SUM(b.value) / 20 - 70) group by b.id, b.scale;3: match(a:country) return a order by a.peopleNumber desc;4: match(a:city) return a.area % a.area;5: match(a where a.name='蚂蚁集团')-[e:company_belong_city]->(b:city) return b;6: match(a)-[e:city_belong_country]->(b) return e limit 32;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和issue ISSUE-287有关的issue,再帮我查询和ISSUE-287 belong的其他repository,返回它们",
        "output": "match(a:issue where a.name = 'ISSUE-287')-[e]-(b:issue), (a:issue)-[e2:belong]->(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person韩国强的所有伙伴,的f0的平均值加878对74取余的值",
        "output": "match(a:person where a.name= '韩国强')-[e:partner]->(b) return AVG(e.f0) + 878 % 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高加身高加153加179的求和值",
        "output": "SUM(a.height + a.height + 153 + 179)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person王若涵knows的person,以及relates这些person的person, 令person(b)的name等于person(c)的height除173, 返回person(a)的height,person(b)的name,person(c)的id",
        "output": "match(a:person where name = '王若涵')-[e:knows]->(b:person)<-[e2:relates]-(c:person) let b.name = c.height / 173 return a.height,b.name,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与标签为'公司'的点有员工关系的17个人，并找出与这些人有关联的软件。",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:commits]->(c:software) return c limit 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与谷歌有合作关系的大学，再找出与这些大学有合作关系或位于这些大学附近的城市。",
        "output": "match(a:company where a.name = '谷歌')-[e:cooperate]->(b:university),(a:company where a.name = '谷歌')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出价值小于等于644的节点",
        "output": "match(a where a.value <= 644) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算level的求和值除level的最大值",
        "output": "return MAX(SUM(a.level) / a.level) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与电影院有关系的电影院节点,且电影院节点的id小于16,并返回这些电影院的id减97的最小值,以及电影院的大小除大小的个数",
        "output": "match(a:cinema)-[e]->(b:cinema where b.id < 16) return MIN(b.id - 97), COUNT(b.size / b.size)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标签为人的人有支付关系的161个人，以及他们喜欢的人。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:likes]->(c:person) return c limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(89,'famale',198),(69,'famale',180),(21,'male',168)作为请求表数据,属性分别为id,gender,height, 以属性gender作为相等条件,找出全部person的朋友,或其朋友的朋友",
        "output": "with p as (select * from (VALUES(89,'famale',198),(69,'famale',180),(21,'male',168)) as t(id,gender,height))MATCH (a:person WHERE a.gender = p.gender) -[e:friend ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出155个和标签为person的点有喜欢关系的评论,以及和这些评论有属于关系的电影",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与处方ID为93的医生有伙伴关系的相关者。",
        "output": "match(a:prescription where id = '93')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与部门经管学院有拥有关系的2跳的环",
        "output": "match(a:department where name = '经管学院')-[e:has]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为杜科的节点发布的读者",
        "output": "match(a where a.name='杜科')-[e:publish]->(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person buy的software, 令software的value的值等于buysoftware的person的gender的平均值, 再查找software uses的software",
        "output": "match(a:person)-[e:buy]->(b:software) let b.value = AVG((b:software)<-[e2:buy]-(c:person) => c.gender) match(b:software)-[e3:uses]->(d:software) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person徐梅 喜欢的评论,返回评论 属于的电影的id乘80的和",
        "output": "match(a:person where name = '徐梅')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return SUM(c.id * 80)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与大学标签相关的部门，再找出与这些部门相关的教师，最后找出这些教师所授的课程。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher)-[e3:teach]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有公司的伙伴,或其伙伴的伙伴",
        "output": "match(a:company)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出Post_305的partner的partner的关系",
        "output": "match(a:post where a.name='Post_305')-[e:partner]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下叫吴红的人",
        "output": "match(a:person where a.name = '吴红') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person马雪和person陈若涵都有关系的所有person节点",
        "output": "match(a:person where a.name='马雪')-[e:knows]-(b:person)-[e2:likes]-(c:person where c.name='陈若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被城市北京属于的国家",
        "output": "match(a:country)<-[e:belong]-(b:city where b.name='北京') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出98个id小于49或名字不等于陈科,且年龄不是74的person,根据身高升序排列",
        "output": "match(a:person where (a.id < 49 or a.name <> '陈科') and a.age <> 74) return a order by a.height asc limit 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 与李梅有同事关系或同事同事关系的人。",
        "output": "match(a:person where n.name=李梅)-[e:colleague]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与杜思思存在从属关系的部门，以及这些部门所拥有的医生节点。然后返回这些医生节点的高度信息。",
        "output": "match(a where a.name = '杜思思')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询41个salary大于57或height大于等于157或name等于韩红的person,根据gender从大到小排列",
        "output": "match(a:person where a.salary > 57 or a.height >= 157 or a.name = '韩红') return a order by a.gender desc limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前197个标签为创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找72个城市东京和上海,共同的朋友",
        "output": "match(a:city where a.name='东京')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='上海') return b limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有部门以权重,名字分组的id, 根据id从小到大排序",
        "output": "match(a:department) return a.id group by a.weight, a.name order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person张雪存在投资关系,且与贷款loan_80存在申请关系的公司节点，返回这些公司的人数,id,名字,及person张雪的身高,及贷款loan_80的金额",
        "output": "match(a:person where a.name='张雪')-[e:invest]->(b:company)<-[e2:apply]-(c:loan where c.name='loan_80') return a.height,b.peopleNumber, b.id, b.name,c.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询127个书悲惨世界和白夜行,共同的引用",
        "output": "match(a:book where a.name='悲惨世界')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='白夜行') return b limit 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为徐思琪的点的,语言为French或创建时间为1998年07月09日的朋友,返回这些朋友的价值,和边的权重,f1,f0",
        "output": "match(a where a.name='徐思琪')-[e:friend]->(b where b.lang = 'French' or b.createTime = '1998-07-09') return b.value,e.weight, e.f1, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有类型为person的点，并按照名字进行升序排列。",
        "output": "match(a:person) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查询和公司有关联的大学节点,并根据其价值,名字分组,返回价值,名字,以及level的平均值除1乘42的值;2: 找出被city深圳contain的company;3: 查找89个与美国和越南都存在关系的city节点;4: 请帮我查找源点类型为城市,边类型为city_contain_company,以及满足条件f0大于等于999的边;5: 给出与名为东京和巴黎的点共同包含的,标签为大学的节点;6: 给出country以name,value分组的value, 根据value降序排序;7: 给出以包含关系关联了城市上海的国家;8: 帮我查询全部源点标签等于大学,边标签等于university_belong_city的边,返回这些边的srcId的平均值乘112的值,和f0除816的和;",
        "output": "查询语句为:1: match(a:company)-[e:company_cooperate_university]-(b:university) return b.value, b.name, AVG(b.level) / 1 * 42 group by b.value, b.name;2: match(a:company)<-[e:city_contain_company]-(b:city where b.name='深圳') return a, b;3: match(a where a.name='美国')-[e]->(b:city)<-[e2]-(c where c.name='越南') return b limit 89;4: match(a:city)-[e:city_contain_company where e.f0 >= 999]->(b) return e;5: match(a where a.name = '东京')-[e:city_contain_university]->(b:university)<-[e2:city_contain_university]-(c where c.name = '巴黎') return b;6: match(a:country) return a.value group by a.name, a.value order by a.value desc;7: match(a:city where a.name='上海')<-[e:country_contain_city]-(b:country) return b;8: match(a:university)-[e:university_belong_city]->(b) return AVG(e.srcId) * 112, SUM(e.f0 / 816);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被论坛包含数量大于158的用户,记为relationCount,再查询这些用户包含的用户",
        "output": "match(a:user) let a.relationCount = SUM((a:user)<-[e:contain]-(b:forum) => b.id) match(a where a.relationCount > 158)-[e2:contain]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找城市包含的大学,返回其源点的id对30取余的最小值,以及目标点的等级除2的值",
        "output": "match(a:city)-[e:contain]->(b:university) return MIN(a.id % 30), b.level / 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person徐雪有3度或4度关系的person",
        "output": "match(a:person where a.name='徐雪')-[e]->{3,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 请帮我找出大学浙江大学的全部标签为朋友的边,并根据f1从大到小排列,返回197个;2: 返回与大学北京大学有关,且与学生徐若涵有关系的部门节点;3: 返回全部和学生赵月有关系的部门节点,返回这些点的id,大小;4: 找出id为58的university有关的department的friend, 再找出和department有关系的relation;5: 返回和department有关联的student节点,并根据其age,gender,salary分组,返回age,gender,salary,以及height除194的求和值;6: 查找和university浙江大学有关系的student节点,返回这些点的height;7: 找出部门法学院的所有标签为伙伴的边,并根据源点id升序排列,返回192个;8: 请帮我查找teacher李国强teach的course,被其他teacher teach的数量;",
        "output": "查询语句为:1: match(a:university where a.name = '浙江大学')-[e:friend]->(b) return b order by e.f1 desc limit 197;2: match(a:university where a.name='北京大学')-[e:university_has_department]-(b:department)-[e2:department_has_student]-(c:student where c.name='徐若涵') return b;3: match(a:student where a.name='赵月')-[e]-(b:department) return b.id, b.size;4: match(a:university where id = '58')-[e]-(b:department)-[e2:friend]->(c), (b:department)-[e3:relation]->(d) return a, b, c, d;5: match(a:department)-[e:department_has_student]-(b:student) return b.age, b.gender, b.salary, SUM(b.height / 194) group by b.age, b.gender, b.salary;6: match(a:university where a.name='浙江大学')-[e]-(b:student) return b.height;7: match(a:department where a.name = '法学院')-[e:partner]->(b) return b order by e.srcId asc limit 192;8: match(a:teacher where a.name='李国强')-[e:teacher_teach_course]->(b:course)<-[e2:teacher_teach_course]-(c:teacher) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被user creates数量大于8的issue,记为relationCount,再查询这些issue creates的issue",
        "output": "match(a:issue) let a.relationCount = AVG((a:issue)<-[e:creates]-(b:user) => b.id) match(a where a.relationCount > 8)-[e2:creates]->(c:issue) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找名叫赵建聪的医生。",
        "output": "match(a:doctor where a.name = '赵建聪') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有合并请求的id的数量减3的最小值",
        "output": "match(a:pullRequest) return MIN(COUNT(a.id) - 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与字节和谷歌都有关联的108家公司。",
        "output": "match(a where a.name='字节')-[e]->(b:company)<-[e2]-(c where c.name='谷歌') return b limit 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与买家徐月和李思琪都存在取消关系的点",
        "output": "match(a:buyer where a.name='徐月')-[e:cancel]->(b)<-[e2:cancel]-(c:buyer where c.name='李思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前161个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名字不是眼科且地址等于976的部门拥有的医生的名称,以及这些医生 创造的处方的名称",
        "output": "match(a:department where a.name <> '眼科' and a.address = 976)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部与person王宏有关系的person的薪资",
        "output": "match(a:person where a.name='王宏')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出Jimmy和李雪都创建过的点",
        "output": "match(a:user where a.name='Jimmy')-[e:creates]->(b)<-[e2:creates]-(c:user where c.name='李雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有id为143的贷款关联的贷款,和以申请关系关联了这些贷款的其他公司",
        "output": "match(a:loan where a.id = 143)-[e]-(b:loan)<-[e2:apply]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,name, 数据为(172,80,'马轩')的子查询作为输入表, 以属性id作为相等条件,找出名为defaultName的loan,以及与其有关的company,并返回defaultName的amount和这些company的peopleNumber",
        "output": "with p as (select * from (VALUES(172,80,'马轩')) as t(height,id,name))MATCH (a:loan WHERE a.id = p.id AND (name = 'defaultName')) -[e ]-(b:company) RETURN a.amount, b.peopleNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与user王宏有关系的forum的peopleNumber",
        "output": "match(a:user where a.name='王宏')-[e]-(b:forum) return b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与软件Geaflow有关系的公司的人数",
        "output": "match(a:software where a.name='Geaflow')-[e]-(b:company) return b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和公司点有雇佣关系的person节点,且边满足条件目标点id为空,目标person节点满足条件名字是5420",
        "output": "match(a:company)-[e:employee where (e.targetId is null)]->(b:person where b.name = 5420) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和person点有认识关系的person节点,且边满足条件f0在737到769之间,目标person节点满足条件名字不等于陈月",
        "output": "match(a:person)-[e:knows where (e.f0 BETWEEN 737 AND 769)]->(b:person where b.name <> '陈月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与杜轩有关且与人人影城有关的标签节点，并返回它们的值。",
        "output": "match(a:person where a.name='杜轩')-[e]->(b:tag)<-[e2]-(c:cinema where c.name='人人影城') return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为俄罗斯的点的,人数小于等于6633,id不为空的伙伴,返回这些伙伴的名字,和边的权重,目标点id",
        "output": "match(a where a.name='俄罗斯')-[e:partner]->(b where b.peopleNumber <= 6633 and (b.id is not null)) return b.name,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出类型为seller的点,并根据name从小到大排列",
        "output": "match(a:seller) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person属于的公司,返回其源点的薪资除2471的和,以及目标点的人数加692的个数",
        "output": "match(a:person)-[e:belong]->(b:company) return SUM(a.salary / 2471), COUNT(b.peopleNumber + 692)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回area在44310到58534之间,peopleNumber在3805到8288之间,或area不为空的节点;2: 请帮我查找country法国的全部partner,的targetId减89的值;3: 给出和大学有关联的公司节点,并根据其规格,人数,id分组,返回规格,人数,id,以及价值除868乘809的最小值;4: 给出标签为company的点,并根据scale从大到小排列;5: 查找全部与city天津有关系的university的value;6: 请帮我找出前121个标签等于company_cooperate_university的边;7: 帮我查询类型为大学的点,返回192个;8: 请帮我找出与company滴滴和蚂蚁集团都存在company_cooperate_university关系的点;",
        "output": "查询语句为:1: match(a where ((a.area BETWEEN 44310 AND 58534) and (a.peopleNumber BETWEEN 3805 AND 8288)) or (a.area is not null)) return a;2: match(a:country where a.name= '法国')-[e:partner]->(b) return e.targetId - 89;3: match(a:university)-[e:university_cooperate_company]-(b:company) return b.scale, b.peopleNumber, b.id, MIN(b.value / 868 * 809) group by b.scale, b.peopleNumber, b.id;4: match(a:company) return a order by a.scale desc;5: match(a:city where a.name='天津')-[e]-(b:university) return b.value;6: match(a)-[e:company_cooperate_university]->(b) return e limit 121;7: match(a:university) return a limit 192;8: match(a:company where a.name='滴滴')-[e:company_cooperate_university]->(b)<-[e2:company_cooperate_university]-(c:company where c.name='蚂蚁集团') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和城市深圳之间有city_contain_company关系的公司",
        "output": "match(a:city where a.name='深圳')-[e:city_contain_company]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和label为person的点有同事关系的person,并且和这些person有朋友关系的person,并且和这些person有同事关系的person",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:friend]->(c:person)-[e3:colleague]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找类型为loan_deposit_account,且满足条件weight小于118.66的边;2: 给出名为黄思琪和韩国强的,类型为person的点公共的partner节点的名单;3: 找出被account Zeus transfer的account;4: 给出和贷款有关联的账号节点,并根据其价值,名字,上次登录时间分组,返回价值,名字,上次登录时间,以及id加18的值;5: 请帮我查找与person王科有person_own_account关系的3跳以内的环;6: 请帮我找出从账号Zeus出发,经过类型为account_transfer_account的边,走2到5跳到达的账号点;7: 请帮我查找以transfer关系关联了account XXD的account;",
        "output": "查询语句为:1: match(a)-[e:loan_deposit_account where e.weight < 118.66]->(b) return e;2: match(a:person where a.name='黄思琪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='韩国强') return b.name;3: match(a:account)<-[e:account_transfer_account]-(b:account where b.name='Zeus') return a, b;4: match(a:loan)-[e:loan_deposit_account]-(b:account) return b.value, b.name, b.lastLoginTime, b.id + 18 group by b.value, b.name, b.lastLoginTime;5: match(a:person where name = '王科')-[e:person_own_account]->{0,2}(b)->(a) return a.id, b.id as b_id;6: match(a:account where a.name='Zeus')-[e:account_transfer_account]->{2,5}(b:account) return b;7: match(a:account where a.name='XXD')<-[e:account_transfer_account]-(b:account) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person王思思有关系的评论的id",
        "output": "match(a:person where a.name='王思思')-[e]-(b:comment) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前177个label为write的边",
        "output": "match(a)-[e:write]->(b) return e limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家郑轩的所有标签等于伙伴的边,并根据源点id降序排列,返回55个",
        "output": "match(a:buyer where a.name = '郑轩')-[e:partner]->(b) return b order by e.srcId desc limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出128个名为急诊部的点拥有的类型是医生的节点,且其身高大于192或年龄为空",
        "output": "match(a where a.name='急诊部')-[e:has]->(b:doctor where b.height > 192 or (b.age is null)) return b limit 128",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以134,620,497,350,932作为请求点id, 以属性id作为相等条件,找出所有源点类型是用户,边类型是user_publish_post的边,返回这些边的权重对138.95取余的平均值,和f0对793取余的值",
        "output": "with p as (select * from (VALUES(134),(620),(497),(350),(932)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_publish_post ]->(b) RETURN AVG(e.weight % 138.95), e.f0 % 793 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找与名为字节和蚂蚁集团的点共同creates的,标签等于software的节点",
        "output": "match(a where a.name = '字节')-[e:company_creates_software]->(b:software)<-[e2:company_creates_software]-(c where c.name = '蚂蚁集团') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除89的最大值",
        "output": "MAX(a.id / 89)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,createTime, 数据为('Comment_163',30,2034-09-19),('Comment_437',90,1996-09-02), 源点的id等于输入表id,请帮我查找全部和person点有creates关系的comment节点,且边满足条件srcId等于541,目标comment节点满足条件createTime不等于2000年11月01日",
        "output": "with p as (select * from (VALUES('Comment_163',30,2034-09-19),('Comment_437',90,1996-09-02)) as t(name,id,createTime))MATCH (a:person WHERE a.id = p.id) -[e:person_creates_comment WHERE e.srcId = 541 ]->(b:comment WHERE b.createTime <> '2000-11-01') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与作家相关的书籍节点，按ID和名称进行分组，并返回ID和名称。",
        "output": "match(a:author)-[e:write]-(b:book) return b.id, b.name group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标签为该标签的点，并按照ID进行升序排序。",
        "output": "match(a:tag) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以咨询关系关联了卖家马红的买家",
        "output": "match(a:seller where a.name='马红')<-[e:consult]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回post的三角的环,边类型是has, 并返回这些点的id",
        "output": "match(a:post)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以包含关系关联了person赵若涵的论坛",
        "output": "match(a:person where a.name='赵若涵')<-[e:forum_contain_person]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回名为徐建聪的person;2: 请帮我查找名为张宏和Alice的,label为person的点公共的朋友节点的名单;3: 请帮我查找类型为person_likes_person,且f0为131或源点id小于1的边;",
        "output": "查询语句为:1: match(a:person where a.name = '徐建聪') return a;2: match(a:person where a.name='张宏')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='Alice') return b.name;3: match(a)-[e:person_likes_person where e.f0 = 131 or e.srcId < 1]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找191个和类型是cinema的点有releases关系的film,以及和这些film有has关系的tag",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和卖家黄强有2到4度关系的订单",
        "output": "match(a:seller where a.name='黄强')-[e]->{2,4}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出全部源点label为forum,边label为forum_contain_post的边,返回这些边的f0的最大值减511的平均值,和weight加178.71的平均值;2: 找出类型为person的点,并根据薪资降序排列;3: 查找全部源点label为用户,边label为user_publish_post,并且权重不为空,时间戳不是2022年10月13日的边;4: 找出和user有关联的post节点,并根据其lang分组,返回lang,以及wordCount对102取余的值;5: 查找源点名字是Post_351,语言不是French,或创建时间的最小值不是40,边标签为post_has_tag,且f1等于true或f0不为空或源点id小于等于560的边,返回这些边的srcId的最大值减97乘136.61除源点id加712的值;6: 找出所有与用户马若涵有关系的用户的年龄;7: 帮我查询前157个标签等于post_has_tag的边;8: 查询全部user的friend,或其friend的friend;",
        "output": "查询语句为:1: match(a:forum)-[e:forum_contain_post]->(b) return AVG(MAX(e.f0) - 511), AVG(e.weight + 178.71);2: match(a:person) return a order by a.salary desc;3: match(a:user)-[e:user_publish_post where (e.weight is not null) and e.timeStamp <> '2022-10-13']->(b) return e;4: match(a:user)-[e:user_likes_post]-(b:post) return b.lang, b.wordCount % 102 group by b.lang;5: match(a where (a.name = 'Post_351' and a.lang <> 'French') or MIN(a.createTime) <> 40)-[e:post_has_tag where e.f1 = true or (e.f0 is not null) or e.srcId <= 560]->(b) return (MAX(e.srcId) - 97) * 136.61 / e.srcId + 712;6: match(a:user where a.name='马若涵')-[e]-(b:user) return b.age;7: match(a)-[e:post_has_tag]->(b) return e limit 157;8: match(a:user)-[e:friend]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被作家孙若涵认识的作家,和孙若涵撰写的书",
        "output": "match(a:author)<-[e:knows]-(b:author where name = '孙若涵')-[e2:write]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与中国科技大学有关系，并且在上海的国家的名字",
        "output": "match(a:university where a.name='中国科技大学')-[e]->(b:country)<-[e2]-(c:city where c.name='上海') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表67,47, 以属性id作为相等条件,查找标签等于person的点,并根据gender从大到小排列",
        "output": "with p as (select * from (VALUES(67),(47)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ORDER BY a.gender DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询162个名为李思思的点提交的类型为软件的节点,且节点名字等于Kafka,价值不为空",
        "output": "match(a where a.name='李思思')-[e:commits]->(b:software where b.name = 'Kafka' and (b.value is not null)) return b limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回全部person的朋友,或其朋友的朋友;2: 帮我查询全部和person陈梅有2到5度关系的person;3: 请帮我查找与名为徐若涵和陈若涵的点共同认识的,label为person的节点;4: 给出所有源点label为person,边label为person_pay_person,以及满足条件timeStamp不是2012年06月21日或f1小于等于69或f0的平均值等于131.50的边;5: 返回名为徐思思和徐强的,类型是person的点公共的相关者节点的名单;6: 查询名为郑月和吴强的,标签为person的点公共的friend节点的名单;7: 帮我查询类型为person的点,并根据名字降序排列;8: 返回和person黄思琪有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person;",
        "output": "查询语句为:1: match(a:person)-[e:friend]->{1,2}(b) return b;2: match(a:person where a.name='陈梅')-[e]->{2,5}(b:person) return b;3: match(a where a.name = '徐若涵')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '陈若涵') return b;4: match(a:person)-[e:person_pay_person where e.timeStamp <> '2012-06-21' or e.f1 <= 69 or AVG(e.f0) = 131.50]->(b) return e;5: match(a:person where a.name='徐思思')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='徐强') return b.name;6: match(a:person where a.name='郑月')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='吴强') return b.name;7: match(a:person) return a order by a.name desc;8: match(a:person where a.name = '黄思琪')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回类型为city_contain_company,并且满足条件srcId不是199的边",
        "output": "match(a)-[e:city_contain_company where e.srcId <> 199]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为145的读者关联的书,和以认识关系关联了这些书的其他书",
        "output": "match(a:reader where a.id = 145)-[e]-(b:book)<-[e2:knows]-(c:book) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以22作为输入调用SSSP函数,返回id, distance",
        "output": "Call SSSP(22) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与部门文学院有拥有关系的1度以内的环",
        "output": "match(a:department where name = '文学院')-[e:has]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和repository Kafka有has关系的pullRequest,再请帮我查找以has关系关联了Kafka的pullRequest",
        "output": "match(a:repository where a.name = 'Kafka')-[e:has]->(b:pullRequest),(a:repository where a.name = 'Kafka')<-[e2:has]-(c:pullRequest)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以关联关系关联了person黄国强的person",
        "output": "match(a:person where a.name='黄国强')<-[e:relates]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和doctor杜思思有关的medicine,再请帮我查找和杜思思diagnose的其他patient,返回它们",
        "output": "match(a:doctor where a.name = '杜思思')-[e]-(b:medicine), (a:doctor)-[e2:diagnose]->(c:patient) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和部门内科有department_has_doctor关系的医生,以及和医生王轩有doctor_creates_prescription关系的处方,将它们都返回",
        "output": "match(a:department where a.name = '内科')-[e:department_has_doctor]->(b:doctor),(c:doctor where c.name = '王轩')-[e2:doctor_creates_prescription]->(d:prescription)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查询与user杜若涵存在user_likes_post关系,且与tag科幻存在post_has_tag关系的post节点，返回这些post的lang,及user杜若涵的salary,及tag科幻的id;2: 找出id为120的点的性别;3: 查找源点类型为forum,目标点类型为post,类型为forum_contain_post的边;4: 返回所有源点label为post,边label为post_has_tag,且f1为false的边;5: 请帮我查找所有person以id,身高分组的身高, 根据身高升序排序;6: 返回与用户郑宏和杜思思都存在user_likes_post关系的点;7: 请帮我找出名为李若涵和kate的,类型是用户的点公共的伙伴节点的名单;8: 查询全部与标签喜剧有关系的用户的名字;9: 返回论坛以id,价值分组的价值, 根据价值升序排序;",
        "output": "查询语句为:1: match(a:user where a.name='杜若涵')-[e:user_likes_post]->(b:post)<-[e2:post_has_tag]-(c:tag where c.name='科幻') return a.salary,b.lang,c.id;2: match(a where a.id = '120') return a.gender;3: match(a:forum)-[e:forum_contain_post]->(b:post) return e;4: match(a:post)-[e:post_has_tag where e.f1 = false]->(b) return e;5: match(a:person) return a.height group by a.id, a.height order by a.height asc;6: match(a:user where a.name='郑宏')-[e:user_likes_post]->(b)<-[e2:user_likes_post]-(c:user where c.name='杜思思') return b;7: match(a:user where a.name='李若涵')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='kate') return b.name;8: match(a:tag where a.name='喜剧')-[e]-(b:user) return b.name;9: match(a:forum) return a.value group by a.id, a.value order by a.value asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签以id,名字,价值分组的名字, 根据名字降序排序",
        "output": "match(a:tag) return a.name group by a.id, a.name, a.value order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出39个和类型是大学的点有拥有关系的部门,并且和这些部门有拥有关系的学生",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student) return c limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height分组,计算height减height的值",
        "output": "return a.height - a.height group by a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与内科部门有has关系并且与急诊部门有belong关系的医生的薪水、年龄以及内科部门的地址和急诊部门的重量。",
        "output": "match(a:department where a.name='内科')-[e:has]->(b:doctor)<-[e2:belong]-(c:department where c.name='急诊部') return a.address,b.salary, b.age,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与买家周思思和商品苹果相关的订单节点",
        "output": "match(a:buyer where a.name='周思思')-[e:cancel]-(b:orders)-[e2:contain]-(c:goods where c.name='苹果') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与贷款defaultName有申请关系的公司",
        "output": "match(a:loan where a.name='defaultName')<-[e:apply]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person陈宏有关的软件,称为X,再帮我查询和这个X有关联的其他公司,以及和X有关联的person",
        "output": "match(a:person where a.name = '陈宏')-[e]-(b:software), (b:software)-[e2]-(c:company),(b:software)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 帮我查询类型为film的全部点,并根据value升序排列;2: 给出id为9的点的id,name,value;3: 请帮我查找和电影西虹市首富有1到3跳关系的评论;4: 给出与cinema有关系的film节点,且film节点的category不等于悬疑,并返回这些点的id除41的值,以及value乘569加983乘59的值;5: 查询名为少年足球的电影,以及与其有关的电影,并返回少年足球的类别和这些电影的id;6: 找出和电影院好视影院有2到4跳关系的person;7: 返回person何伟creates的comment,被其他person creates的数量;8: 查找名为人人影城的电影院;9: 查询全部源点类型是电影,目标点类型是标签,类型是film_has_tag的边;",
        "output": "查询语句为:1: match(a:film) return a order by a.value asc;2: match(a where a.id = '9') return a.id, a.name, a.value;3: match(a:film where a.name='西虹市首富')-[e]->{1,3}(b:comment) return b;4: match(a:cinema)-[e]->(b:film where b.category <> '悬疑') return b.id / 41, (b.value * 569 + 983) * 59;5: match(a:film where name = '少年足球')-[e]-(b:film) return a.category, b.id;6: match(a:cinema where a.name='好视影院')-[e]->{2,4}(b:person) return b;7: match(a:person where a.name='何伟')-[e:person_creates_comment]->(b:comment)<-[e2:person_creates_comment]-(c:person) return COUNT(c);8: match(a:cinema where a.name = '人人影城') return a;9: match(a:film)-[e:film_has_tag]->(b:tag) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与电影相关的标签节点，按其ID、名称、值分组，返回ID、名称、值。",
        "output": "match(a:film)-[e:has]-(b:tag) return b.id, b.name, b.value group by b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出Order_231订单中包含的商品，以及买家李轩创建的订单，返回它们。",
        "output": "match(a:orders where a.name = 'Order_231')-[e:contain]->(b:goods),(c:buyer where c.name = '李轩')-[e2:creates]->(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找73个与Comment_396和Comment_154都存在关系的comment或person节点",
        "output": "match(a where a.name='Comment_396')-[e]->(b:comment | person)<-[e2]-(c where c.name='Comment_154') return b limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户的2跳以内的环",
        "output": "match(a:user)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,身高,年龄分组,计算薪资乘2620的求和值",
        "output": "return SUM(a.salary * 2620) group by a.name, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以202,111,369作为请求点id, 以属性id作为相等条件,请帮我找出用户的三角的环,边标签为user_creates_issue, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(202),(111),(369)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_creates_issue ]->(b) -[e2:user_creates_issue ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找buyer陈梅cancel的orders,被其他buyer cancel的数量",
        "output": "match(a:buyer where a.name='陈梅')-[e:cancel]->(b:orders)<-[e2:cancel]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表887,107, 源点的id等于输入表id,计算所有person的id的最小值减52的和",
        "output": "with p as (select * from (VALUES(887),(107)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN SUM(MIN(a.id) - 52) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person王强的全部标签为伙伴的边,并根据目标点id升序排列,返回6个",
        "output": "match(a:person where a.name = '王强')-[e:partner]->(b) return b order by e.targetId asc limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部读者以性别,身高分组的性别, 根据性别从小到大排序",
        "output": "match(a:reader) return a.gender group by a.gender, a.height order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为size,id,value, 数据为(85,67,718),(61,16,581),(79,48,25)的子查询作为输入表, 以属性value作为相等条件,给出所有名为土木学院的,年龄不为空,id加40不等于25的伙伴,返回这些伙伴的id,和边的f0",
        "output": "with p as (select * from (VALUES(85,67,718),(61,16,581),(79,48,25)) as t(size,id,value))MATCH (a WHERE a.value = p.value AND (a.name = '土木学院')) -[e:partner ]->(b WHERE b.age IS NOT NULL AND b.id + 40 <> 25) RETURN b.id, e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询作家周建聪认识的作家节点认识的作家",
        "output": "match(a:author where a.name = '周建聪')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我找出李国强医生所在的部门。",
        "output": "match(a:department)<-[e:belong]-(b:doctor where b.name='李国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 帮我查询名为郑科的,name不是马梅或age小于43的partner,返回这些partner的age,和边的srcId,weight;2: 给出所有person以性别,名字分组的薪资, 根据薪资升序排序;3: 查找与名为徐思思和周雪的点共同pay的,label为person的节点;4: 给出label为person_pay_person,且f1为false,targetId大于48的边;5: 帮我查询salary为空或name不是黄国强,且salary小于7787的节点;6: 找出名为马建聪的person,以及与其有关的person,并返回马建聪的身高和这些person的性别;7: 帮我查询类型是person,名为周思思的点,返回这些点的id;8: 请帮我查找与person周宏有关系的person, 返回和这些person有关联的person的,height除179的最小值;",
        "output": "查询语句为:1: match(a where a.name='郑科')-[e:partner]->(b where b.name <> '马梅' or b.age < 43) return b.age,e.srcId, e.weight;2: match(a:person) return a.salary group by a.gender, a.name order by a.salary asc;3: match(a where a.name = '徐思思')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c where c.name = '周雪') return b;4: match(a)-[e:person_pay_person where e.f1 = false and e.targetId > 48]->(b) return e;5: match(a where ((a.salary is null) or a.name <> '黄国强') and a.salary < 7787) return a;6: match(a:person where name = '马建聪')-[e]-(b:person) return a.height, b.gender;7: match(a:person where a.name = '周思思') return a.id;8: match(a:person where a.name= '周宏')-[e]-(b:person)-[e2]-(c:person) return MIN(c.height / 179);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和名为何思思的person有lover关系,或有lover的lover关系的person",
        "output": "match(a:person where n.name=何思思)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找reader likes的book,返回其源点的height对158取余对3570取余的值,以及目标点的id减96的最小值",
        "output": "match(a:reader)-[e:likes]->(b:book) return a.height % 158 % 3570, MIN(b.id - 96)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找user赵雪creates的issue,以及has这些issue的repository",
        "output": "match(a:user where name = '赵雪')-[e:creates]->(b:issue)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名为Prescription_246的处方",
        "output": "match(a:prescription where a.name = 'Prescription_246') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,age,gender, 数据为('孙国强',62,'famale')的子查询作为输入表, 以属性name作为相等条件,帮我查询全部名为王轩的点knows的person",
        "output": "with p as (select * from (VALUES('孙国强',62,'famale')) as t(name,age,gender))MATCH (a WHERE a.name = p.name AND (a.name = '王轩')) -[e:knows ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与大学四川大学有关系的课程, 返回和这些课程有关联的课程的,价值对200取余对30取余的求和值",
        "output": "match(a:university where a.name= '四川大学')-[e]-(b:course)-[e2]-(c:course) return SUM(c.value % 200 % 30)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回126个大学电子科技大学和重庆大学,共同的伙伴",
        "output": "match(a:university where a.name='电子科技大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='重庆大学') return b limit 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型是person,边类型是喜欢,且目标点id不为空的边",
        "output": "match(a:person)-[e:likes where (e.targetId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于person,名为徐月的点,返回这些点的gender,name",
        "output": "match(a:person where a.name = '徐月') return a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和病人Sam有3到6跳关系的部门",
        "output": "match(a:patient where a.name='Sam')-[e]->{3,6}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 返回与名为Jack和韩红的点共同selects的,标签为course的节点;2: 查询源点salary在2868到8222之间,边标签为student_selects_course,且weight不等于187.67的边,返回这些边的srcId的个数乘15的和;3: 请帮我查找与课程形势与政策有关系的课程, 返回和这些课程有关联的课程的,credit的数量加学分的数量;4: 查询全部和教师点有教关系的课程节点,且边满足条件权重等于110.15,目标课程节点课时等于47;5: 找出所有数学学院的点拥有的学生,然后找出数学学院被拥有的大学,一起返回;6: 找出88个department计算机学院和生物学院,共同的partner;7: 帮我查询与大学电子科技大学有university_has_department关系的2度以内的环;",
        "output": "查询语句为:1: match(a where a.name = 'Jack')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c where c.name = '韩红') return b;2: match(a where (a.salary BETWEEN 2868 AND 8222))-[e:student_selects_course where e.weight <> 187.67]->(b) return SUM(COUNT(e.srcId) * 15);3: match(a:course where a.name= '形势与政策')-[e]-(b:course)-[e2]-(c:course) return COUNT(COUNT(c.credit) + c.credit);4: match(a:teacher)-[e:teacher_teach_course where e.weight = 110.15]->(b:course where b.courseHour = 47) return b;5: match(a where a.name = '数学学院')-[e:department_has_student]->(b:student),(a where a.name = '数学学院')<-[e2:university_has_department]-(c:university) return a, b, c;6: match(a:department where a.name='计算机学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='生物学院') return b limit 88;7: match(a:university where name = '电子科技大学')-[e:university_has_department]->{0,1}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询小胡转账的账户，并返回该账户是否冻结。",
        "output": "match(a:account where name = 'XiaoHu')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点标签为买家,边标签为创造,且满足条件目标点id等于163且权重小于140.01,或权重小于等于19的边",
        "output": "match(a:buyer)-[e:creates where (e.targetId = 163 and e.weight < 140.01) or e.weight <= 19]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为纽约的点属于的国家",
        "output": "match(a where a.name='纽约')-[e:belong]->(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与账户有关系的非大型公司节点，返回它们的ID乘以48,以及Value除以222取余并除以47的值。",
        "output": "match(a:account)-[e]->(b:company where b.scale <> 'large') return b.id * 48, b.value % 222 / 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与伦敦有关联的大学",
        "output": "match(a:city where a.name='伦敦')<-[e:belong]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,name, 数据为(199,37,'张宏')的子查询作为输入表, 以属性height作为相等条件,找出author张月 write的book,返回book knows的book的wordCount减307的值 ",
        "output": "with p as (select * from (VALUES(199,37,'张宏')) as t(height,id,name))MATCH (a:author WHERE a.height = p.height AND (name = '张月')) -[e:author_write_book ]->(b:book) -[e2:knows ]->(c:book) RETURN c.wordCount - 307 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与杜建国存在认识关系的person,person与person存在支付关系的点,返回这些点的薪资",
        "output": "match(a where a.name = '杜建国')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与散利痛和枇杷糖浆都有关的110个处方药节点",
        "output": "match(a where a.name='散利痛')-[e]->(b:prescription)<-[e2]-(c where c.name='枇杷糖浆') return b limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从person张宏出发,经过类型是lover的边,走2到5跳到达的person点",
        "output": "match(a:person where a.name='张宏')-[e:lover]->{2,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有课程的课时除课时加97的值",
        "output": "match(a:course) return a.courseHour / a.courseHour + 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出皮肤科部门中拥有处方Prescription_469的医生，返回这些医生的性别、名字、部门皮肤科名称和处方ID。",
        "output": "match(a:department where a.name='皮肤科')-[e:has]->(b:doctor)<-[e2:creates]-(c:prescription where c.name='Prescription_469') return a.name,b.gender, b.name,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回139个person陈思琪和黄红,共同的family",
        "output": "match(a:person where a.name='陈思琪')-[e:family]->(b)<-[e2:family]-(c:person where c.name='黄红') return b limit 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与生物学院部门和程序设计课程相关的教师节点。",
        "output": "match(a:department where a.name='生物学院')-[e:has]-(b:teacher)-[e2:teach]-(c:course where c.name='程序设计') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为ISSUE-306的点属于的仓库",
        "output": "match(a where a.name='ISSUE-306')-[e:belong]->(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为111的cinema releases的film, 并将film有关的film的value的和赋值给film(b)的value, 接着查询film(b)的value小于111的film has的tag",
        "output": "match(a:cinema where a.id = 111)-[e:releases]->(b:film) let b.value = SUM((b:film)-[e2]-(c:film) => c.value) match(b:film where b.value < 111)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找user likes的post,返回其源点的salary的求和值减salary对4479取余的最大值,以及目标点的value减296的值",
        "output": "match(a:user)-[e:likes]->(b:post) return MAX(SUM(a.salary) - a.salary % 4479), b.value - 296",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型是公司,目标点类型是贷款,类型是贷款的边",
        "output": "match(a:company)-[e:loan]->(b:loan) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用KHOP函数,以16作为输入,返回运算结果",
        "output": "Call KHOP(16) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为张思思的点选择的课程",
        "output": "match(a where a.name='张思思')-[e:student_selects_course]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为深圳的城市有相关者关系,或有相关者的相关者关系的国家",
        "output": "match(a:city where n.name=深圳)-[e:relation]->{1,2}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与滴滴合作的大学，以及与该大学合作的公司的人员数量。",
        "output": "match(a:company where name = '滴滴')-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company) return c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为越南的点的,价值不为空且价值不是200的伙伴,返回这些伙伴的面积,和边的权重",
        "output": "match(a where a.name='越南')-[e:partner]->(b where (b.value is not null) and b.value <> 200) return b.area,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person Jimmy存在colleague关系,且与person徐月存在friend关系的person节点，返回这些person的id,及person Jimmy的age,及person徐月的gender",
        "output": "match(a:person where a.name='Jimmy')-[e:colleague]->(b:person)<-[e2:friend]-(c:person where c.name='徐月') return a.age,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,name, 数据为(5499,35,'周雪'),(9134,54,'Alice'),(5767,65,'郑建聪')的子查询作为输入表, 以属性name作为相等条件,请帮我找出person孙雪的所有标签等于relation的边,并根据f1升序排列,返回148个",
        "output": "with p as (select * from (VALUES(5499,35,'周雪'),(9134,54,'Alice'),(5767,65,'郑建聪')) as t(salary,id,name))MATCH (a:person WHERE a.name = p.name AND (a.name = '孙雪')) -[e:relation ]->(b) RETURN b ORDER BY e.f1 LIMIT 148",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询人数大于684且创建时间不是2014年10月11日的论坛包含的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:forum where a.peopleNumber > 684 and a.createTime <> '2014-10-11')-[e:contain]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值减63的最小值",
        "output": "MIN(MIN(a.id) - 63)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person徐轩有购买关系的软件,再查询以提交关系关联了徐轩的软件",
        "output": "match(a:person where a.name = '徐轩')-[e:buy]->(b:software),(a:person where a.name = '徐轩')<-[e2:commits]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与张强是朋友、与吴建国是同事的人。这些人包括他们的姓名、年龄和薪水，以及张强的年龄和吴建国的身高。",
        "output": "match(a:person where a.name='张强')-[e:friend]->(b:person)<-[e2:colleague]-(c:person where c.name='吴建国') return a.age,b.name, b.age, b.salary,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前146个满足条件名字为黄科且年龄不为空,或名字等于何宏的person",
        "output": "match(a:person where (a.name = '黄科' and (a.age is not null)) or a.name = '何宏') return a limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件薪资小于等于3077,名字不是徐科,id为空的节点",
        "output": "match(a where a.salary <= 3077 and a.name <> '徐科' and (a.id is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为157的person有关的person的相关者, 再给出和person有关系的朋友",
        "output": "match(a:person where id = 157)-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从深圳出发，沿着包含类型的边走3到5度，到达一个大学。",
        "output": "match(a:city where a.name='深圳')-[e:contain]->{3,5}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,name,height, 数据为('male','吴思思',157),('famale','马雪',162), 源点的gender等于输入表gender,查询处方Prescription_390的所有label为相关者的边,并根据f1从小到大排列,返回72个",
        "output": "with p as (select * from (VALUES('male','吴思思',157),('famale','马雪',162)) as t(gender,name,height))MATCH (a:prescription WHERE a.gender = p.gender AND (a.name = 'Prescription_390')) -[e:relation ]->(b) RETURN b ORDER BY e.f1 LIMIT 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出学生赵思琪选择的课程,被其他教师教的数量",
        "output": "match(a:student where a.name='赵思琪')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值分组,计算value的平均值除636的值",
        "output": "return AVG(a.value) / 636 group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,性别分组,计算id乘id的最大值",
        "output": "return MAX(a.id * a.id) group by a.name, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点标签等于person,目标点标签等于comment,标签等于tag或comment或person的边",
        "output": "match(a:person)-[e:tag | comment | person]->(b:comment) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被医生属于数量大于163的部门,记为relationCount,再查询这些部门属于的部门",
        "output": "match(a:department) let a.relationCount = COUNT((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 163)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(159,'male',15),(174,'famale',33),(175,'male',90)作为请求表数据,属性分别为height,gender,age, 源点的height等于输入表height,找出101个名为艺术学院的点拥有的标签等于学生的节点,且其名字不是徐红且age的最大值减89乘5075大于9398",
        "output": "with p as (select * from (VALUES(159,'male',15),(174,'famale',33),(175,'male',90)) as t(height,gender,age))MATCH (a WHERE a.height = p.height AND (a.name = '艺术学院')) -[e:department_has_student ]->(b:student WHERE b.name <> '徐红' AND (MAX(b.age) - 89) * 5075 > 9398) RETURN b LIMIT 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person点有knows关系的person节点,且边满足条件weight在128.06到178.28之间,目标person节点id小于44",
        "output": "match(a:person)-[e:knows where (e.weight BETWEEN 128.06 AND 178.28)]->(b:person where b.id < 44) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对id取余的求和值",
        "output": "SUM(a.id % a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件星数对744取余不是88且星数不为空,或创建时间不等于2007年03月07日的节点",
        "output": "match(a where (a.stars % 744 <> 88 and (a.stars is not null)) or a.createTime <> '2007-03-07') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被买家创造数量大于138的订单,记为relationCount,再查询这些订单创造的买家",
        "output": "match(a:orders) let a.relationCount = COUNT((a:orders)<-[e:creates]-(b:buyer) => b.id) match(a where a.relationCount > 138)-[e2:creates]->(c:buyer) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找以拥有关系关联了标签其他的电影",
        "output": "match(a:tag where a.name='其他')<-[e:film_has_tag]-(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出12个与'买家'标签相关的卖家，并找出这些卖家所拥有的商品。",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为徐思思的节点喜欢的用户或帖子",
        "output": "match(a where a.name='徐思思')-[e:likes]->(b:user | post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找与doctor杜强和郑科都存在doctor_creates_prescription关系的点",
        "output": "match(a:doctor where a.name='杜强')-[e:doctor_creates_prescription]->(b)<-[e2:doctor_creates_prescription]-(c:doctor where c.name='郑科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询孙伟观看过的电影，并返回这些电影标签的价值。",
        "output": "match(a:person where name = '孙伟')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与Comment_103存在属于关系的电影，以及这些电影所拥有的标签。返回这些点的价值。",
        "output": "match(a where a.name = 'Comment_103')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询源点类型为person,目标点类型为person,类型为person_pay_person的边",
        "output": "match(a:person)-[e:person_pay_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和用户Bob之间有喜欢关系的帖子",
        "output": "match(a:user where a.name='Bob')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和医生杜若涵有关系的药品或处方或病人,返回这些点的创建时间",
        "output": "match(a:doctor where a.name='杜若涵')-[e]-(b:medicine | prescription | patient) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与person有关联的年龄小于52岁的person节点，计算他们的age加上94后的总和，并找出他们height字段对187取余的结果中的最小值。",
        "output": "match(a:person)-[e]->(b:person where b.age < 52) return SUM(b.age + 94), MIN(COUNT(b.height) % 187)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回标签为loan的全部点,并根据id降序排列",
        "output": "match(a:loan) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和forum百度贴吧之间有contain关系的user",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有拥有耳鼻喉科医生的点，然后筛选出医生创建处方的点，并返回这些点的名称。",
        "output": "match(a where a.name = '耳鼻喉科')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出21个与百年孤独和呐喊都存在关系的book节点",
        "output": "match(a where a.name='百年孤独')-[e]->(b:book)<-[e2]-(c where c.name='呐喊') return b limit 21",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 找出所有id为172的商品关联的订单,和以取消关系关联了这些订单的其他买家;2: 给出前47个标签等于buyer_cancel_orders的边;3: 帮我查询和buyer韩建国有buyer_look_goods关系的goods,以及和orders Order_192有orders_contain_goods关系的goods,将它们都返回;4: 查询label为goods的点;5: 查找被买家马思思查看的商品;6: 请帮我找出被buyer吴思琪creates的orders;7: 找出所有与韩梅存在buyer_creates_orders关系的orders,orders与goods存在orders_contain_goods关系的点,返回这些点的category;8: 请帮我查找源点身高为空或id不等于32或年龄在78到80之间,边label为buyer_cancel_orders,且时间戳不是1998年08月29日或源点id为空的边,返回这些边的目标点id加135的个数;9: 请帮我查找买家王梅 咨询的卖家,返回卖家 拥有的商品的价值加954的求和值 ;",
        "output": "查询语句为:1: match(a:goods where a.id = '172')-[e]-(b:orders)<-[e2:buyer_cancel_orders]-(c:buyer) return b,c;2: match(a)-[e:buyer_cancel_orders]->(b) return e limit 47;3: match(a:buyer where a.name = '韩建国')-[e:buyer_look_goods]->(b:goods),(c:orders where c.name = 'Order_192')-[e2:orders_contain_goods]->(d:goods)return a, b, c, d;4: match(a:goods) return a;5: match(a:goods)<-[e:buyer_look_goods]-(b:buyer where b.name='马思思') return a, b;6: match(a:orders)<-[e:buyer_creates_orders]-(b:buyer where b.name='吴思琪') return a, b;7: match(a where a.name = '韩梅')-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c.category;8: match(a where (a.height is null) or a.id <> 32 or (a.age BETWEEN 78 AND 80))-[e:buyer_cancel_orders where e.timeStamp <> '1998-08-29' or (e.srcId is null)]->(b) return COUNT(e.targetId + 135);9: match(a:buyer where name = '王梅')-[e:buyer_consult_seller]->(b:seller)-[e2:seller_has_goods]->(c:goods) return SUM(c.value + 954);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以24, 'ZC'作为输入,返回运算结果",
        "output": "Call PAGERANK(24, 'ZC') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部person以身高,名字,薪资分组的id, 根据id升序排序",
        "output": "match(a:person) return a.id group by a.height, a.name, a.salary order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询贷款defaultName的相关者及其伙伴",
        "output": "match(a:loan where a.name='defaultName')-[e:relation]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与赵轩和韩轩都有parent关系的人，并返回他们的薪水、年龄以及赵轩的年龄和韩轩的ID。",
        "output": "match(a:person where a.name='赵轩')-[e:parent]->(b:person)<-[e2:parent]-(c:person where c.name='韩轩') return a.age,b.salary, b.age,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回seller何伟的所有relation,的srcId对90取余的值",
        "output": "match(a:seller where a.name= '何伟')-[e:relation]->(b) return e.srcId % 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为马宏的person,以及与其有关的贷款,并返回马宏的id和这些贷款的金额",
        "output": "match(a:person where name = '马宏')-[e]-(b:loan) return a.id, b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为徐若涵的节点喜欢的评论或标签",
        "output": "match(a where a.name='徐若涵')-[e:likes]->(b:comment | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找id为136的国家关联的国家,和以属于关系关联了这些国家的其他城市",
        "output": "match(a:country where a.id = '136')-[e]-(b:country)<-[e2:city_belong_country]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找所有名为吴伟的,id不等于36且name不等于java程序设计的partner,返回这些partner的price,和边的srcId;2: 给出从编辑kate出发,经过标签等于publisher_publish_book的边,走1度或2度到达的书点;3: 请帮我找出所有和author点有write关系的book节点,且边满足条件f0小于等于742,目标book节点满足条件price为空;4: 请帮我查找源点满足条件性别为male,性别是famale,目标点满足条件创建时间不是2031年12月28日,创建时间不等于2029年01月28日,价格不等于65,且类型是publisher_publish_book的边;",
        "output": "查询语句为:1: match(a where a.name='吴伟')-[e:partner]->(b where b.id <> 36 and b.name <> 'java程序设计') return b.price,e.srcId;2: match(a:publisher where a.name='kate')-[e:publisher_publish_book]->{1,2}(b:book) return b;3: match(a:author)-[e:author_write_book where e.f0 <= 742]->(b:book where (b.price is null)) return b;4: match(a where a.gender = 'male' and a.gender = 'famale')-[e:publisher_publish_book]->(b where b.createTime <> '2031-12-28' and b.createTime <> '2029-01-28' and b.price <> 65) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以824,727,344,238作为请求点id, 源点的id等于输入表id,请帮我找出名为Hadoop的点使用的所有软件,并对这些点的开源进行求和",
        "output": "with p as (select * from (VALUES(824),(727),(344),(238)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Hadoop')) -[e:software_uses_software ]->(b:software) RETURN SUM(b.openSource) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 给出全部名为东京的点contain的company;2: 请帮我找出与university南京大学有关系的city, 返回和这些city有关联的country的,id加id对71取余的平均值;3: 请帮我找出id为34的点的id;4: 返回全部id为67的university关联的city,和以contain关系关联了这些city的其他country;",
        "output": "查询语句为:1: match(a where a.name='东京')-[e:city_contain_company]->(b:company) return b;2: match(a:university where a.name= '南京大学')-[e]-(b:city)-[e2]-(c:country) return AVG(c.id + c.id % 71);3: match(a where a.id = '34') return a.id;4: match(a:university where a.id = '67')-[e]-(b:city)<-[e2:country_contain_city]-(c:country) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回处方包含的药品,返回其源点的id乘89除权重的和,以及目标点的weight的平均值对999取余减262的最大值",
        "output": "match(a:prescription)-[e:contain]->(b:medicine) return SUM(a.id * 89 / a.weight), MAX(AVG(b.weight) % 999 - 262)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和标签古代有关系的帖子或论坛或用户,返回这些点的性别",
        "output": "match(a:tag where a.name='古代')-[e]-(b:post | forum | user) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为4的点的name,gender",
        "output": "match(a where a.id = 4) return a.name, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出repository Kafka has的issue,以及has这些issue的repository",
        "output": "match(a:repository where name = 'Kafka')-[e:has]->(b:issue)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和部门数学学院之间有拥有关系的学生",
        "output": "match(a:department where a.name='数学学院')-[e:has]->(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门急诊部拥有的医生节点创造的处方",
        "output": "match(a:department where a.name = '急诊部')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询何若涵和郑思琪之间共同存在的创建关系。",
        "output": "match(a:person where a.name='何若涵')-[e:creates]->(b)<-[e2:creates]-(c:person where c.name='郑思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为3的点的身高,性别",
        "output": "match(a where a.id = 3) return a.height, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定处方类型的点，并按照权重从高到低排序。",
        "output": "match(a:prescription) return a order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为公司的全部点,并根据规格升序排列",
        "output": "match(a:company) return a order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名叫杜宏的人的社交网络中的人名，以及他们认识的人的姓名。",
        "output": "match(a:person where a.name = '杜宏')-[e:relates]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,peopleNumber,name, 数据为(871,704,'推特')的子查询作为输入表, 以属性name作为相等条件,请帮我找出和user有关联的post节点,并根据其lang分组,返回lang,以及wordCount的最小值乘585对id取余的值",
        "output": "with p as (select * from (VALUES(871,704,'推特')) as t(value,peopleNumber,name))MATCH (a:user WHERE a.name = p.name) -[e:user_likes_post ]-(b:post) RETURN b.lang, MIN(b.wordCount) * 585 % b.id GROUP BY b.lang ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找117个仓库FSM和JavaGuid,共同的相关者",
        "output": "match(a:repository where a.name='FSM')-[e:relation]->(b)<-[e2:relation]-(c:repository where c.name='JavaGuid') return b limit 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 请帮我找出28个名为黄科的点own的类型为account的节点,且其lastLoginTime是2020年04月14日或lastLoginTime小于12;2: 给出类型为贷款的点,返回72个;3: 给出158个名为孙科的点own的标签为account的节点,且节点createTime不等于2006年11月25日或id在44到70之间;4: 查询前34个id大于88或名字是韩国强,且薪资等于47的person;5: 找出以还款关系关联了贷款defaultName的账号;6: 查找和person赵思琪有关的公司,再查找和赵思琪person_own_account的其他账号,返回它们;7: 给出全部id为159的loan关联的account,和以deposit关系关联了这些account的其他loan;",
        "output": "查询语句为:1: match(a where a.name='黄科')-[e:person_own_account]->(b:account where b.lastLoginTime = '2020-04-14' or b.lastLoginTime < 12) return b limit 28;2: match(a:loan) return a limit 72;3: match(a where a.name='孙科')-[e:person_own_account]->(b:account where b.createTime <> '2006-11-25' or (b.id BETWEEN 44 AND 70)) return b limit 158;4: match(a:person where (a.id > 88 or a.name = '韩国强') and a.salary = 47) return a limit 34;5: match(a:loan where a.name='defaultName')<-[e:account_repay_loan]-(b:account) return b;6: match(a:person where a.name = '赵思琪')-[e]-(b:company), (a:person)-[e2:person_own_account]->(c:account) return a, b, c;7: match(a:loan where a.id = '159')-[e]-(b:account)<-[e2:loan_deposit_account]-(c:loan) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为中国军事论坛的节点包含的用户或标签或论坛",
        "output": "match(a where a.name='中国军事论坛')-[e:contain]->(b:user | tag | forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出被book java程序设计relates的book;2: 给出标签等于author的点,返回85个;3: 给出170个编辑赵建国和何轩,共同的朋友;4: 请帮我查找全部与马梅存在author_write_book关系的book,book与book存在book_refers_book关系的点,返回这些点的createTime;5: 查询190个与吴月和黄梅都存在关系的reader节点;",
        "output": "查询语句为:1: match(a:book)<-[e:relates]-(b:book where b.name='java程序设计') return a, b;2: match(a:author) return a limit 85;3: match(a:publisher where a.name='赵建国')-[e:friend]->(b)<-[e2:friend]-(c:publisher where c.name='何轩') return b limit 170;4: match(a where a.name = '马梅')-[e:author_write_book]->(b:book)-[e2:book_refers_book]->(c:book) return c.createTime;5: match(a where a.name='吴月')-[e]->(b:reader)<-[e2]-(c where c.name='黄梅') return b limit 190;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于person,边标签等于父母的边,返回这些边的f0加683的最小值,和源点id减39的平均值",
        "output": "match(a:person)-[e:parent]->(b) return MIN(e.f0 + 683), AVG(e.srcId - 39)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person以名字分组的年龄, 根据年龄降序排序",
        "output": "match(a:person) return a.age group by a.name order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有与person李月有关系的person的age",
        "output": "match(a:person where a.name='李月')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与教师有关系的大学节点，限制条件是大学节点的价值小于等于258,然后计算这些节点中每个节点的ID的平均值，并将这些ID值相乘，最后返回这些节点的ID平均值乘以ID和的余数，即价值对741取余的值。",
        "output": "match(a:teacher)-[e]->(b:university where b.value <= 258) return SUM(AVG(b.id) * b.id), b.value % 741",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有类型为帖子或论坛的点",
        "output": "match(a:post | forum) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询国家中国的所有伙伴,的f0乘684的值",
        "output": "match(a:country where a.name= '中国')-[e:partner]->(b) return e.f0 * 684",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出138个名为ISSUE-77的点belong的类型为repository的节点,且节点name不是Tugraph",
        "output": "match(a where a.name='ISSUE-77')-[e:belong]->(b:repository where b.name <> 'Tugraph') return b limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Prescription_314和Prescription_112都有关联的处方节点，并返回它们的ID。",
        "output": "match(a:prescription where a.name='Prescription_314')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_112') return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签等于person,目标点标签等于person,标签等于person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person有关联的评论节点,并根据其创建时间,id分组,返回创建时间,id,以及id对id取余除443加368的值",
        "output": "match(a:person)-[e:likes]-(b:comment) return b.createTime, b.id, b.id % b.id / 443 + 368 group by b.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,createTime,id, 数据为(12,1995-08-09,12), 源点的id等于输入表id,返回所有和名为马雪的author有friend关系,或有friend的friend关系的author",
        "output": "with p as (select * from (VALUES(12,1995-08-09,12)) as t(id,createTime,id))MATCH (a:author WHERE a.id = p.id AND (n.name = 马雪)) -[e:friend ]->{1,2}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为杜强的节点发布的编辑或书",
        "output": "match(a where a.name='杜强')-[e:publish]->(b:publisher | book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从publisher赵科出发，沿着publish标签的边走3步，找到对应的book点",
        "output": "match(a:publisher where a.name='赵科')-[e:publish]->{3,3}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 返回person的partner,或其partner的partner;2: 查找person invest的company,返回其源点的height乘168的最小值,以及目标点的id除31的最小值;3: 帮我查询全部loan以id,amount,weight分组的amount, 根据amount从大到小排序;4: 找出类型是company_apply_loan,且weight不为空的边;5: 查询贷款的3度以内的环;",
        "output": "查询语句为:1: match(a:person)-[e:partner]->{1,2}(b) return b;2: match(a:person)-[e:person_invest_company]->(b:company) return MIN(a.height * 168), MIN(b.id / 31);3: match(a:loan) return a.amount group by a.id, a.amount, a.weight order by a.amount desc;4: match(a)-[e:company_apply_loan where (e.weight is not null)]->(b) return e;5: match(a:loan)->{0,2}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和名为Post_451的帖子有相关者关系,或有相关者的相关者关系的标签",
        "output": "match(a:post where n.name=Post_451)-[e:relation]->{1,2}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为王思思的点的,创建时间不等于2013年01月28日的朋友,返回这些朋友的名字,和边的源点id",
        "output": "match(a where a.name='王思思')-[e:friend]->(b where b.createTime <> '2013-01-28') return b.name,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前172个id大于等于32,id的数量大于等于9150,或id为空的学生",
        "output": "match(a:student where (a.id >= 32 and COUNT(a.id) >= 9150) or (a.id is null)) return a limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表575,446,711,18,11, 以属性id作为相等条件,请帮我查找标签为buyer_cancel_orders,并且f1不等于true或srcId在53到100之间或srcId为空的边",
        "output": "with p as (select * from (VALUES(575),(446),(711),(18),(11)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:buyer_cancel_orders WHERE e.f1 <> TRUE OR e.srcId BETWEEN ASYMMETRIC 53 AND 100 OR e.srcId IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找标签，叫做'动作'。",
        "output": "match(a:tag where a.name = '动作') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回107个与美团和字节都存在关系的person或company或software节点",
        "output": "match(a where a.name='美团')-[e]->(b:person | company | software)<-[e2]-(c where c.name='字节') return b limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询身高大于185cm，按性别升序排序的前162个人。",
        "output": "match(a:person where a.height > 185) return a order by a.gender asc limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询用户的相关者,或其相关者的相关者",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王红的点选择的课程",
        "output": "match(a where a.name='王红')-[e:selects]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回101个大于等于72或不是56或小于76的城市，按价值降序排列。",
        "output": "match(a:city where a.id >= 72 or a.id <> 56 or a.id < 76) return a order by a.value desc limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出peopleNumber不为空的节点",
        "output": "match(a where (a.peopleNumber is not null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,gender,age, 数据为(199,'male',18),(198,'male',36)的子查询作为输入表, 以属性height作为相等条件,查询全部和名为计算机学院的部门有朋友关系,或有朋友的朋友关系的教师",
        "output": "with p as (select * from (VALUES(199,'male',18),(198,'male',36)) as t(height,gender,age))MATCH (a:department WHERE a.height = p.height AND (n.name = 计算机学院)) -[e:friend ]->{1,2}(b:teacher) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出102个与标签为'作家'的点有联系的人，以及与这些人也有联系的其他作家。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author) return c limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和publisher陈国强之间有publish关系的book",
        "output": "match(a:publisher where a.name='陈国强')-[e:publish]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回47个名为PR-143的点belong的标签为repository的节点,且节点id不为空且stars小于等于212",
        "output": "match(a where a.name='PR-143')-[e:belong]->(b:repository where (b.id is not null) and b.stars <= 212) return b limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找仓库拥有的合并请求,返回其源点的stars的平均值除860的值,以及目标点的id的求和值除41的个数",
        "output": "match(a:repository)-[e:has]->(b:pullRequest) return AVG(a.stars) / 860, COUNT(SUM(b.id) / 41)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为student的点有selects关系的course,以及和这些course有belong关系的department,以及和这些department有has关系的teacher",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:teacher) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出大学南京大学拥有的部门节点拥有的教师",
        "output": "match(a:university where a.name = '南京大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以51作为请求点id, 以属性id作为相等条件,请帮我查找全部person的friend,或其friend的friend",
        "output": "with p as (select * from (VALUES(51)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_friend_person ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和仓库Flink之间有拥有关系的用户",
        "output": "match(a:repository where a.name='Flink')-[e:has]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 找出和person有关联的person节点,并根据其salary,id分组,返回salary,id,以及age乘age的值;2: 请帮我查找全部源点标签等于person,边标签等于person_knows_person,且f1是true,f0大于919,targetId为空的边;3: 帮我查询所有和person孙雪有关系的person节点,返回这些点的年龄;4: 给出全部名为韩雪的点likes的person;5: 查找62个身高小于等于196或性别是famale,且名字不等于孙强的person,根据薪资降序排列;6: 请帮我查找名为吴月的person,以及与其有关的person,并返回吴月的name和这些person的name;7: 查找所有源点性别不是famale,目标点年龄在63到99之间或年龄是20,且薪资不是1279,且类型是person_likes_person的边;",
        "output": "查询语句为:1: match(a:person)-[e:person_knows_person]-(b:person) return b.salary, b.id, b.age * b.age group by b.salary, b.id;2: match(a:person)-[e:person_knows_person where e.f1 = true and e.f0 > 919 and (e.targetId is null)]->(b) return e;3: match(a:person where a.name='孙雪')-[e]-(b:person) return b.age;4: match(a where a.name='韩雪')-[e:person_likes_person]->(b:person) return b;5: match(a:person where (a.height <= 196 or a.gender = 'famale') and a.name <> '孙强') return a order by a.salary desc limit 62;6: match(a:person where name = '吴月')-[e]-(b:person) return a.name, b.name;7: match(a where a.gender <> 'famale')-[e:person_likes_person]->(b where ((b.age BETWEEN 63 AND 99) or b.age = 20) and b.salary <> 1279) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "陈强和郑建聪是51个用户的共同伙伴。",
        "output": "match(a:user where a.name='陈强')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='郑建聪') return b limit 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有性别为男性，身高最大为196cm，并按照姓名降序排列的卖家，总共有24人。",
        "output": "match(a:seller where MAX(a.height) = 196 and a.gender = 'male') return a order by a.name desc limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出72个名为李国强的点creates的标签为pullRequest的节点,且节点changeFileNumber大于等于470,createTime不是2009年02月26日",
        "output": "match(a where a.name='李国强')-[e:creates]->(b:pullRequest where b.changeFileNumber >= 470 and b.createTime <> '2009-02-26') return b limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出城市中所有ID小于等于9的大学节点，并统计这些节点所属的等级对等级取余的个数，以及level的最小值对3取余的最小值。",
        "output": "match(a:city)-[e]->(b:university where b.id <= 9) return COUNT(b.level % b.level), MIN(MIN(b.level) % 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找教师郑月教的课程, 令课程的名字等于教师的age的个数对46取余的最大值,令教师的名字等于教师的身高的最大值,令教师的性别等于教师的名字, 返回教师的id, 课程的价值",
        "output": "match(a:teacher where a.name='郑月')-[e:teach]->(b:course) let b.name = MAX(COUNT(a.age) % 46),let a.name = MAX(a.height),let a.gender = a.name return a.id,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 找出标签为post的点,并根据id降序排列;2: 查找全部Post_398的点has的tag,然后查找Post_398被publish的user,一起返回;3: 找出user陈思思publish的post,被其他user publish的数量;",
        "output": "查询语句为:1: match(a:post) return a order by a.id desc;2: match(a where a.name = 'Post_398')-[e:post_has_tag]->(b:tag),(a where a.name = 'Post_398')<-[e2:user_publish_post]-(c:user) return a, b, c;3: match(a:user where a.name='陈思思')-[e:user_publish_post]->(b:post)<-[e2:user_publish_post]-(c:user) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与Prescription_477有包含关系的药品，以及与Prescription_341有包含关系的药品，并返回它们。",
        "output": "match(a:prescription where a.name = 'Prescription_477')-[e:contain]->(b:medicine),(c:prescription where c.name = 'Prescription_341')-[e2:contain]->(d:medicine) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(78,16,'famale'),(48,14,'male')作为请求表数据,属性分别为age,id,gender, 源点的gender等于输入表gender,请帮我查找被部门法学院拥有的教师",
        "output": "with p as (select * from (VALUES(78,16,'famale'),(48,14,'male')) as t(age,id,gender))MATCH (a:teacher WHERE a.gender = p.gender) <-[e:department_has_teacher ]-(b:department WHERE b.name = '法学院') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出买家孙思琪取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='孙思琪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为杜若涵的goods或seller,以及与其有关的buyer,并返回杜若涵的name和这些buyer的name",
        "output": "match(a:goods | seller where name = '杜若涵')-[e]-(b:buyer) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为公司的点",
        "output": "match(a:company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以237,545,330,225作为请求点id, 源点的id等于输入表id,帮我查询所有源点标签为卖家,目标点标签为商品,标签为seller_has_goods的边",
        "output": "with p as (select * from (VALUES(237),(545),(330),(225)) as t(id)) MATCH (a:seller WHERE a.id = p.id) -[e:seller_has_goods ]->(b:goods) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和编辑李若涵有关的读者,再给出和李若涵发布的其他书,返回它们",
        "output": "match(a:publisher where a.name = '李若涵')-[e]-(b:reader), (a:publisher)-[e2:publish]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出ID小于等于91的评论所属电影名称及标签。",
        "output": "match(a:comment where a.id <= 91)-[e:belong]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出city contain的company, 令company的peopleNumber的值等于containcompany的city的name的最大值, 再查找company belong的city",
        "output": "match(a:city)-[e:contain]->(b:company) let b.peopleNumber = MAX((b:company)<-[e2:contain]-(c:city) => c.name) match(b:company)-[e3:belong]->(d:city) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有源点满足条件权重小于329或名字是Prescription_408,且名字是Prescription_372,目标点满足条件权重在282到540之间且名字不等于散利痛且价格为空,且标签为prescription_contain_medicine的边",
        "output": "match(a where (a.weight < 329 or a.name = 'Prescription_408') and a.name = 'Prescription_372')-[e:prescription_contain_medicine]->(b where (b.weight BETWEEN 282 AND 540) and b.name <> '散利痛' and (b.price is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与电影我不是药神有关且与评论Comment_145有关的电影节点，并返回它们的类别。",
        "output": "match(a:film where a.name='我不是药神')-[e]->(b:film)<-[e2]-(c:comment where c.name='Comment_145') return b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回50个person杜宏和周思琪,共同的parent",
        "output": "match(a:person where a.name='杜宏')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='周思琪') return b limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司蚂蚁集团有关系的person或公司或账号,返回这些点的id,性别,名字",
        "output": "match(a:company where a.name='蚂蚁集团')-[e]-(b:person | company | account) return b.id, b.gender, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找孙科接受的处方，返回处方中包含的药物的价格。",
        "output": "match(a:patient where name = '孙科')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与书悲惨世界有关系的作家的薪资",
        "output": "match(a:book where a.name='悲惨世界')-[e]-(b:author) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找等级小于2的大学中，它们的部门名称和所属教师名称。",
        "output": "match(a:university where MAX(a.level) < 2)-[e:has]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与国家相关的公司，以及这些公司与其他城市的关联关系。",
        "output": "match(a:country where a.id = '66')-[e]-(b:company)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为张红的,id小于93或薪资不等于9786的相关者,返回这些相关者的名字,和边的时间戳,f1",
        "output": "match(a where a.name='张红')-[e:relation]->(b where b.id < 93 or b.salary <> 9786) return b.name,e.timeStamp, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与事项有关系的用户节点,且用户节点的id等于65,并返回这些用户的salary的平均值加7689的值,以及用户的age的数量减38的数量",
        "output": "match(a:issue)-[e]->(b:user where b.id = 65) return AVG(b.salary) + 7689, COUNT(COUNT(b.age) - 38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点价值不为空,边类型是拥有,且满足条件源点id小于199的边,返回这些边的目标点id除目标点id的值",
        "output": "match(a where (a.value is not null))-[e:has where e.srcId < 199]->(b) return e.targetId / e.targetId",
        "history": []
    }
]