# Generated from GqlParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,430,5198,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,1,0,1,0,3,0,1143,
        8,0,1,0,1,0,1,1,1,1,3,1,1149,8,1,1,1,3,1,1152,8,1,1,2,1,2,3,2,1156,
        8,2,1,3,4,3,1159,8,3,11,3,12,3,1160,1,4,1,4,3,4,1165,8,4,1,5,1,5,
        1,5,3,5,1170,8,5,3,5,1172,8,5,1,5,1,5,3,5,1176,8,5,1,5,3,5,1179,
        8,5,1,6,1,6,3,6,1183,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1191,8,7,1,
        8,1,8,1,8,1,9,3,9,1197,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,
        1,11,1,12,1,12,1,12,3,12,1211,8,12,1,13,3,13,1214,8,13,1,13,1,13,
        1,13,1,13,1,14,3,14,1221,8,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,3,16,1234,8,16,1,16,1,16,1,17,1,17,1,17,3,17,
        1241,8,17,1,18,3,18,1244,8,18,1,18,1,18,1,18,3,18,1249,8,18,1,18,
        1,18,1,18,1,18,3,18,1255,8,18,1,18,3,18,1258,8,18,1,19,1,19,1,19,
        1,20,1,20,1,20,3,20,1266,8,20,1,21,1,21,1,21,5,21,1271,8,21,10,21,
        12,21,1274,9,21,1,22,1,22,3,22,1278,8,22,1,23,1,23,1,23,1,23,3,23,
        1284,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,
        1,33,1,33,1,34,1,34,3,34,1314,8,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,3,41,1332,8,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,1376,8,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,
        1,45,1,45,1,46,1,46,1,46,3,46,1390,8,46,1,47,1,47,1,47,1,48,1,48,
        1,49,1,49,1,49,3,49,1400,8,49,1,50,1,50,3,50,1404,8,50,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,1619,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
        1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,1637,8,59,1,60,
        1,60,1,61,1,61,1,62,1,62,1,63,1,63,3,63,1647,8,63,1,64,1,64,1,65,
        1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,3,70,
        1664,8,70,1,70,1,70,1,70,3,70,1669,8,70,1,70,1,70,3,70,1673,8,70,
        1,71,1,71,1,72,1,72,1,73,1,73,3,73,1681,8,73,1,74,1,74,3,74,1685,
        8,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,1705,8,81,1,82,1,82,1,83,1,83,
        3,83,1711,8,83,1,84,1,84,1,85,3,85,1716,8,85,1,85,3,85,1719,8,85,
        1,85,1,85,1,86,4,86,1724,8,86,11,86,12,86,1725,1,87,1,87,1,87,3,
        87,1731,8,87,1,88,1,88,5,88,1735,8,88,10,88,12,88,1738,9,88,1,89,
        1,89,1,89,1,89,3,89,1744,8,89,1,90,1,90,3,90,1748,8,90,1,90,1,90,
        1,91,3,91,1753,8,91,1,91,1,91,1,91,1,91,1,92,3,92,1760,8,92,1,92,
        3,92,1763,8,92,1,92,1,92,1,93,1,93,1,93,1,94,3,94,1771,8,94,1,94,
        1,94,1,94,1,94,1,95,3,95,1778,8,95,1,95,3,95,1781,8,95,1,95,1,95,
        1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,3,98,1793,8,98,1,98,3,98,
        1796,8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,3,99,1806,8,99,
        1,100,1,100,1,101,1,101,1,102,1,102,1,102,1,102,3,102,1816,8,102,
        1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1827,
        8,104,1,105,4,105,1830,8,105,11,105,12,105,1831,1,106,1,106,3,106,
        1836,8,106,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1844,8,107,
        1,108,1,108,1,108,1,108,1,108,3,108,1851,8,108,1,108,1,108,1,109,
        1,109,1,109,1,109,3,109,1859,8,109,1,109,1,109,1,110,1,110,3,110,
        1865,8,110,1,110,1,110,1,110,1,110,3,110,1871,8,110,1,110,1,110,
        1,110,3,110,1876,8,110,1,110,3,110,1879,8,110,1,110,1,110,1,110,
        3,110,1884,8,110,1,110,3,110,1887,8,110,1,111,3,111,1890,8,111,1,
        111,1,111,3,111,1894,8,111,1,111,3,111,1897,8,111,1,112,1,112,3,
        112,1901,8,112,1,112,1,112,3,112,1905,8,112,1,112,3,112,1908,8,112,
        1,112,3,112,1911,8,112,1,112,3,112,1914,8,112,1,113,1,113,1,113,
        1,114,1,114,1,114,1,114,1,114,1,115,1,115,3,115,1926,8,115,1,115,
        1,115,1,115,3,115,1931,8,115,1,115,1,115,1,116,1,116,3,116,1937,
        8,116,1,116,1,116,1,116,1,116,1,116,3,116,1944,8,116,1,116,1,116,
        1,116,3,116,1949,8,116,1,116,1,116,3,116,1953,8,116,1,116,1,116,
        1,116,1,117,3,117,1959,8,117,1,117,1,117,1,117,3,117,1964,8,117,
        1,117,3,117,1967,8,117,1,118,1,118,1,118,1,118,3,118,1973,8,118,
        1,119,1,119,3,119,1977,8,119,1,119,1,119,1,119,1,119,3,119,1983,
        8,119,1,119,1,119,1,120,1,120,1,121,1,121,3,121,1991,8,121,1,122,
        1,122,3,122,1995,8,122,1,123,1,123,1,123,3,123,2000,8,123,1,124,
        1,124,1,124,1,125,1,125,3,125,2007,8,125,1,126,3,126,2010,8,126,
        1,126,4,126,2013,8,126,11,126,12,126,2014,1,126,3,126,2018,8,126,
        1,127,4,127,2021,8,127,11,127,12,127,2022,1,128,1,128,3,128,2027,
        8,128,1,129,1,129,3,129,2031,8,129,1,130,1,130,1,130,1,130,1,130,
        3,130,2038,8,130,1,131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,
        1,133,5,133,2049,8,133,10,133,12,133,2052,9,133,1,134,1,134,1,134,
        1,134,3,134,2058,8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,136,
        1,136,1,136,1,136,3,136,2070,8,136,1,136,1,136,1,137,1,137,1,137,
        1,137,1,137,3,137,2079,8,137,1,137,1,137,1,138,1,138,1,138,1,138,
        1,139,1,139,1,139,5,139,2090,8,139,10,139,12,139,2093,9,139,1,140,
        1,140,1,140,1,141,1,141,1,141,5,141,2101,8,141,10,141,12,141,2104,
        9,141,1,142,1,142,3,142,2108,8,142,1,143,1,143,1,143,1,143,1,144,
        1,144,1,144,1,144,1,145,3,145,2119,8,145,1,145,1,145,1,145,1,146,
        1,146,1,146,5,146,2127,8,146,10,146,12,146,2130,9,146,1,147,1,147,
        1,148,1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,151,1,151,3,151,
        2144,8,151,5,151,2146,8,151,10,151,12,151,2149,9,151,1,152,3,152,
        2152,8,152,1,152,1,152,1,152,1,152,3,152,2158,8,152,1,153,1,153,
        1,154,1,154,1,154,1,154,3,154,2166,8,154,1,154,3,154,2169,8,154,
        1,155,1,155,1,156,1,156,1,156,1,156,5,156,2177,8,156,10,156,12,156,
        2180,9,156,1,157,1,157,3,157,2184,8,157,1,158,1,158,3,158,2188,8,
        158,1,158,1,158,3,158,2192,8,158,1,158,1,158,3,158,2196,8,158,3,
        158,2198,8,158,1,159,1,159,1,160,1,160,3,160,2204,8,160,1,161,1,
        161,1,161,1,161,3,161,2210,8,161,1,162,5,162,2213,8,162,10,162,12,
        162,2216,9,162,1,162,1,162,1,163,1,163,1,163,1,164,1,164,1,164,1,
        164,1,165,1,165,1,165,1,166,1,166,1,166,1,167,3,167,2234,8,167,1,
        167,1,167,3,167,2238,8,167,1,168,4,168,2241,8,168,11,168,12,168,
        2242,1,169,1,169,3,169,2247,8,169,1,170,1,170,1,170,1,170,1,170,
        3,170,2254,8,170,1,171,1,171,3,171,2258,8,171,1,172,1,172,1,172,
        1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,3,174,2275,8,174,1,175,4,175,2278,8,175,11,175,12,175,2279,
        1,176,1,176,1,177,1,177,1,177,3,177,2287,8,177,1,178,1,178,1,178,
        1,179,1,179,1,179,5,179,2295,8,179,10,179,12,179,2298,9,179,1,180,
        1,180,1,180,1,180,1,180,3,180,2305,8,180,1,181,1,181,1,181,3,181,
        2310,8,181,1,182,1,182,1,182,1,183,1,183,1,183,1,184,1,184,1,184,
        1,184,1,185,1,185,3,185,2324,8,185,1,185,3,185,2327,8,185,1,185,
        1,185,3,185,2331,8,185,1,185,3,185,2334,8,185,1,186,1,186,3,186,
        2338,8,186,1,186,1,186,3,186,2342,8,186,1,187,1,187,1,187,1,188,
        3,188,2348,8,188,1,188,3,188,2351,8,188,1,188,1,188,3,188,2355,8,
        188,1,188,3,188,2358,8,188,1,188,1,188,3,188,2362,8,188,1,189,1,
        189,1,189,5,189,2367,8,189,10,189,12,189,2370,9,189,1,190,1,190,
        1,190,3,190,2375,8,190,1,191,1,191,1,191,1,191,5,191,2381,8,191,
        10,191,12,191,2384,9,191,1,191,1,191,1,192,1,192,1,192,1,192,1,192,
        1,192,1,192,1,192,1,192,1,192,3,192,2398,8,192,1,193,1,193,1,193,
        1,194,1,194,1,194,5,194,2406,8,194,10,194,12,194,2409,9,194,1,195,
        1,195,3,195,2413,8,195,1,196,1,196,3,196,2417,8,196,1,197,1,197,
        1,197,1,197,1,197,5,197,2424,8,197,10,197,12,197,2427,9,197,1,197,
        1,197,1,198,1,198,3,198,2433,8,198,1,199,1,199,1,199,1,199,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,201,3,201,2448,8,201,
        1,201,1,201,3,201,2452,8,201,1,201,1,201,1,202,1,202,1,202,3,202,
        2459,8,202,1,203,1,203,1,203,1,203,1,203,1,203,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,205,1,205,1,206,
        1,206,1,206,1,206,4,206,2484,8,206,11,206,12,206,2485,1,206,1,206,
        1,207,1,207,1,207,1,207,3,207,2494,8,207,1,207,1,207,1,208,1,208,
        1,208,1,209,1,209,1,210,1,210,1,211,1,211,3,211,2507,8,211,1,211,
        3,211,2510,8,211,1,211,1,211,3,211,2514,8,211,1,211,3,211,2517,8,
        211,1,211,3,211,2520,8,211,1,211,3,211,2523,8,211,1,211,3,211,2526,
        8,211,1,211,3,211,2529,8,211,1,211,3,211,2532,8,211,1,211,3,211,
        2535,8,211,1,212,1,212,1,212,5,212,2540,8,212,10,212,12,212,2543,
        9,212,1,213,1,213,1,213,3,213,2548,8,213,1,214,1,214,1,214,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,5,215,2560,8,215,10,215,12,215,
        2563,9,215,3,215,2565,8,215,1,216,1,216,1,216,5,216,2570,8,216,10,
        216,12,216,2573,9,216,1,217,1,217,1,217,1,218,1,218,1,218,1,218,
        3,218,2582,8,218,1,219,3,219,2585,8,219,1,219,1,219,1,219,1,220,
        1,220,3,220,2592,8,220,1,221,3,221,2595,8,221,1,221,1,221,1,222,
        1,222,3,222,2601,8,222,1,222,1,222,1,223,1,223,1,223,5,223,2608,
        8,223,10,223,12,223,2611,9,223,1,224,1,224,1,224,3,224,2616,8,224,
        1,224,1,224,3,224,2620,8,224,1,225,1,225,1,225,5,225,2625,8,225,
        10,225,12,225,2628,9,225,1,226,1,226,1,227,1,227,1,227,1,228,1,228,
        1,228,1,229,1,229,1,230,1,230,1,231,1,231,1,232,1,232,1,233,1,233,
        3,233,2648,8,233,1,234,1,234,1,234,1,235,1,235,1,235,5,235,2656,
        8,235,10,235,12,235,2659,9,235,1,235,1,235,3,235,2663,8,235,1,236,
        1,236,3,236,2667,8,236,1,237,3,237,2670,8,237,1,237,1,237,3,237,
        2674,8,237,1,237,3,237,2677,8,237,1,238,1,238,3,238,2681,8,238,1,
        239,1,239,1,239,1,240,1,240,1,240,1,241,1,241,3,241,2691,8,241,1,
        241,3,241,2694,8,241,1,242,1,242,3,242,2698,8,242,1,242,3,242,2701,
        8,242,1,243,1,243,1,243,5,243,2706,8,243,10,243,12,243,2709,9,243,
        1,244,3,244,2712,8,244,1,244,3,244,2715,8,244,1,244,1,244,1,245,
        1,245,1,245,1,246,1,246,1,246,1,247,1,247,3,247,2727,8,247,1,248,
        1,248,3,248,2731,8,248,1,249,1,249,1,250,1,250,1,250,3,250,2738,
        8,250,1,251,1,251,3,251,2742,8,251,1,251,3,251,2745,8,251,1,252,
        1,252,1,253,1,253,3,253,2751,8,253,1,253,3,253,2754,8,253,1,253,
        3,253,2757,8,253,1,254,1,254,1,255,1,255,1,255,1,255,3,255,2765,
        8,255,1,256,1,256,1,256,3,256,2770,8,256,1,256,3,256,2773,8,256,
        1,257,1,257,1,257,3,257,2778,8,257,1,257,3,257,2781,8,257,1,258,
        1,258,1,258,3,258,2786,8,258,1,258,3,258,2789,8,258,1,259,1,259,
        1,259,3,259,2794,8,259,1,259,3,259,2797,8,259,1,259,1,259,1,260,
        1,260,1,261,1,261,1,261,3,261,2806,8,261,1,262,1,262,1,262,1,262,
        1,262,5,262,2813,8,262,10,262,12,262,2816,9,262,1,263,1,263,1,263,
        1,263,1,263,5,263,2823,8,263,10,263,12,263,2826,9,263,1,264,4,264,
        2829,8,264,11,264,12,264,2830,1,265,1,265,1,265,3,265,2836,8,265,
        1,266,1,266,1,266,1,267,1,267,1,267,1,268,1,268,1,268,3,268,2847,
        8,268,1,269,1,269,3,269,2851,8,269,1,270,1,270,1,270,1,270,1,271,
        3,271,2858,8,271,1,271,3,271,2861,8,271,1,271,3,271,2864,8,271,1,
        272,3,272,2867,8,272,1,272,1,272,1,273,1,273,1,273,1,274,1,274,1,
        275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,2884,8,275,1,
        276,1,276,1,276,1,276,1,277,1,277,1,277,5,277,2893,8,277,10,277,
        12,277,2896,9,277,1,278,1,278,1,278,1,278,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,3,279,2909,8,279,1,280,1,280,1,280,3,280,2914,
        8,280,1,281,1,281,1,281,1,282,1,282,1,282,1,283,1,283,1,283,1,283,
        1,284,1,284,1,284,3,284,2929,8,284,1,285,1,285,1,285,1,286,1,286,
        1,286,1,287,1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,3,288,2948,8,288,1,289,1,289,1,289,3,289,2953,8,289,1,290,
        1,290,1,290,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,293,1,293,
        1,293,3,293,2968,8,293,1,294,1,294,1,294,1,295,1,295,1,295,1,296,
        1,296,1,296,1,296,1,297,1,297,3,297,2982,8,297,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,3,298,2991,8,298,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,300,1,300,1,300,1,300,1,300,1,300,1,301,1,301,
        1,301,1,301,1,301,1,301,1,302,1,302,1,302,1,302,1,302,1,302,1,302,
        1,303,1,303,1,303,1,303,1,303,1,303,1,304,1,304,1,304,1,304,1,304,
        1,304,1,304,1,305,1,305,1,305,1,305,1,305,1,305,1,306,1,306,1,306,
        1,306,1,306,1,306,1,306,1,306,1,306,3,306,3047,8,306,1,307,1,307,
        1,307,1,307,1,307,1,307,1,307,1,307,3,307,3057,8,307,1,308,3,308,
        3060,8,308,1,308,3,308,3063,8,308,1,308,1,308,3,308,3067,8,308,1,
        308,3,308,3070,8,308,1,308,3,308,3073,8,308,1,309,1,309,1,309,1,
        310,1,310,1,310,3,310,3081,8,310,1,310,1,310,1,310,3,310,3086,8,
        310,1,311,1,311,1,311,1,312,1,312,1,312,1,313,1,313,1,313,1,314,
        1,314,1,314,1,315,1,315,1,316,1,316,1,316,5,316,3105,8,316,10,316,
        12,316,3108,9,316,1,317,1,317,1,317,1,317,5,317,3114,8,317,10,317,
        12,317,3117,9,317,1,318,1,318,3,318,3121,8,318,1,318,1,318,1,319,
        1,319,1,319,3,319,3128,8,319,1,320,1,320,1,320,1,320,3,320,3134,
        8,320,1,320,1,320,1,320,1,321,1,321,1,321,3,321,3142,8,321,1,321,
        1,321,1,321,1,322,1,322,1,322,3,322,3150,8,322,1,322,1,322,1,322,
        1,323,1,323,1,323,1,323,1,323,3,323,3160,8,323,1,324,1,324,1,324,
        1,324,1,324,1,324,1,324,1,324,3,324,3170,8,324,1,325,1,325,1,325,
        5,325,3175,8,325,10,325,12,325,3178,9,325,1,326,1,326,1,326,5,326,
        3183,8,326,10,326,12,326,3186,9,326,1,327,3,327,3189,8,327,1,327,
        1,327,1,328,1,328,1,328,3,328,3196,8,328,1,329,1,329,1,330,1,330,
        1,330,1,330,1,331,1,331,1,331,1,331,3,331,3208,8,331,1,332,1,332,
        1,332,1,332,1,333,1,333,3,333,3216,8,333,1,333,1,333,3,333,3220,
        8,333,1,333,1,333,1,334,1,334,1,335,1,335,1,336,1,336,1,336,1,336,
        1,336,1,336,1,336,3,336,3235,8,336,1,337,1,337,1,337,1,337,1,337,
        1,338,1,338,1,338,1,338,1,338,1,339,1,339,1,339,1,339,1,340,1,340,
        1,340,1,340,1,340,1,341,1,341,1,341,1,341,1,342,1,342,1,342,1,342,
        1,343,1,343,1,343,1,343,1,343,1,344,1,344,1,344,3,344,3272,8,344,
        1,345,1,345,1,345,1,345,1,345,5,345,3279,8,345,10,345,12,345,3282,
        9,345,1,346,1,346,1,346,1,346,1,346,5,346,3289,8,346,10,346,12,346,
        3292,9,346,1,347,4,347,3295,8,347,11,347,12,347,3296,1,348,1,348,
        1,348,5,348,3302,8,348,10,348,12,348,3305,9,348,1,349,1,349,1,349,
        3,349,3310,8,349,1,350,1,350,1,350,1,351,1,351,1,351,1,352,1,352,
        3,352,3320,8,352,1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,
        3329,8,353,1,354,1,354,1,354,1,355,1,355,1,355,1,356,1,356,1,356,
        1,357,1,357,1,357,1,357,1,358,1,358,1,358,1,358,1,359,1,359,1,359,
        1,359,1,360,1,360,1,360,1,361,1,361,3,361,3357,8,361,1,362,1,362,
        1,362,1,363,1,363,1,363,1,363,1,363,3,363,3367,8,363,1,364,1,364,
        1,364,1,365,1,365,1,365,1,366,1,366,1,366,5,366,3378,8,366,10,366,
        12,366,3381,9,366,1,367,1,367,3,367,3385,8,367,1,368,1,368,1,369,
        1,369,1,369,1,370,1,370,1,370,1,370,1,371,1,371,1,371,5,371,3399,
        8,371,10,371,12,371,3402,9,371,1,371,3,371,3405,8,371,1,372,1,372,
        1,373,1,373,1,373,1,374,1,374,1,374,1,374,1,375,1,375,1,375,1,375,
        1,375,1,375,1,375,1,375,1,375,1,375,4,375,3426,8,375,11,375,12,375,
        3427,1,375,1,375,1,375,1,375,1,375,3,375,3435,8,375,1,375,1,375,
        1,375,1,375,1,375,1,375,3,375,3443,8,375,1,375,1,375,1,375,1,375,
        1,375,1,375,1,375,3,375,3452,8,375,1,375,1,375,3,375,3456,8,375,
        1,375,3,375,3459,8,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,
        1,375,1,375,1,375,1,375,5,375,3472,8,375,10,375,12,375,3475,9,375,
        1,375,1,375,3,375,3479,8,375,1,376,1,376,1,377,1,377,1,378,1,378,
        1,379,1,379,1,380,1,380,1,380,1,380,1,380,1,380,1,380,5,380,3496,
        8,380,10,380,12,380,3499,9,380,1,380,3,380,3502,8,380,1,380,1,380,
        1,381,1,381,1,381,5,381,3509,8,381,10,381,12,381,3512,9,381,1,382,
        1,382,3,382,3516,8,382,1,382,3,382,3519,8,382,1,383,1,383,1,384,
        1,384,1,385,1,385,1,385,1,385,3,385,3529,8,385,1,386,1,386,1,386,
        1,387,1,387,1,387,1,388,1,388,1,389,1,389,1,389,1,389,1,390,1,390,
        1,391,1,391,1,391,5,391,3548,8,391,10,391,12,391,3551,9,391,1,392,
        1,392,3,392,3555,8,392,1,393,1,393,1,393,3,393,3560,8,393,1,394,
        1,394,3,394,3564,8,394,1,394,3,394,3567,8,394,1,394,1,394,1,395,
        3,395,3572,8,395,1,395,1,395,3,395,3576,8,395,1,395,3,395,3579,8,
        395,1,396,1,396,1,397,1,397,1,397,1,397,1,397,3,397,3588,8,397,1,
        398,1,398,1,399,1,399,1,400,1,400,3,400,3596,8,400,1,400,1,400,3,
        400,3600,8,400,1,401,1,401,3,401,3604,8,401,1,402,3,402,3607,8,402,
        1,402,1,402,1,402,1,402,3,402,3613,8,402,1,402,1,402,1,402,3,402,
        3618,8,402,1,403,1,403,1,404,1,404,1,404,1,404,1,404,3,404,3627,
        8,404,1,405,1,405,1,406,1,406,1,407,1,407,1,407,3,407,3636,8,407,
        1,408,1,408,1,408,1,408,1,409,1,409,1,409,1,409,1,410,1,410,1,410,
        1,410,1,411,1,411,1,411,1,411,1,411,1,411,1,412,1,412,1,412,1,412,
        1,412,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,413,1,414,3,414,
        3670,8,414,1,414,3,414,3673,8,414,1,415,1,415,1,415,3,415,3678,8,
        415,1,416,1,416,1,416,1,416,1,417,1,417,1,417,1,417,1,417,1,418,
        1,418,1,418,1,418,1,419,1,419,3,419,3695,8,419,1,420,1,420,1,420,
        1,420,1,420,1,420,3,420,3703,8,420,1,420,3,420,3706,8,420,1,421,
        1,421,1,421,1,421,1,421,1,421,3,421,3714,8,421,1,421,3,421,3717,
        8,421,1,422,1,422,1,423,1,423,1,423,1,424,1,424,1,424,1,424,3,424,
        3728,8,424,1,425,1,425,1,425,1,425,1,425,1,425,1,426,1,426,1,426,
        1,426,1,426,1,426,1,426,1,427,1,427,1,427,1,427,1,427,1,427,1,428,
        1,428,1,429,1,429,1,430,1,430,1,431,1,431,1,432,1,432,1,432,1,432,
        1,432,1,432,1,432,3,432,3764,8,432,1,433,1,433,3,433,3768,8,433,
        1,433,1,433,1,434,1,434,1,434,5,434,3775,8,434,10,434,12,434,3778,
        9,434,1,435,1,435,3,435,3782,8,435,1,435,1,435,1,436,1,436,1,437,
        3,437,3789,8,437,1,437,1,437,1,437,1,438,1,438,1,438,1,438,1,438,
        1,438,1,438,1,438,1,438,1,438,1,438,3,438,3805,8,438,1,438,3,438,
        3808,8,438,1,438,3,438,3811,8,438,1,438,1,438,3,438,3815,8,438,1,
        438,3,438,3818,8,438,1,438,1,438,3,438,3822,8,438,1,438,1,438,3,
        438,3826,8,438,1,438,3,438,3829,8,438,1,438,3,438,3832,8,438,1,438,
        1,438,1,438,3,438,3837,8,438,1,438,1,438,3,438,3841,8,438,1,438,
        1,438,1,438,1,438,5,438,3847,8,438,10,438,12,438,3850,9,438,1,438,
        1,438,3,438,3854,8,438,1,438,1,438,1,438,1,438,1,438,1,438,3,438,
        3862,8,438,1,438,3,438,3865,8,438,1,438,1,438,1,438,4,438,3870,8,
        438,11,438,12,438,3871,5,438,3874,8,438,10,438,12,438,3877,9,438,
        1,439,1,439,1,440,1,440,1,440,1,440,1,440,1,440,3,440,3887,8,440,
        1,441,1,441,3,441,3891,8,441,1,442,1,442,1,442,1,442,1,442,3,442,
        3898,8,442,1,442,3,442,3901,8,442,1,443,1,443,1,443,1,443,1,443,
        3,443,3908,8,443,1,443,1,443,1,443,3,443,3913,8,443,1,443,3,443,
        3916,8,443,1,443,1,443,1,443,1,443,1,443,3,443,3923,8,443,1,443,
        3,443,3926,8,443,1,443,1,443,1,443,1,443,1,443,3,443,3933,8,443,
        1,443,3,443,3936,8,443,3,443,3938,8,443,1,444,1,444,1,445,1,445,
        1,446,1,446,1,447,1,447,3,447,3948,8,447,1,448,1,448,3,448,3952,
        8,448,1,449,1,449,3,449,3956,8,449,1,450,1,450,3,450,3960,8,450,
        1,450,1,450,3,450,3964,8,450,1,450,1,450,3,450,3968,8,450,1,450,
        1,450,3,450,3972,8,450,1,450,1,450,3,450,3976,8,450,1,450,1,450,
        3,450,3980,8,450,1,450,1,450,3,450,3984,8,450,1,450,1,450,1,450,
        1,450,1,450,3,450,3991,8,450,1,450,3,450,3994,8,450,1,450,1,450,
        3,450,3998,8,450,1,450,1,450,3,450,4002,8,450,1,450,1,450,3,450,
        4006,8,450,3,450,4008,8,450,1,451,1,451,3,451,4012,8,451,1,451,1,
        451,3,451,4016,8,451,1,451,1,451,3,451,4020,8,451,1,451,1,451,3,
        451,4024,8,451,1,451,1,451,3,451,4028,8,451,1,451,1,451,3,451,4032,
        8,451,1,451,1,451,3,451,4036,8,451,1,451,1,451,1,451,1,451,1,451,
        3,451,4043,8,451,1,451,3,451,4046,8,451,1,451,1,451,3,451,4050,8,
        451,1,451,1,451,1,451,3,451,4055,8,451,3,451,4057,8,451,1,452,1,
        452,3,452,4061,8,452,1,452,1,452,3,452,4065,8,452,1,452,1,452,3,
        452,4069,8,452,1,452,1,452,3,452,4073,8,452,1,452,1,452,3,452,4077,
        8,452,1,452,1,452,3,452,4081,8,452,1,452,1,452,1,452,3,452,4086,
        8,452,1,452,1,452,1,452,1,452,1,452,3,452,4093,8,452,1,452,3,452,
        4096,8,452,1,452,1,452,1,452,3,452,4101,8,452,3,452,4103,8,452,1,
        453,1,453,1,453,1,453,1,453,3,453,4110,8,453,1,453,1,453,3,453,4114,
        8,453,3,453,4116,8,453,1,454,1,454,1,455,1,455,1,456,1,456,3,456,
        4124,8,456,1,456,1,456,3,456,4128,8,456,1,456,1,456,3,456,4132,8,
        456,1,456,1,456,3,456,4136,8,456,1,456,1,456,3,456,4140,8,456,1,
        456,1,456,1,456,1,456,1,456,3,456,4147,8,456,1,456,1,456,3,456,4151,
        8,456,1,456,3,456,4154,8,456,1,456,1,456,3,456,4158,8,456,1,456,
        1,456,3,456,4162,8,456,1,456,3,456,4165,8,456,3,456,4167,8,456,1,
        457,1,457,3,457,4171,8,457,1,458,1,458,1,458,1,458,1,458,3,458,4178,
        8,458,1,459,1,459,1,460,1,460,1,460,3,460,4185,8,460,1,460,1,460,
        1,460,1,460,3,460,4191,8,460,1,460,1,460,3,460,4195,8,460,3,460,
        4197,8,460,1,461,1,461,1,461,3,461,4202,8,461,1,461,1,461,1,461,
        3,461,4207,8,461,1,461,3,461,4210,8,461,3,461,4212,8,461,1,462,1,
        462,3,462,4216,8,462,1,463,1,463,1,463,3,463,4221,8,463,1,463,1,
        463,1,463,1,463,3,463,4227,8,463,3,463,4229,8,463,1,464,1,464,1,
        464,3,464,4234,8,464,1,464,1,464,1,464,1,464,3,464,4240,8,464,3,
        464,4242,8,464,1,465,1,465,3,465,4246,8,465,1,466,1,466,1,466,1,
        466,3,466,4252,8,466,1,467,1,467,3,467,4256,8,467,1,468,3,468,4259,
        8,468,1,468,1,468,1,468,3,468,4264,8,468,1,469,1,469,3,469,4268,
        8,469,1,469,1,469,3,469,4272,8,469,1,470,1,470,3,470,4276,8,470,
        1,471,1,471,3,471,4280,8,471,1,472,1,472,3,472,4284,8,472,1,473,
        3,473,4287,8,473,1,473,1,473,3,473,4291,8,473,1,474,1,474,3,474,
        4295,8,474,1,475,1,475,3,475,4299,8,475,1,476,3,476,4302,8,476,1,
        476,1,476,3,476,4306,8,476,1,477,3,477,4309,8,477,1,477,1,477,1,
        478,1,478,1,479,1,479,3,479,4317,8,479,1,479,1,479,1,480,1,480,1,
        480,5,480,4324,8,480,10,480,12,480,4327,9,480,1,481,1,481,3,481,
        4331,8,481,1,482,1,482,1,482,1,483,1,483,3,483,4338,8,483,1,483,
        1,483,1,484,1,484,1,484,3,484,4345,8,484,1,485,1,485,1,485,1,485,
        3,485,4351,8,485,1,486,1,486,1,486,1,487,1,487,1,487,1,487,3,487,
        4360,8,487,1,488,1,488,1,489,1,489,3,489,4366,8,489,1,490,1,490,
        1,490,5,490,4371,8,490,10,490,12,490,4374,9,490,1,490,1,490,3,490,
        4378,8,490,3,490,4380,8,490,1,491,1,491,1,491,4,491,4385,8,491,11,
        491,12,491,4386,1,492,1,492,1,492,1,492,1,492,1,492,3,492,4395,8,
        492,1,493,3,493,4398,8,493,1,493,1,493,1,494,1,494,1,495,1,495,3,
        495,4406,8,495,1,496,3,496,4409,8,496,1,496,1,496,1,497,1,497,1,
        497,1,497,1,497,3,497,4418,8,497,1,498,3,498,4421,8,498,1,498,1,
        498,1,499,1,499,3,499,4427,8,499,1,500,3,500,4430,8,500,1,500,1,
        500,1,501,1,501,3,501,4436,8,501,1,501,1,501,1,501,5,501,4441,8,
        501,10,501,12,501,4444,9,501,1,501,1,501,1,501,4,501,4449,8,501,
        11,501,12,501,4450,3,501,4453,8,501,1,502,1,502,1,503,1,503,1,504,
        1,504,1,504,1,505,1,505,1,506,1,506,3,506,4466,8,506,1,506,1,506,
        1,507,1,507,3,507,4472,8,507,1,507,3,507,4475,8,507,1,507,1,507,
        1,508,1,508,3,508,4481,8,508,1,508,1,508,1,509,1,509,3,509,4487,
        8,509,1,509,1,509,3,509,4491,8,509,1,509,1,509,1,510,1,510,3,510,
        4497,8,510,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,511,3,511,
        4507,8,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
        5,511,4518,8,511,10,511,12,511,4521,9,511,1,512,1,512,1,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,
        1,512,1,512,1,512,1,512,3,512,4542,8,512,1,512,1,512,1,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,4,512,
        4558,8,512,11,512,12,512,4559,1,512,1,512,1,512,1,512,1,512,1,512,
        1,512,4,512,4569,8,512,11,512,12,512,4570,1,512,1,512,1,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,3,512,4583,8,512,1,512,1,512,
        1,512,3,512,4588,8,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,
        1,512,1,512,3,512,4599,8,512,1,512,1,512,3,512,4603,8,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,3,512,4613,8,512,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,3,512,4622,8,512,1,512,1,512,
        3,512,4626,8,512,1,512,1,512,1,512,1,512,3,512,4632,8,512,1,512,
        1,512,3,512,4636,8,512,1,512,1,512,1,512,1,512,1,512,5,512,4643,
        8,512,10,512,12,512,4646,9,512,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,3,513,4663,
        8,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,5,513,4691,8,513,10,513,12,513,4694,
        9,513,1,514,1,514,1,515,1,515,1,516,1,516,1,516,1,516,1,516,1,516,
        1,516,1,516,1,516,1,516,3,516,4710,8,516,1,517,1,517,1,517,1,517,
        1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,
        1,517,1,517,1,517,1,517,1,517,1,517,3,517,4733,8,517,1,518,1,518,
        1,518,1,518,1,518,3,518,4740,8,518,1,519,1,519,1,519,1,519,1,520,
        1,520,1,521,1,521,1,522,1,522,1,522,1,522,1,522,1,522,1,522,3,522,
        4757,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        1,522,1,522,1,522,1,522,3,522,4783,8,522,1,522,3,522,4786,8,522,
        1,522,3,522,4789,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        1,522,3,522,4799,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,4808,8,522,1,522,1,522,3,522,4812,8,522,1,523,1,523,1,523,
        1,523,1,523,1,523,1,523,1,523,1,523,1,523,1,523,1,523,3,523,4826,
        8,523,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,5,524,4840,8,524,10,524,12,524,4843,9,524,1,524,1,524,
        1,524,1,524,1,524,4,524,4850,8,524,11,524,12,524,4851,1,524,3,524,
        4855,8,524,1,524,1,524,1,524,1,524,4,524,4861,8,524,11,524,12,524,
        4862,1,524,3,524,4866,8,524,1,524,1,524,3,524,4870,8,524,1,525,1,
        525,1,525,1,525,5,525,4876,8,525,10,525,12,525,4879,9,525,1,525,
        1,525,1,525,1,526,1,526,1,526,1,526,1,526,1,527,1,527,1,527,1,528,
        1,528,1,528,1,528,1,528,1,528,3,528,4898,8,528,1,529,1,529,1,529,
        1,529,1,529,1,529,1,529,1,530,1,530,1,530,1,530,1,530,1,531,1,531,
        1,532,1,532,1,532,1,532,1,532,3,532,4919,8,532,1,533,1,533,1,533,
        1,533,3,533,4925,8,533,1,533,3,533,4928,8,533,1,534,1,534,1,534,
        1,534,3,534,4934,8,534,1,534,3,534,4937,8,534,1,535,1,535,1,535,
        3,535,4942,8,535,1,535,3,535,4945,8,535,1,536,1,536,1,536,1,536,
        3,536,4951,8,536,1,536,3,536,4954,8,536,1,537,1,537,1,537,1,537,
        3,537,4960,8,537,1,537,3,537,4963,8,537,1,538,1,538,1,538,1,538,
        1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,3,538,4977,8,538,
        1,539,1,539,3,539,4981,8,539,1,540,1,540,3,540,4985,8,540,1,541,
        1,541,3,541,4989,8,541,1,542,1,542,1,543,1,543,1,544,1,544,1,545,
        1,545,3,545,4999,8,545,1,546,1,546,1,547,1,547,1,547,1,547,1,547,
        5,547,5008,8,547,10,547,12,547,5011,9,547,3,547,5013,8,547,1,547,
        1,547,1,548,1,548,1,548,1,548,3,548,5021,8,548,1,549,1,549,1,550,
        1,550,1,551,3,551,5028,8,551,1,551,1,551,1,551,1,551,5,551,5034,
        8,551,10,551,12,551,5037,9,551,3,551,5039,8,551,1,551,1,551,1,552,
        1,552,1,552,1,552,5,552,5047,8,552,10,552,12,552,5050,9,552,1,552,
        1,552,1,552,1,552,1,552,1,552,5,552,5058,8,552,10,552,12,552,5061,
        9,552,1,552,1,552,3,552,5065,8,552,1,553,3,553,5068,8,553,1,553,
        1,553,1,553,1,553,5,553,5074,8,553,10,553,12,553,5077,9,553,3,553,
        5079,8,553,1,553,1,553,1,554,1,554,1,554,1,554,1,555,1,555,1,555,
        1,555,1,555,1,555,1,555,1,555,5,555,5095,8,555,10,555,12,555,5098,
        9,555,1,555,1,555,1,556,1,556,1,556,1,556,1,556,5,556,5107,8,556,
        10,556,12,556,5110,9,556,1,556,1,556,1,557,1,557,1,557,1,557,1,558,
        1,558,3,558,5120,8,558,1,559,1,559,3,559,5124,8,559,1,560,1,560,
        3,560,5128,8,560,1,561,1,561,3,561,5132,8,561,1,562,1,562,1,563,
        1,563,3,563,5138,8,563,1,564,1,564,1,564,1,564,3,564,5144,8,564,
        1,565,3,565,5147,8,565,1,565,1,565,1,565,1,565,5,565,5153,8,565,
        10,565,12,565,5156,9,565,3,565,5158,8,565,1,565,1,565,1,566,1,566,
        1,566,1,566,1,566,5,566,5167,8,566,10,566,12,566,5170,9,566,1,566,
        1,566,1,567,1,567,1,567,1,567,1,568,3,568,5179,8,568,1,568,1,568,
        1,568,1,568,5,568,5185,8,568,10,568,12,568,5188,9,568,3,568,5190,
        8,568,1,568,1,568,1,569,1,569,1,569,1,569,1,569,0,4,876,1022,1024,
        1026,570,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
        408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
        440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
        472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
        504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
        536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
        568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,
        600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
        632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
        664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
        696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,
        728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
        760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,
        792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,
        824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,
        856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,
        888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
        920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
        952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,
        984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,
        1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,
        1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
        1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,
        1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,
        1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,0,50,2,0,
        64,64,207,207,1,0,392,395,1,0,396,397,2,0,85,85,261,261,1,0,302,
        305,5,0,162,162,232,232,306,306,314,314,327,357,39,0,30,30,44,44,
        48,49,70,70,92,92,94,95,101,101,103,103,112,112,122,122,124,125,
        130,130,155,159,163,163,175,175,178,178,184,188,191,191,199,199,
        204,204,213,213,218,218,221,222,226,226,238,238,241,241,247,247,
        253,253,255,255,258,258,262,264,266,266,269,269,279,279,290,290,
        294,295,298,298,307,313,315,326,3,0,109,109,268,268,281,281,2,0,
        183,183,259,259,1,0,78,79,2,0,93,93,189,189,2,0,69,69,348,348,3,
        0,162,162,232,232,315,316,2,0,198,198,204,204,2,0,121,121,284,284,
        4,0,30,30,241,241,264,264,290,290,2,0,208,208,210,210,1,0,123,124,
        2,0,4,4,154,154,2,0,14,14,25,25,7,0,43,43,67,67,75,75,125,125,180,
        181,250,251,254,254,2,0,31,31,96,96,1,0,211,212,1,0,307,311,2,0,
        38,39,90,91,2,0,198,198,244,244,2,0,95,95,279,279,2,0,263,263,371,
        371,2,0,25,25,263,263,2,0,270,270,360,360,1,0,50,51,2,0,252,252,
        288,288,1,0,86,87,2,0,36,36,167,167,3,0,16,16,80,80,129,129,1,0,
        127,128,7,0,7,7,9,9,13,13,362,362,368,368,370,370,373,373,2,0,92,
        92,247,247,2,0,202,202,359,359,4,0,2,2,15,15,24,24,182,182,2,0,14,
        14,17,17,2,0,366,366,372,372,4,0,8,8,14,14,17,17,25,25,20,0,28,29,
        40,40,42,42,55,55,60,63,72,74,88,88,108,108,119,119,156,156,158,
        159,163,163,168,168,173,174,196,196,209,209,220,220,242,243,248,
        248,256,257,3,0,173,173,182,182,215,215,2,0,176,176,283,283,3,0,
        53,53,177,177,231,231,3,0,102,102,130,130,261,261,3,0,52,52,161,
        161,265,265,1,0,184,187,5608,0,1140,1,0,0,0,2,1151,1,0,0,0,4,1155,
        1,0,0,0,6,1158,1,0,0,0,8,1164,1,0,0,0,10,1178,1,0,0,0,12,1182,1,
        0,0,0,14,1184,1,0,0,0,16,1192,1,0,0,0,18,1196,1,0,0,0,20,1201,1,
        0,0,0,22,1205,1,0,0,0,24,1210,1,0,0,0,26,1213,1,0,0,0,28,1220,1,
        0,0,0,30,1226,1,0,0,0,32,1233,1,0,0,0,34,1237,1,0,0,0,36,1257,1,
        0,0,0,38,1259,1,0,0,0,40,1262,1,0,0,0,42,1267,1,0,0,0,44,1277,1,
        0,0,0,46,1283,1,0,0,0,48,1285,1,0,0,0,50,1287,1,0,0,0,52,1289,1,
        0,0,0,54,1291,1,0,0,0,56,1295,1,0,0,0,58,1297,1,0,0,0,60,1299,1,
        0,0,0,62,1303,1,0,0,0,64,1305,1,0,0,0,66,1309,1,0,0,0,68,1313,1,
        0,0,0,70,1315,1,0,0,0,72,1317,1,0,0,0,74,1319,1,0,0,0,76,1321,1,
        0,0,0,78,1323,1,0,0,0,80,1325,1,0,0,0,82,1331,1,0,0,0,84,1375,1,
        0,0,0,86,1377,1,0,0,0,88,1380,1,0,0,0,90,1383,1,0,0,0,92,1389,1,
        0,0,0,94,1391,1,0,0,0,96,1394,1,0,0,0,98,1399,1,0,0,0,100,1403,1,
        0,0,0,102,1618,1,0,0,0,104,1620,1,0,0,0,106,1622,1,0,0,0,108,1624,
        1,0,0,0,110,1626,1,0,0,0,112,1628,1,0,0,0,114,1630,1,0,0,0,116,1632,
        1,0,0,0,118,1636,1,0,0,0,120,1638,1,0,0,0,122,1640,1,0,0,0,124,1642,
        1,0,0,0,126,1646,1,0,0,0,128,1648,1,0,0,0,130,1650,1,0,0,0,132,1652,
        1,0,0,0,134,1654,1,0,0,0,136,1656,1,0,0,0,138,1658,1,0,0,0,140,1672,
        1,0,0,0,142,1674,1,0,0,0,144,1676,1,0,0,0,146,1680,1,0,0,0,148,1684,
        1,0,0,0,150,1686,1,0,0,0,152,1688,1,0,0,0,154,1690,1,0,0,0,156,1692,
        1,0,0,0,158,1694,1,0,0,0,160,1696,1,0,0,0,162,1704,1,0,0,0,164,1706,
        1,0,0,0,166,1710,1,0,0,0,168,1712,1,0,0,0,170,1715,1,0,0,0,172,1723,
        1,0,0,0,174,1730,1,0,0,0,176,1732,1,0,0,0,178,1743,1,0,0,0,180,1745,
        1,0,0,0,182,1752,1,0,0,0,184,1762,1,0,0,0,186,1766,1,0,0,0,188,1770,
        1,0,0,0,190,1780,1,0,0,0,192,1784,1,0,0,0,194,1787,1,0,0,0,196,1795,
        1,0,0,0,198,1805,1,0,0,0,200,1807,1,0,0,0,202,1809,1,0,0,0,204,1815,
        1,0,0,0,206,1817,1,0,0,0,208,1826,1,0,0,0,210,1829,1,0,0,0,212,1835,
        1,0,0,0,214,1843,1,0,0,0,216,1845,1,0,0,0,218,1854,1,0,0,0,220,1862,
        1,0,0,0,222,1889,1,0,0,0,224,1913,1,0,0,0,226,1915,1,0,0,0,228,1918,
        1,0,0,0,230,1923,1,0,0,0,232,1934,1,0,0,0,234,1966,1,0,0,0,236,1968,
        1,0,0,0,238,1974,1,0,0,0,240,1986,1,0,0,0,242,1990,1,0,0,0,244,1994,
        1,0,0,0,246,1996,1,0,0,0,248,2001,1,0,0,0,250,2006,1,0,0,0,252,2009,
        1,0,0,0,254,2020,1,0,0,0,256,2026,1,0,0,0,258,2030,1,0,0,0,260,2037,
        1,0,0,0,262,2039,1,0,0,0,264,2042,1,0,0,0,266,2045,1,0,0,0,268,2057,
        1,0,0,0,270,2059,1,0,0,0,272,2065,1,0,0,0,274,2073,1,0,0,0,276,2082,
        1,0,0,0,278,2086,1,0,0,0,280,2094,1,0,0,0,282,2097,1,0,0,0,284,2107,
        1,0,0,0,286,2109,1,0,0,0,288,2113,1,0,0,0,290,2118,1,0,0,0,292,2123,
        1,0,0,0,294,2131,1,0,0,0,296,2133,1,0,0,0,298,2136,1,0,0,0,300,2138,
        1,0,0,0,302,2140,1,0,0,0,304,2151,1,0,0,0,306,2159,1,0,0,0,308,2168,
        1,0,0,0,310,2170,1,0,0,0,312,2172,1,0,0,0,314,2183,1,0,0,0,316,2197,
        1,0,0,0,318,2199,1,0,0,0,320,2203,1,0,0,0,322,2209,1,0,0,0,324,2214,
        1,0,0,0,326,2219,1,0,0,0,328,2222,1,0,0,0,330,2226,1,0,0,0,332,2229,
        1,0,0,0,334,2237,1,0,0,0,336,2240,1,0,0,0,338,2246,1,0,0,0,340,2253,
        1,0,0,0,342,2257,1,0,0,0,344,2259,1,0,0,0,346,2262,1,0,0,0,348,2274,
        1,0,0,0,350,2277,1,0,0,0,352,2281,1,0,0,0,354,2283,1,0,0,0,356,2288,
        1,0,0,0,358,2291,1,0,0,0,360,2304,1,0,0,0,362,2306,1,0,0,0,364,2311,
        1,0,0,0,366,2314,1,0,0,0,368,2317,1,0,0,0,370,2333,1,0,0,0,372,2341,
        1,0,0,0,374,2343,1,0,0,0,376,2361,1,0,0,0,378,2363,1,0,0,0,380,2371,
        1,0,0,0,382,2376,1,0,0,0,384,2397,1,0,0,0,386,2399,1,0,0,0,388,2402,
        1,0,0,0,390,2412,1,0,0,0,392,2414,1,0,0,0,394,2418,1,0,0,0,396,2432,
        1,0,0,0,398,2434,1,0,0,0,400,2438,1,0,0,0,402,2447,1,0,0,0,404,2458,
        1,0,0,0,406,2460,1,0,0,0,408,2466,1,0,0,0,410,2473,1,0,0,0,412,2479,
        1,0,0,0,414,2489,1,0,0,0,416,2497,1,0,0,0,418,2500,1,0,0,0,420,2502,
        1,0,0,0,422,2504,1,0,0,0,424,2536,1,0,0,0,426,2544,1,0,0,0,428,2549,
        1,0,0,0,430,2564,1,0,0,0,432,2566,1,0,0,0,434,2574,1,0,0,0,436,2581,
        1,0,0,0,438,2584,1,0,0,0,440,2591,1,0,0,0,442,2594,1,0,0,0,444,2598,
        1,0,0,0,446,2604,1,0,0,0,448,2612,1,0,0,0,450,2621,1,0,0,0,452,2629,
        1,0,0,0,454,2631,1,0,0,0,456,2634,1,0,0,0,458,2637,1,0,0,0,460,2639,
        1,0,0,0,462,2641,1,0,0,0,464,2643,1,0,0,0,466,2645,1,0,0,0,468,2649,
        1,0,0,0,470,2662,1,0,0,0,472,2666,1,0,0,0,474,2669,1,0,0,0,476,2680,
        1,0,0,0,478,2682,1,0,0,0,480,2685,1,0,0,0,482,2693,1,0,0,0,484,2700,
        1,0,0,0,486,2702,1,0,0,0,488,2711,1,0,0,0,490,2718,1,0,0,0,492,2721,
        1,0,0,0,494,2726,1,0,0,0,496,2728,1,0,0,0,498,2732,1,0,0,0,500,2737,
        1,0,0,0,502,2739,1,0,0,0,504,2746,1,0,0,0,506,2748,1,0,0,0,508,2758,
        1,0,0,0,510,2764,1,0,0,0,512,2766,1,0,0,0,514,2774,1,0,0,0,516,2782,
        1,0,0,0,518,2790,1,0,0,0,520,2800,1,0,0,0,522,2805,1,0,0,0,524,2807,
        1,0,0,0,526,2817,1,0,0,0,528,2828,1,0,0,0,530,2835,1,0,0,0,532,2837,
        1,0,0,0,534,2840,1,0,0,0,536,2846,1,0,0,0,538,2850,1,0,0,0,540,2852,
        1,0,0,0,542,2857,1,0,0,0,544,2866,1,0,0,0,546,2870,1,0,0,0,548,2873,
        1,0,0,0,550,2883,1,0,0,0,552,2885,1,0,0,0,554,2889,1,0,0,0,556,2897,
        1,0,0,0,558,2908,1,0,0,0,560,2913,1,0,0,0,562,2915,1,0,0,0,564,2918,
        1,0,0,0,566,2921,1,0,0,0,568,2928,1,0,0,0,570,2930,1,0,0,0,572,2933,
        1,0,0,0,574,2936,1,0,0,0,576,2947,1,0,0,0,578,2952,1,0,0,0,580,2954,
        1,0,0,0,582,2957,1,0,0,0,584,2960,1,0,0,0,586,2967,1,0,0,0,588,2969,
        1,0,0,0,590,2972,1,0,0,0,592,2975,1,0,0,0,594,2981,1,0,0,0,596,2990,
        1,0,0,0,598,2992,1,0,0,0,600,2999,1,0,0,0,602,3005,1,0,0,0,604,3011,
        1,0,0,0,606,3018,1,0,0,0,608,3024,1,0,0,0,610,3031,1,0,0,0,612,3046,
        1,0,0,0,614,3056,1,0,0,0,616,3059,1,0,0,0,618,3074,1,0,0,0,620,3077,
        1,0,0,0,622,3087,1,0,0,0,624,3090,1,0,0,0,626,3093,1,0,0,0,628,3096,
        1,0,0,0,630,3099,1,0,0,0,632,3101,1,0,0,0,634,3109,1,0,0,0,636,3118,
        1,0,0,0,638,3127,1,0,0,0,640,3129,1,0,0,0,642,3138,1,0,0,0,644,3146,
        1,0,0,0,646,3159,1,0,0,0,648,3169,1,0,0,0,650,3171,1,0,0,0,652,3179,
        1,0,0,0,654,3188,1,0,0,0,656,3195,1,0,0,0,658,3197,1,0,0,0,660,3199,
        1,0,0,0,662,3207,1,0,0,0,664,3209,1,0,0,0,666,3213,1,0,0,0,668,3223,
        1,0,0,0,670,3225,1,0,0,0,672,3234,1,0,0,0,674,3236,1,0,0,0,676,3241,
        1,0,0,0,678,3246,1,0,0,0,680,3250,1,0,0,0,682,3255,1,0,0,0,684,3259,
        1,0,0,0,686,3263,1,0,0,0,688,3271,1,0,0,0,690,3273,1,0,0,0,692,3283,
        1,0,0,0,694,3294,1,0,0,0,696,3298,1,0,0,0,698,3309,1,0,0,0,700,3311,
        1,0,0,0,702,3314,1,0,0,0,704,3319,1,0,0,0,706,3328,1,0,0,0,708,3330,
        1,0,0,0,710,3333,1,0,0,0,712,3336,1,0,0,0,714,3339,1,0,0,0,716,3343,
        1,0,0,0,718,3347,1,0,0,0,720,3351,1,0,0,0,722,3356,1,0,0,0,724,3358,
        1,0,0,0,726,3366,1,0,0,0,728,3368,1,0,0,0,730,3371,1,0,0,0,732,3374,
        1,0,0,0,734,3382,1,0,0,0,736,3386,1,0,0,0,738,3388,1,0,0,0,740,3391,
        1,0,0,0,742,3404,1,0,0,0,744,3406,1,0,0,0,746,3408,1,0,0,0,748,3411,
        1,0,0,0,750,3478,1,0,0,0,752,3480,1,0,0,0,754,3482,1,0,0,0,756,3484,
        1,0,0,0,758,3486,1,0,0,0,760,3488,1,0,0,0,762,3505,1,0,0,0,764,3513,
        1,0,0,0,766,3520,1,0,0,0,768,3522,1,0,0,0,770,3528,1,0,0,0,772,3530,
        1,0,0,0,774,3533,1,0,0,0,776,3536,1,0,0,0,778,3538,1,0,0,0,780,3542,
        1,0,0,0,782,3544,1,0,0,0,784,3554,1,0,0,0,786,3559,1,0,0,0,788,3561,
        1,0,0,0,790,3578,1,0,0,0,792,3580,1,0,0,0,794,3587,1,0,0,0,796,3589,
        1,0,0,0,798,3591,1,0,0,0,800,3599,1,0,0,0,802,3603,1,0,0,0,804,3617,
        1,0,0,0,806,3619,1,0,0,0,808,3626,1,0,0,0,810,3628,1,0,0,0,812,3630,
        1,0,0,0,814,3635,1,0,0,0,816,3637,1,0,0,0,818,3641,1,0,0,0,820,3645,
        1,0,0,0,822,3649,1,0,0,0,824,3655,1,0,0,0,826,3662,1,0,0,0,828,3669,
        1,0,0,0,830,3677,1,0,0,0,832,3679,1,0,0,0,834,3683,1,0,0,0,836,3688,
        1,0,0,0,838,3694,1,0,0,0,840,3705,1,0,0,0,842,3716,1,0,0,0,844,3718,
        1,0,0,0,846,3720,1,0,0,0,848,3727,1,0,0,0,850,3729,1,0,0,0,852,3735,
        1,0,0,0,854,3742,1,0,0,0,856,3748,1,0,0,0,858,3750,1,0,0,0,860,3752,
        1,0,0,0,862,3754,1,0,0,0,864,3763,1,0,0,0,866,3765,1,0,0,0,868,3771,
        1,0,0,0,870,3779,1,0,0,0,872,3785,1,0,0,0,874,3788,1,0,0,0,876,3853,
        1,0,0,0,878,3878,1,0,0,0,880,3886,1,0,0,0,882,3888,1,0,0,0,884,3892,
        1,0,0,0,886,3937,1,0,0,0,888,3939,1,0,0,0,890,3941,1,0,0,0,892,3943,
        1,0,0,0,894,3947,1,0,0,0,896,3951,1,0,0,0,898,3955,1,0,0,0,900,4007,
        1,0,0,0,902,4056,1,0,0,0,904,4102,1,0,0,0,906,4104,1,0,0,0,908,4117,
        1,0,0,0,910,4119,1,0,0,0,912,4166,1,0,0,0,914,4170,1,0,0,0,916,4177,
        1,0,0,0,918,4179,1,0,0,0,920,4196,1,0,0,0,922,4211,1,0,0,0,924,4213,
        1,0,0,0,926,4228,1,0,0,0,928,4241,1,0,0,0,930,4243,1,0,0,0,932,4251,
        1,0,0,0,934,4255,1,0,0,0,936,4258,1,0,0,0,938,4265,1,0,0,0,940,4273,
        1,0,0,0,942,4279,1,0,0,0,944,4281,1,0,0,0,946,4286,1,0,0,0,948,4294,
        1,0,0,0,950,4296,1,0,0,0,952,4301,1,0,0,0,954,4308,1,0,0,0,956,4312,
        1,0,0,0,958,4314,1,0,0,0,960,4320,1,0,0,0,962,4328,1,0,0,0,964,4332,
        1,0,0,0,966,4335,1,0,0,0,968,4344,1,0,0,0,970,4350,1,0,0,0,972,4352,
        1,0,0,0,974,4359,1,0,0,0,976,4361,1,0,0,0,978,4363,1,0,0,0,980,4367,
        1,0,0,0,982,4384,1,0,0,0,984,4394,1,0,0,0,986,4397,1,0,0,0,988,4401,
        1,0,0,0,990,4405,1,0,0,0,992,4408,1,0,0,0,994,4417,1,0,0,0,996,4420,
        1,0,0,0,998,4426,1,0,0,0,1000,4429,1,0,0,0,1002,4452,1,0,0,0,1004,
        4454,1,0,0,0,1006,4456,1,0,0,0,1008,4458,1,0,0,0,1010,4461,1,0,0,
        0,1012,4463,1,0,0,0,1014,4469,1,0,0,0,1016,4478,1,0,0,0,1018,4490,
        1,0,0,0,1020,4494,1,0,0,0,1022,4506,1,0,0,0,1024,4598,1,0,0,0,1026,
        4662,1,0,0,0,1028,4695,1,0,0,0,1030,4697,1,0,0,0,1032,4709,1,0,0,
        0,1034,4732,1,0,0,0,1036,4739,1,0,0,0,1038,4741,1,0,0,0,1040,4745,
        1,0,0,0,1042,4747,1,0,0,0,1044,4811,1,0,0,0,1046,4825,1,0,0,0,1048,
        4869,1,0,0,0,1050,4871,1,0,0,0,1052,4883,1,0,0,0,1054,4888,1,0,0,
        0,1056,4897,1,0,0,0,1058,4899,1,0,0,0,1060,4906,1,0,0,0,1062,4911,
        1,0,0,0,1064,4918,1,0,0,0,1066,4927,1,0,0,0,1068,4936,1,0,0,0,1070,
        4938,1,0,0,0,1072,4953,1,0,0,0,1074,4962,1,0,0,0,1076,4976,1,0,0,
        0,1078,4980,1,0,0,0,1080,4984,1,0,0,0,1082,4988,1,0,0,0,1084,4990,
        1,0,0,0,1086,4992,1,0,0,0,1088,4994,1,0,0,0,1090,4998,1,0,0,0,1092,
        5000,1,0,0,0,1094,5002,1,0,0,0,1096,5020,1,0,0,0,1098,5022,1,0,0,
        0,1100,5024,1,0,0,0,1102,5027,1,0,0,0,1104,5064,1,0,0,0,1106,5067,
        1,0,0,0,1108,5082,1,0,0,0,1110,5086,1,0,0,0,1112,5101,1,0,0,0,1114,
        5113,1,0,0,0,1116,5119,1,0,0,0,1118,5123,1,0,0,0,1120,5127,1,0,0,
        0,1122,5131,1,0,0,0,1124,5133,1,0,0,0,1126,5137,1,0,0,0,1128,5143,
        1,0,0,0,1130,5146,1,0,0,0,1132,5161,1,0,0,0,1134,5173,1,0,0,0,1136,
        5178,1,0,0,0,1138,5193,1,0,0,0,1140,1142,3,2,1,0,1141,1143,5,23,
        0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,
        5,0,0,1,1145,1,1,0,0,0,1146,1148,3,4,2,0,1147,1149,3,38,19,0,1148,
        1147,1,0,0,0,1148,1149,1,0,0,0,1149,1152,1,0,0,0,1150,1152,3,38,
        19,0,1151,1146,1,0,0,0,1151,1150,1,0,0,0,1152,3,1,0,0,0,1153,1156,
        3,6,3,0,1154,1156,3,10,5,0,1155,1153,1,0,0,0,1155,1154,1,0,0,0,1156,
        5,1,0,0,0,1157,1159,3,8,4,0,1158,1157,1,0,0,0,1159,1160,1,0,0,0,
        1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,7,1,0,0,0,1162,1165,3,14,
        7,0,1163,1165,3,34,17,0,1164,1162,1,0,0,0,1164,1163,1,0,0,0,1165,
        9,1,0,0,0,1166,1171,3,40,20,0,1167,1169,3,56,28,0,1168,1170,3,12,
        6,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,1171,1167,
        1,0,0,0,1171,1172,1,0,0,0,1172,1179,1,0,0,0,1173,1175,3,56,28,0,
        1174,1176,3,12,6,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1179,
        1,0,0,0,1177,1179,3,12,6,0,1178,1166,1,0,0,0,1178,1173,1,0,0,0,1178,
        1177,1,0,0,0,1179,11,1,0,0,0,1180,1183,3,50,25,0,1181,1183,3,52,
        26,0,1182,1180,1,0,0,0,1182,1181,1,0,0,0,1183,13,1,0,0,0,1184,1185,
        5,236,0,0,1185,1190,5,237,0,0,1186,1191,3,16,8,0,1187,1191,3,18,
        9,0,1188,1191,3,20,10,0,1189,1191,3,24,12,0,1190,1186,1,0,0,0,1190,
        1187,1,0,0,0,1190,1188,1,0,0,0,1190,1189,1,0,0,0,1191,15,1,0,0,0,
        1192,1193,5,234,0,0,1193,1194,3,968,484,0,1194,17,1,0,0,0,1195,1197,
        5,218,0,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1198,1,0,0,0,
        1198,1199,5,122,0,0,1199,1200,3,198,99,0,1200,19,1,0,0,0,1201,1202,
        5,260,0,0,1202,1203,5,298,0,0,1203,1204,3,22,11,0,1204,21,1,0,0,
        0,1205,1206,3,1026,513,0,1206,23,1,0,0,0,1207,1211,3,26,13,0,1208,
        1211,3,28,14,0,1209,1211,3,30,15,0,1210,1207,1,0,0,0,1210,1208,1,
        0,0,0,1210,1209,1,0,0,0,1211,25,1,0,0,0,1212,1214,5,218,0,0,1213,
        1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1216,5,122,
        0,0,1216,1217,3,32,16,0,1217,1218,3,184,92,0,1218,27,1,0,0,0,1219,
        1221,5,48,0,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,
        0,0,1222,1223,5,255,0,0,1223,1224,3,32,16,0,1224,1225,3,190,95,0,
        1225,29,1,0,0,0,1226,1227,5,286,0,0,1227,1228,3,32,16,0,1228,1229,
        3,196,98,0,1229,31,1,0,0,0,1230,1231,5,136,0,0,1231,1232,5,192,0,
        0,1232,1234,5,107,0,0,1233,1230,1,0,0,0,1233,1234,1,0,0,0,1234,1235,
        1,0,0,0,1235,1236,3,140,70,0,1236,33,1,0,0,0,1237,1238,5,236,0,0,
        1238,1240,5,228,0,0,1239,1241,3,36,18,0,1240,1239,1,0,0,0,1240,1241,
        1,0,0,0,1241,35,1,0,0,0,1242,1244,5,31,0,0,1243,1242,1,0,0,0,1243,
        1244,1,0,0,0,1244,1245,1,0,0,0,1245,1258,7,0,0,0,1246,1258,5,234,
        0,0,1247,1249,5,218,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,
        1250,1,0,0,0,1250,1258,5,122,0,0,1251,1252,5,260,0,0,1252,1258,5,
        298,0,0,1253,1255,5,206,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,
        1255,1256,1,0,0,0,1256,1258,3,140,70,0,1257,1243,1,0,0,0,1257,1246,
        1,0,0,0,1257,1248,1,0,0,0,1257,1251,1,0,0,0,1257,1254,1,0,0,0,1258,
        37,1,0,0,0,1259,1260,5,236,0,0,1260,1261,5,65,0,0,1261,39,1,0,0,
        0,1262,1263,5,249,0,0,1263,1265,5,266,0,0,1264,1266,3,42,21,0,1265,
        1264,1,0,0,0,1265,1266,1,0,0,0,1266,41,1,0,0,0,1267,1272,3,44,22,
        0,1268,1269,5,5,0,0,1269,1271,3,44,22,0,1270,1268,1,0,0,0,1271,1274,
        1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,43,1,0,0,0,1274,
        1272,1,0,0,0,1275,1278,3,46,23,0,1276,1278,3,48,24,0,1277,1275,1,
        0,0,0,1277,1276,1,0,0,0,1278,45,1,0,0,0,1279,1280,5,221,0,0,1280,
        1284,5,199,0,0,1281,1282,5,221,0,0,1282,1284,5,295,0,0,1283,1279,
        1,0,0,0,1283,1281,1,0,0,0,1284,47,1,0,0,0,1285,1286,5,131,0,0,1286,
        49,1,0,0,0,1287,1288,5,230,0,0,1288,51,1,0,0,0,1289,1290,5,68,0,
        0,1290,53,1,0,0,0,1291,1292,5,10,0,0,1292,1293,3,56,28,0,1293,1294,
        5,20,0,0,1294,55,1,0,0,0,1295,1296,3,170,85,0,1296,57,1,0,0,0,1297,
        1298,3,170,85,0,1298,59,1,0,0,0,1299,1300,5,10,0,0,1300,1301,3,62,
        31,0,1301,1302,5,20,0,0,1302,61,1,0,0,0,1303,1304,3,170,85,0,1304,
        63,1,0,0,0,1305,1306,5,10,0,0,1306,1307,3,56,28,0,1307,1308,5,20,
        0,0,1308,65,1,0,0,0,1309,1310,3,170,85,0,1310,67,1,0,0,0,1311,1314,
        3,70,35,0,1312,1314,3,72,36,0,1313,1311,1,0,0,0,1313,1312,1,0,0,
        0,1314,69,1,0,0,0,1315,1316,7,1,0,0,1316,71,1,0,0,0,1317,1318,7,
        2,0,0,1318,73,1,0,0,0,1319,1320,5,400,0,0,1320,75,1,0,0,0,1321,1322,
        5,401,0,0,1322,77,1,0,0,0,1323,1324,5,402,0,0,1324,79,1,0,0,0,1325,
        1326,5,193,0,0,1326,81,1,0,0,0,1327,1332,3,86,43,0,1328,1332,3,88,
        44,0,1329,1332,3,90,45,0,1330,1332,3,84,42,0,1331,1327,1,0,0,0,1331,
        1328,1,0,0,0,1331,1329,1,0,0,0,1331,1330,1,0,0,0,1332,83,1,0,0,0,
        1333,1334,5,84,0,0,1334,1335,5,404,0,0,1335,1336,5,398,0,0,1336,
        1337,5,14,0,0,1337,1338,5,399,0,0,1338,1339,5,14,0,0,1339,1340,5,
        399,0,0,1340,1376,5,404,0,0,1341,1342,5,260,0,0,1342,1343,5,404,
        0,0,1343,1344,5,399,0,0,1344,1345,5,4,0,0,1345,1346,5,399,0,0,1346,
        1347,5,4,0,0,1347,1348,5,399,0,0,1348,1376,5,404,0,0,1349,1350,5,
        261,0,0,1350,1351,5,404,0,0,1351,1352,5,398,0,0,1352,1353,5,14,0,
        0,1353,1354,5,399,0,0,1354,1355,5,14,0,0,1355,1356,5,399,0,0,1356,
        1357,5,399,0,0,1357,1358,5,4,0,0,1358,1359,5,399,0,0,1359,1360,5,
        4,0,0,1360,1361,5,399,0,0,1361,1376,5,404,0,0,1362,1363,5,85,0,0,
        1363,1364,5,404,0,0,1364,1365,5,398,0,0,1365,1366,5,14,0,0,1366,
        1367,5,399,0,0,1367,1368,5,14,0,0,1368,1369,5,399,0,0,1369,1370,
        5,399,0,0,1370,1371,5,4,0,0,1371,1372,5,399,0,0,1372,1373,5,4,0,
        0,1373,1374,5,399,0,0,1374,1376,5,404,0,0,1375,1333,1,0,0,0,1375,
        1341,1,0,0,0,1375,1349,1,0,0,0,1375,1362,1,0,0,0,1376,85,1,0,0,0,
        1377,1378,5,84,0,0,1378,1379,3,166,83,0,1379,87,1,0,0,0,1380,1381,
        5,260,0,0,1381,1382,3,166,83,0,1382,89,1,0,0,0,1383,1384,7,3,0,0,
        1384,1385,3,166,83,0,1385,91,1,0,0,0,1386,1387,5,99,0,0,1387,1390,
        3,166,83,0,1388,1390,3,94,47,0,1389,1386,1,0,0,0,1389,1388,1,0,0,
        0,1390,93,1,0,0,0,1391,1392,5,392,0,0,1392,1393,3,96,48,0,1393,95,
        1,0,0,0,1394,1395,7,4,0,0,1395,97,1,0,0,0,1396,1400,3,100,50,0,1397,
        1400,5,407,0,0,1398,1400,3,108,54,0,1399,1396,1,0,0,0,1399,1397,
        1,0,0,0,1399,1398,1,0,0,0,1400,99,1,0,0,0,1401,1404,3,102,51,0,1402,
        1404,3,106,53,0,1403,1401,1,0,0,0,1403,1402,1,0,0,0,1404,101,1,0,
        0,0,1405,1619,3,104,52,0,1406,1619,5,28,0,0,1407,1619,5,29,0,0,1408,
        1619,5,31,0,0,1409,1619,5,32,0,0,1410,1619,5,34,0,0,1411,1619,5,
        35,0,0,1412,1619,5,36,0,0,1413,1619,5,37,0,0,1414,1619,5,38,0,0,
        1415,1619,5,39,0,0,1416,1619,5,40,0,0,1417,1619,5,41,0,0,1418,1619,
        5,42,0,0,1419,1619,5,43,0,0,1420,1619,5,45,0,0,1421,1619,5,46,0,
        0,1422,1619,5,47,0,0,1423,1619,5,50,0,0,1424,1619,5,51,0,0,1425,
        1619,5,52,0,0,1426,1619,5,53,0,0,1427,1619,5,54,0,0,1428,1619,5,
        55,0,0,1429,1619,5,56,0,0,1430,1619,5,57,0,0,1431,1619,5,58,0,0,
        1432,1619,5,59,0,0,1433,1619,5,60,0,0,1434,1619,5,61,0,0,1435,1619,
        5,62,0,0,1436,1619,5,63,0,0,1437,1619,5,64,0,0,1438,1619,5,65,0,
        0,1439,1619,5,66,0,0,1440,1619,5,67,0,0,1441,1619,5,68,0,0,1442,
        1619,5,71,0,0,1443,1619,5,72,0,0,1444,1619,5,73,0,0,1445,1619,5,
        74,0,0,1446,1619,5,75,0,0,1447,1619,5,76,0,0,1448,1619,5,77,0,0,
        1449,1619,5,78,0,0,1450,1619,5,79,0,0,1451,1619,5,80,0,0,1452,1619,
        5,81,0,0,1453,1619,5,82,0,0,1454,1619,5,83,0,0,1455,1619,5,84,0,
        0,1456,1619,5,85,0,0,1457,1619,5,86,0,0,1458,1619,5,87,0,0,1459,
        1619,5,88,0,0,1460,1619,5,89,0,0,1461,1619,5,90,0,0,1462,1619,5,
        91,0,0,1463,1619,5,93,0,0,1464,1619,5,96,0,0,1465,1619,5,97,0,0,
        1466,1619,5,98,0,0,1467,1619,5,99,0,0,1468,1619,5,100,0,0,1469,1619,
        5,102,0,0,1470,1619,5,104,0,0,1471,1619,5,105,0,0,1472,1619,5,106,
        0,0,1473,1619,5,107,0,0,1474,1619,5,108,0,0,1475,1619,5,109,0,0,
        1476,1619,5,110,0,0,1477,1619,5,111,0,0,1478,1619,5,113,0,0,1479,
        1619,5,115,0,0,1480,1619,5,117,0,0,1481,1619,5,118,0,0,1482,1619,
        5,114,0,0,1483,1619,5,116,0,0,1484,1619,5,119,0,0,1485,1619,5,120,
        0,0,1486,1619,5,121,0,0,1487,1619,5,123,0,0,1488,1619,5,126,0,0,
        1489,1619,5,127,0,0,1490,1619,5,128,0,0,1491,1619,5,129,0,0,1492,
        1619,5,136,0,0,1493,1619,5,137,0,0,1494,1619,5,138,0,0,1495,1619,
        5,139,0,0,1496,1619,5,146,0,0,1497,1619,5,140,0,0,1498,1619,5,147,
        0,0,1499,1619,5,141,0,0,1500,1619,5,148,0,0,1501,1619,5,142,0,0,
        1502,1619,5,149,0,0,1503,1619,5,143,0,0,1504,1619,5,150,0,0,1505,
        1619,5,144,0,0,1506,1619,5,151,0,0,1507,1619,5,145,0,0,1508,1619,
        5,152,0,0,1509,1619,5,153,0,0,1510,1619,5,302,0,0,1511,1619,5,303,
        0,0,1512,1619,5,304,0,0,1513,1619,5,305,0,0,1514,1619,5,154,0,0,
        1515,1619,5,161,0,0,1516,1619,5,164,0,0,1517,1619,5,165,0,0,1518,
        1619,5,166,0,0,1519,1619,5,167,0,0,1520,1619,5,168,0,0,1521,1619,
        5,169,0,0,1522,1619,5,170,0,0,1523,1619,5,171,0,0,1524,1619,5,172,
        0,0,1525,1619,5,173,0,0,1526,1619,5,174,0,0,1527,1619,5,176,0,0,
        1528,1619,5,177,0,0,1529,1619,5,179,0,0,1530,1619,5,180,0,0,1531,
        1619,5,181,0,0,1532,1619,5,182,0,0,1533,1619,5,183,0,0,1534,1619,
        5,189,0,0,1535,1619,5,190,0,0,1536,1619,5,192,0,0,1537,1619,5,193,
        0,0,1538,1619,5,194,0,0,1539,1619,5,195,0,0,1540,1619,5,196,0,0,
        1541,1619,5,197,0,0,1542,1619,5,198,0,0,1543,1619,5,200,0,0,1544,
        1619,5,201,0,0,1545,1619,5,202,0,0,1546,1619,5,203,0,0,1547,1619,
        5,205,0,0,1548,1619,5,206,0,0,1549,1619,5,207,0,0,1550,1619,5,208,
        0,0,1551,1619,5,209,0,0,1552,1619,5,210,0,0,1553,1619,5,211,0,0,
        1554,1619,5,212,0,0,1555,1619,5,215,0,0,1556,1619,5,216,0,0,1557,
        1619,5,219,0,0,1558,1619,5,220,0,0,1559,1619,5,223,0,0,1560,1619,
        5,224,0,0,1561,1619,5,225,0,0,1562,1619,5,227,0,0,1563,1619,5,228,
        0,0,1564,1619,5,229,0,0,1565,1619,5,230,0,0,1566,1619,5,231,0,0,
        1567,1619,5,233,0,0,1568,1619,5,234,0,0,1569,1619,5,235,0,0,1570,
        1619,5,236,0,0,1571,1619,5,237,0,0,1572,1619,5,240,0,0,1573,1619,
        5,242,0,0,1574,1619,5,243,0,0,1575,1619,5,244,0,0,1576,1619,5,245,
        0,0,1577,1619,5,246,0,0,1578,1619,5,248,0,0,1579,1619,5,249,0,0,
        1580,1619,5,250,0,0,1581,1619,5,251,0,0,1582,1619,5,252,0,0,1583,
        1619,5,254,0,0,1584,1619,5,256,0,0,1585,1619,5,257,0,0,1586,1619,
        5,259,0,0,1587,1619,5,260,0,0,1588,1619,5,261,0,0,1589,1619,5,265,
        0,0,1590,1619,5,267,0,0,1591,1619,5,268,0,0,1592,1619,5,270,0,0,
        1593,1619,5,271,0,0,1594,1619,5,272,0,0,1595,1619,5,278,0,0,1596,
        1619,5,274,0,0,1597,1619,5,276,0,0,1598,1619,5,277,0,0,1599,1619,
        5,273,0,0,1600,1619,5,275,0,0,1601,1619,5,280,0,0,1602,1619,5,281,
        0,0,1603,1619,5,282,0,0,1604,1619,5,283,0,0,1605,1619,5,284,0,0,
        1606,1619,5,285,0,0,1607,1619,5,286,0,0,1608,1619,5,287,0,0,1609,
        1619,5,288,0,0,1610,1619,5,291,0,0,1611,1619,5,292,0,0,1612,1619,
        5,293,0,0,1613,1619,5,296,0,0,1614,1619,5,297,0,0,1615,1619,5,299,
        0,0,1616,1619,5,300,0,0,1617,1619,5,301,0,0,1618,1405,1,0,0,0,1618,
        1406,1,0,0,0,1618,1407,1,0,0,0,1618,1408,1,0,0,0,1618,1409,1,0,0,
        0,1618,1410,1,0,0,0,1618,1411,1,0,0,0,1618,1412,1,0,0,0,1618,1413,
        1,0,0,0,1618,1414,1,0,0,0,1618,1415,1,0,0,0,1618,1416,1,0,0,0,1618,
        1417,1,0,0,0,1618,1418,1,0,0,0,1618,1419,1,0,0,0,1618,1420,1,0,0,
        0,1618,1421,1,0,0,0,1618,1422,1,0,0,0,1618,1423,1,0,0,0,1618,1424,
        1,0,0,0,1618,1425,1,0,0,0,1618,1426,1,0,0,0,1618,1427,1,0,0,0,1618,
        1428,1,0,0,0,1618,1429,1,0,0,0,1618,1430,1,0,0,0,1618,1431,1,0,0,
        0,1618,1432,1,0,0,0,1618,1433,1,0,0,0,1618,1434,1,0,0,0,1618,1435,
        1,0,0,0,1618,1436,1,0,0,0,1618,1437,1,0,0,0,1618,1438,1,0,0,0,1618,
        1439,1,0,0,0,1618,1440,1,0,0,0,1618,1441,1,0,0,0,1618,1442,1,0,0,
        0,1618,1443,1,0,0,0,1618,1444,1,0,0,0,1618,1445,1,0,0,0,1618,1446,
        1,0,0,0,1618,1447,1,0,0,0,1618,1448,1,0,0,0,1618,1449,1,0,0,0,1618,
        1450,1,0,0,0,1618,1451,1,0,0,0,1618,1452,1,0,0,0,1618,1453,1,0,0,
        0,1618,1454,1,0,0,0,1618,1455,1,0,0,0,1618,1456,1,0,0,0,1618,1457,
        1,0,0,0,1618,1458,1,0,0,0,1618,1459,1,0,0,0,1618,1460,1,0,0,0,1618,
        1461,1,0,0,0,1618,1462,1,0,0,0,1618,1463,1,0,0,0,1618,1464,1,0,0,
        0,1618,1465,1,0,0,0,1618,1466,1,0,0,0,1618,1467,1,0,0,0,1618,1468,
        1,0,0,0,1618,1469,1,0,0,0,1618,1470,1,0,0,0,1618,1471,1,0,0,0,1618,
        1472,1,0,0,0,1618,1473,1,0,0,0,1618,1474,1,0,0,0,1618,1475,1,0,0,
        0,1618,1476,1,0,0,0,1618,1477,1,0,0,0,1618,1478,1,0,0,0,1618,1479,
        1,0,0,0,1618,1480,1,0,0,0,1618,1481,1,0,0,0,1618,1482,1,0,0,0,1618,
        1483,1,0,0,0,1618,1484,1,0,0,0,1618,1485,1,0,0,0,1618,1486,1,0,0,
        0,1618,1487,1,0,0,0,1618,1488,1,0,0,0,1618,1489,1,0,0,0,1618,1490,
        1,0,0,0,1618,1491,1,0,0,0,1618,1492,1,0,0,0,1618,1493,1,0,0,0,1618,
        1494,1,0,0,0,1618,1495,1,0,0,0,1618,1496,1,0,0,0,1618,1497,1,0,0,
        0,1618,1498,1,0,0,0,1618,1499,1,0,0,0,1618,1500,1,0,0,0,1618,1501,
        1,0,0,0,1618,1502,1,0,0,0,1618,1503,1,0,0,0,1618,1504,1,0,0,0,1618,
        1505,1,0,0,0,1618,1506,1,0,0,0,1618,1507,1,0,0,0,1618,1508,1,0,0,
        0,1618,1509,1,0,0,0,1618,1510,1,0,0,0,1618,1511,1,0,0,0,1618,1512,
        1,0,0,0,1618,1513,1,0,0,0,1618,1514,1,0,0,0,1618,1515,1,0,0,0,1618,
        1516,1,0,0,0,1618,1517,1,0,0,0,1618,1518,1,0,0,0,1618,1519,1,0,0,
        0,1618,1520,1,0,0,0,1618,1521,1,0,0,0,1618,1522,1,0,0,0,1618,1523,
        1,0,0,0,1618,1524,1,0,0,0,1618,1525,1,0,0,0,1618,1526,1,0,0,0,1618,
        1527,1,0,0,0,1618,1528,1,0,0,0,1618,1529,1,0,0,0,1618,1530,1,0,0,
        0,1618,1531,1,0,0,0,1618,1532,1,0,0,0,1618,1533,1,0,0,0,1618,1534,
        1,0,0,0,1618,1535,1,0,0,0,1618,1536,1,0,0,0,1618,1537,1,0,0,0,1618,
        1538,1,0,0,0,1618,1539,1,0,0,0,1618,1540,1,0,0,0,1618,1541,1,0,0,
        0,1618,1542,1,0,0,0,1618,1543,1,0,0,0,1618,1544,1,0,0,0,1618,1545,
        1,0,0,0,1618,1546,1,0,0,0,1618,1547,1,0,0,0,1618,1548,1,0,0,0,1618,
        1549,1,0,0,0,1618,1550,1,0,0,0,1618,1551,1,0,0,0,1618,1552,1,0,0,
        0,1618,1553,1,0,0,0,1618,1554,1,0,0,0,1618,1555,1,0,0,0,1618,1556,
        1,0,0,0,1618,1557,1,0,0,0,1618,1558,1,0,0,0,1618,1559,1,0,0,0,1618,
        1560,1,0,0,0,1618,1561,1,0,0,0,1618,1562,1,0,0,0,1618,1563,1,0,0,
        0,1618,1564,1,0,0,0,1618,1565,1,0,0,0,1618,1566,1,0,0,0,1618,1567,
        1,0,0,0,1618,1568,1,0,0,0,1618,1569,1,0,0,0,1618,1570,1,0,0,0,1618,
        1571,1,0,0,0,1618,1572,1,0,0,0,1618,1573,1,0,0,0,1618,1574,1,0,0,
        0,1618,1575,1,0,0,0,1618,1576,1,0,0,0,1618,1577,1,0,0,0,1618,1578,
        1,0,0,0,1618,1579,1,0,0,0,1618,1580,1,0,0,0,1618,1581,1,0,0,0,1618,
        1582,1,0,0,0,1618,1583,1,0,0,0,1618,1584,1,0,0,0,1618,1585,1,0,0,
        0,1618,1586,1,0,0,0,1618,1587,1,0,0,0,1618,1588,1,0,0,0,1618,1589,
        1,0,0,0,1618,1590,1,0,0,0,1618,1591,1,0,0,0,1618,1592,1,0,0,0,1618,
        1593,1,0,0,0,1618,1594,1,0,0,0,1618,1595,1,0,0,0,1618,1596,1,0,0,
        0,1618,1597,1,0,0,0,1618,1598,1,0,0,0,1618,1599,1,0,0,0,1618,1600,
        1,0,0,0,1618,1601,1,0,0,0,1618,1602,1,0,0,0,1618,1603,1,0,0,0,1618,
        1604,1,0,0,0,1618,1605,1,0,0,0,1618,1606,1,0,0,0,1618,1607,1,0,0,
        0,1618,1608,1,0,0,0,1618,1609,1,0,0,0,1618,1610,1,0,0,0,1618,1611,
        1,0,0,0,1618,1612,1,0,0,0,1618,1613,1,0,0,0,1618,1614,1,0,0,0,1618,
        1615,1,0,0,0,1618,1616,1,0,0,0,1618,1617,1,0,0,0,1619,103,1,0,0,
        0,1620,1621,7,5,0,0,1621,105,1,0,0,0,1622,1623,7,6,0,0,1623,107,
        1,0,0,0,1624,1625,3,78,39,0,1625,109,1,0,0,0,1626,1627,3,98,49,0,
        1627,111,1,0,0,0,1628,1629,5,407,0,0,1629,113,1,0,0,0,1630,1631,
        3,98,49,0,1631,115,1,0,0,0,1632,1633,3,98,49,0,1633,117,1,0,0,0,
        1634,1637,5,407,0,0,1635,1637,3,120,60,0,1636,1634,1,0,0,0,1636,
        1635,1,0,0,0,1637,119,1,0,0,0,1638,1639,3,108,54,0,1639,121,1,0,
        0,0,1640,1641,3,98,49,0,1641,123,1,0,0,0,1642,1643,3,98,49,0,1643,
        125,1,0,0,0,1644,1647,5,407,0,0,1645,1647,3,128,64,0,1646,1644,1,
        0,0,0,1646,1645,1,0,0,0,1647,127,1,0,0,0,1648,1649,3,108,54,0,1649,
        129,1,0,0,0,1650,1651,3,98,49,0,1651,131,1,0,0,0,1652,1653,3,98,
        49,0,1653,133,1,0,0,0,1654,1655,3,98,49,0,1655,135,1,0,0,0,1656,
        1657,3,98,49,0,1657,137,1,0,0,0,1658,1659,3,98,49,0,1659,139,1,0,
        0,0,1660,1663,5,6,0,0,1661,1664,3,68,34,0,1662,1664,3,98,49,0,1663,
        1661,1,0,0,0,1663,1662,1,0,0,0,1664,1673,1,0,0,0,1665,1668,5,15,
        0,0,1666,1669,3,68,34,0,1667,1669,3,98,49,0,1668,1666,1,0,0,0,1668,
        1667,1,0,0,0,1669,1670,1,0,0,0,1670,1671,5,15,0,0,1671,1673,1,0,
        0,0,1672,1660,1,0,0,0,1672,1665,1,0,0,0,1673,141,1,0,0,0,1674,1675,
        3,160,80,0,1675,143,1,0,0,0,1676,1677,3,160,80,0,1677,145,1,0,0,
        0,1678,1681,3,150,75,0,1679,1681,3,148,74,0,1680,1678,1,0,0,0,1680,
        1679,1,0,0,0,1681,147,1,0,0,0,1682,1685,3,152,76,0,1683,1685,3,154,
        77,0,1684,1682,1,0,0,0,1684,1683,1,0,0,0,1685,149,1,0,0,0,1686,1687,
        3,160,80,0,1687,151,1,0,0,0,1688,1689,3,160,80,0,1689,153,1,0,0,
        0,1690,1691,3,98,49,0,1691,155,1,0,0,0,1692,1693,3,160,80,0,1693,
        157,1,0,0,0,1694,1695,3,160,80,0,1695,159,1,0,0,0,1696,1697,3,98,
        49,0,1697,161,1,0,0,0,1698,1705,3,164,82,0,1699,1705,3,166,83,0,
        1700,1705,3,168,84,0,1701,1705,3,82,41,0,1702,1705,3,92,46,0,1703,
        1705,3,80,40,0,1704,1698,1,0,0,0,1704,1699,1,0,0,0,1704,1700,1,0,
        0,0,1704,1701,1,0,0,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1705,163,
        1,0,0,0,1706,1707,7,7,0,0,1707,165,1,0,0,0,1708,1711,3,74,37,0,1709,
        1711,3,76,38,0,1710,1708,1,0,0,0,1710,1709,1,0,0,0,1711,167,1,0,
        0,0,1712,1713,5,403,0,0,1713,169,1,0,0,0,1714,1716,3,456,228,0,1715,
        1714,1,0,0,0,1715,1716,1,0,0,0,1716,1718,1,0,0,0,1717,1719,3,172,
        86,0,1718,1717,1,0,0,0,1718,1719,1,0,0,0,1719,1720,1,0,0,0,1720,
        1721,3,176,88,0,1721,171,1,0,0,0,1722,1724,3,174,87,0,1723,1722,
        1,0,0,0,1724,1725,1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,0,1726,
        173,1,0,0,0,1727,1731,3,182,91,0,1728,1731,3,188,94,0,1729,1731,
        3,194,97,0,1730,1727,1,0,0,0,1730,1728,1,0,0,0,1730,1729,1,0,0,0,
        1731,175,1,0,0,0,1732,1736,3,178,89,0,1733,1735,3,180,90,0,1734,
        1733,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,0,0,0,1736,1737,1,0,0,
        0,1737,177,1,0,0,0,1738,1736,1,0,0,0,1739,1744,3,210,105,0,1740,
        1744,3,242,121,0,1741,1744,3,300,150,0,1742,1744,3,308,154,0,1743,
        1739,1,0,0,0,1743,1740,1,0,0,0,1743,1741,1,0,0,0,1743,1742,1,0,0,
        0,1744,179,1,0,0,0,1745,1747,7,8,0,0,1746,1748,3,730,365,0,1747,
        1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,0,0,1749,1750,3,178,
        89,0,1750,181,1,0,0,0,1751,1753,5,218,0,0,1752,1751,1,0,0,0,1752,
        1753,1,0,0,0,1753,1754,1,0,0,0,1754,1755,5,122,0,0,1755,1756,3,144,
        72,0,1756,1757,3,184,92,0,1757,183,1,0,0,0,1758,1760,3,878,439,0,
        1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1763,
        3,934,467,0,1762,1759,1,0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,
        0,1764,1765,3,186,93,0,1765,185,1,0,0,0,1766,1767,5,7,0,0,1767,1768,
        3,198,99,0,1768,187,1,0,0,0,1769,1771,5,48,0,0,1770,1769,1,0,0,0,
        1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,1773,5,255,0,0,1773,1774,
        3,156,78,0,1774,1775,3,190,95,0,1775,189,1,0,0,0,1776,1778,3,878,
        439,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,
        1781,3,940,470,0,1780,1777,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,
        0,0,0,1782,1783,3,192,96,0,1783,191,1,0,0,0,1784,1785,5,7,0,0,1785,
        1786,3,204,102,0,1786,193,1,0,0,0,1787,1788,5,286,0,0,1788,1789,
        3,158,79,0,1789,1790,3,196,98,0,1790,195,1,0,0,0,1791,1793,3,878,
        439,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,
        1796,3,876,438,0,1795,1792,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,
        0,0,0,1797,1798,5,7,0,0,1798,1799,3,1022,511,0,1799,197,1,0,0,0,
        1800,1806,3,202,101,0,1801,1806,3,208,104,0,1802,1806,3,984,492,
        0,1803,1806,3,112,56,0,1804,1806,3,200,100,0,1805,1800,1,0,0,0,1805,
        1801,1,0,0,0,1805,1802,1,0,0,0,1805,1803,1,0,0,0,1805,1804,1,0,0,
        0,1806,199,1,0,0,0,1807,1808,7,9,0,0,1808,201,1,0,0,0,1809,1810,
        3,64,32,0,1810,203,1,0,0,0,1811,1816,3,206,103,0,1812,1816,3,208,
        104,0,1813,1816,3,994,497,0,1814,1816,3,112,56,0,1815,1811,1,0,0,
        0,1815,1812,1,0,0,0,1815,1813,1,0,0,0,1815,1814,1,0,0,0,1816,205,
        1,0,0,0,1817,1818,3,64,32,0,1818,207,1,0,0,0,1819,1820,5,289,0,0,
        1820,1827,3,1026,513,0,1821,1822,5,12,0,0,1822,1823,3,1022,511,0,
        1823,1824,5,22,0,0,1824,1827,1,0,0,0,1825,1827,3,1026,513,0,1826,
        1819,1,0,0,0,1826,1821,1,0,0,0,1826,1825,1,0,0,0,1827,209,1,0,0,
        0,1828,1830,3,212,106,0,1829,1828,1,0,0,0,1830,1831,1,0,0,0,1831,
        1829,1,0,0,0,1831,1832,1,0,0,0,1832,211,1,0,0,0,1833,1836,3,214,
        107,0,1834,1836,3,240,120,0,1835,1833,1,0,0,0,1835,1834,1,0,0,0,
        1836,213,1,0,0,0,1837,1844,3,216,108,0,1838,1844,3,220,110,0,1839,
        1844,3,232,116,0,1840,1844,3,218,109,0,1841,1844,3,230,115,0,1842,
        1844,3,238,119,0,1843,1837,1,0,0,0,1843,1838,1,0,0,0,1843,1839,1,
        0,0,0,1843,1840,1,0,0,0,1843,1841,1,0,0,0,1843,1842,1,0,0,0,1844,
        215,1,0,0,0,1845,1846,5,76,0,0,1846,1850,5,234,0,0,1847,1848,5,136,
        0,0,1848,1849,5,192,0,0,1849,1851,5,107,0,0,1850,1847,1,0,0,0,1850,
        1851,1,0,0,0,1851,1852,1,0,0,0,1852,1853,3,972,486,0,1853,217,1,
        0,0,0,1854,1855,5,98,0,0,1855,1858,5,234,0,0,1856,1857,5,136,0,0,
        1857,1859,5,107,0,0,1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,1860,
        1,0,0,0,1860,1861,3,972,486,0,1861,219,1,0,0,0,1862,1878,5,76,0,
        0,1863,1865,5,218,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,
        1,0,0,0,1866,1870,5,122,0,0,1867,1868,5,136,0,0,1868,1869,5,192,
        0,0,1869,1871,5,107,0,0,1870,1867,1,0,0,0,1870,1871,1,0,0,0,1871,
        1879,1,0,0,0,1872,1873,5,202,0,0,1873,1875,5,227,0,0,1874,1876,5,
        218,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,0,1877,
        1879,5,122,0,0,1878,1864,1,0,0,0,1878,1872,1,0,0,0,1879,1880,1,0,
        0,0,1880,1883,3,986,493,0,1881,1884,3,222,111,0,1882,1884,3,224,
        112,0,1883,1881,1,0,0,0,1883,1882,1,0,0,0,1884,1886,1,0,0,0,1885,
        1887,3,228,114,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,221,1,
        0,0,0,1888,1890,3,878,439,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,
        1890,1891,1,0,0,0,1891,1896,5,35,0,0,1892,1894,5,218,0,0,1893,1892,
        1,0,0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1897,5,122,0,0,
        1896,1893,1,0,0,0,1896,1897,1,0,0,0,1897,223,1,0,0,0,1898,1914,3,
        226,113,0,1899,1901,3,878,439,0,1900,1899,1,0,0,0,1900,1901,1,0,
        0,0,1901,1902,1,0,0,0,1902,1914,3,990,495,0,1903,1905,3,878,439,
        0,1904,1903,1,0,0,0,1904,1905,1,0,0,0,1905,1910,1,0,0,0,1906,1908,
        5,218,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,0,
        1909,1911,5,122,0,0,1910,1907,1,0,0,0,1910,1911,1,0,0,0,1911,1912,
        1,0,0,0,1912,1914,3,778,389,0,1913,1898,1,0,0,0,1913,1900,1,0,0,
        0,1913,1904,1,0,0,0,1914,225,1,0,0,0,1915,1916,5,165,0,0,1916,1917,
        3,198,99,0,1917,227,1,0,0,0,1918,1919,5,37,0,0,1919,1920,5,71,0,
        0,1920,1921,5,197,0,0,1921,1922,3,198,99,0,1922,229,1,0,0,0,1923,
        1925,5,98,0,0,1924,1926,5,218,0,0,1925,1924,1,0,0,0,1925,1926,1,
        0,0,0,1926,1927,1,0,0,0,1927,1930,5,122,0,0,1928,1929,5,136,0,0,
        1929,1931,5,107,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,1932,
        1,0,0,0,1932,1933,3,986,493,0,1933,231,1,0,0,0,1934,1952,5,76,0,
        0,1935,1937,5,218,0,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,
        1,0,0,0,1938,1939,5,122,0,0,1939,1943,5,269,0,0,1940,1941,5,136,
        0,0,1941,1942,5,192,0,0,1942,1944,5,107,0,0,1943,1940,1,0,0,0,1943,
        1944,1,0,0,0,1944,1953,1,0,0,0,1945,1946,5,202,0,0,1946,1948,5,227,
        0,0,1947,1949,5,218,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,
        1950,1,0,0,0,1950,1951,5,122,0,0,1951,1953,5,269,0,0,1952,1936,1,
        0,0,0,1952,1945,1,0,0,0,1953,1954,1,0,0,0,1954,1955,3,992,496,0,
        1955,1956,3,234,117,0,1956,233,1,0,0,0,1957,1959,5,37,0,0,1958,1957,
        1,0,0,0,1958,1959,1,0,0,0,1959,1960,1,0,0,0,1960,1967,3,236,118,
        0,1961,1967,3,226,113,0,1962,1964,5,37,0,0,1963,1962,1,0,0,0,1963,
        1964,1,0,0,0,1964,1965,1,0,0,0,1965,1967,3,778,389,0,1966,1958,1,
        0,0,0,1966,1961,1,0,0,0,1966,1963,1,0,0,0,1967,235,1,0,0,0,1968,
        1969,5,71,0,0,1969,1972,5,197,0,0,1970,1973,3,990,495,0,1971,1973,
        3,1006,503,0,1972,1970,1,0,0,0,1972,1971,1,0,0,0,1973,237,1,0,0,
        0,1974,1976,5,98,0,0,1975,1977,5,218,0,0,1976,1975,1,0,0,0,1976,
        1977,1,0,0,0,1977,1978,1,0,0,0,1978,1979,5,122,0,0,1979,1982,5,269,
        0,0,1980,1981,5,136,0,0,1981,1983,5,107,0,0,1982,1980,1,0,0,0,1982,
        1983,1,0,0,0,1983,1984,1,0,0,0,1984,1985,3,992,496,0,1985,239,1,
        0,0,0,1986,1987,3,438,219,0,1987,241,1,0,0,0,1988,1991,3,244,122,
        0,1989,1991,3,250,125,0,1990,1988,1,0,0,0,1990,1989,1,0,0,0,1991,
        243,1,0,0,0,1992,1995,3,246,123,0,1993,1995,3,248,124,0,1994,1992,
        1,0,0,0,1994,1993,1,0,0,0,1995,245,1,0,0,0,1996,1997,3,454,227,0,
        1997,1999,3,254,127,0,1998,2000,3,372,186,0,1999,1998,1,0,0,0,1999,
        2000,1,0,0,0,2000,247,1,0,0,0,2001,2002,3,454,227,0,2002,2003,3,
        60,30,0,2003,249,1,0,0,0,2004,2007,3,252,126,0,2005,2007,3,60,30,
        0,2006,2004,1,0,0,0,2006,2005,1,0,0,0,2007,251,1,0,0,0,2008,2010,
        3,336,168,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2012,1,0,0,
        0,2011,2013,3,258,129,0,2012,2011,1,0,0,0,2013,2014,1,0,0,0,2014,
        2012,1,0,0,0,2014,2015,1,0,0,0,2015,2017,1,0,0,0,2016,2018,3,372,
        186,0,2017,2016,1,0,0,0,2017,2018,1,0,0,0,2018,253,1,0,0,0,2019,
        2021,3,256,128,0,2020,2019,1,0,0,0,2021,2022,1,0,0,0,2022,2020,1,
        0,0,0,2022,2023,1,0,0,0,2023,255,1,0,0,0,2024,2027,3,338,169,0,2025,
        2027,3,258,129,0,2026,2024,1,0,0,0,2026,2025,1,0,0,0,2027,257,1,
        0,0,0,2028,2031,3,260,130,0,2029,2031,3,298,149,0,2030,2028,1,0,
        0,0,2030,2029,1,0,0,0,2031,259,1,0,0,0,2032,2038,3,262,131,0,2033,
        2038,3,264,132,0,2034,2038,3,280,140,0,2035,2038,3,290,145,0,2036,
        2038,3,296,148,0,2037,2032,1,0,0,0,2037,2033,1,0,0,0,2037,2034,1,
        0,0,0,2037,2035,1,0,0,0,2037,2036,1,0,0,0,2038,261,1,0,0,0,2039,
        2040,5,138,0,0,2040,2041,3,630,315,0,2041,263,1,0,0,0,2042,2043,
        5,237,0,0,2043,2044,3,266,133,0,2044,265,1,0,0,0,2045,2050,3,268,
        134,0,2046,2047,5,5,0,0,2047,2049,3,268,134,0,2048,2046,1,0,0,0,
        2049,2052,1,0,0,0,2050,2048,1,0,0,0,2050,2051,1,0,0,0,2051,267,1,
        0,0,0,2052,2050,1,0,0,0,2053,2058,3,270,135,0,2054,2058,3,272,136,
        0,2055,2058,3,274,137,0,2056,2058,3,276,138,0,2057,2053,1,0,0,0,
        2057,2054,1,0,0,0,2057,2055,1,0,0,0,2057,2056,1,0,0,0,2058,269,1,
        0,0,0,2059,2060,3,458,229,0,2060,2061,5,16,0,0,2061,2062,3,136,68,
        0,2062,2063,5,7,0,0,2063,2064,3,1022,511,0,2064,271,1,0,0,0,2065,
        2066,3,458,229,0,2066,2067,5,7,0,0,2067,2069,5,10,0,0,2068,2070,
        3,554,277,0,2069,2068,1,0,0,0,2069,2070,1,0,0,0,2070,2071,1,0,0,
        0,2071,2072,5,20,0,0,2072,273,1,0,0,0,2073,2074,3,458,229,0,2074,
        2075,5,17,0,0,2075,2076,5,7,0,0,2076,2078,5,10,0,0,2077,2079,3,554,
        277,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,
        2081,5,20,0,0,2081,275,1,0,0,0,2082,2083,3,458,229,0,2083,2084,3,
        548,274,0,2084,2085,3,132,66,0,2085,277,1,0,0,0,2086,2091,3,132,
        66,0,2087,2088,5,1,0,0,2088,2090,3,132,66,0,2089,2087,1,0,0,0,2090,
        2093,1,0,0,0,2091,2089,1,0,0,0,2091,2092,1,0,0,0,2092,279,1,0,0,
        0,2093,2091,1,0,0,0,2094,2095,5,225,0,0,2095,2096,3,282,141,0,2096,
        281,1,0,0,0,2097,2102,3,284,142,0,2098,2099,5,5,0,0,2099,2101,3,
        284,142,0,2100,2098,1,0,0,0,2101,2104,1,0,0,0,2102,2100,1,0,0,0,
        2102,2103,1,0,0,0,2103,283,1,0,0,0,2104,2102,1,0,0,0,2105,2108,3,
        286,143,0,2106,2108,3,288,144,0,2107,2105,1,0,0,0,2107,2106,1,0,
        0,0,2108,285,1,0,0,0,2109,2110,3,458,229,0,2110,2111,5,16,0,0,2111,
        2112,3,136,68,0,2112,287,1,0,0,0,2113,2114,3,458,229,0,2114,2115,
        3,548,274,0,2115,2116,3,132,66,0,2116,289,1,0,0,0,2117,2119,7,10,
        0,0,2118,2117,1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2121,
        5,89,0,0,2121,2122,3,292,146,0,2122,291,1,0,0,0,2123,2128,3,294,
        147,0,2124,2125,5,5,0,0,2125,2127,3,294,147,0,2126,2124,1,0,0,0,
        2127,2130,1,0,0,0,2128,2126,1,0,0,0,2128,2129,1,0,0,0,2129,293,1,
        0,0,0,2130,2128,1,0,0,0,2131,2132,3,1022,511,0,2132,295,1,0,0,0,
        2133,2134,5,227,0,0,2134,2135,3,630,315,0,2135,297,1,0,0,0,2136,
        2137,3,438,219,0,2137,299,1,0,0,0,2138,2139,3,302,151,0,2139,301,
        1,0,0,0,2140,2147,3,306,153,0,2141,2143,3,304,152,0,2142,2144,3,
        372,186,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,2146,1,0,0,0,
        2145,2141,1,0,0,0,2146,2149,1,0,0,0,2147,2145,1,0,0,0,2147,2148,
        1,0,0,0,2148,303,1,0,0,0,2149,2147,1,0,0,0,2150,2152,3,318,159,0,
        2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2154,
        5,313,0,0,2154,2157,3,306,153,0,2155,2156,5,314,0,0,2156,2158,3,
        1022,511,0,2157,2155,1,0,0,0,2157,2158,1,0,0,0,2158,305,1,0,0,0,
        2159,2160,3,312,156,0,2160,307,1,0,0,0,2161,2162,5,239,0,0,2162,
        2169,5,217,0,0,2163,2165,5,160,0,0,2164,2166,3,310,155,0,2165,2164,
        1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2169,3,70,35,0,
        2168,2161,1,0,0,0,2168,2163,1,0,0,0,2169,309,1,0,0,0,2170,2171,7,
        11,0,0,2171,311,1,0,0,0,2172,2178,3,320,160,0,2173,2174,3,314,157,
        0,2174,2175,3,320,160,0,2175,2177,1,0,0,0,2176,2173,1,0,0,0,2177,
        2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,313,1,0,0,
        0,2180,2178,1,0,0,0,2181,2184,3,316,158,0,2182,2184,5,205,0,0,2183,
        2181,1,0,0,0,2183,2182,1,0,0,0,2184,315,1,0,0,0,2185,2187,5,280,
        0,0,2186,2188,3,754,377,0,2187,2186,1,0,0,0,2187,2188,1,0,0,0,2188,
        2198,1,0,0,0,2189,2191,5,106,0,0,2190,2192,3,754,377,0,2191,2190,
        1,0,0,0,2191,2192,1,0,0,0,2192,2198,1,0,0,0,2193,2195,5,153,0,0,
        2194,2196,3,754,377,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,2198,
        1,0,0,0,2197,2185,1,0,0,0,2197,2189,1,0,0,0,2197,2193,1,0,0,0,2198,
        317,1,0,0,0,2199,2200,7,12,0,0,2200,319,1,0,0,0,2201,2204,3,322,
        161,0,2202,2204,3,334,167,0,2203,2201,1,0,0,0,2203,2202,1,0,0,0,
        2204,321,1,0,0,0,2205,2210,3,324,162,0,2206,2210,3,330,165,0,2207,
        2210,3,332,166,0,2208,2210,3,422,211,0,2209,2205,1,0,0,0,2209,2206,
        1,0,0,0,2209,2207,1,0,0,0,2209,2208,1,0,0,0,2210,323,1,0,0,0,2211,
        2213,3,326,163,0,2212,2211,1,0,0,0,2213,2216,1,0,0,0,2214,2212,1,
        0,0,0,2214,2215,1,0,0,0,2215,2217,1,0,0,0,2216,2214,1,0,0,0,2217,
        2218,3,328,164,0,2218,325,1,0,0,0,2219,2220,3,454,227,0,2220,2221,
        3,336,168,0,2221,327,1,0,0,0,2222,2223,3,454,227,0,2223,2224,3,336,
        168,0,2224,2225,3,372,186,0,2225,329,1,0,0,0,2226,2227,3,454,227,
        0,2227,2228,3,372,186,0,2228,331,1,0,0,0,2229,2230,3,454,227,0,2230,
        2231,3,64,32,0,2231,333,1,0,0,0,2232,2234,3,336,168,0,2233,2232,
        1,0,0,0,2233,2234,1,0,0,0,2234,2235,1,0,0,0,2235,2238,3,372,186,
        0,2236,2238,3,64,32,0,2237,2233,1,0,0,0,2237,2236,1,0,0,0,2238,335,
        1,0,0,0,2239,2241,3,338,169,0,2240,2239,1,0,0,0,2241,2242,1,0,0,
        0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,2243,337,1,0,0,0,2244,2247,
        3,340,170,0,2245,2247,3,352,176,0,2246,2244,1,0,0,0,2246,2245,1,
        0,0,0,2247,339,1,0,0,0,2248,2254,3,342,171,0,2249,2254,3,356,178,
        0,2250,2254,3,362,181,0,2251,2254,3,354,177,0,2252,2254,3,370,185,
        0,2253,2248,1,0,0,0,2253,2249,1,0,0,0,2253,2250,1,0,0,0,2253,2251,
        1,0,0,0,2253,2252,1,0,0,0,2254,341,1,0,0,0,2255,2258,3,344,172,0,
        2256,2258,3,346,173,0,2257,2255,1,0,0,0,2257,2256,1,0,0,0,2258,343,
        1,0,0,0,2259,2260,5,179,0,0,2260,2261,3,466,233,0,2261,345,1,0,0,
        0,2262,2263,5,201,0,0,2263,2264,3,348,174,0,2264,347,1,0,0,0,2265,
        2275,3,344,172,0,2266,2267,5,10,0,0,2267,2268,3,350,175,0,2268,2269,
        5,20,0,0,2269,2275,1,0,0,0,2270,2271,5,12,0,0,2271,2272,3,350,175,
        0,2272,2273,5,22,0,0,2273,2275,1,0,0,0,2274,2265,1,0,0,0,2274,2266,
        1,0,0,0,2274,2270,1,0,0,0,2275,349,1,0,0,0,2276,2278,3,342,171,0,
        2277,2276,1,0,0,0,2278,2279,1,0,0,0,2279,2277,1,0,0,0,2279,2280,
        1,0,0,0,2280,351,1,0,0,0,2281,2282,3,438,219,0,2282,353,1,0,0,0,
        2283,2286,5,110,0,0,2284,2287,3,728,364,0,2285,2287,3,1022,511,0,
        2286,2284,1,0,0,0,2286,2285,1,0,0,0,2287,355,1,0,0,0,2288,2289,5,
        164,0,0,2289,2290,3,358,179,0,2290,357,1,0,0,0,2291,2296,3,360,180,
        0,2292,2293,5,5,0,0,2293,2295,3,360,180,0,2294,2292,1,0,0,0,2295,
        2298,1,0,0,0,2296,2294,1,0,0,0,2296,2297,1,0,0,0,2297,359,1,0,0,
        0,2298,2296,1,0,0,0,2299,2305,3,194,97,0,2300,2301,3,158,79,0,2301,
        2302,5,7,0,0,2302,2303,3,1022,511,0,2303,2305,1,0,0,0,2304,2299,
        1,0,0,0,2304,2300,1,0,0,0,2305,361,1,0,0,0,2306,2307,5,120,0,0,2307,
        2309,3,364,182,0,2308,2310,3,368,184,0,2309,2308,1,0,0,0,2309,2310,
        1,0,0,0,2310,363,1,0,0,0,2311,2312,3,366,183,0,2312,2313,3,1026,
        513,0,2313,365,1,0,0,0,2314,2315,3,98,49,0,2315,2316,5,137,0,0,2316,
        367,1,0,0,0,2317,2318,5,293,0,0,2318,2319,7,13,0,0,2319,2320,3,98,
        49,0,2320,369,1,0,0,0,2321,2323,3,748,374,0,2322,2324,3,774,387,
        0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,2326,1,0,0,0,2325,2327,
        3,772,386,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2334,1,0,0,
        0,2328,2330,3,774,387,0,2329,2331,3,772,386,0,2330,2329,1,0,0,0,
        2330,2331,1,0,0,0,2331,2334,1,0,0,0,2332,2334,3,772,386,0,2333,2321,
        1,0,0,0,2333,2328,1,0,0,0,2333,2332,1,0,0,0,2334,371,1,0,0,0,2335,
        2337,3,374,187,0,2336,2338,3,370,185,0,2337,2336,1,0,0,0,2337,2338,
        1,0,0,0,2338,2342,1,0,0,0,2339,2342,3,386,193,0,2340,2342,5,111,
        0,0,2341,2335,1,0,0,0,2341,2339,1,0,0,0,2341,2340,1,0,0,0,2342,373,
        1,0,0,0,2343,2344,5,229,0,0,2344,2345,3,376,188,0,2345,375,1,0,0,
        0,2346,2348,3,382,191,0,2347,2346,1,0,0,0,2347,2348,1,0,0,0,2348,
        2350,1,0,0,0,2349,2351,3,754,377,0,2350,2349,1,0,0,0,2350,2351,1,
        0,0,0,2351,2354,1,0,0,0,2352,2355,5,2,0,0,2353,2355,3,378,189,0,
        2354,2352,1,0,0,0,2354,2353,1,0,0,0,2355,2357,1,0,0,0,2356,2358,
        3,740,370,0,2357,2356,1,0,0,0,2357,2358,1,0,0,0,2358,2362,1,0,0,
        0,2359,2360,5,188,0,0,2360,2362,5,49,0,0,2361,2347,1,0,0,0,2361,
        2359,1,0,0,0,2362,377,1,0,0,0,2363,2368,3,380,190,0,2364,2365,5,
        5,0,0,2365,2367,3,380,190,0,2366,2364,1,0,0,0,2367,2370,1,0,0,0,
        2368,2366,1,0,0,0,2368,2369,1,0,0,0,2369,379,1,0,0,0,2370,2368,1,
        0,0,0,2371,2374,3,1022,511,0,2372,2373,5,37,0,0,2373,2375,3,98,49,
        0,2374,2372,1,0,0,0,2374,2375,1,0,0,0,2375,381,1,0,0,0,2376,2377,
        5,363,0,0,2377,2382,3,384,192,0,2378,2379,5,5,0,0,2379,2381,3,384,
        192,0,2380,2378,1,0,0,0,2381,2384,1,0,0,0,2382,2380,1,0,0,0,2382,
        2383,1,0,0,0,2383,2385,1,0,0,0,2384,2382,1,0,0,0,2385,2386,5,421,
        0,0,2386,383,1,0,0,0,2387,2388,5,222,0,0,2388,2389,5,12,0,0,2389,
        2390,3,98,49,0,2390,2391,5,22,0,0,2391,2398,1,0,0,0,2392,2393,5,
        33,0,0,2393,2394,5,12,0,0,2394,2395,3,1120,560,0,2395,2396,5,22,
        0,0,2396,2398,1,0,0,0,2397,2387,1,0,0,0,2397,2392,1,0,0,0,2398,385,
        1,0,0,0,2399,2400,5,317,0,0,2400,2401,3,388,194,0,2401,387,1,0,0,
        0,2402,2407,3,390,195,0,2403,2404,5,5,0,0,2404,2406,3,390,195,0,
        2405,2403,1,0,0,0,2406,2409,1,0,0,0,2407,2405,1,0,0,0,2407,2408,
        1,0,0,0,2408,389,1,0,0,0,2409,2407,1,0,0,0,2410,2413,3,392,196,0,
        2411,2413,3,396,198,0,2412,2410,1,0,0,0,2412,2411,1,0,0,0,2413,391,
        1,0,0,0,2414,2416,3,160,80,0,2415,2417,3,394,197,0,2416,2415,1,0,
        0,0,2416,2417,1,0,0,0,2417,393,1,0,0,0,2418,2419,5,318,0,0,2419,
        2420,5,12,0,0,2420,2425,3,136,68,0,2421,2422,5,5,0,0,2422,2424,3,
        136,68,0,2423,2421,1,0,0,0,2424,2427,1,0,0,0,2425,2423,1,0,0,0,2425,
        2426,1,0,0,0,2426,2428,1,0,0,0,2427,2425,1,0,0,0,2428,2429,5,22,
        0,0,2429,395,1,0,0,0,2430,2433,3,398,199,0,2431,2433,3,400,200,0,
        2432,2430,1,0,0,0,2432,2431,1,0,0,0,2433,397,1,0,0,0,2434,2435,5,
        12,0,0,2435,2436,3,402,201,0,2436,2437,5,22,0,0,2437,399,1,0,0,0,
        2438,2439,5,12,0,0,2439,2440,3,418,209,0,2440,2441,5,22,0,0,2441,
        2442,3,404,202,0,2442,2443,5,12,0,0,2443,2444,3,420,210,0,2444,2445,
        5,22,0,0,2445,401,1,0,0,0,2446,2448,3,544,272,0,2447,2446,1,0,0,
        0,2447,2448,1,0,0,0,2448,2449,1,0,0,0,2449,2451,3,546,273,0,2450,
        2452,3,412,206,0,2451,2450,1,0,0,0,2451,2452,1,0,0,0,2452,2453,1,
        0,0,0,2453,2454,3,414,207,0,2454,403,1,0,0,0,2455,2459,3,406,203,
        0,2456,2459,3,408,204,0,2457,2459,3,410,205,0,2458,2455,1,0,0,0,
        2458,2456,1,0,0,0,2458,2457,1,0,0,0,2459,405,1,0,0,0,2460,2461,5,
        14,0,0,2461,2462,5,11,0,0,2462,2463,3,402,201,0,2463,2464,5,21,0,
        0,2464,2465,5,371,0,0,2465,407,1,0,0,0,2466,2467,5,13,0,0,2467,2468,
        5,14,0,0,2468,2469,5,11,0,0,2469,2470,3,402,201,0,2470,2471,5,21,
        0,0,2471,2472,5,14,0,0,2472,409,1,0,0,0,2473,2474,5,14,0,0,2474,
        2475,5,11,0,0,2475,2476,3,402,201,0,2476,2477,5,21,0,0,2477,2478,
        5,14,0,0,2478,411,1,0,0,0,2479,2480,5,319,0,0,2480,2481,5,320,0,
        0,2481,2483,5,12,0,0,2482,2484,3,98,49,0,2483,2482,1,0,0,0,2484,
        2485,1,0,0,0,2485,2483,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,
        0,2487,2488,5,22,0,0,2488,413,1,0,0,0,2489,2490,5,10,0,0,2490,2493,
        3,554,277,0,2491,2492,5,5,0,0,2492,2494,3,416,208,0,2493,2491,1,
        0,0,0,2493,2494,1,0,0,0,2494,2495,1,0,0,0,2495,2496,5,20,0,0,2496,
        415,1,0,0,0,2497,2498,5,361,0,0,2498,2499,3,98,49,0,2499,417,1,0,
        0,0,2500,2501,3,98,49,0,2501,419,1,0,0,0,2502,2503,3,98,49,0,2503,
        421,1,0,0,0,2504,2506,5,235,0,0,2505,2507,3,382,191,0,2506,2505,
        1,0,0,0,2506,2507,1,0,0,0,2507,2509,1,0,0,0,2508,2510,3,754,377,
        0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,2513,1,0,0,0,2511,2514,
        5,2,0,0,2512,2514,3,424,212,0,2513,2511,1,0,0,0,2513,2512,1,0,0,
        0,2514,2516,1,0,0,0,2515,2517,3,430,215,0,2516,2515,1,0,0,0,2516,
        2517,1,0,0,0,2517,2519,1,0,0,0,2518,2520,3,728,364,0,2519,2518,1,
        0,0,0,2519,2520,1,0,0,0,2520,2522,1,0,0,0,2521,2523,3,740,370,0,
        2522,2521,1,0,0,0,2522,2523,1,0,0,0,2523,2525,1,0,0,0,2524,2526,
        3,428,214,0,2525,2524,1,0,0,0,2525,2526,1,0,0,0,2526,2528,1,0,0,
        0,2527,2529,3,748,374,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,
        2531,1,0,0,0,2530,2532,3,774,387,0,2531,2530,1,0,0,0,2531,2532,1,
        0,0,0,2532,2534,1,0,0,0,2533,2535,3,772,386,0,2534,2533,1,0,0,0,
        2534,2535,1,0,0,0,2535,423,1,0,0,0,2536,2541,3,426,213,0,2537,2538,
        5,5,0,0,2538,2540,3,426,213,0,2539,2537,1,0,0,0,2540,2543,1,0,0,
        0,2541,2539,1,0,0,0,2541,2542,1,0,0,0,2542,425,1,0,0,0,2543,2541,
        1,0,0,0,2544,2547,3,1022,511,0,2545,2546,5,37,0,0,2546,2548,3,98,
        49,0,2547,2545,1,0,0,0,2547,2548,1,0,0,0,2548,427,1,0,0,0,2549,2550,
        5,126,0,0,2550,2551,3,1022,511,0,2551,429,1,0,0,0,2552,2553,5,121,
        0,0,2553,2565,3,432,216,0,2554,2555,5,121,0,0,2555,2565,3,436,218,
        0,2556,2561,3,342,171,0,2557,2558,5,5,0,0,2558,2560,3,342,171,0,
        2559,2557,1,0,0,0,2560,2563,1,0,0,0,2561,2559,1,0,0,0,2561,2562,
        1,0,0,0,2562,2565,1,0,0,0,2563,2561,1,0,0,0,2564,2552,1,0,0,0,2564,
        2554,1,0,0,0,2564,2556,1,0,0,0,2565,431,1,0,0,0,2566,2571,3,434,
        217,0,2567,2568,5,5,0,0,2568,2570,3,434,217,0,2569,2567,1,0,0,0,
        2570,2573,1,0,0,0,2571,2569,1,0,0,0,2571,2572,1,0,0,0,2572,433,1,
        0,0,0,2573,2571,1,0,0,0,2574,2575,3,198,99,0,2575,2576,3,342,171,
        0,2576,435,1,0,0,0,2577,2582,3,64,32,0,2578,2579,3,198,99,0,2579,
        2580,3,64,32,0,2580,2582,1,0,0,0,2581,2577,1,0,0,0,2581,2578,1,0,
        0,0,2582,437,1,0,0,0,2583,2585,5,201,0,0,2584,2583,1,0,0,0,2584,
        2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,5,57,0,0,2587,2588,3,440,
        220,0,2588,439,1,0,0,0,2589,2592,3,442,221,0,2590,2592,3,448,224,
        0,2591,2589,1,0,0,0,2591,2590,1,0,0,0,2592,441,1,0,0,0,2593,2595,
        3,444,222,0,2594,2593,1,0,0,0,2594,2595,1,0,0,0,2595,2596,1,0,0,
        0,2596,2597,3,54,27,0,2597,443,1,0,0,0,2598,2600,5,12,0,0,2599,2601,
        3,446,223,0,2600,2599,1,0,0,0,2600,2601,1,0,0,0,2601,2602,1,0,0,
        0,2602,2603,5,22,0,0,2603,445,1,0,0,0,2604,2609,3,458,229,0,2605,
        2606,5,5,0,0,2606,2608,3,458,229,0,2607,2605,1,0,0,0,2608,2611,1,
        0,0,0,2609,2607,1,0,0,0,2609,2610,1,0,0,0,2610,447,1,0,0,0,2611,
        2609,1,0,0,0,2612,2613,3,998,499,0,2613,2615,5,12,0,0,2614,2616,
        3,450,225,0,2615,2614,1,0,0,0,2615,2616,1,0,0,0,2616,2617,1,0,0,
        0,2617,2619,5,22,0,0,2618,2620,3,730,365,0,2619,2618,1,0,0,0,2619,
        2620,1,0,0,0,2620,449,1,0,0,0,2621,2626,3,452,226,0,2622,2623,5,
        5,0,0,2623,2625,3,452,226,0,2624,2622,1,0,0,0,2625,2628,1,0,0,0,
        2626,2624,1,0,0,0,2626,2627,1,0,0,0,2627,451,1,0,0,0,2628,2626,1,
        0,0,0,2629,2630,3,1022,511,0,2630,453,1,0,0,0,2631,2632,7,14,0,0,
        2632,2633,3,198,99,0,2633,455,1,0,0,0,2634,2635,5,41,0,0,2635,2636,
        3,968,484,0,2636,457,1,0,0,0,2637,2638,3,160,80,0,2638,459,1,0,0,
        0,2639,2640,3,458,229,0,2640,461,1,0,0,0,2641,2642,3,458,229,0,2642,
        463,1,0,0,0,2643,2644,3,140,70,0,2644,465,1,0,0,0,2645,2647,3,474,
        237,0,2646,2648,3,468,234,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,
        2648,467,1,0,0,0,2649,2650,5,297,0,0,2650,2651,3,470,235,0,2651,
        469,1,0,0,0,2652,2657,3,472,236,0,2653,2654,5,5,0,0,2654,2656,3,
        472,236,0,2655,2653,1,0,0,0,2656,2659,1,0,0,0,2657,2655,1,0,0,0,
        2657,2658,1,0,0,0,2658,2663,1,0,0,0,2659,2657,1,0,0,0,2660,2661,
        5,188,0,0,2661,2663,5,49,0,0,2662,2652,1,0,0,0,2662,2660,1,0,0,0,
        2663,471,1,0,0,0,2664,2667,3,460,230,0,2665,2667,3,462,231,0,2666,
        2664,1,0,0,0,2666,2665,1,0,0,0,2667,473,1,0,0,0,2668,2670,3,476,
        238,0,2669,2668,1,0,0,0,2669,2670,1,0,0,0,2670,2671,1,0,0,0,2671,
        2673,3,486,243,0,2672,2674,3,492,246,0,2673,2672,1,0,0,0,2673,2674,
        1,0,0,0,2674,2676,1,0,0,0,2675,2677,3,728,364,0,2676,2675,1,0,0,
        0,2676,2677,1,0,0,0,2677,475,1,0,0,0,2678,2681,3,478,239,0,2679,
        2681,3,480,240,0,2680,2678,1,0,0,0,2680,2679,1,0,0,0,2681,477,1,
        0,0,0,2682,2683,5,226,0,0,2683,2684,3,482,241,0,2684,479,1,0,0,0,
        2685,2686,5,94,0,0,2686,2687,3,484,242,0,2687,481,1,0,0,0,2688,2690,
        5,101,0,0,2689,2691,5,49,0,0,2690,2689,1,0,0,0,2690,2691,1,0,0,0,
        2691,2694,1,0,0,0,2692,2694,5,103,0,0,2693,2688,1,0,0,0,2693,2692,
        1,0,0,0,2694,483,1,0,0,0,2695,2697,5,324,0,0,2696,2698,5,49,0,0,
        2697,2696,1,0,0,0,2697,2698,1,0,0,0,2698,2701,1,0,0,0,2699,2701,
        5,325,0,0,2700,2695,1,0,0,0,2700,2699,1,0,0,0,2701,485,1,0,0,0,2702,
        2707,3,488,244,0,2703,2704,5,5,0,0,2704,2706,3,488,244,0,2705,2703,
        1,0,0,0,2706,2709,1,0,0,0,2707,2705,1,0,0,0,2707,2708,1,0,0,0,2708,
        487,1,0,0,0,2709,2707,1,0,0,0,2710,2712,3,490,245,0,2711,2710,1,
        0,0,0,2711,2712,1,0,0,0,2712,2714,1,0,0,0,2713,2715,3,494,247,0,
        2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,0,0,2716,2717,
        3,522,261,0,2717,489,1,0,0,0,2718,2719,3,152,76,0,2719,2720,5,7,
        0,0,2720,491,1,0,0,0,2721,2722,5,155,0,0,2722,2723,3,494,247,0,2723,
        493,1,0,0,0,2724,2727,3,496,248,0,2725,2727,3,500,250,0,2726,2724,
        1,0,0,0,2726,2725,1,0,0,0,2727,495,1,0,0,0,2728,2730,3,498,249,0,
        2729,2731,3,504,252,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,2731,497,
        1,0,0,0,2732,2733,7,15,0,0,2733,499,1,0,0,0,2734,2738,3,502,251,
        0,2735,2738,3,506,253,0,2736,2738,3,510,255,0,2737,2734,1,0,0,0,
        2737,2735,1,0,0,0,2737,2736,1,0,0,0,2738,501,1,0,0,0,2739,2741,5,
        31,0,0,2740,2742,3,498,249,0,2741,2740,1,0,0,0,2741,2742,1,0,0,0,
        2742,2744,1,0,0,0,2743,2745,3,504,252,0,2744,2743,1,0,0,0,2744,2745,
        1,0,0,0,2745,503,1,0,0,0,2746,2747,7,16,0,0,2747,505,1,0,0,0,2748,
        2750,5,35,0,0,2749,2751,3,508,254,0,2750,2749,1,0,0,0,2750,2751,
        1,0,0,0,2751,2753,1,0,0,0,2752,2754,3,498,249,0,2753,2752,1,0,0,
        0,2753,2754,1,0,0,0,2754,2756,1,0,0,0,2755,2757,3,504,252,0,2756,
        2755,1,0,0,0,2756,2757,1,0,0,0,2757,507,1,0,0,0,2758,2759,3,1118,
        559,0,2759,509,1,0,0,0,2760,2765,3,512,256,0,2761,2765,3,514,257,
        0,2762,2765,3,516,258,0,2763,2765,3,518,259,0,2764,2760,1,0,0,0,
        2764,2761,1,0,0,0,2764,2762,1,0,0,0,2764,2763,1,0,0,0,2765,511,1,
        0,0,0,2766,2767,5,31,0,0,2767,2769,5,238,0,0,2768,2770,3,498,249,
        0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2772,1,0,0,0,2771,2773,
        3,504,252,0,2772,2771,1,0,0,0,2772,2773,1,0,0,0,2773,513,1,0,0,0,
        2774,2775,5,35,0,0,2775,2777,5,238,0,0,2776,2778,3,498,249,0,2777,
        2776,1,0,0,0,2777,2778,1,0,0,0,2778,2780,1,0,0,0,2779,2781,3,504,
        252,0,2780,2779,1,0,0,0,2780,2781,1,0,0,0,2781,515,1,0,0,0,2782,
        2783,5,238,0,0,2783,2785,3,508,254,0,2784,2786,3,498,249,0,2785,
        2784,1,0,0,0,2785,2786,1,0,0,0,2786,2788,1,0,0,0,2787,2789,3,504,
        252,0,2788,2787,1,0,0,0,2788,2789,1,0,0,0,2789,517,1,0,0,0,2790,
        2791,5,238,0,0,2791,2793,3,520,260,0,2792,2794,3,498,249,0,2793,
        2792,1,0,0,0,2793,2794,1,0,0,0,2794,2796,1,0,0,0,2795,2797,3,504,
        252,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,2798,1,0,0,0,2798,
        2799,7,17,0,0,2799,519,1,0,0,0,2800,2801,3,1118,559,0,2801,521,1,
        0,0,0,2802,2806,3,528,264,0,2803,2806,3,524,262,0,2804,2806,3,526,
        263,0,2805,2802,1,0,0,0,2805,2803,1,0,0,0,2805,2804,1,0,0,0,2806,
        523,1,0,0,0,2807,2808,3,528,264,0,2808,2809,5,358,0,0,2809,2814,
        3,528,264,0,2810,2811,5,358,0,0,2811,2813,3,528,264,0,2812,2810,
        1,0,0,0,2813,2816,1,0,0,0,2814,2812,1,0,0,0,2814,2815,1,0,0,0,2815,
        525,1,0,0,0,2816,2814,1,0,0,0,2817,2818,3,528,264,0,2818,2819,5,
        27,0,0,2819,2824,3,528,264,0,2820,2821,5,27,0,0,2821,2823,3,528,
        264,0,2822,2820,1,0,0,0,2823,2826,1,0,0,0,2824,2822,1,0,0,0,2824,
        2825,1,0,0,0,2825,527,1,0,0,0,2826,2824,1,0,0,0,2827,2829,3,530,
        265,0,2828,2827,1,0,0,0,2829,2830,1,0,0,0,2830,2828,1,0,0,0,2830,
        2831,1,0,0,0,2831,529,1,0,0,0,2832,2836,3,536,268,0,2833,2836,3,
        532,266,0,2834,2836,3,534,267,0,2835,2832,1,0,0,0,2835,2833,1,0,
        0,0,2835,2834,1,0,0,0,2836,531,1,0,0,0,2837,2838,3,536,268,0,2838,
        2839,3,662,331,0,2839,533,1,0,0,0,2840,2841,3,536,268,0,2841,2842,
        5,18,0,0,2842,535,1,0,0,0,2843,2847,3,538,269,0,2844,2847,3,614,
        307,0,2845,2847,3,672,336,0,2846,2843,1,0,0,0,2846,2844,1,0,0,0,
        2846,2845,1,0,0,0,2847,537,1,0,0,0,2848,2851,3,540,270,0,2849,2851,
        3,594,297,0,2850,2848,1,0,0,0,2850,2849,1,0,0,0,2851,539,1,0,0,0,
        2852,2853,5,12,0,0,2853,2854,3,542,271,0,2854,2855,5,22,0,0,2855,
        541,1,0,0,0,2856,2858,3,544,272,0,2857,2856,1,0,0,0,2857,2858,1,
        0,0,0,2858,2860,1,0,0,0,2859,2861,3,546,273,0,2860,2859,1,0,0,0,
        2860,2861,1,0,0,0,2861,2863,1,0,0,0,2862,2864,3,550,275,0,2863,2862,
        1,0,0,0,2863,2864,1,0,0,0,2864,543,1,0,0,0,2865,2867,5,258,0,0,2866,
        2865,1,0,0,0,2866,2867,1,0,0,0,2867,2868,1,0,0,0,2868,2869,3,150,
        75,0,2869,545,1,0,0,0,2870,2871,3,548,274,0,2871,2872,3,650,325,
        0,2872,547,1,0,0,0,2873,2874,7,18,0,0,2874,549,1,0,0,0,2875,2884,
        3,728,364,0,2876,2884,3,552,276,0,2877,2884,3,558,279,0,2878,2884,
        3,560,280,0,2879,2884,3,568,284,0,2880,2884,3,576,288,0,2881,2884,
        3,578,289,0,2882,2884,3,586,293,0,2883,2875,1,0,0,0,2883,2876,1,
        0,0,0,2883,2877,1,0,0,0,2883,2878,1,0,0,0,2883,2879,1,0,0,0,2883,
        2880,1,0,0,0,2883,2881,1,0,0,0,2883,2882,1,0,0,0,2884,551,1,0,0,
        0,2885,2886,5,10,0,0,2886,2887,3,554,277,0,2887,2888,5,20,0,0,2888,
        553,1,0,0,0,2889,2894,3,556,278,0,2890,2891,5,5,0,0,2891,2893,3,
        556,278,0,2892,2890,1,0,0,0,2893,2896,1,0,0,0,2894,2892,1,0,0,0,
        2894,2895,1,0,0,0,2895,555,1,0,0,0,2896,2894,1,0,0,0,2897,2898,3,
        136,68,0,2898,2899,5,4,0,0,2899,2900,3,1022,511,0,2900,557,1,0,0,
        0,2901,2902,5,213,0,0,2902,2909,3,1118,559,0,2903,2904,5,213,0,0,
        2904,2905,5,12,0,0,2905,2906,3,1118,559,0,2906,2907,5,22,0,0,2907,
        2909,1,0,0,0,2908,2901,1,0,0,0,2908,2903,1,0,0,0,2909,559,1,0,0,
        0,2910,2914,3,562,281,0,2911,2914,3,564,282,0,2912,2914,3,566,283,
        0,2913,2910,1,0,0,0,2913,2911,1,0,0,0,2913,2912,1,0,0,0,2914,561,
        1,0,0,0,2915,2916,3,558,279,0,2916,2917,3,728,364,0,2917,563,1,0,
        0,0,2918,2919,3,728,364,0,2919,2920,3,558,279,0,2920,565,1,0,0,0,
        2921,2922,3,558,279,0,2922,2923,3,728,364,0,2923,2924,3,558,279,
        0,2924,567,1,0,0,0,2925,2929,3,570,285,0,2926,2929,3,572,286,0,2927,
        2929,3,574,287,0,2928,2925,1,0,0,0,2928,2926,1,0,0,0,2928,2927,1,
        0,0,0,2929,569,1,0,0,0,2930,2931,3,558,279,0,2931,2932,3,552,276,
        0,2932,571,1,0,0,0,2933,2934,3,552,276,0,2934,2935,3,558,279,0,2935,
        573,1,0,0,0,2936,2937,3,558,279,0,2937,2938,3,552,276,0,2938,2939,
        3,558,279,0,2939,575,1,0,0,0,2940,2941,5,214,0,0,2941,2948,3,1118,
        559,0,2942,2943,5,214,0,0,2943,2944,5,12,0,0,2944,2945,3,1118,559,
        0,2945,2946,5,22,0,0,2946,2948,1,0,0,0,2947,2940,1,0,0,0,2947,2942,
        1,0,0,0,2948,577,1,0,0,0,2949,2953,3,580,290,0,2950,2953,3,582,291,
        0,2951,2953,3,584,292,0,2952,2949,1,0,0,0,2952,2950,1,0,0,0,2952,
        2951,1,0,0,0,2953,579,1,0,0,0,2954,2955,3,576,288,0,2955,2956,3,
        728,364,0,2956,581,1,0,0,0,2957,2958,3,728,364,0,2958,2959,3,576,
        288,0,2959,583,1,0,0,0,2960,2961,3,576,288,0,2961,2962,3,728,364,
        0,2962,2963,3,576,288,0,2963,585,1,0,0,0,2964,2968,3,588,294,0,2965,
        2968,3,590,295,0,2966,2968,3,592,296,0,2967,2964,1,0,0,0,2967,2965,
        1,0,0,0,2967,2966,1,0,0,0,2968,587,1,0,0,0,2969,2970,3,576,288,0,
        2970,2971,3,552,276,0,2971,589,1,0,0,0,2972,2973,3,552,276,0,2973,
        2974,3,576,288,0,2974,591,1,0,0,0,2975,2976,3,576,288,0,2976,2977,
        3,552,276,0,2977,2978,3,576,288,0,2978,593,1,0,0,0,2979,2982,3,596,
        298,0,2980,2982,3,612,306,0,2981,2979,1,0,0,0,2981,2980,1,0,0,0,
        2982,595,1,0,0,0,2983,2991,3,598,299,0,2984,2991,3,600,300,0,2985,
        2991,3,602,301,0,2986,2991,3,604,302,0,2987,2991,3,606,303,0,2988,
        2991,3,608,304,0,2989,2991,3,610,305,0,2990,2983,1,0,0,0,2990,2984,
        1,0,0,0,2990,2985,1,0,0,0,2990,2986,1,0,0,0,2990,2987,1,0,0,0,2990,
        2988,1,0,0,0,2990,2989,1,0,0,0,2991,597,1,0,0,0,2992,2993,5,13,0,
        0,2993,2994,5,14,0,0,2994,2995,5,11,0,0,2995,2996,3,542,271,0,2996,
        2997,5,21,0,0,2997,2998,5,14,0,0,2998,599,1,0,0,0,2999,3000,5,25,
        0,0,3000,3001,5,11,0,0,3001,3002,3,542,271,0,3002,3003,5,21,0,0,
        3003,3004,5,25,0,0,3004,601,1,0,0,0,3005,3006,5,14,0,0,3006,3007,
        5,11,0,0,3007,3008,3,542,271,0,3008,3009,5,21,0,0,3009,3010,5,371,
        0,0,3010,603,1,0,0,0,3011,3012,5,13,0,0,3012,3013,5,25,0,0,3013,
        3014,5,11,0,0,3014,3015,3,542,271,0,3015,3016,5,21,0,0,3016,3017,
        5,25,0,0,3017,605,1,0,0,0,3018,3019,5,25,0,0,3019,3020,5,11,0,0,
        3020,3021,3,542,271,0,3021,3022,5,21,0,0,3022,3023,5,376,0,0,3023,
        607,1,0,0,0,3024,3025,5,13,0,0,3025,3026,5,14,0,0,3026,3027,5,11,
        0,0,3027,3028,3,542,271,0,3028,3029,5,21,0,0,3029,3030,5,371,0,0,
        3030,609,1,0,0,0,3031,3032,5,14,0,0,3032,3033,5,11,0,0,3033,3034,
        3,542,271,0,3034,3035,5,21,0,0,3035,3036,5,14,0,0,3036,611,1,0,0,
        0,3037,3038,5,13,0,0,3038,3047,5,14,0,0,3039,3047,5,25,0,0,3040,
        3047,5,371,0,0,3041,3042,5,13,0,0,3042,3047,5,25,0,0,3043,3047,5,
        376,0,0,3044,3047,5,364,0,0,3045,3047,5,14,0,0,3046,3037,1,0,0,0,
        3046,3039,1,0,0,0,3046,3040,1,0,0,0,3046,3041,1,0,0,0,3046,3043,
        1,0,0,0,3046,3044,1,0,0,0,3046,3045,1,0,0,0,3047,613,1,0,0,0,3048,
        3049,5,12,0,0,3049,3050,3,616,308,0,3050,3051,5,22,0,0,3051,3057,
        1,0,0,0,3052,3053,5,11,0,0,3053,3054,3,616,308,0,3054,3055,5,21,
        0,0,3055,3057,1,0,0,0,3056,3048,1,0,0,0,3056,3052,1,0,0,0,3057,615,
        1,0,0,0,3058,3060,3,626,313,0,3059,3058,1,0,0,0,3059,3060,1,0,0,
        0,3060,3062,1,0,0,0,3061,3063,3,496,248,0,3062,3061,1,0,0,0,3062,
        3063,1,0,0,0,3063,3064,1,0,0,0,3064,3066,3,522,261,0,3065,3067,3,
        620,310,0,3066,3065,1,0,0,0,3066,3067,1,0,0,0,3067,3069,1,0,0,0,
        3068,3070,3,628,314,0,3069,3068,1,0,0,0,3069,3070,1,0,0,0,3070,3072,
        1,0,0,0,3071,3073,3,618,309,0,3072,3071,1,0,0,0,3072,3073,1,0,0,
        0,3073,617,1,0,0,0,3074,3075,5,322,0,0,3075,3076,3,1022,511,0,3076,
        619,1,0,0,0,3077,3078,5,321,0,0,3078,3080,3,622,311,0,3079,3081,
        3,624,312,0,3080,3079,1,0,0,0,3080,3081,1,0,0,0,3081,3082,1,0,0,
        0,3082,3083,5,37,0,0,3083,3085,3,98,49,0,3084,3086,3,728,364,0,3085,
        3084,1,0,0,0,3085,3086,1,0,0,0,3086,621,1,0,0,0,3087,3088,5,163,
        0,0,3088,3089,3,70,35,0,3089,623,1,0,0,0,3090,3091,5,323,0,0,3091,
        3092,3,70,35,0,3092,625,1,0,0,0,3093,3094,3,154,77,0,3094,3095,5,
        7,0,0,3095,627,1,0,0,0,3096,3097,5,292,0,0,3097,3098,3,1022,511,
        0,3098,629,1,0,0,0,3099,3100,3,632,316,0,3100,631,1,0,0,0,3101,3106,
        3,634,317,0,3102,3103,5,5,0,0,3103,3105,3,634,317,0,3104,3102,1,
        0,0,0,3105,3108,1,0,0,0,3106,3104,1,0,0,0,3106,3107,1,0,0,0,3107,
        633,1,0,0,0,3108,3106,1,0,0,0,3109,3115,3,636,318,0,3110,3111,3,
        638,319,0,3111,3112,3,636,318,0,3112,3114,1,0,0,0,3113,3110,1,0,
        0,0,3114,3117,1,0,0,0,3115,3113,1,0,0,0,3115,3116,1,0,0,0,3116,635,
        1,0,0,0,3117,3115,1,0,0,0,3118,3120,5,12,0,0,3119,3121,3,646,323,
        0,3120,3119,1,0,0,0,3120,3121,1,0,0,0,3121,3122,1,0,0,0,3122,3123,
        5,22,0,0,3123,637,1,0,0,0,3124,3128,3,640,320,0,3125,3128,3,642,
        321,0,3126,3128,3,644,322,0,3127,3124,1,0,0,0,3127,3125,1,0,0,0,
        3127,3126,1,0,0,0,3128,639,1,0,0,0,3129,3130,5,13,0,0,3130,3131,
        5,14,0,0,3131,3133,5,11,0,0,3132,3134,3,646,323,0,3133,3132,1,0,
        0,0,3133,3134,1,0,0,0,3134,3135,1,0,0,0,3135,3136,5,21,0,0,3136,
        3137,5,14,0,0,3137,641,1,0,0,0,3138,3139,5,14,0,0,3139,3141,5,11,
        0,0,3140,3142,3,646,323,0,3141,3140,1,0,0,0,3141,3142,1,0,0,0,3142,
        3143,1,0,0,0,3143,3144,5,21,0,0,3144,3145,5,371,0,0,3145,643,1,0,
        0,0,3146,3147,7,19,0,0,3147,3149,5,11,0,0,3148,3150,3,646,323,0,
        3149,3148,1,0,0,0,3149,3150,1,0,0,0,3150,3151,1,0,0,0,3151,3152,
        5,21,0,0,3152,3153,7,19,0,0,3153,645,1,0,0,0,3154,3155,3,544,272,
        0,3155,3156,3,648,324,0,3156,3160,1,0,0,0,3157,3160,3,544,272,0,
        3158,3160,3,648,324,0,3159,3154,1,0,0,0,3159,3157,1,0,0,0,3159,3158,
        1,0,0,0,3160,647,1,0,0,0,3161,3162,3,548,274,0,3162,3163,3,278,139,
        0,3163,3170,1,0,0,0,3164,3165,3,548,274,0,3165,3166,3,278,139,0,
        3166,3167,3,552,276,0,3167,3170,1,0,0,0,3168,3170,3,552,276,0,3169,
        3161,1,0,0,0,3169,3164,1,0,0,0,3169,3168,1,0,0,0,3170,649,1,0,0,
        0,3171,3176,3,652,326,0,3172,3173,5,27,0,0,3173,3175,3,652,326,0,
        3174,3172,1,0,0,0,3175,3178,1,0,0,0,3176,3174,1,0,0,0,3176,3177,
        1,0,0,0,3177,651,1,0,0,0,3178,3176,1,0,0,0,3179,3184,3,654,327,0,
        3180,3181,5,1,0,0,3181,3183,3,654,327,0,3182,3180,1,0,0,0,3183,3186,
        1,0,0,0,3184,3182,1,0,0,0,3184,3185,1,0,0,0,3185,653,1,0,0,0,3186,
        3184,1,0,0,0,3187,3189,5,8,0,0,3188,3187,1,0,0,0,3188,3189,1,0,0,
        0,3189,3190,1,0,0,0,3190,3191,3,656,328,0,3191,655,1,0,0,0,3192,
        3196,3,132,66,0,3193,3196,3,658,329,0,3194,3196,3,660,330,0,3195,
        3192,1,0,0,0,3195,3193,1,0,0,0,3195,3194,1,0,0,0,3196,657,1,0,0,
        0,3197,3198,5,15,0,0,3198,659,1,0,0,0,3199,3200,5,12,0,0,3200,3201,
        3,650,325,0,3201,3202,5,22,0,0,3202,661,1,0,0,0,3203,3208,5,2,0,
        0,3204,3208,5,17,0,0,3205,3208,3,664,332,0,3206,3208,3,666,333,0,
        3207,3203,1,0,0,0,3207,3204,1,0,0,0,3207,3205,1,0,0,0,3207,3206,
        1,0,0,0,3208,663,1,0,0,0,3209,3210,5,10,0,0,3210,3211,3,1118,559,
        0,3211,3212,5,20,0,0,3212,665,1,0,0,0,3213,3215,5,10,0,0,3214,3216,
        3,668,334,0,3215,3214,1,0,0,0,3215,3216,1,0,0,0,3216,3217,1,0,0,
        0,3217,3219,5,5,0,0,3218,3220,3,670,335,0,3219,3218,1,0,0,0,3219,
        3220,1,0,0,0,3220,3221,1,0,0,0,3221,3222,5,20,0,0,3222,667,1,0,0,
        0,3223,3224,3,1118,559,0,3224,669,1,0,0,0,3225,3226,3,1118,559,0,
        3226,671,1,0,0,0,3227,3235,3,674,337,0,3228,3235,3,676,338,0,3229,
        3235,3,678,339,0,3230,3235,3,680,340,0,3231,3235,3,682,341,0,3232,
        3235,3,684,342,0,3233,3235,3,686,343,0,3234,3227,1,0,0,0,3234,3228,
        1,0,0,0,3234,3229,1,0,0,0,3234,3230,1,0,0,0,3234,3231,1,0,0,0,3234,
        3232,1,0,0,0,3234,3233,1,0,0,0,3235,673,1,0,0,0,3236,3237,5,365,
        0,0,3237,3238,3,688,344,0,3238,3239,5,24,0,0,3239,3240,5,14,0,0,
        3240,675,1,0,0,0,3241,3242,5,377,0,0,3242,3243,3,688,344,0,3243,
        3244,5,24,0,0,3244,3245,5,25,0,0,3245,677,1,0,0,0,3246,3247,5,369,
        0,0,3247,3248,3,688,344,0,3248,3249,5,374,0,0,3249,679,1,0,0,0,3250,
        3251,5,367,0,0,3251,3252,3,688,344,0,3252,3253,5,24,0,0,3253,3254,
        5,25,0,0,3254,681,1,0,0,0,3255,3256,5,377,0,0,3256,3257,3,688,344,
        0,3257,3258,5,375,0,0,3258,683,1,0,0,0,3259,3260,5,365,0,0,3260,
        3261,3,688,344,0,3261,3262,5,374,0,0,3262,685,1,0,0,0,3263,3264,
        5,369,0,0,3264,3265,3,688,344,0,3265,3266,5,24,0,0,3266,3267,5,14,
        0,0,3267,687,1,0,0,0,3268,3272,3,694,347,0,3269,3272,3,690,345,0,
        3270,3272,3,692,346,0,3271,3268,1,0,0,0,3271,3269,1,0,0,0,3271,3270,
        1,0,0,0,3272,689,1,0,0,0,3273,3274,3,694,347,0,3274,3275,5,27,0,
        0,3275,3280,3,694,347,0,3276,3277,5,27,0,0,3277,3279,3,694,347,0,
        3278,3276,1,0,0,0,3279,3282,1,0,0,0,3280,3278,1,0,0,0,3280,3281,
        1,0,0,0,3281,691,1,0,0,0,3282,3280,1,0,0,0,3283,3284,3,694,347,0,
        3284,3285,5,358,0,0,3285,3290,3,694,347,0,3286,3287,5,358,0,0,3287,
        3289,3,694,347,0,3288,3286,1,0,0,0,3289,3292,1,0,0,0,3290,3288,1,
        0,0,0,3290,3291,1,0,0,0,3291,693,1,0,0,0,3292,3290,1,0,0,0,3293,
        3295,3,696,348,0,3294,3293,1,0,0,0,3295,3296,1,0,0,0,3296,3294,1,
        0,0,0,3296,3297,1,0,0,0,3297,695,1,0,0,0,3298,3303,3,698,349,0,3299,
        3300,5,1,0,0,3300,3302,3,698,349,0,3301,3299,1,0,0,0,3302,3305,1,
        0,0,0,3303,3301,1,0,0,0,3303,3304,1,0,0,0,3304,697,1,0,0,0,3305,
        3303,1,0,0,0,3306,3310,3,704,352,0,3307,3310,3,700,350,0,3308,3310,
        3,702,351,0,3309,3306,1,0,0,0,3309,3307,1,0,0,0,3309,3308,1,0,0,
        0,3310,699,1,0,0,0,3311,3312,3,704,352,0,3312,3313,3,662,331,0,3313,
        701,1,0,0,0,3314,3315,3,704,352,0,3315,3316,5,18,0,0,3316,703,1,
        0,0,0,3317,3320,3,706,353,0,3318,3320,3,722,361,0,3319,3317,1,0,
        0,0,3319,3318,1,0,0,0,3320,705,1,0,0,0,3321,3329,3,708,354,0,3322,
        3329,3,710,355,0,3323,3329,3,712,356,0,3324,3329,3,714,357,0,3325,
        3329,3,716,358,0,3326,3329,3,718,359,0,3327,3329,3,720,360,0,3328,
        3321,1,0,0,0,3328,3322,1,0,0,0,3328,3323,1,0,0,0,3328,3324,1,0,0,
        0,3328,3325,1,0,0,0,3328,3326,1,0,0,0,3328,3327,1,0,0,0,3329,707,
        1,0,0,0,3330,3331,5,13,0,0,3331,3332,3,722,361,0,3332,709,1,0,0,
        0,3333,3334,5,25,0,0,3334,3335,3,722,361,0,3335,711,1,0,0,0,3336,
        3337,3,722,361,0,3337,3338,5,9,0,0,3338,713,1,0,0,0,3339,3340,5,
        13,0,0,3340,3341,5,25,0,0,3341,3342,3,722,361,0,3342,715,1,0,0,0,
        3343,3344,5,25,0,0,3344,3345,3,722,361,0,3345,3346,5,9,0,0,3346,
        717,1,0,0,0,3347,3348,5,13,0,0,3348,3349,3,722,361,0,3349,3350,5,
        9,0,0,3350,719,1,0,0,0,3351,3352,5,14,0,0,3352,3353,3,722,361,0,
        3353,721,1,0,0,0,3354,3357,3,726,363,0,3355,3357,3,724,362,0,3356,
        3354,1,0,0,0,3356,3355,1,0,0,0,3357,723,1,0,0,0,3358,3359,5,8,0,
        0,3359,3360,3,726,363,0,3360,725,1,0,0,0,3361,3367,3,132,66,0,3362,
        3363,5,12,0,0,3363,3364,3,688,344,0,3364,3365,5,22,0,0,3365,3367,
        1,0,0,0,3366,3361,1,0,0,0,3366,3362,1,0,0,0,3367,727,1,0,0,0,3368,
        3369,5,292,0,0,3369,3370,3,1022,511,0,3370,729,1,0,0,0,3371,3372,
        5,297,0,0,3372,3373,3,732,366,0,3373,731,1,0,0,0,3374,3379,3,734,
        367,0,3375,3376,5,5,0,0,3376,3378,3,734,367,0,3377,3375,1,0,0,0,
        3378,3381,1,0,0,0,3379,3377,1,0,0,0,3379,3380,1,0,0,0,3380,733,1,
        0,0,0,3381,3379,1,0,0,0,3382,3384,3,736,368,0,3383,3385,3,738,369,
        0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,3385,735,1,0,0,0,3386,3387,
        3,138,69,0,3387,737,1,0,0,0,3388,3389,5,37,0,0,3389,3390,3,160,80,
        0,3390,739,1,0,0,0,3391,3392,5,123,0,0,3392,3393,5,54,0,0,3393,3394,
        3,742,371,0,3394,741,1,0,0,0,3395,3400,3,744,372,0,3396,3397,5,5,
        0,0,3397,3399,3,744,372,0,3398,3396,1,0,0,0,3399,3402,1,0,0,0,3400,
        3398,1,0,0,0,3400,3401,1,0,0,0,3401,3405,1,0,0,0,3402,3400,1,0,0,
        0,3403,3405,3,746,373,0,3404,3395,1,0,0,0,3404,3403,1,0,0,0,3405,
        743,1,0,0,0,3406,3407,3,1022,511,0,3407,745,1,0,0,0,3408,3409,5,
        12,0,0,3409,3410,5,22,0,0,3410,747,1,0,0,0,3411,3412,5,203,0,0,3412,
        3413,5,54,0,0,3413,3414,3,762,381,0,3414,749,1,0,0,0,3415,3416,5,
        75,0,0,3416,3417,5,12,0,0,3417,3418,5,2,0,0,3418,3479,5,22,0,0,3419,
        3420,5,75,0,0,3420,3421,5,12,0,0,3421,3422,5,96,0,0,3422,3425,3,
        1022,511,0,3423,3424,5,5,0,0,3424,3426,3,1022,511,0,3425,3423,1,
        0,0,0,3426,3427,1,0,0,0,3427,3425,1,0,0,0,3427,3428,1,0,0,0,3428,
        3429,1,0,0,0,3429,3430,5,22,0,0,3430,3479,1,0,0,0,3431,3432,3,752,
        376,0,3432,3434,5,12,0,0,3433,3435,3,754,377,0,3434,3433,1,0,0,0,
        3434,3435,1,0,0,0,3435,3436,1,0,0,0,3436,3437,3,1022,511,0,3437,
        3438,5,22,0,0,3438,3479,1,0,0,0,3439,3440,3,756,378,0,3440,3442,
        5,12,0,0,3441,3443,3,754,377,0,3442,3441,1,0,0,0,3442,3443,1,0,0,
        0,3443,3444,1,0,0,0,3444,3445,3,1022,511,0,3445,3446,5,5,0,0,3446,
        3447,3,1022,511,0,3447,3448,5,22,0,0,3448,3479,1,0,0,0,3449,3452,
        3,752,376,0,3450,3452,3,758,379,0,3451,3449,1,0,0,0,3451,3450,1,
        0,0,0,3452,3453,1,0,0,0,3453,3458,5,12,0,0,3454,3456,3,754,377,0,
        3455,3454,1,0,0,0,3455,3456,1,0,0,0,3456,3457,1,0,0,0,3457,3459,
        3,1022,511,0,3458,3455,1,0,0,0,3458,3459,1,0,0,0,3459,3460,1,0,0,
        0,3460,3461,5,22,0,0,3461,3462,3,760,380,0,3462,3479,1,0,0,0,3463,
        3464,3,752,376,0,3464,3465,5,12,0,0,3465,3466,3,1022,511,0,3466,
        3467,5,96,0,0,3467,3468,5,54,0,0,3468,3473,3,1022,511,0,3469,3470,
        5,5,0,0,3470,3472,3,1022,511,0,3471,3469,1,0,0,0,3472,3475,1,0,0,
        0,3473,3471,1,0,0,0,3473,3474,1,0,0,0,3474,3476,1,0,0,0,3475,3473,
        1,0,0,0,3476,3477,5,22,0,0,3477,3479,1,0,0,0,3478,3415,1,0,0,0,3478,
        3419,1,0,0,0,3478,3431,1,0,0,0,3478,3439,1,0,0,0,3478,3451,1,0,0,
        0,3478,3463,1,0,0,0,3479,751,1,0,0,0,3480,3481,7,20,0,0,3481,753,
        1,0,0,0,3482,3483,7,21,0,0,3483,755,1,0,0,0,3484,3485,7,22,0,0,3485,
        757,1,0,0,0,3486,3487,7,23,0,0,3487,759,1,0,0,0,3488,3489,5,312,
        0,0,3489,3490,5,12,0,0,3490,3491,5,306,0,0,3491,3492,5,54,0,0,3492,
        3497,3,1026,513,0,3493,3494,5,5,0,0,3494,3496,3,1026,513,0,3495,
        3493,1,0,0,0,3496,3499,1,0,0,0,3497,3495,1,0,0,0,3497,3498,1,0,0,
        0,3498,3501,1,0,0,0,3499,3497,1,0,0,0,3500,3502,3,748,374,0,3501,
        3500,1,0,0,0,3501,3502,1,0,0,0,3502,3503,1,0,0,0,3503,3504,5,22,
        0,0,3504,761,1,0,0,0,3505,3510,3,764,382,0,3506,3507,5,5,0,0,3507,
        3509,3,764,382,0,3508,3506,1,0,0,0,3509,3512,1,0,0,0,3510,3508,1,
        0,0,0,3510,3511,1,0,0,0,3511,763,1,0,0,0,3512,3510,1,0,0,0,3513,
        3515,3,766,383,0,3514,3516,3,768,384,0,3515,3514,1,0,0,0,3515,3516,
        1,0,0,0,3516,3518,1,0,0,0,3517,3519,3,770,385,0,3518,3517,1,0,0,
        0,3518,3519,1,0,0,0,3519,765,1,0,0,0,3520,3521,3,1022,511,0,3521,
        767,1,0,0,0,3522,3523,7,24,0,0,3523,769,1,0,0,0,3524,3525,5,195,
        0,0,3525,3529,5,112,0,0,3526,3527,5,195,0,0,3527,3529,5,159,0,0,
        3528,3524,1,0,0,0,3528,3526,1,0,0,0,3529,771,1,0,0,0,3530,3531,5,
        166,0,0,3531,3532,3,1118,559,0,3532,773,1,0,0,0,3533,3534,3,776,
        388,0,3534,3535,3,1118,559,0,3535,775,1,0,0,0,3536,3537,7,25,0,0,
        3537,777,1,0,0,0,3538,3539,5,10,0,0,3539,3540,3,780,390,0,3540,3541,
        5,20,0,0,3541,779,1,0,0,0,3542,3543,3,782,391,0,3543,781,1,0,0,0,
        3544,3549,3,784,392,0,3545,3546,5,5,0,0,3546,3548,3,784,392,0,3547,
        3545,1,0,0,0,3548,3551,1,0,0,0,3549,3547,1,0,0,0,3549,3550,1,0,0,
        0,3550,783,1,0,0,0,3551,3549,1,0,0,0,3552,3555,3,786,393,0,3553,
        3555,3,800,400,0,3554,3552,1,0,0,0,3554,3553,1,0,0,0,3555,785,1,
        0,0,0,3556,3560,3,788,394,0,3557,3558,5,326,0,0,3558,3560,3,790,
        395,0,3559,3556,1,0,0,0,3559,3557,1,0,0,0,3560,787,1,0,0,0,3561,
        3563,5,12,0,0,3562,3564,3,792,396,0,3563,3562,1,0,0,0,3563,3564,
        1,0,0,0,3564,3566,1,0,0,0,3565,3567,3,794,397,0,3566,3565,1,0,0,
        0,3566,3567,1,0,0,0,3567,3568,1,0,0,0,3568,3569,5,22,0,0,3569,789,
        1,0,0,0,3570,3572,5,269,0,0,3571,3570,1,0,0,0,3571,3572,1,0,0,0,
        3572,3573,1,0,0,0,3573,3575,3,792,396,0,3574,3576,3,794,397,0,3575,
        3574,1,0,0,0,3575,3576,1,0,0,0,3576,3579,1,0,0,0,3577,3579,3,794,
        397,0,3578,3571,1,0,0,0,3578,3577,1,0,0,0,3579,791,1,0,0,0,3580,
        3581,3,124,62,0,3581,793,1,0,0,0,3582,3588,3,796,398,0,3583,3588,
        3,798,399,0,3584,3585,3,796,398,0,3585,3586,3,798,399,0,3586,3588,
        1,0,0,0,3587,3582,1,0,0,0,3587,3583,1,0,0,0,3587,3584,1,0,0,0,3588,
        795,1,0,0,0,3589,3590,3,864,432,0,3590,797,1,0,0,0,3591,3592,3,866,
        433,0,3592,799,1,0,0,0,3593,3600,3,802,401,0,3594,3596,3,844,422,
        0,3595,3594,1,0,0,0,3595,3596,1,0,0,0,3596,3597,1,0,0,0,3597,3598,
        5,324,0,0,3598,3600,3,804,402,0,3599,3593,1,0,0,0,3599,3595,1,0,
        0,0,3600,801,1,0,0,0,3601,3604,3,814,407,0,3602,3604,3,830,415,0,
        3603,3601,1,0,0,0,3603,3602,1,0,0,0,3604,803,1,0,0,0,3605,3607,5,
        269,0,0,3606,3605,1,0,0,0,3606,3607,1,0,0,0,3607,3608,1,0,0,0,3608,
        3612,3,806,403,0,3609,3610,3,808,404,0,3610,3611,3,846,423,0,3611,
        3613,1,0,0,0,3612,3609,1,0,0,0,3612,3613,1,0,0,0,3613,3618,1,0,0,
        0,3614,3615,3,808,404,0,3615,3616,3,846,423,0,3616,3618,1,0,0,0,
        3617,3606,1,0,0,0,3617,3614,1,0,0,0,3618,805,1,0,0,0,3619,3620,3,
        124,62,0,3620,807,1,0,0,0,3621,3627,3,810,405,0,3622,3627,3,812,
        406,0,3623,3624,3,810,405,0,3624,3625,3,812,406,0,3625,3627,1,0,
        0,0,3626,3621,1,0,0,0,3626,3622,1,0,0,0,3626,3623,1,0,0,0,3627,809,
        1,0,0,0,3628,3629,3,864,432,0,3629,811,1,0,0,0,3630,3631,3,866,433,
        0,3631,813,1,0,0,0,3632,3636,3,816,408,0,3633,3636,3,818,409,0,3634,
        3636,3,820,410,0,3635,3632,1,0,0,0,3635,3633,1,0,0,0,3635,3634,1,
        0,0,0,3636,815,1,0,0,0,3637,3638,3,840,420,0,3638,3639,3,822,411,
        0,3639,3640,3,842,421,0,3640,817,1,0,0,0,3641,3642,3,842,421,0,3642,
        3643,3,824,412,0,3643,3644,3,840,420,0,3644,819,1,0,0,0,3645,3646,
        3,840,420,0,3646,3647,3,826,413,0,3647,3648,3,842,421,0,3648,821,
        1,0,0,0,3649,3650,5,14,0,0,3650,3651,5,11,0,0,3651,3652,3,828,414,
        0,3652,3653,5,21,0,0,3653,3654,5,371,0,0,3654,823,1,0,0,0,3655,3656,
        5,13,0,0,3656,3657,5,14,0,0,3657,3658,5,11,0,0,3658,3659,3,828,414,
        0,3659,3660,5,21,0,0,3660,3661,5,14,0,0,3661,825,1,0,0,0,3662,3663,
        5,25,0,0,3663,3664,5,11,0,0,3664,3665,3,828,414,0,3665,3666,5,21,
        0,0,3666,3667,5,25,0,0,3667,827,1,0,0,0,3668,3670,3,806,403,0,3669,
        3668,1,0,0,0,3669,3670,1,0,0,0,3670,3672,1,0,0,0,3671,3673,3,808,
        404,0,3672,3671,1,0,0,0,3672,3673,1,0,0,0,3673,829,1,0,0,0,3674,
        3678,3,832,416,0,3675,3678,3,834,417,0,3676,3678,3,836,418,0,3677,
        3674,1,0,0,0,3677,3675,1,0,0,0,3677,3676,1,0,0,0,3678,831,1,0,0,
        0,3679,3680,3,840,420,0,3680,3681,5,371,0,0,3681,3682,3,842,421,
        0,3682,833,1,0,0,0,3683,3684,3,842,421,0,3684,3685,5,13,0,0,3685,
        3686,5,14,0,0,3686,3687,3,840,420,0,3687,835,1,0,0,0,3688,3689,3,
        840,420,0,3689,3690,5,25,0,0,3690,3691,3,842,421,0,3691,837,1,0,
        0,0,3692,3695,3,840,420,0,3693,3695,3,842,421,0,3694,3692,1,0,0,
        0,3694,3693,1,0,0,0,3695,839,1,0,0,0,3696,3697,5,12,0,0,3697,3698,
        3,860,430,0,3698,3699,5,22,0,0,3699,3706,1,0,0,0,3700,3702,5,12,
        0,0,3701,3703,3,794,397,0,3702,3701,1,0,0,0,3702,3703,1,0,0,0,3703,
        3704,1,0,0,0,3704,3706,5,22,0,0,3705,3696,1,0,0,0,3705,3700,1,0,
        0,0,3706,841,1,0,0,0,3707,3708,5,12,0,0,3708,3709,3,862,431,0,3709,
        3710,5,22,0,0,3710,3717,1,0,0,0,3711,3713,5,12,0,0,3712,3714,3,794,
        397,0,3713,3712,1,0,0,0,3713,3714,1,0,0,0,3714,3715,1,0,0,0,3715,
        3717,5,22,0,0,3716,3707,1,0,0,0,3716,3711,1,0,0,0,3717,843,1,0,0,
        0,3718,3719,7,26,0,0,3719,845,1,0,0,0,3720,3721,5,70,0,0,3721,3722,
        3,848,424,0,3722,847,1,0,0,0,3723,3728,3,850,425,0,3724,3728,3,852,
        426,0,3725,3728,3,854,427,0,3726,3728,3,830,415,0,3727,3723,1,0,
        0,0,3727,3724,1,0,0,0,3727,3725,1,0,0,0,3727,3726,1,0,0,0,3728,849,
        1,0,0,0,3729,3730,5,12,0,0,3730,3731,3,860,430,0,3731,3732,3,856,
        428,0,3732,3733,3,862,431,0,3733,3734,5,22,0,0,3734,851,1,0,0,0,
        3735,3736,5,12,0,0,3736,3737,3,862,431,0,3737,3738,5,13,0,0,3738,
        3739,5,14,0,0,3739,3740,3,860,430,0,3740,3741,5,22,0,0,3741,853,
        1,0,0,0,3742,3743,5,12,0,0,3743,3744,3,860,430,0,3744,3745,3,858,
        429,0,3745,3746,3,862,431,0,3746,3747,5,22,0,0,3747,855,1,0,0,0,
        3748,3749,7,27,0,0,3749,857,1,0,0,0,3750,3751,7,28,0,0,3751,859,
        1,0,0,0,3752,3753,3,124,62,0,3753,861,1,0,0,0,3754,3755,3,124,62,
        0,3755,863,1,0,0,0,3756,3757,5,156,0,0,3757,3764,3,132,66,0,3758,
        3759,5,158,0,0,3759,3764,3,278,139,0,3760,3761,3,548,274,0,3761,
        3762,3,278,139,0,3762,3764,1,0,0,0,3763,3756,1,0,0,0,3763,3758,1,
        0,0,0,3763,3760,1,0,0,0,3764,865,1,0,0,0,3765,3767,5,10,0,0,3766,
        3768,3,868,434,0,3767,3766,1,0,0,0,3767,3768,1,0,0,0,3768,3769,1,
        0,0,0,3769,3770,5,20,0,0,3770,867,1,0,0,0,3771,3776,3,870,435,0,
        3772,3773,5,5,0,0,3773,3775,3,870,435,0,3774,3772,1,0,0,0,3775,3778,
        1,0,0,0,3776,3774,1,0,0,0,3776,3777,1,0,0,0,3777,869,1,0,0,0,3778,
        3776,1,0,0,0,3779,3781,3,136,68,0,3780,3782,3,878,439,0,3781,3780,
        1,0,0,0,3781,3782,1,0,0,0,3782,3783,1,0,0,0,3783,3784,3,872,436,
        0,3784,871,1,0,0,0,3785,3786,3,876,438,0,3786,873,1,0,0,0,3787,3789,
        5,48,0,0,3788,3787,1,0,0,0,3788,3789,1,0,0,0,3789,3790,1,0,0,0,3790,
        3791,5,255,0,0,3791,3792,3,958,479,0,3792,875,1,0,0,0,3793,3794,
        6,438,-1,0,3794,3854,3,880,440,0,3795,3854,3,962,481,0,3796,3797,
        3,954,477,0,3797,3798,5,13,0,0,3798,3799,3,876,438,0,3799,3804,5,
        9,0,0,3800,3801,5,11,0,0,3801,3802,3,890,445,0,3802,3803,5,21,0,
        0,3803,3805,1,0,0,0,3804,3800,1,0,0,0,3804,3805,1,0,0,0,3805,3807,
        1,0,0,0,3806,3808,3,964,482,0,3807,3806,1,0,0,0,3807,3808,1,0,0,
        0,3808,3854,1,0,0,0,3809,3811,5,35,0,0,3810,3809,1,0,0,0,3810,3811,
        1,0,0,0,3811,3812,1,0,0,0,3812,3814,5,224,0,0,3813,3815,3,964,482,
        0,3814,3813,1,0,0,0,3814,3815,1,0,0,0,3815,3854,1,0,0,0,3816,3818,
        5,224,0,0,3817,3816,1,0,0,0,3817,3818,1,0,0,0,3818,3819,1,0,0,0,
        3819,3821,3,958,479,0,3820,3822,3,964,482,0,3821,3820,1,0,0,0,3821,
        3822,1,0,0,0,3822,3854,1,0,0,0,3823,3825,5,35,0,0,3824,3826,5,286,
        0,0,3825,3824,1,0,0,0,3825,3826,1,0,0,0,3826,3828,1,0,0,0,3827,3829,
        3,964,482,0,3828,3827,1,0,0,0,3828,3829,1,0,0,0,3829,3854,1,0,0,
        0,3830,3832,5,35,0,0,3831,3830,1,0,0,0,3831,3832,1,0,0,0,3832,3833,
        1,0,0,0,3833,3834,5,218,0,0,3834,3836,5,286,0,0,3835,3837,3,964,
        482,0,3836,3835,1,0,0,0,3836,3837,1,0,0,0,3837,3854,1,0,0,0,3838,
        3840,5,35,0,0,3839,3841,5,286,0,0,3840,3839,1,0,0,0,3840,3841,1,
        0,0,0,3841,3842,1,0,0,0,3842,3843,5,13,0,0,3843,3848,3,876,438,0,
        3844,3845,5,27,0,0,3845,3847,3,876,438,0,3846,3844,1,0,0,0,3847,
        3850,1,0,0,0,3848,3846,1,0,0,0,3848,3849,1,0,0,0,3849,3851,1,0,0,
        0,3850,3848,1,0,0,0,3851,3852,5,9,0,0,3852,3854,1,0,0,0,3853,3793,
        1,0,0,0,3853,3795,1,0,0,0,3853,3796,1,0,0,0,3853,3810,1,0,0,0,3853,
        3817,1,0,0,0,3853,3823,1,0,0,0,3853,3831,1,0,0,0,3853,3838,1,0,0,
        0,3854,3875,1,0,0,0,3855,3856,10,7,0,0,3856,3861,3,954,477,0,3857,
        3858,5,11,0,0,3858,3859,3,890,445,0,3859,3860,5,21,0,0,3860,3862,
        1,0,0,0,3861,3857,1,0,0,0,3861,3862,1,0,0,0,3862,3864,1,0,0,0,3863,
        3865,3,964,482,0,3864,3863,1,0,0,0,3864,3865,1,0,0,0,3865,3874,1,
        0,0,0,3866,3869,10,1,0,0,3867,3868,5,27,0,0,3868,3870,3,876,438,
        0,3869,3867,1,0,0,0,3870,3871,1,0,0,0,3871,3869,1,0,0,0,3871,3872,
        1,0,0,0,3872,3874,1,0,0,0,3873,3855,1,0,0,0,3873,3866,1,0,0,0,3874,
        3877,1,0,0,0,3875,3873,1,0,0,0,3875,3876,1,0,0,0,3876,877,1,0,0,
        0,3877,3875,1,0,0,0,3878,3879,7,29,0,0,3879,879,1,0,0,0,3880,3887,
        3,882,441,0,3881,3887,3,884,442,0,3882,3887,3,886,443,0,3883,3887,
        3,894,447,0,3884,3887,3,914,457,0,3885,3887,3,932,466,0,3886,3880,
        1,0,0,0,3886,3881,1,0,0,0,3886,3882,1,0,0,0,3886,3883,1,0,0,0,3886,
        3884,1,0,0,0,3886,3885,1,0,0,0,3887,881,1,0,0,0,3888,3890,7,30,0,
        0,3889,3891,3,964,482,0,3890,3889,1,0,0,0,3890,3891,1,0,0,0,3891,
        883,1,0,0,0,3892,3897,7,31,0,0,3893,3894,5,12,0,0,3894,3895,3,890,
        445,0,3895,3896,5,22,0,0,3896,3898,1,0,0,0,3897,3893,1,0,0,0,3897,
        3898,1,0,0,0,3898,3900,1,0,0,0,3899,3901,3,964,482,0,3900,3899,1,
        0,0,0,3900,3901,1,0,0,0,3901,885,1,0,0,0,3902,3912,5,56,0,0,3903,
        3907,5,12,0,0,3904,3905,3,888,444,0,3905,3906,5,5,0,0,3906,3908,
        1,0,0,0,3907,3904,1,0,0,0,3907,3908,1,0,0,0,3908,3909,1,0,0,0,3909,
        3910,3,890,445,0,3910,3911,5,22,0,0,3911,3913,1,0,0,0,3912,3903,
        1,0,0,0,3912,3913,1,0,0,0,3913,3915,1,0,0,0,3914,3916,3,964,482,
        0,3915,3914,1,0,0,0,3915,3916,1,0,0,0,3916,3938,1,0,0,0,3917,3922,
        5,47,0,0,3918,3919,5,12,0,0,3919,3920,3,892,446,0,3920,3921,5,22,
        0,0,3921,3923,1,0,0,0,3922,3918,1,0,0,0,3922,3923,1,0,0,0,3923,3925,
        1,0,0,0,3924,3926,3,964,482,0,3925,3924,1,0,0,0,3925,3926,1,0,0,
        0,3926,3938,1,0,0,0,3927,3932,5,287,0,0,3928,3929,5,12,0,0,3929,
        3930,3,890,445,0,3930,3931,5,22,0,0,3931,3933,1,0,0,0,3932,3928,
        1,0,0,0,3932,3933,1,0,0,0,3933,3935,1,0,0,0,3934,3936,3,964,482,
        0,3935,3934,1,0,0,0,3935,3936,1,0,0,0,3936,3938,1,0,0,0,3937,3902,
        1,0,0,0,3937,3917,1,0,0,0,3937,3927,1,0,0,0,3938,887,1,0,0,0,3939,
        3940,5,392,0,0,3940,889,1,0,0,0,3941,3942,5,392,0,0,3942,891,1,0,
        0,0,3943,3944,5,392,0,0,3944,893,1,0,0,0,3945,3948,3,896,448,0,3946,
        3948,3,912,456,0,3947,3945,1,0,0,0,3947,3946,1,0,0,0,3948,895,1,
        0,0,0,3949,3952,3,898,449,0,3950,3952,3,906,453,0,3951,3949,1,0,
        0,0,3951,3950,1,0,0,0,3952,897,1,0,0,0,3953,3956,3,900,450,0,3954,
        3956,3,902,451,0,3955,3953,1,0,0,0,3955,3954,1,0,0,0,3956,899,1,
        0,0,0,3957,3959,5,140,0,0,3958,3960,3,964,482,0,3959,3958,1,0,0,
        0,3959,3960,1,0,0,0,3960,4008,1,0,0,0,3961,3963,5,141,0,0,3962,3964,
        3,964,482,0,3963,3962,1,0,0,0,3963,3964,1,0,0,0,3964,4008,1,0,0,
        0,3965,3967,5,142,0,0,3966,3968,3,964,482,0,3967,3966,1,0,0,0,3967,
        3968,1,0,0,0,3968,4008,1,0,0,0,3969,3971,5,143,0,0,3970,3972,3,964,
        482,0,3971,3970,1,0,0,0,3971,3972,1,0,0,0,3972,4008,1,0,0,0,3973,
        3975,5,144,0,0,3974,3976,3,964,482,0,3975,3974,1,0,0,0,3975,3976,
        1,0,0,0,3976,4008,1,0,0,0,3977,3979,5,145,0,0,3978,3980,3,964,482,
        0,3979,3978,1,0,0,0,3979,3980,1,0,0,0,3980,4008,1,0,0,0,3981,3983,
        5,246,0,0,3982,3984,3,964,482,0,3983,3982,1,0,0,0,3983,3984,1,0,
        0,0,3984,4008,1,0,0,0,3985,3990,5,139,0,0,3986,3987,5,12,0,0,3987,
        3988,3,908,454,0,3988,3989,5,22,0,0,3989,3991,1,0,0,0,3990,3986,
        1,0,0,0,3990,3991,1,0,0,0,3991,3993,1,0,0,0,3992,3994,3,964,482,
        0,3993,3992,1,0,0,0,3993,3994,1,0,0,0,3994,4008,1,0,0,0,3995,4008,
        5,46,0,0,3996,3998,5,240,0,0,3997,3996,1,0,0,0,3997,3998,1,0,0,0,
        3998,3999,1,0,0,0,3999,4001,3,904,452,0,4000,4002,3,964,482,0,4001,
        4000,1,0,0,0,4001,4002,1,0,0,0,4002,4008,1,0,0,0,4003,4005,5,175,
        0,0,4004,4006,3,964,482,0,4005,4004,1,0,0,0,4005,4006,1,0,0,0,4006,
        4008,1,0,0,0,4007,3957,1,0,0,0,4007,3961,1,0,0,0,4007,3965,1,0,0,
        0,4007,3969,1,0,0,0,4007,3973,1,0,0,0,4007,3977,1,0,0,0,4007,3981,
        1,0,0,0,4007,3985,1,0,0,0,4007,3995,1,0,0,0,4007,3997,1,0,0,0,4007,
        4003,1,0,0,0,4008,901,1,0,0,0,4009,4011,5,278,0,0,4010,4012,3,964,
        482,0,4011,4010,1,0,0,0,4011,4012,1,0,0,0,4012,4057,1,0,0,0,4013,
        4015,5,274,0,0,4014,4016,3,964,482,0,4015,4014,1,0,0,0,4015,4016,
        1,0,0,0,4016,4057,1,0,0,0,4017,4019,5,276,0,0,4018,4020,3,964,482,
        0,4019,4018,1,0,0,0,4019,4020,1,0,0,0,4020,4057,1,0,0,0,4021,4023,
        5,277,0,0,4022,4024,3,964,482,0,4023,4022,1,0,0,0,4023,4024,1,0,
        0,0,4024,4057,1,0,0,0,4025,4027,5,273,0,0,4026,4028,3,964,482,0,
        4027,4026,1,0,0,0,4027,4028,1,0,0,0,4028,4057,1,0,0,0,4029,4031,
        5,275,0,0,4030,4032,3,964,482,0,4031,4030,1,0,0,0,4031,4032,1,0,
        0,0,4032,4057,1,0,0,0,4033,4035,5,285,0,0,4034,4036,3,964,482,0,
        4035,4034,1,0,0,0,4035,4036,1,0,0,0,4036,4057,1,0,0,0,4037,4042,
        5,272,0,0,4038,4039,5,12,0,0,4039,4040,3,908,454,0,4040,4041,5,22,
        0,0,4041,4043,1,0,0,0,4042,4038,1,0,0,0,4042,4043,1,0,0,0,4043,4045,
        1,0,0,0,4044,4046,3,964,482,0,4045,4044,1,0,0,0,4045,4046,1,0,0,
        0,4046,4057,1,0,0,0,4047,4049,5,271,0,0,4048,4050,3,964,482,0,4049,
        4048,1,0,0,0,4049,4050,1,0,0,0,4050,4057,1,0,0,0,4051,4052,5,282,
        0,0,4052,4054,3,904,452,0,4053,4055,3,964,482,0,4054,4053,1,0,0,
        0,4054,4055,1,0,0,0,4055,4057,1,0,0,0,4056,4009,1,0,0,0,4056,4013,
        1,0,0,0,4056,4017,1,0,0,0,4056,4021,1,0,0,0,4056,4025,1,0,0,0,4056,
        4029,1,0,0,0,4056,4033,1,0,0,0,4056,4037,1,0,0,0,4056,4047,1,0,0,
        0,4056,4051,1,0,0,0,4057,903,1,0,0,0,4058,4060,5,147,0,0,4059,4061,
        3,964,482,0,4060,4059,1,0,0,0,4060,4061,1,0,0,0,4061,4103,1,0,0,
        0,4062,4064,5,148,0,0,4063,4065,3,964,482,0,4064,4063,1,0,0,0,4064,
        4065,1,0,0,0,4065,4103,1,0,0,0,4066,4068,5,149,0,0,4067,4069,3,964,
        482,0,4068,4067,1,0,0,0,4068,4069,1,0,0,0,4069,4103,1,0,0,0,4070,
        4072,5,150,0,0,4071,4073,3,964,482,0,4072,4071,1,0,0,0,4072,4073,
        1,0,0,0,4073,4103,1,0,0,0,4074,4076,5,151,0,0,4075,4077,3,964,482,
        0,4076,4075,1,0,0,0,4076,4077,1,0,0,0,4077,4103,1,0,0,0,4078,4080,
        5,152,0,0,4079,4081,3,964,482,0,4080,4079,1,0,0,0,4080,4081,1,0,
        0,0,4081,4103,1,0,0,0,4082,4083,5,245,0,0,4083,4085,5,146,0,0,4084,
        4086,3,964,482,0,4085,4084,1,0,0,0,4085,4086,1,0,0,0,4086,4103,1,
        0,0,0,4087,4092,5,146,0,0,4088,4089,5,12,0,0,4089,4090,3,908,454,
        0,4090,4091,5,22,0,0,4091,4093,1,0,0,0,4092,4088,1,0,0,0,4092,4093,
        1,0,0,0,4093,4095,1,0,0,0,4094,4096,3,964,482,0,4095,4094,1,0,0,
        0,4095,4096,1,0,0,0,4096,4103,1,0,0,0,4097,4098,5,45,0,0,4098,4100,
        5,146,0,0,4099,4101,3,964,482,0,4100,4099,1,0,0,0,4100,4101,1,0,
        0,0,4101,4103,1,0,0,0,4102,4058,1,0,0,0,4102,4062,1,0,0,0,4102,4066,
        1,0,0,0,4102,4070,1,0,0,0,4102,4074,1,0,0,0,4102,4078,1,0,0,0,4102,
        4082,1,0,0,0,4102,4087,1,0,0,0,4102,4097,1,0,0,0,4103,905,1,0,0,
        0,4104,4115,7,32,0,0,4105,4106,5,12,0,0,4106,4109,3,908,454,0,4107,
        4108,5,5,0,0,4108,4110,3,910,455,0,4109,4107,1,0,0,0,4109,4110,1,
        0,0,0,4110,4111,1,0,0,0,4111,4113,5,22,0,0,4112,4114,3,964,482,0,
        4113,4112,1,0,0,0,4113,4114,1,0,0,0,4114,4116,1,0,0,0,4115,4105,
        1,0,0,0,4115,4116,1,0,0,0,4116,907,1,0,0,0,4117,4118,5,392,0,0,4118,
        909,1,0,0,0,4119,4120,5,392,0,0,4120,911,1,0,0,0,4121,4123,5,115,
        0,0,4122,4124,3,964,482,0,4123,4122,1,0,0,0,4123,4124,1,0,0,0,4124,
        4167,1,0,0,0,4125,4127,5,117,0,0,4126,4128,3,964,482,0,4127,4126,
        1,0,0,0,4127,4128,1,0,0,0,4128,4167,1,0,0,0,4129,4131,5,118,0,0,
        4130,4132,3,964,482,0,4131,4130,1,0,0,0,4131,4132,1,0,0,0,4132,4167,
        1,0,0,0,4133,4135,5,114,0,0,4134,4136,3,964,482,0,4135,4134,1,0,
        0,0,4135,4136,1,0,0,0,4136,4167,1,0,0,0,4137,4139,5,116,0,0,4138,
        4140,3,964,482,0,4139,4138,1,0,0,0,4139,4140,1,0,0,0,4140,4167,1,
        0,0,0,4141,4150,5,113,0,0,4142,4143,5,12,0,0,4143,4146,3,908,454,
        0,4144,4145,5,5,0,0,4145,4147,3,910,455,0,4146,4144,1,0,0,0,4146,
        4147,1,0,0,0,4147,4148,1,0,0,0,4148,4149,5,22,0,0,4149,4151,1,0,
        0,0,4150,4142,1,0,0,0,4150,4151,1,0,0,0,4151,4153,1,0,0,0,4152,4154,
        3,964,482,0,4153,4152,1,0,0,0,4153,4154,1,0,0,0,4154,4167,1,0,0,
        0,4155,4157,5,223,0,0,4156,4158,3,964,482,0,4157,4156,1,0,0,0,4157,
        4158,1,0,0,0,4158,4167,1,0,0,0,4159,4161,5,97,0,0,4160,4162,5,216,
        0,0,4161,4160,1,0,0,0,4161,4162,1,0,0,0,4162,4164,1,0,0,0,4163,4165,
        3,964,482,0,4164,4163,1,0,0,0,4164,4165,1,0,0,0,4165,4167,1,0,0,
        0,4166,4121,1,0,0,0,4166,4125,1,0,0,0,4166,4129,1,0,0,0,4166,4133,
        1,0,0,0,4166,4137,1,0,0,0,4166,4141,1,0,0,0,4166,4155,1,0,0,0,4166,
        4159,1,0,0,0,4167,913,1,0,0,0,4168,4171,3,916,458,0,4169,4171,3,
        918,459,0,4170,4168,1,0,0,0,4170,4169,1,0,0,0,4171,915,1,0,0,0,4172,
        4178,3,920,460,0,4173,4178,3,922,461,0,4174,4178,3,924,462,0,4175,
        4178,3,926,463,0,4176,4178,3,928,464,0,4177,4172,1,0,0,0,4177,4173,
        1,0,0,0,4177,4174,1,0,0,0,4177,4175,1,0,0,0,4177,4176,1,0,0,0,4178,
        917,1,0,0,0,4179,4180,3,930,465,0,4180,919,1,0,0,0,4181,4182,5,299,
        0,0,4182,4184,5,85,0,0,4183,4185,3,964,482,0,4184,4183,1,0,0,0,4184,
        4185,1,0,0,0,4185,4197,1,0,0,0,4186,4187,5,261,0,0,4187,4188,5,293,
        0,0,4188,4190,5,262,0,0,4189,4191,3,964,482,0,4190,4189,1,0,0,0,
        4190,4191,1,0,0,0,4191,4197,1,0,0,0,4192,4194,5,85,0,0,4193,4195,
        3,964,482,0,4194,4193,1,0,0,0,4194,4195,1,0,0,0,4195,4197,1,0,0,
        0,4196,4181,1,0,0,0,4196,4186,1,0,0,0,4196,4192,1,0,0,0,4197,921,
        1,0,0,0,4198,4199,5,169,0,0,4199,4201,5,85,0,0,4200,4202,3,964,482,
        0,4201,4200,1,0,0,0,4201,4202,1,0,0,0,4202,4212,1,0,0,0,4203,4206,
        5,261,0,0,4204,4205,5,294,0,0,4205,4207,5,262,0,0,4206,4204,1,0,
        0,0,4206,4207,1,0,0,0,4207,4209,1,0,0,0,4208,4210,3,964,482,0,4209,
        4208,1,0,0,0,4209,4210,1,0,0,0,4210,4212,1,0,0,0,4211,4198,1,0,0,
        0,4211,4203,1,0,0,0,4212,923,1,0,0,0,4213,4215,5,84,0,0,4214,4216,
        3,964,482,0,4215,4214,1,0,0,0,4215,4216,1,0,0,0,4216,925,1,0,0,0,
        4217,4218,5,299,0,0,4218,4220,5,260,0,0,4219,4221,3,964,482,0,4220,
        4219,1,0,0,0,4220,4221,1,0,0,0,4221,4229,1,0,0,0,4222,4223,5,260,
        0,0,4223,4224,5,293,0,0,4224,4226,5,262,0,0,4225,4227,3,964,482,
        0,4226,4225,1,0,0,0,4226,4227,1,0,0,0,4227,4229,1,0,0,0,4228,4217,
        1,0,0,0,4228,4222,1,0,0,0,4229,927,1,0,0,0,4230,4231,5,169,0,0,4231,
        4233,5,260,0,0,4232,4234,3,964,482,0,4233,4232,1,0,0,0,4233,4234,
        1,0,0,0,4234,4242,1,0,0,0,4235,4236,5,260,0,0,4236,4237,5,294,0,
        0,4237,4239,5,262,0,0,4238,4240,3,964,482,0,4239,4238,1,0,0,0,4239,
        4240,1,0,0,0,4240,4242,1,0,0,0,4241,4230,1,0,0,0,4241,4235,1,0,0,
        0,4242,929,1,0,0,0,4243,4245,5,99,0,0,4244,4246,3,964,482,0,4245,
        4244,1,0,0,0,4245,4246,1,0,0,0,4246,931,1,0,0,0,4247,4252,3,934,
        467,0,4248,4252,3,940,470,0,4249,4252,3,942,471,0,4250,4252,3,948,
        474,0,4251,4247,1,0,0,0,4251,4248,1,0,0,0,4251,4249,1,0,0,0,4251,
        4250,1,0,0,0,4252,933,1,0,0,0,4253,4256,3,938,469,0,4254,4256,3,
        936,468,0,4255,4253,1,0,0,0,4255,4254,1,0,0,0,4256,935,1,0,0,0,4257,
        4259,5,218,0,0,4258,4257,1,0,0,0,4258,4259,1,0,0,0,4259,4260,1,0,
        0,0,4260,4261,5,122,0,0,4261,4263,3,778,389,0,4262,4264,3,964,482,
        0,4263,4262,1,0,0,0,4263,4264,1,0,0,0,4264,937,1,0,0,0,4265,4267,
        5,35,0,0,4266,4268,5,218,0,0,4267,4266,1,0,0,0,4267,4268,1,0,0,0,
        4268,4269,1,0,0,0,4269,4271,5,122,0,0,4270,4272,3,964,482,0,4271,
        4270,1,0,0,0,4271,4272,1,0,0,0,4272,939,1,0,0,0,4273,4275,3,874,
        437,0,4274,4276,3,964,482,0,4275,4274,1,0,0,0,4275,4276,1,0,0,0,
        4276,941,1,0,0,0,4277,4280,3,946,473,0,4278,4280,3,944,472,0,4279,
        4277,1,0,0,0,4279,4278,1,0,0,0,4280,943,1,0,0,0,4281,4283,3,786,
        393,0,4282,4284,3,964,482,0,4283,4282,1,0,0,0,4283,4284,1,0,0,0,
        4284,945,1,0,0,0,4285,4287,5,35,0,0,4286,4285,1,0,0,0,4286,4287,
        1,0,0,0,4287,4288,1,0,0,0,4288,4290,5,326,0,0,4289,4291,3,964,482,
        0,4290,4289,1,0,0,0,4290,4291,1,0,0,0,4291,947,1,0,0,0,4292,4295,
        3,952,476,0,4293,4295,3,950,475,0,4294,4292,1,0,0,0,4294,4293,1,
        0,0,0,4295,949,1,0,0,0,4296,4298,3,800,400,0,4297,4299,3,964,482,
        0,4298,4297,1,0,0,0,4298,4299,1,0,0,0,4299,951,1,0,0,0,4300,4302,
        5,35,0,0,4301,4300,1,0,0,0,4301,4302,1,0,0,0,4302,4303,1,0,0,0,4303,
        4305,5,324,0,0,4304,4306,3,964,482,0,4305,4304,1,0,0,0,4305,4306,
        1,0,0,0,4306,953,1,0,0,0,4307,4309,5,123,0,0,4308,4307,1,0,0,0,4308,
        4309,1,0,0,0,4309,4310,1,0,0,0,4310,4311,3,956,478,0,4311,955,1,
        0,0,0,4312,4313,7,33,0,0,4313,957,1,0,0,0,4314,4316,5,10,0,0,4315,
        4317,3,960,480,0,4316,4315,1,0,0,0,4316,4317,1,0,0,0,4317,4318,1,
        0,0,0,4318,4319,5,20,0,0,4319,959,1,0,0,0,4320,4325,3,966,483,0,
        4321,4322,5,5,0,0,4322,4324,3,966,483,0,4323,4321,1,0,0,0,4324,4327,
        1,0,0,0,4325,4323,1,0,0,0,4325,4326,1,0,0,0,4326,961,1,0,0,0,4327,
        4325,1,0,0,0,4328,4330,5,208,0,0,4329,4331,3,964,482,0,4330,4329,
        1,0,0,0,4330,4331,1,0,0,0,4331,963,1,0,0,0,4332,4333,5,192,0,0,4333,
        4334,5,193,0,0,4334,965,1,0,0,0,4335,4337,3,138,69,0,4336,4338,3,
        878,439,0,4337,4336,1,0,0,0,4337,4338,1,0,0,0,4338,4339,1,0,0,0,
        4339,4340,3,876,438,0,4340,967,1,0,0,0,4341,4345,3,970,485,0,4342,
        4345,3,974,487,0,4343,4345,3,1004,502,0,4344,4341,1,0,0,0,4344,4342,
        1,0,0,0,4344,4343,1,0,0,0,4345,969,1,0,0,0,4346,4351,5,24,0,0,4347,
        4348,3,978,489,0,4348,4349,3,116,58,0,4349,4351,1,0,0,0,4350,4346,
        1,0,0,0,4350,4347,1,0,0,0,4351,971,1,0,0,0,4352,4353,3,978,489,0,
        4353,4354,3,116,58,0,4354,973,1,0,0,0,4355,4360,3,976,488,0,4356,
        4357,3,980,490,0,4357,4358,3,116,58,0,4358,4360,1,0,0,0,4359,4355,
        1,0,0,0,4359,4356,1,0,0,0,4360,975,1,0,0,0,4361,4362,7,34,0,0,4362,
        977,1,0,0,0,4363,4365,5,24,0,0,4364,4366,3,982,491,0,4365,4364,1,
        0,0,0,4365,4366,1,0,0,0,4366,979,1,0,0,0,4367,4379,5,361,0,0,4368,
        4369,5,24,0,0,4369,4371,5,361,0,0,4370,4368,1,0,0,0,4371,4374,1,
        0,0,0,4372,4370,1,0,0,0,4372,4373,1,0,0,0,4373,4375,1,0,0,0,4374,
        4372,1,0,0,0,4375,4377,5,24,0,0,4376,4378,3,982,491,0,4377,4376,
        1,0,0,0,4377,4378,1,0,0,0,4378,4380,1,0,0,0,4379,4372,1,0,0,0,4379,
        4380,1,0,0,0,4380,981,1,0,0,0,4381,4382,3,114,57,0,4382,4383,5,24,
        0,0,4383,4385,1,0,0,0,4384,4381,1,0,0,0,4385,4386,1,0,0,0,4386,4384,
        1,0,0,0,4386,4387,1,0,0,0,4387,983,1,0,0,0,4388,4389,3,1002,501,
        0,4389,4390,3,118,59,0,4390,4395,1,0,0,0,4391,4395,3,120,60,0,4392,
        4395,3,988,494,0,4393,4395,3,1004,502,0,4394,4388,1,0,0,0,4394,4391,
        1,0,0,0,4394,4392,1,0,0,0,4394,4393,1,0,0,0,4395,985,1,0,0,0,4396,
        4398,3,1002,501,0,4397,4396,1,0,0,0,4397,4398,1,0,0,0,4398,4399,
        1,0,0,0,4399,4400,3,118,59,0,4400,987,1,0,0,0,4401,4402,7,35,0,0,
        4402,989,1,0,0,0,4403,4406,3,992,496,0,4404,4406,3,1004,502,0,4405,
        4403,1,0,0,0,4405,4404,1,0,0,0,4406,991,1,0,0,0,4407,4409,3,1002,
        501,0,4408,4407,1,0,0,0,4408,4409,1,0,0,0,4409,4410,1,0,0,0,4410,
        4411,3,122,61,0,4411,993,1,0,0,0,4412,4413,3,1002,501,0,4413,4414,
        3,126,63,0,4414,4418,1,0,0,0,4415,4418,3,128,64,0,4416,4418,3,1004,
        502,0,4417,4412,1,0,0,0,4417,4415,1,0,0,0,4417,4416,1,0,0,0,4418,
        995,1,0,0,0,4419,4421,3,1002,501,0,4420,4419,1,0,0,0,4420,4421,1,
        0,0,0,4421,4422,1,0,0,0,4422,4423,3,126,63,0,4423,997,1,0,0,0,4424,
        4427,3,1000,500,0,4425,4427,3,1004,502,0,4426,4424,1,0,0,0,4426,
        4425,1,0,0,0,4427,999,1,0,0,0,4428,4430,3,1002,501,0,4429,4428,1,
        0,0,0,4429,4430,1,0,0,0,4430,4431,1,0,0,0,4431,4432,3,130,65,0,4432,
        1001,1,0,0,0,4433,4435,3,968,484,0,4434,4436,5,24,0,0,4435,4434,
        1,0,0,0,4435,4436,1,0,0,0,4436,4442,1,0,0,0,4437,4438,3,110,55,0,
        4438,4439,5,16,0,0,4439,4441,1,0,0,0,4440,4437,1,0,0,0,4441,4444,
        1,0,0,0,4442,4440,1,0,0,0,4442,4443,1,0,0,0,4443,4453,1,0,0,0,4444,
        4442,1,0,0,0,4445,4446,3,110,55,0,4446,4447,5,16,0,0,4447,4449,1,
        0,0,0,4448,4445,1,0,0,0,4449,4450,1,0,0,0,4450,4448,1,0,0,0,4450,
        4451,1,0,0,0,4451,4453,1,0,0,0,4452,4433,1,0,0,0,4452,4448,1,0,0,
        0,4453,1003,1,0,0,0,4454,4455,3,464,232,0,4455,1005,1,0,0,0,4456,
        4457,5,133,0,0,4457,1007,1,0,0,0,4458,4459,3,1010,505,0,4459,4460,
        3,1022,511,0,4460,1009,1,0,0,0,4461,4462,7,36,0,0,4462,1011,1,0,
        0,0,4463,4465,5,154,0,0,4464,4466,5,192,0,0,4465,4464,1,0,0,0,4465,
        4466,1,0,0,0,4466,4467,1,0,0,0,4467,4468,5,193,0,0,4468,1013,1,0,
        0,0,4469,4471,5,154,0,0,4470,4472,5,192,0,0,4471,4470,1,0,0,0,4471,
        4472,1,0,0,0,4472,4474,1,0,0,0,4473,4475,3,1100,550,0,4474,4473,
        1,0,0,0,4474,4475,1,0,0,0,4475,4476,1,0,0,0,4476,4477,5,191,0,0,
        4477,1015,1,0,0,0,4478,4480,5,154,0,0,4479,4481,5,192,0,0,4480,4479,
        1,0,0,0,4480,4481,1,0,0,0,4481,4482,1,0,0,0,4482,4483,5,95,0,0,4483,
        1017,1,0,0,0,4484,4486,5,154,0,0,4485,4487,5,192,0,0,4486,4485,1,
        0,0,0,4486,4487,1,0,0,0,4487,4488,1,0,0,0,4488,4491,5,157,0,0,4489,
        4491,5,4,0,0,4490,4484,1,0,0,0,4490,4489,1,0,0,0,4491,4492,1,0,0,
        0,4492,4493,3,650,325,0,4493,1019,1,0,0,0,4494,4496,5,154,0,0,4495,
        4497,5,192,0,0,4496,4495,1,0,0,0,4496,4497,1,0,0,0,4497,4498,1,0,
        0,0,4498,4499,7,37,0,0,4499,4500,5,197,0,0,4500,4501,3,460,230,0,
        4501,1021,1,0,0,0,4502,4503,6,511,-1,0,4503,4504,5,192,0,0,4504,
        4507,3,1022,511,5,4505,4507,3,1024,512,0,4506,4502,1,0,0,0,4506,
        4505,1,0,0,0,4507,4519,1,0,0,0,4508,4509,10,4,0,0,4509,4510,5,34,
        0,0,4510,4518,3,1022,511,5,4511,4512,10,3,0,0,4512,4513,5,296,0,
        0,4513,4518,3,1022,511,4,4514,4515,10,2,0,0,4515,4516,7,38,0,0,4516,
        4518,3,1022,511,3,4517,4508,1,0,0,0,4517,4511,1,0,0,0,4517,4514,
        1,0,0,0,4518,4521,1,0,0,0,4519,4517,1,0,0,0,4519,4520,1,0,0,0,4520,
        1023,1,0,0,0,4521,4519,1,0,0,0,4522,4523,6,512,-1,0,4523,4541,5,
        107,0,0,4524,4525,5,10,0,0,4525,4526,3,474,237,0,4526,4527,5,20,
        0,0,4527,4542,1,0,0,0,4528,4529,5,12,0,0,4529,4530,3,474,237,0,4530,
        4531,5,22,0,0,4531,4542,1,0,0,0,4532,4533,5,10,0,0,4533,4534,3,350,
        175,0,4534,4535,5,20,0,0,4535,4542,1,0,0,0,4536,4537,5,12,0,0,4537,
        4538,3,350,175,0,4538,4539,5,22,0,0,4539,4542,1,0,0,0,4540,4542,
        3,64,32,0,4541,4524,1,0,0,0,4541,4528,1,0,0,0,4541,4532,1,0,0,0,
        4541,4536,1,0,0,0,4541,4540,1,0,0,0,4542,4599,1,0,0,0,4543,4544,
        3,460,230,0,4544,4545,3,1016,508,0,4545,4599,1,0,0,0,4546,4547,3,
        460,230,0,4547,4548,3,1018,509,0,4548,4599,1,0,0,0,4549,4550,3,460,
        230,0,4550,4551,3,1020,510,0,4551,4599,1,0,0,0,4552,4553,5,32,0,
        0,4553,4554,5,12,0,0,4554,4557,3,460,230,0,4555,4556,5,5,0,0,4556,
        4558,3,460,230,0,4557,4555,1,0,0,0,4558,4559,1,0,0,0,4559,4557,1,
        0,0,0,4559,4560,1,0,0,0,4560,4561,1,0,0,0,4561,4562,5,22,0,0,4562,
        4599,1,0,0,0,4563,4564,5,233,0,0,4564,4565,5,12,0,0,4565,4568,3,
        460,230,0,4566,4567,5,5,0,0,4567,4569,3,460,230,0,4568,4566,1,0,
        0,0,4569,4570,1,0,0,0,4570,4568,1,0,0,0,4570,4571,1,0,0,0,4571,4572,
        1,0,0,0,4572,4573,5,22,0,0,4573,4599,1,0,0,0,4574,4575,5,219,0,0,
        4575,4576,5,12,0,0,4576,4577,3,460,230,0,4577,4578,5,5,0,0,4578,
        4579,3,136,68,0,4579,4580,5,22,0,0,4580,4599,1,0,0,0,4581,4583,5,
        218,0,0,4582,4581,1,0,0,0,4582,4583,1,0,0,0,4583,4584,1,0,0,0,4584,
        4585,5,122,0,0,4585,4599,3,198,99,0,4586,4588,5,48,0,0,4587,4586,
        1,0,0,0,4587,4588,1,0,0,0,4588,4589,1,0,0,0,4589,4590,5,255,0,0,
        4590,4599,3,204,102,0,4591,4592,5,164,0,0,4592,4593,3,358,179,0,
        4593,4594,5,137,0,0,4594,4595,3,1022,511,0,4595,4596,5,105,0,0,4596,
        4599,1,0,0,0,4597,4599,3,1026,513,0,4598,4522,1,0,0,0,4598,4543,
        1,0,0,0,4598,4546,1,0,0,0,4598,4549,1,0,0,0,4598,4552,1,0,0,0,4598,
        4563,1,0,0,0,4598,4574,1,0,0,0,4598,4582,1,0,0,0,4598,4587,1,0,0,
        0,4598,4591,1,0,0,0,4598,4597,1,0,0,0,4599,4644,1,0,0,0,4600,4602,
        10,16,0,0,4601,4603,5,192,0,0,4602,4601,1,0,0,0,4602,4603,1,0,0,
        0,4603,4604,1,0,0,0,4604,4605,5,165,0,0,4605,4643,3,1024,512,17,
        4606,4607,10,15,0,0,4607,4608,3,1010,505,0,4608,4609,3,1024,512,
        16,4609,4643,1,0,0,0,4610,4612,10,14,0,0,4611,4613,5,192,0,0,4612,
        4611,1,0,0,0,4612,4613,1,0,0,0,4613,4614,1,0,0,0,4614,4615,5,44,
        0,0,4615,4616,3,1024,512,0,4616,4617,5,34,0,0,4617,4618,3,1024,512,
        15,4618,4643,1,0,0,0,4619,4621,10,18,0,0,4620,4622,5,192,0,0,4621,
        4620,1,0,0,0,4621,4622,1,0,0,0,4622,4623,1,0,0,0,4623,4625,5,137,
        0,0,4624,4626,3,954,477,0,4625,4624,1,0,0,0,4625,4626,1,0,0,0,4626,
        4627,1,0,0,0,4627,4643,3,1104,552,0,4628,4635,10,17,0,0,4629,4631,
        5,154,0,0,4630,4632,5,192,0,0,4631,4630,1,0,0,0,4631,4632,1,0,0,
        0,4632,4636,1,0,0,0,4633,4636,5,7,0,0,4634,4636,5,370,0,0,4635,4629,
        1,0,0,0,4635,4633,1,0,0,0,4635,4634,1,0,0,0,4636,4637,1,0,0,0,4637,
        4643,3,1028,514,0,4638,4639,10,12,0,0,4639,4643,3,1012,506,0,4640,
        4641,10,11,0,0,4641,4643,3,1014,507,0,4642,4600,1,0,0,0,4642,4606,
        1,0,0,0,4642,4610,1,0,0,0,4642,4619,1,0,0,0,4642,4628,1,0,0,0,4642,
        4638,1,0,0,0,4642,4640,1,0,0,0,4643,4646,1,0,0,0,4644,4642,1,0,0,
        0,4644,4645,1,0,0,0,4645,1025,1,0,0,0,4646,4644,1,0,0,0,4647,4648,
        6,513,-1,0,4648,4649,5,12,0,0,4649,4650,3,1022,511,0,4650,4651,5,
        22,0,0,4651,4663,1,0,0,0,4652,4663,3,1126,563,0,4653,4654,3,1030,
        515,0,4654,4655,3,1026,513,12,4655,4663,1,0,0,0,4656,4663,3,1032,
        516,0,4657,4663,3,1096,548,0,4658,4659,5,286,0,0,4659,4663,3,64,
        32,0,4660,4663,3,1122,561,0,4661,4663,3,142,71,0,4662,4647,1,0,0,
        0,4662,4652,1,0,0,0,4662,4653,1,0,0,0,4662,4656,1,0,0,0,4662,4657,
        1,0,0,0,4662,4658,1,0,0,0,4662,4660,1,0,0,0,4662,4661,1,0,0,0,4663,
        4692,1,0,0,0,4664,4665,10,8,0,0,4665,4666,5,3,0,0,4666,4691,3,1026,
        513,9,4667,4668,10,7,0,0,4668,4669,7,39,0,0,4669,4691,3,1026,513,
        8,4670,4671,10,6,0,0,4671,4672,7,40,0,0,4672,4691,3,1026,513,7,4673,
        4674,10,5,0,0,4674,4675,7,41,0,0,4675,4691,3,1026,513,6,4676,4677,
        10,4,0,0,4677,4678,5,1,0,0,4678,4691,3,1026,513,5,4679,4680,10,3,
        0,0,4680,4681,5,27,0,0,4681,4691,3,1026,513,4,4682,4683,10,15,0,
        0,4683,4684,5,11,0,0,4684,4685,3,68,34,0,4685,4686,5,21,0,0,4686,
        4691,1,0,0,0,4687,4688,10,14,0,0,4688,4689,5,16,0,0,4689,4691,3,
        136,68,0,4690,4664,1,0,0,0,4690,4667,1,0,0,0,4690,4670,1,0,0,0,4690,
        4673,1,0,0,0,4690,4676,1,0,0,0,4690,4679,1,0,0,0,4690,4682,1,0,0,
        0,4690,4687,1,0,0,0,4691,4694,1,0,0,0,4692,4690,1,0,0,0,4692,4693,
        1,0,0,0,4693,1027,1,0,0,0,4694,4692,1,0,0,0,4695,4696,7,7,0,0,4696,
        1029,1,0,0,0,4697,4698,7,42,0,0,4698,1031,1,0,0,0,4699,4710,3,1034,
        517,0,4700,4710,3,750,375,0,4701,4710,3,1048,524,0,4702,4710,3,1058,
        529,0,4703,4710,3,1060,530,0,4704,4710,3,1064,532,0,4705,4710,3,
        1076,538,0,4706,4710,3,1046,523,0,4707,4710,3,1044,522,0,4708,4710,
        3,1094,547,0,4709,4699,1,0,0,0,4709,4700,1,0,0,0,4709,4701,1,0,0,
        0,4709,4702,1,0,0,0,4709,4703,1,0,0,0,4709,4704,1,0,0,0,4709,4705,
        1,0,0,0,4709,4706,1,0,0,0,4709,4707,1,0,0,0,4709,4708,1,0,0,0,4710,
        1033,1,0,0,0,4711,4712,3,1040,520,0,4712,4713,5,12,0,0,4713,4714,
        3,1036,518,0,4714,4715,5,22,0,0,4715,4733,1,0,0,0,4716,4717,3,1042,
        521,0,4717,4718,5,12,0,0,4718,4719,3,1036,518,0,4719,4720,5,5,0,
        0,4720,4721,3,1036,518,0,4721,4722,5,22,0,0,4722,4733,1,0,0,0,4723,
        4724,5,136,0,0,4724,4725,5,12,0,0,4725,4726,3,1036,518,0,4726,4727,
        5,5,0,0,4727,4728,3,1036,518,0,4728,4729,5,5,0,0,4729,4730,3,1036,
        518,0,4730,4731,5,22,0,0,4731,4733,1,0,0,0,4732,4711,1,0,0,0,4732,
        4716,1,0,0,0,4732,4723,1,0,0,0,4733,1035,1,0,0,0,4734,4740,3,1126,
        563,0,4735,4740,3,1038,519,0,4736,4740,3,1032,516,0,4737,4740,3,
        142,71,0,4738,4740,3,1022,511,0,4739,4734,1,0,0,0,4739,4735,1,0,
        0,0,4739,4736,1,0,0,0,4739,4737,1,0,0,0,4739,4738,1,0,0,0,4740,1037,
        1,0,0,0,4741,4742,3,142,71,0,4742,4743,5,16,0,0,4743,4744,3,136,
        68,0,4744,1039,1,0,0,0,4745,4746,7,43,0,0,4746,1041,1,0,0,0,4747,
        4748,7,44,0,0,4748,1043,1,0,0,0,4749,4750,5,253,0,0,4750,4751,5,
        12,0,0,4751,4752,3,1026,513,0,4752,4753,5,5,0,0,4753,4756,3,1026,
        513,0,4754,4755,5,5,0,0,4755,4757,3,1026,513,0,4756,4754,1,0,0,0,
        4756,4757,1,0,0,0,4757,4758,1,0,0,0,4758,4759,5,22,0,0,4759,4812,
        1,0,0,0,4760,4761,5,162,0,0,4761,4762,5,12,0,0,4762,4763,3,1026,
        513,0,4763,4764,5,5,0,0,4764,4765,3,1026,513,0,4765,4766,5,22,0,
        0,4766,4812,1,0,0,0,4767,4768,5,232,0,0,4768,4769,5,12,0,0,4769,
        4770,3,1026,513,0,4770,4771,5,5,0,0,4771,4772,3,1026,513,0,4772,
        4773,5,22,0,0,4773,4812,1,0,0,0,4774,4775,7,45,0,0,4775,4776,5,12,
        0,0,4776,4777,3,1026,513,0,4777,4778,5,22,0,0,4778,4812,1,0,0,0,
        4779,4780,5,267,0,0,4780,4788,5,12,0,0,4781,4783,3,1098,549,0,4782,
        4781,1,0,0,0,4782,4783,1,0,0,0,4783,4785,1,0,0,0,4784,4786,3,1026,
        513,0,4785,4784,1,0,0,0,4785,4786,1,0,0,0,4786,4787,1,0,0,0,4787,
        4789,5,121,0,0,4788,4782,1,0,0,0,4788,4789,1,0,0,0,4789,4790,1,0,
        0,0,4790,4791,3,1026,513,0,4791,4792,5,22,0,0,4792,4812,1,0,0,0,
        4793,4794,7,46,0,0,4794,4795,5,12,0,0,4795,4798,3,1026,513,0,4796,
        4797,5,5,0,0,4797,4799,3,1026,513,0,4798,4796,1,0,0,0,4798,4799,
        1,0,0,0,4799,4800,1,0,0,0,4800,4801,5,22,0,0,4801,4812,1,0,0,0,4802,
        4803,5,190,0,0,4803,4804,5,12,0,0,4804,4807,3,1026,513,0,4805,4806,
        5,5,0,0,4806,4808,3,1100,550,0,4807,4805,1,0,0,0,4807,4808,1,0,0,
        0,4808,4809,1,0,0,0,4809,4810,5,22,0,0,4810,4812,1,0,0,0,4811,4749,
        1,0,0,0,4811,4760,1,0,0,0,4811,4767,1,0,0,0,4811,4774,1,0,0,0,4811,
        4779,1,0,0,0,4811,4793,1,0,0,0,4811,4802,1,0,0,0,4812,1045,1,0,0,
        0,4813,4814,5,267,0,0,4814,4815,5,12,0,0,4815,4816,3,1026,513,0,
        4816,4817,5,5,0,0,4817,4818,3,1026,513,0,4818,4819,5,22,0,0,4819,
        4826,1,0,0,0,4820,4821,5,103,0,0,4821,4822,5,12,0,0,4822,4823,3,
        1026,513,0,4823,4824,5,22,0,0,4824,4826,1,0,0,0,4825,4813,1,0,0,
        0,4825,4820,1,0,0,0,4826,1047,1,0,0,0,4827,4828,5,194,0,0,4828,4829,
        5,12,0,0,4829,4830,3,1022,511,0,4830,4831,5,5,0,0,4831,4832,3,1022,
        511,0,4832,4833,5,22,0,0,4833,4870,1,0,0,0,4834,4835,5,66,0,0,4835,
        4836,5,12,0,0,4836,4841,3,1022,511,0,4837,4838,5,5,0,0,4838,4840,
        3,1022,511,0,4839,4837,1,0,0,0,4840,4843,1,0,0,0,4841,4839,1,0,0,
        0,4841,4842,1,0,0,0,4842,4844,1,0,0,0,4843,4841,1,0,0,0,4844,4845,
        5,22,0,0,4845,4870,1,0,0,0,4846,4847,5,58,0,0,4847,4849,3,1026,513,
        0,4848,4850,3,1050,525,0,4849,4848,1,0,0,0,4850,4851,1,0,0,0,4851,
        4849,1,0,0,0,4851,4852,1,0,0,0,4852,4854,1,0,0,0,4853,4855,3,1054,
        527,0,4854,4853,1,0,0,0,4854,4855,1,0,0,0,4855,4856,1,0,0,0,4856,
        4857,5,105,0,0,4857,4870,1,0,0,0,4858,4860,5,58,0,0,4859,4861,3,
        1052,526,0,4860,4859,1,0,0,0,4861,4862,1,0,0,0,4862,4860,1,0,0,0,
        4862,4863,1,0,0,0,4863,4865,1,0,0,0,4864,4866,3,1054,527,0,4865,
        4864,1,0,0,0,4865,4866,1,0,0,0,4866,4867,1,0,0,0,4867,4868,5,105,
        0,0,4868,4870,1,0,0,0,4869,4827,1,0,0,0,4869,4834,1,0,0,0,4869,4846,
        1,0,0,0,4869,4858,1,0,0,0,4870,1049,1,0,0,0,4871,4872,5,291,0,0,
        4872,4877,3,1056,528,0,4873,4874,5,5,0,0,4874,4876,3,1056,528,0,
        4875,4873,1,0,0,0,4876,4879,1,0,0,0,4877,4875,1,0,0,0,4877,4878,
        1,0,0,0,4878,4880,1,0,0,0,4879,4877,1,0,0,0,4880,4881,5,259,0,0,
        4881,4882,3,1022,511,0,4882,1051,1,0,0,0,4883,4884,5,291,0,0,4884,
        4885,3,1022,511,0,4885,4886,5,259,0,0,4886,4887,3,1022,511,0,4887,
        1053,1,0,0,0,4888,4889,5,104,0,0,4889,4890,3,1022,511,0,4890,1055,
        1,0,0,0,4891,4898,3,1026,513,0,4892,4898,3,1008,504,0,4893,4898,
        3,1012,506,0,4894,4898,3,1016,508,0,4895,4898,3,1018,509,0,4896,
        4898,3,1020,510,0,4897,4891,1,0,0,0,4897,4892,1,0,0,0,4897,4893,
        1,0,0,0,4897,4894,1,0,0,0,4897,4895,1,0,0,0,4897,4896,1,0,0,0,4898,
        1057,1,0,0,0,4899,4900,5,59,0,0,4900,4901,5,12,0,0,4901,4902,3,1022,
        511,0,4902,4903,5,37,0,0,4903,4904,3,876,438,0,4904,4905,5,22,0,
        0,4905,1059,1,0,0,0,4906,4907,3,1062,531,0,4907,4908,5,12,0,0,4908,
        4909,3,142,71,0,4909,4910,5,22,0,0,4910,1061,1,0,0,0,4911,4912,7,
        47,0,0,4912,1063,1,0,0,0,4913,4919,3,1066,533,0,4914,4919,3,1068,
        534,0,4915,4919,3,1072,536,0,4916,4919,3,1070,535,0,4917,4919,3,
        1074,537,0,4918,4913,1,0,0,0,4918,4914,1,0,0,0,4918,4915,1,0,0,0,
        4918,4916,1,0,0,0,4918,4917,1,0,0,0,4919,1065,1,0,0,0,4920,4928,
        5,77,0,0,4921,4922,5,84,0,0,4922,4924,5,12,0,0,4923,4925,3,1078,
        539,0,4924,4923,1,0,0,0,4924,4925,1,0,0,0,4925,4926,1,0,0,0,4926,
        4928,5,22,0,0,4927,4920,1,0,0,0,4927,4921,1,0,0,0,4928,1067,1,0,
        0,0,4929,4937,5,81,0,0,4930,4931,5,301,0,0,4931,4933,5,12,0,0,4932,
        4934,3,1080,540,0,4933,4932,1,0,0,0,4933,4934,1,0,0,0,4934,4935,
        1,0,0,0,4935,4937,5,22,0,0,4936,4929,1,0,0,0,4936,4930,1,0,0,0,4937,
        1069,1,0,0,0,4938,4944,5,171,0,0,4939,4941,5,12,0,0,4940,4942,3,
        1080,540,0,4941,4940,1,0,0,0,4941,4942,1,0,0,0,4942,4943,1,0,0,0,
        4943,4945,5,22,0,0,4944,4939,1,0,0,0,4944,4945,1,0,0,0,4945,1071,
        1,0,0,0,4946,4954,5,82,0,0,4947,4948,5,300,0,0,4948,4950,5,12,0,
        0,4949,4951,3,1082,541,0,4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,
        4952,1,0,0,0,4952,4954,5,22,0,0,4953,4946,1,0,0,0,4953,4947,1,0,
        0,0,4954,1073,1,0,0,0,4955,4963,5,172,0,0,4956,4957,5,170,0,0,4957,
        4959,5,12,0,0,4958,4960,3,1082,541,0,4959,4958,1,0,0,0,4959,4960,
        1,0,0,0,4960,4961,1,0,0,0,4961,4963,5,22,0,0,4962,4955,1,0,0,0,4962,
        4956,1,0,0,0,4963,1075,1,0,0,0,4964,4965,5,100,0,0,4965,4966,5,12,
        0,0,4966,4967,3,1026,513,0,4967,4968,5,5,0,0,4968,4969,3,1026,513,
        0,4969,4970,5,22,0,0,4970,4977,1,0,0,0,4971,4972,5,99,0,0,4972,4973,
        5,12,0,0,4973,4974,3,1090,545,0,4974,4975,5,22,0,0,4975,4977,1,0,
        0,0,4976,4964,1,0,0,0,4976,4971,1,0,0,0,4977,1077,1,0,0,0,4978,4981,
        3,1084,542,0,4979,4981,3,1106,553,0,4980,4978,1,0,0,0,4980,4979,
        1,0,0,0,4981,1079,1,0,0,0,4982,4985,3,1086,543,0,4983,4985,3,1106,
        553,0,4984,4982,1,0,0,0,4984,4983,1,0,0,0,4985,1081,1,0,0,0,4986,
        4989,3,1088,544,0,4987,4989,3,1106,553,0,4988,4986,1,0,0,0,4988,
        4987,1,0,0,0,4989,1083,1,0,0,0,4990,4991,3,166,83,0,4991,1085,1,
        0,0,0,4992,4993,3,166,83,0,4993,1087,1,0,0,0,4994,4995,3,166,83,
        0,4995,1089,1,0,0,0,4996,4999,3,1092,546,0,4997,4999,3,1106,553,
        0,4998,4996,1,0,0,0,4998,4997,1,0,0,0,4999,1091,1,0,0,0,5000,5001,
        3,166,83,0,5001,1093,1,0,0,0,5002,5003,3,134,67,0,5003,5012,5,12,
        0,0,5004,5009,3,1036,518,0,5005,5006,5,5,0,0,5006,5008,3,1036,518,
        0,5007,5005,1,0,0,0,5008,5011,1,0,0,0,5009,5007,1,0,0,0,5009,5010,
        1,0,0,0,5010,5013,1,0,0,0,5011,5009,1,0,0,0,5012,5004,1,0,0,0,5012,
        5013,1,0,0,0,5013,5014,1,0,0,0,5014,5015,5,22,0,0,5015,1095,1,0,
        0,0,5016,5021,3,1102,551,0,5017,5021,3,1106,553,0,5018,5021,3,1110,
        555,0,5019,5021,3,1112,556,0,5020,5016,1,0,0,0,5020,5017,1,0,0,0,
        5020,5018,1,0,0,0,5020,5019,1,0,0,0,5021,1097,1,0,0,0,5022,5023,
        7,48,0,0,5023,1099,1,0,0,0,5024,5025,7,49,0,0,5025,1101,1,0,0,0,
        5026,5028,3,954,477,0,5027,5026,1,0,0,0,5027,5028,1,0,0,0,5028,5029,
        1,0,0,0,5029,5038,5,11,0,0,5030,5035,3,1022,511,0,5031,5032,5,5,
        0,0,5032,5034,3,1022,511,0,5033,5031,1,0,0,0,5034,5037,1,0,0,0,5035,
        5033,1,0,0,0,5035,5036,1,0,0,0,5036,5039,1,0,0,0,5037,5035,1,0,0,
        0,5038,5030,1,0,0,0,5038,5039,1,0,0,0,5039,5040,1,0,0,0,5040,5041,
        5,21,0,0,5041,1103,1,0,0,0,5042,5043,5,11,0,0,5043,5048,3,1022,511,
        0,5044,5045,5,5,0,0,5045,5047,3,1022,511,0,5046,5044,1,0,0,0,5047,
        5050,1,0,0,0,5048,5046,1,0,0,0,5048,5049,1,0,0,0,5049,5051,1,0,0,
        0,5050,5048,1,0,0,0,5051,5052,5,21,0,0,5052,5065,1,0,0,0,5053,5054,
        5,12,0,0,5054,5059,3,1022,511,0,5055,5056,5,5,0,0,5056,5058,3,1022,
        511,0,5057,5055,1,0,0,0,5058,5061,1,0,0,0,5059,5057,1,0,0,0,5059,
        5060,1,0,0,0,5060,5062,1,0,0,0,5061,5059,1,0,0,0,5062,5063,5,22,
        0,0,5063,5065,1,0,0,0,5064,5042,1,0,0,0,5064,5053,1,0,0,0,5065,1105,
        1,0,0,0,5066,5068,5,224,0,0,5067,5066,1,0,0,0,5067,5068,1,0,0,0,
        5068,5069,1,0,0,0,5069,5078,5,10,0,0,5070,5075,3,1108,554,0,5071,
        5072,5,5,0,0,5072,5074,3,1108,554,0,5073,5071,1,0,0,0,5074,5077,
        1,0,0,0,5075,5073,1,0,0,0,5075,5076,1,0,0,0,5076,5079,1,0,0,0,5077,
        5075,1,0,0,0,5078,5070,1,0,0,0,5078,5079,1,0,0,0,5079,5080,1,0,0,
        0,5080,5081,5,20,0,0,5081,1107,1,0,0,0,5082,5083,3,138,69,0,5083,
        5084,5,4,0,0,5084,5085,3,1022,511,0,5085,1109,1,0,0,0,5086,5087,
        5,208,0,0,5087,5088,5,11,0,0,5088,5096,3,1026,513,0,5089,5090,5,
        5,0,0,5090,5091,3,1026,513,0,5091,5092,5,5,0,0,5092,5093,3,1026,
        513,0,5093,5095,1,0,0,0,5094,5089,1,0,0,0,5095,5098,1,0,0,0,5096,
        5094,1,0,0,0,5096,5097,1,0,0,0,5097,5099,1,0,0,0,5098,5096,1,0,0,
        0,5099,5100,5,21,0,0,5100,1111,1,0,0,0,5101,5102,5,178,0,0,5102,
        5103,5,10,0,0,5103,5108,3,1114,557,0,5104,5105,5,5,0,0,5105,5107,
        3,1114,557,0,5106,5104,1,0,0,0,5107,5110,1,0,0,0,5108,5106,1,0,0,
        0,5108,5109,1,0,0,0,5109,5111,1,0,0,0,5110,5108,1,0,0,0,5111,5112,
        5,20,0,0,5112,1113,1,0,0,0,5113,5114,3,1022,511,0,5114,5115,5,4,
        0,0,5115,5116,3,1022,511,0,5116,1115,1,0,0,0,5117,5120,3,1126,563,
        0,5118,5120,3,1122,561,0,5119,5117,1,0,0,0,5119,5118,1,0,0,0,5120,
        1117,1,0,0,0,5121,5124,3,70,35,0,5122,5124,3,464,232,0,5123,5121,
        1,0,0,0,5123,5122,1,0,0,0,5124,1119,1,0,0,0,5125,5128,3,164,82,0,
        5126,5128,3,464,232,0,5127,5125,1,0,0,0,5127,5126,1,0,0,0,5128,1121,
        1,0,0,0,5129,5132,3,464,232,0,5130,5132,3,1124,562,0,5131,5129,1,
        0,0,0,5131,5130,1,0,0,0,5132,1123,1,0,0,0,5133,5134,5,83,0,0,5134,
        1125,1,0,0,0,5135,5138,3,68,34,0,5136,5138,3,1128,564,0,5137,5135,
        1,0,0,0,5137,5136,1,0,0,0,5138,1127,1,0,0,0,5139,5144,3,162,81,0,
        5140,5144,3,1130,565,0,5141,5144,3,1132,566,0,5142,5144,3,1136,568,
        0,5143,5139,1,0,0,0,5143,5140,1,0,0,0,5143,5141,1,0,0,0,5143,5142,
        1,0,0,0,5144,1129,1,0,0,0,5145,5147,3,954,477,0,5146,5145,1,0,0,
        0,5146,5147,1,0,0,0,5147,5148,1,0,0,0,5148,5157,5,11,0,0,5149,5154,
        3,1128,564,0,5150,5151,5,5,0,0,5151,5153,3,1128,564,0,5152,5150,
        1,0,0,0,5153,5156,1,0,0,0,5154,5152,1,0,0,0,5154,5155,1,0,0,0,5155,
        5158,1,0,0,0,5156,5154,1,0,0,0,5157,5149,1,0,0,0,5157,5158,1,0,0,
        0,5158,5159,1,0,0,0,5159,5160,5,21,0,0,5160,1131,1,0,0,0,5161,5162,
        5,178,0,0,5162,5163,5,10,0,0,5163,5168,3,1134,567,0,5164,5165,5,
        5,0,0,5165,5167,3,1134,567,0,5166,5164,1,0,0,0,5167,5170,1,0,0,0,
        5168,5166,1,0,0,0,5168,5169,1,0,0,0,5169,5171,1,0,0,0,5170,5168,
        1,0,0,0,5171,5172,5,20,0,0,5172,1133,1,0,0,0,5173,5174,3,1128,564,
        0,5174,5175,5,4,0,0,5175,5176,3,1128,564,0,5176,1135,1,0,0,0,5177,
        5179,5,224,0,0,5178,5177,1,0,0,0,5178,5179,1,0,0,0,5179,5180,1,0,
        0,0,5180,5189,5,10,0,0,5181,5186,3,1138,569,0,5182,5183,5,5,0,0,
        5183,5185,3,1138,569,0,5184,5182,1,0,0,0,5185,5188,1,0,0,0,5186,
        5184,1,0,0,0,5186,5187,1,0,0,0,5187,5190,1,0,0,0,5188,5186,1,0,0,
        0,5189,5181,1,0,0,0,5189,5190,1,0,0,0,5190,5191,1,0,0,0,5191,5192,
        5,20,0,0,5192,1137,1,0,0,0,5193,5194,3,142,71,0,5194,5195,5,4,0,
        0,5195,5196,3,1128,564,0,5196,1139,1,0,0,0,556,1142,1148,1151,1155,
        1160,1164,1169,1171,1175,1178,1182,1190,1196,1210,1213,1220,1233,
        1240,1243,1248,1254,1257,1265,1272,1277,1283,1313,1331,1375,1389,
        1399,1403,1618,1636,1646,1663,1668,1672,1680,1684,1704,1710,1715,
        1718,1725,1730,1736,1743,1747,1752,1759,1762,1770,1777,1780,1792,
        1795,1805,1815,1826,1831,1835,1843,1850,1858,1864,1870,1875,1878,
        1883,1886,1889,1893,1896,1900,1904,1907,1910,1913,1925,1930,1936,
        1943,1948,1952,1958,1963,1966,1972,1976,1982,1990,1994,1999,2006,
        2009,2014,2017,2022,2026,2030,2037,2050,2057,2069,2078,2091,2102,
        2107,2118,2128,2143,2147,2151,2157,2165,2168,2178,2183,2187,2191,
        2195,2197,2203,2209,2214,2233,2237,2242,2246,2253,2257,2274,2279,
        2286,2296,2304,2309,2323,2326,2330,2333,2337,2341,2347,2350,2354,
        2357,2361,2368,2374,2382,2397,2407,2412,2416,2425,2432,2447,2451,
        2458,2485,2493,2506,2509,2513,2516,2519,2522,2525,2528,2531,2534,
        2541,2547,2561,2564,2571,2581,2584,2591,2594,2600,2609,2615,2619,
        2626,2647,2657,2662,2666,2669,2673,2676,2680,2690,2693,2697,2700,
        2707,2711,2714,2726,2730,2737,2741,2744,2750,2753,2756,2764,2769,
        2772,2777,2780,2785,2788,2793,2796,2805,2814,2824,2830,2835,2846,
        2850,2857,2860,2863,2866,2883,2894,2908,2913,2928,2947,2952,2967,
        2981,2990,3046,3056,3059,3062,3066,3069,3072,3080,3085,3106,3115,
        3120,3127,3133,3141,3149,3159,3169,3176,3184,3188,3195,3207,3215,
        3219,3234,3271,3280,3290,3296,3303,3309,3319,3328,3356,3366,3379,
        3384,3400,3404,3427,3434,3442,3451,3455,3458,3473,3478,3497,3501,
        3510,3515,3518,3528,3549,3554,3559,3563,3566,3571,3575,3578,3587,
        3595,3599,3603,3606,3612,3617,3626,3635,3669,3672,3677,3694,3702,
        3705,3713,3716,3727,3763,3767,3776,3781,3788,3804,3807,3810,3814,
        3817,3821,3825,3828,3831,3836,3840,3848,3853,3861,3864,3871,3873,
        3875,3886,3890,3897,3900,3907,3912,3915,3922,3925,3932,3935,3937,
        3947,3951,3955,3959,3963,3967,3971,3975,3979,3983,3990,3993,3997,
        4001,4005,4007,4011,4015,4019,4023,4027,4031,4035,4042,4045,4049,
        4054,4056,4060,4064,4068,4072,4076,4080,4085,4092,4095,4100,4102,
        4109,4113,4115,4123,4127,4131,4135,4139,4146,4150,4153,4157,4161,
        4164,4166,4170,4177,4184,4190,4194,4196,4201,4206,4209,4211,4215,
        4220,4226,4228,4233,4239,4241,4245,4251,4255,4258,4263,4267,4271,
        4275,4279,4283,4286,4290,4294,4298,4301,4305,4308,4316,4325,4330,
        4337,4344,4350,4359,4365,4372,4377,4379,4386,4394,4397,4405,4408,
        4417,4420,4426,4429,4435,4442,4450,4452,4465,4471,4474,4480,4486,
        4490,4496,4506,4517,4519,4541,4559,4570,4582,4587,4598,4602,4612,
        4621,4625,4631,4635,4642,4644,4662,4690,4692,4709,4732,4739,4756,
        4782,4785,4788,4798,4807,4811,4825,4841,4851,4854,4862,4865,4869,
        4877,4897,4918,4924,4927,4933,4936,4941,4944,4950,4953,4959,4962,
        4976,4980,4984,4988,4998,5009,5012,5020,5027,5035,5038,5048,5059,
        5064,5067,5075,5078,5096,5108,5119,5123,5127,5131,5137,5143,5146,
        5154,5157,5168,5178,5186,5189
    ]

class GqlParser ( Parser ):

    grammarFileName = "GqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'&'", "'*'", "'^'", "':'", "','", "'$'", 
                     "'='", "'!'", "'>'", "'{'", "'['", "'('", "'<'", "'-'", 
                     "'%'", "'.'", "'+'", "'?'", "'\\'", "'}'", "']'", "')'", 
                     "';'", "'/'", "'~'", "'_'", "'|'", "'ABS'", "'ACOS'", 
                     "'ACYCLIC'", "'ALL'", "'ALL_DIFFERENT'", "'ALLOW_ANONYMOUS_TABLE'", 
                     "<INVALID>", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASCENDING'", 
                     "'ASIN'", "'AT'", "'ATAN'", "'AVG'", "'BETWEEN'", "'BIG'", 
                     "'BIGINT'", "'BINARY'", "'BINDING'", "'BINDINGS'", 
                     "'BOOL'", "'BOOLEAN'", "'BOTH'", "'BTRIM'", "'BY'", 
                     "'BYTE_LENGTH'", "'BYTES'", "'CALL'", "'CASE'", "'CAST'", 
                     "'CEIL'", "'CEILING'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERISTICS'", "'CLOSE'", "'COALESCE'", "'COLLECT'", 
                     "'COMMIT'", "'CONNECTION'", "'CONNECTING'", "'COPY'", 
                     "'COS'", "'COSH'", "'COT'", "'COUNT'", "'CREATE'", 
                     "'CURRENT_DATE'", "'CURRENT_GRAPH'", "'CURRENT_PROPERTY_GRAPH'", 
                     "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATE'", "'DATETIME'", "'DEC'", 
                     "'DECIMAL'", "'DEGREES'", "'DELETE'", "'DESC'", "'DESCENDING'", 
                     "'DESTINATION'", "'DETACH'", "'DIFFERENT'", "'DIRECTED'", 
                     "'DISTINCT'", "'DOUBLE'", "'DROP'", "'DURATION'", "'DURATION_BETWEEN'", 
                     "'ELEMENT'", "'ELEMENT_ID'", "'ELEMENTS'", "'ELSE'", 
                     "'END'", "'EXCEPT'", "'EXISTS'", "'EXP'", "'FALSE'", 
                     "'FILTER'", "'FINISH'", "'FIRST'", "'FLOAT'", "'FLOAT128'", 
                     "'FLOAT16'", "'FLOAT256'", "'FLOAT32'", "'FLOAT64'", 
                     "'FLOOR'", "'FOR'", "'FROM'", "'GRAPH'", "'GROUP'", 
                     "'GROUPS'", "'GROUP_CONCAT'", "'HAVING'", "'HOME_GRAPH'", 
                     "'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", "'ID'", "'I_DONT_KNOW_1'", 
                     "'I_DONT_KNOW_2'", "'I_DONT_KNOW_3'", "'I_DONT_KNOW_4'", 
                     "'I_DONT_KNOW_5'", "'IF'", "'IN'", "'INSERT'", "'INT'", 
                     "'INT8'", "'INT16'", "'INT32'", "'INT64'", "'INT128'", 
                     "'INT256'", "'INTEGER'", "'INTEGER8'", "'INTEGER16'", 
                     "'INTEGER32'", "'INTEGER64'", "'INTEGER128'", "'INTEGER256'", 
                     "'INTERSECT'", "'IS'", "'KEEP'", "'LABEL'", "'LABELED'", 
                     "'LABELS'", "'LAST'", "'KILL'", "'LEADING'", "'LEFT'", 
                     "'LENGTH'", "'LET'", "'LIKE'", "'LIMIT'", "'LIST'", 
                     "'LN'", "'LOCAL'", "'LOCAL_DATETIME'", "'LOCAL_TIME'", 
                     "'LOCAL_TIMESTAMP'", "'LOG'", "'LOG10'", "'LONG'", 
                     "'LOWER'", "'LTRIM'", "'MAP'", "'MATCH'", "'MAX'", 
                     "'MIN'", "'MOD'", "'NEXT'", "'NFC'", "'NFD'", "'NFKC'", 
                     "'NFKD'", "'NO'", "'NODETACH'", "'NORMALIZE'", "'NORMALIZED'", 
                     "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFFSET'", "'ONLY'", "'OPEN'", "'OPTIONAL'", 
                     "'OR'", "'ORDER'", "'ORDINALITY'", "'OTHERWISE'", "'PARAMETER'", 
                     "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", "'PATHS'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PER_NODE_LIMIT'", 
                     "'PER_SHARD_LIMIT'", "'POWER'", "'PRECISION'", "'PROCESSLIST'", 
                     "'PROPERTY'", "'PROPERTY_EXISTS'", "'RADIANS'", "'READ'", 
                     "'READ_CONSISTENCY'", "'REAL'", "'RECORD'", "'REMOVE'", 
                     "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RETURN'", 
                     "'ROLLBACK'", "'RTRIM'", "'RIGHT'", "'SAME'", "'SCHEMA'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SHORTEST'", "'SHOW'", 
                     "'SIGNED'", "'SIMPLE'", "'SIN'", "'SINH'", "'SKIP'", 
                     "'SMALL'", "'SMALLINT'", "'SOURCE'", "'SQRT'", "'START'", 
                     "'STDDEV_POP'", "'STDDEV_SAMP'", "'STRING'", "'SUBSTR'", 
                     "'SUM'", "'TABLE'", "'TAN'", "'TANH'", "'TEMP'", "'THEN'", 
                     "'TIME'", "'TIMESTAMP'", "'TIMEZONE'", "'TO'", "'TRAIL'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", 
                     "'TYPE'", "'TYPED'", "'UBIGINT'", "'UINT'", "'UINT128'", 
                     "'UINT16'", "'UINT256'", "'UINT32'", "'UINT64'", "'UINT8'", 
                     "'UNDIRECTED'", "'UNION'", "'UNKNOWN'", "'UNSIGNED'", 
                     "'UPPER'", "'USE'", "'USMALLINT'", "'VALUE'", "'VARBINARY'", 
                     "'VARCHAR'", "'VARIABLE'", "'WALK'", "'WHEN'", "'WHERE'", 
                     "'WITH'", "'WITHOUT'", "'WRITE'", "'XOR'", "'YIELD'", 
                     "'ZONE'", "'ZONED'", "'ZONED_DATETIME'", "'ZONED_TIME'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'PARTITION'", "'ROW_NUMBER'", "'RANK'", "'DENSE_RANK'", 
                     "'CUME_DIST'", "'PERCENT_RANK'", "'OVER'", "'JOIN'", 
                     "'ON'", "'INNER'", "'CROSS'", "'CONSTRUCT'", "'PROPERTIES'", 
                     "'PRIMARY'", "'KEY'", "'SLIDING'", "'UNTIL'", "'STEP'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'aggregate'", 
                     "'aggregates'", "'alter'", "'catalog'", "'clear'", 
                     "'clone'", "'contraint'", "'current_role'", "'data'", 
                     "'directory'", "'exact'", "'existing'", "'function'", 
                     "'gqlstatus'", "'grant'", "'instant'", "'nothing'", 
                     "'numeric'", "'procedure'", "'product'", "'project'", 
                     "'query'", "'records'", "'reference'", "'rename'", 
                     "'revoke'", "'substring'", "'temporal'", "'unique'", 
                     "'unit'", "'values'", "'|+|'", "'||'", "'::'", "'..'", 
                     "'>='", "'/*+'", "'<->'", "'<-/'", "'<<'", "'<~/'", 
                     "'<='", "'-/'", "<INVALID>", "'->'", "'>>'", "'<=>'", 
                     "'/->'", "'/~>'", "'~>'", "'~/'", "'//'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'''", "'\"'", "'`'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\u202A'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'I_DONT_KNOW_15'", "<INVALID>", "'/*'", "'*/'", "'I_DONT_KNOW_16'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'I_DONT_KNOW_18'", "<INVALID>", "'I_DONT_KNOW_20'" ]

    symbolicNames = [ "<INVALID>", "AMPERSAND", "ASTERISK", "CIRCUMFLEX", 
                      "COLON", "COMMA", "DOLLAR_SIGN", "EQUALS_OPERATOR", 
                      "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", "LEFT_BRACE", 
                      "LEFT_BRACKET", "LEFT_PAREN", "LEFT_ANGLE_BRACKET", 
                      "MINUS_SIGN", "PERCENT", "PERIOD", "PLUS_SIGN", "QUESTION_MARK", 
                      "REVERSE_SOLIDUS", "RIGHT_BRACE", "RIGHT_BRACKET", 
                      "RIGHT_PAREN", "SEMICOLON", "SOLIDUS", "TILDE", "UNDERSCORE", 
                      "VERTICAL_BAR", "ABS", "ACOS", "ACYCLIC", "ALL", "ALL_DIFFERENT", 
                      "ALLOW_ANONYMOUS_TABLE", "AND", "ANY", "ARRAY", "AS", 
                      "ASC", "ASCENDING", "ASIN", "AT", "ATAN", "AVG", "BETWEEN", 
                      "BIG", "BIGINT", "BINARY", "BINDING", "BINDINGS", 
                      "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", "BYTE_LENGTH", 
                      "BYTES", "CALL", "CASE", "CAST", "CEIL", "CEILING", 
                      "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
                      "CLOSE", "COALESCE", "COLLECT", "COMMIT", "CONNECTION", 
                      "CONNECTING", "COPY", "COS", "COSH", "COT", "COUNT", 
                      "CREATE", "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
                      "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "DATE", "DATETIME", "DEC", "DECIMAL", 
                      "DEGREES", "DELETE", "DESC", "DESCENDING", "DESTINATION", 
                      "DETACH", "DIFFERENT", "DIRECTED", "DISTINCT", "DOUBLE", 
                      "DROP", "DURATION", "DURATION_BETWEEN", "ELEMENT", 
                      "ELEMENT_ID", "ELEMENTS", "ELSE", "END", "EXCEPT", 
                      "EXISTS", "EXP", "FALSE", "FILTER", "FINISH", "FIRST", 
                      "FLOAT", "FLOAT128", "FLOAT16", "FLOAT256", "FLOAT32", 
                      "FLOAT64", "FLOOR", "FOR", "FROM", "GRAPH", "GROUP", 
                      "GROUPS", "GROUP_CONCAT", "HAVING", "HOME_GRAPH", 
                      "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", "ID", "I_DONT_KNOW_1", 
                      "I_DONT_KNOW_2", "I_DONT_KNOW_3", "I_DONT_KNOW_4", 
                      "I_DONT_KNOW_5", "IF", "IN", "INSERT", "INT", "INT8", 
                      "INT16", "INT32", "INT64", "INT128", "INT256", "INTEGER", 
                      "INTEGER8", "INTEGER16", "INTEGER32", "INTEGER64", 
                      "INTEGER128", "INTEGER256", "INTERSECT", "IS", "KEEP", 
                      "LABEL", "LABELED", "LABELS", "LAST", "KILL", "LEADING", 
                      "LEFT", "LENGTH", "LET", "LIKE", "LIMIT", "LIST", 
                      "LN", "LOCAL", "LOCAL_DATETIME", "LOCAL_TIME", "LOCAL_TIMESTAMP", 
                      "LOG", "LOG10", "LONG", "LOWER", "LTRIM", "MAP", "MATCH", 
                      "MAX_", "MIN_", "MOD", "NEXT", "NFC", "NFD", "NFKC", 
                      "NFKD", "NO", "NODETACH", "NORMALIZE", "NORMALIZED", 
                      "NOT", "NULL_", "NULLIF", "NULLS", "OCTET_LENGTH", 
                      "OF", "OFFSET", "ONLY", "OPEN", "OPTIONAL", "OR", 
                      "ORDER", "ORDINALITY", "OTHERWISE", "PARAMETER", "PARAMETERS", 
                      "PATH", "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", 
                      "PERCENTILE_DISC", "PER_NODE_LIMIT", "PER_SHARD_LIMIT", 
                      "POWER", "PRECISION", "PROCESSLIST", "PROPERTY", "PROPERTY_EXISTS", 
                      "RADIANS", "READ", "READ_CONSISTENCY", "REAL", "RECORD", 
                      "REMOVE", "REPEATABLE", "REPLACE", "RESET", "RETURN", 
                      "ROLLBACK", "RTRIM", "RIGHT", "SAME", "SCHEMA", "SELECT", 
                      "SESSION", "SET", "SHORTEST", "SHOW", "SIGNED", "SIMPLE", 
                      "SIN", "SINH", "SKIP_", "SMALL", "SMALLINT", "SOURCE", 
                      "SQRT", "START", "STDDEV_POP", "STDDEV_SAMP", "STRING", 
                      "SUBSTR", "SUM", "TABLE", "TAN", "TANH", "TEMP", "THEN", 
                      "TIME", "TIMESTAMP", "TIMEZONE", "TO", "TRAIL", "TRAILING", 
                      "TRANSACTION", "TRIM", "TRUE", "TYPE", "TYPED", "UBIGINT", 
                      "UINT", "UINT128", "UINT16", "UINT256", "UINT32", 
                      "UINT64", "UINT8", "UNDIRECTED", "UNION", "UNKNOWN", 
                      "UNSIGNED", "UPPER", "USE", "USMALLINT", "VALUE", 
                      "VARBINARY", "VARCHAR", "VARIABLE", "WALK", "WHEN", 
                      "WHERE", "WITH", "WITHOUT", "WRITE", "XOR", "YIELD", 
                      "ZONE", "ZONED", "ZONED_DATETIME", "ZONED_TIME", "INTERVAL_DAY", 
                      "INTERVAL_WEEK", "INTERVAL_MONTH", "INTERVAL_YEAR", 
                      "PARTITION", "ROW_NUMBER", "RANK", "DENSE_RANK", "CUME_DIST", 
                      "PERCENT_RANK", "OVER", "JOIN", "ON", "INNER", "CROSS", 
                      "CONSTRUCT", "PROPERTIES", "PRIMARY", "KEY", "SLIDING", 
                      "UNTIL", "STEP", "EDGE_SYNONYM", "EDGES_SYNONYM", 
                      "NODE_SYNONYM", "AGGREGATE", "AGGREGATES", "ALTER", 
                      "CATALOG", "CLEAR", "CLONE", "CONSTRAINT", "CURRENT_ROLE", 
                      "DATA", "DIRECTORY", "EXACT", "EXISTING", "FUNCTION", 
                      "GQLSTATUS", "GRANT", "INSTANT", "NOTHING", "NUMERIC", 
                      "PROCEDURE", "PRODUCT", "PROJECT", "QUERY", "RECORDS", 
                      "REFERENCE", "RENAME", "REVOKE", "SUBSTRING", "TEMPORAL", 
                      "UNIQUE", "UNIT", "VALUES", "MULTISET_ALTERNATION_OPERATOR", 
                      "CONCATENATION_OPERATOR", "DOUBLE_COLON", "DOUBLE_PERIOD", 
                      "GREATER_THAN_OR_EQUALS_OPERATOR", "HINT_BEGIN", "LEFT_MINUS_RIGHT", 
                      "LEFT_MINUS_SLASH", "LEFT_SHIFT", "LEFT_TILDE_SLASH", 
                      "LESS_THAN_OR_EQUALS_OPERATOR", "MINUS_SLASH", "NOT_EQUALS_OPERATOR", 
                      "RIGHT_ARROW", "RIGHT_SHIFT", "SAFE_EXQUAL_OPERATOR", 
                      "SLASH_MINUS_RIGHT", "SLASH_TILDE_RIGHT", "TILDE_RIGHT_ARROW", 
                      "TILDE_SLASH", "DOUBLE_SOLIDUS", "ESCAPED_CHARACTER", 
                      "ESCAPED_REVERSE_SOLIDUS", "ESCAPED_QUOTE", "ESCAPED_DOUBLE_QUOTE", 
                      "ESCAPED_GRAVE_ACCENT", "ESCAPED_TAB", "ESCAPED_BACKSPACE", 
                      "ESCAPED_NEWLINE", "ESCAPED_CARRIAGE_RETURN", "ESCAPED_FORM_FEED", 
                      "UNICODE_ESCAPE_VALUE", "UNICODE_4_DIGIT_ESCAPE_VALUE", 
                      "UNICODE_6_DIGIT_ESCAPE_VALUE", "UNSIGNED_DECIMAL_INTEGER", 
                      "UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", 
                      "UNSIGNED_BINARY_INTEGER", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", 
                      "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", "FOUR_DIGIT", 
                      "DOUBLE_DIGIT", "SINGLE_QUOTED_STRING_LITERAL", "DOUBLE_QUOTED_STRING_LITERAL", 
                      "ACCENT_QUOTED_STRING_LITERAL", "BYTE_STRING_LITERAL", 
                      "QUOTE", "DOUBLE_QUOTE", "GRAVE_ACCENT", "REGULAR_IDENTIFIER", 
                      "IDENTIFIER_START", "IDENTIFIER_EXTEND", "SP", "SEPARATOR", 
                      "WHITESPACE", "Comment", "BIDIRECTIONAL_CONTROL_CHARACTER", 
                      "COMMENT", "SIMPLE_COMMENT", "SIMPLE_COMMENT_INTRODUCER", 
                      "SIMPLE_COMMENT_CHARACTER", "BRACKETED_COMMENT", "BRACKETED_COMMENT_INTRODUCER", 
                      "BRACKETED_COMMENT_TERMINATOR", "BRACKETED_COMMENT_CONTENTS", 
                      "GQL_TERMINAL_CHARACTER", "GQL_LANGUAGE_CHARACTER", 
                      "SIMPLE_LATIN_LETTER", "SIMPLE_LATIN_LOWER_CASE_LETTER", 
                      "SIMPLE_LATIN_UPPER_CASE_LETTER", "OTHER_DIGIT", "GQL_SPECIAL_CHARACTER", 
                      "OTHER_LANGUAGE_CHARACTER" ]

    RULE_gqlRequest = 0
    RULE_gqlProgram = 1
    RULE_programActivity = 2
    RULE_sessionActivity = 3
    RULE_sessionActivityCommand = 4
    RULE_transactionActivity = 5
    RULE_endTransactionCommand = 6
    RULE_sessionSetCommand = 7
    RULE_sessionSetSchemaClause = 8
    RULE_sessionSetGraphClause = 9
    RULE_sessionSetTimeZoneClause = 10
    RULE_setTimeZoneValue = 11
    RULE_sessionSetParameterClause = 12
    RULE_sessionSetGraphParameterClause = 13
    RULE_sessionSetBindingTableParameterClause = 14
    RULE_sessionSetValueParameterClause = 15
    RULE_sessionSetParameterName = 16
    RULE_sessionResetCommand = 17
    RULE_sessionResetArguments = 18
    RULE_sessionCloseCommand = 19
    RULE_startTransactionCommand = 20
    RULE_transactionCharacteristics = 21
    RULE_transactionMode = 22
    RULE_transactionAccessMode = 23
    RULE_implementationDefinedAccessMode = 24
    RULE_rollbackCommand = 25
    RULE_commitCommand = 26
    RULE_nestedProcedureSpecification = 27
    RULE_procedureSpecification = 28
    RULE_catalogModifyingProcedureSpecification = 29
    RULE_nestedDataModifyingProcedureSpecification = 30
    RULE_dataModifyingProcedureSpecification = 31
    RULE_nestedQuerySpecification = 32
    RULE_querySpecification = 33
    RULE_unsignedNumericLiteral = 34
    RULE_integerLiteral = 35
    RULE_floatLiteral = 36
    RULE_singleQuotedCharacterSequence = 37
    RULE_doubleQuotedCharacterSequence = 38
    RULE_accentQuotedCharacterSequence = 39
    RULE_nullLiteral = 40
    RULE_temporalLiteral = 41
    RULE_sqlDatetimeLiteral = 42
    RULE_dateLiteral = 43
    RULE_timeLiteral = 44
    RULE_datetimeLiteral = 45
    RULE_durationLiteral = 46
    RULE_sqlIntervalLiteral = 47
    RULE_sqlIntervalType = 48
    RULE_identifier = 49
    RULE_keyWord = 50
    RULE_reservedWord = 51
    RULE_preReservedWord = 52
    RULE_nonReservedWord = 53
    RULE_delimitedIdentifier = 54
    RULE_objectName = 55
    RULE_objectNameOrBindingVariable = 56
    RULE_directoryName = 57
    RULE_schemaName = 58
    RULE_graphName = 59
    RULE_delimitedGraphName = 60
    RULE_graphTypeName = 61
    RULE_elementTypeName = 62
    RULE_bindingTableName = 63
    RULE_delimitedBindingTableName = 64
    RULE_procedureName = 65
    RULE_labelName = 66
    RULE_functionName = 67
    RULE_propertyName = 68
    RULE_fieldName = 69
    RULE_parameterName = 70
    RULE_variable = 71
    RULE_graphVariable = 72
    RULE_graphPatternVariable = 73
    RULE_pathOrSubpathVariable = 74
    RULE_elementVariable = 75
    RULE_pathVariable = 76
    RULE_subpathVariable = 77
    RULE_bindingTableVariable = 78
    RULE_valueVariable = 79
    RULE_bindingVariable = 80
    RULE_predefinedTypeLiteral = 81
    RULE_booleanLiteral = 82
    RULE_characterStringLiteral = 83
    RULE_byteStringLiteral = 84
    RULE_procedureBody = 85
    RULE_bindingVariableDefinitionBlock = 86
    RULE_bindingVariableDefinition = 87
    RULE_statementBlock = 88
    RULE_statement = 89
    RULE_nextStatement = 90
    RULE_graphVariableDefinition = 91
    RULE_optTypedGraphInitializer = 92
    RULE_graphInitializer = 93
    RULE_bindingTableVariableDefinition = 94
    RULE_optTypedBindingTableInitializer = 95
    RULE_bindingTableInitializer = 96
    RULE_valueVariableDefinition = 97
    RULE_optTypedValueInitializer = 98
    RULE_graphExpression = 99
    RULE_currentGraph = 100
    RULE_nestedGraphQuerySpecification = 101
    RULE_bindingTableExpression = 102
    RULE_nestedBindingTableQuerySpecification = 103
    RULE_objectExpressionPrimary = 104
    RULE_linearCatalogModifyingStatement = 105
    RULE_simpleCatalogModifyingStatement = 106
    RULE_primitiveCatalogModifyingStatement = 107
    RULE_createSchemaStatement = 108
    RULE_dropSchemaStatement = 109
    RULE_createGraphStatement = 110
    RULE_openGraphType = 111
    RULE_ofGraphType = 112
    RULE_graphTypeLikeGraph = 113
    RULE_graphSource = 114
    RULE_dropGraphStatement = 115
    RULE_createGraphTypeStatement = 116
    RULE_graphTypeSource = 117
    RULE_copyOfGraphType = 118
    RULE_dropGraphTypeStatement = 119
    RULE_callCatalogModifyingProcedureStatement = 120
    RULE_linearDataModifyingStatement = 121
    RULE_focusedLinearDataModifyingStatement = 122
    RULE_focusedLinearDataModifyingStatementBody = 123
    RULE_focusedNestedDataModifyingProcedureSpecification = 124
    RULE_ambientLinearDataModifyingStatement = 125
    RULE_ambientLinearDataModifyingStatementBody = 126
    RULE_simpleLinearDataAccessingStatement = 127
    RULE_simpleDataAccessingStatement = 128
    RULE_simpleDataModifyingStatement = 129
    RULE_primitiveDataModifyingStatement = 130
    RULE_insertStatement = 131
    RULE_setStatement = 132
    RULE_setItemList = 133
    RULE_setItem = 134
    RULE_setPropertyItem = 135
    RULE_setAllPropertiesItem = 136
    RULE_updatePropertiesItem = 137
    RULE_setLabelItem = 138
    RULE_labelSetSpecification = 139
    RULE_removeStatement = 140
    RULE_removeItemList = 141
    RULE_removeItem = 142
    RULE_removePropertyItem = 143
    RULE_removeLabelItem = 144
    RULE_deleteStatement = 145
    RULE_deleteItemList = 146
    RULE_deleteItem = 147
    RULE_replaceStatement = 148
    RULE_callDataModifyingProcedureStatement = 149
    RULE_queryStatement = 150
    RULE_joinQueryExpression = 151
    RULE_joinRightPart = 152
    RULE_compositeQueryStatement = 153
    RULE_managerStatement = 154
    RULE_killMode = 155
    RULE_compositeQueryExpression = 156
    RULE_queryConjunction = 157
    RULE_setOperator = 158
    RULE_joinType = 159
    RULE_linearQueryStatement = 160
    RULE_focusedLinearQueryStatement = 161
    RULE_focusedQueryStatement = 162
    RULE_focusedLinearQueryStatementPart = 163
    RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 164
    RULE_focusedPrimitiveResultStatement = 165
    RULE_focusedNestedQuerySpecification = 166
    RULE_ambientLinearQueryStatement = 167
    RULE_simpleLinearQueryStatement = 168
    RULE_simpleQueryStatement = 169
    RULE_primitiveQueryStatement = 170
    RULE_matchStatement = 171
    RULE_simpleMatchStatement = 172
    RULE_optionalMatchStatement = 173
    RULE_optionalOperand = 174
    RULE_matchStatementBlock = 175
    RULE_callQueryStatement = 176
    RULE_filterStatement = 177
    RULE_letStatement = 178
    RULE_letVariableDefinitionList = 179
    RULE_letVariableDefinition = 180
    RULE_forStatement = 181
    RULE_forItem = 182
    RULE_forItemAlias = 183
    RULE_forOrdinalityOrOffset = 184
    RULE_orderByAndPageStatement = 185
    RULE_primitiveResultStatement = 186
    RULE_returnStatement = 187
    RULE_returnStatementBody = 188
    RULE_returnItemList = 189
    RULE_returnItem = 190
    RULE_hintItemlist = 191
    RULE_hintItem = 192
    RULE_constructGraphStatement = 193
    RULE_constructElementList = 194
    RULE_constructElement = 195
    RULE_currentElement = 196
    RULE_propertyList = 197
    RULE_newElement = 198
    RULE_newNode = 199
    RULE_newEdge = 200
    RULE_constructElementPatternFiller = 201
    RULE_constructEdgePattern = 202
    RULE_constructEdgePointingRight = 203
    RULE_constructEdgePointingLeft = 204
    RULE_constructEdgeAnyDirection = 205
    RULE_primaryKey = 206
    RULE_constructElementPropertySpecification = 207
    RULE_extendElement = 208
    RULE_startVar = 209
    RULE_endVar = 210
    RULE_selectStatement = 211
    RULE_selectItemList = 212
    RULE_selectItem = 213
    RULE_havingClause = 214
    RULE_selectStatementBody = 215
    RULE_selectGraphMatchList = 216
    RULE_selectGraphMatch = 217
    RULE_selectQuerySpecification = 218
    RULE_callProcedureStatement = 219
    RULE_procedureCall = 220
    RULE_inlineProcedureCall = 221
    RULE_variableScopeClause = 222
    RULE_bindingVariableReferenceList = 223
    RULE_namedProcedureCall = 224
    RULE_procedureArgumentList = 225
    RULE_procedureArgument = 226
    RULE_useGraphClause = 227
    RULE_atSchemaClause = 228
    RULE_bindingVariableReference = 229
    RULE_elementVariableReference = 230
    RULE_pathVariableReference = 231
    RULE_parameter = 232
    RULE_graphPatternBindingTable = 233
    RULE_graphPatternYieldClause = 234
    RULE_graphPatternYieldItemList = 235
    RULE_graphPatternYieldItem = 236
    RULE_graphPattern = 237
    RULE_matchMode = 238
    RULE_repeatableElementsMatchMode = 239
    RULE_differentEdgesMatchMode = 240
    RULE_elementBindingsOrElements = 241
    RULE_edgeBindingsOrEdges = 242
    RULE_pathPatternList = 243
    RULE_pathPattern = 244
    RULE_pathVariableDeclaration = 245
    RULE_keepClause = 246
    RULE_pathPatternPrefix = 247
    RULE_pathModePrefix = 248
    RULE_pathMode = 249
    RULE_pathSearchPrefix = 250
    RULE_allPathSearch = 251
    RULE_pathOrPaths = 252
    RULE_anyPathSearch = 253
    RULE_numberOfPaths = 254
    RULE_shortestPathSearch = 255
    RULE_allShortestPathSearch = 256
    RULE_anyShortestPathSearch = 257
    RULE_countedShortestPathSearch = 258
    RULE_countedShortestGroupSearch = 259
    RULE_numberOfGroups = 260
    RULE_pathPatternExpression = 261
    RULE_pathMultisetAlternation = 262
    RULE_pathPatternUnion = 263
    RULE_pathTerm = 264
    RULE_pathFactor = 265
    RULE_quantifiedPathPrimary = 266
    RULE_questionedPathPrimary = 267
    RULE_pathPrimary = 268
    RULE_elementPattern = 269
    RULE_nodePattern = 270
    RULE_elementPatternFiller = 271
    RULE_elementVariableDeclaration = 272
    RULE_isLabelExpression = 273
    RULE_isOrColon = 274
    RULE_elementPatternPredicate = 275
    RULE_elementPropertySpecification = 276
    RULE_propertyKeyValuePairList = 277
    RULE_propertyKeyValuePair = 278
    RULE_perNodeLimitClause = 279
    RULE_perNodeLimitWherePredicate = 280
    RULE_perNodeLimitLeftWherePredicate = 281
    RULE_perNodeLimitRightWherePredicate = 282
    RULE_perNodeLimitBothWherePredicate = 283
    RULE_perNodeLimitPropertyPredicate = 284
    RULE_perNodeLimitLeftPropertyPredicate = 285
    RULE_perNodeLimitRightPropertyPredicate = 286
    RULE_perNodeLimitBothPropertyPredicate = 287
    RULE_perShardLimitClause = 288
    RULE_perShardLimitWherePredicate = 289
    RULE_perShardLimitLeftWherePredicate = 290
    RULE_perShardLimitRightWherePredicate = 291
    RULE_perShardLimitBothWherePredicate = 292
    RULE_perShardLimitPropertyPredicate = 293
    RULE_perShardLimitLeftPropertyPredicate = 294
    RULE_perShardLimitRightPropertyPredicate = 295
    RULE_perShardLimitBothPropertyPredicate = 296
    RULE_edgePattern = 297
    RULE_fullEdgePattern = 298
    RULE_fullEdgePointingLeft = 299
    RULE_fullEdgeUndirected = 300
    RULE_fullEdgePointingRight = 301
    RULE_fullEdgeLeftOrUndirected = 302
    RULE_fullEdgeUndirectedOrRight = 303
    RULE_fullEdgeLeftOrRight = 304
    RULE_fullEdgeAnyDirection = 305
    RULE_abbreviatedEdgePattern = 306
    RULE_parenthesizedPathPatternExpression = 307
    RULE_parenthesizedPathPatternExpressionBody = 308
    RULE_untilPart = 309
    RULE_slidingPart = 310
    RULE_lengthPart = 311
    RULE_stepPart = 312
    RULE_subpathVariableDeclaration = 313
    RULE_parenthesizedPathPatternWhereClause = 314
    RULE_insertGraphPattern = 315
    RULE_insertPathPatternList = 316
    RULE_insertPathPattern = 317
    RULE_insertNodePattern = 318
    RULE_insertEdgePattern = 319
    RULE_insertEdgePointingLeft = 320
    RULE_insertEdgePointingRight = 321
    RULE_insertEdgeUndirected = 322
    RULE_insertElementPatternFiller = 323
    RULE_labelAndPropertySetSpecification = 324
    RULE_labelExpression = 325
    RULE_labelTerm = 326
    RULE_labelFactor = 327
    RULE_labelPrimary = 328
    RULE_wildcardLabel = 329
    RULE_parenthesizedLabelExpression = 330
    RULE_graphPatternQuantifier = 331
    RULE_fixedQuantifier = 332
    RULE_generalQuantifier = 333
    RULE_lowerBound = 334
    RULE_upperBound = 335
    RULE_simplifiedPathPatternExpression = 336
    RULE_simplifiedDefaultingLeft = 337
    RULE_simplifiedDefaultingUndirected = 338
    RULE_simplifiedDefaultingRight = 339
    RULE_simplifiedDefaultingLeftOrUndirected = 340
    RULE_simplifiedDefaultingUndirectedOrRight = 341
    RULE_simplifiedDefaultingLeftOrRight = 342
    RULE_simplifiedDefaultingAnyDirection = 343
    RULE_simplifiedContents = 344
    RULE_simplifiedPathUnion = 345
    RULE_simplifiedMultisetAlternation = 346
    RULE_simplifiedTerm = 347
    RULE_simplifiedFactorLow = 348
    RULE_simplifiedFactorHigh = 349
    RULE_simplifiedQuantified = 350
    RULE_simplifiedQuestioned = 351
    RULE_simplifiedTertiary = 352
    RULE_simplifiedDirectionOverride = 353
    RULE_simplifiedOverrideLeft = 354
    RULE_simplifiedOverrideUndirected = 355
    RULE_simplifiedOverrideRight = 356
    RULE_simplifiedOverrideLeftOrUndirected = 357
    RULE_simplifiedOverrideUndirectedOrRight = 358
    RULE_simplifiedOverrideLeftOrRight = 359
    RULE_simplifiedOverrideAnyDirection = 360
    RULE_simplifiedSecondary = 361
    RULE_simplifiedNegation = 362
    RULE_simplifiedPrimary = 363
    RULE_whereClause = 364
    RULE_yieldClause = 365
    RULE_yieldItemList = 366
    RULE_yieldItem = 367
    RULE_yieldItemName = 368
    RULE_yieldItemAlias = 369
    RULE_groupByClause = 370
    RULE_groupingElementList = 371
    RULE_groupingElement = 372
    RULE_emptyGroupingSet = 373
    RULE_orderByClause = 374
    RULE_aggregateFunction = 375
    RULE_generalSetFunctionType = 376
    RULE_setQuantifier = 377
    RULE_binarySetFunctionType = 378
    RULE_windowFunctionType = 379
    RULE_windowClause = 380
    RULE_sortSpecificationList = 381
    RULE_sortSpecification = 382
    RULE_sortKey = 383
    RULE_orderingSpecification = 384
    RULE_nullOrdering = 385
    RULE_limitClause = 386
    RULE_offsetClause = 387
    RULE_offsetSynonym = 388
    RULE_nestedGraphTypeSpecification = 389
    RULE_graphTypeSpecificationBody = 390
    RULE_elementTypeDefinitionList = 391
    RULE_elementTypeDefinition = 392
    RULE_nodeTypeDefinition = 393
    RULE_nodeTypePattern = 394
    RULE_nodeTypePhrase = 395
    RULE_nodeTypeName = 396
    RULE_nodeTypeFiller = 397
    RULE_nodeTypeLabelSetDefinition = 398
    RULE_nodeTypePropertyTypeSetDefinition = 399
    RULE_edgeTypeDefinition = 400
    RULE_edgeTypePattern = 401
    RULE_edgeTypePhrase = 402
    RULE_edgeTypeName = 403
    RULE_edgeTypeFiller = 404
    RULE_edgeTypeLabelSetDefinition = 405
    RULE_edgeTypePropertyTypeSetDefinition = 406
    RULE_fullEdgeTypePattern = 407
    RULE_fullEdgeTypePatternPointingRight = 408
    RULE_fullEdgeTypePatternPointingLeft = 409
    RULE_fullEdgeTypePatternUndirected = 410
    RULE_arcTypePointingRight = 411
    RULE_arcTypePointingLeft = 412
    RULE_arcTypeUndirected = 413
    RULE_arcTypeFiller = 414
    RULE_abbreviatedEdgeTypePattern = 415
    RULE_abbreviatedEdgeTypePatternPointingRight = 416
    RULE_abbreviatedEdgeTypePatternPointingLeft = 417
    RULE_abbreviatedEdgeTypePatternUndirected = 418
    RULE_nodeTypeReference = 419
    RULE_sourceNodeTypeReference = 420
    RULE_destinationNodeTypeReference = 421
    RULE_edgeKind = 422
    RULE_endpointDefinition = 423
    RULE_endpointPairDefinition = 424
    RULE_endpointPairDefinitionPointingRight = 425
    RULE_endpointPairDefinitionPointingLeft = 426
    RULE_endpointPairDefinitionUndirected = 427
    RULE_connectorPointingRight = 428
    RULE_connectorUndirected = 429
    RULE_sourceNodeTypeName = 430
    RULE_destinationNodeTypeName = 431
    RULE_labelSetDefinition = 432
    RULE_propertyTypeSetDefinition = 433
    RULE_propertyTypeDefinitionList = 434
    RULE_propertyTypeDefinition = 435
    RULE_propertyValueType = 436
    RULE_bindingTableType = 437
    RULE_valueType = 438
    RULE_typed = 439
    RULE_predefinedType = 440
    RULE_booleanType = 441
    RULE_characterStringType = 442
    RULE_byteStringType = 443
    RULE_minLength = 444
    RULE_maxLength = 445
    RULE_fixedLength = 446
    RULE_numericType = 447
    RULE_exactNumericType = 448
    RULE_binaryExactNumericType = 449
    RULE_signedBinaryExactNumericType = 450
    RULE_unsignedBinaryExactNumericType = 451
    RULE_verboseBinaryExactNumericType = 452
    RULE_decimalExactNumericType = 453
    RULE_precision = 454
    RULE_scale = 455
    RULE_approximateNumericType = 456
    RULE_temporalType = 457
    RULE_temporalInstantType = 458
    RULE_temporalDurationType = 459
    RULE_datetimeType = 460
    RULE_localdatetimeType = 461
    RULE_dateType = 462
    RULE_timeType = 463
    RULE_localtimeType = 464
    RULE_durationType = 465
    RULE_referenceValueType = 466
    RULE_graphReferenceValueType = 467
    RULE_closedGraphReferenceValueType = 468
    RULE_openGraphReferenceValueType = 469
    RULE_bindingTableReferenceValueType = 470
    RULE_nodeReferenceValueType = 471
    RULE_closedNodeReferenceValueType = 472
    RULE_openNodeReferenceValueType = 473
    RULE_edgeReferenceValueType = 474
    RULE_closedEdgeReferenceValueType = 475
    RULE_openEdgeReferenceValueType = 476
    RULE_listValueTypeName = 477
    RULE_listValueTypeNameSynonym = 478
    RULE_fieldTypesSpecification = 479
    RULE_fieldTypeList = 480
    RULE_pathValueType = 481
    RULE_notNull = 482
    RULE_fieldType = 483
    RULE_schemaReference = 484
    RULE_absoluteCatalogSchemaReference = 485
    RULE_catalogSchemaParentAndName = 486
    RULE_relativeCatalogSchemaReference = 487
    RULE_predefinedSchemaReference = 488
    RULE_absoluteDirectoryPath = 489
    RULE_relativeDirectoryPath = 490
    RULE_simpleDirectoryPath = 491
    RULE_graphReference = 492
    RULE_catalogGraphParentAndName = 493
    RULE_homeGraph = 494
    RULE_graphTypeReference = 495
    RULE_catalogGraphTypeParentAndName = 496
    RULE_bindingTableReference = 497
    RULE_catalogBindingTableParentAndName = 498
    RULE_procedureReference = 499
    RULE_catalogProcedureParentAndName = 500
    RULE_catalogObjectParentReference = 501
    RULE_referenceParameter = 502
    RULE_externalObjectReference = 503
    RULE_comparisonPredicateCond = 504
    RULE_compOp = 505
    RULE_nullPredicateCond = 506
    RULE_normalizedPredicateCond = 507
    RULE_directedPredicateCond = 508
    RULE_labeledPredicateCond = 509
    RULE_sourceDestinationPredicateCond = 510
    RULE_expression = 511
    RULE_expressionPredicate = 512
    RULE_expressionAtom = 513
    RULE_truthValue = 514
    RULE_unaryOperator = 515
    RULE_functionCall = 516
    RULE_numericFunction = 517
    RULE_functionParameter = 518
    RULE_propertyReference = 519
    RULE_oneArgNumericFunctionName = 520
    RULE_twoArgNumericFunctionName = 521
    RULE_stringFunction = 522
    RULE_listFunction = 523
    RULE_caseFunction = 524
    RULE_simpleWhenClause = 525
    RULE_searchedWhenClause = 526
    RULE_elseClause = 527
    RULE_whenOperand = 528
    RULE_castFunction = 529
    RULE_elementFunction = 530
    RULE_elementFunctionName = 531
    RULE_datetimeValueFunction = 532
    RULE_dateFunction = 533
    RULE_timeFunction = 534
    RULE_localTimeFunction = 535
    RULE_datetimeFunction = 536
    RULE_localDatetimeFunction = 537
    RULE_durationFunction = 538
    RULE_dateFunctionParameters = 539
    RULE_timeFunctionParameters = 540
    RULE_datetimeFunctionParameters = 541
    RULE_dateString = 542
    RULE_timeString = 543
    RULE_datetimeString = 544
    RULE_durationFunctionParameters = 545
    RULE_durationString = 546
    RULE_generalFunction = 547
    RULE_collectionValueConstructor = 548
    RULE_trimSpecification = 549
    RULE_normalForm = 550
    RULE_listValueConstructor = 551
    RULE_listValue = 552
    RULE_recordValueConstructor = 553
    RULE_field = 554
    RULE_pathValueConstructor = 555
    RULE_mapValueConstructor = 556
    RULE_mapElement = 557
    RULE_unsignedValueSpecification = 558
    RULE_unsignedIntegerSpecification = 559
    RULE_unsignedBooleanSpecification = 560
    RULE_parameterValueSpecification = 561
    RULE_predefinedParameter = 562
    RULE_unsignedLiteral = 563
    RULE_generalLiteral = 564
    RULE_listLiteral = 565
    RULE_mapLiteral = 566
    RULE_mapElementLiteral = 567
    RULE_recordLiteral = 568
    RULE_recordFieldLiteral = 569

    ruleNames =  [ "gqlRequest", "gqlProgram", "programActivity", "sessionActivity", 
                   "sessionActivityCommand", "transactionActivity", "endTransactionCommand", 
                   "sessionSetCommand", "sessionSetSchemaClause", "sessionSetGraphClause", 
                   "sessionSetTimeZoneClause", "setTimeZoneValue", "sessionSetParameterClause", 
                   "sessionSetGraphParameterClause", "sessionSetBindingTableParameterClause", 
                   "sessionSetValueParameterClause", "sessionSetParameterName", 
                   "sessionResetCommand", "sessionResetArguments", "sessionCloseCommand", 
                   "startTransactionCommand", "transactionCharacteristics", 
                   "transactionMode", "transactionAccessMode", "implementationDefinedAccessMode", 
                   "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
                   "procedureSpecification", "catalogModifyingProcedureSpecification", 
                   "nestedDataModifyingProcedureSpecification", "dataModifyingProcedureSpecification", 
                   "nestedQuerySpecification", "querySpecification", "unsignedNumericLiteral", 
                   "integerLiteral", "floatLiteral", "singleQuotedCharacterSequence", 
                   "doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", 
                   "nullLiteral", "temporalLiteral", "sqlDatetimeLiteral", 
                   "dateLiteral", "timeLiteral", "datetimeLiteral", "durationLiteral", 
                   "sqlIntervalLiteral", "sqlIntervalType", "identifier", 
                   "keyWord", "reservedWord", "preReservedWord", "nonReservedWord", 
                   "delimitedIdentifier", "objectName", "objectNameOrBindingVariable", 
                   "directoryName", "schemaName", "graphName", "delimitedGraphName", 
                   "graphTypeName", "elementTypeName", "bindingTableName", 
                   "delimitedBindingTableName", "procedureName", "labelName", 
                   "functionName", "propertyName", "fieldName", "parameterName", 
                   "variable", "graphVariable", "graphPatternVariable", 
                   "pathOrSubpathVariable", "elementVariable", "pathVariable", 
                   "subpathVariable", "bindingTableVariable", "valueVariable", 
                   "bindingVariable", "predefinedTypeLiteral", "booleanLiteral", 
                   "characterStringLiteral", "byteStringLiteral", "procedureBody", 
                   "bindingVariableDefinitionBlock", "bindingVariableDefinition", 
                   "statementBlock", "statement", "nextStatement", "graphVariableDefinition", 
                   "optTypedGraphInitializer", "graphInitializer", "bindingTableVariableDefinition", 
                   "optTypedBindingTableInitializer", "bindingTableInitializer", 
                   "valueVariableDefinition", "optTypedValueInitializer", 
                   "graphExpression", "currentGraph", "nestedGraphQuerySpecification", 
                   "bindingTableExpression", "nestedBindingTableQuerySpecification", 
                   "objectExpressionPrimary", "linearCatalogModifyingStatement", 
                   "simpleCatalogModifyingStatement", "primitiveCatalogModifyingStatement", 
                   "createSchemaStatement", "dropSchemaStatement", "createGraphStatement", 
                   "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
                   "graphSource", "dropGraphStatement", "createGraphTypeStatement", 
                   "graphTypeSource", "copyOfGraphType", "dropGraphTypeStatement", 
                   "callCatalogModifyingProcedureStatement", "linearDataModifyingStatement", 
                   "focusedLinearDataModifyingStatement", "focusedLinearDataModifyingStatementBody", 
                   "focusedNestedDataModifyingProcedureSpecification", "ambientLinearDataModifyingStatement", 
                   "ambientLinearDataModifyingStatementBody", "simpleLinearDataAccessingStatement", 
                   "simpleDataAccessingStatement", "simpleDataModifyingStatement", 
                   "primitiveDataModifyingStatement", "insertStatement", 
                   "setStatement", "setItemList", "setItem", "setPropertyItem", 
                   "setAllPropertiesItem", "updatePropertiesItem", "setLabelItem", 
                   "labelSetSpecification", "removeStatement", "removeItemList", 
                   "removeItem", "removePropertyItem", "removeLabelItem", 
                   "deleteStatement", "deleteItemList", "deleteItem", "replaceStatement", 
                   "callDataModifyingProcedureStatement", "queryStatement", 
                   "joinQueryExpression", "joinRightPart", "compositeQueryStatement", 
                   "managerStatement", "killMode", "compositeQueryExpression", 
                   "queryConjunction", "setOperator", "joinType", "linearQueryStatement", 
                   "focusedLinearQueryStatement", "focusedQueryStatement", 
                   "focusedLinearQueryStatementPart", "focusedLinearQueryAndPrimitiveResultStatementPart", 
                   "focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
                   "ambientLinearQueryStatement", "simpleLinearQueryStatement", 
                   "simpleQueryStatement", "primitiveQueryStatement", "matchStatement", 
                   "simpleMatchStatement", "optionalMatchStatement", "optionalOperand", 
                   "matchStatementBlock", "callQueryStatement", "filterStatement", 
                   "letStatement", "letVariableDefinitionList", "letVariableDefinition", 
                   "forStatement", "forItem", "forItemAlias", "forOrdinalityOrOffset", 
                   "orderByAndPageStatement", "primitiveResultStatement", 
                   "returnStatement", "returnStatementBody", "returnItemList", 
                   "returnItem", "hintItemlist", "hintItem", "constructGraphStatement", 
                   "constructElementList", "constructElement", "currentElement", 
                   "propertyList", "newElement", "newNode", "newEdge", "constructElementPatternFiller", 
                   "constructEdgePattern", "constructEdgePointingRight", 
                   "constructEdgePointingLeft", "constructEdgeAnyDirection", 
                   "primaryKey", "constructElementPropertySpecification", 
                   "extendElement", "startVar", "endVar", "selectStatement", 
                   "selectItemList", "selectItem", "havingClause", "selectStatementBody", 
                   "selectGraphMatchList", "selectGraphMatch", "selectQuerySpecification", 
                   "callProcedureStatement", "procedureCall", "inlineProcedureCall", 
                   "variableScopeClause", "bindingVariableReferenceList", 
                   "namedProcedureCall", "procedureArgumentList", "procedureArgument", 
                   "useGraphClause", "atSchemaClause", "bindingVariableReference", 
                   "elementVariableReference", "pathVariableReference", 
                   "parameter", "graphPatternBindingTable", "graphPatternYieldClause", 
                   "graphPatternYieldItemList", "graphPatternYieldItem", 
                   "graphPattern", "matchMode", "repeatableElementsMatchMode", 
                   "differentEdgesMatchMode", "elementBindingsOrElements", 
                   "edgeBindingsOrEdges", "pathPatternList", "pathPattern", 
                   "pathVariableDeclaration", "keepClause", "pathPatternPrefix", 
                   "pathModePrefix", "pathMode", "pathSearchPrefix", "allPathSearch", 
                   "pathOrPaths", "anyPathSearch", "numberOfPaths", "shortestPathSearch", 
                   "allShortestPathSearch", "anyShortestPathSearch", "countedShortestPathSearch", 
                   "countedShortestGroupSearch", "numberOfGroups", "pathPatternExpression", 
                   "pathMultisetAlternation", "pathPatternUnion", "pathTerm", 
                   "pathFactor", "quantifiedPathPrimary", "questionedPathPrimary", 
                   "pathPrimary", "elementPattern", "nodePattern", "elementPatternFiller", 
                   "elementVariableDeclaration", "isLabelExpression", "isOrColon", 
                   "elementPatternPredicate", "elementPropertySpecification", 
                   "propertyKeyValuePairList", "propertyKeyValuePair", "perNodeLimitClause", 
                   "perNodeLimitWherePredicate", "perNodeLimitLeftWherePredicate", 
                   "perNodeLimitRightWherePredicate", "perNodeLimitBothWherePredicate", 
                   "perNodeLimitPropertyPredicate", "perNodeLimitLeftPropertyPredicate", 
                   "perNodeLimitRightPropertyPredicate", "perNodeLimitBothPropertyPredicate", 
                   "perShardLimitClause", "perShardLimitWherePredicate", 
                   "perShardLimitLeftWherePredicate", "perShardLimitRightWherePredicate", 
                   "perShardLimitBothWherePredicate", "perShardLimitPropertyPredicate", 
                   "perShardLimitLeftPropertyPredicate", "perShardLimitRightPropertyPredicate", 
                   "perShardLimitBothPropertyPredicate", "edgePattern", 
                   "fullEdgePattern", "fullEdgePointingLeft", "fullEdgeUndirected", 
                   "fullEdgePointingRight", "fullEdgeLeftOrUndirected", 
                   "fullEdgeUndirectedOrRight", "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
                   "abbreviatedEdgePattern", "parenthesizedPathPatternExpression", 
                   "parenthesizedPathPatternExpressionBody", "untilPart", 
                   "slidingPart", "lengthPart", "stepPart", "subpathVariableDeclaration", 
                   "parenthesizedPathPatternWhereClause", "insertGraphPattern", 
                   "insertPathPatternList", "insertPathPattern", "insertNodePattern", 
                   "insertEdgePattern", "insertEdgePointingLeft", "insertEdgePointingRight", 
                   "insertEdgeUndirected", "insertElementPatternFiller", 
                   "labelAndPropertySetSpecification", "labelExpression", 
                   "labelTerm", "labelFactor", "labelPrimary", "wildcardLabel", 
                   "parenthesizedLabelExpression", "graphPatternQuantifier", 
                   "fixedQuantifier", "generalQuantifier", "lowerBound", 
                   "upperBound", "simplifiedPathPatternExpression", "simplifiedDefaultingLeft", 
                   "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
                   "simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
                   "simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
                   "simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
                   "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
                   "simplifiedQuantified", "simplifiedQuestioned", "simplifiedTertiary", 
                   "simplifiedDirectionOverride", "simplifiedOverrideLeft", 
                   "simplifiedOverrideUndirected", "simplifiedOverrideRight", 
                   "simplifiedOverrideLeftOrUndirected", "simplifiedOverrideUndirectedOrRight", 
                   "simplifiedOverrideLeftOrRight", "simplifiedOverrideAnyDirection", 
                   "simplifiedSecondary", "simplifiedNegation", "simplifiedPrimary", 
                   "whereClause", "yieldClause", "yieldItemList", "yieldItem", 
                   "yieldItemName", "yieldItemAlias", "groupByClause", "groupingElementList", 
                   "groupingElement", "emptyGroupingSet", "orderByClause", 
                   "aggregateFunction", "generalSetFunctionType", "setQuantifier", 
                   "binarySetFunctionType", "windowFunctionType", "windowClause", 
                   "sortSpecificationList", "sortSpecification", "sortKey", 
                   "orderingSpecification", "nullOrdering", "limitClause", 
                   "offsetClause", "offsetSynonym", "nestedGraphTypeSpecification", 
                   "graphTypeSpecificationBody", "elementTypeDefinitionList", 
                   "elementTypeDefinition", "nodeTypeDefinition", "nodeTypePattern", 
                   "nodeTypePhrase", "nodeTypeName", "nodeTypeFiller", "nodeTypeLabelSetDefinition", 
                   "nodeTypePropertyTypeSetDefinition", "edgeTypeDefinition", 
                   "edgeTypePattern", "edgeTypePhrase", "edgeTypeName", 
                   "edgeTypeFiller", "edgeTypeLabelSetDefinition", "edgeTypePropertyTypeSetDefinition", 
                   "fullEdgeTypePattern", "fullEdgeTypePatternPointingRight", 
                   "fullEdgeTypePatternPointingLeft", "fullEdgeTypePatternUndirected", 
                   "arcTypePointingRight", "arcTypePointingLeft", "arcTypeUndirected", 
                   "arcTypeFiller", "abbreviatedEdgeTypePattern", "abbreviatedEdgeTypePatternPointingRight", 
                   "abbreviatedEdgeTypePatternPointingLeft", "abbreviatedEdgeTypePatternUndirected", 
                   "nodeTypeReference", "sourceNodeTypeReference", "destinationNodeTypeReference", 
                   "edgeKind", "endpointDefinition", "endpointPairDefinition", 
                   "endpointPairDefinitionPointingRight", "endpointPairDefinitionPointingLeft", 
                   "endpointPairDefinitionUndirected", "connectorPointingRight", 
                   "connectorUndirected", "sourceNodeTypeName", "destinationNodeTypeName", 
                   "labelSetDefinition", "propertyTypeSetDefinition", "propertyTypeDefinitionList", 
                   "propertyTypeDefinition", "propertyValueType", "bindingTableType", 
                   "valueType", "typed", "predefinedType", "booleanType", 
                   "characterStringType", "byteStringType", "minLength", 
                   "maxLength", "fixedLength", "numericType", "exactNumericType", 
                   "binaryExactNumericType", "signedBinaryExactNumericType", 
                   "unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", 
                   "decimalExactNumericType", "precision", "scale", "approximateNumericType", 
                   "temporalType", "temporalInstantType", "temporalDurationType", 
                   "datetimeType", "localdatetimeType", "dateType", "timeType", 
                   "localtimeType", "durationType", "referenceValueType", 
                   "graphReferenceValueType", "closedGraphReferenceValueType", 
                   "openGraphReferenceValueType", "bindingTableReferenceValueType", 
                   "nodeReferenceValueType", "closedNodeReferenceValueType", 
                   "openNodeReferenceValueType", "edgeReferenceValueType", 
                   "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
                   "listValueTypeName", "listValueTypeNameSynonym", "fieldTypesSpecification", 
                   "fieldTypeList", "pathValueType", "notNull", "fieldType", 
                   "schemaReference", "absoluteCatalogSchemaReference", 
                   "catalogSchemaParentAndName", "relativeCatalogSchemaReference", 
                   "predefinedSchemaReference", "absoluteDirectoryPath", 
                   "relativeDirectoryPath", "simpleDirectoryPath", "graphReference", 
                   "catalogGraphParentAndName", "homeGraph", "graphTypeReference", 
                   "catalogGraphTypeParentAndName", "bindingTableReference", 
                   "catalogBindingTableParentAndName", "procedureReference", 
                   "catalogProcedureParentAndName", "catalogObjectParentReference", 
                   "referenceParameter", "externalObjectReference", "comparisonPredicateCond", 
                   "compOp", "nullPredicateCond", "normalizedPredicateCond", 
                   "directedPredicateCond", "labeledPredicateCond", "sourceDestinationPredicateCond", 
                   "expression", "expressionPredicate", "expressionAtom", 
                   "truthValue", "unaryOperator", "functionCall", "numericFunction", 
                   "functionParameter", "propertyReference", "oneArgNumericFunctionName", 
                   "twoArgNumericFunctionName", "stringFunction", "listFunction", 
                   "caseFunction", "simpleWhenClause", "searchedWhenClause", 
                   "elseClause", "whenOperand", "castFunction", "elementFunction", 
                   "elementFunctionName", "datetimeValueFunction", "dateFunction", 
                   "timeFunction", "localTimeFunction", "datetimeFunction", 
                   "localDatetimeFunction", "durationFunction", "dateFunctionParameters", 
                   "timeFunctionParameters", "datetimeFunctionParameters", 
                   "dateString", "timeString", "datetimeString", "durationFunctionParameters", 
                   "durationString", "generalFunction", "collectionValueConstructor", 
                   "trimSpecification", "normalForm", "listValueConstructor", 
                   "listValue", "recordValueConstructor", "field", "pathValueConstructor", 
                   "mapValueConstructor", "mapElement", "unsignedValueSpecification", 
                   "unsignedIntegerSpecification", "unsignedBooleanSpecification", 
                   "parameterValueSpecification", "predefinedParameter", 
                   "unsignedLiteral", "generalLiteral", "listLiteral", "mapLiteral", 
                   "mapElementLiteral", "recordLiteral", "recordFieldLiteral" ]

    EOF = Token.EOF
    AMPERSAND=1
    ASTERISK=2
    CIRCUMFLEX=3
    COLON=4
    COMMA=5
    DOLLAR_SIGN=6
    EQUALS_OPERATOR=7
    EXCLAMATION_MARK=8
    RIGHT_ANGLE_BRACKET=9
    LEFT_BRACE=10
    LEFT_BRACKET=11
    LEFT_PAREN=12
    LEFT_ANGLE_BRACKET=13
    MINUS_SIGN=14
    PERCENT=15
    PERIOD=16
    PLUS_SIGN=17
    QUESTION_MARK=18
    REVERSE_SOLIDUS=19
    RIGHT_BRACE=20
    RIGHT_BRACKET=21
    RIGHT_PAREN=22
    SEMICOLON=23
    SOLIDUS=24
    TILDE=25
    UNDERSCORE=26
    VERTICAL_BAR=27
    ABS=28
    ACOS=29
    ACYCLIC=30
    ALL=31
    ALL_DIFFERENT=32
    ALLOW_ANONYMOUS_TABLE=33
    AND=34
    ANY=35
    ARRAY=36
    AS=37
    ASC=38
    ASCENDING=39
    ASIN=40
    AT=41
    ATAN=42
    AVG=43
    BETWEEN=44
    BIG=45
    BIGINT=46
    BINARY=47
    BINDING=48
    BINDINGS=49
    BOOL=50
    BOOLEAN=51
    BOTH=52
    BTRIM=53
    BY=54
    BYTE_LENGTH=55
    BYTES=56
    CALL=57
    CASE=58
    CAST=59
    CEIL=60
    CEILING=61
    CHAR_LENGTH=62
    CHARACTER_LENGTH=63
    CHARACTERISTICS=64
    CLOSE=65
    COALESCE=66
    COLLECT=67
    COMMIT=68
    CONNECTION=69
    CONNECTING=70
    COPY=71
    COS=72
    COSH=73
    COT=74
    COUNT=75
    CREATE=76
    CURRENT_DATE=77
    CURRENT_GRAPH=78
    CURRENT_PROPERTY_GRAPH=79
    CURRENT_SCHEMA=80
    CURRENT_TIME=81
    CURRENT_TIMESTAMP=82
    CURRENT_USER=83
    DATE=84
    DATETIME=85
    DEC=86
    DECIMAL=87
    DEGREES=88
    DELETE=89
    DESC=90
    DESCENDING=91
    DESTINATION=92
    DETACH=93
    DIFFERENT=94
    DIRECTED=95
    DISTINCT=96
    DOUBLE=97
    DROP=98
    DURATION=99
    DURATION_BETWEEN=100
    ELEMENT=101
    ELEMENT_ID=102
    ELEMENTS=103
    ELSE=104
    END=105
    EXCEPT=106
    EXISTS=107
    EXP=108
    FALSE=109
    FILTER=110
    FINISH=111
    FIRST=112
    FLOAT=113
    FLOAT128=114
    FLOAT16=115
    FLOAT256=116
    FLOAT32=117
    FLOAT64=118
    FLOOR=119
    FOR=120
    FROM=121
    GRAPH=122
    GROUP=123
    GROUPS=124
    GROUP_CONCAT=125
    HAVING=126
    HOME_GRAPH=127
    HOME_PROPERTY_GRAPH=128
    HOME_SCHEMA=129
    ID=130
    I_DONT_KNOW_1=131
    I_DONT_KNOW_2=132
    I_DONT_KNOW_3=133
    I_DONT_KNOW_4=134
    I_DONT_KNOW_5=135
    IF=136
    IN=137
    INSERT=138
    INT=139
    INT8=140
    INT16=141
    INT32=142
    INT64=143
    INT128=144
    INT256=145
    INTEGER=146
    INTEGER8=147
    INTEGER16=148
    INTEGER32=149
    INTEGER64=150
    INTEGER128=151
    INTEGER256=152
    INTERSECT=153
    IS=154
    KEEP=155
    LABEL=156
    LABELED=157
    LABELS=158
    LAST=159
    KILL=160
    LEADING=161
    LEFT=162
    LENGTH=163
    LET=164
    LIKE=165
    LIMIT=166
    LIST=167
    LN=168
    LOCAL=169
    LOCAL_DATETIME=170
    LOCAL_TIME=171
    LOCAL_TIMESTAMP=172
    LOG=173
    LOG10=174
    LONG=175
    LOWER=176
    LTRIM=177
    MAP=178
    MATCH=179
    MAX_=180
    MIN_=181
    MOD=182
    NEXT=183
    NFC=184
    NFD=185
    NFKC=186
    NFKD=187
    NO=188
    NODETACH=189
    NORMALIZE=190
    NORMALIZED=191
    NOT=192
    NULL_=193
    NULLIF=194
    NULLS=195
    OCTET_LENGTH=196
    OF=197
    OFFSET=198
    ONLY=199
    OPEN=200
    OPTIONAL=201
    OR=202
    ORDER=203
    ORDINALITY=204
    OTHERWISE=205
    PARAMETER=206
    PARAMETERS=207
    PATH=208
    PATH_LENGTH=209
    PATHS=210
    PERCENTILE_CONT=211
    PERCENTILE_DISC=212
    PER_NODE_LIMIT=213
    PER_SHARD_LIMIT=214
    POWER=215
    PRECISION=216
    PROCESSLIST=217
    PROPERTY=218
    PROPERTY_EXISTS=219
    RADIANS=220
    READ=221
    READ_CONSISTENCY=222
    REAL=223
    RECORD=224
    REMOVE=225
    REPEATABLE=226
    REPLACE=227
    RESET=228
    RETURN=229
    ROLLBACK=230
    RTRIM=231
    RIGHT=232
    SAME=233
    SCHEMA=234
    SELECT=235
    SESSION=236
    SET=237
    SHORTEST=238
    SHOW=239
    SIGNED=240
    SIMPLE=241
    SIN=242
    SINH=243
    SKIP_=244
    SMALL=245
    SMALLINT=246
    SOURCE=247
    SQRT=248
    START=249
    STDDEV_POP=250
    STDDEV_SAMP=251
    STRING=252
    SUBSTR=253
    SUM=254
    TABLE=255
    TAN=256
    TANH=257
    TEMP=258
    THEN=259
    TIME=260
    TIMESTAMP=261
    TIMEZONE=262
    TO=263
    TRAIL=264
    TRAILING=265
    TRANSACTION=266
    TRIM=267
    TRUE=268
    TYPE=269
    TYPED=270
    UBIGINT=271
    UINT=272
    UINT128=273
    UINT16=274
    UINT256=275
    UINT32=276
    UINT64=277
    UINT8=278
    UNDIRECTED=279
    UNION=280
    UNKNOWN=281
    UNSIGNED=282
    UPPER=283
    USE=284
    USMALLINT=285
    VALUE=286
    VARBINARY=287
    VARCHAR=288
    VARIABLE=289
    WALK=290
    WHEN=291
    WHERE=292
    WITH=293
    WITHOUT=294
    WRITE=295
    XOR=296
    YIELD=297
    ZONE=298
    ZONED=299
    ZONED_DATETIME=300
    ZONED_TIME=301
    INTERVAL_DAY=302
    INTERVAL_WEEK=303
    INTERVAL_MONTH=304
    INTERVAL_YEAR=305
    PARTITION=306
    ROW_NUMBER=307
    RANK=308
    DENSE_RANK=309
    CUME_DIST=310
    PERCENT_RANK=311
    OVER=312
    JOIN=313
    ON=314
    INNER=315
    CROSS=316
    CONSTRUCT=317
    PROPERTIES=318
    PRIMARY=319
    KEY=320
    SLIDING=321
    UNTIL=322
    STEP=323
    EDGE_SYNONYM=324
    EDGES_SYNONYM=325
    NODE_SYNONYM=326
    AGGREGATE=327
    AGGREGATES=328
    ALTER=329
    CATALOG=330
    CLEAR=331
    CLONE=332
    CONSTRAINT=333
    CURRENT_ROLE=334
    DATA=335
    DIRECTORY=336
    EXACT=337
    EXISTING=338
    FUNCTION=339
    GQLSTATUS=340
    GRANT=341
    INSTANT=342
    NOTHING=343
    NUMERIC=344
    PROCEDURE=345
    PRODUCT=346
    PROJECT=347
    QUERY=348
    RECORDS=349
    REFERENCE=350
    RENAME=351
    REVOKE=352
    SUBSTRING=353
    TEMPORAL=354
    UNIQUE=355
    UNIT=356
    VALUES=357
    MULTISET_ALTERNATION_OPERATOR=358
    CONCATENATION_OPERATOR=359
    DOUBLE_COLON=360
    DOUBLE_PERIOD=361
    GREATER_THAN_OR_EQUALS_OPERATOR=362
    HINT_BEGIN=363
    LEFT_MINUS_RIGHT=364
    LEFT_MINUS_SLASH=365
    LEFT_SHIFT=366
    LEFT_TILDE_SLASH=367
    LESS_THAN_OR_EQUALS_OPERATOR=368
    MINUS_SLASH=369
    NOT_EQUALS_OPERATOR=370
    RIGHT_ARROW=371
    RIGHT_SHIFT=372
    SAFE_EXQUAL_OPERATOR=373
    SLASH_MINUS_RIGHT=374
    SLASH_TILDE_RIGHT=375
    TILDE_RIGHT_ARROW=376
    TILDE_SLASH=377
    DOUBLE_SOLIDUS=378
    ESCAPED_CHARACTER=379
    ESCAPED_REVERSE_SOLIDUS=380
    ESCAPED_QUOTE=381
    ESCAPED_DOUBLE_QUOTE=382
    ESCAPED_GRAVE_ACCENT=383
    ESCAPED_TAB=384
    ESCAPED_BACKSPACE=385
    ESCAPED_NEWLINE=386
    ESCAPED_CARRIAGE_RETURN=387
    ESCAPED_FORM_FEED=388
    UNICODE_ESCAPE_VALUE=389
    UNICODE_4_DIGIT_ESCAPE_VALUE=390
    UNICODE_6_DIGIT_ESCAPE_VALUE=391
    UNSIGNED_DECIMAL_INTEGER=392
    UNSIGNED_HEXADECIMAL_INTEGER=393
    UNSIGNED_OCTAL_INTEGER=394
    UNSIGNED_BINARY_INTEGER=395
    UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION=396
    UNSIGNED_DECIMAL_IN_COMMON_NOTATION=397
    FOUR_DIGIT=398
    DOUBLE_DIGIT=399
    SINGLE_QUOTED_STRING_LITERAL=400
    DOUBLE_QUOTED_STRING_LITERAL=401
    ACCENT_QUOTED_STRING_LITERAL=402
    BYTE_STRING_LITERAL=403
    QUOTE=404
    DOUBLE_QUOTE=405
    GRAVE_ACCENT=406
    REGULAR_IDENTIFIER=407
    IDENTIFIER_START=408
    IDENTIFIER_EXTEND=409
    SP=410
    SEPARATOR=411
    WHITESPACE=412
    Comment=413
    BIDIRECTIONAL_CONTROL_CHARACTER=414
    COMMENT=415
    SIMPLE_COMMENT=416
    SIMPLE_COMMENT_INTRODUCER=417
    SIMPLE_COMMENT_CHARACTER=418
    BRACKETED_COMMENT=419
    BRACKETED_COMMENT_INTRODUCER=420
    BRACKETED_COMMENT_TERMINATOR=421
    BRACKETED_COMMENT_CONTENTS=422
    GQL_TERMINAL_CHARACTER=423
    GQL_LANGUAGE_CHARACTER=424
    SIMPLE_LATIN_LETTER=425
    SIMPLE_LATIN_LOWER_CASE_LETTER=426
    SIMPLE_LATIN_UPPER_CASE_LETTER=427
    OTHER_DIGIT=428
    GQL_SPECIAL_CHARACTER=429
    OTHER_LANGUAGE_CHARACTER=430

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class GqlRequestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gqlProgram(self):
            return self.getTypedRuleContext(GqlParser.GqlProgramContext,0)


        def EOF(self):
            return self.getToken(GqlParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(GqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_gqlRequest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlRequest" ):
                listener.enterGqlRequest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlRequest" ):
                listener.exitGqlRequest(self)




    def gqlRequest(self):

        localctx = GqlParser.GqlRequestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_gqlRequest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.gqlProgram()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1141
                self.match(GqlParser.SEMICOLON)


            self.state = 1144
            self.match(GqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GqlProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def programActivity(self):
            return self.getTypedRuleContext(GqlParser.ProgramActivityContext,0)


        def sessionCloseCommand(self):
            return self.getTypedRuleContext(GqlParser.SessionCloseCommandContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_gqlProgram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlProgram" ):
                listener.enterGqlProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlProgram" ):
                listener.exitGqlProgram(self)




    def gqlProgram(self):

        localctx = GqlParser.GqlProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_gqlProgram)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.programActivity()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 1147
                    self.sessionCloseCommand()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.sessionCloseCommand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramActivityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionActivity(self):
            return self.getTypedRuleContext(GqlParser.SessionActivityContext,0)


        def transactionActivity(self):
            return self.getTypedRuleContext(GqlParser.TransactionActivityContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_programActivity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramActivity" ):
                listener.enterProgramActivity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramActivity" ):
                listener.exitProgramActivity(self)




    def programActivity(self):

        localctx = GqlParser.ProgramActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_programActivity)
        try:
            self.state = 1155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.sessionActivity()
                pass
            elif token in [10, 41, 48, 57, 68, 76, 89, 93, 98, 110, 111, 120, 121, 122, 138, 160, 164, 166, 179, 189, 198, 201, 203, 218, 225, 227, 229, 230, 235, 237, 239, 244, 249, 255, 284, 286, 317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.transactionActivity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionActivityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionActivityCommand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SessionActivityCommandContext)
            else:
                return self.getTypedRuleContext(GqlParser.SessionActivityCommandContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionActivity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionActivity" ):
                listener.enterSessionActivity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionActivity" ):
                listener.exitSessionActivity(self)




    def sessionActivity(self):

        localctx = GqlParser.SessionActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sessionActivity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1157
                    self.sessionActivityCommand()

                else:
                    raise NoViableAltException(self)
                self.state = 1160 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionActivityCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionSetCommand(self):
            return self.getTypedRuleContext(GqlParser.SessionSetCommandContext,0)


        def sessionResetCommand(self):
            return self.getTypedRuleContext(GqlParser.SessionResetCommandContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionActivityCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionActivityCommand" ):
                listener.enterSessionActivityCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionActivityCommand" ):
                listener.exitSessionActivityCommand(self)




    def sessionActivityCommand(self):

        localctx = GqlParser.SessionActivityCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_sessionActivityCommand)
        try:
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.sessionSetCommand()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.sessionResetCommand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionActivityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransactionCommand(self):
            return self.getTypedRuleContext(GqlParser.StartTransactionCommandContext,0)


        def procedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.ProcedureSpecificationContext,0)


        def endTransactionCommand(self):
            return self.getTypedRuleContext(GqlParser.EndTransactionCommandContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_transactionActivity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionActivity" ):
                listener.enterTransactionActivity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionActivity" ):
                listener.exitTransactionActivity(self)




    def transactionActivity(self):

        localctx = GqlParser.TransactionActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_transactionActivity)
        self._la = 0 # Token type
        try:
            self.state = 1178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.startTransactionCommand()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144398862075823104) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 4611809215273639937) != 0) or ((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & 288241646683291729) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & 2882303762591405077) != 0) or _la==317:
                    self.state = 1167
                    self.procedureSpecification()
                    self.state = 1169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68 or _la==230:
                        self.state = 1168
                        self.endTransactionCommand()




                pass
            elif token in [10, 41, 48, 57, 76, 89, 93, 98, 110, 111, 120, 121, 122, 138, 160, 164, 166, 179, 189, 198, 201, 203, 218, 225, 227, 229, 235, 237, 239, 244, 255, 284, 286, 317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.procedureSpecification()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==230:
                    self.state = 1174
                    self.endTransactionCommand()


                pass
            elif token in [68, 230]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1177
                self.endTransactionCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndTransactionCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollbackCommand(self):
            return self.getTypedRuleContext(GqlParser.RollbackCommandContext,0)


        def commitCommand(self):
            return self.getTypedRuleContext(GqlParser.CommitCommandContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_endTransactionCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndTransactionCommand" ):
                listener.enterEndTransactionCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndTransactionCommand" ):
                listener.exitEndTransactionCommand(self)




    def endTransactionCommand(self):

        localctx = GqlParser.EndTransactionCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_endTransactionCommand)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [230]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.rollbackCommand()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.commitCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(GqlParser.SESSION, 0)

        def SET(self):
            return self.getToken(GqlParser.SET, 0)

        def sessionSetSchemaClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetSchemaClauseContext,0)


        def sessionSetGraphClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetGraphClauseContext,0)


        def sessionSetTimeZoneClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetTimeZoneClauseContext,0)


        def sessionSetParameterClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetParameterClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetCommand" ):
                listener.enterSessionSetCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetCommand" ):
                listener.exitSessionSetCommand(self)




    def sessionSetCommand(self):

        localctx = GqlParser.SessionSetCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_sessionSetCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(GqlParser.SESSION)
            self.state = 1185
            self.match(GqlParser.SET)
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 1186
                self.sessionSetSchemaClause()
                pass

            elif la_ == 2:
                self.state = 1187
                self.sessionSetGraphClause()
                pass

            elif la_ == 3:
                self.state = 1188
                self.sessionSetTimeZoneClause()
                pass

            elif la_ == 4:
                self.state = 1189
                self.sessionSetParameterClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetSchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(GqlParser.SCHEMA, 0)

        def schemaReference(self):
            return self.getTypedRuleContext(GqlParser.SchemaReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetSchemaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetSchemaClause" ):
                listener.enterSessionSetSchemaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetSchemaClause" ):
                listener.exitSessionSetSchemaClause(self)




    def sessionSetSchemaClause(self):

        localctx = GqlParser.SessionSetSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_sessionSetSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(GqlParser.SCHEMA)
            self.state = 1193
            self.schemaReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetGraphClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetGraphClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetGraphClause" ):
                listener.enterSessionSetGraphClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetGraphClause" ):
                listener.exitSessionSetGraphClause(self)




    def sessionSetGraphClause(self):

        localctx = GqlParser.SessionSetGraphClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_sessionSetGraphClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1195
                self.match(GqlParser.PROPERTY)


            self.state = 1198
            self.match(GqlParser.GRAPH)
            self.state = 1199
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetTimeZoneClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(GqlParser.ZONE, 0)

        def setTimeZoneValue(self):
            return self.getTypedRuleContext(GqlParser.SetTimeZoneValueContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetTimeZoneClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetTimeZoneClause" ):
                listener.enterSessionSetTimeZoneClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetTimeZoneClause" ):
                listener.exitSessionSetTimeZoneClause(self)




    def sessionSetTimeZoneClause(self):

        localctx = GqlParser.SessionSetTimeZoneClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_sessionSetTimeZoneClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(GqlParser.TIME)
            self.state = 1202
            self.match(GqlParser.ZONE)
            self.state = 1203
            self.setTimeZoneValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTimeZoneValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_setTimeZoneValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZoneValue" ):
                listener.enterSetTimeZoneValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZoneValue" ):
                listener.exitSetTimeZoneValue(self)




    def setTimeZoneValue(self):

        localctx = GqlParser.SetTimeZoneValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_setTimeZoneValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.expressionAtom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetParameterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionSetGraphParameterClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetGraphParameterClauseContext,0)


        def sessionSetBindingTableParameterClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetBindingTableParameterClauseContext,0)


        def sessionSetValueParameterClause(self):
            return self.getTypedRuleContext(GqlParser.SessionSetValueParameterClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetParameterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetParameterClause" ):
                listener.enterSessionSetParameterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetParameterClause" ):
                listener.exitSessionSetParameterClause(self)




    def sessionSetParameterClause(self):

        localctx = GqlParser.SessionSetParameterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_sessionSetParameterClause)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122, 218]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.sessionSetGraphParameterClause()
                pass
            elif token in [48, 255]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1208
                self.sessionSetBindingTableParameterClause()
                pass
            elif token in [286]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1209
                self.sessionSetValueParameterClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetGraphParameterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def sessionSetParameterName(self):
            return self.getTypedRuleContext(GqlParser.SessionSetParameterNameContext,0)


        def optTypedGraphInitializer(self):
            return self.getTypedRuleContext(GqlParser.OptTypedGraphInitializerContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetGraphParameterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetGraphParameterClause" ):
                listener.enterSessionSetGraphParameterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetGraphParameterClause" ):
                listener.exitSessionSetGraphParameterClause(self)




    def sessionSetGraphParameterClause(self):

        localctx = GqlParser.SessionSetGraphParameterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_sessionSetGraphParameterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1212
                self.match(GqlParser.PROPERTY)


            self.state = 1215
            self.match(GqlParser.GRAPH)
            self.state = 1216
            self.sessionSetParameterName()
            self.state = 1217
            self.optTypedGraphInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetBindingTableParameterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(GqlParser.TABLE, 0)

        def sessionSetParameterName(self):
            return self.getTypedRuleContext(GqlParser.SessionSetParameterNameContext,0)


        def optTypedBindingTableInitializer(self):
            return self.getTypedRuleContext(GqlParser.OptTypedBindingTableInitializerContext,0)


        def BINDING(self):
            return self.getToken(GqlParser.BINDING, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetBindingTableParameterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetBindingTableParameterClause" ):
                listener.enterSessionSetBindingTableParameterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetBindingTableParameterClause" ):
                listener.exitSessionSetBindingTableParameterClause(self)




    def sessionSetBindingTableParameterClause(self):

        localctx = GqlParser.SessionSetBindingTableParameterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_sessionSetBindingTableParameterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1219
                self.match(GqlParser.BINDING)


            self.state = 1222
            self.match(GqlParser.TABLE)
            self.state = 1223
            self.sessionSetParameterName()
            self.state = 1224
            self.optTypedBindingTableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetValueParameterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)

        def sessionSetParameterName(self):
            return self.getTypedRuleContext(GqlParser.SessionSetParameterNameContext,0)


        def optTypedValueInitializer(self):
            return self.getTypedRuleContext(GqlParser.OptTypedValueInitializerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetValueParameterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetValueParameterClause" ):
                listener.enterSessionSetValueParameterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetValueParameterClause" ):
                listener.exitSessionSetValueParameterClause(self)




    def sessionSetValueParameterClause(self):

        localctx = GqlParser.SessionSetValueParameterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_sessionSetValueParameterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(GqlParser.VALUE)
            self.state = 1227
            self.sessionSetParameterName()
            self.state = 1228
            self.optTypedValueInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionSetParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(GqlParser.ParameterNameContext,0)


        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sessionSetParameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionSetParameterName" ):
                listener.enterSessionSetParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionSetParameterName" ):
                listener.exitSessionSetParameterName(self)




    def sessionSetParameterName(self):

        localctx = GqlParser.SessionSetParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_sessionSetParameterName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1230
                self.match(GqlParser.IF)
                self.state = 1231
                self.match(GqlParser.NOT)
                self.state = 1232
                self.match(GqlParser.EXISTS)


            self.state = 1235
            self.parameterName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionResetCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(GqlParser.SESSION, 0)

        def RESET(self):
            return self.getToken(GqlParser.RESET, 0)

        def sessionResetArguments(self):
            return self.getTypedRuleContext(GqlParser.SessionResetArgumentsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sessionResetCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionResetCommand" ):
                listener.enterSessionResetCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionResetCommand" ):
                listener.exitSessionResetCommand(self)




    def sessionResetCommand(self):

        localctx = GqlParser.SessionResetCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_sessionResetCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(GqlParser.SESSION)
            self.state = 1238
            self.match(GqlParser.RESET)
            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2147516480) != 0) or _la==64 or _la==122 or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 18014398777921539) != 0):
                self.state = 1239
                self.sessionResetArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionResetArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(GqlParser.PARAMETERS, 0)

        def CHARACTERISTICS(self):
            return self.getToken(GqlParser.CHARACTERISTICS, 0)

        def ALL(self):
            return self.getToken(GqlParser.ALL, 0)

        def SCHEMA(self):
            return self.getToken(GqlParser.SCHEMA, 0)

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(GqlParser.ZONE, 0)

        def parameterName(self):
            return self.getTypedRuleContext(GqlParser.ParameterNameContext,0)


        def PARAMETER(self):
            return self.getToken(GqlParser.PARAMETER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sessionResetArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionResetArguments" ):
                listener.enterSessionResetArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionResetArguments" ):
                listener.exitSessionResetArguments(self)




    def sessionResetArguments(self):

        localctx = GqlParser.SessionResetArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_sessionResetArguments)
        self._la = 0 # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31, 64, 207]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 1242
                    self.match(GqlParser.ALL)


                self.state = 1245
                _la = self._input.LA(1)
                if not(_la==64 or _la==207):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self.match(GqlParser.SCHEMA)
                pass
            elif token in [122, 218]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1247
                    self.match(GqlParser.PROPERTY)


                self.state = 1250
                self.match(GqlParser.GRAPH)
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1251
                self.match(GqlParser.TIME)
                self.state = 1252
                self.match(GqlParser.ZONE)
                pass
            elif token in [6, 15, 206]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 1253
                    self.match(GqlParser.PARAMETER)


                self.state = 1256
                self.parameterName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionCloseCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(GqlParser.SESSION, 0)

        def CLOSE(self):
            return self.getToken(GqlParser.CLOSE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sessionCloseCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionCloseCommand" ):
                listener.enterSessionCloseCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionCloseCommand" ):
                listener.exitSessionCloseCommand(self)




    def sessionCloseCommand(self):

        localctx = GqlParser.SessionCloseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_sessionCloseCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(GqlParser.SESSION)
            self.state = 1260
            self.match(GqlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(GqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(GqlParser.TRANSACTION, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(GqlParser.TransactionCharacteristicsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_startTransactionCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransactionCommand" ):
                listener.enterStartTransactionCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransactionCommand" ):
                listener.exitStartTransactionCommand(self)




    def startTransactionCommand(self):

        localctx = GqlParser.StartTransactionCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_startTransactionCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(GqlParser.START)
            self.state = 1263
            self.match(GqlParser.TRANSACTION)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131 or _la==221:
                self.state = 1264
                self.transactionCharacteristics()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(GqlParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_transactionCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristics" ):
                listener.enterTransactionCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristics" ):
                listener.exitTransactionCharacteristics(self)




    def transactionCharacteristics(self):

        localctx = GqlParser.TransactionCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_transactionCharacteristics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.transactionMode()
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1268
                self.match(GqlParser.COMMA)
                self.state = 1269
                self.transactionMode()
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionAccessMode(self):
            return self.getTypedRuleContext(GqlParser.TransactionAccessModeContext,0)


        def implementationDefinedAccessMode(self):
            return self.getTypedRuleContext(GqlParser.ImplementationDefinedAccessModeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = GqlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_transactionMode)
        try:
            self.state = 1277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [221]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.transactionAccessMode()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.implementationDefinedAccessMode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(GqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(GqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(GqlParser.WRITE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_transactionAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)




    def transactionAccessMode(self):

        localctx = GqlParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_transactionAccessMode)
        try:
            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.match(GqlParser.READ)
                self.state = 1280
                self.match(GqlParser.ONLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1281
                self.match(GqlParser.READ)
                self.state = 1282
                self.match(GqlParser.WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementationDefinedAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I_DONT_KNOW_1(self):
            return self.getToken(GqlParser.I_DONT_KNOW_1, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_implementationDefinedAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementationDefinedAccessMode" ):
                listener.enterImplementationDefinedAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementationDefinedAccessMode" ):
                listener.exitImplementationDefinedAccessMode(self)




    def implementationDefinedAccessMode(self):

        localctx = GqlParser.ImplementationDefinedAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_implementationDefinedAccessMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(GqlParser.I_DONT_KNOW_1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(GqlParser.ROLLBACK, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_rollbackCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackCommand" ):
                listener.enterRollbackCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackCommand" ):
                listener.exitRollbackCommand(self)




    def rollbackCommand(self):

        localctx = GqlParser.RollbackCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_rollbackCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(GqlParser.ROLLBACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(GqlParser.COMMIT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_commitCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitCommand" ):
                listener.enterCommitCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitCommand" ):
                listener.exitCommitCommand(self)




    def commitCommand(self):

        localctx = GqlParser.CommitCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_commitCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(GqlParser.COMMIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedProcedureSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def procedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.ProcedureSpecificationContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nestedProcedureSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedProcedureSpecification" ):
                listener.enterNestedProcedureSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedProcedureSpecification" ):
                listener.exitNestedProcedureSpecification(self)




    def nestedProcedureSpecification(self):

        localctx = GqlParser.NestedProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_nestedProcedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(GqlParser.LEFT_BRACE)
            self.state = 1292
            self.procedureSpecification()
            self.state = 1293
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureBody(self):
            return self.getTypedRuleContext(GqlParser.ProcedureBodyContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_procedureSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSpecification" ):
                listener.enterProcedureSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSpecification" ):
                listener.exitProcedureSpecification(self)




    def procedureSpecification(self):

        localctx = GqlParser.ProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_procedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.procedureBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogModifyingProcedureSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureBody(self):
            return self.getTypedRuleContext(GqlParser.ProcedureBodyContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_catalogModifyingProcedureSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogModifyingProcedureSpecification" ):
                listener.enterCatalogModifyingProcedureSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogModifyingProcedureSpecification" ):
                listener.exitCatalogModifyingProcedureSpecification(self)




    def catalogModifyingProcedureSpecification(self):

        localctx = GqlParser.CatalogModifyingProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_catalogModifyingProcedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.procedureBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedDataModifyingProcedureSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def dataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.DataModifyingProcedureSpecificationContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nestedDataModifyingProcedureSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedDataModifyingProcedureSpecification" ):
                listener.enterNestedDataModifyingProcedureSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedDataModifyingProcedureSpecification" ):
                listener.exitNestedDataModifyingProcedureSpecification(self)




    def nestedDataModifyingProcedureSpecification(self):

        localctx = GqlParser.NestedDataModifyingProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_nestedDataModifyingProcedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(GqlParser.LEFT_BRACE)
            self.state = 1300
            self.dataModifyingProcedureSpecification()
            self.state = 1301
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataModifyingProcedureSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureBody(self):
            return self.getTypedRuleContext(GqlParser.ProcedureBodyContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_dataModifyingProcedureSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataModifyingProcedureSpecification" ):
                listener.enterDataModifyingProcedureSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataModifyingProcedureSpecification" ):
                listener.exitDataModifyingProcedureSpecification(self)




    def dataModifyingProcedureSpecification(self):

        localctx = GqlParser.DataModifyingProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dataModifyingProcedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.procedureBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedQuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def procedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.ProcedureSpecificationContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nestedQuerySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedQuerySpecification" ):
                listener.enterNestedQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedQuerySpecification" ):
                listener.exitNestedQuerySpecification(self)




    def nestedQuerySpecification(self):

        localctx = GqlParser.NestedQuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_nestedQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(GqlParser.LEFT_BRACE)
            self.state = 1306
            self.procedureSpecification()
            self.state = 1307
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureBody(self):
            return self.getTypedRuleContext(GqlParser.ProcedureBodyContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = GqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.procedureBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedNumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(GqlParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(GqlParser.FloatLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_unsignedNumericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedNumericLiteral" ):
                listener.enterUnsignedNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedNumericLiteral" ):
                listener.exitUnsignedNumericLiteral(self)




    def unsignedNumericLiteral(self):

        localctx = GqlParser.UnsignedNumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_unsignedNumericLiteral)
        try:
            self.state = 1313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [392, 393, 394, 395]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.integerLiteral()
                pass
            elif token in [396, 397]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.floatLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def UNSIGNED_OCTAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_OCTAL_INTEGER, 0)

        def UNSIGNED_HEXADECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_HEXADECIMAL_INTEGER, 0)

        def UNSIGNED_BINARY_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_BINARY_INTEGER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = GqlParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            _la = self._input.LA(1)
            if not(((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_IN_COMMON_NOTATION(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION, 0)

        def UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)




    def floatLiteral(self):

        localctx = GqlParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            _la = self._input.LA(1)
            if not(_la==396 or _la==397):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleQuotedCharacterSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_QUOTED_STRING_LITERAL(self):
            return self.getToken(GqlParser.SINGLE_QUOTED_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_singleQuotedCharacterSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQuotedCharacterSequence" ):
                listener.enterSingleQuotedCharacterSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQuotedCharacterSequence" ):
                listener.exitSingleQuotedCharacterSequence(self)




    def singleQuotedCharacterSequence(self):

        localctx = GqlParser.SingleQuotedCharacterSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_singleQuotedCharacterSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(GqlParser.SINGLE_QUOTED_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoubleQuotedCharacterSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_STRING_LITERAL(self):
            return self.getToken(GqlParser.DOUBLE_QUOTED_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_doubleQuotedCharacterSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleQuotedCharacterSequence" ):
                listener.enterDoubleQuotedCharacterSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleQuotedCharacterSequence" ):
                listener.exitDoubleQuotedCharacterSequence(self)




    def doubleQuotedCharacterSequence(self):

        localctx = GqlParser.DoubleQuotedCharacterSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_doubleQuotedCharacterSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(GqlParser.DOUBLE_QUOTED_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccentQuotedCharacterSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCENT_QUOTED_STRING_LITERAL(self):
            return self.getToken(GqlParser.ACCENT_QUOTED_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_accentQuotedCharacterSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccentQuotedCharacterSequence" ):
                listener.enterAccentQuotedCharacterSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccentQuotedCharacterSequence" ):
                listener.exitAccentQuotedCharacterSequence(self)




    def accentQuotedCharacterSequence(self):

        localctx = GqlParser.AccentQuotedCharacterSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_accentQuotedCharacterSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(GqlParser.ACCENT_QUOTED_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(GqlParser.NULL_, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)




    def nullLiteral(self):

        localctx = GqlParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(GqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateLiteral(self):
            return self.getTypedRuleContext(GqlParser.DateLiteralContext,0)


        def timeLiteral(self):
            return self.getTypedRuleContext(GqlParser.TimeLiteralContext,0)


        def datetimeLiteral(self):
            return self.getTypedRuleContext(GqlParser.DatetimeLiteralContext,0)


        def sqlDatetimeLiteral(self):
            return self.getTypedRuleContext(GqlParser.SqlDatetimeLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_temporalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalLiteral" ):
                listener.enterTemporalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalLiteral" ):
                listener.exitTemporalLiteral(self)




    def temporalLiteral(self):

        localctx = GqlParser.TemporalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_temporalLiteral)
        try:
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.dateLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                self.timeLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self.datetimeLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1330
                self.sqlDatetimeLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDatetimeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(GqlParser.DATE, 0)

        def QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.QUOTE)
            else:
                return self.getToken(GqlParser.QUOTE, i)

        def FOUR_DIGIT(self):
            return self.getToken(GqlParser.FOUR_DIGIT, 0)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def DOUBLE_DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.DOUBLE_DIGIT)
            else:
                return self.getToken(GqlParser.DOUBLE_DIGIT, i)

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COLON)
            else:
                return self.getToken(GqlParser.COLON, i)

        def TIMESTAMP(self):
            return self.getToken(GqlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(GqlParser.DATETIME, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sqlDatetimeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlDatetimeLiteral" ):
                listener.enterSqlDatetimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlDatetimeLiteral" ):
                listener.exitSqlDatetimeLiteral(self)




    def sqlDatetimeLiteral(self):

        localctx = GqlParser.SqlDatetimeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_sqlDatetimeLiteral)
        try:
            self.state = 1375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1333
                self.match(GqlParser.DATE)
                self.state = 1334
                self.match(GqlParser.QUOTE)
                self.state = 1335
                self.match(GqlParser.FOUR_DIGIT)
                self.state = 1336
                self.match(GqlParser.MINUS_SIGN)
                self.state = 1337
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1338
                self.match(GqlParser.MINUS_SIGN)
                self.state = 1339
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1340
                self.match(GqlParser.QUOTE)
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1341
                self.match(GqlParser.TIME)
                self.state = 1342
                self.match(GqlParser.QUOTE)
                self.state = 1343
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1344
                self.match(GqlParser.COLON)
                self.state = 1345
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1346
                self.match(GqlParser.COLON)
                self.state = 1347
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1348
                self.match(GqlParser.QUOTE)
                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1349
                self.match(GqlParser.TIMESTAMP)
                self.state = 1350
                self.match(GqlParser.QUOTE)
                self.state = 1351
                self.match(GqlParser.FOUR_DIGIT)
                self.state = 1352
                self.match(GqlParser.MINUS_SIGN)
                self.state = 1353
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1354
                self.match(GqlParser.MINUS_SIGN)
                self.state = 1355
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1356
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1357
                self.match(GqlParser.COLON)
                self.state = 1358
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1359
                self.match(GqlParser.COLON)
                self.state = 1360
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1361
                self.match(GqlParser.QUOTE)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1362
                self.match(GqlParser.DATETIME)
                self.state = 1363
                self.match(GqlParser.QUOTE)
                self.state = 1364
                self.match(GqlParser.FOUR_DIGIT)
                self.state = 1365
                self.match(GqlParser.MINUS_SIGN)
                self.state = 1366
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1367
                self.match(GqlParser.MINUS_SIGN)
                self.state = 1368
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1369
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1370
                self.match(GqlParser.COLON)
                self.state = 1371
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1372
                self.match(GqlParser.COLON)
                self.state = 1373
                self.match(GqlParser.DOUBLE_DIGIT)
                self.state = 1374
                self.match(GqlParser.QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(GqlParser.DATE, 0)

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_dateLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)




    def dateLiteral(self):

        localctx = GqlParser.DateLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dateLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(GqlParser.DATE)
            self.state = 1378
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_timeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)




    def timeLiteral(self):

        localctx = GqlParser.TimeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_timeLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(GqlParser.TIME)
            self.state = 1381
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatetimeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def DATETIME(self):
            return self.getToken(GqlParser.DATETIME, 0)

        def TIMESTAMP(self):
            return self.getToken(GqlParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_datetimeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeLiteral" ):
                listener.enterDatetimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeLiteral" ):
                listener.exitDatetimeLiteral(self)




    def datetimeLiteral(self):

        localctx = GqlParser.DatetimeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_datetimeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            _la = self._input.LA(1)
            if not(_la==85 or _la==261):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1384
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DURATION(self):
            return self.getToken(GqlParser.DURATION, 0)

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def sqlIntervalLiteral(self):
            return self.getTypedRuleContext(GqlParser.SqlIntervalLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_durationLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationLiteral" ):
                listener.enterDurationLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationLiteral" ):
                listener.exitDurationLiteral(self)




    def durationLiteral(self):

        localctx = GqlParser.DurationLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_durationLiteral)
        try:
            self.state = 1389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.match(GqlParser.DURATION)
                self.state = 1387
                self.characterStringLiteral()
                pass
            elif token in [392]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1388
                self.sqlIntervalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlIntervalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def sqlIntervalType(self):
            return self.getTypedRuleContext(GqlParser.SqlIntervalTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sqlIntervalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlIntervalLiteral" ):
                listener.enterSqlIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlIntervalLiteral" ):
                listener.exitSqlIntervalLiteral(self)




    def sqlIntervalLiteral(self):

        localctx = GqlParser.SqlIntervalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_sqlIntervalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(GqlParser.UNSIGNED_DECIMAL_INTEGER)
            self.state = 1392
            self.sqlIntervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlIntervalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_DAY(self):
            return self.getToken(GqlParser.INTERVAL_DAY, 0)

        def INTERVAL_WEEK(self):
            return self.getToken(GqlParser.INTERVAL_WEEK, 0)

        def INTERVAL_MONTH(self):
            return self.getToken(GqlParser.INTERVAL_MONTH, 0)

        def INTERVAL_YEAR(self):
            return self.getToken(GqlParser.INTERVAL_YEAR, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sqlIntervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlIntervalType" ):
                listener.enterSqlIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlIntervalType" ):
                listener.exitSqlIntervalType(self)




    def sqlIntervalType(self):

        localctx = GqlParser.SqlIntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_sqlIntervalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            _la = self._input.LA(1)
            if not(((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyWord(self):
            return self.getTypedRuleContext(GqlParser.KeyWordContext,0)


        def REGULAR_IDENTIFIER(self):
            return self.getToken(GqlParser.REGULAR_IDENTIFIER, 0)

        def delimitedIdentifier(self):
            return self.getTypedRuleContext(GqlParser.DelimitedIdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = GqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_identifier)
        try:
            self.state = 1399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1396
                self.keyWord()
                pass
            elif token in [407]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(GqlParser.REGULAR_IDENTIFIER)
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1398
                self.delimitedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reservedWord(self):
            return self.getTypedRuleContext(GqlParser.ReservedWordContext,0)


        def nonReservedWord(self):
            return self.getTypedRuleContext(GqlParser.NonReservedWordContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_keyWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyWord" ):
                listener.enterKeyWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyWord" ):
                listener.exitKeyWord(self)




    def keyWord(self):

        localctx = GqlParser.KeyWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_keyWord)
        try:
            self.state = 1403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 256, 257, 259, 260, 261, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                self.reservedWord()
                pass
            elif token in [30, 44, 48, 49, 70, 92, 94, 95, 101, 103, 112, 122, 124, 125, 130, 155, 156, 157, 158, 159, 163, 175, 178, 184, 185, 186, 187, 188, 191, 199, 204, 213, 218, 221, 222, 226, 238, 241, 247, 253, 255, 258, 262, 263, 264, 266, 269, 279, 290, 294, 295, 298, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1402
                self.nonReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preReservedWord(self):
            return self.getTypedRuleContext(GqlParser.PreReservedWordContext,0)


        def ABS(self):
            return self.getToken(GqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(GqlParser.ACOS, 0)

        def ALL(self):
            return self.getToken(GqlParser.ALL, 0)

        def ALL_DIFFERENT(self):
            return self.getToken(GqlParser.ALL_DIFFERENT, 0)

        def AND(self):
            return self.getToken(GqlParser.AND, 0)

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(GqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def ASC(self):
            return self.getToken(GqlParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(GqlParser.ASCENDING, 0)

        def ASIN(self):
            return self.getToken(GqlParser.ASIN, 0)

        def AT(self):
            return self.getToken(GqlParser.AT, 0)

        def ATAN(self):
            return self.getToken(GqlParser.ATAN, 0)

        def AVG(self):
            return self.getToken(GqlParser.AVG, 0)

        def BIG(self):
            return self.getToken(GqlParser.BIG, 0)

        def BIGINT(self):
            return self.getToken(GqlParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(GqlParser.BINARY, 0)

        def BOOL(self):
            return self.getToken(GqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(GqlParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(GqlParser.BOTH, 0)

        def BTRIM(self):
            return self.getToken(GqlParser.BTRIM, 0)

        def BY(self):
            return self.getToken(GqlParser.BY, 0)

        def BYTE_LENGTH(self):
            return self.getToken(GqlParser.BYTE_LENGTH, 0)

        def BYTES(self):
            return self.getToken(GqlParser.BYTES, 0)

        def CALL(self):
            return self.getToken(GqlParser.CALL, 0)

        def CASE(self):
            return self.getToken(GqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(GqlParser.CAST, 0)

        def CEIL(self):
            return self.getToken(GqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(GqlParser.CEILING, 0)

        def CHAR_LENGTH(self):
            return self.getToken(GqlParser.CHAR_LENGTH, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(GqlParser.CHARACTER_LENGTH, 0)

        def CHARACTERISTICS(self):
            return self.getToken(GqlParser.CHARACTERISTICS, 0)

        def CLOSE(self):
            return self.getToken(GqlParser.CLOSE, 0)

        def COALESCE(self):
            return self.getToken(GqlParser.COALESCE, 0)

        def COLLECT(self):
            return self.getToken(GqlParser.COLLECT, 0)

        def COMMIT(self):
            return self.getToken(GqlParser.COMMIT, 0)

        def COPY(self):
            return self.getToken(GqlParser.COPY, 0)

        def COS(self):
            return self.getToken(GqlParser.COS, 0)

        def COSH(self):
            return self.getToken(GqlParser.COSH, 0)

        def COT(self):
            return self.getToken(GqlParser.COT, 0)

        def COUNT(self):
            return self.getToken(GqlParser.COUNT, 0)

        def CREATE(self):
            return self.getToken(GqlParser.CREATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(GqlParser.CURRENT_DATE, 0)

        def CURRENT_GRAPH(self):
            return self.getToken(GqlParser.CURRENT_GRAPH, 0)

        def CURRENT_PROPERTY_GRAPH(self):
            return self.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(GqlParser.CURRENT_SCHEMA, 0)

        def CURRENT_TIME(self):
            return self.getToken(GqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(GqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(GqlParser.CURRENT_USER, 0)

        def DATE(self):
            return self.getToken(GqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(GqlParser.DATETIME, 0)

        def DEC(self):
            return self.getToken(GqlParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(GqlParser.DECIMAL, 0)

        def DEGREES(self):
            return self.getToken(GqlParser.DEGREES, 0)

        def DELETE(self):
            return self.getToken(GqlParser.DELETE, 0)

        def DESC(self):
            return self.getToken(GqlParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(GqlParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(GqlParser.DETACH, 0)

        def DISTINCT(self):
            return self.getToken(GqlParser.DISTINCT, 0)

        def DOUBLE(self):
            return self.getToken(GqlParser.DOUBLE, 0)

        def DROP(self):
            return self.getToken(GqlParser.DROP, 0)

        def DURATION(self):
            return self.getToken(GqlParser.DURATION, 0)

        def DURATION_BETWEEN(self):
            return self.getToken(GqlParser.DURATION_BETWEEN, 0)

        def ELEMENT_ID(self):
            return self.getToken(GqlParser.ELEMENT_ID, 0)

        def ELSE(self):
            return self.getToken(GqlParser.ELSE, 0)

        def END(self):
            return self.getToken(GqlParser.END, 0)

        def EXCEPT(self):
            return self.getToken(GqlParser.EXCEPT, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def EXP(self):
            return self.getToken(GqlParser.EXP, 0)

        def FALSE(self):
            return self.getToken(GqlParser.FALSE, 0)

        def FILTER(self):
            return self.getToken(GqlParser.FILTER, 0)

        def FINISH(self):
            return self.getToken(GqlParser.FINISH, 0)

        def FLOAT(self):
            return self.getToken(GqlParser.FLOAT, 0)

        def FLOAT16(self):
            return self.getToken(GqlParser.FLOAT16, 0)

        def FLOAT32(self):
            return self.getToken(GqlParser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(GqlParser.FLOAT64, 0)

        def FLOAT128(self):
            return self.getToken(GqlParser.FLOAT128, 0)

        def FLOAT256(self):
            return self.getToken(GqlParser.FLOAT256, 0)

        def FLOOR(self):
            return self.getToken(GqlParser.FLOOR, 0)

        def FOR(self):
            return self.getToken(GqlParser.FOR, 0)

        def FROM(self):
            return self.getToken(GqlParser.FROM, 0)

        def GROUP(self):
            return self.getToken(GqlParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(GqlParser.HAVING, 0)

        def HOME_GRAPH(self):
            return self.getToken(GqlParser.HOME_GRAPH, 0)

        def HOME_PROPERTY_GRAPH(self):
            return self.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0)

        def HOME_SCHEMA(self):
            return self.getToken(GqlParser.HOME_SCHEMA, 0)

        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def IN(self):
            return self.getToken(GqlParser.IN, 0)

        def INSERT(self):
            return self.getToken(GqlParser.INSERT, 0)

        def INT(self):
            return self.getToken(GqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(GqlParser.INTEGER, 0)

        def INT8(self):
            return self.getToken(GqlParser.INT8, 0)

        def INTEGER8(self):
            return self.getToken(GqlParser.INTEGER8, 0)

        def INT16(self):
            return self.getToken(GqlParser.INT16, 0)

        def INTEGER16(self):
            return self.getToken(GqlParser.INTEGER16, 0)

        def INT32(self):
            return self.getToken(GqlParser.INT32, 0)

        def INTEGER32(self):
            return self.getToken(GqlParser.INTEGER32, 0)

        def INT64(self):
            return self.getToken(GqlParser.INT64, 0)

        def INTEGER64(self):
            return self.getToken(GqlParser.INTEGER64, 0)

        def INT128(self):
            return self.getToken(GqlParser.INT128, 0)

        def INTEGER128(self):
            return self.getToken(GqlParser.INTEGER128, 0)

        def INT256(self):
            return self.getToken(GqlParser.INT256, 0)

        def INTEGER256(self):
            return self.getToken(GqlParser.INTEGER256, 0)

        def INTERSECT(self):
            return self.getToken(GqlParser.INTERSECT, 0)

        def INTERVAL_DAY(self):
            return self.getToken(GqlParser.INTERVAL_DAY, 0)

        def INTERVAL_WEEK(self):
            return self.getToken(GqlParser.INTERVAL_WEEK, 0)

        def INTERVAL_MONTH(self):
            return self.getToken(GqlParser.INTERVAL_MONTH, 0)

        def INTERVAL_YEAR(self):
            return self.getToken(GqlParser.INTERVAL_YEAR, 0)

        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def LEADING(self):
            return self.getToken(GqlParser.LEADING, 0)

        def LET(self):
            return self.getToken(GqlParser.LET, 0)

        def LIKE(self):
            return self.getToken(GqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(GqlParser.LIMIT, 0)

        def LIST(self):
            return self.getToken(GqlParser.LIST, 0)

        def LN(self):
            return self.getToken(GqlParser.LN, 0)

        def LOCAL(self):
            return self.getToken(GqlParser.LOCAL, 0)

        def LOCAL_DATETIME(self):
            return self.getToken(GqlParser.LOCAL_DATETIME, 0)

        def LOCAL_TIME(self):
            return self.getToken(GqlParser.LOCAL_TIME, 0)

        def LOCAL_TIMESTAMP(self):
            return self.getToken(GqlParser.LOCAL_TIMESTAMP, 0)

        def LOG(self):
            return self.getToken(GqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(GqlParser.LOG10, 0)

        def LOWER(self):
            return self.getToken(GqlParser.LOWER, 0)

        def LTRIM(self):
            return self.getToken(GqlParser.LTRIM, 0)

        def MATCH(self):
            return self.getToken(GqlParser.MATCH, 0)

        def MAX_(self):
            return self.getToken(GqlParser.MAX_, 0)

        def MIN_(self):
            return self.getToken(GqlParser.MIN_, 0)

        def MOD(self):
            return self.getToken(GqlParser.MOD, 0)

        def NEXT(self):
            return self.getToken(GqlParser.NEXT, 0)

        def NODETACH(self):
            return self.getToken(GqlParser.NODETACH, 0)

        def NORMALIZE(self):
            return self.getToken(GqlParser.NORMALIZE, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def NULL_(self):
            return self.getToken(GqlParser.NULL_, 0)

        def NULLIF(self):
            return self.getToken(GqlParser.NULLIF, 0)

        def NULLS(self):
            return self.getToken(GqlParser.NULLS, 0)

        def OCTET_LENGTH(self):
            return self.getToken(GqlParser.OCTET_LENGTH, 0)

        def OF(self):
            return self.getToken(GqlParser.OF, 0)

        def OFFSET(self):
            return self.getToken(GqlParser.OFFSET, 0)

        def OPEN(self):
            return self.getToken(GqlParser.OPEN, 0)

        def OPTIONAL(self):
            return self.getToken(GqlParser.OPTIONAL, 0)

        def OR(self):
            return self.getToken(GqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(GqlParser.ORDER, 0)

        def OTHERWISE(self):
            return self.getToken(GqlParser.OTHERWISE, 0)

        def PARAMETER(self):
            return self.getToken(GqlParser.PARAMETER, 0)

        def PARAMETERS(self):
            return self.getToken(GqlParser.PARAMETERS, 0)

        def PATH(self):
            return self.getToken(GqlParser.PATH, 0)

        def PATH_LENGTH(self):
            return self.getToken(GqlParser.PATH_LENGTH, 0)

        def PATHS(self):
            return self.getToken(GqlParser.PATHS, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(GqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(GqlParser.PERCENTILE_DISC, 0)

        def POWER(self):
            return self.getToken(GqlParser.POWER, 0)

        def PRECISION(self):
            return self.getToken(GqlParser.PRECISION, 0)

        def PROPERTY_EXISTS(self):
            return self.getToken(GqlParser.PROPERTY_EXISTS, 0)

        def RADIANS(self):
            return self.getToken(GqlParser.RADIANS, 0)

        def REAL(self):
            return self.getToken(GqlParser.REAL, 0)

        def RECORD(self):
            return self.getToken(GqlParser.RECORD, 0)

        def REMOVE(self):
            return self.getToken(GqlParser.REMOVE, 0)

        def REPLACE(self):
            return self.getToken(GqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(GqlParser.RESET, 0)

        def RETURN(self):
            return self.getToken(GqlParser.RETURN, 0)

        def ROLLBACK(self):
            return self.getToken(GqlParser.ROLLBACK, 0)

        def RTRIM(self):
            return self.getToken(GqlParser.RTRIM, 0)

        def SAME(self):
            return self.getToken(GqlParser.SAME, 0)

        def SCHEMA(self):
            return self.getToken(GqlParser.SCHEMA, 0)

        def SELECT(self):
            return self.getToken(GqlParser.SELECT, 0)

        def SESSION(self):
            return self.getToken(GqlParser.SESSION, 0)

        def SET(self):
            return self.getToken(GqlParser.SET, 0)

        def SIGNED(self):
            return self.getToken(GqlParser.SIGNED, 0)

        def SIN(self):
            return self.getToken(GqlParser.SIN, 0)

        def SINH(self):
            return self.getToken(GqlParser.SINH, 0)

        def SKIP_(self):
            return self.getToken(GqlParser.SKIP_, 0)

        def SMALL(self):
            return self.getToken(GqlParser.SMALL, 0)

        def SMALLINT(self):
            return self.getToken(GqlParser.SMALLINT, 0)

        def SQRT(self):
            return self.getToken(GqlParser.SQRT, 0)

        def START(self):
            return self.getToken(GqlParser.START, 0)

        def STDDEV_POP(self):
            return self.getToken(GqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(GqlParser.STDDEV_SAMP, 0)

        def STRING(self):
            return self.getToken(GqlParser.STRING, 0)

        def SUM(self):
            return self.getToken(GqlParser.SUM, 0)

        def TAN(self):
            return self.getToken(GqlParser.TAN, 0)

        def TANH(self):
            return self.getToken(GqlParser.TANH, 0)

        def THEN(self):
            return self.getToken(GqlParser.THEN, 0)

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(GqlParser.TIMESTAMP, 0)

        def TRAILING(self):
            return self.getToken(GqlParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(GqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(GqlParser.TRUE, 0)

        def TYPED(self):
            return self.getToken(GqlParser.TYPED, 0)

        def UBIGINT(self):
            return self.getToken(GqlParser.UBIGINT, 0)

        def UINT(self):
            return self.getToken(GqlParser.UINT, 0)

        def UINT8(self):
            return self.getToken(GqlParser.UINT8, 0)

        def UINT16(self):
            return self.getToken(GqlParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(GqlParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(GqlParser.UINT64, 0)

        def UINT128(self):
            return self.getToken(GqlParser.UINT128, 0)

        def UINT256(self):
            return self.getToken(GqlParser.UINT256, 0)

        def UNION(self):
            return self.getToken(GqlParser.UNION, 0)

        def UNKNOWN(self):
            return self.getToken(GqlParser.UNKNOWN, 0)

        def UNSIGNED(self):
            return self.getToken(GqlParser.UNSIGNED, 0)

        def UPPER(self):
            return self.getToken(GqlParser.UPPER, 0)

        def USE(self):
            return self.getToken(GqlParser.USE, 0)

        def USMALLINT(self):
            return self.getToken(GqlParser.USMALLINT, 0)

        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)

        def VARBINARY(self):
            return self.getToken(GqlParser.VARBINARY, 0)

        def VARCHAR(self):
            return self.getToken(GqlParser.VARCHAR, 0)

        def WHEN(self):
            return self.getToken(GqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(GqlParser.WHERE, 0)

        def WITH(self):
            return self.getToken(GqlParser.WITH, 0)

        def XOR(self):
            return self.getToken(GqlParser.XOR, 0)

        def YIELD(self):
            return self.getToken(GqlParser.YIELD, 0)

        def ZONED(self):
            return self.getToken(GqlParser.ZONED, 0)

        def ZONED_DATETIME(self):
            return self.getToken(GqlParser.ZONED_DATETIME, 0)

        def ZONED_TIME(self):
            return self.getToken(GqlParser.ZONED_TIME, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)




    def reservedWord(self):

        localctx = GqlParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_reservedWord)
        try:
            self.state = 1618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [162, 232, 306, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.preReservedWord()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.match(GqlParser.ABS)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1407
                self.match(GqlParser.ACOS)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1408
                self.match(GqlParser.ALL)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1409
                self.match(GqlParser.ALL_DIFFERENT)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1410
                self.match(GqlParser.AND)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1411
                self.match(GqlParser.ANY)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1412
                self.match(GqlParser.ARRAY)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1413
                self.match(GqlParser.AS)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1414
                self.match(GqlParser.ASC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1415
                self.match(GqlParser.ASCENDING)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1416
                self.match(GqlParser.ASIN)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1417
                self.match(GqlParser.AT)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1418
                self.match(GqlParser.ATAN)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1419
                self.match(GqlParser.AVG)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1420
                self.match(GqlParser.BIG)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1421
                self.match(GqlParser.BIGINT)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1422
                self.match(GqlParser.BINARY)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1423
                self.match(GqlParser.BOOL)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1424
                self.match(GqlParser.BOOLEAN)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1425
                self.match(GqlParser.BOTH)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1426
                self.match(GqlParser.BTRIM)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1427
                self.match(GqlParser.BY)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1428
                self.match(GqlParser.BYTE_LENGTH)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1429
                self.match(GqlParser.BYTES)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1430
                self.match(GqlParser.CALL)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1431
                self.match(GqlParser.CASE)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1432
                self.match(GqlParser.CAST)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1433
                self.match(GqlParser.CEIL)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1434
                self.match(GqlParser.CEILING)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1435
                self.match(GqlParser.CHAR_LENGTH)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1436
                self.match(GqlParser.CHARACTER_LENGTH)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1437
                self.match(GqlParser.CHARACTERISTICS)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1438
                self.match(GqlParser.CLOSE)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1439
                self.match(GqlParser.COALESCE)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1440
                self.match(GqlParser.COLLECT)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1441
                self.match(GqlParser.COMMIT)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1442
                self.match(GqlParser.COPY)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1443
                self.match(GqlParser.COS)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1444
                self.match(GqlParser.COSH)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1445
                self.match(GqlParser.COT)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1446
                self.match(GqlParser.COUNT)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1447
                self.match(GqlParser.CREATE)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1448
                self.match(GqlParser.CURRENT_DATE)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1449
                self.match(GqlParser.CURRENT_GRAPH)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1450
                self.match(GqlParser.CURRENT_PROPERTY_GRAPH)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 47)
                self.state = 1451
                self.match(GqlParser.CURRENT_SCHEMA)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 48)
                self.state = 1452
                self.match(GqlParser.CURRENT_TIME)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 49)
                self.state = 1453
                self.match(GqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 50)
                self.state = 1454
                self.match(GqlParser.CURRENT_USER)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 51)
                self.state = 1455
                self.match(GqlParser.DATE)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 52)
                self.state = 1456
                self.match(GqlParser.DATETIME)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 53)
                self.state = 1457
                self.match(GqlParser.DEC)
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 54)
                self.state = 1458
                self.match(GqlParser.DECIMAL)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 55)
                self.state = 1459
                self.match(GqlParser.DEGREES)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 56)
                self.state = 1460
                self.match(GqlParser.DELETE)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 57)
                self.state = 1461
                self.match(GqlParser.DESC)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 58)
                self.state = 1462
                self.match(GqlParser.DESCENDING)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 59)
                self.state = 1463
                self.match(GqlParser.DETACH)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 60)
                self.state = 1464
                self.match(GqlParser.DISTINCT)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 61)
                self.state = 1465
                self.match(GqlParser.DOUBLE)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 62)
                self.state = 1466
                self.match(GqlParser.DROP)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 63)
                self.state = 1467
                self.match(GqlParser.DURATION)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 64)
                self.state = 1468
                self.match(GqlParser.DURATION_BETWEEN)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 65)
                self.state = 1469
                self.match(GqlParser.ELEMENT_ID)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 66)
                self.state = 1470
                self.match(GqlParser.ELSE)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 67)
                self.state = 1471
                self.match(GqlParser.END)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 68)
                self.state = 1472
                self.match(GqlParser.EXCEPT)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 69)
                self.state = 1473
                self.match(GqlParser.EXISTS)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 70)
                self.state = 1474
                self.match(GqlParser.EXP)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 71)
                self.state = 1475
                self.match(GqlParser.FALSE)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 72)
                self.state = 1476
                self.match(GqlParser.FILTER)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 73)
                self.state = 1477
                self.match(GqlParser.FINISH)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 74)
                self.state = 1478
                self.match(GqlParser.FLOAT)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 75)
                self.state = 1479
                self.match(GqlParser.FLOAT16)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 76)
                self.state = 1480
                self.match(GqlParser.FLOAT32)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 77)
                self.state = 1481
                self.match(GqlParser.FLOAT64)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 78)
                self.state = 1482
                self.match(GqlParser.FLOAT128)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 79)
                self.state = 1483
                self.match(GqlParser.FLOAT256)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 80)
                self.state = 1484
                self.match(GqlParser.FLOOR)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 81)
                self.state = 1485
                self.match(GqlParser.FOR)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 82)
                self.state = 1486
                self.match(GqlParser.FROM)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 83)
                self.state = 1487
                self.match(GqlParser.GROUP)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 84)
                self.state = 1488
                self.match(GqlParser.HAVING)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 85)
                self.state = 1489
                self.match(GqlParser.HOME_GRAPH)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 86)
                self.state = 1490
                self.match(GqlParser.HOME_PROPERTY_GRAPH)
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 87)
                self.state = 1491
                self.match(GqlParser.HOME_SCHEMA)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 88)
                self.state = 1492
                self.match(GqlParser.IF)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 89)
                self.state = 1493
                self.match(GqlParser.IN)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 90)
                self.state = 1494
                self.match(GqlParser.INSERT)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 91)
                self.state = 1495
                self.match(GqlParser.INT)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 92)
                self.state = 1496
                self.match(GqlParser.INTEGER)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 93)
                self.state = 1497
                self.match(GqlParser.INT8)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 94)
                self.state = 1498
                self.match(GqlParser.INTEGER8)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 95)
                self.state = 1499
                self.match(GqlParser.INT16)
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 96)
                self.state = 1500
                self.match(GqlParser.INTEGER16)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 97)
                self.state = 1501
                self.match(GqlParser.INT32)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 98)
                self.state = 1502
                self.match(GqlParser.INTEGER32)
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 99)
                self.state = 1503
                self.match(GqlParser.INT64)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 100)
                self.state = 1504
                self.match(GqlParser.INTEGER64)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 101)
                self.state = 1505
                self.match(GqlParser.INT128)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 102)
                self.state = 1506
                self.match(GqlParser.INTEGER128)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 103)
                self.state = 1507
                self.match(GqlParser.INT256)
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 104)
                self.state = 1508
                self.match(GqlParser.INTEGER256)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 105)
                self.state = 1509
                self.match(GqlParser.INTERSECT)
                pass
            elif token in [302]:
                self.enterOuterAlt(localctx, 106)
                self.state = 1510
                self.match(GqlParser.INTERVAL_DAY)
                pass
            elif token in [303]:
                self.enterOuterAlt(localctx, 107)
                self.state = 1511
                self.match(GqlParser.INTERVAL_WEEK)
                pass
            elif token in [304]:
                self.enterOuterAlt(localctx, 108)
                self.state = 1512
                self.match(GqlParser.INTERVAL_MONTH)
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 109)
                self.state = 1513
                self.match(GqlParser.INTERVAL_YEAR)
                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 110)
                self.state = 1514
                self.match(GqlParser.IS)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 111)
                self.state = 1515
                self.match(GqlParser.LEADING)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 112)
                self.state = 1516
                self.match(GqlParser.LET)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 113)
                self.state = 1517
                self.match(GqlParser.LIKE)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 114)
                self.state = 1518
                self.match(GqlParser.LIMIT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 115)
                self.state = 1519
                self.match(GqlParser.LIST)
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 116)
                self.state = 1520
                self.match(GqlParser.LN)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 117)
                self.state = 1521
                self.match(GqlParser.LOCAL)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 118)
                self.state = 1522
                self.match(GqlParser.LOCAL_DATETIME)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 119)
                self.state = 1523
                self.match(GqlParser.LOCAL_TIME)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 120)
                self.state = 1524
                self.match(GqlParser.LOCAL_TIMESTAMP)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 121)
                self.state = 1525
                self.match(GqlParser.LOG)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 122)
                self.state = 1526
                self.match(GqlParser.LOG10)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 123)
                self.state = 1527
                self.match(GqlParser.LOWER)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 124)
                self.state = 1528
                self.match(GqlParser.LTRIM)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 125)
                self.state = 1529
                self.match(GqlParser.MATCH)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 126)
                self.state = 1530
                self.match(GqlParser.MAX_)
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 127)
                self.state = 1531
                self.match(GqlParser.MIN_)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 128)
                self.state = 1532
                self.match(GqlParser.MOD)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 129)
                self.state = 1533
                self.match(GqlParser.NEXT)
                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 130)
                self.state = 1534
                self.match(GqlParser.NODETACH)
                pass
            elif token in [190]:
                self.enterOuterAlt(localctx, 131)
                self.state = 1535
                self.match(GqlParser.NORMALIZE)
                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 132)
                self.state = 1536
                self.match(GqlParser.NOT)
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 133)
                self.state = 1537
                self.match(GqlParser.NULL_)
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 134)
                self.state = 1538
                self.match(GqlParser.NULLIF)
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 135)
                self.state = 1539
                self.match(GqlParser.NULLS)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 136)
                self.state = 1540
                self.match(GqlParser.OCTET_LENGTH)
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 137)
                self.state = 1541
                self.match(GqlParser.OF)
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 138)
                self.state = 1542
                self.match(GqlParser.OFFSET)
                pass
            elif token in [200]:
                self.enterOuterAlt(localctx, 139)
                self.state = 1543
                self.match(GqlParser.OPEN)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 140)
                self.state = 1544
                self.match(GqlParser.OPTIONAL)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 141)
                self.state = 1545
                self.match(GqlParser.OR)
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 142)
                self.state = 1546
                self.match(GqlParser.ORDER)
                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 143)
                self.state = 1547
                self.match(GqlParser.OTHERWISE)
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 144)
                self.state = 1548
                self.match(GqlParser.PARAMETER)
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 145)
                self.state = 1549
                self.match(GqlParser.PARAMETERS)
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 146)
                self.state = 1550
                self.match(GqlParser.PATH)
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 147)
                self.state = 1551
                self.match(GqlParser.PATH_LENGTH)
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 148)
                self.state = 1552
                self.match(GqlParser.PATHS)
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 149)
                self.state = 1553
                self.match(GqlParser.PERCENTILE_CONT)
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 150)
                self.state = 1554
                self.match(GqlParser.PERCENTILE_DISC)
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 151)
                self.state = 1555
                self.match(GqlParser.POWER)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 152)
                self.state = 1556
                self.match(GqlParser.PRECISION)
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 153)
                self.state = 1557
                self.match(GqlParser.PROPERTY_EXISTS)
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 154)
                self.state = 1558
                self.match(GqlParser.RADIANS)
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 155)
                self.state = 1559
                self.match(GqlParser.REAL)
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 156)
                self.state = 1560
                self.match(GqlParser.RECORD)
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 157)
                self.state = 1561
                self.match(GqlParser.REMOVE)
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 158)
                self.state = 1562
                self.match(GqlParser.REPLACE)
                pass
            elif token in [228]:
                self.enterOuterAlt(localctx, 159)
                self.state = 1563
                self.match(GqlParser.RESET)
                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 160)
                self.state = 1564
                self.match(GqlParser.RETURN)
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 161)
                self.state = 1565
                self.match(GqlParser.ROLLBACK)
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 162)
                self.state = 1566
                self.match(GqlParser.RTRIM)
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 163)
                self.state = 1567
                self.match(GqlParser.SAME)
                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 164)
                self.state = 1568
                self.match(GqlParser.SCHEMA)
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 165)
                self.state = 1569
                self.match(GqlParser.SELECT)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 166)
                self.state = 1570
                self.match(GqlParser.SESSION)
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 167)
                self.state = 1571
                self.match(GqlParser.SET)
                pass
            elif token in [240]:
                self.enterOuterAlt(localctx, 168)
                self.state = 1572
                self.match(GqlParser.SIGNED)
                pass
            elif token in [242]:
                self.enterOuterAlt(localctx, 169)
                self.state = 1573
                self.match(GqlParser.SIN)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 170)
                self.state = 1574
                self.match(GqlParser.SINH)
                pass
            elif token in [244]:
                self.enterOuterAlt(localctx, 171)
                self.state = 1575
                self.match(GqlParser.SKIP_)
                pass
            elif token in [245]:
                self.enterOuterAlt(localctx, 172)
                self.state = 1576
                self.match(GqlParser.SMALL)
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 173)
                self.state = 1577
                self.match(GqlParser.SMALLINT)
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 174)
                self.state = 1578
                self.match(GqlParser.SQRT)
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 175)
                self.state = 1579
                self.match(GqlParser.START)
                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 176)
                self.state = 1580
                self.match(GqlParser.STDDEV_POP)
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 177)
                self.state = 1581
                self.match(GqlParser.STDDEV_SAMP)
                pass
            elif token in [252]:
                self.enterOuterAlt(localctx, 178)
                self.state = 1582
                self.match(GqlParser.STRING)
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 179)
                self.state = 1583
                self.match(GqlParser.SUM)
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 180)
                self.state = 1584
                self.match(GqlParser.TAN)
                pass
            elif token in [257]:
                self.enterOuterAlt(localctx, 181)
                self.state = 1585
                self.match(GqlParser.TANH)
                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 182)
                self.state = 1586
                self.match(GqlParser.THEN)
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 183)
                self.state = 1587
                self.match(GqlParser.TIME)
                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 184)
                self.state = 1588
                self.match(GqlParser.TIMESTAMP)
                pass
            elif token in [265]:
                self.enterOuterAlt(localctx, 185)
                self.state = 1589
                self.match(GqlParser.TRAILING)
                pass
            elif token in [267]:
                self.enterOuterAlt(localctx, 186)
                self.state = 1590
                self.match(GqlParser.TRIM)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 187)
                self.state = 1591
                self.match(GqlParser.TRUE)
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 188)
                self.state = 1592
                self.match(GqlParser.TYPED)
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 189)
                self.state = 1593
                self.match(GqlParser.UBIGINT)
                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 190)
                self.state = 1594
                self.match(GqlParser.UINT)
                pass
            elif token in [278]:
                self.enterOuterAlt(localctx, 191)
                self.state = 1595
                self.match(GqlParser.UINT8)
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 192)
                self.state = 1596
                self.match(GqlParser.UINT16)
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 193)
                self.state = 1597
                self.match(GqlParser.UINT32)
                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 194)
                self.state = 1598
                self.match(GqlParser.UINT64)
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 195)
                self.state = 1599
                self.match(GqlParser.UINT128)
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 196)
                self.state = 1600
                self.match(GqlParser.UINT256)
                pass
            elif token in [280]:
                self.enterOuterAlt(localctx, 197)
                self.state = 1601
                self.match(GqlParser.UNION)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 198)
                self.state = 1602
                self.match(GqlParser.UNKNOWN)
                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 199)
                self.state = 1603
                self.match(GqlParser.UNSIGNED)
                pass
            elif token in [283]:
                self.enterOuterAlt(localctx, 200)
                self.state = 1604
                self.match(GqlParser.UPPER)
                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 201)
                self.state = 1605
                self.match(GqlParser.USE)
                pass
            elif token in [285]:
                self.enterOuterAlt(localctx, 202)
                self.state = 1606
                self.match(GqlParser.USMALLINT)
                pass
            elif token in [286]:
                self.enterOuterAlt(localctx, 203)
                self.state = 1607
                self.match(GqlParser.VALUE)
                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 204)
                self.state = 1608
                self.match(GqlParser.VARBINARY)
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 205)
                self.state = 1609
                self.match(GqlParser.VARCHAR)
                pass
            elif token in [291]:
                self.enterOuterAlt(localctx, 206)
                self.state = 1610
                self.match(GqlParser.WHEN)
                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 207)
                self.state = 1611
                self.match(GqlParser.WHERE)
                pass
            elif token in [293]:
                self.enterOuterAlt(localctx, 208)
                self.state = 1612
                self.match(GqlParser.WITH)
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 209)
                self.state = 1613
                self.match(GqlParser.XOR)
                pass
            elif token in [297]:
                self.enterOuterAlt(localctx, 210)
                self.state = 1614
                self.match(GqlParser.YIELD)
                pass
            elif token in [299]:
                self.enterOuterAlt(localctx, 211)
                self.state = 1615
                self.match(GqlParser.ZONED)
                pass
            elif token in [300]:
                self.enterOuterAlt(localctx, 212)
                self.state = 1616
                self.match(GqlParser.ZONED_DATETIME)
                pass
            elif token in [301]:
                self.enterOuterAlt(localctx, 213)
                self.state = 1617
                self.match(GqlParser.ZONED_TIME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGGREGATE(self):
            return self.getToken(GqlParser.AGGREGATE, 0)

        def AGGREGATES(self):
            return self.getToken(GqlParser.AGGREGATES, 0)

        def ALTER(self):
            return self.getToken(GqlParser.ALTER, 0)

        def CATALOG(self):
            return self.getToken(GqlParser.CATALOG, 0)

        def CLEAR(self):
            return self.getToken(GqlParser.CLEAR, 0)

        def CLONE(self):
            return self.getToken(GqlParser.CLONE, 0)

        def CONSTRAINT(self):
            return self.getToken(GqlParser.CONSTRAINT, 0)

        def CURRENT_ROLE(self):
            return self.getToken(GqlParser.CURRENT_ROLE, 0)

        def DATA(self):
            return self.getToken(GqlParser.DATA, 0)

        def DIRECTORY(self):
            return self.getToken(GqlParser.DIRECTORY, 0)

        def EXACT(self):
            return self.getToken(GqlParser.EXACT, 0)

        def EXISTING(self):
            return self.getToken(GqlParser.EXISTING, 0)

        def FUNCTION(self):
            return self.getToken(GqlParser.FUNCTION, 0)

        def GQLSTATUS(self):
            return self.getToken(GqlParser.GQLSTATUS, 0)

        def GRANT(self):
            return self.getToken(GqlParser.GRANT, 0)

        def INSTANT(self):
            return self.getToken(GqlParser.INSTANT, 0)

        def LEFT(self):
            return self.getToken(GqlParser.LEFT, 0)

        def NOTHING(self):
            return self.getToken(GqlParser.NOTHING, 0)

        def NUMERIC(self):
            return self.getToken(GqlParser.NUMERIC, 0)

        def ON(self):
            return self.getToken(GqlParser.ON, 0)

        def PARTITION(self):
            return self.getToken(GqlParser.PARTITION, 0)

        def PROCEDURE(self):
            return self.getToken(GqlParser.PROCEDURE, 0)

        def PRODUCT(self):
            return self.getToken(GqlParser.PRODUCT, 0)

        def PROJECT(self):
            return self.getToken(GqlParser.PROJECT, 0)

        def QUERY(self):
            return self.getToken(GqlParser.QUERY, 0)

        def RECORDS(self):
            return self.getToken(GqlParser.RECORDS, 0)

        def REFERENCE(self):
            return self.getToken(GqlParser.REFERENCE, 0)

        def RENAME(self):
            return self.getToken(GqlParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(GqlParser.REVOKE, 0)

        def RIGHT(self):
            return self.getToken(GqlParser.RIGHT, 0)

        def SUBSTRING(self):
            return self.getToken(GqlParser.SUBSTRING, 0)

        def TEMPORAL(self):
            return self.getToken(GqlParser.TEMPORAL, 0)

        def UNIQUE(self):
            return self.getToken(GqlParser.UNIQUE, 0)

        def UNIT(self):
            return self.getToken(GqlParser.UNIT, 0)

        def VALUES(self):
            return self.getToken(GqlParser.VALUES, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_preReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreReservedWord" ):
                listener.enterPreReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreReservedWord" ):
                listener.exitPreReservedWord(self)




    def preReservedWord(self):

        localctx = GqlParser.PreReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_preReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            _la = self._input.LA(1)
            if not(_la==162 or _la==232 or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & 4503599625273601) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACYCLIC(self):
            return self.getToken(GqlParser.ACYCLIC, 0)

        def BETWEEN(self):
            return self.getToken(GqlParser.BETWEEN, 0)

        def BINDING(self):
            return self.getToken(GqlParser.BINDING, 0)

        def BINDINGS(self):
            return self.getToken(GqlParser.BINDINGS, 0)

        def CONNECTING(self):
            return self.getToken(GqlParser.CONNECTING, 0)

        def CONSTRUCT(self):
            return self.getToken(GqlParser.CONSTRUCT, 0)

        def CROSS(self):
            return self.getToken(GqlParser.CROSS, 0)

        def CUME_DIST(self):
            return self.getToken(GqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(GqlParser.DENSE_RANK, 0)

        def DESTINATION(self):
            return self.getToken(GqlParser.DESTINATION, 0)

        def DIFFERENT(self):
            return self.getToken(GqlParser.DIFFERENT, 0)

        def DIRECTED(self):
            return self.getToken(GqlParser.DIRECTED, 0)

        def EDGE_SYNONYM(self):
            return self.getToken(GqlParser.EDGE_SYNONYM, 0)

        def EDGES_SYNONYM(self):
            return self.getToken(GqlParser.EDGES_SYNONYM, 0)

        def ELEMENT(self):
            return self.getToken(GqlParser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(GqlParser.ELEMENTS, 0)

        def FIRST(self):
            return self.getToken(GqlParser.FIRST, 0)

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def GROUPS(self):
            return self.getToken(GqlParser.GROUPS, 0)

        def GROUP_CONCAT(self):
            return self.getToken(GqlParser.GROUP_CONCAT, 0)

        def ID(self):
            return self.getToken(GqlParser.ID, 0)

        def INNER(self):
            return self.getToken(GqlParser.INNER, 0)

        def JOIN(self):
            return self.getToken(GqlParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(GqlParser.KEEP, 0)

        def KEY(self):
            return self.getToken(GqlParser.KEY, 0)

        def LABEL(self):
            return self.getToken(GqlParser.LABEL, 0)

        def LABELED(self):
            return self.getToken(GqlParser.LABELED, 0)

        def LABELS(self):
            return self.getToken(GqlParser.LABELS, 0)

        def LAST(self):
            return self.getToken(GqlParser.LAST, 0)

        def LENGTH(self):
            return self.getToken(GqlParser.LENGTH, 0)

        def LONG(self):
            return self.getToken(GqlParser.LONG, 0)

        def MAP(self):
            return self.getToken(GqlParser.MAP, 0)

        def NFC(self):
            return self.getToken(GqlParser.NFC, 0)

        def NFD(self):
            return self.getToken(GqlParser.NFD, 0)

        def NFKC(self):
            return self.getToken(GqlParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(GqlParser.NFKD, 0)

        def NO(self):
            return self.getToken(GqlParser.NO, 0)

        def NODE_SYNONYM(self):
            return self.getToken(GqlParser.NODE_SYNONYM, 0)

        def NORMALIZED(self):
            return self.getToken(GqlParser.NORMALIZED, 0)

        def ONLY(self):
            return self.getToken(GqlParser.ONLY, 0)

        def OVER(self):
            return self.getToken(GqlParser.OVER, 0)

        def ORDINALITY(self):
            return self.getToken(GqlParser.ORDINALITY, 0)

        def PERCENT_RANK(self):
            return self.getToken(GqlParser.PERCENT_RANK, 0)

        def PER_NODE_LIMIT(self):
            return self.getToken(GqlParser.PER_NODE_LIMIT, 0)

        def PRIMARY(self):
            return self.getToken(GqlParser.PRIMARY, 0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def PROPERTIES(self):
            return self.getToken(GqlParser.PROPERTIES, 0)

        def RANK(self):
            return self.getToken(GqlParser.RANK, 0)

        def READ(self):
            return self.getToken(GqlParser.READ, 0)

        def READ_CONSISTENCY(self):
            return self.getToken(GqlParser.READ_CONSISTENCY, 0)

        def REPEATABLE(self):
            return self.getToken(GqlParser.REPEATABLE, 0)

        def ROW_NUMBER(self):
            return self.getToken(GqlParser.ROW_NUMBER, 0)

        def SHORTEST(self):
            return self.getToken(GqlParser.SHORTEST, 0)

        def SIMPLE(self):
            return self.getToken(GqlParser.SIMPLE, 0)

        def SLIDING(self):
            return self.getToken(GqlParser.SLIDING, 0)

        def SOURCE(self):
            return self.getToken(GqlParser.SOURCE, 0)

        def STEP(self):
            return self.getToken(GqlParser.STEP, 0)

        def SUBSTR(self):
            return self.getToken(GqlParser.SUBSTR, 0)

        def TABLE(self):
            return self.getToken(GqlParser.TABLE, 0)

        def TEMP(self):
            return self.getToken(GqlParser.TEMP, 0)

        def TIMEZONE(self):
            return self.getToken(GqlParser.TIMEZONE, 0)

        def TO(self):
            return self.getToken(GqlParser.TO, 0)

        def TRAIL(self):
            return self.getToken(GqlParser.TRAIL, 0)

        def TRANSACTION(self):
            return self.getToken(GqlParser.TRANSACTION, 0)

        def TYPE(self):
            return self.getToken(GqlParser.TYPE, 0)

        def UNDIRECTED(self):
            return self.getToken(GqlParser.UNDIRECTED, 0)

        def UNTIL(self):
            return self.getToken(GqlParser.UNTIL, 0)

        def WALK(self):
            return self.getToken(GqlParser.WALK, 0)

        def WITHOUT(self):
            return self.getToken(GqlParser.WITHOUT, 0)

        def WRITE(self):
            return self.getToken(GqlParser.WRITE, 0)

        def ZONE(self):
            return self.getToken(GqlParser.ZONE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nonReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReservedWord" ):
                listener.enterNonReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReservedWord" ):
                listener.exitNonReservedWord(self)




    def nonReservedWord(self):

        localctx = GqlParser.NonReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_nonReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 862018189918208) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1211472708601118721) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & -8934561033191685857) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & 288562587645378595) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & 137422045489) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelimitedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accentQuotedCharacterSequence(self):
            return self.getTypedRuleContext(GqlParser.AccentQuotedCharacterSequenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_delimitedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimitedIdentifier" ):
                listener.enterDelimitedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimitedIdentifier" ):
                listener.exitDelimitedIdentifier(self)




    def delimitedIdentifier(self):

        localctx = GqlParser.DelimitedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_delimitedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.accentQuotedCharacterSequence()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_objectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectName" ):
                listener.enterObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectName" ):
                listener.exitObjectName(self)




    def objectName(self):

        localctx = GqlParser.ObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_objectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectNameOrBindingVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_IDENTIFIER(self):
            return self.getToken(GqlParser.REGULAR_IDENTIFIER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_objectNameOrBindingVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectNameOrBindingVariable" ):
                listener.enterObjectNameOrBindingVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectNameOrBindingVariable" ):
                listener.exitObjectNameOrBindingVariable(self)




    def objectNameOrBindingVariable(self):

        localctx = GqlParser.ObjectNameOrBindingVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_objectNameOrBindingVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(GqlParser.REGULAR_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_directoryName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryName" ):
                listener.enterDirectoryName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryName" ):
                listener.exitDirectoryName(self)




    def directoryName(self):

        localctx = GqlParser.DirectoryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_directoryName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = GqlParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_IDENTIFIER(self):
            return self.getToken(GqlParser.REGULAR_IDENTIFIER, 0)

        def delimitedGraphName(self):
            return self.getTypedRuleContext(GqlParser.DelimitedGraphNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphName" ):
                listener.enterGraphName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphName" ):
                listener.exitGraphName(self)




    def graphName(self):

        localctx = GqlParser.GraphNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_graphName)
        try:
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1634
                self.match(GqlParser.REGULAR_IDENTIFIER)
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1635
                self.delimitedGraphName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelimitedGraphNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delimitedIdentifier(self):
            return self.getTypedRuleContext(GqlParser.DelimitedIdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_delimitedGraphName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimitedGraphName" ):
                listener.enterDelimitedGraphName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimitedGraphName" ):
                listener.exitDelimitedGraphName(self)




    def delimitedGraphName(self):

        localctx = GqlParser.DelimitedGraphNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_delimitedGraphName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.delimitedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphTypeName" ):
                listener.enterGraphTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphTypeName" ):
                listener.exitGraphTypeName(self)




    def graphTypeName(self):

        localctx = GqlParser.GraphTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_graphTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementTypeName" ):
                listener.enterElementTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementTypeName" ):
                listener.exitElementTypeName(self)




    def elementTypeName(self):

        localctx = GqlParser.ElementTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_IDENTIFIER(self):
            return self.getToken(GqlParser.REGULAR_IDENTIFIER, 0)

        def delimitedBindingTableName(self):
            return self.getTypedRuleContext(GqlParser.DelimitedBindingTableNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableName" ):
                listener.enterBindingTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableName" ):
                listener.exitBindingTableName(self)




    def bindingTableName(self):

        localctx = GqlParser.BindingTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_bindingTableName)
        try:
            self.state = 1646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1644
                self.match(GqlParser.REGULAR_IDENTIFIER)
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self.delimitedBindingTableName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelimitedBindingTableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delimitedIdentifier(self):
            return self.getTypedRuleContext(GqlParser.DelimitedIdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_delimitedBindingTableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimitedBindingTableName" ):
                listener.enterDelimitedBindingTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimitedBindingTableName" ):
                listener.exitDelimitedBindingTableName(self)




    def delimitedBindingTableName(self):

        localctx = GqlParser.DelimitedBindingTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_delimitedBindingTableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.delimitedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = GqlParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_labelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelName" ):
                listener.enterLabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelName" ):
                listener.exitLabelName(self)




    def labelName(self):

        localctx = GqlParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = GqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_functionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyName" ):
                listener.enterPropertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyName" ):
                listener.exitPropertyName(self)




    def propertyName(self):

        localctx = GqlParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_propertyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldName" ):
                listener.enterFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldName" ):
                listener.exitFieldName(self)




    def fieldName(self):

        localctx = GqlParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR_SIGN(self):
            return self.getToken(GqlParser.DOLLAR_SIGN, 0)

        def unsignedNumericLiteral(self):
            return self.getTypedRuleContext(GqlParser.UnsignedNumericLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.PERCENT)
            else:
                return self.getToken(GqlParser.PERCENT, i)

        def getRuleIndex(self):
            return GqlParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)




    def parameterName(self):

        localctx = GqlParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameterName)
        try:
            self.state = 1672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1660
                self.match(GqlParser.DOLLAR_SIGN)
                self.state = 1663
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [392, 393, 394, 395, 396, 397]:
                    self.state = 1661
                    self.unsignedNumericLiteral()
                    pass
                elif token in [28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 402, 407]:
                    self.state = 1662
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.match(GqlParser.PERCENT)
                self.state = 1668
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [392, 393, 394, 395, 396, 397]:
                    self.state = 1666
                    self.unsignedNumericLiteral()
                    pass
                elif token in [28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 402, 407]:
                    self.state = 1667
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1670
                self.match(GqlParser.PERCENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = GqlParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphVariable" ):
                listener.enterGraphVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphVariable" ):
                listener.exitGraphVariable(self)




    def graphVariable(self):

        localctx = GqlParser.GraphVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_graphVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariable(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableContext,0)


        def pathOrSubpathVariable(self):
            return self.getTypedRuleContext(GqlParser.PathOrSubpathVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphPatternVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPatternVariable" ):
                listener.enterGraphPatternVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPatternVariable" ):
                listener.exitGraphPatternVariable(self)




    def graphPatternVariable(self):

        localctx = GqlParser.GraphPatternVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_graphPatternVariable)
        try:
            self.state = 1680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.elementVariable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.pathOrSubpathVariable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathOrSubpathVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathVariable(self):
            return self.getTypedRuleContext(GqlParser.PathVariableContext,0)


        def subpathVariable(self):
            return self.getTypedRuleContext(GqlParser.SubpathVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathOrSubpathVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathOrSubpathVariable" ):
                listener.enterPathOrSubpathVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathOrSubpathVariable" ):
                listener.exitPathOrSubpathVariable(self)




    def pathOrSubpathVariable(self):

        localctx = GqlParser.PathOrSubpathVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pathOrSubpathVariable)
        try:
            self.state = 1684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1682
                self.pathVariable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1683
                self.subpathVariable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementVariable" ):
                listener.enterElementVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementVariable" ):
                listener.exitElementVariable(self)




    def elementVariable(self):

        localctx = GqlParser.ElementVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_elementVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathVariable" ):
                listener.enterPathVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathVariable" ):
                listener.exitPathVariable(self)




    def pathVariable(self):

        localctx = GqlParser.PathVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_pathVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpathVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_subpathVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpathVariable" ):
                listener.enterSubpathVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpathVariable" ):
                listener.exitSubpathVariable(self)




    def subpathVariable(self):

        localctx = GqlParser.SubpathVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_subpathVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableVariable" ):
                listener.enterBindingTableVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableVariable" ):
                listener.exitBindingTableVariable(self)




    def bindingTableVariable(self):

        localctx = GqlParser.BindingTableVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_bindingTableVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_valueVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueVariable" ):
                listener.enterValueVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueVariable" ):
                listener.exitValueVariable(self)




    def valueVariable(self):

        localctx = GqlParser.ValueVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_valueVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingVariable" ):
                listener.enterBindingVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingVariable" ):
                listener.exitBindingVariable(self)




    def bindingVariable(self):

        localctx = GqlParser.BindingVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_bindingVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefinedTypeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteral(self):
            return self.getTypedRuleContext(GqlParser.BooleanLiteralContext,0)


        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def byteStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.ByteStringLiteralContext,0)


        def temporalLiteral(self):
            return self.getTypedRuleContext(GqlParser.TemporalLiteralContext,0)


        def durationLiteral(self):
            return self.getTypedRuleContext(GqlParser.DurationLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(GqlParser.NullLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_predefinedTypeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedTypeLiteral" ):
                listener.enterPredefinedTypeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedTypeLiteral" ):
                listener.exitPredefinedTypeLiteral(self)




    def predefinedTypeLiteral(self):

        localctx = GqlParser.PredefinedTypeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_predefinedTypeLiteral)
        try:
            self.state = 1704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109, 268, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self.booleanLiteral()
                pass
            elif token in [400, 401]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1699
                self.characterStringLiteral()
                pass
            elif token in [403]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1700
                self.byteStringLiteral()
                pass
            elif token in [84, 85, 260, 261]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1701
                self.temporalLiteral()
                pass
            elif token in [99, 392]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1702
                self.durationLiteral()
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1703
                self.nullLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(GqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(GqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(GqlParser.UNKNOWN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = GqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            _la = self._input.LA(1)
            if not(_la==109 or _la==268 or _la==281):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleQuotedCharacterSequence(self):
            return self.getTypedRuleContext(GqlParser.SingleQuotedCharacterSequenceContext,0)


        def doubleQuotedCharacterSequence(self):
            return self.getTypedRuleContext(GqlParser.DoubleQuotedCharacterSequenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_characterStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterStringLiteral" ):
                listener.enterCharacterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterStringLiteral" ):
                listener.exitCharacterStringLiteral(self)




    def characterStringLiteral(self):

        localctx = GqlParser.CharacterStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_characterStringLiteral)
        try:
            self.state = 1710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [400]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.singleQuotedCharacterSequence()
                pass
            elif token in [401]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1709
                self.doubleQuotedCharacterSequence()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE_STRING_LITERAL(self):
            return self.getToken(GqlParser.BYTE_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_byteStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteStringLiteral" ):
                listener.enterByteStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteStringLiteral" ):
                listener.exitByteStringLiteral(self)




    def byteStringLiteral(self):

        localctx = GqlParser.ByteStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_byteStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.match(GqlParser.BYTE_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(GqlParser.StatementBlockContext,0)


        def atSchemaClause(self):
            return self.getTypedRuleContext(GqlParser.AtSchemaClauseContext,0)


        def bindingVariableDefinitionBlock(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableDefinitionBlockContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_procedureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureBody" ):
                listener.enterProcedureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureBody" ):
                listener.exitProcedureBody(self)




    def procedureBody(self):

        localctx = GqlParser.ProcedureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_procedureBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 1714
                self.atSchemaClause()


            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or _la==122 or _la==218 or _la==255 or _la==286:
                self.state = 1717
                self.bindingVariableDefinitionBlock()


            self.state = 1720
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingVariableDefinitionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.BindingVariableDefinitionContext)
            else:
                return self.getTypedRuleContext(GqlParser.BindingVariableDefinitionContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingVariableDefinitionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingVariableDefinitionBlock" ):
                listener.enterBindingVariableDefinitionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingVariableDefinitionBlock" ):
                listener.exitBindingVariableDefinitionBlock(self)




    def bindingVariableDefinitionBlock(self):

        localctx = GqlParser.BindingVariableDefinitionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bindingVariableDefinitionBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1722
                self.bindingVariableDefinition()
                self.state = 1725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==48 or _la==122 or _la==218 or _la==255 or _la==286):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingVariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphVariableDefinition(self):
            return self.getTypedRuleContext(GqlParser.GraphVariableDefinitionContext,0)


        def bindingTableVariableDefinition(self):
            return self.getTypedRuleContext(GqlParser.BindingTableVariableDefinitionContext,0)


        def valueVariableDefinition(self):
            return self.getTypedRuleContext(GqlParser.ValueVariableDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingVariableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingVariableDefinition" ):
                listener.enterBindingVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingVariableDefinition" ):
                listener.exitBindingVariableDefinition(self)




    def bindingVariableDefinition(self):

        localctx = GqlParser.BindingVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_bindingVariableDefinition)
        try:
            self.state = 1730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122, 218]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1727
                self.graphVariableDefinition()
                pass
            elif token in [48, 255]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1728
                self.bindingTableVariableDefinition()
                pass
            elif token in [286]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1729
                self.valueVariableDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(GqlParser.StatementContext,0)


        def nextStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.NextStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.NextStatementContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_statementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementBlock" ):
                listener.enterStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementBlock" ):
                listener.exitStatementBlock(self)




    def statementBlock(self):

        localctx = GqlParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_statementBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.statement()
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==183 or _la==259:
                self.state = 1733
                self.nextStatement()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linearCatalogModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.LinearCatalogModifyingStatementContext,0)


        def linearDataModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.LinearDataModifyingStatementContext,0)


        def queryStatement(self):
            return self.getTypedRuleContext(GqlParser.QueryStatementContext,0)


        def managerStatement(self):
            return self.getTypedRuleContext(GqlParser.ManagerStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = GqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_statement)
        try:
            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1739
                self.linearCatalogModifyingStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1740
                self.linearDataModifyingStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1741
                self.queryStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1742
                self.managerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NextStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(GqlParser.StatementContext,0)


        def NEXT(self):
            return self.getToken(GqlParser.NEXT, 0)

        def THEN(self):
            return self.getToken(GqlParser.THEN, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(GqlParser.YieldClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nextStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNextStatement" ):
                listener.enterNextStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNextStatement" ):
                listener.exitNextStatement(self)




    def nextStatement(self):

        localctx = GqlParser.NextStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_nextStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            _la = self._input.LA(1)
            if not(_la==183 or _la==259):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 1746
                self.yieldClause()


            self.state = 1749
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphVariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def graphVariable(self):
            return self.getTypedRuleContext(GqlParser.GraphVariableContext,0)


        def optTypedGraphInitializer(self):
            return self.getTypedRuleContext(GqlParser.OptTypedGraphInitializerContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_graphVariableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphVariableDefinition" ):
                listener.enterGraphVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphVariableDefinition" ):
                listener.exitGraphVariableDefinition(self)




    def graphVariableDefinition(self):

        localctx = GqlParser.GraphVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_graphVariableDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1751
                self.match(GqlParser.PROPERTY)


            self.state = 1754
            self.match(GqlParser.GRAPH)
            self.state = 1755
            self.graphVariable()
            self.state = 1756
            self.optTypedGraphInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptTypedGraphInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphInitializer(self):
            return self.getTypedRuleContext(GqlParser.GraphInitializerContext,0)


        def graphReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.GraphReferenceValueTypeContext,0)


        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_optTypedGraphInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptTypedGraphInitializer" ):
                listener.enterOptTypedGraphInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptTypedGraphInitializer" ):
                listener.exitOptTypedGraphInitializer(self)




    def optTypedGraphInitializer(self):

        localctx = GqlParser.OptTypedGraphInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_optTypedGraphInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==122 or _la==218 or _la==270 or _la==360:
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==270 or _la==360:
                    self.state = 1758
                    self.typed()


                self.state = 1761
                self.graphReferenceValueType()


            self.state = 1764
            self.graphInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphInitializer" ):
                listener.enterGraphInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphInitializer" ):
                listener.exitGraphInitializer(self)




    def graphInitializer(self):

        localctx = GqlParser.GraphInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_graphInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(GqlParser.EQUALS_OPERATOR)
            self.state = 1767
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableVariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(GqlParser.TABLE, 0)

        def bindingTableVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingTableVariableContext,0)


        def optTypedBindingTableInitializer(self):
            return self.getTypedRuleContext(GqlParser.OptTypedBindingTableInitializerContext,0)


        def BINDING(self):
            return self.getToken(GqlParser.BINDING, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableVariableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableVariableDefinition" ):
                listener.enterBindingTableVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableVariableDefinition" ):
                listener.exitBindingTableVariableDefinition(self)




    def bindingTableVariableDefinition(self):

        localctx = GqlParser.BindingTableVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_bindingTableVariableDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1769
                self.match(GqlParser.BINDING)


            self.state = 1772
            self.match(GqlParser.TABLE)
            self.state = 1773
            self.bindingTableVariable()
            self.state = 1774
            self.optTypedBindingTableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptTypedBindingTableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingTableInitializer(self):
            return self.getTypedRuleContext(GqlParser.BindingTableInitializerContext,0)


        def bindingTableReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.BindingTableReferenceValueTypeContext,0)


        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_optTypedBindingTableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptTypedBindingTableInitializer" ):
                listener.enterOptTypedBindingTableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptTypedBindingTableInitializer" ):
                listener.exitOptTypedBindingTableInitializer(self)




    def optTypedBindingTableInitializer(self):

        localctx = GqlParser.OptTypedBindingTableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_optTypedBindingTableInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or _la==255 or _la==270 or _la==360:
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==270 or _la==360:
                    self.state = 1776
                    self.typed()


                self.state = 1779
                self.bindingTableReferenceValueType()


            self.state = 1782
            self.bindingTableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def bindingTableExpression(self):
            return self.getTypedRuleContext(GqlParser.BindingTableExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableInitializer" ):
                listener.enterBindingTableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableInitializer" ):
                listener.exitBindingTableInitializer(self)




    def bindingTableInitializer(self):

        localctx = GqlParser.BindingTableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_bindingTableInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(GqlParser.EQUALS_OPERATOR)
            self.state = 1785
            self.bindingTableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueVariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)

        def valueVariable(self):
            return self.getTypedRuleContext(GqlParser.ValueVariableContext,0)


        def optTypedValueInitializer(self):
            return self.getTypedRuleContext(GqlParser.OptTypedValueInitializerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_valueVariableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueVariableDefinition" ):
                listener.enterValueVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueVariableDefinition" ):
                listener.exitValueVariableDefinition(self)




    def valueVariableDefinition(self):

        localctx = GqlParser.ValueVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_valueVariableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.match(GqlParser.VALUE)
            self.state = 1788
            self.valueVariable()
            self.state = 1789
            self.optTypedValueInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptTypedValueInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def valueType(self):
            return self.getTypedRuleContext(GqlParser.ValueTypeContext,0)


        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_optTypedValueInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptTypedValueInitializer" ):
                listener.enterOptTypedValueInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptTypedValueInitializer" ):
                listener.exitOptTypedValueInitializer(self)




    def optTypedValueInitializer(self):

        localctx = GqlParser.OptTypedValueInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_optTypedValueInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 75963162419008512) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & -36027938562332657) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 1152921504743686175) != 0) or ((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 4607195767965220961) != 0) or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & 21990232686697) != 0) or _la==360:
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==270 or _la==360:
                    self.state = 1791
                    self.typed()


                self.state = 1794
                self.valueType(0)


            self.state = 1797
            self.match(GqlParser.EQUALS_OPERATOR)
            self.state = 1798
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedGraphQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedGraphQuerySpecificationContext,0)


        def objectExpressionPrimary(self):
            return self.getTypedRuleContext(GqlParser.ObjectExpressionPrimaryContext,0)


        def graphReference(self):
            return self.getTypedRuleContext(GqlParser.GraphReferenceContext,0)


        def objectNameOrBindingVariable(self):
            return self.getTypedRuleContext(GqlParser.ObjectNameOrBindingVariableContext,0)


        def currentGraph(self):
            return self.getTypedRuleContext(GqlParser.CurrentGraphContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphExpression" ):
                listener.enterGraphExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphExpression" ):
                listener.exitGraphExpression(self)




    def graphExpression(self):

        localctx = GqlParser.GraphExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_graphExpression)
        try:
            self.state = 1805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1800
                self.nestedGraphQuerySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1801
                self.objectExpressionPrimary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1802
                self.graphReference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1803
                self.objectNameOrBindingVariable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1804
                self.currentGraph()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentGraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_PROPERTY_GRAPH(self):
            return self.getToken(GqlParser.CURRENT_PROPERTY_GRAPH, 0)

        def CURRENT_GRAPH(self):
            return self.getToken(GqlParser.CURRENT_GRAPH, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_currentGraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentGraph" ):
                listener.enterCurrentGraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentGraph" ):
                listener.exitCurrentGraph(self)




    def currentGraph(self):

        localctx = GqlParser.CurrentGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_currentGraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            _la = self._input.LA(1)
            if not(_la==78 or _la==79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedGraphQuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nestedGraphQuerySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedGraphQuerySpecification" ):
                listener.enterNestedGraphQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedGraphQuerySpecification" ):
                listener.exitNestedGraphQuerySpecification(self)




    def nestedGraphQuerySpecification(self):

        localctx = GqlParser.NestedGraphQuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_nestedGraphQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.nestedQuerySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedBindingTableQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedBindingTableQuerySpecificationContext,0)


        def objectExpressionPrimary(self):
            return self.getTypedRuleContext(GqlParser.ObjectExpressionPrimaryContext,0)


        def bindingTableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingTableReferenceContext,0)


        def objectNameOrBindingVariable(self):
            return self.getTypedRuleContext(GqlParser.ObjectNameOrBindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableExpression" ):
                listener.enterBindingTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableExpression" ):
                listener.exitBindingTableExpression(self)




    def bindingTableExpression(self):

        localctx = GqlParser.BindingTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_bindingTableExpression)
        try:
            self.state = 1815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self.nestedBindingTableQuerySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.objectExpressionPrimary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1813
                self.bindingTableReference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1814
                self.objectNameOrBindingVariable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedBindingTableQuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nestedBindingTableQuerySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedBindingTableQuerySpecification" ):
                listener.enterNestedBindingTableQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedBindingTableQuerySpecification" ):
                listener.exitNestedBindingTableQuerySpecification(self)




    def nestedBindingTableQuerySpecification(self):

        localctx = GqlParser.NestedBindingTableQuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_nestedBindingTableQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817
            self.nestedQuerySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectExpressionPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(GqlParser.VARIABLE, 0)

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_objectExpressionPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectExpressionPrimary" ):
                listener.enterObjectExpressionPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectExpressionPrimary" ):
                listener.exitObjectExpressionPrimary(self)




    def objectExpressionPrimary(self):

        localctx = GqlParser.ObjectExpressionPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_objectExpressionPrimary)
        try:
            self.state = 1826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.match(GqlParser.VARIABLE)
                self.state = 1820
                self.expressionAtom(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1821
                self.match(GqlParser.LEFT_PAREN)
                self.state = 1822
                self.expression(0)
                self.state = 1823
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1825
                self.expressionAtom(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinearCatalogModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCatalogModifyingStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimpleCatalogModifyingStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimpleCatalogModifyingStatementContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_linearCatalogModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinearCatalogModifyingStatement" ):
                listener.enterLinearCatalogModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinearCatalogModifyingStatement" ):
                listener.exitLinearCatalogModifyingStatement(self)




    def linearCatalogModifyingStatement(self):

        localctx = GqlParser.LinearCatalogModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_linearCatalogModifyingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1828
                self.simpleCatalogModifyingStatement()
                self.state = 1831 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 2199023779841) != 0) or _la==201):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCatalogModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveCatalogModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveCatalogModifyingStatementContext,0)


        def callCatalogModifyingProcedureStatement(self):
            return self.getTypedRuleContext(GqlParser.CallCatalogModifyingProcedureStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleCatalogModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCatalogModifyingStatement" ):
                listener.enterSimpleCatalogModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCatalogModifyingStatement" ):
                listener.exitSimpleCatalogModifyingStatement(self)




    def simpleCatalogModifyingStatement(self):

        localctx = GqlParser.SimpleCatalogModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_simpleCatalogModifyingStatement)
        try:
            self.state = 1835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.primitiveCatalogModifyingStatement()
                pass
            elif token in [57, 201]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.callCatalogModifyingProcedureStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveCatalogModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createSchemaStatement(self):
            return self.getTypedRuleContext(GqlParser.CreateSchemaStatementContext,0)


        def createGraphStatement(self):
            return self.getTypedRuleContext(GqlParser.CreateGraphStatementContext,0)


        def createGraphTypeStatement(self):
            return self.getTypedRuleContext(GqlParser.CreateGraphTypeStatementContext,0)


        def dropSchemaStatement(self):
            return self.getTypedRuleContext(GqlParser.DropSchemaStatementContext,0)


        def dropGraphStatement(self):
            return self.getTypedRuleContext(GqlParser.DropGraphStatementContext,0)


        def dropGraphTypeStatement(self):
            return self.getTypedRuleContext(GqlParser.DropGraphTypeStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_primitiveCatalogModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveCatalogModifyingStatement" ):
                listener.enterPrimitiveCatalogModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveCatalogModifyingStatement" ):
                listener.exitPrimitiveCatalogModifyingStatement(self)




    def primitiveCatalogModifyingStatement(self):

        localctx = GqlParser.PrimitiveCatalogModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_primitiveCatalogModifyingStatement)
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1837
                self.createSchemaStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.createGraphStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1839
                self.createGraphTypeStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1840
                self.dropSchemaStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1841
                self.dropGraphStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1842
                self.dropGraphTypeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(GqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(GqlParser.SCHEMA, 0)

        def catalogSchemaParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogSchemaParentAndNameContext,0)


        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_createSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchemaStatement" ):
                listener.enterCreateSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchemaStatement" ):
                listener.exitCreateSchemaStatement(self)




    def createSchemaStatement(self):

        localctx = GqlParser.CreateSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_createSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(GqlParser.CREATE)
            self.state = 1846
            self.match(GqlParser.SCHEMA)
            self.state = 1850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1847
                self.match(GqlParser.IF)
                self.state = 1848
                self.match(GqlParser.NOT)
                self.state = 1849
                self.match(GqlParser.EXISTS)


            self.state = 1852
            self.catalogSchemaParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(GqlParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(GqlParser.SCHEMA, 0)

        def catalogSchemaParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogSchemaParentAndNameContext,0)


        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_dropSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchemaStatement" ):
                listener.enterDropSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchemaStatement" ):
                listener.exitDropSchemaStatement(self)




    def dropSchemaStatement(self):

        localctx = GqlParser.DropSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_dropSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.match(GqlParser.DROP)
            self.state = 1855
            self.match(GqlParser.SCHEMA)
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1856
                self.match(GqlParser.IF)
                self.state = 1857
                self.match(GqlParser.EXISTS)


            self.state = 1860
            self.catalogSchemaParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateGraphStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(GqlParser.CREATE, 0)

        def catalogGraphParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogGraphParentAndNameContext,0)


        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def OR(self):
            return self.getToken(GqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(GqlParser.REPLACE, 0)

        def openGraphType(self):
            return self.getTypedRuleContext(GqlParser.OpenGraphTypeContext,0)


        def ofGraphType(self):
            return self.getTypedRuleContext(GqlParser.OfGraphTypeContext,0)


        def graphSource(self):
            return self.getTypedRuleContext(GqlParser.GraphSourceContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_createGraphStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateGraphStatement" ):
                listener.enterCreateGraphStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateGraphStatement" ):
                listener.exitCreateGraphStatement(self)




    def createGraphStatement(self):

        localctx = GqlParser.CreateGraphStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_createGraphStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.match(GqlParser.CREATE)
            self.state = 1878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122, 218]:
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1863
                    self.match(GqlParser.PROPERTY)


                self.state = 1866
                self.match(GqlParser.GRAPH)
                self.state = 1870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 1867
                    self.match(GqlParser.IF)
                    self.state = 1868
                    self.match(GqlParser.NOT)
                    self.state = 1869
                    self.match(GqlParser.EXISTS)


                pass
            elif token in [202]:
                self.state = 1872
                self.match(GqlParser.OR)
                self.state = 1873
                self.match(GqlParser.REPLACE)
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1874
                    self.match(GqlParser.PROPERTY)


                self.state = 1877
                self.match(GqlParser.GRAPH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1880
            self.catalogGraphParentAndName()
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1881
                self.openGraphType()
                pass

            elif la_ == 2:
                self.state = 1882
                self.ofGraphType()
                pass


            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1885
                self.graphSource()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenGraphTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_openGraphType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenGraphType" ):
                listener.enterOpenGraphType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenGraphType" ):
                listener.exitOpenGraphType(self)




    def openGraphType(self):

        localctx = GqlParser.OpenGraphTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_openGraphType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270 or _la==360:
                self.state = 1888
                self.typed()


            self.state = 1891
            self.match(GqlParser.ANY)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122 or _la==218:
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1892
                    self.match(GqlParser.PROPERTY)


                self.state = 1895
                self.match(GqlParser.GRAPH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfGraphTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphTypeLikeGraph(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeLikeGraphContext,0)


        def graphTypeReference(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeReferenceContext,0)


        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def nestedGraphTypeSpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedGraphTypeSpecificationContext,0)


        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_ofGraphType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOfGraphType" ):
                listener.enterOfGraphType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOfGraphType" ):
                listener.exitOfGraphType(self)




    def ofGraphType(self):

        localctx = GqlParser.OfGraphTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_ofGraphType)
        self._la = 0 # Token type
        try:
            self.state = 1913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1898
                self.graphTypeLikeGraph()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 1899
                    self.typed()


                self.state = 1902
                self.graphTypeReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==270 or _la==360:
                    self.state = 1903
                    self.typed()


                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122 or _la==218:
                    self.state = 1907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==218:
                        self.state = 1906
                        self.match(GqlParser.PROPERTY)


                    self.state = 1909
                    self.match(GqlParser.GRAPH)


                self.state = 1912
                self.nestedGraphTypeSpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphTypeLikeGraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(GqlParser.LIKE, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphTypeLikeGraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphTypeLikeGraph" ):
                listener.enterGraphTypeLikeGraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphTypeLikeGraph" ):
                listener.exitGraphTypeLikeGraph(self)




    def graphTypeLikeGraph(self):

        localctx = GqlParser.GraphTypeLikeGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_graphTypeLikeGraph)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.match(GqlParser.LIKE)
            self.state = 1916
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def COPY(self):
            return self.getToken(GqlParser.COPY, 0)

        def OF(self):
            return self.getToken(GqlParser.OF, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphSource" ):
                listener.enterGraphSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphSource" ):
                listener.exitGraphSource(self)




    def graphSource(self):

        localctx = GqlParser.GraphSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_graphSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            self.match(GqlParser.AS)
            self.state = 1919
            self.match(GqlParser.COPY)
            self.state = 1920
            self.match(GqlParser.OF)
            self.state = 1921
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropGraphStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(GqlParser.DROP, 0)

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def catalogGraphParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogGraphParentAndNameContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_dropGraphStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropGraphStatement" ):
                listener.enterDropGraphStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropGraphStatement" ):
                listener.exitDropGraphStatement(self)




    def dropGraphStatement(self):

        localctx = GqlParser.DropGraphStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_dropGraphStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.match(GqlParser.DROP)
            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1924
                self.match(GqlParser.PROPERTY)


            self.state = 1927
            self.match(GqlParser.GRAPH)
            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 1928
                self.match(GqlParser.IF)
                self.state = 1929
                self.match(GqlParser.EXISTS)


            self.state = 1932
            self.catalogGraphParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateGraphTypeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(GqlParser.CREATE, 0)

        def catalogGraphTypeParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogGraphTypeParentAndNameContext,0)


        def graphTypeSource(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeSourceContext,0)


        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def TYPE(self):
            return self.getToken(GqlParser.TYPE, 0)

        def OR(self):
            return self.getToken(GqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(GqlParser.REPLACE, 0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_createGraphTypeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateGraphTypeStatement" ):
                listener.enterCreateGraphTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateGraphTypeStatement" ):
                listener.exitCreateGraphTypeStatement(self)




    def createGraphTypeStatement(self):

        localctx = GqlParser.CreateGraphTypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_createGraphTypeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.match(GqlParser.CREATE)
            self.state = 1952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122, 218]:
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1935
                    self.match(GqlParser.PROPERTY)


                self.state = 1938
                self.match(GqlParser.GRAPH)
                self.state = 1939
                self.match(GqlParser.TYPE)
                self.state = 1943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 1940
                    self.match(GqlParser.IF)
                    self.state = 1941
                    self.match(GqlParser.NOT)
                    self.state = 1942
                    self.match(GqlParser.EXISTS)


                pass
            elif token in [202]:
                self.state = 1945
                self.match(GqlParser.OR)
                self.state = 1946
                self.match(GqlParser.REPLACE)
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1947
                    self.match(GqlParser.PROPERTY)


                self.state = 1950
                self.match(GqlParser.GRAPH)
                self.state = 1951
                self.match(GqlParser.TYPE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1954
            self.catalogGraphTypeParentAndName()
            self.state = 1955
            self.graphTypeSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphTypeSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copyOfGraphType(self):
            return self.getTypedRuleContext(GqlParser.CopyOfGraphTypeContext,0)


        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def graphTypeLikeGraph(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeLikeGraphContext,0)


        def nestedGraphTypeSpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedGraphTypeSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphTypeSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphTypeSource" ):
                listener.enterGraphTypeSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphTypeSource" ):
                listener.exitGraphTypeSource(self)




    def graphTypeSource(self):

        localctx = GqlParser.GraphTypeSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_graphTypeSource)
        self._la = 0 # Token type
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 1957
                    self.match(GqlParser.AS)


                self.state = 1960
                self.copyOfGraphType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1961
                self.graphTypeLikeGraph()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 1962
                    self.match(GqlParser.AS)


                self.state = 1965
                self.nestedGraphTypeSpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyOfGraphTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(GqlParser.COPY, 0)

        def OF(self):
            return self.getToken(GqlParser.OF, 0)

        def graphTypeReference(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeReferenceContext,0)


        def externalObjectReference(self):
            return self.getTypedRuleContext(GqlParser.ExternalObjectReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_copyOfGraphType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyOfGraphType" ):
                listener.enterCopyOfGraphType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyOfGraphType" ):
                listener.exitCopyOfGraphType(self)




    def copyOfGraphType(self):

        localctx = GqlParser.CopyOfGraphTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_copyOfGraphType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(GqlParser.COPY)
            self.state = 1969
            self.match(GqlParser.OF)
            self.state = 1972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 15, 16, 24, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 402, 407]:
                self.state = 1970
                self.graphTypeReference()
                pass
            elif token in [133]:
                self.state = 1971
                self.externalObjectReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropGraphTypeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(GqlParser.DROP, 0)

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def TYPE(self):
            return self.getToken(GqlParser.TYPE, 0)

        def catalogGraphTypeParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogGraphTypeParentAndNameContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_dropGraphTypeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropGraphTypeStatement" ):
                listener.enterDropGraphTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropGraphTypeStatement" ):
                listener.exitDropGraphTypeStatement(self)




    def dropGraphTypeStatement(self):

        localctx = GqlParser.DropGraphTypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_dropGraphTypeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(GqlParser.DROP)
            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1975
                self.match(GqlParser.PROPERTY)


            self.state = 1978
            self.match(GqlParser.GRAPH)
            self.state = 1979
            self.match(GqlParser.TYPE)
            self.state = 1982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1980
                self.match(GqlParser.IF)
                self.state = 1981
                self.match(GqlParser.EXISTS)


            self.state = 1984
            self.catalogGraphTypeParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallCatalogModifyingProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callProcedureStatement(self):
            return self.getTypedRuleContext(GqlParser.CallProcedureStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_callCatalogModifyingProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallCatalogModifyingProcedureStatement" ):
                listener.enterCallCatalogModifyingProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallCatalogModifyingProcedureStatement" ):
                listener.exitCallCatalogModifyingProcedureStatement(self)




    def callCatalogModifyingProcedureStatement(self):

        localctx = GqlParser.CallCatalogModifyingProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_callCatalogModifyingProcedureStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self.callProcedureStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinearDataModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearDataModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.FocusedLinearDataModifyingStatementContext,0)


        def ambientLinearDataModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.AmbientLinearDataModifyingStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_linearDataModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinearDataModifyingStatement" ):
                listener.enterLinearDataModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinearDataModifyingStatement" ):
                listener.exitLinearDataModifyingStatement(self)




    def linearDataModifyingStatement(self):

        localctx = GqlParser.LinearDataModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_linearDataModifyingStatement)
        try:
            self.state = 1990
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121, 284]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1988
                self.focusedLinearDataModifyingStatement()
                pass
            elif token in [10, 57, 89, 93, 110, 120, 138, 164, 166, 179, 189, 198, 201, 203, 225, 227, 237, 244]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1989
                self.ambientLinearDataModifyingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedLinearDataModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearDataModifyingStatementBody(self):
            return self.getTypedRuleContext(GqlParser.FocusedLinearDataModifyingStatementBodyContext,0)


        def focusedNestedDataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.FocusedNestedDataModifyingProcedureSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedLinearDataModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedLinearDataModifyingStatement" ):
                listener.enterFocusedLinearDataModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedLinearDataModifyingStatement" ):
                listener.exitFocusedLinearDataModifyingStatement(self)




    def focusedLinearDataModifyingStatement(self):

        localctx = GqlParser.FocusedLinearDataModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_focusedLinearDataModifyingStatement)
        try:
            self.state = 1994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1992
                self.focusedLinearDataModifyingStatementBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1993
                self.focusedNestedDataModifyingProcedureSpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedLinearDataModifyingStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GqlParser.UseGraphClauseContext,0)


        def simpleLinearDataAccessingStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleLinearDataAccessingStatementContext,0)


        def primitiveResultStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveResultStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedLinearDataModifyingStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedLinearDataModifyingStatementBody" ):
                listener.enterFocusedLinearDataModifyingStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedLinearDataModifyingStatementBody" ):
                listener.exitFocusedLinearDataModifyingStatementBody(self)




    def focusedLinearDataModifyingStatementBody(self):

        localctx = GqlParser.FocusedLinearDataModifyingStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_focusedLinearDataModifyingStatementBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.useGraphClause()
            self.state = 1997
            self.simpleLinearDataAccessingStatement()
            self.state = 1999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111 or _la==229 or _la==317:
                self.state = 1998
                self.primitiveResultStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedNestedDataModifyingProcedureSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GqlParser.UseGraphClauseContext,0)


        def nestedDataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedDataModifyingProcedureSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedNestedDataModifyingProcedureSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedNestedDataModifyingProcedureSpecification" ):
                listener.enterFocusedNestedDataModifyingProcedureSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedNestedDataModifyingProcedureSpecification" ):
                listener.exitFocusedNestedDataModifyingProcedureSpecification(self)




    def focusedNestedDataModifyingProcedureSpecification(self):

        localctx = GqlParser.FocusedNestedDataModifyingProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_focusedNestedDataModifyingProcedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.useGraphClause()
            self.state = 2002
            self.nestedDataModifyingProcedureSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbientLinearDataModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambientLinearDataModifyingStatementBody(self):
            return self.getTypedRuleContext(GqlParser.AmbientLinearDataModifyingStatementBodyContext,0)


        def nestedDataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedDataModifyingProcedureSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_ambientLinearDataModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbientLinearDataModifyingStatement" ):
                listener.enterAmbientLinearDataModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbientLinearDataModifyingStatement" ):
                listener.exitAmbientLinearDataModifyingStatement(self)




    def ambientLinearDataModifyingStatement(self):

        localctx = GqlParser.AmbientLinearDataModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_ambientLinearDataModifyingStatement)
        try:
            self.state = 2006
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57, 89, 93, 110, 120, 138, 164, 166, 179, 189, 198, 201, 203, 225, 227, 237, 244]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2004
                self.ambientLinearDataModifyingStatementBody()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2005
                self.nestedDataModifyingProcedureSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbientLinearDataModifyingStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleLinearQueryStatementContext,0)


        def simpleDataModifyingStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimpleDataModifyingStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimpleDataModifyingStatementContext,i)


        def primitiveResultStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveResultStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_ambientLinearDataModifyingStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbientLinearDataModifyingStatementBody" ):
                listener.enterAmbientLinearDataModifyingStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbientLinearDataModifyingStatementBody" ):
                listener.exitAmbientLinearDataModifyingStatementBody(self)




    def ambientLinearDataModifyingStatementBody(self):

        localctx = GqlParser.AmbientLinearDataModifyingStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_ambientLinearDataModifyingStatementBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 2008
                self.simpleLinearQueryStatement()


            self.state = 2012 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2011
                self.simpleDataModifyingStatement()
                self.state = 2014 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==57 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 562949953421329) != 0) or ((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & 281818574098433) != 0)):
                    break

            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111 or _la==229 or _la==317:
                self.state = 2016
                self.primitiveResultStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleLinearDataAccessingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDataAccessingStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimpleDataAccessingStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimpleDataAccessingStatementContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleLinearDataAccessingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLinearDataAccessingStatement" ):
                listener.enterSimpleLinearDataAccessingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLinearDataAccessingStatement" ):
                listener.exitSimpleLinearDataAccessingStatement(self)




    def simpleLinearDataAccessingStatement(self):

        localctx = GqlParser.SimpleLinearDataAccessingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_simpleLinearDataAccessingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2019
                self.simpleDataAccessingStatement()
                self.state = 2022 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & -9214364764585590783) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & -8068196533075443711) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & 2216224096257) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDataAccessingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleQueryStatementContext,0)


        def simpleDataModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleDataModifyingStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleDataAccessingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataAccessingStatement" ):
                listener.enterSimpleDataAccessingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataAccessingStatement" ):
                listener.exitSimpleDataAccessingStatement(self)




    def simpleDataAccessingStatement(self):

        localctx = GqlParser.SimpleDataAccessingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_simpleDataAccessingStatement)
        try:
            self.state = 2026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2024
                self.simpleQueryStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2025
                self.simpleDataModifyingStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDataModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveDataModifyingStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveDataModifyingStatementContext,0)


        def callDataModifyingProcedureStatement(self):
            return self.getTypedRuleContext(GqlParser.CallDataModifyingProcedureStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleDataModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataModifyingStatement" ):
                listener.enterSimpleDataModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataModifyingStatement" ):
                listener.exitSimpleDataModifyingStatement(self)




    def simpleDataModifyingStatement(self):

        localctx = GqlParser.SimpleDataModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_simpleDataModifyingStatement)
        try:
            self.state = 2030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89, 93, 138, 189, 225, 227, 237]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.primitiveDataModifyingStatement()
                pass
            elif token in [57, 201]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2029
                self.callDataModifyingProcedureStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveDataModifyingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertStatement(self):
            return self.getTypedRuleContext(GqlParser.InsertStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(GqlParser.SetStatementContext,0)


        def removeStatement(self):
            return self.getTypedRuleContext(GqlParser.RemoveStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(GqlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(GqlParser.ReplaceStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_primitiveDataModifyingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataModifyingStatement" ):
                listener.enterPrimitiveDataModifyingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataModifyingStatement" ):
                listener.exitPrimitiveDataModifyingStatement(self)




    def primitiveDataModifyingStatement(self):

        localctx = GqlParser.PrimitiveDataModifyingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_primitiveDataModifyingStatement)
        try:
            self.state = 2037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2032
                self.insertStatement()
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2033
                self.setStatement()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2034
                self.removeStatement()
                pass
            elif token in [89, 93, 189]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2035
                self.deleteStatement()
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2036
                self.replaceStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(GqlParser.INSERT, 0)

        def insertGraphPattern(self):
            return self.getTypedRuleContext(GqlParser.InsertGraphPatternContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = GqlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_insertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.match(GqlParser.INSERT)
            self.state = 2040
            self.insertGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(GqlParser.SET, 0)

        def setItemList(self):
            return self.getTypedRuleContext(GqlParser.SetItemListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)




    def setStatement(self):

        localctx = GqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.match(GqlParser.SET)
            self.state = 2043
            self.setItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SetItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.SetItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_setItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetItemList" ):
                listener.enterSetItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetItemList" ):
                listener.exitSetItemList(self)




    def setItemList(self):

        localctx = GqlParser.SetItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_setItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.setItem()
            self.state = 2050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2046
                self.match(GqlParser.COMMA)
                self.state = 2047
                self.setItem()
                self.state = 2052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setPropertyItem(self):
            return self.getTypedRuleContext(GqlParser.SetPropertyItemContext,0)


        def setAllPropertiesItem(self):
            return self.getTypedRuleContext(GqlParser.SetAllPropertiesItemContext,0)


        def updatePropertiesItem(self):
            return self.getTypedRuleContext(GqlParser.UpdatePropertiesItemContext,0)


        def setLabelItem(self):
            return self.getTypedRuleContext(GqlParser.SetLabelItemContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_setItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetItem" ):
                listener.enterSetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetItem" ):
                listener.exitSetItem(self)




    def setItem(self):

        localctx = GqlParser.SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_setItem)
        try:
            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                self.setPropertyItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2054
                self.setAllPropertiesItem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2055
                self.updatePropertiesItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2056
                self.setLabelItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPropertyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def PERIOD(self):
            return self.getToken(GqlParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_setPropertyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPropertyItem" ):
                listener.enterSetPropertyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPropertyItem" ):
                listener.exitSetPropertyItem(self)




    def setPropertyItem(self):

        localctx = GqlParser.SetPropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_setPropertyItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.bindingVariableReference()
            self.state = 2060
            self.match(GqlParser.PERIOD)
            self.state = 2061
            self.propertyName()
            self.state = 2062
            self.match(GqlParser.EQUALS_OPERATOR)
            self.state = 2063
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAllPropertiesItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def propertyKeyValuePairList(self):
            return self.getTypedRuleContext(GqlParser.PropertyKeyValuePairListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_setAllPropertiesItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAllPropertiesItem" ):
                listener.enterSetAllPropertiesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAllPropertiesItem" ):
                listener.exitSetAllPropertiesItem(self)




    def setAllPropertiesItem(self):

        localctx = GqlParser.SetAllPropertiesItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_setAllPropertiesItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.bindingVariableReference()
            self.state = 2066
            self.match(GqlParser.EQUALS_OPERATOR)
            self.state = 2067
            self.match(GqlParser.LEFT_BRACE)
            self.state = 2069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 2068
                self.propertyKeyValuePairList()


            self.state = 2071
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatePropertiesItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def PLUS_SIGN(self):
            return self.getToken(GqlParser.PLUS_SIGN, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def propertyKeyValuePairList(self):
            return self.getTypedRuleContext(GqlParser.PropertyKeyValuePairListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_updatePropertiesItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatePropertiesItem" ):
                listener.enterUpdatePropertiesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatePropertiesItem" ):
                listener.exitUpdatePropertiesItem(self)




    def updatePropertiesItem(self):

        localctx = GqlParser.UpdatePropertiesItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_updatePropertiesItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.bindingVariableReference()
            self.state = 2074
            self.match(GqlParser.PLUS_SIGN)
            self.state = 2075
            self.match(GqlParser.EQUALS_OPERATOR)
            self.state = 2076
            self.match(GqlParser.LEFT_BRACE)
            self.state = 2078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 2077
                self.propertyKeyValuePairList()


            self.state = 2080
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetLabelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def isOrColon(self):
            return self.getTypedRuleContext(GqlParser.IsOrColonContext,0)


        def labelName(self):
            return self.getTypedRuleContext(GqlParser.LabelNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_setLabelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetLabelItem" ):
                listener.enterSetLabelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetLabelItem" ):
                listener.exitSetLabelItem(self)




    def setLabelItem(self):

        localctx = GqlParser.SetLabelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_setLabelItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self.bindingVariableReference()
            self.state = 2083
            self.isOrColon()
            self.state = 2084
            self.labelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelSetSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.LabelNameContext)
            else:
                return self.getTypedRuleContext(GqlParser.LabelNameContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.AMPERSAND)
            else:
                return self.getToken(GqlParser.AMPERSAND, i)

        def getRuleIndex(self):
            return GqlParser.RULE_labelSetSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelSetSpecification" ):
                listener.enterLabelSetSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelSetSpecification" ):
                listener.exitLabelSetSpecification(self)




    def labelSetSpecification(self):

        localctx = GqlParser.LabelSetSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_labelSetSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2086
            self.labelName()
            self.state = 2091
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2087
                    self.match(GqlParser.AMPERSAND)
                    self.state = 2088
                    self.labelName() 
                self.state = 2093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(GqlParser.REMOVE, 0)

        def removeItemList(self):
            return self.getTypedRuleContext(GqlParser.RemoveItemListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_removeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveStatement" ):
                listener.enterRemoveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveStatement" ):
                listener.exitRemoveStatement(self)




    def removeStatement(self):

        localctx = GqlParser.RemoveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_removeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.match(GqlParser.REMOVE)
            self.state = 2095
            self.removeItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def removeItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.RemoveItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.RemoveItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_removeItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveItemList" ):
                listener.enterRemoveItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveItemList" ):
                listener.exitRemoveItemList(self)




    def removeItemList(self):

        localctx = GqlParser.RemoveItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_removeItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self.removeItem()
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2098
                self.match(GqlParser.COMMA)
                self.state = 2099
                self.removeItem()
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def removePropertyItem(self):
            return self.getTypedRuleContext(GqlParser.RemovePropertyItemContext,0)


        def removeLabelItem(self):
            return self.getTypedRuleContext(GqlParser.RemoveLabelItemContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_removeItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveItem" ):
                listener.enterRemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveItem" ):
                listener.exitRemoveItem(self)




    def removeItem(self):

        localctx = GqlParser.RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_removeItem)
        try:
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2105
                self.removePropertyItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2106
                self.removeLabelItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovePropertyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def PERIOD(self):
            return self.getToken(GqlParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_removePropertyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovePropertyItem" ):
                listener.enterRemovePropertyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovePropertyItem" ):
                listener.exitRemovePropertyItem(self)




    def removePropertyItem(self):

        localctx = GqlParser.RemovePropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_removePropertyItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.bindingVariableReference()
            self.state = 2110
            self.match(GqlParser.PERIOD)
            self.state = 2111
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveLabelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def isOrColon(self):
            return self.getTypedRuleContext(GqlParser.IsOrColonContext,0)


        def labelName(self):
            return self.getTypedRuleContext(GqlParser.LabelNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_removeLabelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveLabelItem" ):
                listener.enterRemoveLabelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveLabelItem" ):
                listener.exitRemoveLabelItem(self)




    def removeLabelItem(self):

        localctx = GqlParser.RemoveLabelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_removeLabelItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2113
            self.bindingVariableReference()
            self.state = 2114
            self.isOrColon()
            self.state = 2115
            self.labelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(GqlParser.DELETE, 0)

        def deleteItemList(self):
            return self.getTypedRuleContext(GqlParser.DeleteItemListContext,0)


        def DETACH(self):
            return self.getToken(GqlParser.DETACH, 0)

        def NODETACH(self):
            return self.getToken(GqlParser.NODETACH, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = GqlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93 or _la==189:
                self.state = 2117
                _la = self._input.LA(1)
                if not(_la==93 or _la==189):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2120
            self.match(GqlParser.DELETE)
            self.state = 2121
            self.deleteItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.DeleteItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.DeleteItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_deleteItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteItemList" ):
                listener.enterDeleteItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteItemList" ):
                listener.exitDeleteItemList(self)




    def deleteItemList(self):

        localctx = GqlParser.DeleteItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_deleteItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.deleteItem()
            self.state = 2128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2124
                self.match(GqlParser.COMMA)
                self.state = 2125
                self.deleteItem()
                self.state = 2130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_deleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteItem" ):
                listener.enterDeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteItem" ):
                listener.exitDeleteItem(self)




    def deleteItem(self):

        localctx = GqlParser.DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_deleteItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(GqlParser.REPLACE, 0)

        def insertGraphPattern(self):
            return self.getTypedRuleContext(GqlParser.InsertGraphPatternContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = GqlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_replaceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self.match(GqlParser.REPLACE)
            self.state = 2134
            self.insertGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallDataModifyingProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callProcedureStatement(self):
            return self.getTypedRuleContext(GqlParser.CallProcedureStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_callDataModifyingProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallDataModifyingProcedureStatement" ):
                listener.enterCallDataModifyingProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallDataModifyingProcedureStatement" ):
                listener.exitCallDataModifyingProcedureStatement(self)




    def callDataModifyingProcedureStatement(self):

        localctx = GqlParser.CallDataModifyingProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_callDataModifyingProcedureStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.callProcedureStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinQueryExpression(self):
            return self.getTypedRuleContext(GqlParser.JoinQueryExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_queryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatement" ):
                listener.enterQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatement" ):
                listener.exitQueryStatement(self)




    def queryStatement(self):

        localctx = GqlParser.QueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_queryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.joinQueryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compositeQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.CompositeQueryStatementContext,0)


        def joinRightPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.JoinRightPartContext)
            else:
                return self.getTypedRuleContext(GqlParser.JoinRightPartContext,i)


        def primitiveResultStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PrimitiveResultStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.PrimitiveResultStatementContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_joinQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinQueryExpression" ):
                listener.enterJoinQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinQueryExpression" ):
                listener.exitJoinQueryExpression(self)




    def joinQueryExpression(self):

        localctx = GqlParser.JoinQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_joinQueryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.compositeQueryStatement()
            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==162 or _la==232 or ((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & 13) != 0):
                self.state = 2141
                self.joinRightPart()
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111 or _la==229 or _la==317:
                    self.state = 2142
                    self.primitiveResultStatement()


                self.state = 2149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRightPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(GqlParser.JOIN, 0)

        def compositeQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.CompositeQueryStatementContext,0)


        def joinType(self):
            return self.getTypedRuleContext(GqlParser.JoinTypeContext,0)


        def ON(self):
            return self.getToken(GqlParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_joinRightPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRightPart" ):
                listener.enterJoinRightPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRightPart" ):
                listener.exitJoinRightPart(self)




    def joinRightPart(self):

        localctx = GqlParser.JoinRightPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_joinRightPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162 or _la==232 or _la==315 or _la==316:
                self.state = 2150
                self.joinType()


            self.state = 2153
            self.match(GqlParser.JOIN)
            self.state = 2154
            self.compositeQueryStatement()
            self.state = 2157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 2155
                self.match(GqlParser.ON)
                self.state = 2156
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compositeQueryExpression(self):
            return self.getTypedRuleContext(GqlParser.CompositeQueryExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_compositeQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeQueryStatement" ):
                listener.enterCompositeQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeQueryStatement" ):
                listener.exitCompositeQueryStatement(self)




    def compositeQueryStatement(self):

        localctx = GqlParser.CompositeQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_compositeQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2159
            self.compositeQueryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManagerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(GqlParser.SHOW, 0)

        def PROCESSLIST(self):
            return self.getToken(GqlParser.PROCESSLIST, 0)

        def KILL(self):
            return self.getToken(GqlParser.KILL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GqlParser.IntegerLiteralContext,0)


        def killMode(self):
            return self.getTypedRuleContext(GqlParser.KillModeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_managerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManagerStatement" ):
                listener.enterManagerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManagerStatement" ):
                listener.exitManagerStatement(self)




    def managerStatement(self):

        localctx = GqlParser.ManagerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_managerStatement)
        self._la = 0 # Token type
        try:
            self.state = 2168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2161
                self.match(GqlParser.SHOW)
                self.state = 2162
                self.match(GqlParser.PROCESSLIST)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2163
                self.match(GqlParser.KILL)
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==348:
                    self.state = 2164
                    self.killMode()


                self.state = 2167
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECTION(self):
            return self.getToken(GqlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(GqlParser.QUERY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_killMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillMode" ):
                listener.enterKillMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillMode" ):
                listener.exitKillMode(self)




    def killMode(self):

        localctx = GqlParser.KillModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_killMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            _la = self._input.LA(1)
            if not(_la==69 or _la==348):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linearQueryStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.LinearQueryStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.LinearQueryStatementContext,i)


        def queryConjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.QueryConjunctionContext)
            else:
                return self.getTypedRuleContext(GqlParser.QueryConjunctionContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_compositeQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeQueryExpression" ):
                listener.enterCompositeQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeQueryExpression" ):
                listener.exitCompositeQueryExpression(self)




    def compositeQueryExpression(self):

        localctx = GqlParser.CompositeQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_compositeQueryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2172
            self.linearQueryStatement()
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106 or _la==153 or _la==205 or _la==280:
                self.state = 2173
                self.queryConjunction()
                self.state = 2174
                self.linearQueryStatement()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setOperator(self):
            return self.getTypedRuleContext(GqlParser.SetOperatorContext,0)


        def OTHERWISE(self):
            return self.getToken(GqlParser.OTHERWISE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_queryConjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryConjunction" ):
                listener.enterQueryConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryConjunction" ):
                listener.exitQueryConjunction(self)




    def queryConjunction(self):

        localctx = GqlParser.QueryConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_queryConjunction)
        try:
            self.state = 2183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106, 153, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2181
                self.setOperator()
                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2182
                self.match(GqlParser.OTHERWISE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(GqlParser.UNION, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GqlParser.SetQuantifierContext,0)


        def EXCEPT(self):
            return self.getToken(GqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(GqlParser.INTERSECT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_setOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperator" ):
                listener.enterSetOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperator" ):
                listener.exitSetOperator(self)




    def setOperator(self):

        localctx = GqlParser.SetOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_setOperator)
        self._la = 0 # Token type
        try:
            self.state = 2197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2185
                self.match(GqlParser.UNION)
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31 or _la==96:
                    self.state = 2186
                    self.setQuantifier()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2189
                self.match(GqlParser.EXCEPT)
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31 or _la==96:
                    self.state = 2190
                    self.setQuantifier()


                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2193
                self.match(GqlParser.INTERSECT)
                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31 or _la==96:
                    self.state = 2194
                    self.setQuantifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(GqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(GqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(GqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(GqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = GqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            _la = self._input.LA(1)
            if not(_la==162 or _la==232 or _la==315 or _la==316):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinearQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.FocusedLinearQueryStatementContext,0)


        def ambientLinearQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.AmbientLinearQueryStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_linearQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinearQueryStatement" ):
                listener.enterLinearQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinearQueryStatement" ):
                listener.exitLinearQueryStatement(self)




    def linearQueryStatement(self):

        localctx = GqlParser.LinearQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_linearQueryStatement)
        try:
            self.state = 2203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121, 235, 284]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2201
                self.focusedLinearQueryStatement()
                pass
            elif token in [10, 57, 110, 111, 120, 164, 166, 179, 198, 201, 203, 229, 244, 317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2202
                self.ambientLinearQueryStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedLinearQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.FocusedQueryStatementContext,0)


        def focusedPrimitiveResultStatement(self):
            return self.getTypedRuleContext(GqlParser.FocusedPrimitiveResultStatementContext,0)


        def focusedNestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.FocusedNestedQuerySpecificationContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(GqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedLinearQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedLinearQueryStatement" ):
                listener.enterFocusedLinearQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedLinearQueryStatement" ):
                listener.exitFocusedLinearQueryStatement(self)




    def focusedLinearQueryStatement(self):

        localctx = GqlParser.FocusedLinearQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_focusedLinearQueryStatement)
        try:
            self.state = 2209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2205
                self.focusedQueryStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2206
                self.focusedPrimitiveResultStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2207
                self.focusedNestedQuerySpecification()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2208
                self.selectStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearQueryAndPrimitiveResultStatementPart(self):
            return self.getTypedRuleContext(GqlParser.FocusedLinearQueryAndPrimitiveResultStatementPartContext,0)


        def focusedLinearQueryStatementPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.FocusedLinearQueryStatementPartContext)
            else:
                return self.getTypedRuleContext(GqlParser.FocusedLinearQueryStatementPartContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedQueryStatement" ):
                listener.enterFocusedQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedQueryStatement" ):
                listener.exitFocusedQueryStatement(self)




    def focusedQueryStatement(self):

        localctx = GqlParser.FocusedQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_focusedQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2211
                    self.focusedLinearQueryStatementPart() 
                self.state = 2216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 2217
            self.focusedLinearQueryAndPrimitiveResultStatementPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedLinearQueryStatementPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GqlParser.UseGraphClauseContext,0)


        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleLinearQueryStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedLinearQueryStatementPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedLinearQueryStatementPart" ):
                listener.enterFocusedLinearQueryStatementPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedLinearQueryStatementPart" ):
                listener.exitFocusedLinearQueryStatementPart(self)




    def focusedLinearQueryStatementPart(self):

        localctx = GqlParser.FocusedLinearQueryStatementPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_focusedLinearQueryStatementPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self.useGraphClause()
            self.state = 2220
            self.simpleLinearQueryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedLinearQueryAndPrimitiveResultStatementPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GqlParser.UseGraphClauseContext,0)


        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleLinearQueryStatementContext,0)


        def primitiveResultStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveResultStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedLinearQueryAndPrimitiveResultStatementPart" ):
                listener.enterFocusedLinearQueryAndPrimitiveResultStatementPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedLinearQueryAndPrimitiveResultStatementPart" ):
                listener.exitFocusedLinearQueryAndPrimitiveResultStatementPart(self)




    def focusedLinearQueryAndPrimitiveResultStatementPart(self):

        localctx = GqlParser.FocusedLinearQueryAndPrimitiveResultStatementPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_focusedLinearQueryAndPrimitiveResultStatementPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.useGraphClause()
            self.state = 2223
            self.simpleLinearQueryStatement()
            self.state = 2224
            self.primitiveResultStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedPrimitiveResultStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GqlParser.UseGraphClauseContext,0)


        def primitiveResultStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveResultStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedPrimitiveResultStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedPrimitiveResultStatement" ):
                listener.enterFocusedPrimitiveResultStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedPrimitiveResultStatement" ):
                listener.exitFocusedPrimitiveResultStatement(self)




    def focusedPrimitiveResultStatement(self):

        localctx = GqlParser.FocusedPrimitiveResultStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_focusedPrimitiveResultStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.useGraphClause()
            self.state = 2227
            self.primitiveResultStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FocusedNestedQuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GqlParser.UseGraphClauseContext,0)


        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_focusedNestedQuerySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFocusedNestedQuerySpecification" ):
                listener.enterFocusedNestedQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFocusedNestedQuerySpecification" ):
                listener.exitFocusedNestedQuerySpecification(self)




    def focusedNestedQuerySpecification(self):

        localctx = GqlParser.FocusedNestedQuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_focusedNestedQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.useGraphClause()
            self.state = 2230
            self.nestedQuerySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbientLinearQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveResultStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveResultStatementContext,0)


        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleLinearQueryStatementContext,0)


        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_ambientLinearQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbientLinearQueryStatement" ):
                listener.enterAmbientLinearQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbientLinearQueryStatement" ):
                listener.exitAmbientLinearQueryStatement(self)




    def ambientLinearQueryStatement(self):

        localctx = GqlParser.AmbientLinearQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ambientLinearQueryStatement)
        self._la = 0 # Token type
        try:
            self.state = 2237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57, 110, 111, 120, 164, 166, 179, 198, 201, 203, 229, 244, 317]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & -9214364837600034815) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & 704374669317) != 0) or _la==244:
                    self.state = 2232
                    self.simpleLinearQueryStatement()


                self.state = 2235
                self.primitiveResultStatement()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.nestedQuerySpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleLinearQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleQueryStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimpleQueryStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimpleQueryStatementContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleLinearQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLinearQueryStatement" ):
                listener.enterSimpleLinearQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLinearQueryStatement" ):
                listener.exitSimpleLinearQueryStatement(self)




    def simpleLinearQueryStatement(self):

        localctx = GqlParser.SimpleLinearQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_simpleLinearQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2239
                    self.simpleQueryStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 2242 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.PrimitiveQueryStatementContext,0)


        def callQueryStatement(self):
            return self.getTypedRuleContext(GqlParser.CallQueryStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleQueryStatement" ):
                listener.enterSimpleQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleQueryStatement" ):
                listener.exitSimpleQueryStatement(self)




    def simpleQueryStatement(self):

        localctx = GqlParser.SimpleQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_simpleQueryStatement)
        try:
            self.state = 2246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2244
                self.primitiveQueryStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                self.callQueryStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchStatement(self):
            return self.getTypedRuleContext(GqlParser.MatchStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(GqlParser.LetStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(GqlParser.ForStatementContext,0)


        def filterStatement(self):
            return self.getTypedRuleContext(GqlParser.FilterStatementContext,0)


        def orderByAndPageStatement(self):
            return self.getTypedRuleContext(GqlParser.OrderByAndPageStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_primitiveQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveQueryStatement" ):
                listener.enterPrimitiveQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveQueryStatement" ):
                listener.exitPrimitiveQueryStatement(self)




    def primitiveQueryStatement(self):

        localctx = GqlParser.PrimitiveQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_primitiveQueryStatement)
        try:
            self.state = 2253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [179, 201]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2248
                self.matchStatement()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2249
                self.letStatement()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2250
                self.forStatement()
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2251
                self.filterStatement()
                pass
            elif token in [166, 198, 203, 244]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2252
                self.orderByAndPageStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleMatchStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleMatchStatementContext,0)


        def optionalMatchStatement(self):
            return self.getTypedRuleContext(GqlParser.OptionalMatchStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_matchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatement" ):
                listener.enterMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatement" ):
                listener.exitMatchStatement(self)




    def matchStatement(self):

        localctx = GqlParser.MatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_matchStatement)
        try:
            self.state = 2257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [179]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2255
                self.simpleMatchStatement()
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2256
                self.optionalMatchStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleMatchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(GqlParser.MATCH, 0)

        def graphPatternBindingTable(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternBindingTableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simpleMatchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleMatchStatement" ):
                listener.enterSimpleMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleMatchStatement" ):
                listener.exitSimpleMatchStatement(self)




    def simpleMatchStatement(self):

        localctx = GqlParser.SimpleMatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_simpleMatchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self.match(GqlParser.MATCH)
            self.state = 2260
            self.graphPatternBindingTable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMatchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(GqlParser.OPTIONAL, 0)

        def optionalOperand(self):
            return self.getTypedRuleContext(GqlParser.OptionalOperandContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_optionalMatchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMatchStatement" ):
                listener.enterOptionalMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMatchStatement" ):
                listener.exitOptionalMatchStatement(self)




    def optionalMatchStatement(self):

        localctx = GqlParser.OptionalMatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_optionalMatchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(GqlParser.OPTIONAL)
            self.state = 2263
            self.optionalOperand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleMatchStatement(self):
            return self.getTypedRuleContext(GqlParser.SimpleMatchStatementContext,0)


        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def matchStatementBlock(self):
            return self.getTypedRuleContext(GqlParser.MatchStatementBlockContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_optionalOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalOperand" ):
                listener.enterOptionalOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalOperand" ):
                listener.exitOptionalOperand(self)




    def optionalOperand(self):

        localctx = GqlParser.OptionalOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_optionalOperand)
        try:
            self.state = 2274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [179]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2265
                self.simpleMatchStatement()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2266
                self.match(GqlParser.LEFT_BRACE)
                self.state = 2267
                self.matchStatementBlock()
                self.state = 2268
                self.match(GqlParser.RIGHT_BRACE)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2270
                self.match(GqlParser.LEFT_PAREN)
                self.state = 2271
                self.matchStatementBlock()
                self.state = 2272
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.MatchStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.MatchStatementContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_matchStatementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatementBlock" ):
                listener.enterMatchStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatementBlock" ):
                listener.exitMatchStatementBlock(self)




    def matchStatementBlock(self):

        localctx = GqlParser.MatchStatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_matchStatementBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2276
                self.matchStatement()
                self.state = 2279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==179 or _la==201):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callProcedureStatement(self):
            return self.getTypedRuleContext(GqlParser.CallProcedureStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_callQueryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallQueryStatement" ):
                listener.enterCallQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallQueryStatement" ):
                listener.exitCallQueryStatement(self)




    def callQueryStatement(self):

        localctx = GqlParser.CallQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_callQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281
            self.callProcedureStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(GqlParser.FILTER, 0)

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_filterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterStatement" ):
                listener.enterFilterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterStatement" ):
                listener.exitFilterStatement(self)




    def filterStatement(self):

        localctx = GqlParser.FilterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_filterStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2283
            self.match(GqlParser.FILTER)
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 2284
                self.whereClause()
                pass

            elif la_ == 2:
                self.state = 2285
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(GqlParser.LET, 0)

        def letVariableDefinitionList(self):
            return self.getTypedRuleContext(GqlParser.LetVariableDefinitionListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)




    def letStatement(self):

        localctx = GqlParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_letStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self.match(GqlParser.LET)
            self.state = 2289
            self.letVariableDefinitionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetVariableDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letVariableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.LetVariableDefinitionContext)
            else:
                return self.getTypedRuleContext(GqlParser.LetVariableDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_letVariableDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetVariableDefinitionList" ):
                listener.enterLetVariableDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetVariableDefinitionList" ):
                listener.exitLetVariableDefinitionList(self)




    def letVariableDefinitionList(self):

        localctx = GqlParser.LetVariableDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_letVariableDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self.letVariableDefinition()
            self.state = 2296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2292
                self.match(GqlParser.COMMA)
                self.state = 2293
                self.letVariableDefinition()
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetVariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueVariableDefinition(self):
            return self.getTypedRuleContext(GqlParser.ValueVariableDefinitionContext,0)


        def valueVariable(self):
            return self.getTypedRuleContext(GqlParser.ValueVariableContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_letVariableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetVariableDefinition" ):
                listener.enterLetVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetVariableDefinition" ):
                listener.exitLetVariableDefinition(self)




    def letVariableDefinition(self):

        localctx = GqlParser.LetVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_letVariableDefinition)
        try:
            self.state = 2304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2299
                self.valueVariableDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2300
                self.valueVariable()
                self.state = 2301
                self.match(GqlParser.EQUALS_OPERATOR)
                self.state = 2302
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GqlParser.FOR, 0)

        def forItem(self):
            return self.getTypedRuleContext(GqlParser.ForItemContext,0)


        def forOrdinalityOrOffset(self):
            return self.getTypedRuleContext(GqlParser.ForOrdinalityOrOffsetContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = GqlParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.match(GqlParser.FOR)
            self.state = 2307
            self.forItem()
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==293:
                self.state = 2308
                self.forOrdinalityOrOffset()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forItemAlias(self):
            return self.getTypedRuleContext(GqlParser.ForItemAliasContext,0)


        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_forItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForItem" ):
                listener.enterForItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForItem" ):
                listener.exitForItem(self)




    def forItem(self):

        localctx = GqlParser.ForItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_forItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self.forItemAlias()
            self.state = 2312
            self.expressionAtom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForItemAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(GqlParser.IN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_forItemAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForItemAlias" ):
                listener.enterForItemAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForItemAlias" ):
                listener.exitForItemAlias(self)




    def forItemAlias(self):

        localctx = GqlParser.ForItemAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_forItemAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.identifier()
            self.state = 2315
            self.match(GqlParser.IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForOrdinalityOrOffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(GqlParser.WITH, 0)

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def ORDINALITY(self):
            return self.getToken(GqlParser.ORDINALITY, 0)

        def OFFSET(self):
            return self.getToken(GqlParser.OFFSET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_forOrdinalityOrOffset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForOrdinalityOrOffset" ):
                listener.enterForOrdinalityOrOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForOrdinalityOrOffset" ):
                listener.exitForOrdinalityOrOffset(self)




    def forOrdinalityOrOffset(self):

        localctx = GqlParser.ForOrdinalityOrOffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_forOrdinalityOrOffset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.match(GqlParser.WITH)
            self.state = 2318
            _la = self._input.LA(1)
            if not(_la==198 or _la==204):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2319
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByAndPageStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderByClause(self):
            return self.getTypedRuleContext(GqlParser.OrderByClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(GqlParser.OffsetClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(GqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_orderByAndPageStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByAndPageStatement" ):
                listener.enterOrderByAndPageStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByAndPageStatement" ):
                listener.exitOrderByAndPageStatement(self)




    def orderByAndPageStatement(self):

        localctx = GqlParser.OrderByAndPageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_orderByAndPageStatement)
        try:
            self.state = 2333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2321
                self.orderByClause()
                self.state = 2323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 2322
                    self.offsetClause()


                self.state = 2326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 2325
                    self.limitClause()


                pass
            elif token in [198, 244]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2328
                self.offsetClause()
                self.state = 2330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 2329
                    self.limitClause()


                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2332
                self.limitClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveResultStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStatement(self):
            return self.getTypedRuleContext(GqlParser.ReturnStatementContext,0)


        def orderByAndPageStatement(self):
            return self.getTypedRuleContext(GqlParser.OrderByAndPageStatementContext,0)


        def constructGraphStatement(self):
            return self.getTypedRuleContext(GqlParser.ConstructGraphStatementContext,0)


        def FINISH(self):
            return self.getToken(GqlParser.FINISH, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_primitiveResultStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveResultStatement" ):
                listener.enterPrimitiveResultStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveResultStatement" ):
                listener.exitPrimitiveResultStatement(self)




    def primitiveResultStatement(self):

        localctx = GqlParser.PrimitiveResultStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_primitiveResultStatement)
        self._la = 0 # Token type
        try:
            self.state = 2341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [229]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2335
                self.returnStatement()
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & 141733920769) != 0) or _la==244:
                    self.state = 2336
                    self.orderByAndPageStatement()


                pass
            elif token in [317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2339
                self.constructGraphStatement()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2340
                self.match(GqlParser.FINISH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GqlParser.RETURN, 0)

        def returnStatementBody(self):
            return self.getTypedRuleContext(GqlParser.ReturnStatementBodyContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = GqlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self.match(GqlParser.RETURN)
            self.state = 2344
            self.returnStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(GqlParser.ASTERISK, 0)

        def returnItemList(self):
            return self.getTypedRuleContext(GqlParser.ReturnItemListContext,0)


        def hintItemlist(self):
            return self.getTypedRuleContext(GqlParser.HintItemlistContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(GqlParser.SetQuantifierContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(GqlParser.GroupByClauseContext,0)


        def NO(self):
            return self.getToken(GqlParser.NO, 0)

        def BINDINGS(self):
            return self.getToken(GqlParser.BINDINGS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_returnStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatementBody" ):
                listener.enterReturnStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatementBody" ):
                listener.exitReturnStatementBody(self)




    def returnStatementBody(self):

        localctx = GqlParser.ReturnStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_returnStatementBody)
        self._la = 0 # Token type
        try:
            self.state = 2361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==363:
                    self.state = 2346
                    self.hintItemlist()


                self.state = 2350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 2349
                    self.setQuantifier()


                self.state = 2354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2]:
                    self.state = 2352
                    self.match(GqlParser.ASTERISK)
                    pass
                elif token in
                    self.state = 2353
                    self.returnItemList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 2356
                    self.groupByClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2359
                self.match(GqlParser.NO)
                self.state = 2360
                self.match(GqlParser.BINDINGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ReturnItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.ReturnItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_returnItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnItemList" ):
                listener.enterReturnItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnItemList" ):
                listener.exitReturnItemList(self)




    def returnItemList(self):

        localctx = GqlParser.ReturnItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_returnItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.returnItem()
            self.state = 2368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2364
                self.match(GqlParser.COMMA)
                self.state = 2365
                self.returnItem()
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_returnItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnItem" ):
                listener.enterReturnItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnItem" ):
                listener.exitReturnItem(self)




    def returnItem(self):

        localctx = GqlParser.ReturnItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_returnItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.expression(0)
            self.state = 2374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 2372
                self.match(GqlParser.AS)
                self.state = 2373
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintItemlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HINT_BEGIN(self):
            return self.getToken(GqlParser.HINT_BEGIN, 0)

        def hintItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.HintItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.HintItemContext,i)


        def BRACKETED_COMMENT_TERMINATOR(self):
            return self.getToken(GqlParser.BRACKETED_COMMENT_TERMINATOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_hintItemlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintItemlist" ):
                listener.enterHintItemlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintItemlist" ):
                listener.exitHintItemlist(self)




    def hintItemlist(self):

        localctx = GqlParser.HintItemlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_hintItemlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2376
            self.match(GqlParser.HINT_BEGIN)
            self.state = 2377
            self.hintItem()
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2378
                self.match(GqlParser.COMMA)
                self.state = 2379
                self.hintItem()
                self.state = 2384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2385
            self.match(GqlParser.BRACKETED_COMMENT_TERMINATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_hintItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlReadConsistencyContext(HintItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.HintItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ_CONSISTENCY(self):
            return self.getToken(GqlParser.READ_CONSISTENCY, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlReadConsistency" ):
                listener.enterGqlReadConsistency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlReadConsistency" ):
                listener.exitGqlReadConsistency(self)


    class GqlAllowAnonymousTableContext(HintItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.HintItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALLOW_ANONYMOUS_TABLE(self):
            return self.getToken(GqlParser.ALLOW_ANONYMOUS_TABLE, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def unsignedBooleanSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedBooleanSpecificationContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlAllowAnonymousTable" ):
                listener.enterGqlAllowAnonymousTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlAllowAnonymousTable" ):
                listener.exitGqlAllowAnonymousTable(self)



    def hintItem(self):

        localctx = GqlParser.HintItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_hintItem)
        try:
            self.state = 2397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [222]:
                localctx = GqlParser.GqlReadConsistencyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.match(GqlParser.READ_CONSISTENCY)
                self.state = 2388
                self.match(GqlParser.LEFT_PAREN)
                self.state = 2389
                self.identifier()
                self.state = 2390
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [33]:
                localctx = GqlParser.GqlAllowAnonymousTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2392
                self.match(GqlParser.ALLOW_ANONYMOUS_TABLE)
                self.state = 2393
                self.match(GqlParser.LEFT_PAREN)
                self.state = 2394
                self.unsignedBooleanSpecification()
                self.state = 2395
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructGraphStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCT(self):
            return self.getToken(GqlParser.CONSTRUCT, 0)

        def constructElementList(self):
            return self.getTypedRuleContext(GqlParser.ConstructElementListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_constructGraphStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructGraphStatement" ):
                listener.enterConstructGraphStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructGraphStatement" ):
                listener.exitConstructGraphStatement(self)




    def constructGraphStatement(self):

        localctx = GqlParser.ConstructGraphStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_constructGraphStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2399
            self.match(GqlParser.CONSTRUCT)
            self.state = 2400
            self.constructElementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ConstructElementContext)
            else:
                return self.getTypedRuleContext(GqlParser.ConstructElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_constructElementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructElementList" ):
                listener.enterConstructElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructElementList" ):
                listener.exitConstructElementList(self)




    def constructElementList(self):

        localctx = GqlParser.ConstructElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_constructElementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.constructElement()
            self.state = 2407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2403
                self.match(GqlParser.COMMA)
                self.state = 2404
                self.constructElement()
                self.state = 2409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def currentElement(self):
            return self.getTypedRuleContext(GqlParser.CurrentElementContext,0)


        def newElement(self):
            return self.getTypedRuleContext(GqlParser.NewElementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_constructElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructElement" ):
                listener.enterConstructElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructElement" ):
                listener.exitConstructElement(self)




    def constructElement(self):

        localctx = GqlParser.ConstructElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_constructElement)
        try:
            self.state = 2412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 402, 407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2410
                self.currentElement()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2411
                self.newElement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def propertyList(self):
            return self.getTypedRuleContext(GqlParser.PropertyListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_currentElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentElement" ):
                listener.enterCurrentElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentElement" ):
                listener.exitCurrentElement(self)




    def currentElement(self):

        localctx = GqlParser.CurrentElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_currentElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2414
            self.bindingVariable()
            self.state = 2416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==318:
                self.state = 2415
                self.propertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTIES(self):
            return self.getToken(GqlParser.PROPERTIES, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def propertyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PropertyNameContext)
            else:
                return self.getTypedRuleContext(GqlParser.PropertyNameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_propertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyList" ):
                listener.enterPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyList" ):
                listener.exitPropertyList(self)




    def propertyList(self):

        localctx = GqlParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_propertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.match(GqlParser.PROPERTIES)
            self.state = 2419
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2420
            self.propertyName()
            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2421
                self.match(GqlParser.COMMA)
                self.state = 2422
                self.propertyName()
                self.state = 2427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2428
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def newNode(self):
            return self.getTypedRuleContext(GqlParser.NewNodeContext,0)


        def newEdge(self):
            return self.getTypedRuleContext(GqlParser.NewEdgeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_newElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewElement" ):
                listener.enterNewElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewElement" ):
                listener.exitNewElement(self)




    def newElement(self):

        localctx = GqlParser.NewElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_newElement)
        try:
            self.state = 2432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2430
                self.newNode()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2431
                self.newEdge()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def constructElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ConstructElementPatternFillerContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_newNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewNode" ):
                listener.enterNewNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewNode" ):
                listener.exitNewNode(self)




    def newNode(self):

        localctx = GqlParser.NewNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_newNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2435
            self.constructElementPatternFiller()
            self.state = 2436
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewEdgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.LEFT_PAREN)
            else:
                return self.getToken(GqlParser.LEFT_PAREN, i)

        def startVar(self):
            return self.getTypedRuleContext(GqlParser.StartVarContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.RIGHT_PAREN)
            else:
                return self.getToken(GqlParser.RIGHT_PAREN, i)

        def constructEdgePattern(self):
            return self.getTypedRuleContext(GqlParser.ConstructEdgePatternContext,0)


        def endVar(self):
            return self.getTypedRuleContext(GqlParser.EndVarContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_newEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewEdge" ):
                listener.enterNewEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewEdge" ):
                listener.exitNewEdge(self)




    def newEdge(self):

        localctx = GqlParser.NewEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_newEdge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2439
            self.startVar()
            self.state = 2440
            self.match(GqlParser.RIGHT_PAREN)
            self.state = 2441
            self.constructEdgePattern()
            self.state = 2442
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2443
            self.endVar()
            self.state = 2444
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructElementPatternFillerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isLabelExpression(self):
            return self.getTypedRuleContext(GqlParser.IsLabelExpressionContext,0)


        def constructElementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ConstructElementPropertySpecificationContext,0)


        def elementVariableDeclaration(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableDeclarationContext,0)


        def primaryKey(self):
            return self.getTypedRuleContext(GqlParser.PrimaryKeyContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_constructElementPatternFiller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructElementPatternFiller" ):
                listener.enterConstructElementPatternFiller(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructElementPatternFiller" ):
                listener.exitConstructElementPatternFiller(self)




    def constructElementPatternFiller(self):

        localctx = GqlParser.ConstructElementPatternFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_constructElementPatternFiller)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 2446
                self.elementVariableDeclaration()


            self.state = 2449
            self.isLabelExpression()
            self.state = 2451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==319:
                self.state = 2450
                self.primaryKey()


            self.state = 2453
            self.constructElementPropertySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructEdgePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructEdgePointingRight(self):
            return self.getTypedRuleContext(GqlParser.ConstructEdgePointingRightContext,0)


        def constructEdgePointingLeft(self):
            return self.getTypedRuleContext(GqlParser.ConstructEdgePointingLeftContext,0)


        def constructEdgeAnyDirection(self):
            return self.getTypedRuleContext(GqlParser.ConstructEdgeAnyDirectionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_constructEdgePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructEdgePattern" ):
                listener.enterConstructEdgePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructEdgePattern" ):
                listener.exitConstructEdgePattern(self)




    def constructEdgePattern(self):

        localctx = GqlParser.ConstructEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_constructEdgePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 2455
                self.constructEdgePointingRight()
                pass

            elif la_ == 2:
                self.state = 2456
                self.constructEdgePointingLeft()
                pass

            elif la_ == 3:
                self.state = 2457
                self.constructEdgeAnyDirection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructEdgePointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def constructElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ConstructElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_constructEdgePointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructEdgePointingRight" ):
                listener.enterConstructEdgePointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructEdgePointingRight" ):
                listener.exitConstructEdgePointingRight(self)




    def constructEdgePointingRight(self):

        localctx = GqlParser.ConstructEdgePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_constructEdgePointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2460
            self.match(GqlParser.MINUS_SIGN)
            self.state = 2461
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 2462
            self.constructElementPatternFiller()
            self.state = 2463
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 2464
            self.match(GqlParser.RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructEdgePointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def constructElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ConstructElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_constructEdgePointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructEdgePointingLeft" ):
                listener.enterConstructEdgePointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructEdgePointingLeft" ):
                listener.exitConstructEdgePointingLeft(self)




    def constructEdgePointingLeft(self):

        localctx = GqlParser.ConstructEdgePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_constructEdgePointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 2467
            self.match(GqlParser.MINUS_SIGN)
            self.state = 2468
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 2469
            self.constructElementPatternFiller()
            self.state = 2470
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 2471
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructEdgeAnyDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def constructElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ConstructElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_constructEdgeAnyDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructEdgeAnyDirection" ):
                listener.enterConstructEdgeAnyDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructEdgeAnyDirection" ):
                listener.exitConstructEdgeAnyDirection(self)




    def constructEdgeAnyDirection(self):

        localctx = GqlParser.ConstructEdgeAnyDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_constructEdgeAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.match(GqlParser.MINUS_SIGN)
            self.state = 2474
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 2475
            self.constructElementPatternFiller()
            self.state = 2476
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 2477
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(GqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(GqlParser.KEY, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(GqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_primaryKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKey" ):
                listener.enterPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKey" ):
                listener.exitPrimaryKey(self)




    def primaryKey(self):

        localctx = GqlParser.PrimaryKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_primaryKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(GqlParser.PRIMARY)
            self.state = 2480
            self.match(GqlParser.KEY)
            self.state = 2481
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2483 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2482
                self.identifier()
                self.state = 2485 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0)):
                    break

            self.state = 2487
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructElementPropertySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def propertyKeyValuePairList(self):
            return self.getTypedRuleContext(GqlParser.PropertyKeyValuePairListContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)

        def extendElement(self):
            return self.getTypedRuleContext(GqlParser.ExtendElementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_constructElementPropertySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructElementPropertySpecification" ):
                listener.enterConstructElementPropertySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructElementPropertySpecification" ):
                listener.exitConstructElementPropertySpecification(self)




    def constructElementPropertySpecification(self):

        localctx = GqlParser.ConstructElementPropertySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_constructElementPropertySpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2489
            self.match(GqlParser.LEFT_BRACE)
            self.state = 2490
            self.propertyKeyValuePairList()
            self.state = 2493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 2491
                self.match(GqlParser.COMMA)
                self.state = 2492
                self.extendElement()


            self.state = 2495
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_PERIOD(self):
            return self.getToken(GqlParser.DOUBLE_PERIOD, 0)

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_extendElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendElement" ):
                listener.enterExtendElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendElement" ):
                listener.exitExtendElement(self)




    def extendElement(self):

        localctx = GqlParser.ExtendElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_extendElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            self.match(GqlParser.DOUBLE_PERIOD)
            self.state = 2498
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_startVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartVar" ):
                listener.enterStartVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartVar" ):
                listener.exitStartVar(self)




    def startVar(self):

        localctx = GqlParser.StartVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_startVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_endVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndVar" ):
                listener.enterEndVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndVar" ):
                listener.exitEndVar(self)




    def endVar(self):

        localctx = GqlParser.EndVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_endVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2502
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(GqlParser.SELECT, 0)

        def ASTERISK(self):
            return self.getToken(GqlParser.ASTERISK, 0)

        def selectItemList(self):
            return self.getTypedRuleContext(GqlParser.SelectItemListContext,0)


        def hintItemlist(self):
            return self.getTypedRuleContext(GqlParser.HintItemlistContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(GqlParser.SetQuantifierContext,0)


        def selectStatementBody(self):
            return self.getTypedRuleContext(GqlParser.SelectStatementBodyContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(GqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(GqlParser.HavingClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(GqlParser.OrderByClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(GqlParser.OffsetClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(GqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)




    def selectStatement(self):

        localctx = GqlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.match(GqlParser.SELECT)
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 2505
                self.hintItemlist()


            self.state = 2509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 2508
                self.setQuantifier()


            self.state = 2513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 2511
                self.match(GqlParser.ASTERISK)
                pass
            elif token in
                self.state = 2512
                self.selectItemList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121 or _la==179 or _la==201:
                self.state = 2515
                self.selectStatementBody()


            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==292:
                self.state = 2518
                self.whereClause()


            self.state = 2522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 2521
                self.groupByClause()


            self.state = 2525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 2524
                self.havingClause()


            self.state = 2528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 2527
                self.orderByClause()


            self.state = 2531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198 or _la==244:
                self.state = 2530
                self.offsetClause()


            self.state = 2534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 2533
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.SelectItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_selectItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItemList" ):
                listener.enterSelectItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItemList" ):
                listener.exitSelectItemList(self)




    def selectItemList(self):

        localctx = GqlParser.SelectItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_selectItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.selectItem()
            self.state = 2541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2537
                self.match(GqlParser.COMMA)
                self.state = 2538
                self.selectItem()
                self.state = 2543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_selectItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItem" ):
                listener.enterSelectItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItem" ):
                listener.exitSelectItem(self)




    def selectItem(self):

        localctx = GqlParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self.expression(0)
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 2545
                self.match(GqlParser.AS)
                self.state = 2546
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(GqlParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = GqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2549
            self.match(GqlParser.HAVING)
            self.state = 2550
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(GqlParser.FROM, 0)

        def selectGraphMatchList(self):
            return self.getTypedRuleContext(GqlParser.SelectGraphMatchListContext,0)


        def selectQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.SelectQuerySpecificationContext,0)


        def matchStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.MatchStatementContext)
            else:
                return self.getTypedRuleContext(GqlParser.MatchStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_selectStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatementBody" ):
                listener.enterSelectStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatementBody" ):
                listener.exitSelectStatementBody(self)




    def selectStatementBody(self):

        localctx = GqlParser.SelectStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_selectStatementBody)
        self._la = 0 # Token type
        try:
            self.state = 2564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2552
                self.match(GqlParser.FROM)
                self.state = 2553
                self.selectGraphMatchList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2554
                self.match(GqlParser.FROM)
                self.state = 2555
                self.selectQuerySpecification()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2556
                self.matchStatement()
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2557
                    self.match(GqlParser.COMMA)
                    self.state = 2558
                    self.matchStatement()
                    self.state = 2563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectGraphMatchListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectGraphMatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SelectGraphMatchContext)
            else:
                return self.getTypedRuleContext(GqlParser.SelectGraphMatchContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_selectGraphMatchList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectGraphMatchList" ):
                listener.enterSelectGraphMatchList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectGraphMatchList" ):
                listener.exitSelectGraphMatchList(self)




    def selectGraphMatchList(self):

        localctx = GqlParser.SelectGraphMatchListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_selectGraphMatchList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self.selectGraphMatch()
            self.state = 2571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2567
                self.match(GqlParser.COMMA)
                self.state = 2568
                self.selectGraphMatch()
                self.state = 2573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectGraphMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def matchStatement(self):
            return self.getTypedRuleContext(GqlParser.MatchStatementContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_selectGraphMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectGraphMatch" ):
                listener.enterSelectGraphMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectGraphMatch" ):
                listener.exitSelectGraphMatch(self)




    def selectGraphMatch(self):

        localctx = GqlParser.SelectGraphMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_selectGraphMatch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.graphExpression()
            self.state = 2575
            self.matchStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectQuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_selectQuerySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectQuerySpecification" ):
                listener.enterSelectQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectQuerySpecification" ):
                listener.exitSelectQuerySpecification(self)




    def selectQuerySpecification(self):

        localctx = GqlParser.SelectQuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_selectQuerySpecification)
        try:
            self.state = 2581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2577
                self.nestedQuerySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2578
                self.graphExpression()
                self.state = 2579
                self.nestedQuerySpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(GqlParser.CALL, 0)

        def procedureCall(self):
            return self.getTypedRuleContext(GqlParser.ProcedureCallContext,0)


        def OPTIONAL(self):
            return self.getToken(GqlParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_callProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallProcedureStatement" ):
                listener.enterCallProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallProcedureStatement" ):
                listener.exitCallProcedureStatement(self)




    def callProcedureStatement(self):

        localctx = GqlParser.CallProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_callProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==201:
                self.state = 2583
                self.match(GqlParser.OPTIONAL)


            self.state = 2586
            self.match(GqlParser.CALL)
            self.state = 2587
            self.procedureCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineProcedureCall(self):
            return self.getTypedRuleContext(GqlParser.InlineProcedureCallContext,0)


        def namedProcedureCall(self):
            return self.getTypedRuleContext(GqlParser.NamedProcedureCallContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_procedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureCall" ):
                listener.enterProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureCall" ):
                listener.exitProcedureCall(self)




    def procedureCall(self):

        localctx = GqlParser.ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_procedureCall)
        try:
            self.state = 2591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2589
                self.inlineProcedureCall()
                pass
            elif token in [6, 15, 16, 24, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 402, 407]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2590
                self.namedProcedureCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedProcedureSpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedProcedureSpecificationContext,0)


        def variableScopeClause(self):
            return self.getTypedRuleContext(GqlParser.VariableScopeClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_inlineProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineProcedureCall" ):
                listener.enterInlineProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineProcedureCall" ):
                listener.exitInlineProcedureCall(self)




    def inlineProcedureCall(self):

        localctx = GqlParser.InlineProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_inlineProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 2593
                self.variableScopeClause()


            self.state = 2596
            self.nestedProcedureSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableScopeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def bindingVariableReferenceList(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_variableScopeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableScopeClause" ):
                listener.enterVariableScopeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableScopeClause" ):
                listener.exitVariableScopeClause(self)




    def variableScopeClause(self):

        localctx = GqlParser.VariableScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_variableScopeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 2599
                self.bindingVariableReferenceList()


            self.state = 2602
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingVariableReferenceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.BindingVariableReferenceContext)
            else:
                return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_bindingVariableReferenceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingVariableReferenceList" ):
                listener.enterBindingVariableReferenceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingVariableReferenceList" ):
                listener.exitBindingVariableReferenceList(self)




    def bindingVariableReferenceList(self):

        localctx = GqlParser.BindingVariableReferenceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_bindingVariableReferenceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2604
            self.bindingVariableReference()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2605
                self.match(GqlParser.COMMA)
                self.state = 2606
                self.bindingVariableReference()
                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureReference(self):
            return self.getTypedRuleContext(GqlParser.ProcedureReferenceContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def procedureArgumentList(self):
            return self.getTypedRuleContext(GqlParser.ProcedureArgumentListContext,0)


        def yieldClause(self):
            return self.getTypedRuleContext(GqlParser.YieldClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_namedProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedProcedureCall" ):
                listener.enterNamedProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedProcedureCall" ):
                listener.exitNamedProcedureCall(self)




    def namedProcedureCall(self):

        localctx = GqlParser.NamedProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_namedProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.procedureReference()
            self.state = 2613
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8824627904) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 36671) != 0):
                self.state = 2614
                self.procedureArgumentList()


            self.state = 2617
            self.match(GqlParser.RIGHT_PAREN)
            self.state = 2619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 2618
                self.yieldClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ProcedureArgumentContext)
            else:
                return self.getTypedRuleContext(GqlParser.ProcedureArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_procedureArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureArgumentList" ):
                listener.enterProcedureArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureArgumentList" ):
                listener.exitProcedureArgumentList(self)




    def procedureArgumentList(self):

        localctx = GqlParser.ProcedureArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_procedureArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            self.procedureArgument()
            self.state = 2626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2622
                self.match(GqlParser.COMMA)
                self.state = 2623
                self.procedureArgument()
                self.state = 2628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_procedureArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureArgument" ):
                listener.enterProcedureArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureArgument" ):
                listener.exitProcedureArgument(self)




    def procedureArgument(self):

        localctx = GqlParser.ProcedureArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_procedureArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseGraphClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)


        def USE(self):
            return self.getToken(GqlParser.USE, 0)

        def FROM(self):
            return self.getToken(GqlParser.FROM, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_useGraphClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseGraphClause" ):
                listener.enterUseGraphClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseGraphClause" ):
                listener.exitUseGraphClause(self)




    def useGraphClause(self):

        localctx = GqlParser.UseGraphClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_useGraphClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            _la = self._input.LA(1)
            if not(_la==121 or _la==284):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2632
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtSchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(GqlParser.AT, 0)

        def schemaReference(self):
            return self.getTypedRuleContext(GqlParser.SchemaReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_atSchemaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtSchemaClause" ):
                listener.enterAtSchemaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtSchemaClause" ):
                listener.exitAtSchemaClause(self)




    def atSchemaClause(self):

        localctx = GqlParser.AtSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_atSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.match(GqlParser.AT)
            self.state = 2635
            self.schemaReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingVariableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingVariableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingVariableReference" ):
                listener.enterBindingVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingVariableReference" ):
                listener.exitBindingVariableReference(self)




    def bindingVariableReference(self):

        localctx = GqlParser.BindingVariableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_bindingVariableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementVariableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementVariableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementVariableReference" ):
                listener.enterElementVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementVariableReference" ):
                listener.exitElementVariableReference(self)




    def elementVariableReference(self):

        localctx = GqlParser.ElementVariableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_elementVariableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.bindingVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathVariableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathVariableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathVariableReference" ):
                listener.enterPathVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathVariableReference" ):
                listener.exitPathVariableReference(self)




    def pathVariableReference(self):

        localctx = GqlParser.PathVariableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_pathVariableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.bindingVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(GqlParser.ParameterNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = GqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2643
            self.parameterName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternBindingTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphPattern(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternContext,0)


        def graphPatternYieldClause(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternYieldClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphPatternBindingTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPatternBindingTable" ):
                listener.enterGraphPatternBindingTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPatternBindingTable" ):
                listener.exitGraphPatternBindingTable(self)




    def graphPatternBindingTable(self):

        localctx = GqlParser.GraphPatternBindingTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_graphPatternBindingTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.graphPattern()
            self.state = 2647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 2646
                self.graphPatternYieldClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternYieldClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(GqlParser.YIELD, 0)

        def graphPatternYieldItemList(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternYieldItemListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphPatternYieldClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPatternYieldClause" ):
                listener.enterGraphPatternYieldClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPatternYieldClause" ):
                listener.exitGraphPatternYieldClause(self)




    def graphPatternYieldClause(self):

        localctx = GqlParser.GraphPatternYieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_graphPatternYieldClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            self.match(GqlParser.YIELD)
            self.state = 2650
            self.graphPatternYieldItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternYieldItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphPatternYieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.GraphPatternYieldItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.GraphPatternYieldItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def NO(self):
            return self.getToken(GqlParser.NO, 0)

        def BINDINGS(self):
            return self.getToken(GqlParser.BINDINGS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_graphPatternYieldItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPatternYieldItemList" ):
                listener.enterGraphPatternYieldItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPatternYieldItemList" ):
                listener.exitGraphPatternYieldItemList(self)




    def graphPatternYieldItemList(self):

        localctx = GqlParser.GraphPatternYieldItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_graphPatternYieldItemList)
        try:
            self.state = 2662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2652
                self.graphPatternYieldItem()
                self.state = 2657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2653
                        self.match(GqlParser.COMMA)
                        self.state = 2654
                        self.graphPatternYieldItem() 
                    self.state = 2659
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2660
                self.match(GqlParser.NO)
                self.state = 2661
                self.match(GqlParser.BINDINGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternYieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableReference(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,0)


        def pathVariableReference(self):
            return self.getTypedRuleContext(GqlParser.PathVariableReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphPatternYieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPatternYieldItem" ):
                listener.enterGraphPatternYieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPatternYieldItem" ):
                listener.exitGraphPatternYieldItem(self)




    def graphPatternYieldItem(self):

        localctx = GqlParser.GraphPatternYieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_graphPatternYieldItem)
        try:
            self.state = 2666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2664
                self.elementVariableReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2665
                self.pathVariableReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternList(self):
            return self.getTypedRuleContext(GqlParser.PathPatternListContext,0)


        def matchMode(self):
            return self.getTypedRuleContext(GqlParser.MatchModeContext,0)


        def keepClause(self):
            return self.getTypedRuleContext(GqlParser.KeepClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphPattern" ):
                listener.enterGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphPattern" ):
                listener.exitGraphPattern(self)




    def graphPattern(self):

        localctx = GqlParser.GraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_graphPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 2668
                self.matchMode()


            self.state = 2671
            self.pathPatternList()
            self.state = 2673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 2672
                self.keepClause()


            self.state = 2676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2675
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def repeatableElementsMatchMode(self):
            return self.getTypedRuleContext(GqlParser.RepeatableElementsMatchModeContext,0)


        def differentEdgesMatchMode(self):
            return self.getTypedRuleContext(GqlParser.DifferentEdgesMatchModeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_matchMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchMode" ):
                listener.enterMatchMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchMode" ):
                listener.exitMatchMode(self)




    def matchMode(self):

        localctx = GqlParser.MatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_matchMode)
        try:
            self.state = 2680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2678
                self.repeatableElementsMatchMode()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2679
                self.differentEdgesMatchMode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatableElementsMatchModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(GqlParser.REPEATABLE, 0)

        def elementBindingsOrElements(self):
            return self.getTypedRuleContext(GqlParser.ElementBindingsOrElementsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_repeatableElementsMatchMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableElementsMatchMode" ):
                listener.enterRepeatableElementsMatchMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableElementsMatchMode" ):
                listener.exitRepeatableElementsMatchMode(self)




    def repeatableElementsMatchMode(self):

        localctx = GqlParser.RepeatableElementsMatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_repeatableElementsMatchMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2682
            self.match(GqlParser.REPEATABLE)
            self.state = 2683
            self.elementBindingsOrElements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DifferentEdgesMatchModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIFFERENT(self):
            return self.getToken(GqlParser.DIFFERENT, 0)

        def edgeBindingsOrEdges(self):
            return self.getTypedRuleContext(GqlParser.EdgeBindingsOrEdgesContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_differentEdgesMatchMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDifferentEdgesMatchMode" ):
                listener.enterDifferentEdgesMatchMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDifferentEdgesMatchMode" ):
                listener.exitDifferentEdgesMatchMode(self)




    def differentEdgesMatchMode(self):

        localctx = GqlParser.DifferentEdgesMatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_differentEdgesMatchMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2685
            self.match(GqlParser.DIFFERENT)
            self.state = 2686
            self.edgeBindingsOrEdges()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementBindingsOrElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(GqlParser.ELEMENT, 0)

        def BINDINGS(self):
            return self.getToken(GqlParser.BINDINGS, 0)

        def ELEMENTS(self):
            return self.getToken(GqlParser.ELEMENTS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_elementBindingsOrElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementBindingsOrElements" ):
                listener.enterElementBindingsOrElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementBindingsOrElements" ):
                listener.exitElementBindingsOrElements(self)




    def elementBindingsOrElements(self):

        localctx = GqlParser.ElementBindingsOrElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_elementBindingsOrElements)
        try:
            self.state = 2693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2688
                self.match(GqlParser.ELEMENT)
                self.state = 2690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 2689
                    self.match(GqlParser.BINDINGS)


                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2692
                self.match(GqlParser.ELEMENTS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeBindingsOrEdgesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EDGE_SYNONYM(self):
            return self.getToken(GqlParser.EDGE_SYNONYM, 0)

        def BINDINGS(self):
            return self.getToken(GqlParser.BINDINGS, 0)

        def EDGES_SYNONYM(self):
            return self.getToken(GqlParser.EDGES_SYNONYM, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_edgeBindingsOrEdges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeBindingsOrEdges" ):
                listener.enterEdgeBindingsOrEdges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeBindingsOrEdges" ):
                listener.exitEdgeBindingsOrEdges(self)




    def edgeBindingsOrEdges(self):

        localctx = GqlParser.EdgeBindingsOrEdgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_edgeBindingsOrEdges)
        try:
            self.state = 2700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [324]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2695
                self.match(GqlParser.EDGE_SYNONYM)
                self.state = 2697
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 2696
                    self.match(GqlParser.BINDINGS)


                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2699
                self.match(GqlParser.EDGES_SYNONYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PathPatternContext)
            else:
                return self.getTypedRuleContext(GqlParser.PathPatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_pathPatternList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPatternList" ):
                listener.enterPathPatternList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPatternList" ):
                listener.exitPathPatternList(self)




    def pathPatternList(self):

        localctx = GqlParser.PathPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_pathPatternList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2702
            self.pathPattern()
            self.state = 2707
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2703
                    self.match(GqlParser.COMMA)
                    self.state = 2704
                    self.pathPattern() 
                self.state = 2709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternExpression(self):
            return self.getTypedRuleContext(GqlParser.PathPatternExpressionContext,0)


        def pathVariableDeclaration(self):
            return self.getTypedRuleContext(GqlParser.PathVariableDeclarationContext,0)


        def pathPatternPrefix(self):
            return self.getTypedRuleContext(GqlParser.PathPatternPrefixContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPattern" ):
                listener.enterPathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPattern" ):
                listener.exitPathPattern(self)




    def pathPattern(self):

        localctx = GqlParser.PathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_pathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 2710
                self.pathVariableDeclaration()


            self.state = 2714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 37580963840) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 4503599694479369) != 0):
                self.state = 2713
                self.pathPatternPrefix()


            self.state = 2716
            self.pathPatternExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathVariable(self):
            return self.getTypedRuleContext(GqlParser.PathVariableContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_pathVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathVariableDeclaration" ):
                listener.enterPathVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathVariableDeclaration" ):
                listener.exitPathVariableDeclaration(self)




    def pathVariableDeclaration(self):

        localctx = GqlParser.PathVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_pathVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            self.pathVariable()
            self.state = 2719
            self.match(GqlParser.EQUALS_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeepClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(GqlParser.KEEP, 0)

        def pathPatternPrefix(self):
            return self.getTypedRuleContext(GqlParser.PathPatternPrefixContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_keepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeepClause" ):
                listener.enterKeepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeepClause" ):
                listener.exitKeepClause(self)




    def keepClause(self):

        localctx = GqlParser.KeepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_keepClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2721
            self.match(GqlParser.KEEP)
            self.state = 2722
            self.pathPatternPrefix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathModePrefix(self):
            return self.getTypedRuleContext(GqlParser.PathModePrefixContext,0)


        def pathSearchPrefix(self):
            return self.getTypedRuleContext(GqlParser.PathSearchPrefixContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathPatternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPatternPrefix" ):
                listener.enterPathPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPatternPrefix" ):
                listener.exitPathPatternPrefix(self)




    def pathPatternPrefix(self):

        localctx = GqlParser.PathPatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_pathPatternPrefix)
        try:
            self.state = 2726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 241, 264, 290]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2724
                self.pathModePrefix()
                pass
            elif token in [31, 35, 238]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2725
                self.pathSearchPrefix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathModePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathModePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathModePrefix" ):
                listener.enterPathModePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathModePrefix" ):
                listener.exitPathModePrefix(self)




    def pathModePrefix(self):

        localctx = GqlParser.PathModePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_pathModePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            self.pathMode()
            self.state = 2730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2729
                self.pathOrPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALK(self):
            return self.getToken(GqlParser.WALK, 0)

        def TRAIL(self):
            return self.getToken(GqlParser.TRAIL, 0)

        def SIMPLE(self):
            return self.getToken(GqlParser.SIMPLE, 0)

        def ACYCLIC(self):
            return self.getToken(GqlParser.ACYCLIC, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_pathMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathMode" ):
                listener.enterPathMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathMode" ):
                listener.exitPathMode(self)




    def pathMode(self):

        localctx = GqlParser.PathModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_pathMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            _la = self._input.LA(1)
            if not(_la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSearchPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allPathSearch(self):
            return self.getTypedRuleContext(GqlParser.AllPathSearchContext,0)


        def anyPathSearch(self):
            return self.getTypedRuleContext(GqlParser.AnyPathSearchContext,0)


        def shortestPathSearch(self):
            return self.getTypedRuleContext(GqlParser.ShortestPathSearchContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathSearchPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSearchPrefix" ):
                listener.enterPathSearchPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSearchPrefix" ):
                listener.exitPathSearchPrefix(self)




    def pathSearchPrefix(self):

        localctx = GqlParser.PathSearchPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_pathSearchPrefix)
        try:
            self.state = 2737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2734
                self.allPathSearch()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2735
                self.anyPathSearch()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2736
                self.shortestPathSearch()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllPathSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(GqlParser.ALL, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_allPathSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllPathSearch" ):
                listener.enterAllPathSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllPathSearch" ):
                listener.exitAllPathSearch(self)




    def allPathSearch(self):

        localctx = GqlParser.AllPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_allPathSearch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.match(GqlParser.ALL)
            self.state = 2741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 2740
                self.pathMode()


            self.state = 2744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2743
                self.pathOrPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathOrPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(GqlParser.PATH, 0)

        def PATHS(self):
            return self.getToken(GqlParser.PATHS, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_pathOrPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathOrPaths" ):
                listener.enterPathOrPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathOrPaths" ):
                listener.exitPathOrPaths(self)




    def pathOrPaths(self):

        localctx = GqlParser.PathOrPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_pathOrPaths)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2746
            _la = self._input.LA(1)
            if not(_la==208 or _la==210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyPathSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def numberOfPaths(self):
            return self.getTypedRuleContext(GqlParser.NumberOfPathsContext,0)


        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_anyPathSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyPathSearch" ):
                listener.enterAnyPathSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyPathSearch" ):
                listener.exitAnyPathSearch(self)




    def anyPathSearch(self):

        localctx = GqlParser.AnyPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_anyPathSearch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2748
            self.match(GqlParser.ANY)
            self.state = 2750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==15 or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 15) != 0):
                self.state = 2749
                self.numberOfPaths()


            self.state = 2753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 2752
                self.pathMode()


            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2755
                self.pathOrPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberOfPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_numberOfPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberOfPaths" ):
                listener.enterNumberOfPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberOfPaths" ):
                listener.exitNumberOfPaths(self)




    def numberOfPaths(self):

        localctx = GqlParser.NumberOfPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_numberOfPaths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            self.unsignedIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allShortestPathSearch(self):
            return self.getTypedRuleContext(GqlParser.AllShortestPathSearchContext,0)


        def anyShortestPathSearch(self):
            return self.getTypedRuleContext(GqlParser.AnyShortestPathSearchContext,0)


        def countedShortestPathSearch(self):
            return self.getTypedRuleContext(GqlParser.CountedShortestPathSearchContext,0)


        def countedShortestGroupSearch(self):
            return self.getTypedRuleContext(GqlParser.CountedShortestGroupSearchContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_shortestPathSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathSearch" ):
                listener.enterShortestPathSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathSearch" ):
                listener.exitShortestPathSearch(self)




    def shortestPathSearch(self):

        localctx = GqlParser.ShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_shortestPathSearch)
        try:
            self.state = 2764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2760
                self.allShortestPathSearch()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2761
                self.anyShortestPathSearch()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2762
                self.countedShortestPathSearch()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2763
                self.countedShortestGroupSearch()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllShortestPathSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(GqlParser.ALL, 0)

        def SHORTEST(self):
            return self.getToken(GqlParser.SHORTEST, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_allShortestPathSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllShortestPathSearch" ):
                listener.enterAllShortestPathSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllShortestPathSearch" ):
                listener.exitAllShortestPathSearch(self)




    def allShortestPathSearch(self):

        localctx = GqlParser.AllShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_allShortestPathSearch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2766
            self.match(GqlParser.ALL)
            self.state = 2767
            self.match(GqlParser.SHORTEST)
            self.state = 2769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 2768
                self.pathMode()


            self.state = 2772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2771
                self.pathOrPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyShortestPathSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def SHORTEST(self):
            return self.getToken(GqlParser.SHORTEST, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_anyShortestPathSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyShortestPathSearch" ):
                listener.enterAnyShortestPathSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyShortestPathSearch" ):
                listener.exitAnyShortestPathSearch(self)




    def anyShortestPathSearch(self):

        localctx = GqlParser.AnyShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_anyShortestPathSearch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2774
            self.match(GqlParser.ANY)
            self.state = 2775
            self.match(GqlParser.SHORTEST)
            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 2776
                self.pathMode()


            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2779
                self.pathOrPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountedShortestPathSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTEST(self):
            return self.getToken(GqlParser.SHORTEST, 0)

        def numberOfPaths(self):
            return self.getTypedRuleContext(GqlParser.NumberOfPathsContext,0)


        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_countedShortestPathSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountedShortestPathSearch" ):
                listener.enterCountedShortestPathSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountedShortestPathSearch" ):
                listener.exitCountedShortestPathSearch(self)




    def countedShortestPathSearch(self):

        localctx = GqlParser.CountedShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_countedShortestPathSearch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(GqlParser.SHORTEST)
            self.state = 2783
            self.numberOfPaths()
            self.state = 2785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 2784
                self.pathMode()


            self.state = 2788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2787
                self.pathOrPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountedShortestGroupSearchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTEST(self):
            return self.getToken(GqlParser.SHORTEST, 0)

        def numberOfGroups(self):
            return self.getTypedRuleContext(GqlParser.NumberOfGroupsContext,0)


        def GROUP(self):
            return self.getToken(GqlParser.GROUP, 0)

        def GROUPS(self):
            return self.getToken(GqlParser.GROUPS, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GqlParser.PathModeContext,0)


        def pathOrPaths(self):
            return self.getTypedRuleContext(GqlParser.PathOrPathsContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_countedShortestGroupSearch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountedShortestGroupSearch" ):
                listener.enterCountedShortestGroupSearch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountedShortestGroupSearch" ):
                listener.exitCountedShortestGroupSearch(self)




    def countedShortestGroupSearch(self):

        localctx = GqlParser.CountedShortestGroupSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_countedShortestGroupSearch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.match(GqlParser.SHORTEST)
            self.state = 2791
            self.numberOfGroups()
            self.state = 2793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 2792
                self.pathMode()


            self.state = 2796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==210:
                self.state = 2795
                self.pathOrPaths()


            self.state = 2798
            _la = self._input.LA(1)
            if not(_la==123 or _la==124):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberOfGroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_numberOfGroups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberOfGroups" ):
                listener.enterNumberOfGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberOfGroups" ):
                listener.exitNumberOfGroups(self)




    def numberOfGroups(self):

        localctx = GqlParser.NumberOfGroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_numberOfGroups)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2800
            self.unsignedIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathTerm(self):
            return self.getTypedRuleContext(GqlParser.PathTermContext,0)


        def pathMultisetAlternation(self):
            return self.getTypedRuleContext(GqlParser.PathMultisetAlternationContext,0)


        def pathPatternUnion(self):
            return self.getTypedRuleContext(GqlParser.PathPatternUnionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathPatternExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPatternExpression" ):
                listener.enterPathPatternExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPatternExpression" ):
                listener.exitPathPatternExpression(self)




    def pathPatternExpression(self):

        localctx = GqlParser.PathPatternExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_pathPatternExpression)
        try:
            self.state = 2805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2802
                self.pathTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2803
                self.pathMultisetAlternation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2804
                self.pathPatternUnion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathMultisetAlternationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PathTermContext)
            else:
                return self.getTypedRuleContext(GqlParser.PathTermContext,i)


        def MULTISET_ALTERNATION_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MULTISET_ALTERNATION_OPERATOR)
            else:
                return self.getToken(GqlParser.MULTISET_ALTERNATION_OPERATOR, i)

        def getRuleIndex(self):
            return GqlParser.RULE_pathMultisetAlternation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathMultisetAlternation" ):
                listener.enterPathMultisetAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathMultisetAlternation" ):
                listener.exitPathMultisetAlternation(self)




    def pathMultisetAlternation(self):

        localctx = GqlParser.PathMultisetAlternationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_pathMultisetAlternation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2807
            self.pathTerm()
            self.state = 2808
            self.match(GqlParser.MULTISET_ALTERNATION_OPERATOR)
            self.state = 2809
            self.pathTerm()
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==358:
                self.state = 2810
                self.match(GqlParser.MULTISET_ALTERNATION_OPERATOR)
                self.state = 2811
                self.pathTerm()
                self.state = 2816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PathTermContext)
            else:
                return self.getTypedRuleContext(GqlParser.PathTermContext,i)


        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.VERTICAL_BAR)
            else:
                return self.getToken(GqlParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return GqlParser.RULE_pathPatternUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPatternUnion" ):
                listener.enterPathPatternUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPatternUnion" ):
                listener.exitPathPatternUnion(self)




    def pathPatternUnion(self):

        localctx = GqlParser.PathPatternUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_pathPatternUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2817
            self.pathTerm()
            self.state = 2818
            self.match(GqlParser.VERTICAL_BAR)
            self.state = 2819
            self.pathTerm()
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 2820
                self.match(GqlParser.VERTICAL_BAR)
                self.state = 2821
                self.pathTerm()
                self.state = 2826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathFactor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PathFactorContext)
            else:
                return self.getTypedRuleContext(GqlParser.PathFactorContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_pathTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathTerm" ):
                listener.enterPathTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathTerm" ):
                listener.exitPathTerm(self)




    def pathTerm(self):

        localctx = GqlParser.PathTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_pathTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2828 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2827
                self.pathFactor()
                self.state = 2830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 33585152) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & 12459) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathFactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPrimary(self):
            return self.getTypedRuleContext(GqlParser.PathPrimaryContext,0)


        def quantifiedPathPrimary(self):
            return self.getTypedRuleContext(GqlParser.QuantifiedPathPrimaryContext,0)


        def questionedPathPrimary(self):
            return self.getTypedRuleContext(GqlParser.QuestionedPathPrimaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathFactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathFactor" ):
                listener.enterPathFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathFactor" ):
                listener.exitPathFactor(self)




    def pathFactor(self):

        localctx = GqlParser.PathFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_pathFactor)
        try:
            self.state = 2835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2832
                self.pathPrimary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2833
                self.quantifiedPathPrimary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2834
                self.questionedPathPrimary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifiedPathPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPrimary(self):
            return self.getTypedRuleContext(GqlParser.PathPrimaryContext,0)


        def graphPatternQuantifier(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternQuantifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_quantifiedPathPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedPathPrimary" ):
                listener.enterQuantifiedPathPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedPathPrimary" ):
                listener.exitQuantifiedPathPrimary(self)




    def quantifiedPathPrimary(self):

        localctx = GqlParser.QuantifiedPathPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_quantifiedPathPrimary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self.pathPrimary()
            self.state = 2838
            self.graphPatternQuantifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuestionedPathPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPrimary(self):
            return self.getTypedRuleContext(GqlParser.PathPrimaryContext,0)


        def QUESTION_MARK(self):
            return self.getToken(GqlParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_questionedPathPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuestionedPathPrimary" ):
                listener.enterQuestionedPathPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuestionedPathPrimary" ):
                listener.exitQuestionedPathPrimary(self)




    def questionedPathPrimary(self):

        localctx = GqlParser.QuestionedPathPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_questionedPathPrimary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2840
            self.pathPrimary()
            self.state = 2841
            self.match(GqlParser.QUESTION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementPattern(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternContext,0)


        def parenthesizedPathPatternExpression(self):
            return self.getTypedRuleContext(GqlParser.ParenthesizedPathPatternExpressionContext,0)


        def simplifiedPathPatternExpression(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedPathPatternExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPrimary" ):
                listener.enterPathPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPrimary" ):
                listener.exitPathPrimary(self)




    def pathPrimary(self):

        localctx = GqlParser.PathPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_pathPrimary)
        try:
            self.state = 2846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2843
                self.elementPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2844
                self.parenthesizedPathPatternExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2845
                self.simplifiedPathPatternExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodePattern(self):
            return self.getTypedRuleContext(GqlParser.NodePatternContext,0)


        def edgePattern(self):
            return self.getTypedRuleContext(GqlParser.EdgePatternContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementPattern" ):
                listener.enterElementPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementPattern" ):
                listener.exitElementPattern(self)




    def elementPattern(self):

        localctx = GqlParser.ElementPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_elementPattern)
        try:
            self.state = 2850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2848
                self.nodePattern()
                pass
            elif token in [13, 14, 25, 364, 371, 376]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2849
                self.edgePattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodePattern" ):
                listener.enterNodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodePattern" ):
                listener.exitNodePattern(self)




    def nodePattern(self):

        localctx = GqlParser.NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_nodePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2852
            self.match(GqlParser.LEFT_PAREN)
            self.state = 2853
            self.elementPatternFiller()
            self.state = 2854
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementPatternFillerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableDeclaration(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableDeclarationContext,0)


        def isLabelExpression(self):
            return self.getTypedRuleContext(GqlParser.IsLabelExpressionContext,0)


        def elementPatternPredicate(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternPredicateContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementPatternFiller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementPatternFiller" ):
                listener.enterElementPatternFiller(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementPatternFiller" ):
                listener.exitElementPatternFiller(self)




    def elementPatternFiller(self):

        localctx = GqlParser.ElementPatternFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_elementPatternFiller)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 2856
                self.elementVariableDeclaration()


            self.state = 2860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==154:
                self.state = 2859
                self.isLabelExpression()


            self.state = 2863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==213 or _la==214 or _la==292:
                self.state = 2862
                self.elementPatternPredicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariable(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableContext,0)


        def TEMP(self):
            return self.getToken(GqlParser.TEMP, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_elementVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementVariableDeclaration" ):
                listener.enterElementVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementVariableDeclaration" ):
                listener.exitElementVariableDeclaration(self)




    def elementVariableDeclaration(self):

        localctx = GqlParser.ElementVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_elementVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2865
                self.match(GqlParser.TEMP)


            self.state = 2868
            self.elementVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsLabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOrColon(self):
            return self.getTypedRuleContext(GqlParser.IsOrColonContext,0)


        def labelExpression(self):
            return self.getTypedRuleContext(GqlParser.LabelExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_isLabelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsLabelExpression" ):
                listener.enterIsLabelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsLabelExpression" ):
                listener.exitIsLabelExpression(self)




    def isLabelExpression(self):

        localctx = GqlParser.IsLabelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_isLabelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2870
            self.isOrColon()
            self.state = 2871
            self.labelExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOrColonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_isOrColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOrColon" ):
                listener.enterIsOrColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOrColon" ):
                listener.exitIsOrColon(self)




    def isOrColon(self):

        localctx = GqlParser.IsOrColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_isOrColon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            _la = self._input.LA(1)
            if not(_la==4 or _la==154):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementPatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perNodeLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,0)


        def perNodeLimitWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitWherePredicateContext,0)


        def perNodeLimitPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitPropertyPredicateContext,0)


        def perShardLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,0)


        def perShardLimitWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitWherePredicateContext,0)


        def perShardLimitPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitPropertyPredicateContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementPatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementPatternPredicate" ):
                listener.enterElementPatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementPatternPredicate" ):
                listener.exitElementPatternPredicate(self)




    def elementPatternPredicate(self):

        localctx = GqlParser.ElementPatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_elementPatternPredicate)
        try:
            self.state = 2883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2875
                self.whereClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2876
                self.elementPropertySpecification()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2877
                self.perNodeLimitClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2878
                self.perNodeLimitWherePredicate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2879
                self.perNodeLimitPropertyPredicate()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2880
                self.perShardLimitClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2881
                self.perShardLimitWherePredicate()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2882
                self.perShardLimitPropertyPredicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementPropertySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def propertyKeyValuePairList(self):
            return self.getTypedRuleContext(GqlParser.PropertyKeyValuePairListContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_elementPropertySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementPropertySpecification" ):
                listener.enterElementPropertySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementPropertySpecification" ):
                listener.exitElementPropertySpecification(self)




    def elementPropertySpecification(self):

        localctx = GqlParser.ElementPropertySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_elementPropertySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2885
            self.match(GqlParser.LEFT_BRACE)
            self.state = 2886
            self.propertyKeyValuePairList()
            self.state = 2887
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyKeyValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyKeyValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PropertyKeyValuePairContext)
            else:
                return self.getTypedRuleContext(GqlParser.PropertyKeyValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_propertyKeyValuePairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyKeyValuePairList" ):
                listener.enterPropertyKeyValuePairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyKeyValuePairList" ):
                listener.exitPropertyKeyValuePairList(self)




    def propertyKeyValuePairList(self):

        localctx = GqlParser.PropertyKeyValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_propertyKeyValuePairList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2889
            self.propertyKeyValuePair()
            self.state = 2894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2890
                    self.match(GqlParser.COMMA)
                    self.state = 2891
                    self.propertyKeyValuePair() 
                self.state = 2896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyKeyValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)


        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_propertyKeyValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyKeyValuePair" ):
                listener.enterPropertyKeyValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyKeyValuePair" ):
                listener.exitPropertyKeyValuePair(self)




    def propertyKeyValuePair(self):

        localctx = GqlParser.PropertyKeyValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_propertyKeyValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2897
            self.propertyName()
            self.state = 2898
            self.match(GqlParser.COLON)
            self.state = 2899
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PER_NODE_LIMIT(self):
            return self.getToken(GqlParser.PER_NODE_LIMIT, 0)

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitClause" ):
                listener.enterPerNodeLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitClause" ):
                listener.exitPerNodeLimitClause(self)




    def perNodeLimitClause(self):

        localctx = GqlParser.PerNodeLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_perNodeLimitClause)
        try:
            self.state = 2908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2901
                self.match(GqlParser.PER_NODE_LIMIT)
                self.state = 2902
                self.unsignedIntegerSpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2903
                self.match(GqlParser.PER_NODE_LIMIT)
                self.state = 2904
                self.match(GqlParser.LEFT_PAREN)
                self.state = 2905
                self.unsignedIntegerSpecification()
                self.state = 2906
                self.match(GqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def perNodeLimitLeftWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitLeftWherePredicateContext,0)


        def perNodeLimitRightWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitRightWherePredicateContext,0)


        def perNodeLimitBothWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitBothWherePredicateContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitWherePredicate" ):
                listener.enterPerNodeLimitWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitWherePredicate" ):
                listener.exitPerNodeLimitWherePredicate(self)




    def perNodeLimitWherePredicate(self):

        localctx = GqlParser.PerNodeLimitWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_perNodeLimitWherePredicate)
        try:
            self.state = 2913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2910
                self.perNodeLimitLeftWherePredicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2911
                self.perNodeLimitRightWherePredicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2912
                self.perNodeLimitBothWherePredicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitLeftWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerNodeLimitClauseContext

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def perNodeLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitLeftWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitLeftWherePredicate" ):
                listener.enterPerNodeLimitLeftWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitLeftWherePredicate" ):
                listener.exitPerNodeLimitLeftWherePredicate(self)




    def perNodeLimitLeftWherePredicate(self):

        localctx = GqlParser.PerNodeLimitLeftWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_perNodeLimitLeftWherePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2915
            localctx.lhs = self.perNodeLimitClause()
            self.state = 2916
            self.whereClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitRightWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rhs = None # PerNodeLimitClauseContext

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def perNodeLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitRightWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitRightWherePredicate" ):
                listener.enterPerNodeLimitRightWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitRightWherePredicate" ):
                listener.exitPerNodeLimitRightWherePredicate(self)




    def perNodeLimitRightWherePredicate(self):

        localctx = GqlParser.PerNodeLimitRightWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_perNodeLimitRightWherePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2918
            self.whereClause()
            self.state = 2919
            localctx.rhs = self.perNodeLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitBothWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerNodeLimitClauseContext
            self.rhs = None # PerNodeLimitClauseContext

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def perNodeLimitClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PerNodeLimitClauseContext)
            else:
                return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitBothWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitBothWherePredicate" ):
                listener.enterPerNodeLimitBothWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitBothWherePredicate" ):
                listener.exitPerNodeLimitBothWherePredicate(self)




    def perNodeLimitBothWherePredicate(self):

        localctx = GqlParser.PerNodeLimitBothWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_perNodeLimitBothWherePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921
            localctx.lhs = self.perNodeLimitClause()
            self.state = 2922
            self.whereClause()
            self.state = 2923
            localctx.rhs = self.perNodeLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def perNodeLimitLeftPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitLeftPropertyPredicateContext,0)


        def perNodeLimitRightPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitRightPropertyPredicateContext,0)


        def perNodeLimitBothPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitBothPropertyPredicateContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitPropertyPredicate" ):
                listener.enterPerNodeLimitPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitPropertyPredicate" ):
                listener.exitPerNodeLimitPropertyPredicate(self)




    def perNodeLimitPropertyPredicate(self):

        localctx = GqlParser.PerNodeLimitPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_perNodeLimitPropertyPredicate)
        try:
            self.state = 2928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2925
                self.perNodeLimitLeftPropertyPredicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2926
                self.perNodeLimitRightPropertyPredicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2927
                self.perNodeLimitBothPropertyPredicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitLeftPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerNodeLimitClauseContext

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perNodeLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitLeftPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitLeftPropertyPredicate" ):
                listener.enterPerNodeLimitLeftPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitLeftPropertyPredicate" ):
                listener.exitPerNodeLimitLeftPropertyPredicate(self)




    def perNodeLimitLeftPropertyPredicate(self):

        localctx = GqlParser.PerNodeLimitLeftPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_perNodeLimitLeftPropertyPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2930
            localctx.lhs = self.perNodeLimitClause()
            self.state = 2931
            self.elementPropertySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitRightPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rhs = None # PerNodeLimitClauseContext

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perNodeLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitRightPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitRightPropertyPredicate" ):
                listener.enterPerNodeLimitRightPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitRightPropertyPredicate" ):
                listener.exitPerNodeLimitRightPropertyPredicate(self)




    def perNodeLimitRightPropertyPredicate(self):

        localctx = GqlParser.PerNodeLimitRightPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_perNodeLimitRightPropertyPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.elementPropertySpecification()
            self.state = 2934
            localctx.rhs = self.perNodeLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerNodeLimitBothPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerNodeLimitClauseContext
            self.rhs = None # PerNodeLimitClauseContext

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perNodeLimitClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PerNodeLimitClauseContext)
            else:
                return self.getTypedRuleContext(GqlParser.PerNodeLimitClauseContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_perNodeLimitBothPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerNodeLimitBothPropertyPredicate" ):
                listener.enterPerNodeLimitBothPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerNodeLimitBothPropertyPredicate" ):
                listener.exitPerNodeLimitBothPropertyPredicate(self)




    def perNodeLimitBothPropertyPredicate(self):

        localctx = GqlParser.PerNodeLimitBothPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_perNodeLimitBothPropertyPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2936
            localctx.lhs = self.perNodeLimitClause()
            self.state = 2937
            self.elementPropertySpecification()
            self.state = 2938
            localctx.rhs = self.perNodeLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PER_SHARD_LIMIT(self):
            return self.getToken(GqlParser.PER_SHARD_LIMIT, 0)

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitClause" ):
                listener.enterPerShardLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitClause" ):
                listener.exitPerShardLimitClause(self)




    def perShardLimitClause(self):

        localctx = GqlParser.PerShardLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_perShardLimitClause)
        try:
            self.state = 2947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2940
                self.match(GqlParser.PER_SHARD_LIMIT)
                self.state = 2941
                self.unsignedIntegerSpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2942
                self.match(GqlParser.PER_SHARD_LIMIT)
                self.state = 2943
                self.match(GqlParser.LEFT_PAREN)
                self.state = 2944
                self.unsignedIntegerSpecification()
                self.state = 2945
                self.match(GqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def perShardLimitLeftWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitLeftWherePredicateContext,0)


        def perShardLimitRightWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitRightWherePredicateContext,0)


        def perShardLimitBothWherePredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitBothWherePredicateContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitWherePredicate" ):
                listener.enterPerShardLimitWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitWherePredicate" ):
                listener.exitPerShardLimitWherePredicate(self)




    def perShardLimitWherePredicate(self):

        localctx = GqlParser.PerShardLimitWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_perShardLimitWherePredicate)
        try:
            self.state = 2952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2949
                self.perShardLimitLeftWherePredicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2950
                self.perShardLimitRightWherePredicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2951
                self.perShardLimitBothWherePredicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitLeftWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerShardLimitClauseContext

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def perShardLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitLeftWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitLeftWherePredicate" ):
                listener.enterPerShardLimitLeftWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitLeftWherePredicate" ):
                listener.exitPerShardLimitLeftWherePredicate(self)




    def perShardLimitLeftWherePredicate(self):

        localctx = GqlParser.PerShardLimitLeftWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_perShardLimitLeftWherePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2954
            localctx.lhs = self.perShardLimitClause()
            self.state = 2955
            self.whereClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitRightWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rhs = None # PerShardLimitClauseContext

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def perShardLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitRightWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitRightWherePredicate" ):
                listener.enterPerShardLimitRightWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitRightWherePredicate" ):
                listener.exitPerShardLimitRightWherePredicate(self)




    def perShardLimitRightWherePredicate(self):

        localctx = GqlParser.PerShardLimitRightWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_perShardLimitRightWherePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.whereClause()
            self.state = 2958
            localctx.rhs = self.perShardLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitBothWherePredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerShardLimitClauseContext
            self.rhs = None # PerShardLimitClauseContext

        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def perShardLimitClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PerShardLimitClauseContext)
            else:
                return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitBothWherePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitBothWherePredicate" ):
                listener.enterPerShardLimitBothWherePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitBothWherePredicate" ):
                listener.exitPerShardLimitBothWherePredicate(self)




    def perShardLimitBothWherePredicate(self):

        localctx = GqlParser.PerShardLimitBothWherePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_perShardLimitBothWherePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2960
            localctx.lhs = self.perShardLimitClause()
            self.state = 2961
            self.whereClause()
            self.state = 2962
            localctx.rhs = self.perShardLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def perShardLimitLeftPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitLeftPropertyPredicateContext,0)


        def perShardLimitRightPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitRightPropertyPredicateContext,0)


        def perShardLimitBothPropertyPredicate(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitBothPropertyPredicateContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitPropertyPredicate" ):
                listener.enterPerShardLimitPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitPropertyPredicate" ):
                listener.exitPerShardLimitPropertyPredicate(self)




    def perShardLimitPropertyPredicate(self):

        localctx = GqlParser.PerShardLimitPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_perShardLimitPropertyPredicate)
        try:
            self.state = 2967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2964
                self.perShardLimitLeftPropertyPredicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2965
                self.perShardLimitRightPropertyPredicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2966
                self.perShardLimitBothPropertyPredicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitLeftPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerShardLimitClauseContext

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perShardLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitLeftPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitLeftPropertyPredicate" ):
                listener.enterPerShardLimitLeftPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitLeftPropertyPredicate" ):
                listener.exitPerShardLimitLeftPropertyPredicate(self)




    def perShardLimitLeftPropertyPredicate(self):

        localctx = GqlParser.PerShardLimitLeftPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_perShardLimitLeftPropertyPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2969
            localctx.lhs = self.perShardLimitClause()
            self.state = 2970
            self.elementPropertySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitRightPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rhs = None # PerShardLimitClauseContext

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perShardLimitClause(self):
            return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitRightPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitRightPropertyPredicate" ):
                listener.enterPerShardLimitRightPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitRightPropertyPredicate" ):
                listener.exitPerShardLimitRightPropertyPredicate(self)




    def perShardLimitRightPropertyPredicate(self):

        localctx = GqlParser.PerShardLimitRightPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_perShardLimitRightPropertyPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            self.elementPropertySpecification()
            self.state = 2973
            localctx.rhs = self.perShardLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerShardLimitBothPropertyPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # PerShardLimitClauseContext
            self.rhs = None # PerShardLimitClauseContext

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def perShardLimitClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PerShardLimitClauseContext)
            else:
                return self.getTypedRuleContext(GqlParser.PerShardLimitClauseContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_perShardLimitBothPropertyPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerShardLimitBothPropertyPredicate" ):
                listener.enterPerShardLimitBothPropertyPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerShardLimitBothPropertyPredicate" ):
                listener.exitPerShardLimitBothPropertyPredicate(self)




    def perShardLimitBothPropertyPredicate(self):

        localctx = GqlParser.PerShardLimitBothPropertyPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_perShardLimitBothPropertyPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            localctx.lhs = self.perShardLimitClause()
            self.state = 2976
            self.elementPropertySpecification()
            self.state = 2977
            localctx.rhs = self.perShardLimitClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullEdgePattern(self):
            return self.getTypedRuleContext(GqlParser.FullEdgePatternContext,0)


        def abbreviatedEdgePattern(self):
            return self.getTypedRuleContext(GqlParser.AbbreviatedEdgePatternContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgePattern" ):
                listener.enterEdgePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgePattern" ):
                listener.exitEdgePattern(self)




    def edgePattern(self):

        localctx = GqlParser.EdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_edgePattern)
        try:
            self.state = 2981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2979
                self.fullEdgePattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2980
                self.abbreviatedEdgePattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullEdgePointingLeft(self):
            return self.getTypedRuleContext(GqlParser.FullEdgePointingLeftContext,0)


        def fullEdgeUndirected(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeUndirectedContext,0)


        def fullEdgePointingRight(self):
            return self.getTypedRuleContext(GqlParser.FullEdgePointingRightContext,0)


        def fullEdgeLeftOrUndirected(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeLeftOrUndirectedContext,0)


        def fullEdgeUndirectedOrRight(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeUndirectedOrRightContext,0)


        def fullEdgeLeftOrRight(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeLeftOrRightContext,0)


        def fullEdgeAnyDirection(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeAnyDirectionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgePattern" ):
                listener.enterFullEdgePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgePattern" ):
                listener.exitFullEdgePattern(self)




    def fullEdgePattern(self):

        localctx = GqlParser.FullEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_fullEdgePattern)
        try:
            self.state = 2990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2983
                self.fullEdgePointingLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2984
                self.fullEdgeUndirected()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2985
                self.fullEdgePointingRight()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2986
                self.fullEdgeLeftOrUndirected()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2987
                self.fullEdgeUndirectedOrRight()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2988
                self.fullEdgeLeftOrRight()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2989
                self.fullEdgeAnyDirection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgePointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgePointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgePointingLeft" ):
                listener.enterFullEdgePointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgePointingLeft" ):
                listener.exitFullEdgePointingLeft(self)




    def fullEdgePointingLeft(self):

        localctx = GqlParser.FullEdgePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_fullEdgePointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 2993
            self.match(GqlParser.MINUS_SIGN)
            self.state = 2994
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 2995
            self.elementPatternFiller()
            self.state = 2996
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 2997
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.TILDE)
            else:
                return self.getToken(GqlParser.TILDE, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeUndirected" ):
                listener.enterFullEdgeUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeUndirected" ):
                listener.exitFullEdgeUndirected(self)




    def fullEdgeUndirected(self):

        localctx = GqlParser.FullEdgeUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_fullEdgeUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self.match(GqlParser.TILDE)
            self.state = 3000
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3001
            self.elementPatternFiller()
            self.state = 3002
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3003
            self.match(GqlParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgePointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgePointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgePointingRight" ):
                listener.enterFullEdgePointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgePointingRight" ):
                listener.exitFullEdgePointingRight(self)




    def fullEdgePointingRight(self):

        localctx = GqlParser.FullEdgePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_fullEdgePointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3005
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3006
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3007
            self.elementPatternFiller()
            self.state = 3008
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3009
            self.match(GqlParser.RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeLeftOrUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.TILDE)
            else:
                return self.getToken(GqlParser.TILDE, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeLeftOrUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeLeftOrUndirected" ):
                listener.enterFullEdgeLeftOrUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeLeftOrUndirected" ):
                listener.exitFullEdgeLeftOrUndirected(self)




    def fullEdgeLeftOrUndirected(self):

        localctx = GqlParser.FullEdgeLeftOrUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_fullEdgeLeftOrUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3011
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3012
            self.match(GqlParser.TILDE)
            self.state = 3013
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3014
            self.elementPatternFiller()
            self.state = 3015
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3016
            self.match(GqlParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeUndirectedOrRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def TILDE_RIGHT_ARROW(self):
            return self.getToken(GqlParser.TILDE_RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeUndirectedOrRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeUndirectedOrRight" ):
                listener.enterFullEdgeUndirectedOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeUndirectedOrRight" ):
                listener.exitFullEdgeUndirectedOrRight(self)




    def fullEdgeUndirectedOrRight(self):

        localctx = GqlParser.FullEdgeUndirectedOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_fullEdgeUndirectedOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3018
            self.match(GqlParser.TILDE)
            self.state = 3019
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3020
            self.elementPatternFiller()
            self.state = 3021
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3022
            self.match(GqlParser.TILDE_RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeLeftOrRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeLeftOrRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeLeftOrRight" ):
                listener.enterFullEdgeLeftOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeLeftOrRight" ):
                listener.exitFullEdgeLeftOrRight(self)




    def fullEdgeLeftOrRight(self):

        localctx = GqlParser.FullEdgeLeftOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_fullEdgeLeftOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3024
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3025
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3026
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3027
            self.elementPatternFiller()
            self.state = 3028
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3029
            self.match(GqlParser.RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeAnyDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.ElementPatternFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeAnyDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeAnyDirection" ):
                listener.enterFullEdgeAnyDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeAnyDirection" ):
                listener.exitFullEdgeAnyDirection(self)




    def fullEdgeAnyDirection(self):

        localctx = GqlParser.FullEdgeAnyDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_fullEdgeAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3031
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3032
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3033
            self.elementPatternFiller()
            self.state = 3034
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3035
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbbreviatedEdgePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_abbreviatedEdgePattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AbbreviatedEdgeLeftOrUndirectedContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)
        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeLeftOrUndirected" ):
                listener.enterAbbreviatedEdgeLeftOrUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeLeftOrUndirected" ):
                listener.exitAbbreviatedEdgeLeftOrUndirected(self)


    class AbbreviatedEdgePointingLeftContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)
        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgePointingLeft" ):
                listener.enterAbbreviatedEdgePointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgePointingLeft" ):
                listener.exitAbbreviatedEdgePointingLeft(self)


    class AbbreviatedEdgePointingRightContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgePointingRight" ):
                listener.enterAbbreviatedEdgePointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgePointingRight" ):
                listener.exitAbbreviatedEdgePointingRight(self)


    class AbbreviatedEdgeUndirectedOrRightContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TILDE_RIGHT_ARROW(self):
            return self.getToken(GqlParser.TILDE_RIGHT_ARROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeUndirectedOrRight" ):
                listener.enterAbbreviatedEdgeUndirectedOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeUndirectedOrRight" ):
                listener.exitAbbreviatedEdgeUndirectedOrRight(self)


    class AbbreviatedEdgeUndirectedContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeUndirected" ):
                listener.enterAbbreviatedEdgeUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeUndirected" ):
                listener.exitAbbreviatedEdgeUndirected(self)


    class AbbreviatedEdgeLeftOrRightContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_MINUS_RIGHT(self):
            return self.getToken(GqlParser.LEFT_MINUS_RIGHT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeLeftOrRight" ):
                listener.enterAbbreviatedEdgeLeftOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeLeftOrRight" ):
                listener.exitAbbreviatedEdgeLeftOrRight(self)


    class AbbreviatedEdgeAnyDirectionContext(AbbreviatedEdgePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AbbreviatedEdgePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeAnyDirection" ):
                listener.enterAbbreviatedEdgeAnyDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeAnyDirection" ):
                listener.exitAbbreviatedEdgeAnyDirection(self)



    def abbreviatedEdgePattern(self):

        localctx = GqlParser.AbbreviatedEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_abbreviatedEdgePattern)
        try:
            self.state = 3046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                localctx = GqlParser.AbbreviatedEdgePointingLeftContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3037
                self.match(GqlParser.LEFT_ANGLE_BRACKET)
                self.state = 3038
                self.match(GqlParser.MINUS_SIGN)
                pass

            elif la_ == 2:
                localctx = GqlParser.AbbreviatedEdgeUndirectedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3039
                self.match(GqlParser.TILDE)
                pass

            elif la_ == 3:
                localctx = GqlParser.AbbreviatedEdgePointingRightContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3040
                self.match(GqlParser.RIGHT_ARROW)
                pass

            elif la_ == 4:
                localctx = GqlParser.AbbreviatedEdgeLeftOrUndirectedContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3041
                self.match(GqlParser.LEFT_ANGLE_BRACKET)
                self.state = 3042
                self.match(GqlParser.TILDE)
                pass

            elif la_ == 5:
                localctx = GqlParser.AbbreviatedEdgeUndirectedOrRightContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3043
                self.match(GqlParser.TILDE_RIGHT_ARROW)
                pass

            elif la_ == 6:
                localctx = GqlParser.AbbreviatedEdgeLeftOrRightContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3044
                self.match(GqlParser.LEFT_MINUS_RIGHT)
                pass

            elif la_ == 7:
                localctx = GqlParser.AbbreviatedEdgeAnyDirectionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3045
                self.match(GqlParser.MINUS_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedPathPatternExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def parenthesizedPathPatternExpressionBody(self):
            return self.getTypedRuleContext(GqlParser.ParenthesizedPathPatternExpressionBodyContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_parenthesizedPathPatternExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedPathPatternExpression" ):
                listener.enterParenthesizedPathPatternExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedPathPatternExpression" ):
                listener.exitParenthesizedPathPatternExpression(self)




    def parenthesizedPathPatternExpression(self):

        localctx = GqlParser.ParenthesizedPathPatternExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_parenthesizedPathPatternExpression)
        try:
            self.state = 3056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3048
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3049
                self.parenthesizedPathPatternExpressionBody()
                self.state = 3050
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3052
                self.match(GqlParser.LEFT_BRACKET)
                self.state = 3053
                self.parenthesizedPathPatternExpressionBody()
                self.state = 3054
                self.match(GqlParser.RIGHT_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedPathPatternExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternExpression(self):
            return self.getTypedRuleContext(GqlParser.PathPatternExpressionContext,0)


        def subpathVariableDeclaration(self):
            return self.getTypedRuleContext(GqlParser.SubpathVariableDeclarationContext,0)


        def pathModePrefix(self):
            return self.getTypedRuleContext(GqlParser.PathModePrefixContext,0)


        def slidingPart(self):
            return self.getTypedRuleContext(GqlParser.SlidingPartContext,0)


        def parenthesizedPathPatternWhereClause(self):
            return self.getTypedRuleContext(GqlParser.ParenthesizedPathPatternWhereClauseContext,0)


        def untilPart(self):
            return self.getTypedRuleContext(GqlParser.UntilPartContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_parenthesizedPathPatternExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedPathPatternExpressionBody" ):
                listener.enterParenthesizedPathPatternExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedPathPatternExpressionBody" ):
                listener.exitParenthesizedPathPatternExpressionBody(self)




    def parenthesizedPathPatternExpressionBody(self):

        localctx = GqlParser.ParenthesizedPathPatternExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_parenthesizedPathPatternExpressionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 3058
                self.subpathVariableDeclaration()


            self.state = 3062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 562949961809921) != 0):
                self.state = 3061
                self.pathModePrefix()


            self.state = 3064
            self.pathPatternExpression()
            self.state = 3066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==321:
                self.state = 3065
                self.slidingPart()


            self.state = 3069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==292:
                self.state = 3068
                self.parenthesizedPathPatternWhereClause()


            self.state = 3072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322:
                self.state = 3071
                self.untilPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(GqlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_untilPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntilPart" ):
                listener.enterUntilPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntilPart" ):
                listener.exitUntilPart(self)




    def untilPart(self):

        localctx = GqlParser.UntilPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_untilPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3074
            self.match(GqlParser.UNTIL)
            self.state = 3075
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlidingPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLIDING(self):
            return self.getToken(GqlParser.SLIDING, 0)

        def lengthPart(self):
            return self.getTypedRuleContext(GqlParser.LengthPartContext,0)


        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(GqlParser.IdentifierContext,0)


        def stepPart(self):
            return self.getTypedRuleContext(GqlParser.StepPartContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(GqlParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_slidingPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlidingPart" ):
                listener.enterSlidingPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlidingPart" ):
                listener.exitSlidingPart(self)




    def slidingPart(self):

        localctx = GqlParser.SlidingPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_slidingPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self.match(GqlParser.SLIDING)
            self.state = 3078
            self.lengthPart()
            self.state = 3080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 3079
                self.stepPart()


            self.state = 3082
            self.match(GqlParser.AS)
            self.state = 3083
            self.identifier()
            self.state = 3085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 3084
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(GqlParser.LENGTH, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GqlParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_lengthPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthPart" ):
                listener.enterLengthPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthPart" ):
                listener.exitLengthPart(self)




    def lengthPart(self):

        localctx = GqlParser.LengthPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_lengthPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3087
            self.match(GqlParser.LENGTH)
            self.state = 3088
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StepPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STEP(self):
            return self.getToken(GqlParser.STEP, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GqlParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_stepPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStepPart" ):
                listener.enterStepPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStepPart" ):
                listener.exitStepPart(self)




    def stepPart(self):

        localctx = GqlParser.StepPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_stepPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self.match(GqlParser.STEP)
            self.state = 3091
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpathVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subpathVariable(self):
            return self.getTypedRuleContext(GqlParser.SubpathVariableContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_subpathVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpathVariableDeclaration" ):
                listener.enterSubpathVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpathVariableDeclaration" ):
                listener.exitSubpathVariableDeclaration(self)




    def subpathVariableDeclaration(self):

        localctx = GqlParser.SubpathVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_subpathVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3093
            self.subpathVariable()
            self.state = 3094
            self.match(GqlParser.EQUALS_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedPathPatternWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(GqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_parenthesizedPathPatternWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedPathPatternWhereClause" ):
                listener.enterParenthesizedPathPatternWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedPathPatternWhereClause" ):
                listener.exitParenthesizedPathPatternWhereClause(self)




    def parenthesizedPathPatternWhereClause(self):

        localctx = GqlParser.ParenthesizedPathPatternWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_parenthesizedPathPatternWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3096
            self.match(GqlParser.WHERE)
            self.state = 3097
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertGraphPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertPathPatternList(self):
            return self.getTypedRuleContext(GqlParser.InsertPathPatternListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertGraphPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertGraphPattern" ):
                listener.enterInsertGraphPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertGraphPattern" ):
                listener.exitInsertGraphPattern(self)




    def insertGraphPattern(self):

        localctx = GqlParser.InsertGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_insertGraphPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3099
            self.insertPathPatternList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertPathPatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertPathPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.InsertPathPatternContext)
            else:
                return self.getTypedRuleContext(GqlParser.InsertPathPatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_insertPathPatternList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertPathPatternList" ):
                listener.enterInsertPathPatternList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertPathPatternList" ):
                listener.exitInsertPathPatternList(self)




    def insertPathPatternList(self):

        localctx = GqlParser.InsertPathPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_insertPathPatternList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3101
            self.insertPathPattern()
            self.state = 3106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3102
                self.match(GqlParser.COMMA)
                self.state = 3103
                self.insertPathPattern()
                self.state = 3108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertPathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertNodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.InsertNodePatternContext)
            else:
                return self.getTypedRuleContext(GqlParser.InsertNodePatternContext,i)


        def insertEdgePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.InsertEdgePatternContext)
            else:
                return self.getTypedRuleContext(GqlParser.InsertEdgePatternContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_insertPathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertPathPattern" ):
                listener.enterInsertPathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertPathPattern" ):
                listener.exitInsertPathPattern(self)




    def insertPathPattern(self):

        localctx = GqlParser.InsertPathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_insertPathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            self.insertNodePattern()
            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 33579008) != 0):
                self.state = 3110
                self.insertEdgePattern()
                self.state = 3111
                self.insertNodePattern()
                self.state = 3117
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertNodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.InsertElementPatternFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertNodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertNodePattern" ):
                listener.enterInsertNodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertNodePattern" ):
                listener.exitInsertNodePattern(self)




    def insertNodePattern(self):

        localctx = GqlParser.InsertNodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_insertNodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3118
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8858369008) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or _la==402 or _la==407:
                self.state = 3119
                self.insertElementPatternFiller()


            self.state = 3122
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertEdgePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertEdgePointingLeft(self):
            return self.getTypedRuleContext(GqlParser.InsertEdgePointingLeftContext,0)


        def insertEdgePointingRight(self):
            return self.getTypedRuleContext(GqlParser.InsertEdgePointingRightContext,0)


        def insertEdgeUndirected(self):
            return self.getTypedRuleContext(GqlParser.InsertEdgeUndirectedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertEdgePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertEdgePattern" ):
                listener.enterInsertEdgePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertEdgePattern" ):
                listener.exitInsertEdgePattern(self)




    def insertEdgePattern(self):

        localctx = GqlParser.InsertEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_insertEdgePattern)
        try:
            self.state = 3127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3124
                self.insertEdgePointingLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3125
                self.insertEdgePointingRight()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3126
                self.insertEdgeUndirected()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertEdgePointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.InsertElementPatternFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertEdgePointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertEdgePointingLeft" ):
                listener.enterInsertEdgePointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertEdgePointingLeft" ):
                listener.exitInsertEdgePointingLeft(self)




    def insertEdgePointingLeft(self):

        localctx = GqlParser.InsertEdgePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_insertEdgePointingLeft)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3129
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3130
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3131
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8858369008) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or _la==402 or _la==407:
                self.state = 3132
                self.insertElementPatternFiller()


            self.state = 3135
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3136
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertEdgePointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.InsertElementPatternFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertEdgePointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertEdgePointingRight" ):
                listener.enterInsertEdgePointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertEdgePointingRight" ):
                listener.exitInsertEdgePointingRight(self)




    def insertEdgePointingRight(self):

        localctx = GqlParser.InsertEdgePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_insertEdgePointingRight)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3138
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3139
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8858369008) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or _la==402 or _la==407:
                self.state = 3140
                self.insertElementPatternFiller()


            self.state = 3143
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3144
            self.match(GqlParser.RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertEdgeUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.TILDE)
            else:
                return self.getToken(GqlParser.TILDE, i)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(GqlParser.InsertElementPatternFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertEdgeUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertEdgeUndirected" ):
                listener.enterInsertEdgeUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertEdgeUndirected" ):
                listener.exitInsertEdgeUndirected(self)




    def insertEdgeUndirected(self):

        localctx = GqlParser.InsertEdgeUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_insertEdgeUndirected)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            _la = self._input.LA(1)
            if not(_la==14 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3147
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8858369008) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or _la==402 or _la==407:
                self.state = 3148
                self.insertElementPatternFiller()


            self.state = 3151
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3152
            _la = self._input.LA(1)
            if not(_la==14 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertElementPatternFillerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableDeclaration(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableDeclarationContext,0)


        def labelAndPropertySetSpecification(self):
            return self.getTypedRuleContext(GqlParser.LabelAndPropertySetSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_insertElementPatternFiller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertElementPatternFiller" ):
                listener.enterInsertElementPatternFiller(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertElementPatternFiller" ):
                listener.exitInsertElementPatternFiller(self)




    def insertElementPatternFiller(self):

        localctx = GqlParser.InsertElementPatternFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_insertElementPatternFiller)
        try:
            self.state = 3159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3154
                self.elementVariableDeclaration()
                self.state = 3155
                self.labelAndPropertySetSpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3157
                self.elementVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3158
                self.labelAndPropertySetSpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelAndPropertySetSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOrColon(self):
            return self.getTypedRuleContext(GqlParser.IsOrColonContext,0)


        def labelSetSpecification(self):
            return self.getTypedRuleContext(GqlParser.LabelSetSpecificationContext,0)


        def elementPropertySpecification(self):
            return self.getTypedRuleContext(GqlParser.ElementPropertySpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_labelAndPropertySetSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelAndPropertySetSpecification" ):
                listener.enterLabelAndPropertySetSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelAndPropertySetSpecification" ):
                listener.exitLabelAndPropertySetSpecification(self)




    def labelAndPropertySetSpecification(self):

        localctx = GqlParser.LabelAndPropertySetSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_labelAndPropertySetSpecification)
        try:
            self.state = 3169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3161
                self.isOrColon()
                self.state = 3162
                self.labelSetSpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3164
                self.isOrColon()
                self.state = 3165
                self.labelSetSpecification()
                self.state = 3166
                self.elementPropertySpecification()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3168
                self.elementPropertySpecification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.LabelTermContext)
            else:
                return self.getTypedRuleContext(GqlParser.LabelTermContext,i)


        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.VERTICAL_BAR)
            else:
                return self.getToken(GqlParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return GqlParser.RULE_labelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelExpression" ):
                listener.enterLabelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelExpression" ):
                listener.exitLabelExpression(self)




    def labelExpression(self):

        localctx = GqlParser.LabelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_labelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3171
            self.labelTerm()
            self.state = 3176
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3172
                    self.match(GqlParser.VERTICAL_BAR)
                    self.state = 3173
                    self.labelTerm() 
                self.state = 3178
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelFactor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.LabelFactorContext)
            else:
                return self.getTypedRuleContext(GqlParser.LabelFactorContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.AMPERSAND)
            else:
                return self.getToken(GqlParser.AMPERSAND, i)

        def getRuleIndex(self):
            return GqlParser.RULE_labelTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelTerm" ):
                listener.enterLabelTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelTerm" ):
                listener.exitLabelTerm(self)




    def labelTerm(self):

        localctx = GqlParser.LabelTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_labelTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3179
            self.labelFactor()
            self.state = 3184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3180
                    self.match(GqlParser.AMPERSAND)
                    self.state = 3181
                    self.labelFactor() 
                self.state = 3186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelFactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelPrimary(self):
            return self.getTypedRuleContext(GqlParser.LabelPrimaryContext,0)


        def EXCLAMATION_MARK(self):
            return self.getToken(GqlParser.EXCLAMATION_MARK, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_labelFactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelFactor" ):
                listener.enterLabelFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelFactor" ):
                listener.exitLabelFactor(self)




    def labelFactor(self):

        localctx = GqlParser.LabelFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_labelFactor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 3187
                self.match(GqlParser.EXCLAMATION_MARK)


            self.state = 3190
            self.labelPrimary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(GqlParser.LabelNameContext,0)


        def wildcardLabel(self):
            return self.getTypedRuleContext(GqlParser.WildcardLabelContext,0)


        def parenthesizedLabelExpression(self):
            return self.getTypedRuleContext(GqlParser.ParenthesizedLabelExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_labelPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelPrimary" ):
                listener.enterLabelPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelPrimary" ):
                listener.exitLabelPrimary(self)




    def labelPrimary(self):

        localctx = GqlParser.LabelPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_labelPrimary)
        try:
            self.state = 3195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 402, 407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3192
                self.labelName()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3193
                self.wildcardLabel()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3194
                self.parenthesizedLabelExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(GqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_wildcardLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardLabel" ):
                listener.enterWildcardLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardLabel" ):
                listener.exitWildcardLabel(self)




    def wildcardLabel(self):

        localctx = GqlParser.WildcardLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_wildcardLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3197
            self.match(GqlParser.PERCENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedLabelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(GqlParser.LabelExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_parenthesizedLabelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLabelExpression" ):
                listener.enterParenthesizedLabelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLabelExpression" ):
                listener.exitParenthesizedLabelExpression(self)




    def parenthesizedLabelExpression(self):

        localctx = GqlParser.ParenthesizedLabelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_parenthesizedLabelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3200
            self.labelExpression()
            self.state = 3201
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphPatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_graphPatternQuantifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlGraphPatternFixedQuantifierContext(GraphPatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.GraphPatternQuantifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fixedQuantifier(self):
            return self.getTypedRuleContext(GqlParser.FixedQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlGraphPatternFixedQuantifier" ):
                listener.enterGqlGraphPatternFixedQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlGraphPatternFixedQuantifier" ):
                listener.exitGqlGraphPatternFixedQuantifier(self)


    class GqlGraphPatternAsteriskQuantifierContext(GraphPatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.GraphPatternQuantifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(GqlParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlGraphPatternAsteriskQuantifier" ):
                listener.enterGqlGraphPatternAsteriskQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlGraphPatternAsteriskQuantifier" ):
                listener.exitGqlGraphPatternAsteriskQuantifier(self)


    class GqlGraphPatternPlusSignQuantifierContext(GraphPatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.GraphPatternQuantifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS_SIGN(self):
            return self.getToken(GqlParser.PLUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlGraphPatternPlusSignQuantifier" ):
                listener.enterGqlGraphPatternPlusSignQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlGraphPatternPlusSignQuantifier" ):
                listener.exitGqlGraphPatternPlusSignQuantifier(self)


    class GqlGraphPatternGeneralQuantifierContext(GraphPatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.GraphPatternQuantifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def generalQuantifier(self):
            return self.getTypedRuleContext(GqlParser.GeneralQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlGraphPatternGeneralQuantifier" ):
                listener.enterGqlGraphPatternGeneralQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlGraphPatternGeneralQuantifier" ):
                listener.exitGqlGraphPatternGeneralQuantifier(self)



    def graphPatternQuantifier(self):

        localctx = GqlParser.GraphPatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_graphPatternQuantifier)
        try:
            self.state = 3207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlGraphPatternAsteriskQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3203
                self.match(GqlParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = GqlParser.GqlGraphPatternPlusSignQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3204
                self.match(GqlParser.PLUS_SIGN)
                pass

            elif la_ == 3:
                localctx = GqlParser.GqlGraphPatternFixedQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3205
                self.fixedQuantifier()
                pass

            elif la_ == 4:
                localctx = GqlParser.GqlGraphPatternGeneralQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3206
                self.generalQuantifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FixedQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fixedQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedQuantifier" ):
                listener.enterFixedQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedQuantifier" ):
                listener.exitFixedQuantifier(self)




    def fixedQuantifier(self):

        localctx = GqlParser.FixedQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_fixedQuantifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.match(GqlParser.LEFT_BRACE)
            self.state = 3210
            self.unsignedIntegerSpecification()
            self.state = 3211
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def lowerBound(self):
            return self.getTypedRuleContext(GqlParser.LowerBoundContext,0)


        def upperBound(self):
            return self.getTypedRuleContext(GqlParser.UpperBoundContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_generalQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralQuantifier" ):
                listener.enterGeneralQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralQuantifier" ):
                listener.exitGeneralQuantifier(self)




    def generalQuantifier(self):

        localctx = GqlParser.GeneralQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_generalQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3213
            self.match(GqlParser.LEFT_BRACE)
            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==15 or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 15) != 0):
                self.state = 3214
                self.lowerBound()


            self.state = 3217
            self.match(GqlParser.COMMA)
            self.state = 3219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==15 or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 15) != 0):
                self.state = 3218
                self.upperBound()


            self.state = 3221
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_lowerBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerBound" ):
                listener.enterLowerBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerBound" ):
                listener.exitLowerBound(self)




    def lowerBound(self):

        localctx = GqlParser.LowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_lowerBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3223
            self.unsignedIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_upperBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperBound" ):
                listener.enterUpperBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperBound" ):
                listener.exitUpperBound(self)




    def upperBound(self):

        localctx = GqlParser.UpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_upperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3225
            self.unsignedIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedPathPatternExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedDefaultingLeft(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingLeftContext,0)


        def simplifiedDefaultingUndirected(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingUndirectedContext,0)


        def simplifiedDefaultingRight(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingRightContext,0)


        def simplifiedDefaultingLeftOrUndirected(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingLeftOrUndirectedContext,0)


        def simplifiedDefaultingUndirectedOrRight(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingUndirectedOrRightContext,0)


        def simplifiedDefaultingLeftOrRight(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingLeftOrRightContext,0)


        def simplifiedDefaultingAnyDirection(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDefaultingAnyDirectionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedPathPatternExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedPathPatternExpression" ):
                listener.enterSimplifiedPathPatternExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedPathPatternExpression" ):
                listener.exitSimplifiedPathPatternExpression(self)




    def simplifiedPathPatternExpression(self):

        localctx = GqlParser.SimplifiedPathPatternExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_simplifiedPathPatternExpression)
        try:
            self.state = 3234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3227
                self.simplifiedDefaultingLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3228
                self.simplifiedDefaultingUndirected()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3229
                self.simplifiedDefaultingRight()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3230
                self.simplifiedDefaultingLeftOrUndirected()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3231
                self.simplifiedDefaultingUndirectedOrRight()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3232
                self.simplifiedDefaultingLeftOrRight()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3233
                self.simplifiedDefaultingAnyDirection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_MINUS_SLASH(self):
            return self.getToken(GqlParser.LEFT_MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingLeft" ):
                listener.enterSimplifiedDefaultingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingLeft" ):
                listener.exitSimplifiedDefaultingLeft(self)




    def simplifiedDefaultingLeft(self):

        localctx = GqlParser.SimplifiedDefaultingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_simplifiedDefaultingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self.match(GqlParser.LEFT_MINUS_SLASH)
            self.state = 3237
            self.simplifiedContents()
            self.state = 3238
            self.match(GqlParser.SOLIDUS)
            self.state = 3239
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_SLASH(self):
            return self.getToken(GqlParser.TILDE_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingUndirected" ):
                listener.enterSimplifiedDefaultingUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingUndirected" ):
                listener.exitSimplifiedDefaultingUndirected(self)




    def simplifiedDefaultingUndirected(self):

        localctx = GqlParser.SimplifiedDefaultingUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_simplifiedDefaultingUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3241
            self.match(GqlParser.TILDE_SLASH)
            self.state = 3242
            self.simplifiedContents()
            self.state = 3243
            self.match(GqlParser.SOLIDUS)
            self.state = 3244
            self.match(GqlParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SLASH(self):
            return self.getToken(GqlParser.MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SLASH_MINUS_RIGHT(self):
            return self.getToken(GqlParser.SLASH_MINUS_RIGHT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingRight" ):
                listener.enterSimplifiedDefaultingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingRight" ):
                listener.exitSimplifiedDefaultingRight(self)




    def simplifiedDefaultingRight(self):

        localctx = GqlParser.SimplifiedDefaultingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_simplifiedDefaultingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3246
            self.match(GqlParser.MINUS_SLASH)
            self.state = 3247
            self.simplifiedContents()
            self.state = 3248
            self.match(GqlParser.SLASH_MINUS_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingLeftOrUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_TILDE_SLASH(self):
            return self.getToken(GqlParser.LEFT_TILDE_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingLeftOrUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingLeftOrUndirected" ):
                listener.enterSimplifiedDefaultingLeftOrUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingLeftOrUndirected" ):
                listener.exitSimplifiedDefaultingLeftOrUndirected(self)




    def simplifiedDefaultingLeftOrUndirected(self):

        localctx = GqlParser.SimplifiedDefaultingLeftOrUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_simplifiedDefaultingLeftOrUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            self.match(GqlParser.LEFT_TILDE_SLASH)
            self.state = 3251
            self.simplifiedContents()
            self.state = 3252
            self.match(GqlParser.SOLIDUS)
            self.state = 3253
            self.match(GqlParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingUndirectedOrRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_SLASH(self):
            return self.getToken(GqlParser.TILDE_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SLASH_TILDE_RIGHT(self):
            return self.getToken(GqlParser.SLASH_TILDE_RIGHT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingUndirectedOrRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingUndirectedOrRight" ):
                listener.enterSimplifiedDefaultingUndirectedOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingUndirectedOrRight" ):
                listener.exitSimplifiedDefaultingUndirectedOrRight(self)




    def simplifiedDefaultingUndirectedOrRight(self):

        localctx = GqlParser.SimplifiedDefaultingUndirectedOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_simplifiedDefaultingUndirectedOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3255
            self.match(GqlParser.TILDE_SLASH)
            self.state = 3256
            self.simplifiedContents()
            self.state = 3257
            self.match(GqlParser.SLASH_TILDE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingLeftOrRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_MINUS_SLASH(self):
            return self.getToken(GqlParser.LEFT_MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SLASH_MINUS_RIGHT(self):
            return self.getToken(GqlParser.SLASH_MINUS_RIGHT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingLeftOrRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingLeftOrRight" ):
                listener.enterSimplifiedDefaultingLeftOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingLeftOrRight" ):
                listener.exitSimplifiedDefaultingLeftOrRight(self)




    def simplifiedDefaultingLeftOrRight(self):

        localctx = GqlParser.SimplifiedDefaultingLeftOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_simplifiedDefaultingLeftOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3259
            self.match(GqlParser.LEFT_MINUS_SLASH)
            self.state = 3260
            self.simplifiedContents()
            self.state = 3261
            self.match(GqlParser.SLASH_MINUS_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDefaultingAnyDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SLASH(self):
            return self.getToken(GqlParser.MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDefaultingAnyDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDefaultingAnyDirection" ):
                listener.enterSimplifiedDefaultingAnyDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDefaultingAnyDirection" ):
                listener.exitSimplifiedDefaultingAnyDirection(self)




    def simplifiedDefaultingAnyDirection(self):

        localctx = GqlParser.SimplifiedDefaultingAnyDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_simplifiedDefaultingAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3263
            self.match(GqlParser.MINUS_SLASH)
            self.state = 3264
            self.simplifiedContents()
            self.state = 3265
            self.match(GqlParser.SOLIDUS)
            self.state = 3266
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedContentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTerm(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedTermContext,0)


        def simplifiedPathUnion(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedPathUnionContext,0)


        def simplifiedMultisetAlternation(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedMultisetAlternationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedContents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedContents" ):
                listener.enterSimplifiedContents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedContents" ):
                listener.exitSimplifiedContents(self)




    def simplifiedContents(self):

        localctx = GqlParser.SimplifiedContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_simplifiedContents)
        try:
            self.state = 3271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3268
                self.simplifiedTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3269
                self.simplifiedPathUnion()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3270
                self.simplifiedMultisetAlternation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedPathUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimplifiedTermContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimplifiedTermContext,i)


        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.VERTICAL_BAR)
            else:
                return self.getToken(GqlParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedPathUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedPathUnion" ):
                listener.enterSimplifiedPathUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedPathUnion" ):
                listener.exitSimplifiedPathUnion(self)




    def simplifiedPathUnion(self):

        localctx = GqlParser.SimplifiedPathUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_simplifiedPathUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3273
            self.simplifiedTerm()
            self.state = 3274
            self.match(GqlParser.VERTICAL_BAR)
            self.state = 3275
            self.simplifiedTerm()
            self.state = 3280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 3276
                self.match(GqlParser.VERTICAL_BAR)
                self.state = 3277
                self.simplifiedTerm()
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedMultisetAlternationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimplifiedTermContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimplifiedTermContext,i)


        def MULTISET_ALTERNATION_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MULTISET_ALTERNATION_OPERATOR)
            else:
                return self.getToken(GqlParser.MULTISET_ALTERNATION_OPERATOR, i)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedMultisetAlternation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedMultisetAlternation" ):
                listener.enterSimplifiedMultisetAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedMultisetAlternation" ):
                listener.exitSimplifiedMultisetAlternation(self)




    def simplifiedMultisetAlternation(self):

        localctx = GqlParser.SimplifiedMultisetAlternationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_simplifiedMultisetAlternation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3283
            self.simplifiedTerm()
            self.state = 3284
            self.match(GqlParser.MULTISET_ALTERNATION_OPERATOR)
            self.state = 3285
            self.simplifiedTerm()
            self.state = 3290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==358:
                self.state = 3286
                self.match(GqlParser.MULTISET_ALTERNATION_OPERATOR)
                self.state = 3287
                self.simplifiedTerm()
                self.state = 3292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedFactorLow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimplifiedFactorLowContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimplifiedFactorLowContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedTerm" ):
                listener.enterSimplifiedTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedTerm" ):
                listener.exitSimplifiedTerm(self)




    def simplifiedTerm(self):

        localctx = GqlParser.SimplifiedTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_simplifiedTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3294 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3293
                self.simplifiedFactorLow()
                self.state = 3296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8824786688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or _la==402 or _la==407):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedFactorLowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedFactorHigh(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimplifiedFactorHighContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimplifiedFactorHighContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.AMPERSAND)
            else:
                return self.getToken(GqlParser.AMPERSAND, i)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedFactorLow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedFactorLow" ):
                listener.enterSimplifiedFactorLow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedFactorLow" ):
                listener.exitSimplifiedFactorLow(self)




    def simplifiedFactorLow(self):

        localctx = GqlParser.SimplifiedFactorLowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_simplifiedFactorLow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3298
            self.simplifiedFactorHigh()
            self.state = 3303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3299
                self.match(GqlParser.AMPERSAND)
                self.state = 3300
                self.simplifiedFactorHigh()
                self.state = 3305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedFactorHighContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTertiary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedTertiaryContext,0)


        def simplifiedQuantified(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedQuantifiedContext,0)


        def simplifiedQuestioned(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedQuestionedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedFactorHigh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedFactorHigh" ):
                listener.enterSimplifiedFactorHigh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedFactorHigh" ):
                listener.exitSimplifiedFactorHigh(self)




    def simplifiedFactorHigh(self):

        localctx = GqlParser.SimplifiedFactorHighContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_simplifiedFactorHigh)
        try:
            self.state = 3309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3306
                self.simplifiedTertiary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3307
                self.simplifiedQuantified()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3308
                self.simplifiedQuestioned()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedQuantifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTertiary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedTertiaryContext,0)


        def graphPatternQuantifier(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternQuantifierContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedQuantified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedQuantified" ):
                listener.enterSimplifiedQuantified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedQuantified" ):
                listener.exitSimplifiedQuantified(self)




    def simplifiedQuantified(self):

        localctx = GqlParser.SimplifiedQuantifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_simplifiedQuantified)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3311
            self.simplifiedTertiary()
            self.state = 3312
            self.graphPatternQuantifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedQuestionedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTertiary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedTertiaryContext,0)


        def QUESTION_MARK(self):
            return self.getToken(GqlParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedQuestioned

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedQuestioned" ):
                listener.enterSimplifiedQuestioned(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedQuestioned" ):
                listener.exitSimplifiedQuestioned(self)




    def simplifiedQuestioned(self):

        localctx = GqlParser.SimplifiedQuestionedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_simplifiedQuestioned)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314
            self.simplifiedTertiary()
            self.state = 3315
            self.match(GqlParser.QUESTION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedTertiaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedDirectionOverride(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedDirectionOverrideContext,0)


        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedTertiary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedTertiary" ):
                listener.enterSimplifiedTertiary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedTertiary" ):
                listener.exitSimplifiedTertiary(self)




    def simplifiedTertiary(self):

        localctx = GqlParser.SimplifiedTertiaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_simplifiedTertiary)
        try:
            self.state = 3319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3317
                self.simplifiedDirectionOverride()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3318
                self.simplifiedSecondary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedDirectionOverrideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedOverrideLeft(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideLeftContext,0)


        def simplifiedOverrideUndirected(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideUndirectedContext,0)


        def simplifiedOverrideRight(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideRightContext,0)


        def simplifiedOverrideLeftOrUndirected(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideLeftOrUndirectedContext,0)


        def simplifiedOverrideUndirectedOrRight(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideUndirectedOrRightContext,0)


        def simplifiedOverrideLeftOrRight(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideLeftOrRightContext,0)


        def simplifiedOverrideAnyDirection(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedOverrideAnyDirectionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedDirectionOverride

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedDirectionOverride" ):
                listener.enterSimplifiedDirectionOverride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedDirectionOverride" ):
                listener.exitSimplifiedDirectionOverride(self)




    def simplifiedDirectionOverride(self):

        localctx = GqlParser.SimplifiedDirectionOverrideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_simplifiedDirectionOverride)
        try:
            self.state = 3328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3321
                self.simplifiedOverrideLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3322
                self.simplifiedOverrideUndirected()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3323
                self.simplifiedOverrideRight()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3324
                self.simplifiedOverrideLeftOrUndirected()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3325
                self.simplifiedOverrideUndirectedOrRight()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3326
                self.simplifiedOverrideLeftOrRight()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3327
                self.simplifiedOverrideAnyDirection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideLeft" ):
                listener.enterSimplifiedOverrideLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideLeft" ):
                listener.exitSimplifiedOverrideLeft(self)




    def simplifiedOverrideLeft(self):

        localctx = GqlParser.SimplifiedOverrideLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_simplifiedOverrideLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3330
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3331
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideUndirected" ):
                listener.enterSimplifiedOverrideUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideUndirected" ):
                listener.exitSimplifiedOverrideUndirected(self)




    def simplifiedOverrideUndirected(self):

        localctx = GqlParser.SimplifiedOverrideUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_simplifiedOverrideUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3333
            self.match(GqlParser.TILDE)
            self.state = 3334
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideRight" ):
                listener.enterSimplifiedOverrideRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideRight" ):
                listener.exitSimplifiedOverrideRight(self)




    def simplifiedOverrideRight(self):

        localctx = GqlParser.SimplifiedOverrideRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_simplifiedOverrideRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self.simplifiedSecondary()
            self.state = 3337
            self.match(GqlParser.RIGHT_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideLeftOrUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideLeftOrUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideLeftOrUndirected" ):
                listener.enterSimplifiedOverrideLeftOrUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideLeftOrUndirected" ):
                listener.exitSimplifiedOverrideLeftOrUndirected(self)




    def simplifiedOverrideLeftOrUndirected(self):

        localctx = GqlParser.SimplifiedOverrideLeftOrUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_simplifiedOverrideLeftOrUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3339
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3340
            self.match(GqlParser.TILDE)
            self.state = 3341
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideUndirectedOrRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideUndirectedOrRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideUndirectedOrRight" ):
                listener.enterSimplifiedOverrideUndirectedOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideUndirectedOrRight" ):
                listener.exitSimplifiedOverrideUndirectedOrRight(self)




    def simplifiedOverrideUndirectedOrRight(self):

        localctx = GqlParser.SimplifiedOverrideUndirectedOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_simplifiedOverrideUndirectedOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3343
            self.match(GqlParser.TILDE)
            self.state = 3344
            self.simplifiedSecondary()
            self.state = 3345
            self.match(GqlParser.RIGHT_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideLeftOrRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideLeftOrRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideLeftOrRight" ):
                listener.enterSimplifiedOverrideLeftOrRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideLeftOrRight" ):
                listener.exitSimplifiedOverrideLeftOrRight(self)




    def simplifiedOverrideLeftOrRight(self):

        localctx = GqlParser.SimplifiedOverrideLeftOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_simplifiedOverrideLeftOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3347
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3348
            self.simplifiedSecondary()
            self.state = 3349
            self.match(GqlParser.RIGHT_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedOverrideAnyDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedSecondaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedOverrideAnyDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedOverrideAnyDirection" ):
                listener.enterSimplifiedOverrideAnyDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedOverrideAnyDirection" ):
                listener.exitSimplifiedOverrideAnyDirection(self)




    def simplifiedOverrideAnyDirection(self):

        localctx = GqlParser.SimplifiedOverrideAnyDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_simplifiedOverrideAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3351
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3352
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedSecondaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedPrimary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedPrimaryContext,0)


        def simplifiedNegation(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedNegationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedSecondary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedSecondary" ):
                listener.enterSimplifiedSecondary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedSecondary" ):
                listener.exitSimplifiedSecondary(self)




    def simplifiedSecondary(self):

        localctx = GqlParser.SimplifiedSecondaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_simplifiedSecondary)
        try:
            self.state = 3356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 402, 407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3354
                self.simplifiedPrimary()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3355
                self.simplifiedNegation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedNegationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(GqlParser.EXCLAMATION_MARK, 0)

        def simplifiedPrimary(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedPrimaryContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedNegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedNegation" ):
                listener.enterSimplifiedNegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedNegation" ):
                listener.exitSimplifiedNegation(self)




    def simplifiedNegation(self):

        localctx = GqlParser.SimplifiedNegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_simplifiedNegation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3358
            self.match(GqlParser.EXCLAMATION_MARK)
            self.state = 3359
            self.simplifiedPrimary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplifiedPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(GqlParser.LabelNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GqlParser.SimplifiedContentsContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_simplifiedPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplifiedPrimary" ):
                listener.enterSimplifiedPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplifiedPrimary" ):
                listener.exitSimplifiedPrimary(self)




    def simplifiedPrimary(self):

        localctx = GqlParser.SimplifiedPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_simplifiedPrimary)
        try:
            self.state = 3366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 402, 407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3361
                self.labelName()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3362
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3363
                self.simplifiedContents()
                self.state = 3364
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(GqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = GqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3368
            self.match(GqlParser.WHERE)
            self.state = 3369
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(GqlParser.YIELD, 0)

        def yieldItemList(self):
            return self.getTypedRuleContext(GqlParser.YieldItemListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_yieldClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldClause" ):
                listener.enterYieldClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldClause" ):
                listener.exitYieldClause(self)




    def yieldClause(self):

        localctx = GqlParser.YieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_yieldClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3371
            self.match(GqlParser.YIELD)
            self.state = 3372
            self.yieldItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.YieldItemContext)
            else:
                return self.getTypedRuleContext(GqlParser.YieldItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_yieldItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldItemList" ):
                listener.enterYieldItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldItemList" ):
                listener.exitYieldItemList(self)




    def yieldItemList(self):

        localctx = GqlParser.YieldItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_yieldItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.yieldItem()
            self.state = 3379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3375
                self.match(GqlParser.COMMA)
                self.state = 3376
                self.yieldItem()
                self.state = 3381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldItemName(self):
            return self.getTypedRuleContext(GqlParser.YieldItemNameContext,0)


        def yieldItemAlias(self):
            return self.getTypedRuleContext(GqlParser.YieldItemAliasContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_yieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldItem" ):
                listener.enterYieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldItem" ):
                listener.exitYieldItem(self)




    def yieldItem(self):

        localctx = GqlParser.YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_yieldItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self.yieldItemName()
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 3383
                self.yieldItemAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldItemNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(GqlParser.FieldNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_yieldItemName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldItemName" ):
                listener.enterYieldItemName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldItemName" ):
                listener.exitYieldItemName(self)




    def yieldItemName(self):

        localctx = GqlParser.YieldItemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_yieldItemName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3386
            self.fieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldItemAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GqlParser.BindingVariableContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_yieldItemAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldItemAlias" ):
                listener.enterYieldItemAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldItemAlias" ):
                listener.exitYieldItemAlias(self)




    def yieldItemAlias(self):

        localctx = GqlParser.YieldItemAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_yieldItemAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.match(GqlParser.AS)
            self.state = 3389
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(GqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(GqlParser.BY, 0)

        def groupingElementList(self):
            return self.getTypedRuleContext(GqlParser.GroupingElementListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = GqlParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3391
            self.match(GqlParser.GROUP)
            self.state = 3392
            self.match(GqlParser.BY)
            self.state = 3393
            self.groupingElementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(GqlParser.GroupingElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def emptyGroupingSet(self):
            return self.getTypedRuleContext(GqlParser.EmptyGroupingSetContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_groupingElementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingElementList" ):
                listener.enterGroupingElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingElementList" ):
                listener.exitGroupingElementList(self)




    def groupingElementList(self):

        localctx = GqlParser.GroupingElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_groupingElementList)
        self._la = 0 # Token type
        try:
            self.state = 3404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3395
                self.groupingElement()
                self.state = 3400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3396
                    self.match(GqlParser.COMMA)
                    self.state = 3397
                    self.groupingElement()
                    self.state = 3402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3403
                self.emptyGroupingSet()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_groupingElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingElement" ):
                listener.enterGroupingElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingElement" ):
                listener.exitGroupingElement(self)




    def groupingElement(self):

        localctx = GqlParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_groupingElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3406
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyGroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_emptyGroupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyGroupingSet" ):
                listener.enterEmptyGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyGroupingSet" ):
                listener.exitEmptyGroupingSet(self)




    def emptyGroupingSet(self):

        localctx = GqlParser.EmptyGroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_emptyGroupingSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3408
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3409
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(GqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(GqlParser.BY, 0)

        def sortSpecificationList(self):
            return self.getTypedRuleContext(GqlParser.SortSpecificationListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = GqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3411
            self.match(GqlParser.ORDER)
            self.state = 3412
            self.match(GqlParser.BY)
            self.state = 3413
            self.sortSpecificationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_aggregateFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlDistinctInGeneralFunctionContext(AggregateFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AggregateFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def generalSetFunctionType(self):
            return self.getTypedRuleContext(GqlParser.GeneralSetFunctionTypeContext,0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)

        def DISTINCT(self):
            return self.getToken(GqlParser.DISTINCT, 0)
        def BY(self):
            return self.getToken(GqlParser.BY, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlDistinctInGeneralFunction" ):
                listener.enterGqlDistinctInGeneralFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlDistinctInGeneralFunction" ):
                listener.exitGqlDistinctInGeneralFunction(self)


    class GqlCountAllFunctionContext(AggregateFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AggregateFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(GqlParser.COUNT, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def ASTERISK(self):
            return self.getToken(GqlParser.ASTERISK, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlCountAllFunction" ):
                listener.enterGqlCountAllFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlCountAllFunction" ):
                listener.exitGqlCountAllFunction(self)


    class GqlCountDistinctFunctionContext(AggregateFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AggregateFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(GqlParser.COUNT, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def DISTINCT(self):
            return self.getToken(GqlParser.DISTINCT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlCountDistinctFunction" ):
                listener.enterGqlCountDistinctFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlCountDistinctFunction" ):
                listener.exitGqlCountDistinctFunction(self)


    class GqlGeneralSetFunctionContext(AggregateFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AggregateFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def generalSetFunctionType(self):
            return self.getTypedRuleContext(GqlParser.GeneralSetFunctionTypeContext,0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(GqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlGeneralSetFunction" ):
                listener.enterGqlGeneralSetFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlGeneralSetFunction" ):
                listener.exitGqlGeneralSetFunction(self)


    class GqlBinarySetFunctionContext(AggregateFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AggregateFunctionContext
            super().__init__(parser)
            self.lhs = None # ExpressionContext
            self.rhs = None # ExpressionContext
            self.copyFrom(ctx)

        def binarySetFunctionType(self):
            return self.getTypedRuleContext(GqlParser.BinarySetFunctionTypeContext,0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(GqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBinarySetFunction" ):
                listener.enterGqlBinarySetFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBinarySetFunction" ):
                listener.exitGqlBinarySetFunction(self)


    class GqlWindowFunctionContext(AggregateFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.AggregateFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def windowClause(self):
            return self.getTypedRuleContext(GqlParser.WindowClauseContext,0)

        def generalSetFunctionType(self):
            return self.getTypedRuleContext(GqlParser.GeneralSetFunctionTypeContext,0)

        def windowFunctionType(self):
            return self.getTypedRuleContext(GqlParser.WindowFunctionTypeContext,0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlWindowFunction" ):
                listener.enterGqlWindowFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlWindowFunction" ):
                listener.exitGqlWindowFunction(self)



    def aggregateFunction(self):

        localctx = GqlParser.AggregateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_aggregateFunction)
        self._la = 0 # Token type
        try:
            self.state = 3478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlCountAllFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3415
                self.match(GqlParser.COUNT)
                self.state = 3416
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3417
                self.match(GqlParser.ASTERISK)
                self.state = 3418
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = GqlParser.GqlCountDistinctFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3419
                self.match(GqlParser.COUNT)
                self.state = 3420
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3421
                self.match(GqlParser.DISTINCT)
                self.state = 3422
                self.expression(0)
                self.state = 3425 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3423
                    self.match(GqlParser.COMMA)
                    self.state = 3424
                    self.expression(0)
                    self.state = 3427 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==5):
                        break

                self.state = 3429
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = GqlParser.GqlGeneralSetFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3431
                self.generalSetFunctionType()
                self.state = 3432
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 3433
                    self.setQuantifier()


                self.state = 3436
                self.expression(0)
                self.state = 3437
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = GqlParser.GqlBinarySetFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3439
                self.binarySetFunctionType()
                self.state = 3440
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 3441
                    self.setQuantifier()


                self.state = 3444
                localctx.lhs = self.expression(0)
                self.state = 3445
                self.match(GqlParser.COMMA)
                self.state = 3446
                localctx.rhs = self.expression(0)
                self.state = 3447
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                localctx = GqlParser.GqlWindowFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3451
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 67, 75, 125, 180, 181, 250, 251, 254]:
                    self.state = 3449
                    self.generalSetFunctionType()
                    pass
                elif token in [307, 308, 309, 310, 311]:
                    self.state = 3450
                    self.windowFunctionType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3453
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8824627904) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 36671) != 0):
                    self.state = 3455
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                    if la_ == 1:
                        self.state = 3454
                        self.setQuantifier()


                    self.state = 3457
                    self.expression(0)


                self.state = 3460
                self.match(GqlParser.RIGHT_PAREN)
                self.state = 3461
                self.windowClause()
                pass

            elif la_ == 6:
                localctx = GqlParser.GqlDistinctInGeneralFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3463
                self.generalSetFunctionType()
                self.state = 3464
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3465
                self.expression(0)
                self.state = 3466
                self.match(GqlParser.DISTINCT)
                self.state = 3467
                self.match(GqlParser.BY)
                self.state = 3468
                self.expression(0)
                self.state = 3473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 3469
                    self.match(GqlParser.COMMA)
                    self.state = 3470
                    self.expression(0)
                    self.state = 3475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3476
                self.match(GqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralSetFunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(GqlParser.AVG, 0)

        def COUNT(self):
            return self.getToken(GqlParser.COUNT, 0)

        def MAX_(self):
            return self.getToken(GqlParser.MAX_, 0)

        def MIN_(self):
            return self.getToken(GqlParser.MIN_, 0)

        def SUM(self):
            return self.getToken(GqlParser.SUM, 0)

        def COLLECT(self):
            return self.getToken(GqlParser.COLLECT, 0)

        def STDDEV_SAMP(self):
            return self.getToken(GqlParser.STDDEV_SAMP, 0)

        def STDDEV_POP(self):
            return self.getToken(GqlParser.STDDEV_POP, 0)

        def GROUP_CONCAT(self):
            return self.getToken(GqlParser.GROUP_CONCAT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_generalSetFunctionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralSetFunctionType" ):
                listener.enterGeneralSetFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralSetFunctionType" ):
                listener.exitGeneralSetFunctionType(self)




    def generalSetFunctionType(self):

        localctx = GqlParser.GeneralSetFunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_generalSetFunctionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3480
            _la = self._input.LA(1)
            if not(((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & 4311744513) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 108086391056891905) != 0) or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & 19) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(GqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(GqlParser.ALL, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = GqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3482
            _la = self._input.LA(1)
            if not(_la==31 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinarySetFunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENTILE_CONT(self):
            return self.getToken(GqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(GqlParser.PERCENTILE_DISC, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_binarySetFunctionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinarySetFunctionType" ):
                listener.enterBinarySetFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinarySetFunctionType" ):
                listener.exitBinarySetFunctionType(self)




    def binarySetFunctionType(self):

        localctx = GqlParser.BinarySetFunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_binarySetFunctionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3484
            _la = self._input.LA(1)
            if not(_la==211 or _la==212):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW_NUMBER(self):
            return self.getToken(GqlParser.ROW_NUMBER, 0)

        def RANK(self):
            return self.getToken(GqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(GqlParser.DENSE_RANK, 0)

        def CUME_DIST(self):
            return self.getToken(GqlParser.CUME_DIST, 0)

        def PERCENT_RANK(self):
            return self.getToken(GqlParser.PERCENT_RANK, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_windowFunctionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFunctionType" ):
                listener.enterWindowFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFunctionType" ):
                listener.exitWindowFunctionType(self)




    def windowFunctionType(self):

        localctx = GqlParser.WindowFunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_windowFunctionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3486
            _la = self._input.LA(1)
            if not(((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(GqlParser.OVER, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def PARTITION(self):
            return self.getToken(GqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(GqlParser.BY, 0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def orderByClause(self):
            return self.getTypedRuleContext(GqlParser.OrderByClauseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = GqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3488
            self.match(GqlParser.OVER)
            self.state = 3489
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3490
            self.match(GqlParser.PARTITION)
            self.state = 3491
            self.match(GqlParser.BY)
            self.state = 3492
            self.expressionAtom(0)
            self.state = 3497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3493
                self.match(GqlParser.COMMA)
                self.state = 3494
                self.expressionAtom(0)
                self.state = 3499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 3500
                self.orderByClause()


            self.state = 3503
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortSpecificationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SortSpecificationContext)
            else:
                return self.getTypedRuleContext(GqlParser.SortSpecificationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_sortSpecificationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortSpecificationList" ):
                listener.enterSortSpecificationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortSpecificationList" ):
                listener.exitSortSpecificationList(self)




    def sortSpecificationList(self):

        localctx = GqlParser.SortSpecificationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_sortSpecificationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3505
            self.sortSpecification()
            self.state = 3510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3506
                self.match(GqlParser.COMMA)
                self.state = 3507
                self.sortSpecification()
                self.state = 3512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortKey(self):
            return self.getTypedRuleContext(GqlParser.SortKeyContext,0)


        def orderingSpecification(self):
            return self.getTypedRuleContext(GqlParser.OrderingSpecificationContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(GqlParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sortSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortSpecification" ):
                listener.enterSortSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortSpecification" ):
                listener.exitSortSpecification(self)




    def sortSpecification(self):

        localctx = GqlParser.SortSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_sortSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3513
            self.sortKey()
            self.state = 3515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 13510798882111491) != 0):
                self.state = 3514
                self.orderingSpecification()


            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 3517
                self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sortKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortKey" ):
                listener.enterSortKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortKey" ):
                listener.exitSortKey(self)




    def sortKey(self):

        localctx = GqlParser.SortKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_sortKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3520
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderingSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(GqlParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(GqlParser.ASCENDING, 0)

        def DESC(self):
            return self.getToken(GqlParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(GqlParser.DESCENDING, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_orderingSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderingSpecification" ):
                listener.enterOrderingSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderingSpecification" ):
                listener.exitOrderingSpecification(self)




    def orderingSpecification(self):

        localctx = GqlParser.OrderingSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_orderingSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3522
            _la = self._input.LA(1)
            if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 13510798882111491) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(GqlParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(GqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(GqlParser.LAST, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nullOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullOrdering" ):
                listener.enterNullOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullOrdering" ):
                listener.exitNullOrdering(self)




    def nullOrdering(self):

        localctx = GqlParser.NullOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_nullOrdering)
        try:
            self.state = 3528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3524
                self.match(GqlParser.NULLS)
                self.state = 3525
                self.match(GqlParser.FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3526
                self.match(GqlParser.NULLS)
                self.state = 3527
                self.match(GqlParser.LAST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(GqlParser.LIMIT, 0)

        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = GqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3530
            self.match(GqlParser.LIMIT)
            self.state = 3531
            self.unsignedIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def offsetSynonym(self):
            return self.getTypedRuleContext(GqlParser.OffsetSynonymContext,0)


        def unsignedIntegerSpecification(self):
            return self.getTypedRuleContext(GqlParser.UnsignedIntegerSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_offsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetClause" ):
                listener.enterOffsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetClause" ):
                listener.exitOffsetClause(self)




    def offsetClause(self):

        localctx = GqlParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_offsetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3533
            self.offsetSynonym()
            self.state = 3534
            self.unsignedIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetSynonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(GqlParser.OFFSET, 0)

        def SKIP_(self):
            return self.getToken(GqlParser.SKIP_, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_offsetSynonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetSynonym" ):
                listener.enterOffsetSynonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetSynonym" ):
                listener.exitOffsetSynonym(self)




    def offsetSynonym(self):

        localctx = GqlParser.OffsetSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_offsetSynonym)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3536
            _la = self._input.LA(1)
            if not(_la==198 or _la==244):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedGraphTypeSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def graphTypeSpecificationBody(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeSpecificationBodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nestedGraphTypeSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedGraphTypeSpecification" ):
                listener.enterNestedGraphTypeSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedGraphTypeSpecification" ):
                listener.exitNestedGraphTypeSpecification(self)




    def nestedGraphTypeSpecification(self):

        localctx = GqlParser.NestedGraphTypeSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_nestedGraphTypeSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3538
            self.match(GqlParser.LEFT_BRACE)
            self.state = 3539
            self.graphTypeSpecificationBody()
            self.state = 3540
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphTypeSpecificationBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeDefinitionList(self):
            return self.getTypedRuleContext(GqlParser.ElementTypeDefinitionListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphTypeSpecificationBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphTypeSpecificationBody" ):
                listener.enterGraphTypeSpecificationBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphTypeSpecificationBody" ):
                listener.exitGraphTypeSpecificationBody(self)




    def graphTypeSpecificationBody(self):

        localctx = GqlParser.GraphTypeSpecificationBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_graphTypeSpecificationBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3542
            self.elementTypeDefinitionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ElementTypeDefinitionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ElementTypeDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_elementTypeDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementTypeDefinitionList" ):
                listener.enterElementTypeDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementTypeDefinitionList" ):
                listener.exitElementTypeDefinitionList(self)




    def elementTypeDefinitionList(self):

        localctx = GqlParser.ElementTypeDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_elementTypeDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3544
            self.elementTypeDefinition()
            self.state = 3549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3545
                self.match(GqlParser.COMMA)
                self.state = 3546
                self.elementTypeDefinition()
                self.state = 3551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeDefinition(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeDefinitionContext,0)


        def edgeTypeDefinition(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elementTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementTypeDefinition" ):
                listener.enterElementTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementTypeDefinition" ):
                listener.exitElementTypeDefinition(self)




    def elementTypeDefinition(self):

        localctx = GqlParser.ElementTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_elementTypeDefinition)
        try:
            self.state = 3554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3552
                self.nodeTypeDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3553
                self.edgeTypeDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypePattern(self):
            return self.getTypedRuleContext(GqlParser.NodeTypePatternContext,0)


        def NODE_SYNONYM(self):
            return self.getToken(GqlParser.NODE_SYNONYM, 0)

        def nodeTypePhrase(self):
            return self.getTypedRuleContext(GqlParser.NodeTypePhraseContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypeDefinition" ):
                listener.enterNodeTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypeDefinition" ):
                listener.exitNodeTypeDefinition(self)




    def nodeTypeDefinition(self):

        localctx = GqlParser.NodeTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_nodeTypeDefinition)
        try:
            self.state = 3559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3556
                self.nodeTypePattern()
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3557
                self.match(GqlParser.NODE_SYNONYM)
                self.state = 3558
                self.nodeTypePhrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def nodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeNameContext,0)


        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypePattern" ):
                listener.enterNodeTypePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypePattern" ):
                listener.exitNodeTypePattern(self)




    def nodeTypePattern(self):

        localctx = GqlParser.NodeTypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_nodeTypePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 3562
                self.nodeTypeName()


            self.state = 3566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==10 or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & 21) != 0):
                self.state = 3565
                self.nodeTypeFiller()


            self.state = 3568
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeNameContext,0)


        def TYPE(self):
            return self.getToken(GqlParser.TYPE, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypePhrase" ):
                listener.enterNodeTypePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypePhrase" ):
                listener.exitNodeTypePhrase(self)




    def nodeTypePhrase(self):

        localctx = GqlParser.NodeTypePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_nodeTypePhrase)
        try:
            self.state = 3578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 3570
                    self.match(GqlParser.TYPE)


                self.state = 3573
                self.nodeTypeName()
                self.state = 3575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 3574
                    self.nodeTypeFiller()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3577
                self.nodeTypeFiller()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeName(self):
            return self.getTypedRuleContext(GqlParser.ElementTypeNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypeName" ):
                listener.enterNodeTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypeName" ):
                listener.exitNodeTypeName(self)




    def nodeTypeName(self):

        localctx = GqlParser.NodeTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_nodeTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3580
            self.elementTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypeFillerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeLabelSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeLabelSetDefinitionContext,0)


        def nodeTypePropertyTypeSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.NodeTypePropertyTypeSetDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypeFiller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypeFiller" ):
                listener.enterNodeTypeFiller(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypeFiller" ):
                listener.exitNodeTypeFiller(self)




    def nodeTypeFiller(self):

        localctx = GqlParser.NodeTypeFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_nodeTypeFiller)
        try:
            self.state = 3587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3582
                self.nodeTypeLabelSetDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3583
                self.nodeTypePropertyTypeSetDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3584
                self.nodeTypeLabelSetDefinition()
                self.state = 3585
                self.nodeTypePropertyTypeSetDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypeLabelSetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.LabelSetDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypeLabelSetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypeLabelSetDefinition" ):
                listener.enterNodeTypeLabelSetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypeLabelSetDefinition" ):
                listener.exitNodeTypeLabelSetDefinition(self)




    def nodeTypeLabelSetDefinition(self):

        localctx = GqlParser.NodeTypeLabelSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_nodeTypeLabelSetDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3589
            self.labelSetDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypePropertyTypeSetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyTypeSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.PropertyTypeSetDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypePropertyTypeSetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypePropertyTypeSetDefinition" ):
                listener.enterNodeTypePropertyTypeSetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypePropertyTypeSetDefinition" ):
                listener.exitNodeTypePropertyTypeSetDefinition(self)




    def nodeTypePropertyTypeSetDefinition(self):

        localctx = GqlParser.NodeTypePropertyTypeSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_nodeTypePropertyTypeSetDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.propertyTypeSetDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypePattern(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypePatternContext,0)


        def EDGE_SYNONYM(self):
            return self.getToken(GqlParser.EDGE_SYNONYM, 0)

        def edgeTypePhrase(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypePhraseContext,0)


        def edgeKind(self):
            return self.getTypedRuleContext(GqlParser.EdgeKindContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypeDefinition" ):
                listener.enterEdgeTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypeDefinition" ):
                listener.exitEdgeTypeDefinition(self)




    def edgeTypeDefinition(self):

        localctx = GqlParser.EdgeTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_edgeTypeDefinition)
        self._la = 0 # Token type
        try:
            self.state = 3599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3593
                self.edgeTypePattern()
                pass
            elif token in [95, 279, 324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95 or _la==279:
                    self.state = 3594
                    self.edgeKind()


                self.state = 3597
                self.match(GqlParser.EDGE_SYNONYM)
                self.state = 3598
                self.edgeTypePhrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullEdgeTypePattern(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeTypePatternContext,0)


        def abbreviatedEdgeTypePattern(self):
            return self.getTypedRuleContext(GqlParser.AbbreviatedEdgeTypePatternContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypePattern" ):
                listener.enterEdgeTypePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypePattern" ):
                listener.exitEdgeTypePattern(self)




    def edgeTypePattern(self):

        localctx = GqlParser.EdgeTypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_edgeTypePattern)
        try:
            self.state = 3603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3601
                self.fullEdgeTypePattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3602
                self.abbreviatedEdgeTypePattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeName(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeNameContext,0)


        def TYPE(self):
            return self.getToken(GqlParser.TYPE, 0)

        def edgeTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeFillerContext,0)


        def endpointDefinition(self):
            return self.getTypedRuleContext(GqlParser.EndpointDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypePhrase" ):
                listener.enterEdgeTypePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypePhrase" ):
                listener.exitEdgeTypePhrase(self)




    def edgeTypePhrase(self):

        localctx = GqlParser.EdgeTypePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_edgeTypePhrase)
        try:
            self.state = 3617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 3605
                    self.match(GqlParser.TYPE)


                self.state = 3608
                self.edgeTypeName()
                self.state = 3612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3609
                    self.edgeTypeFiller()
                    self.state = 3610
                    self.endpointDefinition()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3614
                self.edgeTypeFiller()
                self.state = 3615
                self.endpointDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeName(self):
            return self.getTypedRuleContext(GqlParser.ElementTypeNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypeName" ):
                listener.enterEdgeTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypeName" ):
                listener.exitEdgeTypeName(self)




    def edgeTypeName(self):

        localctx = GqlParser.EdgeTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_edgeTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3619
            self.elementTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypeFillerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeLabelSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeLabelSetDefinitionContext,0)


        def edgeTypePropertyTypeSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypePropertyTypeSetDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypeFiller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypeFiller" ):
                listener.enterEdgeTypeFiller(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypeFiller" ):
                listener.exitEdgeTypeFiller(self)




    def edgeTypeFiller(self):

        localctx = GqlParser.EdgeTypeFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_edgeTypeFiller)
        try:
            self.state = 3626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3621
                self.edgeTypeLabelSetDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3622
                self.edgeTypePropertyTypeSetDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3623
                self.edgeTypeLabelSetDefinition()
                self.state = 3624
                self.edgeTypePropertyTypeSetDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypeLabelSetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.LabelSetDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypeLabelSetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypeLabelSetDefinition" ):
                listener.enterEdgeTypeLabelSetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypeLabelSetDefinition" ):
                listener.exitEdgeTypeLabelSetDefinition(self)




    def edgeTypeLabelSetDefinition(self):

        localctx = GqlParser.EdgeTypeLabelSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_edgeTypeLabelSetDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3628
            self.labelSetDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeTypePropertyTypeSetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyTypeSetDefinition(self):
            return self.getTypedRuleContext(GqlParser.PropertyTypeSetDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeTypePropertyTypeSetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeTypePropertyTypeSetDefinition" ):
                listener.enterEdgeTypePropertyTypeSetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeTypePropertyTypeSetDefinition" ):
                listener.exitEdgeTypePropertyTypeSetDefinition(self)




    def edgeTypePropertyTypeSetDefinition(self):

        localctx = GqlParser.EdgeTypePropertyTypeSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_edgeTypePropertyTypeSetDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3630
            self.propertyTypeSetDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeTypePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullEdgeTypePatternPointingRight(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeTypePatternPointingRightContext,0)


        def fullEdgeTypePatternPointingLeft(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeTypePatternPointingLeftContext,0)


        def fullEdgeTypePatternUndirected(self):
            return self.getTypedRuleContext(GqlParser.FullEdgeTypePatternUndirectedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeTypePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeTypePattern" ):
                listener.enterFullEdgeTypePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeTypePattern" ):
                listener.exitFullEdgeTypePattern(self)




    def fullEdgeTypePattern(self):

        localctx = GqlParser.FullEdgeTypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_fullEdgeTypePattern)
        try:
            self.state = 3635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3632
                self.fullEdgeTypePatternPointingRight()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3633
                self.fullEdgeTypePatternPointingLeft()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3634
                self.fullEdgeTypePatternUndirected()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeTypePatternPointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def arcTypePointingRight(self):
            return self.getTypedRuleContext(GqlParser.ArcTypePointingRightContext,0)


        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeTypePatternPointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeTypePatternPointingRight" ):
                listener.enterFullEdgeTypePatternPointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeTypePatternPointingRight" ):
                listener.exitFullEdgeTypePatternPointingRight(self)




    def fullEdgeTypePatternPointingRight(self):

        localctx = GqlParser.FullEdgeTypePatternPointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_fullEdgeTypePatternPointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3637
            self.sourceNodeTypeReference()
            self.state = 3638
            self.arcTypePointingRight()
            self.state = 3639
            self.destinationNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeTypePatternPointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def arcTypePointingLeft(self):
            return self.getTypedRuleContext(GqlParser.ArcTypePointingLeftContext,0)


        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeTypePatternPointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeTypePatternPointingLeft" ):
                listener.enterFullEdgeTypePatternPointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeTypePatternPointingLeft" ):
                listener.exitFullEdgeTypePatternPointingLeft(self)




    def fullEdgeTypePatternPointingLeft(self):

        localctx = GqlParser.FullEdgeTypePatternPointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_fullEdgeTypePatternPointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3641
            self.destinationNodeTypeReference()
            self.state = 3642
            self.arcTypePointingLeft()
            self.state = 3643
            self.sourceNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullEdgeTypePatternUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def arcTypeUndirected(self):
            return self.getTypedRuleContext(GqlParser.ArcTypeUndirectedContext,0)


        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fullEdgeTypePatternUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullEdgeTypePatternUndirected" ):
                listener.enterFullEdgeTypePatternUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullEdgeTypePatternUndirected" ):
                listener.exitFullEdgeTypePatternUndirected(self)




    def fullEdgeTypePatternUndirected(self):

        localctx = GqlParser.FullEdgeTypePatternUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_fullEdgeTypePatternUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3645
            self.sourceNodeTypeReference()
            self.state = 3646
            self.arcTypeUndirected()
            self.state = 3647
            self.destinationNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArcTypePointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def arcTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.ArcTypeFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_arcTypePointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcTypePointingRight" ):
                listener.enterArcTypePointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcTypePointingRight" ):
                listener.exitArcTypePointingRight(self)




    def arcTypePointingRight(self):

        localctx = GqlParser.ArcTypePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_arcTypePointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3650
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3651
            self.arcTypeFiller()
            self.state = 3652
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3653
            self.match(GqlParser.RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArcTypePointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.MINUS_SIGN)
            else:
                return self.getToken(GqlParser.MINUS_SIGN, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def arcTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.ArcTypeFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_arcTypePointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcTypePointingLeft" ):
                listener.enterArcTypePointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcTypePointingLeft" ):
                listener.exitArcTypePointingLeft(self)




    def arcTypePointingLeft(self):

        localctx = GqlParser.ArcTypePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_arcTypePointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3656
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3657
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3658
            self.arcTypeFiller()
            self.state = 3659
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3660
            self.match(GqlParser.MINUS_SIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArcTypeUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.TILDE)
            else:
                return self.getToken(GqlParser.TILDE, i)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def arcTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.ArcTypeFillerContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_arcTypeUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcTypeUndirected" ):
                listener.enterArcTypeUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcTypeUndirected" ):
                listener.exitArcTypeUndirected(self)




    def arcTypeUndirected(self):

        localctx = GqlParser.ArcTypeUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_arcTypeUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3662
            self.match(GqlParser.TILDE)
            self.state = 3663
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 3664
            self.arcTypeFiller()
            self.state = 3665
            self.match(GqlParser.RIGHT_BRACKET)
            self.state = 3666
            self.match(GqlParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArcTypeFillerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeName(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeNameContext,0)


        def edgeTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_arcTypeFiller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcTypeFiller" ):
                listener.enterArcTypeFiller(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcTypeFiller" ):
                listener.exitArcTypeFiller(self)




    def arcTypeFiller(self):

        localctx = GqlParser.ArcTypeFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_arcTypeFiller)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 3668
                self.edgeTypeName()


            self.state = 3672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==10 or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & 21) != 0):
                self.state = 3671
                self.edgeTypeFiller()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbbreviatedEdgeTypePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abbreviatedEdgeTypePatternPointingRight(self):
            return self.getTypedRuleContext(GqlParser.AbbreviatedEdgeTypePatternPointingRightContext,0)


        def abbreviatedEdgeTypePatternPointingLeft(self):
            return self.getTypedRuleContext(GqlParser.AbbreviatedEdgeTypePatternPointingLeftContext,0)


        def abbreviatedEdgeTypePatternUndirected(self):
            return self.getTypedRuleContext(GqlParser.AbbreviatedEdgeTypePatternUndirectedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_abbreviatedEdgeTypePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeTypePattern" ):
                listener.enterAbbreviatedEdgeTypePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeTypePattern" ):
                listener.exitAbbreviatedEdgeTypePattern(self)




    def abbreviatedEdgeTypePattern(self):

        localctx = GqlParser.AbbreviatedEdgeTypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_abbreviatedEdgeTypePattern)
        try:
            self.state = 3677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3674
                self.abbreviatedEdgeTypePatternPointingRight()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3675
                self.abbreviatedEdgeTypePatternPointingLeft()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3676
                self.abbreviatedEdgeTypePatternUndirected()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbbreviatedEdgeTypePatternPointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_abbreviatedEdgeTypePatternPointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeTypePatternPointingRight" ):
                listener.enterAbbreviatedEdgeTypePatternPointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeTypePatternPointingRight" ):
                listener.exitAbbreviatedEdgeTypePatternPointingRight(self)




    def abbreviatedEdgeTypePatternPointingRight(self):

        localctx = GqlParser.AbbreviatedEdgeTypePatternPointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_abbreviatedEdgeTypePatternPointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3679
            self.sourceNodeTypeReference()
            self.state = 3680
            self.match(GqlParser.RIGHT_ARROW)
            self.state = 3681
            self.destinationNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbbreviatedEdgeTypePatternPointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_abbreviatedEdgeTypePatternPointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeTypePatternPointingLeft" ):
                listener.enterAbbreviatedEdgeTypePatternPointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeTypePatternPointingLeft" ):
                listener.exitAbbreviatedEdgeTypePatternPointingLeft(self)




    def abbreviatedEdgeTypePatternPointingLeft(self):

        localctx = GqlParser.AbbreviatedEdgeTypePatternPointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_abbreviatedEdgeTypePatternPointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3683
            self.destinationNodeTypeReference()
            self.state = 3684
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3685
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3686
            self.sourceNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbbreviatedEdgeTypePatternUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_abbreviatedEdgeTypePatternUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviatedEdgeTypePatternUndirected" ):
                listener.enterAbbreviatedEdgeTypePatternUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviatedEdgeTypePatternUndirected" ):
                listener.exitAbbreviatedEdgeTypePatternUndirected(self)




    def abbreviatedEdgeTypePatternUndirected(self):

        localctx = GqlParser.AbbreviatedEdgeTypePatternUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_abbreviatedEdgeTypePatternUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            self.sourceNodeTypeReference()
            self.state = 3689
            self.match(GqlParser.TILDE)
            self.state = 3690
            self.destinationNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeTypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeReferenceContext,0)


        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeTypeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeTypeReference" ):
                listener.enterNodeTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeTypeReference" ):
                listener.exitNodeTypeReference(self)




    def nodeTypeReference(self):

        localctx = GqlParser.NodeTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_nodeTypeReference)
        try:
            self.state = 3694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3692
                self.sourceNodeTypeReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3693
                self.destinationNodeTypeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceNodeTypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def sourceNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeNameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sourceNodeTypeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceNodeTypeReference" ):
                listener.enterSourceNodeTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceNodeTypeReference" ):
                listener.exitSourceNodeTypeReference(self)




    def sourceNodeTypeReference(self):

        localctx = GqlParser.SourceNodeTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_sourceNodeTypeReference)
        self._la = 0 # Token type
        try:
            self.state = 3705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3696
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3697
                self.sourceNodeTypeName()
                self.state = 3698
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3700
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==10 or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & 21) != 0):
                    self.state = 3701
                    self.nodeTypeFiller()


                self.state = 3704
                self.match(GqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationNodeTypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def destinationNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeNameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeFillerContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_destinationNodeTypeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestinationNodeTypeReference" ):
                listener.enterDestinationNodeTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestinationNodeTypeReference" ):
                listener.exitDestinationNodeTypeReference(self)




    def destinationNodeTypeReference(self):

        localctx = GqlParser.DestinationNodeTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_destinationNodeTypeReference)
        self._la = 0 # Token type
        try:
            self.state = 3716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3707
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3708
                self.destinationNodeTypeName()
                self.state = 3709
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3711
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==10 or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & 21) != 0):
                    self.state = 3712
                    self.nodeTypeFiller()


                self.state = 3715
                self.match(GqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIRECTED(self):
            return self.getToken(GqlParser.DIRECTED, 0)

        def UNDIRECTED(self):
            return self.getToken(GqlParser.UNDIRECTED, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_edgeKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeKind" ):
                listener.enterEdgeKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeKind" ):
                listener.exitEdgeKind(self)




    def edgeKind(self):

        localctx = GqlParser.EdgeKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_edgeKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3718
            _la = self._input.LA(1)
            if not(_la==95 or _la==279):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndpointDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECTING(self):
            return self.getToken(GqlParser.CONNECTING, 0)

        def endpointPairDefinition(self):
            return self.getTypedRuleContext(GqlParser.EndpointPairDefinitionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_endpointDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpointDefinition" ):
                listener.enterEndpointDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpointDefinition" ):
                listener.exitEndpointDefinition(self)




    def endpointDefinition(self):

        localctx = GqlParser.EndpointDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_endpointDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3720
            self.match(GqlParser.CONNECTING)
            self.state = 3721
            self.endpointPairDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndpointPairDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endpointPairDefinitionPointingRight(self):
            return self.getTypedRuleContext(GqlParser.EndpointPairDefinitionPointingRightContext,0)


        def endpointPairDefinitionPointingLeft(self):
            return self.getTypedRuleContext(GqlParser.EndpointPairDefinitionPointingLeftContext,0)


        def endpointPairDefinitionUndirected(self):
            return self.getTypedRuleContext(GqlParser.EndpointPairDefinitionUndirectedContext,0)


        def abbreviatedEdgeTypePattern(self):
            return self.getTypedRuleContext(GqlParser.AbbreviatedEdgeTypePatternContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_endpointPairDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpointPairDefinition" ):
                listener.enterEndpointPairDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpointPairDefinition" ):
                listener.exitEndpointPairDefinition(self)




    def endpointPairDefinition(self):

        localctx = GqlParser.EndpointPairDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_endpointPairDefinition)
        try:
            self.state = 3727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3723
                self.endpointPairDefinitionPointingRight()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3724
                self.endpointPairDefinitionPointingLeft()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3725
                self.endpointPairDefinitionUndirected()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3726
                self.abbreviatedEdgeTypePattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndpointPairDefinitionPointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def sourceNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeNameContext,0)


        def connectorPointingRight(self):
            return self.getTypedRuleContext(GqlParser.ConnectorPointingRightContext,0)


        def destinationNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeNameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_endpointPairDefinitionPointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpointPairDefinitionPointingRight" ):
                listener.enterEndpointPairDefinitionPointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpointPairDefinitionPointingRight" ):
                listener.exitEndpointPairDefinitionPointingRight(self)




    def endpointPairDefinitionPointingRight(self):

        localctx = GqlParser.EndpointPairDefinitionPointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_endpointPairDefinitionPointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3729
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3730
            self.sourceNodeTypeName()
            self.state = 3731
            self.connectorPointingRight()
            self.state = 3732
            self.destinationNodeTypeName()
            self.state = 3733
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndpointPairDefinitionPointingLeftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def destinationNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeNameContext,0)


        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def sourceNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeNameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_endpointPairDefinitionPointingLeft

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpointPairDefinitionPointingLeft" ):
                listener.enterEndpointPairDefinitionPointingLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpointPairDefinitionPointingLeft" ):
                listener.exitEndpointPairDefinitionPointingLeft(self)




    def endpointPairDefinitionPointingLeft(self):

        localctx = GqlParser.EndpointPairDefinitionPointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_endpointPairDefinitionPointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3735
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3736
            self.destinationNodeTypeName()
            self.state = 3737
            self.match(GqlParser.LEFT_ANGLE_BRACKET)
            self.state = 3738
            self.match(GqlParser.MINUS_SIGN)
            self.state = 3739
            self.sourceNodeTypeName()
            self.state = 3740
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndpointPairDefinitionUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def sourceNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.SourceNodeTypeNameContext,0)


        def connectorUndirected(self):
            return self.getTypedRuleContext(GqlParser.ConnectorUndirectedContext,0)


        def destinationNodeTypeName(self):
            return self.getTypedRuleContext(GqlParser.DestinationNodeTypeNameContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_endpointPairDefinitionUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpointPairDefinitionUndirected" ):
                listener.enterEndpointPairDefinitionUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpointPairDefinitionUndirected" ):
                listener.exitEndpointPairDefinitionUndirected(self)




    def endpointPairDefinitionUndirected(self):

        localctx = GqlParser.EndpointPairDefinitionUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_endpointPairDefinitionUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3742
            self.match(GqlParser.LEFT_PAREN)
            self.state = 3743
            self.sourceNodeTypeName()
            self.state = 3744
            self.connectorUndirected()
            self.state = 3745
            self.destinationNodeTypeName()
            self.state = 3746
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectorPointingRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(GqlParser.TO, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GqlParser.RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_connectorPointingRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectorPointingRight" ):
                listener.enterConnectorPointingRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectorPointingRight" ):
                listener.exitConnectorPointingRight(self)




    def connectorPointingRight(self):

        localctx = GqlParser.ConnectorPointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_connectorPointingRight)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3748
            _la = self._input.LA(1)
            if not(_la==263 or _la==371):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectorUndirectedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(GqlParser.TO, 0)

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_connectorUndirected

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectorUndirected" ):
                listener.enterConnectorUndirected(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectorUndirected" ):
                listener.exitConnectorUndirected(self)




    def connectorUndirected(self):

        localctx = GqlParser.ConnectorUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_connectorUndirected)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3750
            _la = self._input.LA(1)
            if not(_la==25 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceNodeTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeName(self):
            return self.getTypedRuleContext(GqlParser.ElementTypeNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_sourceNodeTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceNodeTypeName" ):
                listener.enterSourceNodeTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceNodeTypeName" ):
                listener.exitSourceNodeTypeName(self)




    def sourceNodeTypeName(self):

        localctx = GqlParser.SourceNodeTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_sourceNodeTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3752
            self.elementTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationNodeTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeName(self):
            return self.getTypedRuleContext(GqlParser.ElementTypeNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_destinationNodeTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestinationNodeTypeName" ):
                listener.enterDestinationNodeTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestinationNodeTypeName" ):
                listener.exitDestinationNodeTypeName(self)




    def destinationNodeTypeName(self):

        localctx = GqlParser.DestinationNodeTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_destinationNodeTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3754
            self.elementTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelSetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(GqlParser.LABEL, 0)

        def labelName(self):
            return self.getTypedRuleContext(GqlParser.LabelNameContext,0)


        def LABELS(self):
            return self.getToken(GqlParser.LABELS, 0)

        def labelSetSpecification(self):
            return self.getTypedRuleContext(GqlParser.LabelSetSpecificationContext,0)


        def isOrColon(self):
            return self.getTypedRuleContext(GqlParser.IsOrColonContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_labelSetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelSetDefinition" ):
                listener.enterLabelSetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelSetDefinition" ):
                listener.exitLabelSetDefinition(self)




    def labelSetDefinition(self):

        localctx = GqlParser.LabelSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_labelSetDefinition)
        try:
            self.state = 3763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3756
                self.match(GqlParser.LABEL)
                self.state = 3757
                self.labelName()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3758
                self.match(GqlParser.LABELS)
                self.state = 3759
                self.labelSetSpecification()
                pass
            elif token in [4, 154]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3760
                self.isOrColon()
                self.state = 3761
                self.labelSetSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyTypeSetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def propertyTypeDefinitionList(self):
            return self.getTypedRuleContext(GqlParser.PropertyTypeDefinitionListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_propertyTypeSetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyTypeSetDefinition" ):
                listener.enterPropertyTypeSetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyTypeSetDefinition" ):
                listener.exitPropertyTypeSetDefinition(self)




    def propertyTypeSetDefinition(self):

        localctx = GqlParser.PropertyTypeSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_propertyTypeSetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.match(GqlParser.LEFT_BRACE)
            self.state = 3767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 3766
                self.propertyTypeDefinitionList()


            self.state = 3769
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyTypeDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyTypeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.PropertyTypeDefinitionContext)
            else:
                return self.getTypedRuleContext(GqlParser.PropertyTypeDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_propertyTypeDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyTypeDefinitionList" ):
                listener.enterPropertyTypeDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyTypeDefinitionList" ):
                listener.exitPropertyTypeDefinitionList(self)




    def propertyTypeDefinitionList(self):

        localctx = GqlParser.PropertyTypeDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_propertyTypeDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3771
            self.propertyTypeDefinition()
            self.state = 3776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 3772
                self.match(GqlParser.COMMA)
                self.state = 3773
                self.propertyTypeDefinition()
                self.state = 3778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)


        def propertyValueType(self):
            return self.getTypedRuleContext(GqlParser.PropertyValueTypeContext,0)


        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_propertyTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyTypeDefinition" ):
                listener.enterPropertyTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyTypeDefinition" ):
                listener.exitPropertyTypeDefinition(self)




    def propertyTypeDefinition(self):

        localctx = GqlParser.PropertyTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_propertyTypeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3779
            self.propertyName()
            self.state = 3781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270 or _la==360:
                self.state = 3780
                self.typed()


            self.state = 3783
            self.propertyValueType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueType(self):
            return self.getTypedRuleContext(GqlParser.ValueTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_propertyValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyValueType" ):
                listener.enterPropertyValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyValueType" ):
                listener.exitPropertyValueType(self)




    def propertyValueType(self):

        localctx = GqlParser.PropertyValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_propertyValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3785
            self.valueType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(GqlParser.TABLE, 0)

        def fieldTypesSpecification(self):
            return self.getTypedRuleContext(GqlParser.FieldTypesSpecificationContext,0)


        def BINDING(self):
            return self.getToken(GqlParser.BINDING, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableType" ):
                listener.enterBindingTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableType" ):
                listener.exitBindingTableType(self)




    def bindingTableType(self):

        localctx = GqlParser.BindingTableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_bindingTableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 3787
                self.match(GqlParser.BINDING)


            self.state = 3790
            self.match(GqlParser.TABLE)
            self.state = 3791
            self.fieldTypesSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_valueType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DynamicPropertyValueTypeContext(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)
        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)
        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)
        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicPropertyValueType" ):
                listener.enterDynamicPropertyValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicPropertyValueType" ):
                listener.exitDynamicPropertyValueType(self)


    class PredefTypeContext(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefinedType(self):
            return self.getTypedRuleContext(GqlParser.PredefinedTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefType" ):
                listener.enterPredefType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefType" ):
                listener.exitPredefType(self)


    class ListType1Context(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GqlParser.ListValueTypeNameContext,0)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)
        def valueType(self):
            return self.getTypedRuleContext(GqlParser.ValueTypeContext,0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0)
        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)
        def maxLength(self):
            return self.getTypedRuleContext(GqlParser.MaxLengthContext,0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)
        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType1" ):
                listener.enterListType1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType1" ):
                listener.exitListType1(self)


    class RecordType1Context(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RECORD(self):
            return self.getToken(GqlParser.RECORD, 0)
        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)
        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordType1" ):
                listener.enterRecordType1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordType1" ):
                listener.exitRecordType1(self)


    class ClosedDynamicUnionType2Context(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ValueTypeContext)
            else:
                return self.getTypedRuleContext(GqlParser.ValueTypeContext,i)

        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.VERTICAL_BAR)
            else:
                return self.getToken(GqlParser.VERTICAL_BAR, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosedDynamicUnionType2" ):
                listener.enterClosedDynamicUnionType2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosedDynamicUnionType2" ):
                listener.exitClosedDynamicUnionType2(self)


    class RecordType2Context(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fieldTypesSpecification(self):
            return self.getTypedRuleContext(GqlParser.FieldTypesSpecificationContext,0)

        def RECORD(self):
            return self.getToken(GqlParser.RECORD, 0)
        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordType2" ):
                listener.enterRecordType2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordType2" ):
                listener.exitRecordType2(self)


    class ListType2Context(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueType(self):
            return self.getTypedRuleContext(GqlParser.ValueTypeContext,0)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GqlParser.ListValueTypeNameContext,0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)
        def maxLength(self):
            return self.getTypedRuleContext(GqlParser.MaxLengthContext,0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)
        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType2" ):
                listener.enterListType2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType2" ):
                listener.exitListType2(self)


    class PathTypeContext(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathValueType(self):
            return self.getTypedRuleContext(GqlParser.PathValueTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathType" ):
                listener.enterPathType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathType" ):
                listener.exitPathType(self)


    class OpenDynamicUnionTypeContext(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)
        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)
        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenDynamicUnionType" ):
                listener.enterOpenDynamicUnionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenDynamicUnionType" ):
                listener.exitOpenDynamicUnionType(self)


    class ClosedDynamicUnionType1Context(ValueTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)
        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)
        def valueType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ValueTypeContext)
            else:
                return self.getTypedRuleContext(GqlParser.ValueTypeContext,i)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0)
        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)
        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.VERTICAL_BAR)
            else:
                return self.getToken(GqlParser.VERTICAL_BAR, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosedDynamicUnionType1" ):
                listener.enterClosedDynamicUnionType1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosedDynamicUnionType1" ):
                listener.exitClosedDynamicUnionType1(self)



    def valueType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GqlParser.ValueTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 876
        self.enterRecursionRule(localctx, 876, self.RULE_valueType, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                localctx = GqlParser.PredefTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3794
                self.predefinedType()
                pass

            elif la_ == 2:
                localctx = GqlParser.PathTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3795
                self.pathValueType()
                pass

            elif la_ == 3:
                localctx = GqlParser.ListType1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3796
                self.listValueTypeName()
                self.state = 3797
                self.match(GqlParser.LEFT_ANGLE_BRACKET)
                self.state = 3798
                self.valueType(0)
                self.state = 3799
                self.match(GqlParser.RIGHT_ANGLE_BRACKET)
                self.state = 3804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                if la_ == 1:
                    self.state = 3800
                    self.match(GqlParser.LEFT_BRACKET)
                    self.state = 3801
                    self.maxLength()
                    self.state = 3802
                    self.match(GqlParser.RIGHT_BRACKET)


                self.state = 3807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 3806
                    self.notNull()


                pass

            elif la_ == 4:
                localctx = GqlParser.RecordType1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 3809
                    self.match(GqlParser.ANY)


                self.state = 3812
                self.match(GqlParser.RECORD)
                self.state = 3814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 3813
                    self.notNull()


                pass

            elif la_ == 5:
                localctx = GqlParser.RecordType2Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 3816
                    self.match(GqlParser.RECORD)


                self.state = 3819
                self.fieldTypesSpecification()
                self.state = 3821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 3820
                    self.notNull()


                pass

            elif la_ == 6:
                localctx = GqlParser.OpenDynamicUnionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3823
                self.match(GqlParser.ANY)
                self.state = 3825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 3824
                    self.match(GqlParser.VALUE)


                self.state = 3828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 3827
                    self.notNull()


                pass

            elif la_ == 7:
                localctx = GqlParser.DynamicPropertyValueTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 3830
                    self.match(GqlParser.ANY)


                self.state = 3833
                self.match(GqlParser.PROPERTY)
                self.state = 3834
                self.match(GqlParser.VALUE)
                self.state = 3836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 3835
                    self.notNull()


                pass

            elif la_ == 8:
                localctx = GqlParser.ClosedDynamicUnionType1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3838
                self.match(GqlParser.ANY)
                self.state = 3840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 3839
                    self.match(GqlParser.VALUE)


                self.state = 3842
                self.match(GqlParser.LEFT_ANGLE_BRACKET)
                self.state = 3843
                self.valueType(0)
                self.state = 3848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 3844
                    self.match(GqlParser.VERTICAL_BAR)
                    self.state = 3845
                    self.valueType(0)
                    self.state = 3850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3851
                self.match(GqlParser.RIGHT_ANGLE_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                    if la_ == 1:
                        localctx = GqlParser.ListType2Context(self, GqlParser.ValueTypeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueType)
                        self.state = 3855
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3856
                        self.listValueTypeName()
                        self.state = 3861
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                        if la_ == 1:
                            self.state = 3857
                            self.match(GqlParser.LEFT_BRACKET)
                            self.state = 3858
                            self.maxLength()
                            self.state = 3859
                            self.match(GqlParser.RIGHT_BRACKET)


                        self.state = 3864
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                        if la_ == 1:
                            self.state = 3863
                            self.notNull()


                        pass

                    elif la_ == 2:
                        localctx = GqlParser.ClosedDynamicUnionType2Context(self, GqlParser.ValueTypeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueType)
                        self.state = 3866
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3869 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 3867
                                self.match(GqlParser.VERTICAL_BAR)
                                self.state = 3868
                                self.valueType(0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 3871 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

                        pass

             
                self.state = 3877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self):
            return self.getToken(GqlParser.DOUBLE_COLON, 0)

        def TYPED(self):
            return self.getToken(GqlParser.TYPED, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_typed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped" ):
                listener.enterTyped(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped" ):
                listener.exitTyped(self)




    def typed(self):

        localctx = GqlParser.TypedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_typed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3878
            _la = self._input.LA(1)
            if not(_la==270 or _la==360):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefinedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanType(self):
            return self.getTypedRuleContext(GqlParser.BooleanTypeContext,0)


        def characterStringType(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringTypeContext,0)


        def byteStringType(self):
            return self.getTypedRuleContext(GqlParser.ByteStringTypeContext,0)


        def numericType(self):
            return self.getTypedRuleContext(GqlParser.NumericTypeContext,0)


        def temporalType(self):
            return self.getTypedRuleContext(GqlParser.TemporalTypeContext,0)


        def referenceValueType(self):
            return self.getTypedRuleContext(GqlParser.ReferenceValueTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_predefinedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedType" ):
                listener.enterPredefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedType" ):
                listener.exitPredefinedType(self)




    def predefinedType(self):

        localctx = GqlParser.PredefinedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_predefinedType)
        try:
            self.state = 3886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3880
                self.booleanType()
                pass
            elif token in [252, 288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3881
                self.characterStringType()
                pass
            elif token in [47, 56, 287]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3882
                self.byteStringType()
                pass
            elif token in [45, 46, 86, 87, 97, 113, 114, 115, 116, 117, 118, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 175, 223, 240, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 282, 285]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3883
                self.numericType()
                pass
            elif token in [84, 85, 99, 169, 260, 261, 299]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3884
                self.temporalType()
                pass
            elif token in [12, 35, 48, 95, 122, 218, 255, 279, 324, 326]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3885
                self.referenceValueType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(GqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(GqlParser.BOOLEAN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_booleanType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanType" ):
                listener.enterBooleanType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanType" ):
                listener.exitBooleanType(self)




    def booleanType(self):

        localctx = GqlParser.BooleanTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_booleanType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3888
            _la = self._input.LA(1)
            if not(_la==50 or _la==51):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 3889
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterStringTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(GqlParser.STRING, 0)

        def VARCHAR(self):
            return self.getToken(GqlParser.VARCHAR, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GqlParser.MaxLengthContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_characterStringType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterStringType" ):
                listener.enterCharacterStringType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterStringType" ):
                listener.exitCharacterStringType(self)




    def characterStringType(self):

        localctx = GqlParser.CharacterStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_characterStringType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3892
            _la = self._input.LA(1)
            if not(_la==252 or _la==288):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.state = 3893
                self.match(GqlParser.LEFT_PAREN)
                self.state = 3894
                self.maxLength()
                self.state = 3895
                self.match(GqlParser.RIGHT_PAREN)


            self.state = 3900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 3899
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteStringTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTES(self):
            return self.getToken(GqlParser.BYTES, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GqlParser.MaxLengthContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def minLength(self):
            return self.getTypedRuleContext(GqlParser.MinLengthContext,0)


        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)

        def BINARY(self):
            return self.getToken(GqlParser.BINARY, 0)

        def fixedLength(self):
            return self.getTypedRuleContext(GqlParser.FixedLengthContext,0)


        def VARBINARY(self):
            return self.getToken(GqlParser.VARBINARY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_byteStringType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteStringType" ):
                listener.enterByteStringType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteStringType" ):
                listener.exitByteStringType(self)




    def byteStringType(self):

        localctx = GqlParser.ByteStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_byteStringType)
        try:
            self.state = 3937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3902
                self.match(GqlParser.BYTES)
                self.state = 3912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 3903
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 3907
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
                    if la_ == 1:
                        self.state = 3904
                        self.minLength()
                        self.state = 3905
                        self.match(GqlParser.COMMA)


                    self.state = 3909
                    self.maxLength()
                    self.state = 3910
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 3915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                if la_ == 1:
                    self.state = 3914
                    self.notNull()


                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3917
                self.match(GqlParser.BINARY)
                self.state = 3922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 3918
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 3919
                    self.fixedLength()
                    self.state = 3920
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 3925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 3924
                    self.notNull()


                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3927
                self.match(GqlParser.VARBINARY)
                self.state = 3932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 3928
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 3929
                    self.maxLength()
                    self.state = 3930
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 3935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 3934
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_minLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinLength" ):
                listener.enterMinLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinLength" ):
                listener.exitMinLength(self)




    def minLength(self):

        localctx = GqlParser.MinLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_minLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3939
            self.match(GqlParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_maxLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxLength" ):
                listener.enterMaxLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxLength" ):
                listener.exitMaxLength(self)




    def maxLength(self):

        localctx = GqlParser.MaxLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_maxLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3941
            self.match(GqlParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FixedLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_fixedLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixedLength" ):
                listener.enterFixedLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixedLength" ):
                listener.exitFixedLength(self)




    def fixedLength(self):

        localctx = GqlParser.FixedLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_fixedLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3943
            self.match(GqlParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exactNumericType(self):
            return self.getTypedRuleContext(GqlParser.ExactNumericTypeContext,0)


        def approximateNumericType(self):
            return self.getTypedRuleContext(GqlParser.ApproximateNumericTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)




    def numericType(self):

        localctx = GqlParser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_numericType)
        try:
            self.state = 3947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 46, 86, 87, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 175, 240, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 282, 285]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3945
                self.exactNumericType()
                pass
            elif token in [97, 113, 114, 115, 116, 117, 118, 223]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3946
                self.approximateNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExactNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryExactNumericType(self):
            return self.getTypedRuleContext(GqlParser.BinaryExactNumericTypeContext,0)


        def decimalExactNumericType(self):
            return self.getTypedRuleContext(GqlParser.DecimalExactNumericTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_exactNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExactNumericType" ):
                listener.enterExactNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExactNumericType" ):
                listener.exitExactNumericType(self)




    def exactNumericType(self):

        localctx = GqlParser.ExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_exactNumericType)
        try:
            self.state = 3951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 46, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 175, 240, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 282, 285]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3949
                self.binaryExactNumericType()
                pass
            elif token in [86, 87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3950
                self.decimalExactNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signedBinaryExactNumericType(self):
            return self.getTypedRuleContext(GqlParser.SignedBinaryExactNumericTypeContext,0)


        def unsignedBinaryExactNumericType(self):
            return self.getTypedRuleContext(GqlParser.UnsignedBinaryExactNumericTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_binaryExactNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExactNumericType" ):
                listener.enterBinaryExactNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExactNumericType" ):
                listener.exitBinaryExactNumericType(self)




    def binaryExactNumericType(self):

        localctx = GqlParser.BinaryExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_binaryExactNumericType)
        try:
            self.state = 3955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 46, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 175, 240, 245, 246]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3953
                self.signedBinaryExactNumericType()
                pass
            elif token in [271, 272, 273, 274, 275, 276, 277, 278, 282, 285]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3954
                self.unsignedBinaryExactNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedBinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT8(self):
            return self.getToken(GqlParser.INT8, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def INT16(self):
            return self.getToken(GqlParser.INT16, 0)

        def INT32(self):
            return self.getToken(GqlParser.INT32, 0)

        def INT64(self):
            return self.getToken(GqlParser.INT64, 0)

        def INT128(self):
            return self.getToken(GqlParser.INT128, 0)

        def INT256(self):
            return self.getToken(GqlParser.INT256, 0)

        def SMALLINT(self):
            return self.getToken(GqlParser.SMALLINT, 0)

        def INT(self):
            return self.getToken(GqlParser.INT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GqlParser.PrecisionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def BIGINT(self):
            return self.getToken(GqlParser.BIGINT, 0)

        def verboseBinaryExactNumericType(self):
            return self.getTypedRuleContext(GqlParser.VerboseBinaryExactNumericTypeContext,0)


        def SIGNED(self):
            return self.getToken(GqlParser.SIGNED, 0)

        def LONG(self):
            return self.getToken(GqlParser.LONG, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_signedBinaryExactNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedBinaryExactNumericType" ):
                listener.enterSignedBinaryExactNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedBinaryExactNumericType" ):
                listener.exitSignedBinaryExactNumericType(self)




    def signedBinaryExactNumericType(self):

        localctx = GqlParser.SignedBinaryExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_signedBinaryExactNumericType)
        self._la = 0 # Token type
        try:
            self.state = 4007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3957
                self.match(GqlParser.INT8)
                self.state = 3959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 3958
                    self.notNull()


                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3961
                self.match(GqlParser.INT16)
                self.state = 3963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 3962
                    self.notNull()


                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3965
                self.match(GqlParser.INT32)
                self.state = 3967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 3966
                    self.notNull()


                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3969
                self.match(GqlParser.INT64)
                self.state = 3971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 3970
                    self.notNull()


                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3973
                self.match(GqlParser.INT128)
                self.state = 3975
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 3974
                    self.notNull()


                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3977
                self.match(GqlParser.INT256)
                self.state = 3979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 3978
                    self.notNull()


                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3981
                self.match(GqlParser.SMALLINT)
                self.state = 3983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 3982
                    self.notNull()


                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3985
                self.match(GqlParser.INT)
                self.state = 3990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 3986
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 3987
                    self.precision()
                    self.state = 3988
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 3993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 3992
                    self.notNull()


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3995
                self.match(GqlParser.BIGINT)
                pass
            elif token in [45, 146, 147, 148, 149, 150, 151, 152, 240, 245]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==240:
                    self.state = 3996
                    self.match(GqlParser.SIGNED)


                self.state = 3999
                self.verboseBinaryExactNumericType()
                self.state = 4001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 4000
                    self.notNull()


                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4003
                self.match(GqlParser.LONG)
                self.state = 4005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 4004
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedBinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UINT8(self):
            return self.getToken(GqlParser.UINT8, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def UINT16(self):
            return self.getToken(GqlParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(GqlParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(GqlParser.UINT64, 0)

        def UINT128(self):
            return self.getToken(GqlParser.UINT128, 0)

        def UINT256(self):
            return self.getToken(GqlParser.UINT256, 0)

        def USMALLINT(self):
            return self.getToken(GqlParser.USMALLINT, 0)

        def UINT(self):
            return self.getToken(GqlParser.UINT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GqlParser.PrecisionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def UBIGINT(self):
            return self.getToken(GqlParser.UBIGINT, 0)

        def UNSIGNED(self):
            return self.getToken(GqlParser.UNSIGNED, 0)

        def verboseBinaryExactNumericType(self):
            return self.getTypedRuleContext(GqlParser.VerboseBinaryExactNumericTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_unsignedBinaryExactNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedBinaryExactNumericType" ):
                listener.enterUnsignedBinaryExactNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedBinaryExactNumericType" ):
                listener.exitUnsignedBinaryExactNumericType(self)




    def unsignedBinaryExactNumericType(self):

        localctx = GqlParser.UnsignedBinaryExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_unsignedBinaryExactNumericType)
        try:
            self.state = 4056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [278]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4009
                self.match(GqlParser.UINT8)
                self.state = 4011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                if la_ == 1:
                    self.state = 4010
                    self.notNull()


                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4013
                self.match(GqlParser.UINT16)
                self.state = 4015
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
                if la_ == 1:
                    self.state = 4014
                    self.notNull()


                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4017
                self.match(GqlParser.UINT32)
                self.state = 4019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 4018
                    self.notNull()


                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4021
                self.match(GqlParser.UINT64)
                self.state = 4023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 4022
                    self.notNull()


                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4025
                self.match(GqlParser.UINT128)
                self.state = 4027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                if la_ == 1:
                    self.state = 4026
                    self.notNull()


                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4029
                self.match(GqlParser.UINT256)
                self.state = 4031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                if la_ == 1:
                    self.state = 4030
                    self.notNull()


                pass
            elif token in [285]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4033
                self.match(GqlParser.USMALLINT)
                self.state = 4035
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 4034
                    self.notNull()


                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4037
                self.match(GqlParser.UINT)
                self.state = 4042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 4038
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 4039
                    self.precision()
                    self.state = 4040
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 4045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
                if la_ == 1:
                    self.state = 4044
                    self.notNull()


                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4047
                self.match(GqlParser.UBIGINT)
                self.state = 4049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 4048
                    self.notNull()


                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4051
                self.match(GqlParser.UNSIGNED)
                self.state = 4052
                self.verboseBinaryExactNumericType()
                self.state = 4054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
                if la_ == 1:
                    self.state = 4053
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VerboseBinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER8(self):
            return self.getToken(GqlParser.INTEGER8, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def INTEGER16(self):
            return self.getToken(GqlParser.INTEGER16, 0)

        def INTEGER32(self):
            return self.getToken(GqlParser.INTEGER32, 0)

        def INTEGER64(self):
            return self.getToken(GqlParser.INTEGER64, 0)

        def INTEGER128(self):
            return self.getToken(GqlParser.INTEGER128, 0)

        def INTEGER256(self):
            return self.getToken(GqlParser.INTEGER256, 0)

        def SMALL(self):
            return self.getToken(GqlParser.SMALL, 0)

        def INTEGER(self):
            return self.getToken(GqlParser.INTEGER, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GqlParser.PrecisionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def BIG(self):
            return self.getToken(GqlParser.BIG, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_verboseBinaryExactNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerboseBinaryExactNumericType" ):
                listener.enterVerboseBinaryExactNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerboseBinaryExactNumericType" ):
                listener.exitVerboseBinaryExactNumericType(self)




    def verboseBinaryExactNumericType(self):

        localctx = GqlParser.VerboseBinaryExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_verboseBinaryExactNumericType)
        try:
            self.state = 4102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4058
                self.match(GqlParser.INTEGER8)
                self.state = 4060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
                if la_ == 1:
                    self.state = 4059
                    self.notNull()


                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4062
                self.match(GqlParser.INTEGER16)
                self.state = 4064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                if la_ == 1:
                    self.state = 4063
                    self.notNull()


                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4066
                self.match(GqlParser.INTEGER32)
                self.state = 4068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                if la_ == 1:
                    self.state = 4067
                    self.notNull()


                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4070
                self.match(GqlParser.INTEGER64)
                self.state = 4072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 4071
                    self.notNull()


                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4074
                self.match(GqlParser.INTEGER128)
                self.state = 4076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 4075
                    self.notNull()


                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4078
                self.match(GqlParser.INTEGER256)
                self.state = 4080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 4079
                    self.notNull()


                pass
            elif token in [245]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4082
                self.match(GqlParser.SMALL)
                self.state = 4083
                self.match(GqlParser.INTEGER)
                self.state = 4085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                if la_ == 1:
                    self.state = 4084
                    self.notNull()


                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4087
                self.match(GqlParser.INTEGER)
                self.state = 4092
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 4088
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 4089
                    self.precision()
                    self.state = 4090
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 4095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
                if la_ == 1:
                    self.state = 4094
                    self.notNull()


                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4097
                self.match(GqlParser.BIG)
                self.state = 4098
                self.match(GqlParser.INTEGER)
                self.state = 4100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 4099
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalExactNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(GqlParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(GqlParser.DEC, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GqlParser.PrecisionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)

        def scale(self):
            return self.getTypedRuleContext(GqlParser.ScaleContext,0)


        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_decimalExactNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalExactNumericType" ):
                listener.enterDecimalExactNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalExactNumericType" ):
                listener.exitDecimalExactNumericType(self)




    def decimalExactNumericType(self):

        localctx = GqlParser.DecimalExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_decimalExactNumericType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4104
            _la = self._input.LA(1)
            if not(_la==86 or _la==87):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 4105
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4106
                self.precision()
                self.state = 4109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 4107
                    self.match(GqlParser.COMMA)
                    self.state = 4108
                    self.scale()


                self.state = 4111
                self.match(GqlParser.RIGHT_PAREN)
                self.state = 4113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 4112
                    self.notNull()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision" ):
                listener.enterPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision" ):
                listener.exitPrecision(self)




    def precision(self):

        localctx = GqlParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4117
            self.match(GqlParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GqlParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)




    def scale(self):

        localctx = GqlParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4119
            self.match(GqlParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ApproximateNumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT16(self):
            return self.getToken(GqlParser.FLOAT16, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def FLOAT32(self):
            return self.getToken(GqlParser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(GqlParser.FLOAT64, 0)

        def FLOAT128(self):
            return self.getToken(GqlParser.FLOAT128, 0)

        def FLOAT256(self):
            return self.getToken(GqlParser.FLOAT256, 0)

        def FLOAT(self):
            return self.getToken(GqlParser.FLOAT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GqlParser.PrecisionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)

        def scale(self):
            return self.getTypedRuleContext(GqlParser.ScaleContext,0)


        def REAL(self):
            return self.getToken(GqlParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(GqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(GqlParser.PRECISION, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_approximateNumericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApproximateNumericType" ):
                listener.enterApproximateNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApproximateNumericType" ):
                listener.exitApproximateNumericType(self)




    def approximateNumericType(self):

        localctx = GqlParser.ApproximateNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_approximateNumericType)
        self._la = 0 # Token type
        try:
            self.state = 4166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4121
                self.match(GqlParser.FLOAT16)
                self.state = 4123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                if la_ == 1:
                    self.state = 4122
                    self.notNull()


                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4125
                self.match(GqlParser.FLOAT32)
                self.state = 4127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 4126
                    self.notNull()


                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4129
                self.match(GqlParser.FLOAT64)
                self.state = 4131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                if la_ == 1:
                    self.state = 4130
                    self.notNull()


                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4133
                self.match(GqlParser.FLOAT128)
                self.state = 4135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
                if la_ == 1:
                    self.state = 4134
                    self.notNull()


                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4137
                self.match(GqlParser.FLOAT256)
                self.state = 4139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 4138
                    self.notNull()


                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4141
                self.match(GqlParser.FLOAT)
                self.state = 4150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 4142
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 4143
                    self.precision()
                    self.state = 4146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5:
                        self.state = 4144
                        self.match(GqlParser.COMMA)
                        self.state = 4145
                        self.scale()


                    self.state = 4148
                    self.match(GqlParser.RIGHT_PAREN)


                self.state = 4153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                if la_ == 1:
                    self.state = 4152
                    self.notNull()


                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4155
                self.match(GqlParser.REAL)
                self.state = 4157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 4156
                    self.notNull()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4159
                self.match(GqlParser.DOUBLE)
                self.state = 4161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 4160
                    self.match(GqlParser.PRECISION)


                self.state = 4164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 4163
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def temporalInstantType(self):
            return self.getTypedRuleContext(GqlParser.TemporalInstantTypeContext,0)


        def temporalDurationType(self):
            return self.getTypedRuleContext(GqlParser.TemporalDurationTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_temporalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalType" ):
                listener.enterTemporalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalType" ):
                listener.exitTemporalType(self)




    def temporalType(self):

        localctx = GqlParser.TemporalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_temporalType)
        try:
            self.state = 4170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84, 85, 169, 260, 261, 299]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4168
                self.temporalInstantType()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4169
                self.temporalDurationType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalInstantTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeType(self):
            return self.getTypedRuleContext(GqlParser.DatetimeTypeContext,0)


        def localdatetimeType(self):
            return self.getTypedRuleContext(GqlParser.LocaldatetimeTypeContext,0)


        def dateType(self):
            return self.getTypedRuleContext(GqlParser.DateTypeContext,0)


        def timeType(self):
            return self.getTypedRuleContext(GqlParser.TimeTypeContext,0)


        def localtimeType(self):
            return self.getTypedRuleContext(GqlParser.LocaltimeTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_temporalInstantType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalInstantType" ):
                listener.enterTemporalInstantType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalInstantType" ):
                listener.exitTemporalInstantType(self)




    def temporalInstantType(self):

        localctx = GqlParser.TemporalInstantTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_temporalInstantType)
        try:
            self.state = 4177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4172
                self.datetimeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4173
                self.localdatetimeType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4174
                self.dateType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4175
                self.timeType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4176
                self.localtimeType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalDurationTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationType(self):
            return self.getTypedRuleContext(GqlParser.DurationTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_temporalDurationType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalDurationType" ):
                listener.enterTemporalDurationType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalDurationType" ):
                listener.exitTemporalDurationType(self)




    def temporalDurationType(self):

        localctx = GqlParser.TemporalDurationTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_temporalDurationType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4179
            self.durationType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatetimeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZONED(self):
            return self.getToken(GqlParser.ZONED, 0)

        def DATETIME(self):
            return self.getToken(GqlParser.DATETIME, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def TIMESTAMP(self):
            return self.getToken(GqlParser.TIMESTAMP, 0)

        def WITH(self):
            return self.getToken(GqlParser.WITH, 0)

        def TIMEZONE(self):
            return self.getToken(GqlParser.TIMEZONE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_datetimeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeType" ):
                listener.enterDatetimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeType" ):
                listener.exitDatetimeType(self)




    def datetimeType(self):

        localctx = GqlParser.DatetimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_datetimeType)
        try:
            self.state = 4196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [299]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4181
                self.match(GqlParser.ZONED)
                self.state = 4182
                self.match(GqlParser.DATETIME)
                self.state = 4184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 4183
                    self.notNull()


                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4186
                self.match(GqlParser.TIMESTAMP)
                self.state = 4187
                self.match(GqlParser.WITH)
                self.state = 4188
                self.match(GqlParser.TIMEZONE)
                self.state = 4190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 4189
                    self.notNull()


                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4192
                self.match(GqlParser.DATETIME)
                self.state = 4194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 4193
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocaldatetimeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(GqlParser.LOCAL, 0)

        def DATETIME(self):
            return self.getToken(GqlParser.DATETIME, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def TIMESTAMP(self):
            return self.getToken(GqlParser.TIMESTAMP, 0)

        def WITHOUT(self):
            return self.getToken(GqlParser.WITHOUT, 0)

        def TIMEZONE(self):
            return self.getToken(GqlParser.TIMEZONE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_localdatetimeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocaldatetimeType" ):
                listener.enterLocaldatetimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocaldatetimeType" ):
                listener.exitLocaldatetimeType(self)




    def localdatetimeType(self):

        localctx = GqlParser.LocaldatetimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_localdatetimeType)
        try:
            self.state = 4211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4198
                self.match(GqlParser.LOCAL)
                self.state = 4199
                self.match(GqlParser.DATETIME)
                self.state = 4201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
                if la_ == 1:
                    self.state = 4200
                    self.notNull()


                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4203
                self.match(GqlParser.TIMESTAMP)
                self.state = 4206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 4204
                    self.match(GqlParser.WITHOUT)
                    self.state = 4205
                    self.match(GqlParser.TIMEZONE)


                self.state = 4209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 4208
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(GqlParser.DATE, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_dateType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateType" ):
                listener.enterDateType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateType" ):
                listener.exitDateType(self)




    def dateType(self):

        localctx = GqlParser.DateTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_dateType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4213
            self.match(GqlParser.DATE)
            self.state = 4215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 4214
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZONED(self):
            return self.getToken(GqlParser.ZONED, 0)

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def WITH(self):
            return self.getToken(GqlParser.WITH, 0)

        def TIMEZONE(self):
            return self.getToken(GqlParser.TIMEZONE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_timeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeType" ):
                listener.enterTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeType" ):
                listener.exitTimeType(self)




    def timeType(self):

        localctx = GqlParser.TimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_timeType)
        try:
            self.state = 4228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [299]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4217
                self.match(GqlParser.ZONED)
                self.state = 4218
                self.match(GqlParser.TIME)
                self.state = 4220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
                if la_ == 1:
                    self.state = 4219
                    self.notNull()


                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4222
                self.match(GqlParser.TIME)
                self.state = 4223
                self.match(GqlParser.WITH)
                self.state = 4224
                self.match(GqlParser.TIMEZONE)
                self.state = 4226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 4225
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocaltimeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(GqlParser.LOCAL, 0)

        def TIME(self):
            return self.getToken(GqlParser.TIME, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def WITHOUT(self):
            return self.getToken(GqlParser.WITHOUT, 0)

        def TIMEZONE(self):
            return self.getToken(GqlParser.TIMEZONE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_localtimeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocaltimeType" ):
                listener.enterLocaltimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocaltimeType" ):
                listener.exitLocaltimeType(self)




    def localtimeType(self):

        localctx = GqlParser.LocaltimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_localtimeType)
        try:
            self.state = 4241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4230
                self.match(GqlParser.LOCAL)
                self.state = 4231
                self.match(GqlParser.TIME)
                self.state = 4233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                if la_ == 1:
                    self.state = 4232
                    self.notNull()


                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4235
                self.match(GqlParser.TIME)
                self.state = 4236
                self.match(GqlParser.WITHOUT)
                self.state = 4237
                self.match(GqlParser.TIMEZONE)
                self.state = 4239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 4238
                    self.notNull()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DURATION(self):
            return self.getToken(GqlParser.DURATION, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_durationType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationType" ):
                listener.enterDurationType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationType" ):
                listener.exitDurationType(self)




    def durationType(self):

        localctx = GqlParser.DurationTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_durationType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4243
            self.match(GqlParser.DURATION)
            self.state = 4245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 4244
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.GraphReferenceValueTypeContext,0)


        def bindingTableReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.BindingTableReferenceValueTypeContext,0)


        def nodeReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.NodeReferenceValueTypeContext,0)


        def edgeReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.EdgeReferenceValueTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_referenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceValueType" ):
                listener.enterReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceValueType" ):
                listener.exitReferenceValueType(self)




    def referenceValueType(self):

        localctx = GqlParser.ReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_referenceValueType)
        try:
            self.state = 4251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4247
                self.graphReferenceValueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4248
                self.bindingTableReferenceValueType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4249
                self.nodeReferenceValueType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4250
                self.edgeReferenceValueType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openGraphReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.OpenGraphReferenceValueTypeContext,0)


        def closedGraphReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.ClosedGraphReferenceValueTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphReferenceValueType" ):
                listener.enterGraphReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphReferenceValueType" ):
                listener.exitGraphReferenceValueType(self)




    def graphReferenceValueType(self):

        localctx = GqlParser.GraphReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_graphReferenceValueType)
        try:
            self.state = 4255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4253
                self.openGraphReferenceValueType()
                pass
            elif token in [122, 218]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4254
                self.closedGraphReferenceValueType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosedGraphReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def nestedGraphTypeSpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedGraphTypeSpecificationContext,0)


        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_closedGraphReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosedGraphReferenceValueType" ):
                listener.enterClosedGraphReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosedGraphReferenceValueType" ):
                listener.exitClosedGraphReferenceValueType(self)




    def closedGraphReferenceValueType(self):

        localctx = GqlParser.ClosedGraphReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_closedGraphReferenceValueType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 4257
                self.match(GqlParser.PROPERTY)


            self.state = 4260
            self.match(GqlParser.GRAPH)
            self.state = 4261
            self.nestedGraphTypeSpecification()
            self.state = 4263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.state = 4262
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenGraphReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_openGraphReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenGraphReferenceValueType" ):
                listener.enterOpenGraphReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenGraphReferenceValueType" ):
                listener.exitOpenGraphReferenceValueType(self)




    def openGraphReferenceValueType(self):

        localctx = GqlParser.OpenGraphReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_openGraphReferenceValueType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4265
            self.match(GqlParser.ANY)
            self.state = 4267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 4266
                self.match(GqlParser.PROPERTY)


            self.state = 4269
            self.match(GqlParser.GRAPH)
            self.state = 4271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 4270
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingTableType(self):
            return self.getTypedRuleContext(GqlParser.BindingTableTypeContext,0)


        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableReferenceValueType" ):
                listener.enterBindingTableReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableReferenceValueType" ):
                listener.exitBindingTableReferenceValueType(self)




    def bindingTableReferenceValueType(self):

        localctx = GqlParser.BindingTableReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_bindingTableReferenceValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4273
            self.bindingTableType()
            self.state = 4275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 4274
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openNodeReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.OpenNodeReferenceValueTypeContext,0)


        def closedNodeReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.ClosedNodeReferenceValueTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_nodeReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeReferenceValueType" ):
                listener.enterNodeReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeReferenceValueType" ):
                listener.exitNodeReferenceValueType(self)




    def nodeReferenceValueType(self):

        localctx = GqlParser.NodeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_nodeReferenceValueType)
        try:
            self.state = 4279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4277
                self.openNodeReferenceValueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4278
                self.closedNodeReferenceValueType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosedNodeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeDefinition(self):
            return self.getTypedRuleContext(GqlParser.NodeTypeDefinitionContext,0)


        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_closedNodeReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosedNodeReferenceValueType" ):
                listener.enterClosedNodeReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosedNodeReferenceValueType" ):
                listener.exitClosedNodeReferenceValueType(self)




    def closedNodeReferenceValueType(self):

        localctx = GqlParser.ClosedNodeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_closedNodeReferenceValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4281
            self.nodeTypeDefinition()
            self.state = 4283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.state = 4282
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenNodeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE_SYNONYM(self):
            return self.getToken(GqlParser.NODE_SYNONYM, 0)

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_openNodeReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenNodeReferenceValueType" ):
                listener.enterOpenNodeReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenNodeReferenceValueType" ):
                listener.exitOpenNodeReferenceValueType(self)




    def openNodeReferenceValueType(self):

        localctx = GqlParser.OpenNodeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_openNodeReferenceValueType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 4285
                self.match(GqlParser.ANY)


            self.state = 4288
            self.match(GqlParser.NODE_SYNONYM)
            self.state = 4290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 4289
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EdgeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openEdgeReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.OpenEdgeReferenceValueTypeContext,0)


        def closedEdgeReferenceValueType(self):
            return self.getTypedRuleContext(GqlParser.ClosedEdgeReferenceValueTypeContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_edgeReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdgeReferenceValueType" ):
                listener.enterEdgeReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdgeReferenceValueType" ):
                listener.exitEdgeReferenceValueType(self)




    def edgeReferenceValueType(self):

        localctx = GqlParser.EdgeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_edgeReferenceValueType)
        try:
            self.state = 4294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4292
                self.openEdgeReferenceValueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4293
                self.closedEdgeReferenceValueType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosedEdgeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeDefinition(self):
            return self.getTypedRuleContext(GqlParser.EdgeTypeDefinitionContext,0)


        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_closedEdgeReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosedEdgeReferenceValueType" ):
                listener.enterClosedEdgeReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosedEdgeReferenceValueType" ):
                listener.exitClosedEdgeReferenceValueType(self)




    def closedEdgeReferenceValueType(self):

        localctx = GqlParser.ClosedEdgeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_closedEdgeReferenceValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4296
            self.edgeTypeDefinition()
            self.state = 4298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 4297
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenEdgeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EDGE_SYNONYM(self):
            return self.getToken(GqlParser.EDGE_SYNONYM, 0)

        def ANY(self):
            return self.getToken(GqlParser.ANY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_openEdgeReferenceValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenEdgeReferenceValueType" ):
                listener.enterOpenEdgeReferenceValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenEdgeReferenceValueType" ):
                listener.exitOpenEdgeReferenceValueType(self)




    def openEdgeReferenceValueType(self):

        localctx = GqlParser.OpenEdgeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_openEdgeReferenceValueType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 4300
                self.match(GqlParser.ANY)


            self.state = 4303
            self.match(GqlParser.EDGE_SYNONYM)
            self.state = 4305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 4304
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListValueTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listValueTypeNameSynonym(self):
            return self.getTypedRuleContext(GqlParser.ListValueTypeNameSynonymContext,0)


        def GROUP(self):
            return self.getToken(GqlParser.GROUP, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_listValueTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListValueTypeName" ):
                listener.enterListValueTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListValueTypeName" ):
                listener.exitListValueTypeName(self)




    def listValueTypeName(self):

        localctx = GqlParser.ListValueTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_listValueTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 4307
                self.match(GqlParser.GROUP)


            self.state = 4310
            self.listValueTypeNameSynonym()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListValueTypeNameSynonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(GqlParser.LIST, 0)

        def ARRAY(self):
            return self.getToken(GqlParser.ARRAY, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_listValueTypeNameSynonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListValueTypeNameSynonym" ):
                listener.enterListValueTypeNameSynonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListValueTypeNameSynonym" ):
                listener.exitListValueTypeNameSynonym(self)




    def listValueTypeNameSynonym(self):

        localctx = GqlParser.ListValueTypeNameSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_listValueTypeNameSynonym)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4312
            _la = self._input.LA(1)
            if not(_la==36 or _la==167):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypesSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def fieldTypeList(self):
            return self.getTypedRuleContext(GqlParser.FieldTypeListContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fieldTypesSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTypesSpecification" ):
                listener.enterFieldTypesSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTypesSpecification" ):
                listener.exitFieldTypesSpecification(self)




    def fieldTypesSpecification(self):

        localctx = GqlParser.FieldTypesSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_fieldTypesSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4314
            self.match(GqlParser.LEFT_BRACE)
            self.state = 4316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 4315
                self.fieldTypeList()


            self.state = 4318
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.FieldTypeContext)
            else:
                return self.getTypedRuleContext(GqlParser.FieldTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_fieldTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTypeList" ):
                listener.enterFieldTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTypeList" ):
                listener.exitFieldTypeList(self)




    def fieldTypeList(self):

        localctx = GqlParser.FieldTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_fieldTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4320
            self.fieldType()
            self.state = 4325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 4321
                self.match(GqlParser.COMMA)
                self.state = 4322
                self.fieldType()
                self.state = 4327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathValueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(GqlParser.PATH, 0)

        def notNull(self):
            return self.getTypedRuleContext(GqlParser.NotNullContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_pathValueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathValueType" ):
                listener.enterPathValueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathValueType" ):
                listener.exitPathValueType(self)




    def pathValueType(self):

        localctx = GqlParser.PathValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_pathValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4328
            self.match(GqlParser.PATH)
            self.state = 4330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 4329
                self.notNull()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def NULL_(self):
            return self.getToken(GqlParser.NULL_, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_notNull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotNull" ):
                listener.enterNotNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotNull" ):
                listener.exitNotNull(self)




    def notNull(self):

        localctx = GqlParser.NotNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_notNull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4332
            self.match(GqlParser.NOT)
            self.state = 4333
            self.match(GqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(GqlParser.FieldNameContext,0)


        def valueType(self):
            return self.getTypedRuleContext(GqlParser.ValueTypeContext,0)


        def typed(self):
            return self.getTypedRuleContext(GqlParser.TypedContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_fieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldType" ):
                listener.enterFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldType" ):
                listener.exitFieldType(self)




    def fieldType(self):

        localctx = GqlParser.FieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_fieldType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4335
            self.fieldName()
            self.state = 4337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270 or _la==360:
                self.state = 4336
                self.typed()


            self.state = 4339
            self.valueType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absoluteCatalogSchemaReference(self):
            return self.getTypedRuleContext(GqlParser.AbsoluteCatalogSchemaReferenceContext,0)


        def relativeCatalogSchemaReference(self):
            return self.getTypedRuleContext(GqlParser.RelativeCatalogSchemaReferenceContext,0)


        def referenceParameter(self):
            return self.getTypedRuleContext(GqlParser.ReferenceParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_schemaReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaReference" ):
                listener.enterSchemaReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaReference" ):
                listener.exitSchemaReference(self)




    def schemaReference(self):

        localctx = GqlParser.SchemaReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_schemaReference)
        try:
            self.state = 4344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4341
                self.absoluteCatalogSchemaReference()
                pass
            elif token in [16, 80, 129, 361]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4342
                self.relativeCatalogSchemaReference()
                pass
            elif token in [6, 15]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4343
                self.referenceParameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsoluteCatalogSchemaReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def absoluteDirectoryPath(self):
            return self.getTypedRuleContext(GqlParser.AbsoluteDirectoryPathContext,0)


        def schemaName(self):
            return self.getTypedRuleContext(GqlParser.SchemaNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_absoluteCatalogSchemaReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbsoluteCatalogSchemaReference" ):
                listener.enterAbsoluteCatalogSchemaReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbsoluteCatalogSchemaReference" ):
                listener.exitAbsoluteCatalogSchemaReference(self)




    def absoluteCatalogSchemaReference(self):

        localctx = GqlParser.AbsoluteCatalogSchemaReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_absoluteCatalogSchemaReference)
        try:
            self.state = 4350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4346
                self.match(GqlParser.SOLIDUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4347
                self.absoluteDirectoryPath()
                self.state = 4348
                self.schemaName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogSchemaParentAndNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absoluteDirectoryPath(self):
            return self.getTypedRuleContext(GqlParser.AbsoluteDirectoryPathContext,0)


        def schemaName(self):
            return self.getTypedRuleContext(GqlParser.SchemaNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_catalogSchemaParentAndName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogSchemaParentAndName" ):
                listener.enterCatalogSchemaParentAndName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogSchemaParentAndName" ):
                listener.exitCatalogSchemaParentAndName(self)




    def catalogSchemaParentAndName(self):

        localctx = GqlParser.CatalogSchemaParentAndNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_catalogSchemaParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4352
            self.absoluteDirectoryPath()
            self.state = 4353
            self.schemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelativeCatalogSchemaReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefinedSchemaReference(self):
            return self.getTypedRuleContext(GqlParser.PredefinedSchemaReferenceContext,0)


        def relativeDirectoryPath(self):
            return self.getTypedRuleContext(GqlParser.RelativeDirectoryPathContext,0)


        def schemaName(self):
            return self.getTypedRuleContext(GqlParser.SchemaNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_relativeCatalogSchemaReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelativeCatalogSchemaReference" ):
                listener.enterRelativeCatalogSchemaReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelativeCatalogSchemaReference" ):
                listener.exitRelativeCatalogSchemaReference(self)




    def relativeCatalogSchemaReference(self):

        localctx = GqlParser.RelativeCatalogSchemaReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_relativeCatalogSchemaReference)
        try:
            self.state = 4359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 80, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4355
                self.predefinedSchemaReference()
                pass
            elif token in [361]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4356
                self.relativeDirectoryPath()
                self.state = 4357
                self.schemaName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefinedSchemaReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME_SCHEMA(self):
            return self.getToken(GqlParser.HOME_SCHEMA, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(GqlParser.CURRENT_SCHEMA, 0)

        def PERIOD(self):
            return self.getToken(GqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_predefinedSchemaReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedSchemaReference" ):
                listener.enterPredefinedSchemaReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedSchemaReference" ):
                listener.exitPredefinedSchemaReference(self)




    def predefinedSchemaReference(self):

        localctx = GqlParser.PredefinedSchemaReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_predefinedSchemaReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4361
            _la = self._input.LA(1)
            if not(_la==16 or _la==80 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsoluteDirectoryPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def simpleDirectoryPath(self):
            return self.getTypedRuleContext(GqlParser.SimpleDirectoryPathContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_absoluteDirectoryPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbsoluteDirectoryPath" ):
                listener.enterAbsoluteDirectoryPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbsoluteDirectoryPath" ):
                listener.exitAbsoluteDirectoryPath(self)




    def absoluteDirectoryPath(self):

        localctx = GqlParser.AbsoluteDirectoryPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_absoluteDirectoryPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4363
            self.match(GqlParser.SOLIDUS)
            self.state = 4365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.state = 4364
                self.simpleDirectoryPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelativeDirectoryPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.DOUBLE_PERIOD)
            else:
                return self.getToken(GqlParser.DOUBLE_PERIOD, i)

        def SOLIDUS(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.SOLIDUS)
            else:
                return self.getToken(GqlParser.SOLIDUS, i)

        def simpleDirectoryPath(self):
            return self.getTypedRuleContext(GqlParser.SimpleDirectoryPathContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_relativeDirectoryPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelativeDirectoryPath" ):
                listener.enterRelativeDirectoryPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelativeDirectoryPath" ):
                listener.exitRelativeDirectoryPath(self)




    def relativeDirectoryPath(self):

        localctx = GqlParser.RelativeDirectoryPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_relativeDirectoryPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4367
            self.match(GqlParser.DOUBLE_PERIOD)
            self.state = 4379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 4372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,451,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4368
                        self.match(GqlParser.SOLIDUS)
                        self.state = 4369
                        self.match(GqlParser.DOUBLE_PERIOD) 
                    self.state = 4374
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,451,self._ctx)

                self.state = 4375
                self.match(GqlParser.SOLIDUS)
                self.state = 4377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                if la_ == 1:
                    self.state = 4376
                    self.simpleDirectoryPath()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDirectoryPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directoryName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.DirectoryNameContext)
            else:
                return self.getTypedRuleContext(GqlParser.DirectoryNameContext,i)


        def SOLIDUS(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.SOLIDUS)
            else:
                return self.getToken(GqlParser.SOLIDUS, i)

        def getRuleIndex(self):
            return GqlParser.RULE_simpleDirectoryPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDirectoryPath" ):
                listener.enterSimpleDirectoryPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDirectoryPath" ):
                listener.exitSimpleDirectoryPath(self)




    def simpleDirectoryPath(self):

        localctx = GqlParser.SimpleDirectoryPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_simpleDirectoryPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4384 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4381
                    self.directoryName()
                    self.state = 4382
                    self.match(GqlParser.SOLIDUS)

                else:
                    raise NoViableAltException(self)
                self.state = 4386 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,454,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(GqlParser.CatalogObjectParentReferenceContext,0)


        def graphName(self):
            return self.getTypedRuleContext(GqlParser.GraphNameContext,0)


        def delimitedGraphName(self):
            return self.getTypedRuleContext(GqlParser.DelimitedGraphNameContext,0)


        def homeGraph(self):
            return self.getTypedRuleContext(GqlParser.HomeGraphContext,0)


        def referenceParameter(self):
            return self.getTypedRuleContext(GqlParser.ReferenceParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphReference" ):
                listener.enterGraphReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphReference" ):
                listener.exitGraphReference(self)




    def graphReference(self):

        localctx = GqlParser.GraphReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_graphReference)
        try:
            self.state = 4394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4388
                self.catalogObjectParentReference()
                self.state = 4389
                self.graphName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4391
                self.delimitedGraphName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4392
                self.homeGraph()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4393
                self.referenceParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogGraphParentAndNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphName(self):
            return self.getTypedRuleContext(GqlParser.GraphNameContext,0)


        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(GqlParser.CatalogObjectParentReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_catalogGraphParentAndName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogGraphParentAndName" ):
                listener.enterCatalogGraphParentAndName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogGraphParentAndName" ):
                listener.exitCatalogGraphParentAndName(self)




    def catalogGraphParentAndName(self):

        localctx = GqlParser.CatalogGraphParentAndNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_catalogGraphParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.state = 4396
                self.catalogObjectParentReference()


            self.state = 4399
            self.graphName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HomeGraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME_PROPERTY_GRAPH(self):
            return self.getToken(GqlParser.HOME_PROPERTY_GRAPH, 0)

        def HOME_GRAPH(self):
            return self.getToken(GqlParser.HOME_GRAPH, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_homeGraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHomeGraph" ):
                listener.enterHomeGraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHomeGraph" ):
                listener.exitHomeGraph(self)




    def homeGraph(self):

        localctx = GqlParser.HomeGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_homeGraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4401
            _la = self._input.LA(1)
            if not(_la==127 or _la==128):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphTypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogGraphTypeParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogGraphTypeParentAndNameContext,0)


        def referenceParameter(self):
            return self.getTypedRuleContext(GqlParser.ReferenceParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_graphTypeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphTypeReference" ):
                listener.enterGraphTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphTypeReference" ):
                listener.exitGraphTypeReference(self)




    def graphTypeReference(self):

        localctx = GqlParser.GraphTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_graphTypeReference)
        try:
            self.state = 4405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4403
                self.catalogGraphTypeParentAndName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4404
                self.referenceParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogGraphTypeParentAndNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphTypeName(self):
            return self.getTypedRuleContext(GqlParser.GraphTypeNameContext,0)


        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(GqlParser.CatalogObjectParentReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_catalogGraphTypeParentAndName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogGraphTypeParentAndName" ):
                listener.enterCatalogGraphTypeParentAndName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogGraphTypeParentAndName" ):
                listener.exitCatalogGraphTypeParentAndName(self)




    def catalogGraphTypeParentAndName(self):

        localctx = GqlParser.CatalogGraphTypeParentAndNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_catalogGraphTypeParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
            if la_ == 1:
                self.state = 4407
                self.catalogObjectParentReference()


            self.state = 4410
            self.graphTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingTableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(GqlParser.CatalogObjectParentReferenceContext,0)


        def bindingTableName(self):
            return self.getTypedRuleContext(GqlParser.BindingTableNameContext,0)


        def delimitedBindingTableName(self):
            return self.getTypedRuleContext(GqlParser.DelimitedBindingTableNameContext,0)


        def referenceParameter(self):
            return self.getTypedRuleContext(GqlParser.ReferenceParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_bindingTableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingTableReference" ):
                listener.enterBindingTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingTableReference" ):
                listener.exitBindingTableReference(self)




    def bindingTableReference(self):

        localctx = GqlParser.BindingTableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_bindingTableReference)
        try:
            self.state = 4417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4412
                self.catalogObjectParentReference()
                self.state = 4413
                self.bindingTableName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4415
                self.delimitedBindingTableName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4416
                self.referenceParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogBindingTableParentAndNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingTableName(self):
            return self.getTypedRuleContext(GqlParser.BindingTableNameContext,0)


        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(GqlParser.CatalogObjectParentReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_catalogBindingTableParentAndName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogBindingTableParentAndName" ):
                listener.enterCatalogBindingTableParentAndName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogBindingTableParentAndName" ):
                listener.exitCatalogBindingTableParentAndName(self)




    def catalogBindingTableParentAndName(self):

        localctx = GqlParser.CatalogBindingTableParentAndNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_catalogBindingTableParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 4419
                self.catalogObjectParentReference()


            self.state = 4422
            self.bindingTableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogProcedureParentAndName(self):
            return self.getTypedRuleContext(GqlParser.CatalogProcedureParentAndNameContext,0)


        def referenceParameter(self):
            return self.getTypedRuleContext(GqlParser.ReferenceParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_procedureReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureReference" ):
                listener.enterProcedureReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureReference" ):
                listener.exitProcedureReference(self)




    def procedureReference(self):

        localctx = GqlParser.ProcedureReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_procedureReference)
        try:
            self.state = 4426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4424
                self.catalogProcedureParentAndName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4425
                self.referenceParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogProcedureParentAndNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(GqlParser.ProcedureNameContext,0)


        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(GqlParser.CatalogObjectParentReferenceContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_catalogProcedureParentAndName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogProcedureParentAndName" ):
                listener.enterCatalogProcedureParentAndName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogProcedureParentAndName" ):
                listener.exitCatalogProcedureParentAndName(self)




    def catalogProcedureParentAndName(self):

        localctx = GqlParser.CatalogProcedureParentAndNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_catalogProcedureParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.state = 4428
                self.catalogObjectParentReference()


            self.state = 4431
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatalogObjectParentReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaReference(self):
            return self.getTypedRuleContext(GqlParser.SchemaReferenceContext,0)


        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)

        def objectName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ObjectNameContext)
            else:
                return self.getTypedRuleContext(GqlParser.ObjectNameContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.PERIOD)
            else:
                return self.getToken(GqlParser.PERIOD, i)

        def getRuleIndex(self):
            return GqlParser.RULE_catalogObjectParentReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalogObjectParentReference" ):
                listener.enterCatalogObjectParentReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalogObjectParentReference" ):
                listener.exitCatalogObjectParentReference(self)




    def catalogObjectParentReference(self):

        localctx = GqlParser.CatalogObjectParentReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_catalogObjectParentReference)
        self._la = 0 # Token type
        try:
            self.state = 4452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4433
                self.schemaReference()
                self.state = 4435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 4434
                    self.match(GqlParser.SOLIDUS)


                self.state = 4442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,464,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4437
                        self.objectName()
                        self.state = 4438
                        self.match(GqlParser.PERIOD) 
                    self.state = 4444
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4448 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4445
                        self.objectName()
                        self.state = 4446
                        self.match(GqlParser.PERIOD)

                    else:
                        raise NoViableAltException(self)
                    self.state = 4450 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,465,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(GqlParser.ParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_referenceParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceParameter" ):
                listener.enterReferenceParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceParameter" ):
                listener.exitReferenceParameter(self)




    def referenceParameter(self):

        localctx = GqlParser.ReferenceParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_referenceParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4454
            self.parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalObjectReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I_DONT_KNOW_3(self):
            return self.getToken(GqlParser.I_DONT_KNOW_3, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_externalObjectReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalObjectReference" ):
                listener.enterExternalObjectReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalObjectReference" ):
                listener.exitExternalObjectReference(self)




    def externalObjectReference(self):

        localctx = GqlParser.ExternalObjectReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_externalObjectReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4456
            self.match(GqlParser.I_DONT_KNOW_3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonPredicateCondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compOp(self):
            return self.getTypedRuleContext(GqlParser.CompOpContext,0)


        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_comparisonPredicateCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonPredicateCond" ):
                listener.enterComparisonPredicateCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonPredicateCond" ):
                listener.exitComparisonPredicateCond(self)




    def comparisonPredicateCond(self):

        localctx = GqlParser.ComparisonPredicateCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_comparisonPredicateCond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4458
            self.compOp()
            self.state = 4459
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)

        def NOT_EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.NOT_EQUALS_OPERATOR, 0)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.LEFT_ANGLE_BRACKET, 0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_ANGLE_BRACKET, 0)

        def LESS_THAN_OR_EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.LESS_THAN_OR_EQUALS_OPERATOR, 0)

        def GREATER_THAN_OR_EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.GREATER_THAN_OR_EQUALS_OPERATOR, 0)

        def SAFE_EXQUAL_OPERATOR(self):
            return self.getToken(GqlParser.SAFE_EXQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)




    def compOp(self):

        localctx = GqlParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_compOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4461
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8832) != 0) or ((((_la - 362)) & ~0x3f) == 0 and ((1 << (_la - 362)) & 2369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullPredicateCondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def NULL_(self):
            return self.getToken(GqlParser.NULL_, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_nullPredicateCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicateCond" ):
                listener.enterNullPredicateCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicateCond" ):
                listener.exitNullPredicateCond(self)




    def nullPredicateCond(self):

        localctx = GqlParser.NullPredicateCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_nullPredicateCond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4463
            self.match(GqlParser.IS)
            self.state = 4465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 4464
                self.match(GqlParser.NOT)


            self.state = 4467
            self.match(GqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizedPredicateCondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def NORMALIZED(self):
            return self.getToken(GqlParser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def normalForm(self):
            return self.getTypedRuleContext(GqlParser.NormalFormContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_normalizedPredicateCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalizedPredicateCond" ):
                listener.enterNormalizedPredicateCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalizedPredicateCond" ):
                listener.exitNormalizedPredicateCond(self)




    def normalizedPredicateCond(self):

        localctx = GqlParser.NormalizedPredicateCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_normalizedPredicateCond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4469
            self.match(GqlParser.IS)
            self.state = 4471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 4470
                self.match(GqlParser.NOT)


            self.state = 4474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & 15) != 0):
                self.state = 4473
                self.normalForm()


            self.state = 4476
            self.match(GqlParser.NORMALIZED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectedPredicateCondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def DIRECTED(self):
            return self.getToken(GqlParser.DIRECTED, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_directedPredicateCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectedPredicateCond" ):
                listener.enterDirectedPredicateCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectedPredicateCond" ):
                listener.exitDirectedPredicateCond(self)




    def directedPredicateCond(self):

        localctx = GqlParser.DirectedPredicateCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_directedPredicateCond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4478
            self.match(GqlParser.IS)
            self.state = 4480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 4479
                self.match(GqlParser.NOT)


            self.state = 4482
            self.match(GqlParser.DIRECTED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledPredicateCondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelExpression(self):
            return self.getTypedRuleContext(GqlParser.LabelExpressionContext,0)


        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def LABELED(self):
            return self.getToken(GqlParser.LABELED, 0)

        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_labeledPredicateCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledPredicateCond" ):
                listener.enterLabeledPredicateCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledPredicateCond" ):
                listener.exitLabeledPredicateCond(self)




    def labeledPredicateCond(self):

        localctx = GqlParser.LabeledPredicateCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_labeledPredicateCond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.state = 4484
                self.match(GqlParser.IS)
                self.state = 4486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 4485
                    self.match(GqlParser.NOT)


                self.state = 4488
                self.match(GqlParser.LABELED)
                pass
            elif token in [4]:
                self.state = 4489
                self.match(GqlParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4492
            self.labelExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceDestinationPredicateCondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GqlParser.IS, 0)

        def OF(self):
            return self.getToken(GqlParser.OF, 0)

        def elementVariableReference(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,0)


        def SOURCE(self):
            return self.getToken(GqlParser.SOURCE, 0)

        def DESTINATION(self):
            return self.getToken(GqlParser.DESTINATION, 0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_sourceDestinationPredicateCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceDestinationPredicateCond" ):
                listener.enterSourceDestinationPredicateCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceDestinationPredicateCond" ):
                listener.exitSourceDestinationPredicateCond(self)




    def sourceDestinationPredicateCond(self):

        localctx = GqlParser.SourceDestinationPredicateCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_sourceDestinationPredicateCond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4494
            self.match(GqlParser.IS)
            self.state = 4496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 4495
                self.match(GqlParser.NOT)


            self.state = 4498
            _la = self._input.LA(1)
            if not(_la==92 or _la==247):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4499
            self.match(GqlParser.OF)
            self.state = 4500
            self.elementVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class GqlPredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionPredicate(self):
            return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlPredicateExpression" ):
                listener.enterGqlPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlPredicateExpression" ):
                listener.exitGqlPredicateExpression(self)


    class GqlNotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlNotExpression" ):
                listener.enterGqlNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlNotExpression" ):
                listener.exitGqlNotExpression(self)


    class GqlLogicalXorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionContext
            super().__init__(parser)
            self.lhs = None # ExpressionContext
            self.rhs = None # ExpressionContext
            self.copyFrom(ctx)

        def XOR(self):
            return self.getToken(GqlParser.XOR, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLogicalXorExpression" ):
                listener.enterGqlLogicalXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLogicalXorExpression" ):
                listener.exitGqlLogicalXorExpression(self)


    class GqlLogicalOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionContext
            super().__init__(parser)
            self.lhs = None # ExpressionContext
            self.rhs = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(GqlParser.OR, 0)
        def CONCATENATION_OPERATOR(self):
            return self.getToken(GqlParser.CONCATENATION_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLogicalOrExpression" ):
                listener.enterGqlLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLogicalOrExpression" ):
                listener.exitGqlLogicalOrExpression(self)


    class GqlLogicalAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionContext
            super().__init__(parser)
            self.lhs = None # ExpressionContext
            self.rhs = None # ExpressionContext
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(GqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLogicalAndExpression" ):
                listener.enterGqlLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLogicalAndExpression" ):
                listener.exitGqlLogicalAndExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1022
        self.enterRecursionRule(localctx, 1022, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 4503
                self.match(GqlParser.NOT)
                self.state = 4504
                self.expression(5)
                pass

            elif la_ == 2:
                localctx = GqlParser.GqlPredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4505
                self.expressionPredicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 4519
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4517
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                    if la_ == 1:
                        localctx = GqlParser.GqlLogicalAndExpressionContext(self, GqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4508
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 4509
                        self.match(GqlParser.AND)
                        self.state = 4510
                        localctx.rhs = self.expression(5)
                        pass

                    elif la_ == 2:
                        localctx = GqlParser.GqlLogicalXorExpressionContext(self, GqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4511
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 4512
                        self.match(GqlParser.XOR)
                        self.state = 4513
                        localctx.rhs = self.expression(4)
                        pass

                    elif la_ == 3:
                        localctx = GqlParser.GqlLogicalOrExpressionContext(self, GqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4514
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 4515
                        _la = self._input.LA(1)
                        if not(_la==202 or _la==359):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4516
                        localctx.rhs = self.expression(3)
                        pass

             
                self.state = 4521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,476,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_expressionPredicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class GqlAtomExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlAtomExpression" ):
                listener.enterGqlAtomExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlAtomExpression" ):
                listener.exitGqlAtomExpression(self)


    class GqlNormalizedExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionPredicate(self):
            return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,0)

        def normalizedPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.NormalizedPredicateCondContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlNormalizedExpression" ):
                listener.enterGqlNormalizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlNormalizedExpression" ):
                listener.exitGqlNormalizedExpression(self)


    class GqlSameExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SAME(self):
            return self.getToken(GqlParser.SAME, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def elementVariableReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ElementVariableReferenceContext)
            else:
                return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSameExpression" ):
                listener.enterGqlSameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSameExpression" ):
                listener.exitGqlSameExpression(self)


    class GqlDirectedExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementVariableReference(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,0)

        def directedPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.DirectedPredicateCondContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlDirectedExpression" ):
                listener.enterGqlDirectedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlDirectedExpression" ):
                listener.exitGqlDirectedExpression(self)


    class GqlBetweenExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.val = None # ExpressionPredicateContext
            self.low = None # ExpressionPredicateContext
            self.high = None # ExpressionPredicateContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(GqlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(GqlParser.AND, 0)
        def expressionPredicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionPredicateContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,i)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBetweenExpression" ):
                listener.enterGqlBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBetweenExpression" ):
                listener.exitGqlBetweenExpression(self)


    class GqlBooleanTestExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionPredicate(self):
            return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,0)

        def truthValue(self):
            return self.getTypedRuleContext(GqlParser.TruthValueContext,0)

        def IS(self):
            return self.getToken(GqlParser.IS, 0)
        def EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.EQUALS_OPERATOR, 0)
        def NOT_EQUALS_OPERATOR(self):
            return self.getToken(GqlParser.NOT_EQUALS_OPERATOR, 0)
        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBooleanTestExpression" ):
                listener.enterGqlBooleanTestExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBooleanTestExpression" ):
                listener.exitGqlBooleanTestExpression(self)


    class GqlGraphRefValueExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRAPH(self):
            return self.getToken(GqlParser.GRAPH, 0)
        def graphExpression(self):
            return self.getTypedRuleContext(GqlParser.GraphExpressionContext,0)

        def PROPERTY(self):
            return self.getToken(GqlParser.PROPERTY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlGraphRefValueExpression" ):
                listener.enterGqlGraphRefValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlGraphRefValueExpression" ):
                listener.exitGqlGraphRefValueExpression(self)


    class GqlAllDifferentExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALL_DIFFERENT(self):
            return self.getToken(GqlParser.ALL_DIFFERENT, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def elementVariableReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ElementVariableReferenceContext)
            else:
                return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlAllDifferentExpression" ):
                listener.enterGqlAllDifferentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlAllDifferentExpression" ):
                listener.exitGqlAllDifferentExpression(self)


    class GqlInExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionPredicate(self):
            return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,0)

        def IN(self):
            return self.getToken(GqlParser.IN, 0)
        def listValue(self):
            return self.getTypedRuleContext(GqlParser.ListValueContext,0)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)
        def listValueTypeName(self):
            return self.getTypedRuleContext(GqlParser.ListValueTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlInExpression" ):
                listener.enterGqlInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlInExpression" ):
                listener.exitGqlInExpression(self)


    class GqlExistsExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(GqlParser.EXISTS, 0)
        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)
        def graphPattern(self):
            return self.getTypedRuleContext(GqlParser.GraphPatternContext,0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def matchStatementBlock(self):
            return self.getTypedRuleContext(GqlParser.MatchStatementBlockContext,0)

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlExistsExpression" ):
                listener.enterGqlExistsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlExistsExpression" ):
                listener.exitGqlExistsExpression(self)


    class GqlLetExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LET(self):
            return self.getToken(GqlParser.LET, 0)
        def letVariableDefinitionList(self):
            return self.getTypedRuleContext(GqlParser.LetVariableDefinitionListContext,0)

        def IN(self):
            return self.getToken(GqlParser.IN, 0)
        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(GqlParser.END, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLetExpression" ):
                listener.enterGqlLetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLetExpression" ):
                listener.exitGqlLetExpression(self)


    class GqlComparisonExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.lhs = None # ExpressionPredicateContext
            self.rhs = None # ExpressionPredicateContext
            self.copyFrom(ctx)

        def compOp(self):
            return self.getTypedRuleContext(GqlParser.CompOpContext,0)

        def expressionPredicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionPredicateContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlComparisonExpression" ):
                listener.enterGqlComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlComparisonExpression" ):
                listener.exitGqlComparisonExpression(self)


    class GqlLikeExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.self = None # ExpressionPredicateContext
            self.regex = None # ExpressionPredicateContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(GqlParser.LIKE, 0)
        def expressionPredicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionPredicateContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,i)

        def NOT(self):
            return self.getToken(GqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLikeExpression" ):
                listener.enterGqlLikeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLikeExpression" ):
                listener.exitGqlLikeExpression(self)


    class GqlLabeledExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementVariableReference(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,0)

        def labeledPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.LabeledPredicateCondContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLabeledExpression" ):
                listener.enterGqlLabeledExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLabeledExpression" ):
                listener.exitGqlLabeledExpression(self)


    class GqlPropertyExistExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROPERTY_EXISTS(self):
            return self.getToken(GqlParser.PROPERTY_EXISTS, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def elementVariableReference(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,0)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlPropertyExistExpression" ):
                listener.enterGqlPropertyExistExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlPropertyExistExpression" ):
                listener.exitGqlPropertyExistExpression(self)


    class GqlNullExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionPredicate(self):
            return self.getTypedRuleContext(GqlParser.ExpressionPredicateContext,0)

        def nullPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.NullPredicateCondContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlNullExpression" ):
                listener.enterGqlNullExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlNullExpression" ):
                listener.exitGqlNullExpression(self)


    class GqlSourceDestinationExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementVariableReference(self):
            return self.getTypedRuleContext(GqlParser.ElementVariableReferenceContext,0)

        def sourceDestinationPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.SourceDestinationPredicateCondContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSourceDestinationExpression" ):
                listener.enterGqlSourceDestinationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSourceDestinationExpression" ):
                listener.exitGqlSourceDestinationExpression(self)


    class GqlBindingTableValueExpressionContext(ExpressionPredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionPredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(GqlParser.TABLE, 0)
        def bindingTableExpression(self):
            return self.getTypedRuleContext(GqlParser.BindingTableExpressionContext,0)

        def BINDING(self):
            return self.getToken(GqlParser.BINDING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBindingTableValueExpression" ):
                listener.enterGqlBindingTableValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBindingTableValueExpression" ):
                listener.exitGqlBindingTableValueExpression(self)



    def expressionPredicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GqlParser.ExpressionPredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1024
        self.enterRecursionRule(localctx, 1024, self.RULE_expressionPredicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlExistsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 4523
                self.match(GqlParser.EXISTS)
                self.state = 4541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
                if la_ == 1:
                    self.state = 4524
                    self.match(GqlParser.LEFT_BRACE)
                    self.state = 4525
                    self.graphPattern()
                    self.state = 4526
                    self.match(GqlParser.RIGHT_BRACE)
                    pass

                elif la_ == 2:
                    self.state = 4528
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 4529
                    self.graphPattern()
                    self.state = 4530
                    self.match(GqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 4532
                    self.match(GqlParser.LEFT_BRACE)
                    self.state = 4533
                    self.matchStatementBlock()
                    self.state = 4534
                    self.match(GqlParser.RIGHT_BRACE)
                    pass

                elif la_ == 4:
                    self.state = 4536
                    self.match(GqlParser.LEFT_PAREN)
                    self.state = 4537
                    self.matchStatementBlock()
                    self.state = 4538
                    self.match(GqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 5:
                    self.state = 4540
                    self.nestedQuerySpecification()
                    pass


                pass

            elif la_ == 2:
                localctx = GqlParser.GqlDirectedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4543
                self.elementVariableReference()
                self.state = 4544
                self.directedPredicateCond()
                pass

            elif la_ == 3:
                localctx = GqlParser.GqlLabeledExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4546
                self.elementVariableReference()
                self.state = 4547
                self.labeledPredicateCond()
                pass

            elif la_ == 4:
                localctx = GqlParser.GqlSourceDestinationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4549
                self.elementVariableReference()
                self.state = 4550
                self.sourceDestinationPredicateCond()
                pass

            elif la_ == 5:
                localctx = GqlParser.GqlAllDifferentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4552
                self.match(GqlParser.ALL_DIFFERENT)
                self.state = 4553
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4554
                self.elementVariableReference()
                self.state = 4557 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4555
                    self.match(GqlParser.COMMA)
                    self.state = 4556
                    self.elementVariableReference()
                    self.state = 4559 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==5):
                        break

                self.state = 4561
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                localctx = GqlParser.GqlSameExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4563
                self.match(GqlParser.SAME)
                self.state = 4564
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4565
                self.elementVariableReference()
                self.state = 4568 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4566
                    self.match(GqlParser.COMMA)
                    self.state = 4567
                    self.elementVariableReference()
                    self.state = 4570 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==5):
                        break

                self.state = 4572
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                localctx = GqlParser.GqlPropertyExistExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4574
                self.match(GqlParser.PROPERTY_EXISTS)
                self.state = 4575
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4576
                self.elementVariableReference()
                self.state = 4577
                self.match(GqlParser.COMMA)
                self.state = 4578
                self.propertyName()
                self.state = 4579
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                localctx = GqlParser.GqlGraphRefValueExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 4581
                    self.match(GqlParser.PROPERTY)


                self.state = 4584
                self.match(GqlParser.GRAPH)
                self.state = 4585
                self.graphExpression()
                pass

            elif la_ == 9:
                localctx = GqlParser.GqlBindingTableValueExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 4586
                    self.match(GqlParser.BINDING)


                self.state = 4589
                self.match(GqlParser.TABLE)
                self.state = 4590
                self.bindingTableExpression()
                pass

            elif la_ == 10:
                localctx = GqlParser.GqlLetExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4591
                self.match(GqlParser.LET)
                self.state = 4592
                self.letVariableDefinitionList()
                self.state = 4593
                self.match(GqlParser.IN)
                self.state = 4594
                self.expression(0)
                self.state = 4595
                self.match(GqlParser.END)
                pass

            elif la_ == 11:
                localctx = GqlParser.GqlAtomExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4597
                self.expressionAtom(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 4644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,490,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4642
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
                    if la_ == 1:
                        localctx = GqlParser.GqlLikeExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        localctx.self = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4600
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 4602
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==192:
                            self.state = 4601
                            self.match(GqlParser.NOT)


                        self.state = 4604
                        self.match(GqlParser.LIKE)
                        self.state = 4605
                        localctx.regex = self.expressionPredicate(17)
                        pass

                    elif la_ == 2:
                        localctx = GqlParser.GqlComparisonExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4606
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 4607
                        self.compOp()
                        self.state = 4608
                        localctx.rhs = self.expressionPredicate(16)
                        pass

                    elif la_ == 3:
                        localctx = GqlParser.GqlBetweenExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        localctx.val = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4610
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 4612
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==192:
                            self.state = 4611
                            self.match(GqlParser.NOT)


                        self.state = 4614
                        self.match(GqlParser.BETWEEN)
                        self.state = 4615
                        localctx.low = self.expressionPredicate(0)
                        self.state = 4616
                        self.match(GqlParser.AND)
                        self.state = 4617
                        localctx.high = self.expressionPredicate(15)
                        pass

                    elif la_ == 4:
                        localctx = GqlParser.GqlInExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4619
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 4621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==192:
                            self.state = 4620
                            self.match(GqlParser.NOT)


                        self.state = 4623
                        self.match(GqlParser.IN)
                        self.state = 4625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==36 or _la==123 or _la==167:
                            self.state = 4624
                            self.listValueTypeName()


                        self.state = 4627
                        self.listValue()
                        pass

                    elif la_ == 5:
                        localctx = GqlParser.GqlBooleanTestExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4628
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 4635
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [154]:
                            self.state = 4629
                            self.match(GqlParser.IS)
                            self.state = 4631
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==192:
                                self.state = 4630
                                self.match(GqlParser.NOT)


                            pass
                        elif token in [7]:
                            self.state = 4633
                            self.match(GqlParser.EQUALS_OPERATOR)
                            pass
                        elif token in [370]:
                            self.state = 4634
                            self.match(GqlParser.NOT_EQUALS_OPERATOR)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 4637
                        self.truthValue()
                        pass

                    elif la_ == 6:
                        localctx = GqlParser.GqlNullExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4638
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 4639
                        self.nullPredicateCond()
                        pass

                    elif la_ == 7:
                        localctx = GqlParser.GqlNormalizedExpressionContext(self, GqlParser.ExpressionPredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionPredicate)
                        self.state = 4640
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 4641
                        self.normalizedPredicateCond()
                        pass

             
                self.state = 4646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,490,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class GqlUnaryExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(GqlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlUnaryExpression" ):
                listener.enterGqlUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlUnaryExpression" ):
                listener.exitGqlUnaryExpression(self)


    class GqlBitXorExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.lhs = None # ExpressionAtomContext
            self.rhs = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def CIRCUMFLEX(self):
            return self.getToken(GqlParser.CIRCUMFLEX, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBitXorExpression" ):
                listener.enterGqlBitXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBitXorExpression" ):
                listener.exitGqlBitXorExpression(self)


    class GqlBitShiftExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.lhs = None # ExpressionAtomContext
            self.rhs = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def LEFT_SHIFT(self):
            return self.getToken(GqlParser.LEFT_SHIFT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(GqlParser.RIGHT_SHIFT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBitShiftExpression" ):
                listener.enterGqlBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBitShiftExpression" ):
                listener.exitGqlBitShiftExpression(self)


    class GqlCollectionExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def collectionValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.CollectionValueConstructorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlCollectionExpression" ):
                listener.enterGqlCollectionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlCollectionExpression" ):
                listener.exitGqlCollectionExpression(self)


    class GqlParenthesizedExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlParenthesizedExpression" ):
                listener.enterGqlParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlParenthesizedExpression" ):
                listener.exitGqlParenthesizedExpression(self)


    class GqlFunctionExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(GqlParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlFunctionExpression" ):
                listener.enterGqlFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlFunctionExpression" ):
                listener.exitGqlFunctionExpression(self)


    class GqlVariableExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(GqlParser.VariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlVariableExpression" ):
                listener.enterGqlVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlVariableExpression" ):
                listener.exitGqlVariableExpression(self)


    class GqlParameterExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterValueSpecification(self):
            return self.getTypedRuleContext(GqlParser.ParameterValueSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlParameterExpression" ):
                listener.enterGqlParameterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlParameterExpression" ):
                listener.exitGqlParameterExpression(self)


    class GqlPropertyReferenceContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)

        def PERIOD(self):
            return self.getToken(GqlParser.PERIOD, 0)
        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlPropertyReference" ):
                listener.enterGqlPropertyReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlPropertyReference" ):
                listener.exitGqlPropertyReference(self)


    class GqlHighArithmeticExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.lhs = None # ExpressionAtomContext
            self.op = None # Token
            self.rhs = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def ASTERISK(self):
            return self.getToken(GqlParser.ASTERISK, 0)
        def SOLIDUS(self):
            return self.getToken(GqlParser.SOLIDUS, 0)
        def PERCENT(self):
            return self.getToken(GqlParser.PERCENT, 0)
        def MOD(self):
            return self.getToken(GqlParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlHighArithmeticExpression" ):
                listener.enterGqlHighArithmeticExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlHighArithmeticExpression" ):
                listener.exitGqlHighArithmeticExpression(self)


    class GqlBitOrExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.lhs = None # ExpressionAtomContext
            self.rhs = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def VERTICAL_BAR(self):
            return self.getToken(GqlParser.VERTICAL_BAR, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBitOrExpression" ):
                listener.enterGqlBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBitOrExpression" ):
                listener.exitGqlBitOrExpression(self)


    class GqlSubscriptExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)
        def unsignedNumericLiteral(self):
            return self.getTypedRuleContext(GqlParser.UnsignedNumericLiteralContext,0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSubscriptExpression" ):
                listener.enterGqlSubscriptExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSubscriptExpression" ):
                listener.exitGqlSubscriptExpression(self)


    class GqlBitAndExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.lhs = None # ExpressionAtomContext
            self.rhs = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def AMPERSAND(self):
            return self.getToken(GqlParser.AMPERSAND, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlBitAndExpression" ):
                listener.enterGqlBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlBitAndExpression" ):
                listener.exitGqlBitAndExpression(self)


    class GqlValueQueryExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUE(self):
            return self.getToken(GqlParser.VALUE, 0)
        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(GqlParser.NestedQuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlValueQueryExpression" ):
                listener.enterGqlValueQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlValueQueryExpression" ):
                listener.exitGqlValueQueryExpression(self)


    class GqlLiteralExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unsignedLiteral(self):
            return self.getTypedRuleContext(GqlParser.UnsignedLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLiteralExpression" ):
                listener.enterGqlLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLiteralExpression" ):
                listener.exitGqlLiteralExpression(self)


    class GqlLowArithmeticExpressionContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.lhs = None # ExpressionAtomContext
            self.op = None # Token
            self.rhs = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def PLUS_SIGN(self):
            return self.getToken(GqlParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLowArithmeticExpression" ):
                listener.enterGqlLowArithmeticExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLowArithmeticExpression" ):
                listener.exitGqlLowArithmeticExpression(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GqlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1026
        self.enterRecursionRule(localctx, 1026, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 4648
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4649
                self.expression(0)
                self.state = 4650
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = GqlParser.GqlLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4652
                self.unsignedLiteral()
                pass

            elif la_ == 3:
                localctx = GqlParser.GqlUnaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4653
                self.unaryOperator()
                self.state = 4654
                self.expressionAtom(12)
                pass

            elif la_ == 4:
                localctx = GqlParser.GqlFunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4656
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = GqlParser.GqlCollectionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4657
                self.collectionValueConstructor()
                pass

            elif la_ == 6:
                localctx = GqlParser.GqlValueQueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4658
                self.match(GqlParser.VALUE)
                self.state = 4659
                self.nestedQuerySpecification()
                pass

            elif la_ == 7:
                localctx = GqlParser.GqlParameterExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4660
                self.parameterValueSpecification()
                pass

            elif la_ == 8:
                localctx = GqlParser.GqlVariableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 4661
                self.variable()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 4692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,493,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4690
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                    if la_ == 1:
                        localctx = GqlParser.GqlBitXorExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4664
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 4665
                        self.match(GqlParser.CIRCUMFLEX)
                        self.state = 4666
                        localctx.rhs = self.expressionAtom(9)
                        pass

                    elif la_ == 2:
                        localctx = GqlParser.GqlHighArithmeticExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4667
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 4668
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16809988) != 0) or _la==182):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4669
                        localctx.rhs = self.expressionAtom(8)
                        pass

                    elif la_ == 3:
                        localctx = GqlParser.GqlLowArithmeticExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4670
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 4671
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==14 or _la==17):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4672
                        localctx.rhs = self.expressionAtom(7)
                        pass

                    elif la_ == 4:
                        localctx = GqlParser.GqlBitShiftExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4673
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 4674
                        _la = self._input.LA(1)
                        if not(_la==366 or _la==372):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4675
                        localctx.rhs = self.expressionAtom(6)
                        pass

                    elif la_ == 5:
                        localctx = GqlParser.GqlBitAndExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4676
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 4677
                        self.match(GqlParser.AMPERSAND)
                        self.state = 4678
                        localctx.rhs = self.expressionAtom(5)
                        pass

                    elif la_ == 6:
                        localctx = GqlParser.GqlBitOrExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4679
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 4680
                        self.match(GqlParser.VERTICAL_BAR)
                        self.state = 4681
                        localctx.rhs = self.expressionAtom(4)
                        pass

                    elif la_ == 7:
                        localctx = GqlParser.GqlSubscriptExpressionContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4682
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 4683
                        self.match(GqlParser.LEFT_BRACKET)
                        self.state = 4684
                        self.unsignedNumericLiteral()
                        self.state = 4685
                        self.match(GqlParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = GqlParser.GqlPropertyReferenceContext(self, GqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 4687
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 4688
                        self.match(GqlParser.PERIOD)
                        self.state = 4689
                        self.propertyName()
                        pass

             
                self.state = 4694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,493,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TruthValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(GqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(GqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(GqlParser.UNKNOWN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_truthValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruthValue" ):
                listener.enterTruthValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruthValue" ):
                listener.exitTruthValue(self)




    def truthValue(self):

        localctx = GqlParser.TruthValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_truthValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4695
            _la = self._input.LA(1)
            if not(_la==109 or _la==268 or _la==281):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(GqlParser.EXCLAMATION_MARK, 0)

        def PLUS_SIGN(self):
            return self.getToken(GqlParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(GqlParser.MINUS_SIGN, 0)

        def TILDE(self):
            return self.getToken(GqlParser.TILDE, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = GqlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4697
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 33702144) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericFunction(self):
            return self.getTypedRuleContext(GqlParser.NumericFunctionContext,0)


        def aggregateFunction(self):
            return self.getTypedRuleContext(GqlParser.AggregateFunctionContext,0)


        def caseFunction(self):
            return self.getTypedRuleContext(GqlParser.CaseFunctionContext,0)


        def castFunction(self):
            return self.getTypedRuleContext(GqlParser.CastFunctionContext,0)


        def elementFunction(self):
            return self.getTypedRuleContext(GqlParser.ElementFunctionContext,0)


        def datetimeValueFunction(self):
            return self.getTypedRuleContext(GqlParser.DatetimeValueFunctionContext,0)


        def durationFunction(self):
            return self.getTypedRuleContext(GqlParser.DurationFunctionContext,0)


        def listFunction(self):
            return self.getTypedRuleContext(GqlParser.ListFunctionContext,0)


        def stringFunction(self):
            return self.getTypedRuleContext(GqlParser.StringFunctionContext,0)


        def generalFunction(self):
            return self.getTypedRuleContext(GqlParser.GeneralFunctionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = GqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_functionCall)
        try:
            self.state = 4709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4699
                self.numericFunction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4700
                self.aggregateFunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4701
                self.caseFunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4702
                self.castFunction()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4703
                self.elementFunction()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4704
                self.datetimeValueFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4705
                self.durationFunction()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4706
                self.listFunction()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4707
                self.stringFunction()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4708
                self.generalFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_numericFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlTwoArgScalarFunctionContext(NumericFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.NumericFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def twoArgNumericFunctionName(self):
            return self.getTypedRuleContext(GqlParser.TwoArgNumericFunctionNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(GqlParser.FunctionParameterContext,i)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlTwoArgScalarFunction" ):
                listener.enterGqlTwoArgScalarFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlTwoArgScalarFunction" ):
                listener.exitGqlTwoArgScalarFunction(self)


    class GqlOneArgScalarFunctionContext(NumericFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.NumericFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def oneArgNumericFunctionName(self):
            return self.getTypedRuleContext(GqlParser.OneArgNumericFunctionNameContext,0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def functionParameter(self):
            return self.getTypedRuleContext(GqlParser.FunctionParameterContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlOneArgScalarFunction" ):
                listener.enterGqlOneArgScalarFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlOneArgScalarFunction" ):
                listener.exitGqlOneArgScalarFunction(self)


    class GqlIfFunctionContext(NumericFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.NumericFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(GqlParser.IF, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(GqlParser.FunctionParameterContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlIfFunction" ):
                listener.enterGqlIfFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlIfFunction" ):
                listener.exitGqlIfFunction(self)



    def numericFunction(self):

        localctx = GqlParser.NumericFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_numericFunction)
        try:
            self.state = 4732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlOneArgScalarFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4711
                self.oneArgNumericFunctionName()
                self.state = 4712
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4713
                self.functionParameter()
                self.state = 4714
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = GqlParser.GqlTwoArgScalarFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4716
                self.twoArgNumericFunctionName()
                self.state = 4717
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4718
                self.functionParameter()
                self.state = 4719
                self.match(GqlParser.COMMA)
                self.state = 4720
                self.functionParameter()
                self.state = 4721
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = GqlParser.GqlIfFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4723
                self.match(GqlParser.IF)
                self.state = 4724
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4725
                self.functionParameter()
                self.state = 4726
                self.match(GqlParser.COMMA)
                self.state = 4727
                self.functionParameter()
                self.state = 4728
                self.match(GqlParser.COMMA)
                self.state = 4729
                self.functionParameter()
                self.state = 4730
                self.match(GqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedLiteral(self):
            return self.getTypedRuleContext(GqlParser.UnsignedLiteralContext,0)


        def propertyReference(self):
            return self.getTypedRuleContext(GqlParser.PropertyReferenceContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(GqlParser.FunctionCallContext,0)


        def variable(self):
            return self.getTypedRuleContext(GqlParser.VariableContext,0)


        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = GqlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_functionParameter)
        try:
            self.state = 4739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4734
                self.unsignedLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4735
                self.propertyReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4736
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4737
                self.variable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4738
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(GqlParser.VariableContext,0)


        def PERIOD(self):
            return self.getToken(GqlParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GqlParser.PropertyNameContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_propertyReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyReference" ):
                listener.enterPropertyReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyReference" ):
                listener.exitPropertyReference(self)




    def propertyReference(self):

        localctx = GqlParser.PropertyReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_propertyReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4741
            self.variable()
            self.state = 4742
            self.match(GqlParser.PERIOD)
            self.state = 4743
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneArgNumericFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LENGTH(self):
            return self.getToken(GqlParser.CHAR_LENGTH, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(GqlParser.CHARACTER_LENGTH, 0)

        def BYTE_LENGTH(self):
            return self.getToken(GqlParser.BYTE_LENGTH, 0)

        def OCTET_LENGTH(self):
            return self.getToken(GqlParser.OCTET_LENGTH, 0)

        def PATH_LENGTH(self):
            return self.getToken(GqlParser.PATH_LENGTH, 0)

        def ABS(self):
            return self.getToken(GqlParser.ABS, 0)

        def SIN(self):
            return self.getToken(GqlParser.SIN, 0)

        def COS(self):
            return self.getToken(GqlParser.COS, 0)

        def TAN(self):
            return self.getToken(GqlParser.TAN, 0)

        def COT(self):
            return self.getToken(GqlParser.COT, 0)

        def SINH(self):
            return self.getToken(GqlParser.SINH, 0)

        def COSH(self):
            return self.getToken(GqlParser.COSH, 0)

        def TANH(self):
            return self.getToken(GqlParser.TANH, 0)

        def ASIN(self):
            return self.getToken(GqlParser.ASIN, 0)

        def ACOS(self):
            return self.getToken(GqlParser.ACOS, 0)

        def ATAN(self):
            return self.getToken(GqlParser.ATAN, 0)

        def DEGREES(self):
            return self.getToken(GqlParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(GqlParser.RADIANS, 0)

        def LOG10(self):
            return self.getToken(GqlParser.LOG10, 0)

        def LN(self):
            return self.getToken(GqlParser.LN, 0)

        def EXP(self):
            return self.getToken(GqlParser.EXP, 0)

        def SQRT(self):
            return self.getToken(GqlParser.SQRT, 0)

        def FLOOR(self):
            return self.getToken(GqlParser.FLOOR, 0)

        def CEIL(self):
            return self.getToken(GqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(GqlParser.CEILING, 0)

        def LOG(self):
            return self.getToken(GqlParser.LOG, 0)

        def LAST(self):
            return self.getToken(GqlParser.LAST, 0)

        def LABELS(self):
            return self.getToken(GqlParser.LABELS, 0)

        def LABEL(self):
            return self.getToken(GqlParser.LABEL, 0)

        def LENGTH(self):
            return self.getToken(GqlParser.LENGTH, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_oneArgNumericFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneArgNumericFunctionName" ):
                listener.enterOneArgNumericFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneArgNumericFunctionName" ):
                listener.exitOneArgNumericFunctionName(self)




    def oneArgNumericFunctionName(self):

        localctx = GqlParser.OneArgNumericFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_oneArgNumericFunctionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4745
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1116887209224437760) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 140806207897607) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & 9008298766766221) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & 206439448577) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TwoArgNumericFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOD(self):
            return self.getToken(GqlParser.MOD, 0)

        def LOG(self):
            return self.getToken(GqlParser.LOG, 0)

        def POWER(self):
            return self.getToken(GqlParser.POWER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_twoArgNumericFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTwoArgNumericFunctionName" ):
                listener.enterTwoArgNumericFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTwoArgNumericFunctionName" ):
                listener.exitTwoArgNumericFunctionName(self)




    def twoArgNumericFunctionName(self):

        localctx = GqlParser.TwoArgNumericFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_twoArgNumericFunctionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4747
            _la = self._input.LA(1)
            if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 4398046511617) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_stringFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlSubstringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.str_ = None # ExpressionAtomContext
            self.startPos = None # ExpressionAtomContext
            self.len_ = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(GqlParser.SUBSTR, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSubstringFunction" ):
                listener.enterGqlSubstringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSubstringFunction" ):
                listener.exitGqlSubstringFunction(self)


    class GqlMultiTrimStringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.dir_ = None # Token
            self.trimSrc = None # ExpressionAtomContext
            self.delChar = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def BTRIM(self):
            return self.getToken(GqlParser.BTRIM, 0)
        def LTRIM(self):
            return self.getToken(GqlParser.LTRIM, 0)
        def RTRIM(self):
            return self.getToken(GqlParser.RTRIM, 0)
        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlMultiTrimStringFunction" ):
                listener.enterGqlMultiTrimStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlMultiTrimStringFunction" ):
                listener.exitGqlMultiTrimStringFunction(self)


    class GqlLeftStringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(GqlParser.LEFT, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlLeftStringFunction" ):
                listener.enterGqlLeftStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlLeftStringFunction" ):
                listener.exitGqlLeftStringFunction(self)


    class GqlRightStringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RIGHT(self):
            return self.getToken(GqlParser.RIGHT, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlRightStringFunction" ):
                listener.enterGqlRightStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlRightStringFunction" ):
                listener.exitGqlRightStringFunction(self)


    class GqlFoldStringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.dir_ = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def UPPER(self):
            return self.getToken(GqlParser.UPPER, 0)
        def LOWER(self):
            return self.getToken(GqlParser.LOWER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlFoldStringFunction" ):
                listener.enterGqlFoldStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlFoldStringFunction" ):
                listener.exitGqlFoldStringFunction(self)


    class GqlSingleTrimStringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.trimSrc = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(GqlParser.TRIM, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def FROM(self):
            return self.getToken(GqlParser.FROM, 0)
        def trimSpecification(self):
            return self.getTypedRuleContext(GqlParser.TrimSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSingleTrimStringFunction" ):
                listener.enterGqlSingleTrimStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSingleTrimStringFunction" ):
                listener.exitGqlSingleTrimStringFunction(self)


    class GqlNormStringFunctionContext(StringFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.StringFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(GqlParser.NORMALIZE, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def normalForm(self):
            return self.getTypedRuleContext(GqlParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlNormStringFunction" ):
                listener.enterGqlNormStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlNormStringFunction" ):
                listener.exitGqlNormStringFunction(self)



    def stringFunction(self):

        localctx = GqlParser.StringFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_stringFunction)
        self._la = 0 # Token type
        try:
            self.state = 4811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [253]:
                localctx = GqlParser.GqlSubstringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4749
                self.match(GqlParser.SUBSTR)
                self.state = 4750
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4751
                localctx.str_ = self.expressionAtom(0)
                self.state = 4752
                self.match(GqlParser.COMMA)
                self.state = 4753
                localctx.startPos = self.expressionAtom(0)
                self.state = 4756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 4754
                    self.match(GqlParser.COMMA)
                    self.state = 4755
                    localctx.len_ = self.expressionAtom(0)


                self.state = 4758
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [162]:
                localctx = GqlParser.GqlLeftStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4760
                self.match(GqlParser.LEFT)
                self.state = 4761
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4762
                self.expressionAtom(0)
                self.state = 4763
                self.match(GqlParser.COMMA)
                self.state = 4764
                self.expressionAtom(0)
                self.state = 4765
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [232]:
                localctx = GqlParser.GqlRightStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4767
                self.match(GqlParser.RIGHT)
                self.state = 4768
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4769
                self.expressionAtom(0)
                self.state = 4770
                self.match(GqlParser.COMMA)
                self.state = 4771
                self.expressionAtom(0)
                self.state = 4772
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [176, 283]:
                localctx = GqlParser.GqlFoldStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4774
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==176 or _la==283):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4775
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4776
                self.expressionAtom(0)
                self.state = 4777
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [267]:
                localctx = GqlParser.GqlSingleTrimStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4779
                self.match(GqlParser.TRIM)
                self.state = 4780
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
                if la_ == 1:
                    self.state = 4782
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                    if la_ == 1:
                        self.state = 4781
                        self.trimSpecification()


                    self.state = 4785
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
                    if la_ == 1:
                        self.state = 4784
                        self.expressionAtom(0)


                    self.state = 4787
                    self.match(GqlParser.FROM)


                self.state = 4790
                localctx.trimSrc = self.expressionAtom(0)
                self.state = 4791
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [53, 177, 231]:
                localctx = GqlParser.GqlMultiTrimStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4793
                localctx.dir_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==53 or _la==177 or _la==231):
                    localctx.dir_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4794
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4795
                localctx.trimSrc = self.expressionAtom(0)
                self.state = 4798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 4796
                    self.match(GqlParser.COMMA)
                    self.state = 4797
                    localctx.delChar = self.expressionAtom(0)


                self.state = 4800
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [190]:
                localctx = GqlParser.GqlNormStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4802
                self.match(GqlParser.NORMALIZE)
                self.state = 4803
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4804
                self.expressionAtom(0)
                self.state = 4807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 4805
                    self.match(GqlParser.COMMA)
                    self.state = 4806
                    self.normalForm()


                self.state = 4809
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_listFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlElementsOfPathFunctionContext(ListFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ListFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELEMENTS(self):
            return self.getToken(GqlParser.ELEMENTS, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlElementsOfPathFunction" ):
                listener.enterGqlElementsOfPathFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlElementsOfPathFunction" ):
                listener.exitGqlElementsOfPathFunction(self)


    class GqlListTrimFunctionContext(ListFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.ListFunctionContext
            super().__init__(parser)
            self.list_ = None # ExpressionAtomContext
            self.trim = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(GqlParser.TRIM, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlListTrimFunction" ):
                listener.enterGqlListTrimFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlListTrimFunction" ):
                listener.exitGqlListTrimFunction(self)



    def listFunction(self):

        localctx = GqlParser.ListFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_listFunction)
        try:
            self.state = 4825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [267]:
                localctx = GqlParser.GqlListTrimFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4813
                self.match(GqlParser.TRIM)
                self.state = 4814
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4815
                localctx.list_ = self.expressionAtom(0)
                self.state = 4816
                self.match(GqlParser.COMMA)
                self.state = 4817
                localctx.trim = self.expressionAtom(0)
                self.state = 4818
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [103]:
                localctx = GqlParser.GqlElementsOfPathFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4820
                self.match(GqlParser.ELEMENTS)
                self.state = 4821
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4822
                self.expressionAtom(0)
                self.state = 4823
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_caseFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlCoalesceCaseFunctionContext(CaseFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.CaseFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(GqlParser.COALESCE, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlCoalesceCaseFunction" ):
                listener.enterGqlCoalesceCaseFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlCoalesceCaseFunction" ):
                listener.exitGqlCoalesceCaseFunction(self)


    class GqlSimpleCaseFunctionContext(CaseFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.CaseFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(GqlParser.CASE, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)

        def END(self):
            return self.getToken(GqlParser.END, 0)
        def simpleWhenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SimpleWhenClauseContext)
            else:
                return self.getTypedRuleContext(GqlParser.SimpleWhenClauseContext,i)

        def elseClause(self):
            return self.getTypedRuleContext(GqlParser.ElseClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSimpleCaseFunction" ):
                listener.enterGqlSimpleCaseFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSimpleCaseFunction" ):
                listener.exitGqlSimpleCaseFunction(self)


    class GqlNullIfCaseFunctionContext(CaseFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.CaseFunctionContext
            super().__init__(parser)
            self.lhs = None # ExpressionContext
            self.rhs = None # ExpressionContext
            self.copyFrom(ctx)

        def NULLIF(self):
            return self.getToken(GqlParser.NULLIF, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlNullIfCaseFunction" ):
                listener.enterGqlNullIfCaseFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlNullIfCaseFunction" ):
                listener.exitGqlNullIfCaseFunction(self)


    class GqlSearchedCaseFunctionContext(CaseFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.CaseFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(GqlParser.CASE, 0)
        def END(self):
            return self.getToken(GqlParser.END, 0)
        def searchedWhenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.SearchedWhenClauseContext)
            else:
                return self.getTypedRuleContext(GqlParser.SearchedWhenClauseContext,i)

        def elseClause(self):
            return self.getTypedRuleContext(GqlParser.ElseClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlSearchedCaseFunction" ):
                listener.enterGqlSearchedCaseFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlSearchedCaseFunction" ):
                listener.exitGqlSearchedCaseFunction(self)



    def caseFunction(self):

        localctx = GqlParser.CaseFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_caseFunction)
        self._la = 0 # Token type
        try:
            self.state = 4869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                localctx = GqlParser.GqlNullIfCaseFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4827
                self.match(GqlParser.NULLIF)
                self.state = 4828
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4829
                localctx.lhs = self.expression(0)
                self.state = 4830
                self.match(GqlParser.COMMA)
                self.state = 4831
                localctx.rhs = self.expression(0)
                self.state = 4832
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = GqlParser.GqlCoalesceCaseFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4834
                self.match(GqlParser.COALESCE)
                self.state = 4835
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4836
                self.expression(0)
                self.state = 4841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 4837
                    self.match(GqlParser.COMMA)
                    self.state = 4838
                    self.expression(0)
                    self.state = 4843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4844
                self.match(GqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = GqlParser.GqlSimpleCaseFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4846
                self.match(GqlParser.CASE)
                self.state = 4847
                self.expressionAtom(0)
                self.state = 4849 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4848
                    self.simpleWhenClause()
                    self.state = 4851 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==291):
                        break

                self.state = 4854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 4853
                    self.elseClause()


                self.state = 4856
                self.match(GqlParser.END)
                pass

            elif la_ == 4:
                localctx = GqlParser.GqlSearchedCaseFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4858
                self.match(GqlParser.CASE)
                self.state = 4860 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4859
                    self.searchedWhenClause()
                    self.state = 4862 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==291):
                        break

                self.state = 4865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 4864
                    self.elseClause()


                self.state = 4867
                self.match(GqlParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(GqlParser.WHEN, 0)

        def whenOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.WhenOperandContext)
            else:
                return self.getTypedRuleContext(GqlParser.WhenOperandContext,i)


        def THEN(self):
            return self.getToken(GqlParser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_simpleWhenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenClause" ):
                listener.enterSimpleWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenClause" ):
                listener.exitSimpleWhenClause(self)




    def simpleWhenClause(self):

        localctx = GqlParser.SimpleWhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_simpleWhenClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4871
            self.match(GqlParser.WHEN)
            self.state = 4872
            self.whenOperand()
            self.state = 4877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 4873
                self.match(GqlParser.COMMA)
                self.state = 4874
                self.whenOperand()
                self.state = 4879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4880
            self.match(GqlParser.THEN)
            self.state = 4881
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchedWhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(GqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(GqlParser.THEN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_searchedWhenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedWhenClause" ):
                listener.enterSearchedWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedWhenClause" ):
                listener.exitSearchedWhenClause(self)




    def searchedWhenClause(self):

        localctx = GqlParser.SearchedWhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_searchedWhenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4883
            self.match(GqlParser.WHEN)
            self.state = 4884
            self.expression(0)
            self.state = 4885
            self.match(GqlParser.THEN)
            self.state = 4886
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(GqlParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_elseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseClause" ):
                listener.enterElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseClause" ):
                listener.exitElseClause(self)




    def elseClause(self):

        localctx = GqlParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_elseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4888
            self.match(GqlParser.ELSE)
            self.state = 4889
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionAtom(self):
            return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,0)


        def comparisonPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.ComparisonPredicateCondContext,0)


        def nullPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.NullPredicateCondContext,0)


        def directedPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.DirectedPredicateCondContext,0)


        def labeledPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.LabeledPredicateCondContext,0)


        def sourceDestinationPredicateCond(self):
            return self.getTypedRuleContext(GqlParser.SourceDestinationPredicateCondContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_whenOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenOperand" ):
                listener.enterWhenOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenOperand" ):
                listener.exitWhenOperand(self)




    def whenOperand(self):

        localctx = GqlParser.WhenOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_whenOperand)
        try:
            self.state = 4897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4891
                self.expressionAtom(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4892
                self.comparisonPredicateCond()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4893
                self.nullPredicateCond()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4894
                self.directedPredicateCond()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4895
                self.labeledPredicateCond()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4896
                self.sourceDestinationPredicateCond()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(GqlParser.CAST, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(GqlParser.AS, 0)

        def valueType(self):
            return self.getTypedRuleContext(GqlParser.ValueTypeContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_castFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastFunction" ):
                listener.enterCastFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastFunction" ):
                listener.exitCastFunction(self)




    def castFunction(self):

        localctx = GqlParser.CastFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_castFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4899
            self.match(GqlParser.CAST)
            self.state = 4900
            self.match(GqlParser.LEFT_PAREN)
            self.state = 4901
            self.expression(0)
            self.state = 4902
            self.match(GqlParser.AS)
            self.state = 4903
            self.valueType(0)
            self.state = 4904
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementFunctionName(self):
            return self.getTypedRuleContext(GqlParser.ElementFunctionNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(GqlParser.VariableContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_elementFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementFunction" ):
                listener.enterElementFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementFunction" ):
                listener.exitElementFunction(self)




    def elementFunction(self):

        localctx = GqlParser.ElementFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_elementFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4906
            self.elementFunctionName()
            self.state = 4907
            self.match(GqlParser.LEFT_PAREN)
            self.state = 4908
            self.variable()
            self.state = 4909
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT_ID(self):
            return self.getToken(GqlParser.ELEMENT_ID, 0)

        def ID(self):
            return self.getToken(GqlParser.ID, 0)

        def TIMESTAMP(self):
            return self.getToken(GqlParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_elementFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementFunctionName" ):
                listener.enterElementFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementFunctionName" ):
                listener.exitElementFunctionName(self)




    def elementFunctionName(self):

        localctx = GqlParser.ElementFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_elementFunctionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4911
            _la = self._input.LA(1)
            if not(_la==102 or _la==130 or _la==261):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatetimeValueFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateFunction(self):
            return self.getTypedRuleContext(GqlParser.DateFunctionContext,0)


        def timeFunction(self):
            return self.getTypedRuleContext(GqlParser.TimeFunctionContext,0)


        def datetimeFunction(self):
            return self.getTypedRuleContext(GqlParser.DatetimeFunctionContext,0)


        def localTimeFunction(self):
            return self.getTypedRuleContext(GqlParser.LocalTimeFunctionContext,0)


        def localDatetimeFunction(self):
            return self.getTypedRuleContext(GqlParser.LocalDatetimeFunctionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_datetimeValueFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeValueFunction" ):
                listener.enterDatetimeValueFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeValueFunction" ):
                listener.exitDatetimeValueFunction(self)




    def datetimeValueFunction(self):

        localctx = GqlParser.DatetimeValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_datetimeValueFunction)
        try:
            self.state = 4918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77, 84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4913
                self.dateFunction()
                pass
            elif token in [81, 301]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4914
                self.timeFunction()
                pass
            elif token in [82, 300]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4915
                self.datetimeFunction()
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4916
                self.localTimeFunction()
                pass
            elif token in [170, 172]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4917
                self.localDatetimeFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_DATE(self):
            return self.getToken(GqlParser.CURRENT_DATE, 0)

        def DATE(self):
            return self.getToken(GqlParser.DATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def dateFunctionParameters(self):
            return self.getTypedRuleContext(GqlParser.DateFunctionParametersContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_dateFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateFunction" ):
                listener.enterDateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateFunction" ):
                listener.exitDateFunction(self)




    def dateFunction(self):

        localctx = GqlParser.DateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_dateFunction)
        self._la = 0 # Token type
        try:
            self.state = 4927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4920
                self.match(GqlParser.CURRENT_DATE)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4921
                self.match(GqlParser.DATE)
                self.state = 4922
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==224 or _la==400 or _la==401:
                    self.state = 4923
                    self.dateFunctionParameters()


                self.state = 4926
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIME(self):
            return self.getToken(GqlParser.CURRENT_TIME, 0)

        def ZONED_TIME(self):
            return self.getToken(GqlParser.ZONED_TIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(GqlParser.TimeFunctionParametersContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_timeFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunction" ):
                listener.enterTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunction" ):
                listener.exitTimeFunction(self)




    def timeFunction(self):

        localctx = GqlParser.TimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_timeFunction)
        self._la = 0 # Token type
        try:
            self.state = 4936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4929
                self.match(GqlParser.CURRENT_TIME)
                pass
            elif token in [301]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4930
                self.match(GqlParser.ZONED_TIME)
                self.state = 4931
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==224 or _la==400 or _la==401:
                    self.state = 4932
                    self.timeFunctionParameters()


                self.state = 4935
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTimeFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_TIME(self):
            return self.getToken(GqlParser.LOCAL_TIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(GqlParser.TimeFunctionParametersContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_localTimeFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTimeFunction" ):
                listener.enterLocalTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTimeFunction" ):
                listener.exitLocalTimeFunction(self)




    def localTimeFunction(self):

        localctx = GqlParser.LocalTimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_localTimeFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4938
            self.match(GqlParser.LOCAL_TIME)
            self.state = 4944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.state = 4939
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==224 or _la==400 or _la==401:
                    self.state = 4940
                    self.timeFunctionParameters()


                self.state = 4943
                self.match(GqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatetimeFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(GqlParser.CURRENT_TIMESTAMP, 0)

        def ZONED_DATETIME(self):
            return self.getToken(GqlParser.ZONED_DATETIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def datetimeFunctionParameters(self):
            return self.getTypedRuleContext(GqlParser.DatetimeFunctionParametersContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_datetimeFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeFunction" ):
                listener.enterDatetimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeFunction" ):
                listener.exitDatetimeFunction(self)




    def datetimeFunction(self):

        localctx = GqlParser.DatetimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_datetimeFunction)
        self._la = 0 # Token type
        try:
            self.state = 4953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4946
                self.match(GqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [300]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4947
                self.match(GqlParser.ZONED_DATETIME)
                self.state = 4948
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==224 or _la==400 or _la==401:
                    self.state = 4949
                    self.datetimeFunctionParameters()


                self.state = 4952
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalDatetimeFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_TIMESTAMP(self):
            return self.getToken(GqlParser.LOCAL_TIMESTAMP, 0)

        def LOCAL_DATETIME(self):
            return self.getToken(GqlParser.LOCAL_DATETIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def datetimeFunctionParameters(self):
            return self.getTypedRuleContext(GqlParser.DatetimeFunctionParametersContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_localDatetimeFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalDatetimeFunction" ):
                listener.enterLocalDatetimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalDatetimeFunction" ):
                listener.exitLocalDatetimeFunction(self)




    def localDatetimeFunction(self):

        localctx = GqlParser.LocalDatetimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_localDatetimeFunction)
        self._la = 0 # Token type
        try:
            self.state = 4962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [172]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4955
                self.match(GqlParser.LOCAL_TIMESTAMP)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4956
                self.match(GqlParser.LOCAL_DATETIME)
                self.state = 4957
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==224 or _la==400 or _la==401:
                    self.state = 4958
                    self.datetimeFunctionParameters()


                self.state = 4961
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GqlParser.RULE_durationFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GqlDatetimeSubtractionFunctionContext(DurationFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.DurationFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DURATION_BETWEEN(self):
            return self.getToken(GqlParser.DURATION_BETWEEN, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)

        def COMMA(self):
            return self.getToken(GqlParser.COMMA, 0)
        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlDatetimeSubtractionFunction" ):
                listener.enterGqlDatetimeSubtractionFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlDatetimeSubtractionFunction" ):
                listener.exitGqlDatetimeSubtractionFunction(self)


    class GqlDurationFunctionContext(DurationFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GqlParser.DurationFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DURATION(self):
            return self.getToken(GqlParser.DURATION, 0)
        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)
        def durationFunctionParameters(self):
            return self.getTypedRuleContext(GqlParser.DurationFunctionParametersContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGqlDurationFunction" ):
                listener.enterGqlDurationFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGqlDurationFunction" ):
                listener.exitGqlDurationFunction(self)



    def durationFunction(self):

        localctx = GqlParser.DurationFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_durationFunction)
        try:
            self.state = 4976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                localctx = GqlParser.GqlDatetimeSubtractionFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4964
                self.match(GqlParser.DURATION_BETWEEN)
                self.state = 4965
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4966
                self.expressionAtom(0)
                self.state = 4967
                self.match(GqlParser.COMMA)
                self.state = 4968
                self.expressionAtom(0)
                self.state = 4969
                self.match(GqlParser.RIGHT_PAREN)
                pass
            elif token in [99]:
                localctx = GqlParser.GqlDurationFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4971
                self.match(GqlParser.DURATION)
                self.state = 4972
                self.match(GqlParser.LEFT_PAREN)
                self.state = 4973
                self.durationFunctionParameters()
                self.state = 4974
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateString(self):
            return self.getTypedRuleContext(GqlParser.DateStringContext,0)


        def recordValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.RecordValueConstructorContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_dateFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateFunctionParameters" ):
                listener.enterDateFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateFunctionParameters" ):
                listener.exitDateFunctionParameters(self)




    def dateFunctionParameters(self):

        localctx = GqlParser.DateFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_dateFunctionParameters)
        try:
            self.state = 4980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [400, 401]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4978
                self.dateString()
                pass
            elif token in [10, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4979
                self.recordValueConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeString(self):
            return self.getTypedRuleContext(GqlParser.TimeStringContext,0)


        def recordValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.RecordValueConstructorContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_timeFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctionParameters" ):
                listener.enterTimeFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctionParameters" ):
                listener.exitTimeFunctionParameters(self)




    def timeFunctionParameters(self):

        localctx = GqlParser.TimeFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_timeFunctionParameters)
        try:
            self.state = 4984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [400, 401]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4982
                self.timeString()
                pass
            elif token in [10, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4983
                self.recordValueConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatetimeFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeString(self):
            return self.getTypedRuleContext(GqlParser.DatetimeStringContext,0)


        def recordValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.RecordValueConstructorContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_datetimeFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeFunctionParameters" ):
                listener.enterDatetimeFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeFunctionParameters" ):
                listener.exitDatetimeFunctionParameters(self)




    def datetimeFunctionParameters(self):

        localctx = GqlParser.DatetimeFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_datetimeFunctionParameters)
        try:
            self.state = 4988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [400, 401]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4986
                self.datetimeString()
                pass
            elif token in [10, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4987
                self.recordValueConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_dateString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateString" ):
                listener.enterDateString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateString" ):
                listener.exitDateString(self)




    def dateString(self):

        localctx = GqlParser.DateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_dateString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4990
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_timeString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeString" ):
                listener.enterTimeString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeString" ):
                listener.exitTimeString(self)




    def timeString(self):

        localctx = GqlParser.TimeStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_timeString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4992
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatetimeStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_datetimeString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetimeString" ):
                listener.enterDatetimeString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetimeString" ):
                listener.exitDatetimeString(self)




    def datetimeString(self):

        localctx = GqlParser.DatetimeStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_datetimeString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4994
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationString(self):
            return self.getTypedRuleContext(GqlParser.DurationStringContext,0)


        def recordValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.RecordValueConstructorContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_durationFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationFunctionParameters" ):
                listener.enterDurationFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationFunctionParameters" ):
                listener.exitDurationFunctionParameters(self)




    def durationFunctionParameters(self):

        localctx = GqlParser.DurationFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_durationFunctionParameters)
        try:
            self.state = 4998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [400, 401]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4996
                self.durationString()
                pass
            elif token in [10, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4997
                self.recordValueConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GqlParser.CharacterStringLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_durationString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationString" ):
                listener.enterDurationString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationString" ):
                listener.exitDurationString(self)




    def durationString(self):

        localctx = GqlParser.DurationStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_durationString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5000
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionName(self):
            return self.getTypedRuleContext(GqlParser.FunctionNameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(GqlParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_generalFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralFunction" ):
                listener.enterGeneralFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralFunction" ):
                listener.exitGeneralFunction(self)




    def generalFunction(self):

        localctx = GqlParser.GeneralFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_generalFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5002
            self.functionName()
            self.state = 5003
            self.match(GqlParser.LEFT_PAREN)
            self.state = 5012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8824627904) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 36671) != 0):
                self.state = 5004
                self.functionParameter()
                self.state = 5009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5005
                    self.match(GqlParser.COMMA)
                    self.state = 5006
                    self.functionParameter()
                    self.state = 5011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5014
            self.match(GqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.ListValueConstructorContext,0)


        def recordValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.RecordValueConstructorContext,0)


        def pathValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.PathValueConstructorContext,0)


        def mapValueConstructor(self):
            return self.getTypedRuleContext(GqlParser.MapValueConstructorContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_collectionValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionValueConstructor" ):
                listener.enterCollectionValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionValueConstructor" ):
                listener.exitCollectionValueConstructor(self)




    def collectionValueConstructor(self):

        localctx = GqlParser.CollectionValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_collectionValueConstructor)
        try:
            self.state = 5020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 36, 123, 167]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5016
                self.listValueConstructor()
                pass
            elif token in [10, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5017
                self.recordValueConstructor()
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5018
                self.pathValueConstructor()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5019
                self.mapValueConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(GqlParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(GqlParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(GqlParser.BOTH, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_trimSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimSpecification" ):
                listener.enterTrimSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimSpecification" ):
                listener.exitTrimSpecification(self)




    def trimSpecification(self):

        localctx = GqlParser.TrimSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_trimSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5022
            _la = self._input.LA(1)
            if not(_la==52 or _la==161 or _la==265):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFC(self):
            return self.getToken(GqlParser.NFC, 0)

        def NFD(self):
            return self.getToken(GqlParser.NFD, 0)

        def NFKC(self):
            return self.getToken(GqlParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(GqlParser.NFKD, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)




    def normalForm(self):

        localctx = GqlParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5024
            _la = self._input.LA(1)
            if not(((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GqlParser.ListValueTypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_listValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListValueConstructor" ):
                listener.enterListValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListValueConstructor" ):
                listener.exitListValueConstructor(self)




    def listValueConstructor(self):

        localctx = GqlParser.ListValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_listValueConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36 or _la==123 or _la==167:
                self.state = 5026
                self.listValueTypeName()


            self.state = 5029
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 5038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8824627904) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4294967545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -140737526104065) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -8589934593) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 274877906943) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 36671) != 0):
                self.state = 5030
                self.expression(0)
                self.state = 5035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5031
                    self.match(GqlParser.COMMA)
                    self.state = 5032
                    self.expression(0)
                    self.state = 5037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5040
            self.match(GqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def LEFT_PAREN(self):
            return self.getToken(GqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_listValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListValue" ):
                listener.enterListValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListValue" ):
                listener.exitListValue(self)




    def listValue(self):

        localctx = GqlParser.ListValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_listValue)
        self._la = 0 # Token type
        try:
            self.state = 5064
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5042
                self.match(GqlParser.LEFT_BRACKET)
                self.state = 5043
                self.expression(0)
                self.state = 5048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5044
                    self.match(GqlParser.COMMA)
                    self.state = 5045
                    self.expression(0)
                    self.state = 5050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5051
                self.match(GqlParser.RIGHT_BRACKET)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5053
                self.match(GqlParser.LEFT_PAREN)
                self.state = 5054
                self.expression(0)
                self.state = 5059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5055
                    self.match(GqlParser.COMMA)
                    self.state = 5056
                    self.expression(0)
                    self.state = 5061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5062
                self.match(GqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def RECORD(self):
            return self.getToken(GqlParser.RECORD, 0)

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.FieldContext)
            else:
                return self.getTypedRuleContext(GqlParser.FieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_recordValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordValueConstructor" ):
                listener.enterRecordValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordValueConstructor" ):
                listener.exitRecordValueConstructor(self)




    def recordValueConstructor(self):

        localctx = GqlParser.RecordValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_recordValueConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 5066
                self.match(GqlParser.RECORD)


            self.state = 5069
            self.match(GqlParser.LEFT_BRACE)
            self.state = 5078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 5070
                self.field()
                self.state = 5075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5071
                    self.match(GqlParser.COMMA)
                    self.state = 5072
                    self.field()
                    self.state = 5077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5080
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FieldNameContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def fieldName(self):
            return self.getTypedRuleContext(GqlParser.FieldNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(GqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField" ):
                listener.enterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField" ):
                listener.exitField(self)




    def field(self):

        localctx = GqlParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5082
            localctx.key = self.fieldName()
            self.state = 5083
            self.match(GqlParser.COLON)
            self.state = 5084
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(GqlParser.PATH, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionAtomContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_pathValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathValueConstructor" ):
                listener.enterPathValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathValueConstructor" ):
                listener.exitPathValueConstructor(self)




    def pathValueConstructor(self):

        localctx = GqlParser.PathValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_pathValueConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5086
            self.match(GqlParser.PATH)
            self.state = 5087
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 5088
            self.expressionAtom(0)
            self.state = 5096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 5089
                self.match(GqlParser.COMMA)
                self.state = 5090
                self.expressionAtom(0)
                self.state = 5091
                self.match(GqlParser.COMMA)
                self.state = 5092
                self.expressionAtom(0)
                self.state = 5098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5099
            self.match(GqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(GqlParser.MAP, 0)

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def mapElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.MapElementContext)
            else:
                return self.getTypedRuleContext(GqlParser.MapElementContext,i)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_mapValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapValueConstructor" ):
                listener.enterMapValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapValueConstructor" ):
                listener.exitMapValueConstructor(self)




    def mapValueConstructor(self):

        localctx = GqlParser.MapValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_mapValueConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5101
            self.match(GqlParser.MAP)
            self.state = 5102
            self.match(GqlParser.LEFT_BRACE)
            self.state = 5103
            self.mapElement()
            self.state = 5108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 5104
                self.match(GqlParser.COMMA)
                self.state = 5105
                self.mapElement()
                self.state = 5110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5111
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # ExpressionContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_mapElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapElement" ):
                listener.enterMapElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapElement" ):
                listener.exitMapElement(self)




    def mapElement(self):

        localctx = GqlParser.MapElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_mapElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5113
            localctx.key = self.expression(0)
            self.state = 5114
            self.match(GqlParser.COLON)
            self.state = 5115
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedValueSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedLiteral(self):
            return self.getTypedRuleContext(GqlParser.UnsignedLiteralContext,0)


        def parameterValueSpecification(self):
            return self.getTypedRuleContext(GqlParser.ParameterValueSpecificationContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_unsignedValueSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedValueSpecification" ):
                listener.enterUnsignedValueSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedValueSpecification" ):
                listener.exitUnsignedValueSpecification(self)




    def unsignedValueSpecification(self):

        localctx = GqlParser.UnsignedValueSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_unsignedValueSpecification)
        try:
            self.state = 5119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 36, 84, 85, 99, 109, 123, 167, 178, 193, 224, 260, 261, 268, 281, 392, 393, 394, 395, 396, 397, 400, 401, 403]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5117
                self.unsignedLiteral()
                pass
            elif token in [6, 15, 83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5118
                self.parameterValueSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedIntegerSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(GqlParser.IntegerLiteralContext,0)


        def parameter(self):
            return self.getTypedRuleContext(GqlParser.ParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_unsignedIntegerSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedIntegerSpecification" ):
                listener.enterUnsignedIntegerSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedIntegerSpecification" ):
                listener.exitUnsignedIntegerSpecification(self)




    def unsignedIntegerSpecification(self):

        localctx = GqlParser.UnsignedIntegerSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_unsignedIntegerSpecification)
        try:
            self.state = 5123
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [392, 393, 394, 395]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5121
                self.integerLiteral()
                pass
            elif token in [6, 15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5122
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedBooleanSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteral(self):
            return self.getTypedRuleContext(GqlParser.BooleanLiteralContext,0)


        def parameter(self):
            return self.getTypedRuleContext(GqlParser.ParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_unsignedBooleanSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedBooleanSpecification" ):
                listener.enterUnsignedBooleanSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedBooleanSpecification" ):
                listener.exitUnsignedBooleanSpecification(self)




    def unsignedBooleanSpecification(self):

        localctx = GqlParser.UnsignedBooleanSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_unsignedBooleanSpecification)
        try:
            self.state = 5127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109, 268, 281]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5125
                self.booleanLiteral()
                pass
            elif token in [6, 15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5126
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterValueSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(GqlParser.ParameterContext,0)


        def predefinedParameter(self):
            return self.getTypedRuleContext(GqlParser.PredefinedParameterContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_parameterValueSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterValueSpecification" ):
                listener.enterParameterValueSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterValueSpecification" ):
                listener.exitParameterValueSpecification(self)




    def parameterValueSpecification(self):

        localctx = GqlParser.ParameterValueSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_parameterValueSpecification)
        try:
            self.state = 5131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5129
                self.parameter()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5130
                self.predefinedParameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefinedParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_USER(self):
            return self.getToken(GqlParser.CURRENT_USER, 0)

        def getRuleIndex(self):
            return GqlParser.RULE_predefinedParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedParameter" ):
                listener.enterPredefinedParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedParameter" ):
                listener.exitPredefinedParameter(self)




    def predefinedParameter(self):

        localctx = GqlParser.PredefinedParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_predefinedParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5133
            self.match(GqlParser.CURRENT_USER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedNumericLiteral(self):
            return self.getTypedRuleContext(GqlParser.UnsignedNumericLiteralContext,0)


        def generalLiteral(self):
            return self.getTypedRuleContext(GqlParser.GeneralLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_unsignedLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedLiteral" ):
                listener.enterUnsignedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedLiteral" ):
                listener.exitUnsignedLiteral(self)




    def unsignedLiteral(self):

        localctx = GqlParser.UnsignedLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_unsignedLiteral)
        try:
            self.state = 5137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5135
                self.unsignedNumericLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5136
                self.generalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefinedTypeLiteral(self):
            return self.getTypedRuleContext(GqlParser.PredefinedTypeLiteralContext,0)


        def listLiteral(self):
            return self.getTypedRuleContext(GqlParser.ListLiteralContext,0)


        def mapLiteral(self):
            return self.getTypedRuleContext(GqlParser.MapLiteralContext,0)


        def recordLiteral(self):
            return self.getTypedRuleContext(GqlParser.RecordLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_generalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralLiteral" ):
                listener.enterGeneralLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralLiteral" ):
                listener.exitGeneralLiteral(self)




    def generalLiteral(self):

        localctx = GqlParser.GeneralLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_generalLiteral)
        try:
            self.state = 5143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84, 85, 99, 109, 193, 260, 261, 268, 281, 392, 400, 401, 403]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5139
                self.predefinedTypeLiteral()
                pass
            elif token in [11, 36, 123, 167]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5140
                self.listLiteral()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5141
                self.mapLiteral()
                pass
            elif token in [10, 224]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5142
                self.recordLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(GqlParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GqlParser.RIGHT_BRACKET, 0)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GqlParser.ListValueTypeNameContext,0)


        def generalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.GeneralLiteralContext)
            else:
                return self.getTypedRuleContext(GqlParser.GeneralLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_listLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLiteral" ):
                listener.enterListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLiteral" ):
                listener.exitListLiteral(self)




    def listLiteral(self):

        localctx = GqlParser.ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_listLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36 or _la==123 or _la==167:
                self.state = 5145
                self.listValueTypeName()


            self.state = 5148
            self.match(GqlParser.LEFT_BRACKET)
            self.state = 5157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 68719479808) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 549789401091) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 144115188142966785) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & 2097411) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & 2817) != 0):
                self.state = 5149
                self.generalLiteral()
                self.state = 5154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5150
                    self.match(GqlParser.COMMA)
                    self.state = 5151
                    self.generalLiteral()
                    self.state = 5156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5159
            self.match(GqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(GqlParser.MAP, 0)

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def mapElementLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.MapElementLiteralContext)
            else:
                return self.getTypedRuleContext(GqlParser.MapElementLiteralContext,i)


        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_mapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapLiteral" ):
                listener.enterMapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapLiteral" ):
                listener.exitMapLiteral(self)




    def mapLiteral(self):

        localctx = GqlParser.MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_mapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5161
            self.match(GqlParser.MAP)
            self.state = 5162
            self.match(GqlParser.LEFT_BRACE)
            self.state = 5163
            self.mapElementLiteral()
            self.state = 5168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 5164
                self.match(GqlParser.COMMA)
                self.state = 5165
                self.mapElementLiteral()
                self.state = 5170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5171
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapElementLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # GeneralLiteralContext
            self.value = None # GeneralLiteralContext

        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def generalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.GeneralLiteralContext)
            else:
                return self.getTypedRuleContext(GqlParser.GeneralLiteralContext,i)


        def getRuleIndex(self):
            return GqlParser.RULE_mapElementLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapElementLiteral" ):
                listener.enterMapElementLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapElementLiteral" ):
                listener.exitMapElementLiteral(self)




    def mapElementLiteral(self):

        localctx = GqlParser.MapElementLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_mapElementLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5173
            localctx.key = self.generalLiteral()
            self.state = 5174
            self.match(GqlParser.COLON)
            self.state = 5175
            localctx.value = self.generalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GqlParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GqlParser.RIGHT_BRACE, 0)

        def RECORD(self):
            return self.getToken(GqlParser.RECORD, 0)

        def recordFieldLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GqlParser.RecordFieldLiteralContext)
            else:
                return self.getTypedRuleContext(GqlParser.RecordFieldLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GqlParser.COMMA)
            else:
                return self.getToken(GqlParser.COMMA, i)

        def getRuleIndex(self):
            return GqlParser.RULE_recordLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordLiteral" ):
                listener.enterRecordLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordLiteral" ):
                listener.exitRecordLiteral(self)




    def recordLiteral(self):

        localctx = GqlParser.RecordLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_recordLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 5177
                self.match(GqlParser.RECORD)


            self.state = 5180
            self.match(GqlParser.LEFT_BRACE)
            self.state = 5189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & -2199023255585) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & -17042430230529) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & -2594073385365405713) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & -524289) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & -33) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 594475150812906495) != 0):
                self.state = 5181
                self.recordFieldLiteral()
                self.state = 5186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 5182
                    self.match(GqlParser.COMMA)
                    self.state = 5183
                    self.recordFieldLiteral()
                    self.state = 5188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5191
            self.match(GqlParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # VariableContext
            self.value = None # GeneralLiteralContext

        def COLON(self):
            return self.getToken(GqlParser.COLON, 0)

        def variable(self):
            return self.getTypedRuleContext(GqlParser.VariableContext,0)


        def generalLiteral(self):
            return self.getTypedRuleContext(GqlParser.GeneralLiteralContext,0)


        def getRuleIndex(self):
            return GqlParser.RULE_recordFieldLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordFieldLiteral" ):
                listener.enterRecordFieldLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordFieldLiteral" ):
                listener.exitRecordFieldLiteral(self)




    def recordFieldLiteral(self):

        localctx = GqlParser.RecordFieldLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_recordFieldLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5193
            localctx.key = self.variable()
            self.state = 5194
            self.match(GqlParser.COLON)
            self.state = 5195
            localctx.value = self.generalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[438] = self.valueType_sempred
        self._predicates[511] = self.expression_sempred
        self._predicates[512] = self.expressionPredicate_sempred
        self._predicates[513] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def valueType_sempred(self, localctx:ValueTypeContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def expressionPredicate_sempred(self, localctx:ExpressionPredicateContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 14)
         




