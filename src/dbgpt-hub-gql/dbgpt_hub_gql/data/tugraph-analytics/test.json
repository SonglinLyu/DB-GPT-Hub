[
    {
        "db_id": "",
        "instruction": "",
        "input": "height对height取余的最大值",
        "output": "MAX(a.height % a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value除199的值",
        "output": "a.value / 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字是kate且年龄为空的卖家回答的买家的名称,以及这些买家 查看的商品的名称",
        "output": "match(a:seller where a.name = 'kate' and (a.age is null))-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与病人马强和黄强都存在接受关系的点",
        "output": "match(a:patient where a.name='马强')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='黄强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找周宏这个人。",
        "output": "match(a:person where a.name = '周宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出创建时间为2031年07月09日的节点",
        "output": "match(a where a.createTime = '2031-07-09') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('徐月',4,'famale'),('韩雪',82,'famale'),('陈月',30,'male'),('李科',24,'famale')作为请求表数据,属性分别为name,id,gender, 以属性name作为相等条件,给出前42个标签等于department_has_teacher的边",
        "output": "with p as (select * from (VALUES('徐月',4,'famale'),('韩雪',82,'famale'),('陈月',30,'male'),('李科',24,'famale')) as t(name,id,gender))MATCH (a WHERE a.name = p.name) -[e:department_has_teacher ]->(b) RETURN e LIMIT 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出书认识的书,返回其源点的价格减价格的值,以及目标点的id乘id的值",
        "output": "match(a:book)-[e:knows]->(b:book) return a.price - a.price, b.id * b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person黄红有关的person,再返回和黄红lover的其他person,返回它们",
        "output": "match(a:person where a.name = '黄红')-[e]-(b:person), (a:person)-[e2:lover]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从大学南京大学出发,经过label为属于的边,走3到5跳到达的城市点",
        "output": "match(a:university where a.name='南京大学')-[e:belong]->{3,5}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找id为192的department中的医生的伴侣，再查找与医生有关系的友人。",
        "output": "match(a:department where id = '192')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与标签为'doctor'的点有'belong'关系的部门，以及这些部门与'has'关系的医生，以及这些医生与'creates'关系的处方。",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:creates]->(d:prescription) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前45个标签为belong的边",
        "output": "match(a)-[e:belong]->(b) return e limit 45",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除1的值",
        "output": "a.age / 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为166的person有关的电影的相关者, 再帮我查询和电影有关系的朋友",
        "output": "match(a:person where id = 166)-[e]-(b:film)-[e2:relation]->(c), (b:film)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以'kj'作为输入,返回id, value",
        "output": "Call PAGERANK('kj') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有标签为person的点，按照id从大到小排序。",
        "output": "match(a:person) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回95个论坛推特和知网,共同的伙伴",
        "output": "match(a:forum where a.name='推特')-[e:partner]->(b)<-[e2:partner]-(c:forum where c.name='知网') return b limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前197个label为包含的边",
        "output": "match(a)-[e:contain]->(b) return e limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有person的朋友,或其朋友的朋友",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询和person吴宏有person_friend_person关系的person,再查询以person_family_person关系关联了吴宏的person;2: 查询person张建国 relates的person,返回person relates的person的id减70的求和值 ;3: 请帮我查找和person李伟有person_family_person关系的person,以及和person杜建国有person_parent_person关系的person,将它们都返回;",
        "output": "查询语句为:1: match(a:person where a.name = '吴宏')-[e:person_friend_person]->(b:person),(a:person where a.name = '吴宏')<-[e2:person_family_person]-(c:person)return a, b, c;2: match(a:person where name = '张建国')-[e:relates]->(b:person)-[e2:relates]->(c:person) return SUM(c.id - 70);3: match(a:person where a.name = '李伟')-[e:person_family_person]->(b:person),(c:person where c.name = '杜建国')-[e2:person_parent_person]->(d:person)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点年龄为空,边标签为购买,且满足条件f1不等于true的边,返回这些边的f0除502的值",
        "output": "match(a where (a.age is null))-[e:buy where e.f1 <> true]->(b) return e.f0 / 502",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询作家何科认识的作家节点认识的作家",
        "output": "match(a:author where a.name = '何科')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与贷款loan_14和loan_49都存在存款关系的点",
        "output": "match(a:loan where a.name='loan_14')-[e:deposit]->(b)<-[e2:deposit]-(c:loan where c.name='loan_49') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 返回person吴建国 认识的person,返回person 购买的软件的id加37加132的值 ;2: 请帮我查找名为何建聪和周轩的,类型为person的点公共的relation节点的名单;3: 请帮我找出所有与software Hadoop有关系的software的lang;",
        "output": "查询语句为:1: match(a:person where name = '吴建国')-[e:person_knows_person]->(b:person)-[e2:person_buy_software]->(c:software) return c.id + 37 + 132;2: match(a:person where a.name='何建聪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='周轩') return b.name;3: match(a:software where a.name='Hadoop')-[e]-(b:software) return b.lang;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为film,目标点label为tag,label为person的边",
        "output": "match(a:film)-[e:person]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为复旦大学的大学",
        "output": "match(a:university where a.name = '复旦大学') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点满足条件身高小于188且年龄不等于52,年龄大于13,目标点满足条件价格小于39或名字等于Order_151,且价值小于767,且label为buyer_creates_orders的边",
        "output": "match(a where a.height < 188 and a.age <> 52 and a.age > 13)-[e:buyer_creates_orders]->(b where (b.price < 39 or b.name = 'Order_151') and b.value < 767) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点薪资不是9283或性别的最大值小于75,边类型是支付,且时间戳为2024年02月27日或目标点id在25到31之间或f0小于715的边,返回这些边的srcId的最小值乘119的数量",
        "output": "match(a where a.salary <> 9283 or MAX(a.gender) < 75)-[e:pay where e.timeStamp = '2024-02-27' or (e.targetId BETWEEN 25 AND 31) or e.f0 < 715]->(b) return COUNT(MIN(e.srcId) * 119)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出department土木学院has的teacher, 令department的size等于department的size,令department的name等于department的size的最大值, 返回department的size, teacher的salary",
        "output": "match(a:department where a.name='土木学院')-[e:has]->(b:teacher) let a.size = a.size,let a.name = MAX(a.size) return a.size,b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部与author有关系的reader节点,且reader节点的age是27,并返回这些点的age对48取余的值,以及id乘52的值",
        "output": "match(a:author)-[e]->(b:reader where b.age = 27) return b.age % 48, b.id * 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点gender不等于male且height大于195,目标点gender等于male且id不是6518,age为空,且label为knows的边",
        "output": "match(a where a.gender <> 'male' and a.height > 195)-[e:knows]->(b where b.gender = 'male' and b.id <> 6518 and (b.age is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家创造的订单,返回其源点的薪资除5500的值,以及目标点的id对60取余的值",
        "output": "match(a:buyer)-[e:creates]->(b:orders) return a.salary / 5500, b.id % 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为杜宏的,身高不为空且salary的平均值乘1857大于2的伙伴,返回这些伙伴的年龄,和边的源点id,目标点id,时间戳",
        "output": "match(a where a.name='杜宏')-[e:partner]->(b where (b.height is not null) and AVG(b.salary) * 1857 > 2) return b.age,e.srcId, e.targetId, e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,name,peopleNumber, 数据为(532,'中国诗词论坛',460),(934,'百度贴吧',629),(563,'推特',126), 以属性value作为相等条件,请帮我查找前165个标签等于post_has_tag的边",
        "output": "with p as (select * from (VALUES(532,'中国诗词论坛',460),(934,'百度贴吧',629),(563,'推特',126)) as t(value,name,peopleNumber))MATCH (a WHERE a.value = p.value) -[e:post_has_tag ]->(b) RETURN e LIMIT 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出140个与王强和陈伟有关系的人。",
        "output": "match(a where a.name='王强')-[e]->(b:person)<-[e2]-(c where c.name='陈伟') return b limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为赵月和韩轩的点有关系的、标签为person的节点",
        "output": "match(a where a.name = '赵月')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '韩轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回张伟创建的评论，以及这些评论所关联的所有人。",
        "output": "match(a:person where a.name = '张伟')-[e:creates]->(b:comment),(a:person where a.name = '张伟')<-[e2:creates]-(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询类型是person的全部点,并根据name从大到小排列;2: 查找全部名为周伟的点relates的person;3: 帮我查询id对32取余的数量大于等于177的节点;",
        "output": "查询语句为:1: match(a:person) return a order by a.name desc;2: match(a where a.name='周伟')-[e:relates]->(b:person) return b;3: match(a where COUNT(a.id % 32) >= 177) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出华中科技大学和韩建聪有关的部门节点。",
        "output": "match(a:university where a.name='华中科技大学')-[e:has]-(b:department)-[e2:has]-(c:teacher where c.name='韩建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与电影院大众影院有关系的标签的名字",
        "output": "match(a:cinema where a.name='大众影院')-[e]-(b:tag) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与电影《泰坦尼克号》有watch关系的人",
        "output": "match(a:film where a.name='泰坦尼克号')<-[e:watch]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回174个人，其中吴若涵和马月是共同的同事。",
        "output": "match(a:person where a.name='吴若涵')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='马月') return b limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被评论Comment_279属于的电影,和Comment_279属于的电影",
        "output": "match(a:film)<-[e:belong]-(b:comment where name = 'Comment_279')-[e2:belong]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与公司ID为20的某个人有关系的伙伴，再找出与这个人相关的其他人。",
        "output": "match(a:company where id = '20')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为person,名为郑国强的点,返回这些点的salary",
        "output": "match(a:person where a.name = '郑国强') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和city东京有belong关系的country,再返回以belong关系关联了东京的country",
        "output": "match(a:city where a.name = '东京')-[e:belong]->(b:country),(a:city where a.name = '东京')<-[e2:belong]-(c:country)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与书籍《孤城》有引用关系的其他书籍，再查找引用了《孤城》的其他书籍。",
        "output": "match(a:book where a.name = '孤城')-[e:refers]->(b:book),(a:book where a.name = '孤城')<-[e2:refers]-(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出和department文学院有department_has_teacher关系的teacher,以及和student张建聪有student_selects_course关系的course,将它们都返回;2: 找出140个university复旦大学和四川大学,共同的relation;3: 请帮我找出课程的1跳以内的环;",
        "output": "查询语句为:1: match(a:department where a.name = '文学院')-[e:department_has_teacher]->(b:teacher),(c:student where c.name = '张建聪')-[e2:student_selects_course]->(d:course)return a, b, c, d;2: match(a:university where a.name='复旦大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='四川大学') return b limit 140;3: match(a:course)->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以378作为请求点id, 源点的id等于输入表id,查询72个scale不是large的company,根据id降序排列",
        "output": "with p as (select * from (VALUES(378)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.scale <> 'large')) RETURN a ORDER BY a.id DESC LIMIT 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减69的值",
        "output": "a.id - 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 请帮我查找108个名为马建国的点creates的类型是orders的节点,且节点price不为空且value为558;2: 返回标签等于订单的所有点,并根据价格从小到大排列;3: 给出和buyer何红有关的seller,再给出和何红buyer_look_goods的其他goods,返回它们;4: 给出id减1对43取余大于174,age在51到90之间的buyer creates的orders的名称,以及这些orders contain的goods的名称;5: 请帮我查找label为orders_contain_goods,且满足条件targetId在91到138之间,f1不等于false,或f1不是false的边;6: 计算所有卖家的id除33的平均值;7: 找出所有源点类型是buyer,边类型是buyer_creates_orders,且weight在140.42到164.91之间或f0为空或f1不等于true的边;",
        "output": "查询语句为:1: match(a where a.name='马建国')-[e:buyer_creates_orders]->(b:orders where (b.price is not null) and b.value = 558) return b limit 108;2: match(a:orders) return a order by a.price asc;3: match(a:buyer where a.name = '何红')-[e]-(b:seller), (a:buyer)-[e2:buyer_look_goods]->(c:goods) return a, b, c;4: match(a:buyer where a.id - 1 % 43 > 174 and (a.age BETWEEN 51 AND 90))-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return b.name as b_name, c.name as c_name;5: match(a)-[e:orders_contain_goods where ((e.targetId BETWEEN 91 AND 138) and e.f1 <> false) or e.f1 <> false]->(b) return e;6: match(a:seller) return AVG(a.id / 33);7: match(a:buyer)-[e:buyer_creates_orders where (e.weight BETWEEN 140.42 AND 164.91) or (e.f0 is null) or e.f1 <> true]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person韩思思关联的person,以及认识这些person的person, 令person(a)的性别等于person(c)的薪资,令person的性别等于person的id加95, 返回person(a)的名字,person(b)的性别,person(c)的身高",
        "output": "match(a:person where name = '韩思思')-[e:relates]->(b:person)<-[e2:knows]-(c:person) let a.gender = c.salary,let b.gender = b.id + 95 return a.name,b.gender,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为6的user creates的issue, 并将issue有关的user的height的平均值赋值给issue的weight, 接着查询issue的weight小于6的issue belong的repository",
        "output": "match(a:user where a.id = 6)-[e:creates]->(b:issue) let b.weight = AVG((b:issue)-[e2]-(c:user) => c.height) match(b:issue where b.weight < 6)-[e3:belong]->(d:repository) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与software Zookeeper有uses关系的1跳的环",
        "output": "match(a:software where name = 'Zookeeper')-[e:uses]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与张宏存在colleague关系的person,person与person存在parent关系的点,返回这些点的salary",
        "output": "match(a where a.name = '张宏')-[e:colleague]->(b:person)-[e2:parent]->(c:person) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查询城市的2跳以内的环;2: 返回和company字节有关的city,称为X,再返回和这个X有关联的其他university,以及和X有关联的company;3: 帮我查询199个和标签为城市的点有city_contain_university关系的大学,且和这些大学有university_cooperate_company关系的公司;4: 返回全部id为143的国家关联的大学,和以包含关系关联了这些大学的其他城市;",
        "output": "查询语句为:1: match(a:city)->{0,1}(b)->(a) return a.id, b.id as b_id;2: match(a:company where a.name = '字节')-[e]-(b:city), (b:city)-[e2]-(c:university),(b:city)-[e3]-(d:company) return a, b, c, d;3: match(a:city)-[e:city_contain_university]->(b:university)-[e2:university_cooperate_company]->(c:company) return c limit 199;4: match(a:country where a.id = '143')-[e]-(b:university)<-[e2:city_contain_university]-(c:city) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找32个与类型为'论坛'的地点有包含关系的帖子，并且这些帖子与包含它们的地点有'拥有'关系（即有标签）。",
        "output": "match(a:forum)-[e:contain]->(b:post)-[e2:has]->(c:tag) return c limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和名为马若涵的病人有朋友关系,或有朋友的朋友关系的处方",
        "output": "match(a:patient where n.name=马若涵)-[e:friend]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与巴黎和上海都相关的事物。",
        "output": "match(a:city where a.name='巴黎')-[e:relation]->(b)<-[e2:relation]-(c:city where c.name='上海') return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部与person徐思思有关系的person的性别",
        "output": "match(a:person where a.name='徐思思')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));给出和编辑有关联的书节点,并根据其字数,价格分组,返回字数,价格,以及价格加68的求和值",
        "output": "match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.wordCount, b.price, SUM(b.price + 68) group by b.wordCount, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出所有与买家杜红有关系的订单的id",
        "output": "match(a:buyer where a.name='杜红')-[e]-(b:orders) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和买家周雪之间有查看关系的商品",
        "output": "match(a:buyer where a.name='周雪')-[e:look]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询名为Alice和郑宏的人共同选择的标签为course的课程节点。",
        "output": "match(a where a.name = 'Alice')-[e:selects]->(b:course)<-[e2:selects]-(c where c.name = '郑宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回大学重庆大学的伙伴,的权重减160.48的和",
        "output": "match(a:university where a.name= '重庆大学')-[e:partner]->(b) return SUM(e.weight - 160.48)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出类型是公司的点,返回21个;2: 请帮我找出和大学复旦大学有university_belong_city关系的城市,以及和大学浙江大学有university_cooperate_company关系的公司,将它们都返回;3: 帮我查询和国家有关联的城市节点,并根据其id,面积,人数分组,返回id,面积,人数,以及人数对7768取余的值;",
        "output": "查询语句为:1: match(a:company) return a limit 21;2: match(a:university where a.name = '复旦大学')-[e:university_belong_city]->(b:city),(c:university where c.name = '浙江大学')-[e2:university_cooperate_company]->(d:company)return a, b, c, d;3: match(a:country)-[e:country_contain_city]-(b:city) return b.id, b.area, b.peopleNumber, b.peopleNumber % 7768 group by b.id, b.area, b.peopleNumber;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person韩宏出发,经过标签为家人的边,走1到4度到达的person点",
        "output": "match(a:person where a.name='韩宏')-[e:family]->{1,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是tag的全部点,并根据name升序排列",
        "output": "match(a:tag) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到一个与陈建聪和孙红都有联系的人。",
        "output": "match(a where a.name='陈建聪')-[e]->(b:person)<-[e2]-(c where c.name='孙红') return b limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与部门耳鼻喉科有拥有关系的1度以内的环",
        "output": "match(a:department where name = '耳鼻喉科')-[e:has]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和account XiaoHu之间有repay关系的loan",
        "output": "match(a:account where a.name='XiaoHu')-[e:repay]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有用户源点标签为user,边标签为likes的边，并返回这些边的目标节点ID对目标节点ID取余加上122.28除以172再除以179.43对117.14取余的值，以及f0减去595减去106.17的值。",
        "output": "match(a:user)-[e:likes]->(b) return (e.targetId % e.targetId + 122.28) / 172 / 179.43 % 117.14, e.f0 - 595 - 106.17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与医生郑强有关,且与处方Prescription_429有关系的病人节点",
        "output": "match(a:doctor where a.name='郑强')-[e:diagnose]-(b:patient)-[e2:accept]-(c:prescription where c.name='Prescription_429') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person李伟有家人关系的person,再查找以朋友关系关联了李伟的person",
        "output": "match(a:person where a.name = '李伟')-[e:family]->(b:person),(a:person where a.name = '李伟')<-[e2:friend]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从买家韩国强出发,经过标签等于创造的边,走3跳或4跳到达的订单点",
        "output": "match(a:buyer where a.name='韩国强')-[e:creates]->{3,4}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询177个和类型是person的点有watch关系的film,且和这些film有has关系的tag",
        "output": "match(a:person)-[e:watch]->(b:film)-[e2:has]->(c:tag) return c limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "peopleNumber对9337取余的最小值",
        "output": "MIN(a.peopleNumber % 9337)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表915,738, 源点的id等于输入表id,找出教师吴建国教的课程,被其他学生选择的数量",
        "output": "with p as (select * from (VALUES(915),(738)) as t(id)) MATCH (a:teacher WHERE a.id = p.id AND (a.name = '吴建国')) -[e:teacher_teach_course ]->(b:course) <-[e2:student_selects_course ]-(c:student) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(185,87,1),(189,99,28),(170,87,27)作为请求表数据,属性分别为height,age,id, 以属性height作为相等条件,返回所有源点标签等于作家,目标点标签等于作家,标签等于author_knows_author的边",
        "output": "with p as (select * from (VALUES(185,87,1),(189,99,28),(170,87,27)) as t(height,age,id))MATCH (a:author WHERE a.height = p.height) -[e:author_knows_author ]->(b:author) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点满足条件薪资大于等于5016,目标点满足条件薪资不为空,且类型为家人的边",
        "output": "match(a where a.salary >= 5016)-[e:family]->(b where (b.salary is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 点名吴雪和韩建聪，他们是卖家伙伴节点的公共名。",
        "output": "match(a:seller where a.name='吴雪')-[e:partner]->(b)<-[e2:partner]-(c:seller where c.name='韩建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回软件Geaflow的朋友,的f0的平均值加943的值",
        "output": "match(a:software where a.name= 'Geaflow')-[e:friend]->(b) return AVG(e.f0) + 943",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵红和郑思琪这两位作家的共同合作伙伴。",
        "output": "match(a:author where a.name='赵红')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='郑思琪') return b limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我按id、amount和weight对loan进行分组，并按照weight从大到小排序结果",
        "output": "match(a:loan) return a.weight group by a.id, a.amount, a.weight order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person张宏likes的person, 令person的age等于person的name,令person的gender等于person的id的和对58取余,令person(a)的gender等于person(b)的gender, 返回person(a)的id, person(b)的gender",
        "output": "match(a:person where a.name='张宏')-[e:likes]->(b:person) let b.age = b.name,let a.gender = SUM(a.id) % 58,let a.gender = b.gender return a.id,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以creates关系关联了pullRequest PR-246的user",
        "output": "match(a:pullRequest where a.name='PR-246')<-[e:creates]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出吴强和何伟的共同朋友，他们各有65位。",
        "output": "match(a:user where a.name='吴强')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='何伟') return b limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先查询与公司ID为31的大学的关联，再查询与大学有关的朋友。",
        "output": "match(a:company where id = '31')-[e]-(b:university)-[e2:relation]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出赵梅和吴强共同创建的点",
        "output": "match(a:person where a.name='赵梅')-[e:creates]->(b)<-[e2:creates]-(c:person where c.name='吴强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与university重庆大学存在cooperate关系,且与city杭州存在belong关系的company节点，返回这些company的value,name,及university重庆大学的level,及city杭州的peopleNumber",
        "output": "match(a:university where a.name='重庆大学')-[e:cooperate]->(b:company)<-[e2:belong]-(c:city where c.name='杭州') return a.level,b.value, b.name,c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,age, 数据为(3253,186,53),(7627,154,68),(4733,189,22),(4978,150,56), 源点的age等于输入表age,查询所有与买家有关系的商品节点,且商品节点的价值不等于925,并返回这些点的price的最小值乘4075.67的最小值,以及价值减价值的最大值",
        "output": "with p as (select * from (VALUES(3253,186,53),(7627,154,68),(4733,189,22),(4978,150,56)) as t(salary,height,age))MATCH (a:buyer WHERE a.age = p.age) -[e ]->(b:goods WHERE b.value <> 925) RETURN MIN(MIN(b.price) * 4075.67), MAX(b.value - b.value) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点label为国家,边label为包含的边,返回这些边的f0除821的平均值,和targetId的求和值对164取余的值",
        "output": "match(a:country)-[e:contain]->(b) return AVG(e.f0 / 821), SUM(e.targetId) % 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回性别不等于famale或身高为161的用户发布的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:user where a.gender <> 'famale' or a.height = 161)-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,price分组,计算id乘34的平均值",
        "output": "return AVG(a.id * 34) group by a.value, a.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Order_477的点包含的所有商品,并对这些商品的价格进行求和",
        "output": "match(a where a.name='Order_477')-[e:contain]->(b:goods) return SUM(b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与orders Order_340有关系的orders的name",
        "output": "match(a:orders where a.name='Order_340')-[e]-(b:orders) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标签为'person'且有同事关系的44个'person'，以及与这些'person'有父母关系的'person'。",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:parent]->(c:person) return c limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按照部门ID、值和名称对值进行分组，并根据值进行降序排序。",
        "output": "match(a:department) return a.value group by a.id, a.value, a.name order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加id的值",
        "output": "a.id + a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出韩国强认识的所有其他人物。",
        "output": "match(a:person where a.name='韩国强')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为天津的,规格不是large或名字大于88的相关者,返回这些相关者的人数,和边的权重,源点id,f0",
        "output": "match(a where a.name='天津')-[e:relation]->(b where b.scale <> 'large' or b.name > 88) return b.peopleNumber,e.weight, e.srcId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出性别降序排列的88个ID大于91的人。",
        "output": "match(a:person where a.id > 91) return a order by a.gender desc limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person黄雪的伙伴,的权重乘权重的平均值",
        "output": "match(a:person where a.name= '黄雪')-[e:partner]->(b) return AVG(e.weight * e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型是学生的点有选择关系的课程,并且和这些课程有属于关系的部门,并且和这些部门有拥有关系的学生",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:student) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person韩建聪支付的person节点喜欢的person",
        "output": "match(a:person where a.name = '韩建聪')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与部门皮肤科存在拥有关系,且与处方Prescription_231存在创造关系的医生节点，返回这些医生的id,薪资,及部门皮肤科的权重,及处方Prescription_231的权重",
        "output": "match(a:department where a.name='皮肤科')-[e:has]->(b:doctor)<-[e2:creates]-(c:prescription where c.name='Prescription_231') return a.weight,b.id, b.salary,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为178的pullRequest belong的repository, 并将repository有关的user的salary的个数赋值给repository的id, 接着查询repository的id小于178的repository has的issue",
        "output": "match(a:pullRequest where a.id = 178)-[e:belong]->(b:repository) let b.id = COUNT((b:repository)-[e2]-(c:user) => c.salary) match(b:repository where b.id < 178)-[e3:has]->(d:issue) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以拥有关系关联了学生徐强的部门",
        "output": "match(a:student where a.name='徐强')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为陈国强的节点喜欢的读者",
        "output": "match(a where a.name='陈国强')-[e:likes]->(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点价值大于等于317,边类型是拥有,且源点id大于170或源点id大于等于125,且f1为true的边,返回这些边的源点id除93的求和值",
        "output": "match(a where a.value >= 317)-[e:has where (e.srcId > 170 or e.srcId >= 125) and e.f1 = true]->(b) return SUM(e.srcId / 93)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,address, 数据为(30,'UME','C栋'),(71,'大众影院','东区')的子查询作为输入表, 源点的name等于输入表name,查找label为电影的点,返回144个",
        "output": "with p as (select * from (VALUES(30,'UME','C栋'),(71,'大众影院','东区')) as t(id,name,address))MATCH (a:film WHERE a.name = p.name) RETURN a LIMIT 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的数量减id的数量",
        "output": "COUNT(COUNT(a.id) - a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字,价值分组,计算价值加46的最大值",
        "output": "return MAX(a.value + 46) group by a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'zy', 0作为输入调用triangleCount函数,返回运算结果",
        "output": "Call TRIANGLECOUNT('zy', 0) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和买家杜科有关系的卖家,返回这些点的id,价值",
        "output": "match(a:buyer where a.name='杜科')-[e]-(b:seller) return b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部company的friend,或其friend的friend",
        "output": "match(a:company)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找145个salary不是8370的person,根据age从小到大排列",
        "output": "match(a:person where a.salary <> 8370) return a order by a.age asc limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为Tugraph的repository,以及与其有关的pullRequest,并返回Tugraph的stars和这些pullRequest的name",
        "output": "match(a:repository where name = 'Tugraph')-[e]-(b:pullRequest) return a.stars, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有源点标签等于forum,目标点标签等于person,标签等于forum_contain_person的边",
        "output": "match(a:forum)-[e:forum_contain_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询168个和类型为公司的点有雇佣关系的person,且和这些person有提交关系的软件",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:commits]->(c:software) return c limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与电影院好视影院有上映关系的2跳的环",
        "output": "match(a:cinema where name = '好视影院')-[e:releases]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据买家王思思创建的订单，返回包含商品价格和销量的订单信息。",
        "output": "match(a:buyer where name = '王思思')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.price, c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为43的teacher及其伙伴，再查找与teacher相关的relation。",
        "output": "match(a:teacher where id = '43')-[e]-(b:teacher)-[e2:partner]->(c), (b:teacher)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找179个与Order_277和Order_427都存在关系的seller节点",
        "output": "match(a where a.name='Order_277')-[e]->(b:seller)<-[e2]-(c where c.name='Order_427') return b limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为陈红的点认识的person",
        "output": "match(a where a.name='陈红')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家杜轩查看的商品,以及查看这些商品的买家",
        "output": "match(a:buyer where name = '杜轩')-[e:look]->(b:goods)<-[e2:look]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您需要查询的是所有reader之间的关系，还是reader和其关系之间的关系？",
        "output": "match(a:reader)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型是部门,边类型是拥有,且满足条件权重不为空,目标点id为空,或源点id小于106的边",
        "output": "match(a:department)-[e:has where ((e.weight is not null) and (e.targetId is null)) or e.srcId < 106]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为person的点有家人关系的person,以及和这些person有恋人关系的person,以及和这些person有家人关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:lover]->(c:person)-[e3:family]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 请帮我查找与孙轩存在user_likes_post关系的帖子,帖子与标签存在post_has_tag关系的点,返回这些点的id;2: 查询名为中国诗词论坛的点包含的帖子;3: 查询名为李轩的user,以及与其有关的tag,并返回李轩的gender和这些tag的id;4: 请帮我查找forum以value,peopleNumber,name分组的value, 根据value从小到大排序;5: 查询从user徐科出发,经过label为user_publish_post的边,走2跳或3跳到达的post点;6: 帮我查询所有用户以id分组的id, 根据id降序排序;7: 查询41个height为空的person,根据age从大到小排列;8: 请帮我查找全部源点标签等于user,边标签等于user_publish_post,且满足条件timeStamp为2026年04月01日,weight不为空,或f0是721的边;",
        "output": "查询语句为:1: match(a where a.name = '孙轩')-[e:user_likes_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c.id;2: match(a where a.name='中国诗词论坛')-[e:forum_contain_post]->(b:post) return b;3: match(a:user where name = '李轩')-[e]-(b:tag) return a.gender, b.id;4: match(a:forum) return a.value group by a.value, a.peopleNumber, a.name order by a.value asc;5: match(a:user where a.name='徐科')-[e:user_publish_post]->{2,3}(b:post) return b;6: match(a:user) return a.id group by a.id order by a.id desc;7: match(a:person where (a.height is null)) return a order by a.age desc limit 41;8: match(a:user)-[e:user_publish_post where (e.timeStamp = '2026-04-01' and (e.weight is not null)) or e.f0 = 721]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回buyer Alice的合作伙伴的合作伙伴",
        "output": "match(a:buyer where a.name='Alice')-[e:partner]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出68个药品，按照名称从小到大排列，其中重量大于835或者重量减去766的最大值大于等于10。",
        "output": "match(a:prescription where MAX(a.weight - 766) >= 10 or a.weight > 835) return a order by a.name asc limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,height,id, 数据为('孙思思',151,92)的子查询作为输入表, 源点的height等于输入表height,查询前21个label为person_knows_person的边",
        "output": "with p as (select * from (VALUES('孙思思',151,92)) as t(name,height,id))MATCH (a WHERE a.height = p.height) -[e:person_knows_person ]->(b) RETURN e LIMIT 21",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person张宏有关,且与person陈伟有关系的person节点",
        "output": "match(a:person where a.name='张宏')-[e:knows]-(b:person)-[e2:likes]-(c:person where c.name='陈伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和person点有喜欢关系的person节点,且边满足条件f0不等于816,目标person节点名字不是Tom",
        "output": "match(a:person)-[e:likes where e.f0 <> 816]->(b:person where b.name <> 'Tom') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id除26的最大值",
        "output": "return MAX(a.id / 26) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有category为film的点，并按照category从小到大排序。",
        "output": "match(a:film) return a order by a.category asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找和标签为person的点有person_friend_person关系的person,并且和这些person有person_friend_person关系的person,并且和这些person有person_friend_person关系的person;2: 找出和person马科有person_colleague_person关系的person,再找出以person_family_person关系关联了马科的person;3: 给出与person孙轩和马强都存在person_lover_person关系的点;",
        "output": "查询语句为:1: match(a:person)-[e:person_friend_person]->(b:person)-[e2:person_friend_person]->(c:person)-[e3:person_friend_person]->(d:person) return d;2: match(a:person where a.name = '马科')-[e:person_colleague_person]->(b:person),(a:person where a.name = '马科')<-[e2:person_family_person]-(c:person)return a, b, c;3: match(a:person where a.name='孙轩')-[e:person_lover_person]->(b)<-[e2:person_lover_person]-(c:person where c.name='马强') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出loan loan_44 deposit的account, 令account的id等于loan的id,令loan的lastLoginTime等于account的id的求和值,令account的id等于account的id加84, 返回loan的weight, account的name",
        "output": "match(a:loan where a.name='loan_44')-[e:deposit]->(b:account) let b.id = a.id,let a.lastLoginTime = SUM(b.id),let b.id = b.id + 84 return a.weight,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和公司有关联的城市节点,并根据其面积分组,返回面积,以及id乘3除913乘30837加人数的值",
        "output": "match(a:company)-[e:belong]-(b:city) return b.area, b.id * 3 / 913 * 30837 + b.peopleNumber group by b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary的最小值加4127的平均值",
        "output": "return AVG(MIN(a.salary) + 4127) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点满足条件名字的个数小于等于805,人数小于等于801,目标点满足条件创建时间为1995年05月04日且创建时间为1997年10月29日且语言为German,且label为包含的边",
        "output": "match(a where COUNT(a.name) <= 805 and a.peopleNumber <= 801)-[e:contain]->(b where b.createTime = '1995-05-04' and b.createTime = '1997-10-29' and b.lang = 'German') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,name分组,计算id加56的求和值",
        "output": "return SUM(a.id + 56) group by a.level, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询loan的三角的环,边类型为deposit, 并返回这些点的id",
        "output": "match(a:loan)-[e:deposit]->(b)-[e2:deposit]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与赵强有关的人，再查询赵强喜欢的其他帖子，返回它们。",
        "output": "match(a:user where a.name = '赵强')-[e]-(b:person), (a:user)-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王建聪的person或公司或软件,以及与其有关的软件,并返回王建聪的性别和这些软件的价值",
        "output": "match(a:person | company | software where name = '王建聪')-[e]-(b:software) return a.gender, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出作家黄建国撰写的书节点认识的书",
        "output": "match(a:author where a.name = '黄建国')-[e:write]->(b:book)-[e2:knows]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签为publisher的点有publish关系的book,并且和这些book有refers关系的book,并且和这些book有refers关系的book",
        "output": "match(a:publisher)-[e:publish]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 查询university电子科技大学 belong的city,返回city belong的country的value的平均值乘537减peopleNumber乘199的平均值 ;2: 帮我查询university以value,id,name分组的level, 根据level降序排序;3: 给出所有源点类型是公司,目标点类型是城市,类型是company_belong_city的边;4: 查找名为浙江大学的大学,以及与其有关的公司,并返回浙江大学的价值和这些公司的价值;5: 给出名为伦敦的点包含的大学,并对这些点的名字进行求和;",
        "output": "查询语句为:1: match(a:university where name = '电子科技大学')-[e:university_belong_city]->(b:city)-[e2:city_belong_country]->(c:country) return AVG((AVG(c.value) * 537 - c.peopleNumber) * 199);2: match(a:university) return a.level group by a.value, a.id, a.name order by a.level desc;3: match(a:company)-[e:company_belong_city]->(b:city) return e;4: match(a:university where name = '浙江大学')-[e]-(b:company) return a.value, b.value;5: match(a where a.name='伦敦')-[e:city_contain_university]->(b:university) return SUM(b.name);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和作家有关联的书节点,并根据其id,创建时间,价格分组,返回id,创建时间,价格,以及id减33的个数",
        "output": "match(a:author)-[e:write]-(b:book) return b.id, b.createTime, b.price, COUNT(b.id - 33) group by b.id, b.createTime, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 返回127个与阿里和谷歌都存在关系的university节点;2: 帮我查询所有源点类型为company,目标点类型为city,类型为company_belong_city的边;3: 帮我查询id为72的点的area;4: 请帮我查找名为东京和广州的,标签等于city的点公共的partner节点的名单;5: 返回全部与国家日本有关系的国家的人数;6: 返回全部源点label为大学,边label为university_belong_city,且目标点id为空且目标点id不是79,权重不为空的边;7: 给出所有与中国科技大学存在university_belong_city关系的城市,城市与公司存在city_contain_company关系的点,返回这些点的名字;",
        "output": "查询语句为:1: match(a where a.name='阿里')-[e]->(b:university)<-[e2]-(c where c.name='谷歌') return b limit 127;2: match(a:company)-[e:company_belong_city]->(b:city) return e;3: match(a where a.id = '72') return a.area;4: match(a:city where a.name='东京')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='广州') return b.name;5: match(a:country where a.name='日本')-[e]-(b:country) return b.peopleNumber;6: match(a:university)-[e:university_belong_city where (e.targetId is null) and e.targetId <> 79 and (e.weight is not null)]->(b) return e;7: match(a where a.name = '中国科技大学')-[e:university_belong_city]->(b:city)-[e2:city_contain_company]->(c:company) return c.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为韩建聪和何科的点共同支付的,类型是person的节点",
        "output": "match(a where a.name = '韩建聪')-[e:pay]->(b:person)<-[e2:pay]-(c where c.name = '何科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,age,height, 数据为('male',5,198),('male',66,151),('male',1,168),('famale',24,156)的子查询作为输入表, 源点的age等于输入表age,查询111个和类型为person的点有person_parent_person关系的person,并且和这些person有person_family_person关系的person",
        "output": "with p as (select * from (VALUES('male',5,198),('male',66,151),('male',1,168),('famale',24,156)) as t(gender,age,height))MATCH (a:person WHERE a.age = p.age) -[e:person_parent_person ]->(b:person) -[e2:person_family_person ]->(c:person) RETURN c LIMIT 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表134,229,225,657,570, 源点的id等于输入表id,请帮我查找权重的最小值是519,金额为空的贷款存款的账号的名称,以及这些账号 还款的贷款的名称",
        "output": "with p as (select * from (VALUES(134),(229),(225),(657),(570)) as t(id)) MATCH (a:loan WHERE a.id = p.id AND (MIN(a.weight) = 519 AND a.amount IS NULL)) -[e:loan_deposit_account ]->(b:account) -[e2:account_repay_loan ]->(c:loan) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和部门点有拥有关系的教师节点,且边满足条件目标点id在58到79之间,目标教师节点满足条件身高不等于188",
        "output": "match(a:department)-[e:has where (e.targetId BETWEEN 58 AND 79)]->(b:teacher where b.height <> 188) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 给出和film有关联的tag节点,并根据其value分组,返回value,以及id减id乘5乘254的最大值;2: 查找名为王国强和黄科的,标签等于person的点公共的partner节点的名单;3: 返回评论Comment_132的标签等于相关者的边,并根据目标点id从小到大排列,返回118个;4: 给出和film泰坦尼克号有2跳或3跳关系的cinema;5: 请帮我找出person周月的相关者,的f0对699取余加109的值;6: 帮我查询所有源点类型是comment,边类型是comment_belong_film,并且满足条件targetId不为空且f1不等于true,targetId大于等于15的边;7: 帮我查询全部和person王伟之间有person_likes_comment关系的comment;",
        "output": "查询语句为:1: match(a:film)-[e:film_has_tag]-(b:tag) return b.value, MAX((b.id - b.id) * 5 * 254) group by b.value;2: match(a:person where a.name='王国强')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='黄科') return b.name;3: match(a:comment where a.name = 'Comment_132')-[e:relation]->(b) return b order by e.targetId asc limit 118;4: match(a:film where a.name='泰坦尼克号')-[e]->{2,3}(b:cinema) return b;5: match(a:person where a.name= '周月')-[e:relation]->(b) return e.f0 % 699 + 109;6: match(a:comment)-[e:comment_belong_film where (e.targetId is not null) and e.f1 <> true and e.targetId >= 15]->(b) return e;7: match(a:person where a.name='王伟')-[e:person_likes_comment]->(b:comment) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被订单Order_320包含的商品,和Order_320包含的商品",
        "output": "match(a:goods)<-[e:contain]-(b:orders where name = 'Order_320')-[e2:contain]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person李思思有commits关系的3度以内的环",
        "output": "match(a:person where name = '李思思')-[e:commits]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与标签相关的评论节点，要求评论节点的字数不为空。然后计算这些节点的id减去38的数量，并返回id除以24的最大值。",
        "output": "match(a:tag)-[e]->(b:comment where (b.wordCount is not null)) return COUNT(b.id - 38), MAX(b.id / 24)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询部门体育学院的标签等于伙伴的边,并根据f1降序排列,返回177个",
        "output": "match(a:department where a.name = '体育学院')-[e:partner]->(b) return b order by e.f1 desc limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询韩建聪喜欢的评论，再查询韩建聪观看过的电影",
        "output": "match(a:person where a.name = '韩建聪')-[e:likes]->(b:comment),(a:person where a.name = '韩建聪')<-[e2:watch]-(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回creates orders Order_369的buyer,和这些buyer consult的seller",
        "output": "match(a:orders where name = 'Order_369')<-[e:creates]-(b:buyer)-[e2:consult]->(c:seller) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对19取余除薪资的个数",
        "output": "COUNT(a.age % 19 / a.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和大学南京大学有2到4度关系的国家",
        "output": "match(a:university where a.name='南京大学')-[e]->{2,4}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));给出175个名为张红的点write的label为book的节点,且其id在36到48之间",
        "output": "match(a where a.name='张红')-[e:author_write_book]->(b:book where (b.id BETWEEN 36 AND 48)) return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点name为TheShy或id对71取余大于884,边类型为repay,且f1不等于true或srcId小于等于103的边,返回这些边的srcId加40对686取余的个数",
        "output": "match(a where a.name = 'TheShy' or a.id % 71 > 884)-[e:repay where e.f1 <> true or e.srcId <= 103]->(b) return COUNT(e.srcId + 40 % 686)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为price,id,name, 数据为(3601.53,61,'Order_130'),(3903.51,71,'Order_321'),(2760.18,63,'Order_107'),(1798.53,13,'Order_201'), 以属性name作为相等条件,请帮我找出和订单Order_341有orders_contain_goods关系的商品,以及和买家赵建聪有buyer_cancel_orders关系的订单,将它们都返回",
        "output": "with p as (select * from (VALUES(3601.53,61,'Order_130'),(3903.51,71,'Order_321'),(2760.18,63,'Order_107'),(1798.53,13,'Order_201')) as t(price,id,name))MATCH (a:orders WHERE a.name = p.name AND (a.name = 'Order_341')) -[e:orders_contain_goods ]->(b:goods) , (c:buyer WHERE c.name = '赵建聪') -[e2:buyer_cancel_orders ]->(d:orders) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与王建国有关联的投资公司，以及与王建国有关联的贷款申请。",
        "output": "match(a:person where a.name = '王建国')-[e:invest]->(b:company),(a:person where a.name = '王建国')<-[e2:apply]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询145个和标签为买家的点有创造关系的订单,并且和这些订单有包含关系的商品",
        "output": "match(a:buyer)-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询university北京大学的所有partner,的weight的最大值对weight取余乘198.79的最小值",
        "output": "match(a:university where a.name= '北京大学')-[e:partner]->(b) return MIN(MAX(e.weight) % e.weight * 198.79)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前27个名字不等于生物学院或id是51,且名字为经管学院的部门",
        "output": "match(a:department where (a.name <> '生物学院' or a.id = 51) and a.name = '经管学院') return a limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找关联person韩雪认识的person,的person",
        "output": "match(a:person where name = '韩雪')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为横店影院的点上映的电影",
        "output": "match(a where a.name='横店影院')-[e:releases]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person认识的person,返回其源点的年龄减年龄的最小值,以及目标点的薪资减4920的值",
        "output": "match(a:person)-[e:knows]->(b:person) return MIN(a.age - a.age), b.salary - 4920",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找和doctor黄思琪有doctor_diagnose_patient关系的patient,以及和doctor何宏有doctor_creates_prescription关系的prescription,将它们都返回;2: 计算所有病人的年龄除33的值;3: 计算所有doctor的age除63的和;4: 返回和处方Prescription_427有关的部门,称为X,再返回和这个X有关联的其他处方,以及和X有关联的医生;5: 返回所有名为杜强的,id小于等于72,address不等于B座的relation,返回这些relation的name,和边的f0,weight,f1;6: 查找144个与阿司匹林和布洛芬都存在关系的prescription节点;",
        "output": "查询语句为:1: match(a:doctor where a.name = '黄思琪')-[e:doctor_diagnose_patient]->(b:patient),(c:doctor where c.name = '何宏')-[e2:doctor_creates_prescription]->(d:prescription)return a, b, c, d;2: match(a:patient) return a.age / 33;3: match(a:doctor) return SUM(a.age / 63);4: match(a:prescription where a.name = 'Prescription_427')-[e]-(b:department), (b:department)-[e2]-(c:prescription),(b:department)-[e3]-(d:doctor) return a, b, c, d;5: match(a where a.name='杜强')-[e:relation]->(b where b.id <= 72 and b.address <> 'B座') return b.name,e.f0, e.weight, e.f1;6: match(a where a.name='阿司匹林')-[e]->(b:prescription)<-[e2]-(c where c.name='布洛芬') return b limit 144;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询赵强朋友的朋友的伙伴。",
        "output": "match(a:person where a.name='赵强')-[e:friend]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以110作为请求点id, 以属性id作为相等条件,请帮我找出以watch关系关联了film绿巨人的person",
        "output": "with p as (select * from (VALUES(110)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '绿巨人')) <-[e:person_watch_film ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找44个学生杜雪和Jack,共同的伙伴",
        "output": "match(a:student where a.name='杜雪')-[e:partner]->(b)<-[e2:partner]-(c:student where c.name='Jack') return b limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以134,250,1,999作为请求点id, 源点的id等于输入表id,查找和loan defaultName有关的company,再查找和 defaultName loan_deposit_account的其他account,返回它们",
        "output": "with p as (select * from (VALUES(134),(250),(1),(999)) as t(id)) MATCH (a:loan WHERE a.id = p.id AND (a.name = 'defaultName')) -[e ]-(b:company) , (a:loan) -[e2:loan_deposit_account ]->(c:account) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和评论Comment_493之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_493')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询gender不是famale的buyer consult的seller的名称,以及这些seller has的goods的名称",
        "output": "match(a:buyer where a.gender <> 'famale')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与吴宏有联系的人，并找出这些人之间的关联关系，最后返回这些关联关系的性别。",
        "output": "match(a where a.name = '吴宏')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为SprintBoot的点uses的所有software,并对这些software的lang进行求和",
        "output": "match(a where a.name='SprintBoot')-[e:uses]->(b:software) return SUM(b.lang)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛中国诗词论坛包含的帖子,被其他用户喜欢的数量",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和person点有申请关系的贷款节点,且边满足条件源点id不等于157,目标贷款节点权重在210到640之间",
        "output": "match(a:person)-[e:apply where e.srcId <> 157]->(b:loan where (b.weight BETWEEN 210 AND 640)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,gender, 数据为(196,46,'famale'),(153,97,'famale'),(170,13,'famale'),(190,21,'famale')的子查询作为输入表, 源点的gender等于输入表gender,帮我查询全部名为吴思思的点的,名字等于孙梅的伙伴,返回这些伙伴的年龄,和边的f0,权重",
        "output": "with p as (select * from (VALUES(196,46,'famale'),(153,97,'famale'),(170,13,'famale'),(190,21,'famale')) as t(height,id,gender))MATCH (a WHERE a.gender = p.gender AND (a.name = '吴思思')) -[e:partner ]->(b WHERE b.name = '孙梅') RETURN b.age, e.f0, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与马宏有好友关系，与王轩有恋人关系的节点，返回这些节点的名字，马宏的名字和王轩的身高。",
        "output": "match(a:person where a.name='马宏')-[e:friend]->(b:person)<-[e2:lover]-(c:person where c.name='王轩') return a.name,b.name,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,age, 数据为(6318,155,71),(2053,156,34),(5486,181,72), 以属性height作为相等条件,帮我查询id为105的读者关联的书,和以关联关系关联了这些书的其他书",
        "output": "with p as (select * from (VALUES(6318,155,71),(2053,156,34),(5486,181,72)) as t(salary,height,age))MATCH (a:reader WHERE a.height = p.height AND (a.id = '105')) -[e ]-(b:book) <-[e2:relates ]-(c:book) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为杜伟的读者,以及与其有关的书,并返回杜伟的id和这些书的创建时间",
        "output": "match(a:reader where name = '杜伟')-[e]-(b:book) return a.id, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回订单名Order_287的点的ID和值。",
        "output": "match(a:orders where a.name = 'Order_287') return a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出韩雪和黄轩共同的父节点，这些父节点都标记为'person'。",
        "output": "match(a:person where a.name='韩雪')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='黄轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找男性且身高不为159或薪水大于等于197的54个人，并按年龄降序排列。",
        "output": "match(a:person where (a.gender = 'male' and a.height <> 159) or COUNT(a.salary * 7179 / a.id / 4214) >= 197) return a order by a.age desc limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回48个非Java软件，按ID降序排列。",
        "output": "match(a:software where a.lang <> 'java') return a order by a.id desc limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表19,974,757,284,993, 以属性id作为相等条件,返回98个编辑郑思琪和Bob,共同的朋友",
        "output": "with p as (select * from (VALUES(19),(974),(757),(284),(993)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (a.name = '郑思琪')) -[e:friend ]->(b) <-[e2:friend ]-(c:publisher WHERE c.name = 'Bob') RETURN b LIMIT 98",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询106个读者马轩和Tom,共同的伙伴",
        "output": "match(a:reader where a.name='马轩')-[e:partner]->(b)<-[e2:partner]-(c:reader where c.name='Tom') return b limit 106",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从department经管学院出发,经过label为has的边,走2到5度到达的student点",
        "output": "match(a:department where a.name='经管学院')-[e:has]->{2,5}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与 department经管学院 有 has 关系，且与 course大学英语 有 selects 关系的 student 节点，返回这些 student 的 name、salary、department经管学院的 id 和 course大学英语的 name。",
        "output": "match(a:department where a.name='经管学院')-[e:has]->(b:student)<-[e2:selects]-(c:course where c.name='大学英语') return a.id,b.name, b.salary,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与city有关系的company节点,且company节点的value小于545,并返回这些company的id的最大值乘27的求和值,以及company的peopleNumber对575取余的值",
        "output": "match(a:city)-[e]->(b:company where b.value < 545) return SUM(MAX(b.id) * 27), b.peopleNumber % 575",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为创造,并且权重为108.60或时间戳不是2000年10月18日,且f1是true的边",
        "output": "match(a)-[e:creates where (e.weight = 108.60 or e.timeStamp <> '2000-10-18') and e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有person以height分组的name, 根据name从小到大排序",
        "output": "match(a:person) return a.name group by a.height order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询徐轩投资的公司，并返回该公司申请的贷款的ID、金额和重量。",
        "output": "match(a:person where name = '徐轩')-[e:invest]->(b:company)-[e2:apply]->(c:loan) return c.id, c.amount, c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄除年龄的值",
        "output": "a.age / a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询177个person马伟和李强,共同的朋友",
        "output": "match(a:person where a.name='马伟')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='李强') return b limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,name分组,计算salary对salary取余除34除5435的值",
        "output": "return a.salary % a.salary / 34 / 5435 group by a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据createTime,weight,name分组,计算weight乘266的求和值",
        "output": "return SUM(a.weight * 266) group by a.createTime, a.weight, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与医生赵若涵和药品枇杷糖浆相关的处方节点",
        "output": "match(a:doctor where a.name='赵若涵')-[e:creates]-(b:prescription)-[e2:contain]-(c:medicine where c.name='枇杷糖浆') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 帮我查询全部post以createTime,wordCount分组的wordCount, 根据wordCount从大到小排序;2: 帮我查询user publish的post,返回其源点的age乘17的最大值,以及目标点的value乘370的最小值;3: 给出标签等于帖子,名为Post_221的点,返回这些点的字数,语言,价值;4: 返回前128个类型是forum_contain_person的边;5: 请帮我查找与person有关系的person节点,且person节点的height为空,并返回这些点的salary的数量加4641除34的值,以及height对161取余的值;6: 查找156个名为Post_265的点has的label为tag的节点,且其name不是文艺;7: 查找和用户赵思思有user_likes_post关系的帖子,以及和论坛中国诗词论坛有forum_contain_post关系的帖子,将它们都返回;8: 查询所有person以年龄,性别,id分组的薪资, 根据薪资降序排序;",
        "output": "查询语句为:1: match(a:post) return a.wordCount group by a.createTime, a.wordCount order by a.wordCount desc;2: match(a:user)-[e:user_publish_post]->(b:post) return MAX(a.age * 17), MIN(b.value * 370);3: match(a:post where a.name = 'Post_221') return a.wordCount, a.lang, a.value;4: match(a)-[e:forum_contain_person]->(b) return e limit 128;5: match(a:person)-[e]->(b:person where (b.height is null)) return (COUNT(b.salary) + 4641) / 34, b.height % 161;6: match(a where a.name='Post_265')-[e:post_has_tag]->(b:tag where b.name <> '文艺') return b limit 156;7: match(a:user where a.name = '赵思思')-[e:user_likes_post]->(b:post),(c:forum where c.name = '中国诗词论坛')-[e2:forum_contain_post]->(d:post)return a, b, c, d;8: match(a:person) return a.salary group by a.age, a.gender, a.id order by a.salary desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找合并请求的3度以内的环",
        "output": "match(a:pullRequest)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,name,gender, 数据为(61,'张建聪','male'),(87,'杜思思','famale'),(22,'韩建国','famale'),(8,'黄月','male')的子查询作为输入表, 以属性gender作为相等条件,帮我查询所有person以height,salary分组的age, 根据age从小到大排序",
        "output": "with p as (select * from (VALUES(61,'张建聪','male'),(87,'杜思思','famale'),(22,'韩建国','famale'),(8,'黄月','male')) as t(age,name,gender))MATCH (a:person WHERE a.gender = p.gender) RETURN a.age GROUP BY a.height, a.salary ORDER BY a.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有满足以下条件的用户：年龄在33到81之间，名字不是赵思琪，身高不为空，并按照身高从小到大排序。这些用户的数量应该是135。",
        "output": "match(a:user where (a.age BETWEEN 33 AND 81) and a.name <> '赵思琪' and (a.height is not null)) return a order by a.height asc limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,age, 数据为(5,8638,83),(2,8425,3),(85,9416,40),(93,7284,89)的子查询作为输入表, 源点的age等于输入表age,帮我查询和person有关联的person节点,并根据其薪资分组,返回薪资,以及年龄减28的值",
        "output": "with p as (select * from (VALUES(5,8638,83),(2,8425,3),(85,9416,40),(93,7284,89)) as t(id,salary,age))MATCH (a:person WHERE a.age = p.age) -[e:person_family_person ]-(b:person) RETURN b.salary, b.age - 28 GROUP BY b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛天涯论坛包含的帖子节点拥有的标签",
        "output": "match(a:forum where a.name = '天涯论坛')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表423,115,360,771,403, 源点的id等于输入表id,给出person的三角的环,边标签等于person_likes_person, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(423),(115),(360),(771),(403)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_likes_person ]->(b) -[e2:person_likes_person ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据wordCount,value,id分组,计算wordCount乘wordCount的值",
        "output": "return a.wordCount * a.wordCount group by a.wordCount, a.value, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被user赵思琪publish的post",
        "output": "match(a:post)<-[e:publish]-(b:user where b.name='赵思琪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部和名为电子科技大学的university有friend关系,或有friend的friend关系的city",
        "output": "match(a:university where n.name=电子科技大学)-[e:friend]->{1,2}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 找出和department经管学院有department_has_teacher关系的teacher,以及和student郑科有student_selects_course关系的course,将它们都返回;2: 查找部门经管学院的所有类型是朋友的边,并根据f1从大到小排列,返回37个;3: 找出student的三角的环,边标签为student_selects_course, 并返回这些点的id;4: 找出所有和名为经管学院的部门有伙伴关系,或有伙伴的伙伴关系的教师;",
        "output": "查询语句为:1: match(a:department where a.name = '经管学院')-[e:department_has_teacher]->(b:teacher),(c:student where c.name = '郑科')-[e2:student_selects_course]->(d:course)return a, b, c, d;2: match(a:department where a.name = '经管学院')-[e:friend]->(b) return b order by e.f1 desc limit 37;3: match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a:department where n.name=经管学院)-[e:partner]->{1,2}(b:teacher) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,age,name, 数据为(151,62,'韩轩'),(177,21,'周雪'),(194,17,'王伟'),(195,5,'吴建国'), 源点的name等于输入表name,请帮我找出person的三角的环,边类型为person_pay_person, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(151,62,'韩轩'),(177,21,'周雪'),(194,17,'王伟'),(195,5,'吴建国')) as t(height,age,name))MATCH (a:person WHERE a.name = p.name) -[e:person_pay_person ]->(b) -[e2:person_pay_person ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和teacher徐若涵有teacher_teach_course关系的course,以及和university浙江大学有university_has_department关系的department,将它们都返回",
        "output": "match(a:teacher where a.name = '徐若涵')-[e:teacher_teach_course]->(b:course),(c:university where c.name = '浙江大学')-[e2:university_has_department]->(d:department)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减id的个数",
        "output": "COUNT(a.id - a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与用户徐若涵有关,且与标签悬疑有关系的帖子节点",
        "output": "match(a:user where a.name='徐若涵')-[e:publish]-(b:post)-[e2:has]-(c:tag where c.name='悬疑') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家陈伟查看的商品, 令商品的性别等于买家的年龄的最小值, 返回买家的性别, 商品的id",
        "output": "match(a:buyer where a.name='陈伟')-[e:look]->(b:goods) let b.gender = MIN(a.age) return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前94个标签为包含的边",
        "output": "match(a)-[e:contain]->(b) return e limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找11个与Comment_303和Comment_461都存在关系的评论或电影院或电影节点",
        "output": "match(a where a.name='Comment_303')-[e]->(b:comment | cinema | film)<-[e2]-(c where c.name='Comment_461') return b limit 11",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person认识的person, 令person(b)的名字的值等于认识person的person的名字的最大值, 再查找person认识的person",
        "output": "match(a:person)-[e:knows]->(b:person) let b.name = MAX((b:person)<-[e2:knows]-(c:person) => c.name) match(b:person)-[e3:knows]->(d:person) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为购买,以及权重小于69或目标点id不等于539的边",
        "output": "match(a)-[e:buy where e.weight < 69 or e.targetId <> 539]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出选择学生Bob选择的课程,的学生",
        "output": "match(a:student where name = 'Bob')-[e:selects]->(b:course)<-[e2:selects]-(c:student) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以338作为请求点id, 源点的id等于输入表id,返回所有与论坛知网有关系的标签的价值",
        "output": "with p as (select * from (VALUES(338)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '知网')) -[e ]-(b:tag) RETURN b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部id为46的课程关联的课程,和以选择关系关联了这些课程的其他学生",
        "output": "match(a:course where a.id = 46)-[e]-(b:course)<-[e2:selects]-(c:student) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以907作为请求点id, 源点的id等于输入表id,帮我查询138个名为黄若涵的点relates的label为person的节点,且其age在20到52之间且gender是male",
        "output": "with p as (select * from (VALUES(907)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '黄若涵')) -[e:relates ]->(b:person WHERE b.age BETWEEN ASYMMETRIC 20 AND 52 AND b.gender = 'male') RETURN b LIMIT 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为徐月的user有friend关系,或有friend的friend关系的post",
        "output": "match(a:user where n.name=徐月)-[e:friend]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 找出127个company Bilibili和微软,共同的partner;2: 计算所有company的value对823取余乘45的最大值;3: 帮我查询和loan defaultName有关的company,再帮我查询和 defaultName loan_deposit_account的其他account,返回它们;4: 帮我查询类型为公司的点,返回69个;5: 请帮我查找和类型为贷款的点有loan_deposit_account关系的账号,以及和这些账号有account_repay_loan关系的贷款,以及和这些贷款有loan_deposit_account关系的账号;6: 帮我查询137个名为郑思琪的点拥有的label为账号的节点,且节点名字不等于Light或创建时间是2030年03月13日;7: 返回和账号Zeus有account_transfer_account关系的账号,以及和person李思思有person_apply_loan关系的贷款,将它们都返回;8: 请帮我查找标签等于贷款的点;9: 给出44个scale是medium的company,根据id降序排列;",
        "output": "查询语句为:1: match(a:company where a.name='Bilibili')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='微软') return b limit 127;2: match(a:company) return MAX(a.value % 823 * 45);3: match(a:loan where a.name = 'defaultName')-[e]-(b:company), (a:loan)-[e2:loan_deposit_account]->(c:account) return a, b, c;4: match(a:company) return a limit 69;5: match(a:loan)-[e:loan_deposit_account]->(b:account)-[e2:account_repay_loan]->(c:loan)-[e3:loan_deposit_account]->(d:account) return d;6: match(a where a.name='郑思琪')-[e:person_own_account]->(b:account where b.name <> 'Light' or b.createTime = '2030-03-13') return b limit 137;7: match(a:account where a.name = 'Zeus')-[e:account_transfer_account]->(b:account),(c:person where c.name = '李思思')-[e2:person_apply_loan]->(d:loan)return a, b, c, d;8: match(a:loan) return a;9: match(a:company where a.scale = 'medium') return a order by a.id desc limit 44;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为公司的点",
        "output": "match(a:company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出person以名字,薪资分组的名字, 根据名字降序排序;2: 查找全部源点类型为person,目标点类型为person,类型为person_family_person的边;3: 给出196个和类型是person的点有person_friend_person关系的person,以及和这些person有person_parent_person关系的person;",
        "output": "查询语句为:1: match(a:person) return a.name group by a.name, a.salary order by a.name desc;2: match(a:person)-[e:person_family_person]->(b:person) return e;3: match(a:person)-[e:person_friend_person]->(b:person)-[e2:person_parent_person]->(c:person) return c limit 196;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询从person李强出发,经过标签等于person_watch_film的边,走3到6跳到达的film点",
        "output": "match(a:person where a.name='李强')-[e:person_watch_film]->{3,6}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被用户创造数量大于53的事项,记为relationCount,再查询这些事项创造的用户",
        "output": "match(a:issue) let a.relationCount = MIN((a:issue)<-[e:creates]-(b:user) => b.id) match(a where a.relationCount > 53)-[e2:creates]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是company的点,返回31个",
        "output": "match(a:company) return a limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以287作为请求点id, 以属性id作为相等条件,请帮我查找前68个类型为user_likes_post的边",
        "output": "with p as (select * from (VALUES(287)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:user_likes_post ]->(b) RETURN e LIMIT 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与电影星际穿越有关系的person的身高",
        "output": "match(a:film where a.name='星际穿越')-[e]-(b:person) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与贷款违约名关联的账户，这些账户与偿还关系有关。",
        "output": "match(a:loan where a.name='defaultName')<-[e:repay]-(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出纽约和北京这两个城市类型的point节点所共有的partner节点列表。",
        "output": "match(a:city where a.name='纽约')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='北京') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person赵若涵认识的person,以及认识这些person的person",
        "output": "match(a:person where name = '赵若涵')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为157的标签有关的评论的朋友, 再请帮我查找和评论有关系的相关者",
        "output": "match(a:tag where id = 157)-[e]-(b:comment)-[e2:friend]->(c), (b:comment)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出133个名字不等于神探狄仁杰或类别等于文艺,且名字是西虹市首富的电影,根据价值从小到大排列",
        "output": "match(a:film where (a.name <> '神探狄仁杰' or a.category = '文艺') and a.name = '西虹市首富') return a order by a.value asc limit 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与post Post_451有关系的user的gender",
        "output": "match(a:post where a.name='Post_451')-[e]-(b:user) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部用户以id分组的身高, 根据身高从小到大排序",
        "output": "match(a:user) return a.height group by a.id order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李思琪和何强都有投资关系的人。",
        "output": "match(a:person where a.name='李思琪')-[e:invest]->(b)<-[e2:invest]-(c:person where c.name='何强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与公司字节有关系的贷款的id",
        "output": "match(a:company where a.name='字节')-[e]-(b:loan) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 请帮我找出和seller有关联的goods节点,并根据其price,id,sellerNumber分组,返回price,id,sellerNumber,以及id乘47的值;2: 请帮我查找id为130的点的id,name,salary;3: 给出前197个标签为buyer_cancel_orders的边;4: 查询买家韩若涵的标签为伙伴的边,并根据f0降序排列,返回158个;5: 请帮我查找前129个标签为seller_has_goods的边;6: 帮我查询buyer吴建国的所有relation,的targetId乘131的值;7: 查找买家徐建国的全部朋友,的源点id加111的值;",
        "output": "查询语句为:1: match(a:seller)-[e:seller_has_goods]-(b:goods) return b.price, b.id, b.sellerNumber, b.id * 47 group by b.price, b.id, b.sellerNumber;2: match(a where a.id = '130') return a.id, a.name, a.salary;3: match(a)-[e:buyer_cancel_orders]->(b) return e limit 197;4: match(a:buyer where a.name = '韩若涵')-[e:partner]->(b) return b order by e.f0 desc limit 158;5: match(a)-[e:seller_has_goods]->(b) return e limit 129;6: match(a:buyer where a.name= '吴建国')-[e:relation]->(b) return e.targetId * 131;7: match(a:buyer where a.name= '徐建国')-[e:friend]->(b) return e.srcId + 111;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出176个value是430或name不是浙江大学,且value的数量大于等于57的university,根据value从小到大排列",
        "output": "match(a:university where (a.value = 430 or a.name <> '浙江大学') and COUNT(a.value) >= 57) return a order by a.value asc limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person徐思思有创造关系的评论,再请帮我找出以创造关系关联了徐思思的评论",
        "output": "match(a:person where a.name = '徐思思')-[e:creates]->(b:comment),(a:person where a.name = '徐思思')<-[e2:creates]-(c:comment)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找满足条件gender是male的节点",
        "output": "match(a where a.gender = 'male') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和名为周国强的person有friend关系,或有friend的friend关系的person",
        "output": "match(a:person where n.name=周国强)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值加705的值",
        "output": "a.value + 705",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出认识书孤城关联的书,的书",
        "output": "match(a:book where name = '孤城')-[e:relates]->(b:book)<-[e2:knows]-(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询和person王红有关的软件,再帮我查询和王红person_buy_software的其他软件,返回它们;2: 帮我查询person徐伟 购买的软件,返回软件 使用的软件的id乘id的平均值 ;3: 找出179个与孙雪和黄建聪都存在关系的software节点;4: 返回和person有关联的person节点,并根据其id分组,返回id,以及年龄加37的个数;5: 帮我查询名为吴雪的点buy的software,并对这些点的stars进行求和;6: 帮我查询scale是medium且peopleNumber小于781的company employee的person的名称,以及这些person commits的software的名称;7: 找出person王强提交的软件,被其他公司创造的数量;8: 返回以提交关系关联了软件Hive的person;9: 查询名为谷歌和滴滴的,label为公司的点公共的伙伴节点的名单;",
        "output": "查询语句为:1: match(a:person where a.name = '王红')-[e]-(b:software), (a:person)-[e2:person_buy_software]->(c:software) return a, b, c;2: match(a:person where name = '徐伟')-[e:person_buy_software]->(b:software)-[e2:software_uses_software]->(c:software) return AVG(c.id * c.id);3: match(a where a.name='孙雪')-[e]->(b:software)<-[e2]-(c where c.name='黄建聪') return b limit 179;4: match(a:person)-[e:person_knows_person]-(b:person) return b.id, COUNT(b.age + 37) group by b.id;5: match(a where a.name='吴雪')-[e:person_buy_software]->(b:software) return SUM(b.stars);6: match(a:company where a.scale = 'medium' and a.peopleNumber < 781)-[e:company_employee_person]->(b:person)-[e2:person_commits_software]->(c:software) return b.name as b_name, c.name as c_name;7: match(a:person where a.name='王强')-[e:person_commits_software]->(b:software)<-[e2:company_creates_software]-(c:company) return COUNT(c);8: match(a:software where a.name='Hive')<-[e:person_commits_software]-(b:person) return b;9: match(a:company where a.name='谷歌')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='滴滴') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有seller的friend,或其friend的friend",
        "output": "match(a:seller)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "courseHour对30取余的平均值",
        "output": "AVG(a.courseHour % 30)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与Calcite相关的软件，并找出Calcite使用的其他软件，返回它们。",
        "output": "match(a:software where a.name = 'Calcite')-[e]-(b:software), (a:software)-[e2:uses]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出使用Redis的全部软件，以及Redis的创建公司。",
        "output": "match(a where a.name = 'Redis')-[e:uses]->(b:software),(a where a.name = 'Redis')<-[e2:creates]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有id为130的卖家关联的商品,和以拥有关系关联了这些商品的其他卖家",
        "output": "match(a:seller where a.id = 130)-[e]-(b:goods)<-[e2:has]-(c:seller) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person孙思思有1跳或2跳关系的person",
        "output": "match(a:person where a.name='孙思思')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以634,45,970,462,705作为请求点id, 源点的id等于输入表id,返回全部与商品有关系的卖家节点,且卖家节点的名字不是吴科,并返回这些点的id乘id对5315取余加189的和,以及id对55取余的最小值",
        "output": "with p as (select * from (VALUES(634),(45),(970),(462),(705)) as t(id)) MATCH (a:goods WHERE a.id = p.id) -[e ]->(b:seller WHERE b.name <> '吴科') RETURN SUM(b.id * b.id % 5315 + 189), MIN(b.id % 55) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以93作为输入调用personalRank函数,返回运算结果",
        "output": "Call PERSONALRANK(93) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的id加81的最大值",
        "output": "match(a:user) return MAX(a.id + 81)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与名为赵建国的学生有合作或合作关系的课程。",
        "output": "match(a:student where n.name=赵建国)-[e:partner]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王梅有关,且与贷款loan_70有关系的公司节点",
        "output": "match(a:person where a.name='王梅')-[e:invest]-(b:company)-[e2:apply]-(c:loan where c.name='loan_70') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出薪资大于6593的前180个人，按照姓名从大到小排序。",
        "output": "match(a:person where a.salary > 6593) return a order by a.name desc limit 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与被标记为'person'的个体有关联的所有'person'，以及与这些个体有关联的所有'person'，以及与这些个体有关联的所有'person'。",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:family]->(c:person)-[e3:family]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回gender不是female且height是182的相关人员的名称，以及他们认识的人的名称。",
        "output": "match(a:person where a.gender <> 'famale' and a.height = 182)-[e:relates]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和书呐喊有关的读者,再帮我查询和呐喊引用的其他书,返回它们",
        "output": "match(a:book where a.name = '呐喊')-[e]-(b:reader), (a:book)-[e2:refers]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "这个句子可以被简化为：一个人与另一个人有关联，而这个人又与其他一些人有关联。",
        "output": "match(a:person where a.id = '98')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找与university有关系的university节点,且university节点的name等于武汉大学,并返回这些点的level加level的求和值,以及id乘81的值",
        "output": "match(a:university)-[e]->(b:university where b.name = '武汉大学') return SUM(b.level + b.level), b.id * 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出country contain的city,返回其源点的peopleNumber对85082取余的值,以及目标点的id的平均值乘id对42139取余的最小值",
        "output": "match(a:country)-[e:contain]->(b:city) return a.peopleNumber % 85082, MIN(AVG(b.id) * b.id % 42139)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找所有和名为中国科技大学的university有partner关系,或有partner的partner关系的city;2: 查找和公司字节有company_cooperate_university关系的大学,以及和城市深圳有city_contain_company关系的公司,将它们都返回;3: 给出id为115的点的id;4: 给出公司阿里的所有标签为朋友的边,并根据目标点id从小到大排列,返回147个;",
        "output": "查询语句为:1: match(a:university where n.name=中国科技大学)-[e:partner]->{1,2}(b:city) return b;2: match(a:company where a.name = '字节')-[e:company_cooperate_university]->(b:university),(c:city where c.name = '深圳')-[e2:city_contain_company]->(d:company)return a, b, c, d;3: match(a where a.id = '115') return a.id;4: match(a:company where a.name = '阿里')-[e:friend]->(b) return b order by e.targetId asc limit 147;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height的和除178的值",
        "output": "SUM(a.height) / 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询课程属于的部门,返回其源点的价值加604的值,以及目标点的id的求和值乘id的和",
        "output": "match(a:course)-[e:belong]->(b:department) return a.value + 604, SUM(SUM(b.id) * b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前85个标签等于引用的边",
        "output": "match(a)-[e:refers]->(b) return e limit 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为何思琪和Bob的点共同喜欢的,标签等于书的节点",
        "output": "match(a where a.name = '何思琪')-[e:likes]->(b:book)<-[e2:likes]-(c where c.name = 'Bob') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回和department有关联的student节点,并根据其salary分组,返回salary,以及salary加salary的值",
        "output": "match(a:department)-[e:department_has_student]-(b:student) return b.salary, b.salary + b.salary group by b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为陈宏和张红的,标签为医生的点公共的朋友节点的名单",
        "output": "match(a:doctor where a.name='陈宏')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='张红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person pay的person,返回其源点的height除163减12的个数,以及目标点的salary减5285的值",
        "output": "match(a:person)-[e:pay]->(b:person) return COUNT(a.height / 163 - 12), b.salary - 5285",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询和标签等于同时满足以下条件的贷款和账号：贷款有存款关系，账号有还款关系。",
        "output": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为courseHour,credit,value, 数据为(25,4,295), 以属性value作为相等条件,找出名为韩轩的student",
        "output": "with p as (select * from (VALUES(25,4,295)) as t(courseHour,credit,value))MATCH (a:student WHERE a.value = p.value AND (a.name = '韩轩')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与大学有合作关系的公司，以及这些公司与哪些大学有合作关系，以及这些大学又与哪些公司有合作关系。",
        "output": "match(a:university)-[e:cooperate]->(b:company)-[e2:cooperate]->(c:university)-[e3:cooperate]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名字是杜国强,年龄在43到65之间,或年龄为空的节点",
        "output": "match(a where (a.name = '杜国强' and (a.age BETWEEN 43 AND 65)) or (a.age is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person杜梅认识的person,和杜梅认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '杜梅')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'person'的所有点，按身高从高到低排序。",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于药品,名为阿司匹林的点,返回这些点的id,权重",
        "output": "match(a:medicine where a.name = '阿司匹林') return a.id, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与reader徐轩存在likes关系,且与book计算机网络存在refers关系的book节点，返回这些book的category,name,及reader徐轩的id,及book计算机网络的wordCount",
        "output": "match(a:reader where a.name='徐轩')-[e:likes]->(b:book)<-[e2:refers]-(c:book where c.name='计算机网络') return a.id,b.category, b.name,c.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回以教关系关联了课程数据结构的教师;2: 计算所有university的id乘36的值;3: 帮我查询源点size在71到96之间或id在6到23之间,边类型是department_has_student,且满足条件targetId大于等于100且srcId小于等于139的边,返回这些边的f0的最小值对902取余的值;4: 返回id为19的大学有关的大学的伙伴, 再返回和大学有关系的伙伴;5: 帮我查询与department法学院存在department_has_teacher关系,且与course马克思原理存在teacher_teach_course关系的teacher节点，返回这些teacher的salary,gender,及department法学院的name,及course马克思原理的value;",
        "output": "查询语句为:1: match(a:course where a.name='数据结构')<-[e:teacher_teach_course]-(b:teacher) return b;2: match(a:university) return a.id * 36;3: match(a where (a.size BETWEEN 71 AND 96) or (a.id BETWEEN 6 AND 23))-[e:department_has_student where e.targetId >= 100 and e.srcId <= 139]->(b) return MIN(e.f0) % 902;4: match(a:university where id = '19')-[e]-(b:university)-[e2:partner]->(c), (b:university)-[e3:partner]->(d) return a, b, c, d;5: match(a:department where a.name='法学院')-[e:department_has_teacher]->(b:teacher)<-[e2:teacher_teach_course]-(c:course where c.name='马克思原理') return a.name,b.salary, b.gender,c.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person黄月支付的person,和黄月支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where name = '黄月')-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出申请贷款loan_31的person,和这些person申请的贷款",
        "output": "match(a:loan where name = 'loan_31')<-[e:apply]-(b:person)-[e2:apply]->(c:loan) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加76的值",
        "output": "a.id + 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person赵思思喜欢的person,和赵思思喜欢的person",
        "output": "match(a:person)<-[e:likes]-(b:person where name = '赵思思')-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找美团创建的软件的节点所使用的软件。",
        "output": "match(a:company where a.name = '美团')-[e:creates]->(b:software)-[e2:uses]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,name,value分组,计算id减id的值",
        "output": "return a.id - a.id group by a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出Comment_280这个评论。",
        "output": "match(a:comment where a.name = 'Comment_280') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为韩轩的person,以及与其有关的person,并返回韩轩的名字和这些person的id",
        "output": "match(a:person where name = '韩轩')-[e]-(b:person) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与马月有knows关系的person的id,包括person与person之间的knows关系。",
        "output": "match(a where a.name = '马月')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回和作家有关联的作家节点,并根据其年龄,id分组,返回年龄,id,以及年龄乘57的求和值;2: 请帮我找出全部源点label为作家,边label为author_knows_author的边,返回这些边的源点id对36取余的值,和f0减986的值;3: 查询和publisher有关联的book节点,并根据其price,wordCount,category分组,返回price,wordCount,category,以及id加38的值;4: 请帮我查找所有读者以id,身高,性别分组的名字, 根据名字从小到大排序;5: 找出书以价格,类别,名字分组的名字, 根据名字降序排序;",
        "output": "查询语句为:1: match(a:author)-[e:author_knows_author]-(b:author) return b.age, b.id, SUM(b.age * 57) group by b.age, b.id;2: match(a:author)-[e:author_knows_author]->(b) return e.srcId % 36, e.f0 - 986;3: match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.price, b.wordCount, b.category, b.id + 38 group by b.price, b.wordCount, b.category;4: match(a:reader) return a.name group by a.id, a.height, a.gender order by a.name asc;5: match(a:book) return a.name group by a.price, a.category, a.name order by a.name desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被医生马国强诊断的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='马国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出撰写读者李科喜欢的书,的作家",
        "output": "match(a:reader where name = '李科')-[e:likes]->(b:book)<-[e2:write]-(c:author) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出马若涵同事的同事的家人。",
        "output": "match(a:person where a.name='马若涵')-[e:colleague]->(b)-[e2:colleague]->(c)-[e3:family]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 给出buyer孙国强的所有label为friend的边,并根据timeStamp降序排列,返回184个;2: 查找从buyer何雪出发,经过标签为buyer_consult_seller的边,走2跳到达的seller点;3: 帮我查询与买家赵红有关,且与商品电脑有关系的卖家节点;4: 帮我查询全部源点age大于21,salary为空,目标点id不是39且id乘id小于262.38,且标签为buyer_look_goods的边;5: 请帮我找出132个名为黄轩的点has的类型为goods的节点,且其name等于香蕉且value在404到889之间;6: 请帮我找出标签等于卖家的所有点,并根据id升序排列;",
        "output": "查询语句为:1: match(a:buyer where a.name = '孙国强')-[e:friend]->(b) return b order by e.timeStamp desc limit 184;2: match(a:buyer where a.name='何雪')-[e:buyer_consult_seller]->{2,2}(b:seller) return b;3: match(a:buyer where a.name='赵红')-[e:buyer_consult_seller]-(b:seller)-[e2:seller_has_goods]-(c:goods where c.name='电脑') return b;4: match(a where a.age > 21 and (a.salary is null))-[e:buyer_look_goods]->(b where b.id <> 39 and b.id * b.id < 262.38) return e;5: match(a where a.name='黄轩')-[e:seller_has_goods]->(b:goods where b.name = '香蕉' and (b.value BETWEEN 404 AND 889)) return b limit 132;6: match(a:seller) return a order by a.id asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有书籍之间的关联，以及这些书籍与其他作家之间的撰写关系。",
        "output": "match(a:book where a.id = '129')-[e]-(b:book)<-[e2:write]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 返回标签等于forum_contain_post,且满足条件f1小于等于182或源点id为空,且源点id的和大于等于20的边;2: 查找帖子Post_249拥有的标签,被其他帖子拥有的数量;3: 查找以包含关系关联了帖子Post_125的论坛;4: 给出与user张强和何月都存在user_likes_post关系的点;5: 查询名为中国军事论坛的点包含的person;6: 给出forum百度贴吧的所有类型是friend的边,并根据weight升序排列,返回108个;7: 给出全部类型是标签的点;8: 给出名为Post_103的点的,id为空,id不为空的朋友,返回这些朋友的价值,和边的f0;",
        "output": "查询语句为:1: match(a)-[e:forum_contain_post where (e.f1 <= 182 or (e.srcId is null)) and SUM(e.srcId) >= 20]->(b) return e;2: match(a:post where a.name='Post_249')-[e:post_has_tag]->(b:tag)<-[e2:post_has_tag]-(c:post) return COUNT(c);3: match(a:post where a.name='Post_125')<-[e:forum_contain_post]-(b:forum) return b;4: match(a:user where a.name='张强')-[e:user_likes_post]->(b)<-[e2:user_likes_post]-(c:user where c.name='何月') return b;5: match(a where a.name='中国军事论坛')-[e:forum_contain_person]->(b:person) return b;6: match(a:forum where a.name = '百度贴吧')-[e:friend]->(b) return b order by e.weight asc limit 108;7: match(a:tag) return a;8: match(a where a.name='Post_103')-[e:friend]->(b where (b.id is null) and (b.id is not null)) return b.value,e.f0;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以下是简化后的句子：'列出不属于艺术学院的部门中，教师的名字和他们教授的课程名。' 这个句子更加简洁明了，并且避免了一些不必要的重复。",
        "output": "match(a:department where a.name <> '艺术学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与'person'类型的节点有申请关系的贷款，以及与这些贷款有存款关系的账户，以及与这些账户有还款关系的贷款。",
        "output": "match(a:person)-[e:apply]->(b:loan)-[e2:deposit]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person认识的person,返回其源点的薪资对6278取余的最大值,以及目标点的age的最小值减10的和",
        "output": "match(a:person)-[e:knows]->(b:person) return MAX(a.salary % 6278), SUM(MIN(b.age) - 10)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出薪资大于4610或性别是famale的person关联的person的名称,以及这些person 关联的person的名称",
        "output": "match(a:person where a.salary > 4610 or a.gender = 'famale')-[e:relates]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询名为Flink的软件;2: 请帮我找出id为164的软件有关的person的朋友, 再请帮我找出和person有关系的伙伴;3: 请帮我找出全部和person赵伟之间有person_commits_software关系的software;4: 帮我查询类型为person的点,返回15个;5: 找出与company滴滴和微软都存在company_employee_person关系的点;6: 返回全部与软件有关系的软件节点,且软件节点的开源等于false,并返回这些点的id除86的值,以及价值对774取余的平均值;7: 请帮我查找被person王强belong的company;8: 请帮我查找person属于的公司,返回其源点的id的个数乘id的值,以及目标点的id的最小值除27的求和值;9: 给出82个gender等于famale且height小于163且gender是male的person,根据name升序排列;",
        "output": "查询语句为:1: match(a:software where a.name = 'Flink') return a;2: match(a:software where id = '164')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d;3: match(a:person where a.name='赵伟')-[e:person_commits_software]->(b:software) return b;4: match(a:person) return a limit 15;5: match(a:company where a.name='滴滴')-[e:company_employee_person]->(b)<-[e2:company_employee_person]-(c:company where c.name='微软') return b;6: match(a:software)-[e]->(b:software where b.openSource = false) return b.id / 86, AVG(b.value % 774);7: match(a:company)<-[e:person_belong_company]-(b:person where b.name='王强') return a, b;8: match(a:person)-[e:person_belong_company]->(b:company) return COUNT(a.id) * a.id, SUM(MIN(b.id) / 27);9: match(a:person where a.gender = 'famale' and a.height < 163 and a.gender = 'male') return a order by a.name asc limit 82;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有从标签为'film'的源节点到标签为'tag'的目标节点，标签为'has'的边的边。",
        "output": "match(a:film)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表297, 以属性id作为相等条件,查找与名为徐雪和吴伟的点共同认识的,label为作家的节点",
        "output": "with p as (select * from (VALUES(297)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐雪')) -[e:author_knows_author ]->(b:author) <-[e2:author_knows_author ]-(c WHERE c.name = '吴伟') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查询类型为person的点,返回40个;2: 查找公司美团的所有标签为伙伴的边,并根据源点id升序排列,返回112个;3: 请帮我查找和person徐若涵有person_commits_software关系的软件,以及和软件Kafka有software_uses_software关系的软件,将它们都返回;4: 查找从person马思琪出发,经过类型为person_belong_company的边,走1到3度到达的company点;5: 帮我查询id为36的person关联的person,和以雇佣关系关联了这些person的其他公司;6: 给出全部company以name,id,value分组的value, 根据value降序排序;",
        "output": "查询语句为:1: match(a:person) return a limit 40;2: match(a:company where a.name = '美团')-[e:partner]->(b) return b order by e.srcId asc limit 112;3: match(a:person where a.name = '徐若涵')-[e:person_commits_software]->(b:software),(c:software where c.name = 'Kafka')-[e2:software_uses_software]->(d:software)return a, b, c, d;4: match(a:person where a.name='马思琪')-[e:person_belong_company]->{1,3}(b:company) return b;5: match(a:person where a.id = '36')-[e]-(b:person)<-[e2:company_employee_person]-(c:company) return b,c;6: match(a:company) return a.value group by a.name, a.id, a.value order by a.value desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前147个类型是回答的边",
        "output": "match(a)-[e:ask]->(b) return e limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与陈科、杜强两位病人有共同诊断的节点",
        "output": "match(a where a.name = '陈科')-[e:diagnose]->(b:patient)<-[e2:diagnose]-(c where c.name = '杜强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为郑国强的点apply的所有loan,并对这些loan的id进行求和",
        "output": "match(a where a.name='郑国强')-[e:apply]->(b:loan) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为体育学院和法学院的,类型是department的点公共的partner节点的名单",
        "output": "match(a:department where a.name='体育学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='法学院') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名叫Alan的人中，按身高从小到大排列，共有108人。",
        "output": "match(a:person where a.name = 'Alan') return a order by a.height asc limit 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为reader,名为郑雪的点,返回这些点的salary",
        "output": "match(a:reader where a.name = '郑雪') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,age, 数据为(2279,98,76)的子查询作为输入表, 以属性salary作为相等条件,查找所有名为百年孤独的,名字等于呐喊,字数大于等于795的引用,返回这些引用的创建时间,和边的f1",
        "output": "with p as (select * from (VALUES(2279,98,76)) as t(salary,id,age))MATCH (a WHERE a.salary = p.salary AND (a.name = '百年孤独')) -[e:book_refers_book ]->(b WHERE b.name = '呐喊' AND b.wordCount >= 795) RETURN b.createTime, e.f1 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为uses,并且满足条件weight不为空,weight在110.62到115.19之间的边",
        "output": "match(a)-[e:uses where (e.weight is not null) and (e.weight BETWEEN 110.62 AND 115.19)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的价值除464的最小值",
        "output": "match(a:company) return MIN(a.value / 464)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和标签为account的点有transfer关系的account,以及和这些account有transfer关系的account,以及和这些account有transfer关系的account",
        "output": "match(a:account)-[e:transfer]->(b:account)-[e2:transfer]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回杜梅的点属于的部门,然后返回杜梅被拥有的部门,一起返回",
        "output": "match(a where a.name = '杜梅')-[e:belong]->(b:department),(a where a.name = '杜梅')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为杜强和周伟的,标签等于买家的点公共的相关者节点的名单",
        "output": "match(a:buyer where a.name='杜强')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='周伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与ID为35的人有关联的人的朋友，再查询该人的父母。",
        "output": "match(a:person where id = '35')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与买家王月有关联的咨询记录，以及与此记录相关的卖家。",
        "output": "match(a:buyer where a.name = '王月')-[e:consult]->(b:seller),(a:buyer where a.name = '王月')<-[e2:consult]-(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('李建聪',164,87),('黄强',153,66)作为请求表数据,属性分别为name,height,id, 源点的id等于输入表id,请帮我找出全部名为杜若涵的,年龄小于等于24的朋友,返回这些朋友的id,和边的f1,f0",
        "output": "with p as (select * from (VALUES('李建聪',164,87),('黄强',153,66)) as t(name,height,id))MATCH (a WHERE a.id = p.id AND (a.name = '杜若涵')) -[e:friend ]->(b WHERE b.age <= 24) RETURN b.id, e.f1, e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王思琪和张雪共同的60个合作伙伴。",
        "output": "match(a:author where a.name='王思琪')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='张雪') return b limit 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与买家相关的人，或者相关者的相关者。",
        "output": "match(a:buyer)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从作家黄科出发,经过标签为撰写的边,走2到4度到达的书点",
        "output": "match(a:author where a.name='黄科')-[e:write]->{2,4}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与post Post_436有关系的tag, 返回和这些tag有关联的tag的,value乘value的值",
        "output": "match(a:post where a.name= 'Post_436')-[e]-(b:tag)-[e2]-(c:tag) return c.value * c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与贷款违约名称有关联的公司，这些公司通过apply关系连接。",
        "output": "match(a:loan where a.name='defaultName')<-[e:apply]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与王雪和马科都有关系的处方，并返回它们的权重。",
        "output": "match(a:user where a.name='王雪')-[e]->(b:prescription)<-[e2]-(c:user where c.name='马科') return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 黄强的课程有多少名学生选择了它？",
        "output": "match(a:teacher where a.name='黄强')-[e:teach]->(b:course)<-[e2:selects]-(c:student) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,id, 数据为(89,156,85)的子查询作为输入表, 源点的age等于输入表age,请帮我查找account XiaoHu repay的loan,被其他account repay的数量",
        "output": "with p as (select * from (VALUES(89,156,85)) as t(age,height,id))MATCH (a:account WHERE a.age = p.age AND (a.name = 'XiaoHu')) -[e:account_repay_loan ]->(b:loan) <-[e2:account_repay_loan ]-(c:account) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表399, 源点的id等于输入表id,帮我查询源点name不是复仇者联盟且category等于科幻,或category不等于文艺,边类型是film_has_tag,且f1不等于true或targetId大于64,且srcId在4到160之间的边,返回这些边的srcId减srcId的值",
        "output": "with p as (select * from (VALUES(399)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name <> '复仇者联盟' AND a.category = '科幻' OR a.category <> '文艺')) -[e:film_has_tag WHERE (e.f1 <> TRUE OR e.targetId > 64) AND e.srcId BETWEEN ASYMMETRIC 4 AND 160 ]->(b) RETURN e.srcId - e.srcId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为吴建聪的节点commits的person或company或software",
        "output": "match(a where a.name='吴建聪')-[e:commits]->(b:person | company | software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与人有关联的人，以及通过相识关系与其他这些人有关联的人。",
        "output": "match(a:person where a.id = '162')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与医生郑月有创造关系的3度的环",
        "output": "match(a:doctor where name = '郑月')-[e:creates]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找处方的三角的环,边label为包含, 并返回这些点的id",
        "output": "match(a:prescription)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出名为XXD和Zeus的,标签等于账号的点公共的相关者节点的名单",
        "output": "match(a:account where a.name='XXD')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='Zeus') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person喜欢的评论, 令评论的创建时间的值等于创造评论的person的名字的最小值, 再查找评论属于的电影",
        "output": "match(a:person)-[e:likes]->(b:comment) let b.createTime = MIN((b:comment)<-[e2:creates]-(c:person) => c.name) match(b:comment)-[e3:belong]->(d:film) return b.createTime, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 返回金额为空,id大于等于5429.25且id不等于82的节点;2: 返回person马轩的所有类型是friend的边,并根据srcId降序排列,返回44个;3: 返回前180个满足条件权重小于867且金额为空,或id不为空的贷款;4: 请帮我查找以转账关系关联了账号TheShy的账号;5: 给出和账号XXD有3到5跳关系的person;6: 查询person申请的贷款,返回其源点的id乘98乘2288的平均值,以及目标点的金额对8252.50取余的和;7: 返回标签为account的点,并根据createTime降序排列;8: 请帮我查找和公司有关联的贷款节点,并根据其权重,金额分组,返回权重,金额,以及金额加8300.43的值;9: 给出account XiaoHu repay的loan,被其他company apply的数量;",
        "output": "查询语句为:1: match(a where (a.amount is null) and a.id >= 5429.25 and a.id <> 82) return a;2: match(a:person where a.name = '马轩')-[e:friend]->(b) return b order by e.srcId desc limit 44;3: match(a:loan where (a.weight < 867 and (a.amount is null)) or (a.id is not null)) return a limit 180;4: match(a:account where a.name='TheShy')<-[e:account_transfer_account]-(b:account) return b;5: match(a:account where a.name='XXD')-[e]->{3,5}(b:person) return b;6: match(a:person)-[e:person_apply_loan]->(b:loan) return AVG(a.id * 98 * 2288), SUM(b.amount % 8252.50);7: match(a:account) return a order by a.createTime desc;8: match(a:company)-[e:company_apply_loan]-(b:loan) return b.weight, b.amount, b.amount + 8300.43 group by b.weight, b.amount;9: match(a:account where a.name='XiaoHu')-[e:account_repay_loan]->(b:loan)<-[e2:company_apply_loan]-(c:company) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,id,身高分组,计算age的最大值除97加id的值",
        "output": "return MAX(a.age) / 97 + a.id group by a.age, a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以922,682作为请求点id, 以属性id作为相等条件,帮我查询所有和person点有own关系的account节点,且边满足条件targetId在55到138之间,目标account节点满足条件lastLoginTime等于2012年03月24日",
        "output": "with p as (select * from (VALUES(922),(682)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_own_account WHERE e.targetId BETWEEN ASYMMETRIC 55 AND 138 ]->(b:account WHERE b.lastLoginTime = '2012-03-24') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出包含'post'标签且同时被知网和百度贴吧引用的节点",
        "output": "match(a where a.name = '知网')-[e:contain]->(b:post)<-[e2:contain]-(c where c.name = '百度贴吧') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('java',true,48),('python',false,35),('java',true,47),('go',false,13)作为请求表数据,属性分别为lang,openSource,id, 以属性id作为相等条件,给出person韩月buy的software节点uses的software",
        "output": "with p as (select * from (VALUES('java',true,48),('python',false,35),('java',true,47),('go',false,13)) as t(lang,openSource,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '韩月')) -[e:person_buy_software ]->(b:software) -[e2:software_uses_software ]->(c:software) RETURN c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询腾讯员工中，被其他人士知晓的数量",
        "output": "match(a:company where a.name='腾讯')-[e:employee]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和卖家赵宏之间有拥有关系的商品",
        "output": "match(a:seller where a.name='赵宏')-[e:has]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点label为课程,目标点label为部门,label为教师或大学或部门的边",
        "output": "match(a:course)-[e:teacher | university | department]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回被person吴建聪创造的评论",
        "output": "match(a:comment)<-[e:person_creates_comment]-(b:person where b.name='吴建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询person徐月的所有family,的weight加157.99减115的个数;2: 请帮我找出与person周红存在person_family_person关系,且与person陈思思存在person_parent_person关系的person节点，返回这些person的薪资,及person周红的身高,及person陈思思的名字;3: 计算所有person的id乘71乘7357的个数;4: 帮我查询person的3跳以内的环;5: 请帮我找出与person吴若涵和孙红都存在person_friend_person关系的点;",
        "output": "查询语句为:1: match(a:person where a.name= '徐月')-[e:person_family_person]->(b) return COUNT(e.weight + 157.99 - 115);2: match(a:person where a.name='周红')-[e:person_family_person]->(b:person)<-[e2:person_parent_person]-(c:person where c.name='陈思思') return a.height,b.salary,c.name;3: match(a:person) return COUNT(a.id * 71 * 7357);4: match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id;5: match(a:person where a.name='吴若涵')-[e:person_friend_person]->(b)<-[e2:person_friend_person]-(c:person where c.name='孙红') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为123的点的名字",
        "output": "match(a where a.id = 123) return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与买家孙梅有咨询关系的卖家，以及与卖家李轩有拥有关系的商品，返回两者。",
        "output": "match(a:buyer where a.name = '孙梅')-[e:consult]->(b:seller),(c:seller where c.name = '李轩')-[e2:has]->(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 查找全部post的friend,或其friend的friend;2: 找出全部和post Post_294之间有post_has_tag关系的tag;3: 返回和user周雪有user_likes_post关系的post,再返回以user_likes_post关系关联了周雪的post;",
        "output": "查询语句为:1: match(a:post)-[e:friend]->{1,2}(b) return b;2: match(a:post where a.name='Post_294')-[e:post_has_tag]->(b:tag) return b;3: match(a:user where a.name = '周雪')-[e:user_likes_post]->(b:post),(a:user where a.name = '周雪')<-[e2:user_likes_post]-(c:post)return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为徐建聪的,id对91取余大于等于3的friend,返回这些friend的changeFileNumber,和边的timeStamp",
        "output": "match(a where a.name='徐建聪')-[e:friend]->(b where b.id % 91 >= 3) return b.changeFileNumber,e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找公司的三角的环,边标签为申请, 并返回这些点的id",
        "output": "match(a:company)-[e:apply]->(b)-[e2:apply]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛包含的帖子,返回其源点的id除46的个数,以及目标点的id的和加93的求和值",
        "output": "match(a:forum)-[e:contain]->(b:post) return COUNT(a.id / 46), SUM(SUM(b.id) + 93)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person认识数量大于116的person,记为relationCount,再查询这些person认识的软件",
        "output": "match(a:person) let a.relationCount = COUNT((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 116)-[e2:knows]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为华为的,area为空的relation,返回这些relation的id,和边的targetId,srcId",
        "output": "match(a where a.name='华为')-[e:relation]->(b where (b.area is null)) return b.id,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈若涵的点creates prescription,同时她也有department。",
        "output": "match(a where a.name = '陈若涵')-[e:creates]->(b:prescription),(a where a.name = '陈若涵')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被doctor赵建聪creates的prescription",
        "output": "match(a:prescription)<-[e:creates]-(b:doctor where b.name='赵建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按照性别从小到大，为每个ID分组的人。",
        "output": "match(a:person) return a.gender group by a.id order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person杜月提交的软件, 令person的价值等于软件的value的和除686,令软件的是否开源等于软件的id对10取余, 返回person的身高, 软件的语言",
        "output": "match(a:person where a.name='杜月')-[e:commits]->(b:software) let a.value = SUM(b.value) / 686,let b.openSource = b.id % 10 return a.height,b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person郑轩有关的person,再查找和郑轩喜欢的其他person,返回它们",
        "output": "match(a:person where a.name = '郑轩')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的最小值加9335的值",
        "output": "MIN(a.salary) + 9335",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件peopleNumber小于845且scale的最大值小于等于586的节点",
        "output": "match(a where a.peopleNumber < 845 and MAX(a.scale) <= 586) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和医生周强有关系的药品或部门或医生,返回这些点的创建时间",
        "output": "match(a:doctor where a.name='周强')-[e]-(b:medicine | department | doctor) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和名为蚂蚁集团的公司有朋友关系,或有朋友的朋友关系的软件",
        "output": "match(a:company where n.name=蚂蚁集团)-[e:friend]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点身高为空,边类型为喜欢,且f1为true且源点id不为空,或源点id大于68的边,返回这些边的f0加f0的最小值",
        "output": "match(a where (a.height is null))-[e:likes where (e.f1 = true and (e.srcId is not null)) or e.srcId > 68]->(b) return MIN(e.f0 + e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与标签为'reader'的点有喜欢关系的书，以及这些书有引用关系的书，并且这些书也有引用关系。",
        "output": "match(a:reader)-[e:likes]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,name, 数据为(83,'罪与罚','孤城'),(61,'百年孤独','悲惨世界'),(88,'悲惨世界','呐喊'), 源点的name等于输入表name,请帮我查找与名为何思琪和陈轩的点共同likes的,类型是book的节点",
        "output": "with p as (select * from (VALUES(83,'罪与罚','孤城'),(61,'百年孤独','悲惨世界'),(88,'悲惨世界','呐喊')) as t(id,name,name))MATCH (a WHERE a.name = p.name AND (a.name = '何思琪')) -[e:reader_likes_book ]->(b:book) <-[e2:reader_likes_book ]-(c WHERE c.name = '陈轩') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为92的点的value",
        "output": "match(a where a.id = 92) return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为高等数学的点属于的部门",
        "output": "match(a where a.name='高等数学')-[e:belong]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表663,969,927, 源点的id等于输入表id,请帮我查找112个和label为person的点有person_parent_person关系的person,以及和这些person有person_family_person关系的person",
        "output": "with p as (select * from (VALUES(663),(969),(927)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_parent_person ]->(b:person) -[e2:person_family_person ]->(c:person) RETURN c LIMIT 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点标签等于person,边标签等于creates的边,返回这些边的srcId加srcId的最大值,和weight的最小值乘weight的平均值",
        "output": "match(a:person)-[e:creates]->(b) return MAX(e.srcId + e.srcId), AVG(MIN(e.weight) * e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以29作为请求点id, 以属性id作为相等条件,查找42个名为赵月的点拥有的类型是商品的节点,且其价值大于等于57且价值大于等于649",
        "output": "with p as (select * from (VALUES(29)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '赵月')) -[e:seller_has_goods ]->(b:goods WHERE b.value >= 57 AND b.value >= 649) RETURN b LIMIT 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型为person,边类型为认识,且f1不等于true的边",
        "output": "match(a:person)-[e:knows where e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关联的person节点，这些节点的高度为空。然后计算这些节点的id除以17后的余数之和，以及每个节点的id加上18的结果。",
        "output": "match(a:person)-[e]->(b:person where (b.height is null)) return SUM(b.id % 17), b.id + 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询源点标签为person,目标点标签为person,标签为person_colleague_person的边",
        "output": "match(a:person)-[e:person_colleague_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边标签等于knows, 并返回这些点的id",
        "output": "match(a:person)-[e:knows]->(b)-[e2:knows]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表703, 源点的id等于输入表id,请帮我找出全部源点类型是seller,边类型是seller_has_goods的边,返回这些边的f0加730的值,和f0除f0的值",
        "output": "with p as (select * from (VALUES(703)) as t(id)) MATCH (a:seller WHERE a.id = p.id) -[e:seller_has_goods ]->(b) RETURN e.f0 + 730, e.f0 / e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为person,名为黄雪的点,返回这些点的年龄,薪资",
        "output": "match(a:person where a.name = '黄雪') return a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与账号XiaoHu有存款和还款关系的贷款节点，并返回它们的权重、金额以及XiaoHu账号的创建日期。",
        "output": "match(a:account where a.name='XiaoHu')-[e:repay]->(b:loan)<-[e2:deposit]-(c:account where c.name='XiaoHu') return a.createTime,b.weight, b.amount,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person杜科有关的software,称为X,再查询和这个X有关联的其他software,以及和X有关联的person",
        "output": "match(a:person where a.name = '杜科')-[e]-(b:software), (b:software)-[e2]-(c:software),(b:software)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照性别、名字和年龄对买家进行分组，然后按照工资从大到小进行排序。",
        "output": "match(a:buyer) return a.salary group by a.gender, a.name, a.age order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表863,742, 源点的id等于输入表id,给出与user周建国有user_creates_issue关系的3度以内的环",
        "output": "with p as (select * from (VALUES(863),(742)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (name = '周建国')) -[e:user_creates_issue ]->{0,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有student的height乘height乘id的个数",
        "output": "match(a:student) return COUNT(a.height * a.height * a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出全部与person王月有关系的person的gender;2: 请帮我找出名为王伟的点的,age在70到76之间或id为空的parent,返回这些parent的height,和边的f1,targetId,srcId;3: 返回68个名字为赵雪,id大于34,或薪资小于等于8456的person,根据身高升序排列;4: 给出所有与person有关系的person节点,且person节点的名字等于吴建国,并返回这些点的id乘81的平均值,以及薪资对7325取余的平均值;5: 找出id为86的person关联的person,和以relates关系关联了这些person的其他person;",
        "output": "查询语句为:1: match(a:person where a.name='王月')-[e]-(b:person) return b.gender;2: match(a where a.name='王伟')-[e:person_parent_person]->(b where (b.age BETWEEN 70 AND 76) or (b.id is null)) return b.height,e.f1, e.targetId, e.srcId;3: match(a:person where (a.name = '赵雪' and a.id > 34) or a.salary <= 8456) return a order by a.height asc limit 68;4: match(a:person)-[e]->(b:person where b.name = '吴建国') return AVG(b.id * 81), AVG(b.salary % 7325);5: match(a:person where a.id = '86')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马建国认识的person,被其他person支付的数量",
        "output": "match(a:person where a.name='马建国')-[e:knows]->(b:person)<-[e2:pay]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person杜建聪有联系的person",
        "output": "match(a:person where a.name='杜建聪')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id除价值的求和值",
        "output": "SUM(a.id / a.id / a.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问周思思观看的电影节有哪些标签？",
        "output": "match(a:person where a.name = '周思思')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出与名为李宏和郑建聪的点共同认识的,类型是person的节点;2: 请帮我找出类型是person的点;3: 请帮我找出170个与孙建国和赵梅都存在关系的person节点;4: 给出person李月pay的person,被其他person knows的数量;5: 帮我查询名为郑月的person,以及与其有关的person,并返回郑月的身高和这些person的身高;6: 帮我查询与person吴若涵有关系的person, 返回和这些person有关联的person的,id乘11的值;",
        "output": "查询语句为:1: match(a where a.name = '李宏')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '郑建聪') return b;2: match(a:person) return a;3: match(a where a.name='孙建国')-[e]->(b:person)<-[e2]-(c where c.name='赵梅') return b limit 170;4: match(a:person where a.name='李月')-[e:person_pay_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);5: match(a:person where name = '郑月')-[e]-(b:person) return a.height, b.height;6: match(a:person where a.name= '吴若涵')-[e]-(b:person)-[e2]-(c:person) return c.id * 11;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为马思思的,scale是large,id为空的partner,返回这些partner的id,和边的weight,targetId",
        "output": "match(a where a.name='马思思')-[e:partner]->(b where b.scale = 'large' and (b.id is null)) return b.id,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找陈梅买家在卖家节点has的物品。",
        "output": "match(a:buyer where a.name = '陈梅')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有person的relation,或其relation的relation",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我找出和person有关联的person节点,并根据其age分组,返回age,以及id加49除height除175的最大值;2: 请帮我查找名为黄红的person;3: 帮我查询名为马梅和孙国强的,标签等于person的点公共的family节点的名单;4: 请帮我找出全部person以性别分组的身高, 根据身高降序排序;5: 返回和person有关联的person节点,并根据其name,height分组,返回name,height,以及salary乘1727的值;6: 查询与person周月有person_lover_person关系的3度以内的环;7: 查找所有名为吴轩的,名字大于等于151且性别是famale的家人,返回这些家人的身高,和边的源点id;",
        "output": "查询语句为:1: match(a:person)-[e:person_family_person]-(b:person) return b.age, MAX((b.id + 49) / b.height / 175) group by b.age;2: match(a:person where a.name = '黄红') return a;3: match(a:person where a.name='马梅')-[e:person_family_person]->(b)<-[e2:person_family_person]-(c:person where c.name='孙国强') return b.name;4: match(a:person) return a.height group by a.gender order by a.height desc;5: match(a:person)-[e:person_friend_person]-(b:person) return b.name, b.height, b.salary * 1727 group by b.name, b.height;6: match(a:person where name = '周月')-[e:person_lover_person]->{0,2}(b)->(a) return a.id, b.id as b_id;7: match(a where a.name='吴轩')-[e:person_family_person]->(b where b.name >= 151 and b.gender = 'famale') return b.height,e.srcId;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,id,salary, 数据为(45,82,1638), 源点的age等于输入表age,帮我查询person belong的company,返回其源点的age乘34的最小值,以及目标点的id减id的值",
        "output": "with p as (select * from (VALUES(45,82,1638)) as t(age,id,salary))MATCH (a:person WHERE a.age = p.age) -[e:person_belong_company ]->(b:company) RETURN MIN(a.age * 34), b.id - b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person杜伟之间有朋友关系的person",
        "output": "match(a:person where a.name='杜伟')-[e:friend]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询161个名为王红的点likes的标签为book的节点,且其createTime为2006年02月02日",
        "output": "match(a where a.name='王红')-[e:likes]->(b:book where b.createTime = '2006-02-02') return b limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点label为user,目标点label为post,label为forum的边",
        "output": "match(a:user)-[e:forum]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有company的id加29的值",
        "output": "match(a:company) return a.id + 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找李强认识和被关联的所有人，并将他们一起返回。",
        "output": "match(a where a.name = '李强')-[e:knows]->(b:person),(a where a.name = '李强')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为software的点,返回19个",
        "output": "match(a:software) return a limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询156个名为TheShy的点转账的标签为账号的节点,且节点名字不等于Zeus或上次登录时间不等于1996年09月17日",
        "output": "match(a where a.name='TheShy')-[e:transfer]->(b:account where b.name <> 'Zeus' or b.lastLoginTime <> '1996-09-17') return b limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与department数学学院有department_has_teacher关系的1度以内的环",
        "output": "match(a:department where name = '数学学院')-[e:department_has_teacher]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回合并请求的1跳的环",
        "output": "match(a:pullRequest)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出7位医生类型患者，并找出与这些患者有处方关系的患者。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出15个person吴建国和孙建国,共同的friend",
        "output": "match(a:person where a.name='吴建国')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='孙建国') return b limit 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司雇佣的person,返回其源点的价值加385的值,以及目标点的id的平均值减36的最小值",
        "output": "match(a:company)-[e:employee]->(b:person) return a.value + 385, MIN(AVG(b.id) - 36)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出与person张伟存在person_likes_person关系,且与person王月存在person_knows_person关系的person节点，返回这些person的性别,年龄,及person张伟的id,及person王月的身高;2: 查找39个和标签等于person的点有person_knows_person关系的person,且和这些person有person_pay_person关系的person;3: 给出与person黄红和李月都存在person_likes_person关系的点;4: 查找所有和person韩思思有关系的person节点,返回这些点的名字,id,身高;5: 请帮我查找与孙国强存在person_knows_person关系的person,person与person存在person_likes_person关系的点,返回这些点的salary;6: 给出名为孙若涵和周思思的,标签等于person的点公共的friend节点的名单;",
        "output": "查询语句为:1: match(a:person where a.name='张伟')-[e:person_likes_person]->(b:person)<-[e2:person_knows_person]-(c:person where c.name='王月') return a.id,b.gender, b.age,c.height;2: match(a:person)-[e:person_knows_person]->(b:person)-[e2:person_pay_person]->(c:person) return c limit 39;3: match(a:person where a.name='黄红')-[e:person_likes_person]->(b)<-[e2:person_likes_person]-(c:person where c.name='李月') return b;4: match(a:person where a.name='韩思思')-[e]-(b:person) return b.name, b.id, b.height;5: match(a where a.name = '孙国强')-[e:person_knows_person]->(b:person)-[e2:person_likes_person]->(c:person) return c.salary;6: match(a:person where a.name='孙若涵')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='周思思') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被仓库JavaGuid拥有的用户",
        "output": "match(a:user)<-[e:has]-(b:repository where b.name='JavaGuid') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以912,718,128,430作为请求点id, 源点的id等于输入表id,请帮我查找和person杜建国有person_knows_person关系的person,以及和person张梅有person_likes_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(912),(718),(128),(430)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '杜建国')) -[e:person_knows_person ]->(b:person) , (c:person WHERE c.name = '张梅') -[e2:person_likes_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和书点有关联关系的书节点,且边满足条件f0的最大值加969等于158,目标书节点类别不等于科普",
        "output": "match(a:book)-[e:relates where MAX(e.f0) + 969 = 158]->(b:book where b.category <> '科普') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出公司字节合作的大学,被其他公司合作的数量",
        "output": "match(a:company where a.name='字节')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,gender, 数据为(47,9601,'famale'),(14,6936,'famale'), 以属性salary作为相等条件,请帮我找出186个名字为徐梅的作家,根据名字从小到大排列",
        "output": "with p as (select * from (VALUES(47,9601,'famale'),(14,6936,'famale')) as t(age,salary,gender))MATCH (a:author WHERE a.salary = p.salary AND (a.name = '徐梅')) RETURN a ORDER BY a.name LIMIT 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前156个label为拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person杜强观看的电影节点拥有的标签",
        "output": "match(a:person where a.name = '杜强')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 其他买家看了张宏所看的商品数量",
        "output": "match(a:buyer where a.name='张宏')-[e:look]->(b:goods)<-[e2:look]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和cinema有关联的film节点,并根据其value分组,返回value,以及id加23的和",
        "output": "match(a:cinema)-[e:cinema_releases_film]-(b:film) return b.value, SUM(b.id + 23) group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age减46的值",
        "output": "a.age - 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部类型为作家的点",
        "output": "match(a:author) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被repository Mybatis has的pullRequest",
        "output": "match(a:pullRequest)<-[e:has]-(b:repository where b.name='Mybatis') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与吴红相关的cinema，然后返回吴红喜欢的其他评论。",
        "output": "match(a:person where a.name = '吴红')-[e]-(b:cinema), (a:person)-[e2:likes]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出35个名为孙科的点likes的label为post的节点,且节点createTime等于2008年06月05日,createTime不等于2031年11月06日",
        "output": "match(a where a.name='孙科')-[e:likes]->(b:post where b.createTime = '2008-06-05' and b.createTime <> '2031-11-06') return b limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'tag'的全部点，并按 id 从小到大的顺序排序。",
        "output": "match(a:tag) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为拥有,以及f1不是false的边",
        "output": "match(a)-[e:has where e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家郑思琪的全部相关者,的目标点id除97的值",
        "output": "match(a:buyer where a.name= '郑思琪')-[e:relation]->(b) return e.targetId / 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与软件Hadoop创建关系的公司。",
        "output": "match(a:software where a.name='Hadoop')<-[e:creates]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与部门点相关的学生节点，按姓名和性别进行分组，并返回他们的姓名和性别。",
        "output": "match(a:department)-[e:has]-(b:student) return b.name, b.gender group by b.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有性别为女性的与department有关联的doctor节点，然后返回这些节点的salary乘以salary的值和height的数量乘以height的值。",
        "output": "match(a:department)-[e]->(b:doctor where b.gender = 'famale') return b.salary * b.salary, COUNT(b.height) * b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以924,423作为请求点id, 以属性id作为相等条件,请帮我查找类型为买家的点,返回113个",
        "output": "with p as (select * from (VALUES(924),(423)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) RETURN a LIMIT 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和电影院好视影院之间有上映关系的电影",
        "output": "match(a:cinema where a.name='好视影院')-[e:releases]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签为买家的点有咨询关系的卖家,并且和这些卖家有回答关系的买家,并且和这些买家有取消关系的订单",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:cancel]->(d:orders) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 帮我查询label为company的点;2: 帮我查询全部和account Faker之间有account_repay_loan关系的loan;3: 计算所有company的value的最小值乘878的值;",
        "output": "查询语句为:1: match(a:company) return a;2: match(a:account where a.name='Faker')-[e:account_repay_loan]->(b:loan) return b;3: match(a:company) return MIN(a.value) * 878;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表580,28,922, 以属性id作为相等条件,帮我查询源点id大于17或address为东区或size大于976,边label为cinema_releases_film,且targetId为空的边,返回这些边的weight除109.54的值",
        "output": "with p as (select * from (VALUES(580),(28),(922)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id > 17 OR a.address = '东区' OR a.size > 976)) -[e:cinema_releases_film WHERE e.targetId IS NULL ]->(b) RETURN e.weight / 109.54 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找订单以id,名字分组的id, 根据id从小到大排序",
        "output": "match(a:orders) return a.id group by a.id, a.name order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回生物学院和艺术学院的部门伙伴节点列表。",
        "output": "match(a:department where a.name='生物学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='艺术学院') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的价值除428的平均值",
        "output": "match(a:company) return AVG(a.value / 428)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为category,wordCount,createTime, 数据为('诗集',182,2001-11-18),('科普',317,2025-04-30),('科普',974,2014-09-19)的子查询作为输入表, 以属性category作为相等条件,帮我查询类型是book_refers_book,且目标点id不为空,目标点id不是104的边",
        "output": "with p as (select * from (VALUES('诗集',182,2001-11-18),('科普',317,2025-04-30),('科普',974,2014-09-19)) as t(category,wordCount,createTime))MATCH (a WHERE a.category = p.category) -[e:book_refers_book WHERE e.targetId IS NOT NULL AND e.targetId <> 104 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被用户创造数量大于198的事项,记为relationCount,再查询这些事项创造的合并请求",
        "output": "match(a:issue) let a.relationCount = COUNT((a:issue)<-[e:creates]-(b:user) => b.id) match(a where a.relationCount > 198)-[e2:creates]->(c:pullRequest) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以23, 25作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP(23, 25) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家张建国的标签为相关者的边,并根据目标点id降序排列,返回135个",
        "output": "match(a:author where a.name = '张建国')-[e:relation]->(b) return b order by e.targetId desc limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与大学有关联的点，再找出与这些点有关联的部门、教师，最后找出与这些部门、教师有关联的课程。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher)-[e3:teach]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出27个id等于77且id在61到86之间且名字不等于百度贴吧的论坛,根据人数从小到大排列",
        "output": "match(a:forum where a.id = 77 and (a.id BETWEEN 61 AND 86) and a.name <> '百度贴吧') return a order by a.peopleNumber asc limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找3个名为百度贴吧的点contain的类型是post的节点,且节点value在96到475之间或createTime不是2019年11月17日",
        "output": "match(a where a.name='百度贴吧')-[e:contain]->(b:post where (b.value BETWEEN 96 AND 475) or b.createTime <> '2019-11-17') return b limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有读者的身高乘162的平均值",
        "output": "match(a:reader) return AVG(a.height * 162)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,category,price, 数据为('999感冒灵','止痛药',151),('散利痛','感冒药',83), 源点的price等于输入表price,找出id为28的doctor有关的patient的relation, 再找出和patient有关系的friend",
        "output": "with p as (select * from (VALUES('999感冒灵','止痛药',151),('散利痛','感冒药',83)) as t(name,category,price))MATCH (a:doctor WHERE a.price = p.price AND (id = '28')) -[e ]-(b:patient) -[e2:relation ]->(c) , (b:patient) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和用户何建国有关的帖子,称为X,再给出和这个X有关联的其他帖子,以及和X有关联的用户",
        "output": "match(a:user where a.name = '何建国')-[e]-(b:post), (b:post)-[e2]-(c:post),(b:post)-[e3]-(d:user) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从author吴建国出发，通过knows类型的边，走3步到达的author节点。",
        "output": "match(a:author where a.name='吴建国')-[e:knows]->{3,3}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以15,314,952作为请求点id, 源点的id等于输入表id,查询name不等于何科的buyer cancel的orders的名称,以及这些orders contain的goods的名称",
        "output": "with p as (select * from (VALUES(15),(314),(952)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name <> '何科')) -[e:buyer_cancel_orders ]->(b:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前52个薪资的最小值大于178或id小于99的读者",
        "output": "match(a:reader where MIN(a.salary) > 178 or a.id < 99) return a limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有标签为标签的点，按id从小到大排序。",
        "output": "match(a:tag) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person喜欢的评论, 令评论的id的值等于喜欢评论的person的id的最大值, 再查找评论属于的电影",
        "output": "match(a:person)-[e:likes]->(b:comment) let b.id = MAX((b:comment)<-[e2:likes]-(c:person) => c.id) match(b:comment)-[e3:belong]->(d:film) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表255, 以属性id作为相等条件,查找与名为浙江大学和四川大学的点共同合作的,类型为公司的节点",
        "output": "with p as (select * from (VALUES(255)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '浙江大学')) -[e:university_cooperate_company ]->(b:company) <-[e2:university_cooperate_company ]-(c WHERE c.name = '四川大学') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点标签等于doctor,边标签等于diagnose的边,返回这些边的targetId的最小值对155取余的值,和srcId对197取余的平均值",
        "output": "match(a:doctor)-[e:diagnose]->(b) return MIN(e.targetId) % 155, AVG(e.srcId % 197)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回university武汉大学的学生薪资，需要先查询university武汉大学下属的部门，再查询每个部门的学生薪资。",
        "output": "match(a:university where name = '武汉大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回马红发布的帖子的标签。",
        "output": "match(a:user where a.name = '马红')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和seller黄月之间有has关系的goods",
        "output": "match(a:seller where a.name='黄月')-[e:has]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是使用,并且f1不是true的边",
        "output": "match(a)-[e:uses where e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出源点标签为'cinema',边标签为'releases'的边，然后返回这些边中srcId除以155取余的最大值和srcId除以93对163取余的值。",
        "output": "match(a:cinema)-[e:releases]->(b) return MAX(e.srcId % 155), e.srcId / 93 % 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与武汉和杭州都有联系的175个国家。",
        "output": "match(a where a.name='武汉')-[e]->(b:country)<-[e2]-(c where c.name='杭州') return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户黄伟发布的帖子,被其他用户喜欢的数量",
        "output": "match(a:user where a.name='黄伟')-[e:publish]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减71的最小值",
        "output": "MIN(a.age - 71)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 找出与软件Zookeeper有关系的公司, 返回和这些公司有关联的软件的,stars的求和值减536加4的个数;2: 给出id为58的点的价值,id,名字;3: 查找名为蚂蚁集团的company;4: 给出company的三角的环,边标签等于company_creates_software, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:software where a.name= 'Zookeeper')-[e]-(b:company)-[e2]-(c:software) return COUNT(SUM(c.stars) - 536 + 4);2: match(a where a.id = '58') return a.value, a.id, a.name;3: match(a:company where a.name = '蚂蚁集团') return a;4: match(a:company)-[e:company_creates_software]->(b)-[e2:company_creates_software]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找两个学院（法学院和土木学院）的共同教师节点。",
        "output": "match(a where a.name = '法学院')-[e:has]->(b:teacher)<-[e2:has]-(c where c.name = '土木学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为35的course belong的department, 并将department有关的student的age的最小值赋值给department的name, 接着查询department的name小于35的department has的student",
        "output": "match(a:course where a.id = 35)-[e:belong]->(b:department) let b.name = MIN((b:department)-[e2]-(c:student) => c.age) match(b:department where b.name < 35)-[e3:has]->(d:student) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 张雪属于公司节点员工列表中的个人。",
        "output": "match(a:person where a.name = '张雪')-[e:belong]->(b:company)-[e2:employee]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出80个名为孙强的点has的类型是goods的节点,且其sellerNumber不等于427.43或value不为空",
        "output": "match(a where a.name='孙强')-[e:has]->(b:goods where b.sellerNumber <> 427.43 or (b.value is not null)) return b limit 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person杜宏和李雪都存在pay关系的点",
        "output": "match(a:person where a.name='杜宏')-[e:pay]->(b)<-[e2:pay]-(c:person where c.name='李雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司谷歌 合作的大学,返回大学 属于的城市的id对76取余的值",
        "output": "match(a:company where name = '谷歌')-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return c.id % 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,大小分组,计算id对80取余的最大值",
        "output": "return MAX(a.id % 80) group by a.id, a.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与作家马建国有撰写关系，且引用了书《呐喊》的书节点，并返回这些书的类别、ID、创建时间、马建国的年龄以及《呐喊》这本书的名称。",
        "output": "match(a:author where a.name='马建国')-[e:write]->(b:book)<-[e2:refers]-(c:book where c.name='呐喊') return a.age,b.category, b.id, b.createTime,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从person吴思琪出发,经过标签为喜欢的边,走3到5跳到达的person点",
        "output": "match(a:person where a.name='吴思琪')-[e:likes]->{3,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person韩雪认识的person节点支付的person",
        "output": "match(a:person where a.name = '韩雪')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person徐雪有同事关系的person,再返回以恋人关系关联了徐雪的person",
        "output": "match(a:person where a.name = '徐雪')-[e:colleague]->(b:person),(a:person where a.name = '徐雪')<-[e2:lover]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与teacher周红有关系的teacher的salary",
        "output": "match(a:teacher where a.name='周红')-[e]-(b:teacher) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,gender,id, 数据为(162,'male',96), 以属性gender作为相等条件,查询标签等于teacher的点,并根据gender升序排列",
        "output": "with p as (select * from (VALUES(162,'male',96)) as t(height,gender,id))MATCH (a:teacher WHERE a.gender = p.gender) RETURN a ORDER BY a.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与郑思琪存在watch关系的film,film与tag存在has关系的点,返回这些点的value",
        "output": "match(a where a.name = '郑思琪')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回以属于关系关联了部门眼科的医生;2: 请帮我查找与名为郑思琪和马国强的点共同诊断的,label为病人的节点;3: 请帮我查找名为郑若涵的doctor;4: 请帮我找出满足条件薪资不是8921的节点;5: 查询所有和名为陈轩的doctor有friend关系,或有friend的friend关系的patient;6: 查找类型是病人,名为黄雪的点,返回这些点的性别,年龄,id;7: 给出和patient陈若涵有关的department,称为X,再给出和这个X有关联的其他medicine,以及和X有关联的medicine;8: 给出全部源点标签等于医生,边标签等于doctor_belong_department,且f0大于792或f1为false的边;",
        "output": "查询语句为:1: match(a:department where a.name='眼科')<-[e:doctor_belong_department]-(b:doctor) return b;2: match(a where a.name = '郑思琪')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = '马国强') return b;3: match(a:doctor where a.name = '郑若涵') return a;4: match(a where a.salary <> 8921) return a;5: match(a:doctor where n.name=陈轩)-[e:friend]->{1,2}(b:patient) return b;6: match(a:patient where a.name = '黄雪') return a.gender, a.age, a.id;7: match(a:patient where a.name = '陈若涵')-[e]-(b:department), (b:department)-[e2]-(c:medicine),(b:department)-[e3]-(d:medicine) return a, b, c, d;8: match(a:doctor)-[e:doctor_belong_department where e.f0 > 792 or e.f1 = false]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 返回源点类型为buyer,边类型为buyer_consult_seller的边,返回这些边的weight对138.58取余的和,和targetId乘130的值;2: 返回前194个满足条件category不是水果或id的最小值大于等于605.48或sellerNumber大于等于3214.19的goods;3: 请帮我找出与卖家有关系的买家节点,且买家节点的年龄为空,并返回这些点的id除40的最小值,以及id加16的值;4: 返回全部源点标签为buyer,边标签为buyer_creates_orders的边,返回这些边的f0的和加742减897的平均值,和weight乘119.31的值;",
        "output": "查询语句为:1: match(a:buyer)-[e:buyer_consult_seller]->(b) return SUM(e.weight % 138.58), e.targetId * 130;2: match(a:goods where a.category <> '水果' or MIN(a.id) >= 605.48 or a.sellerNumber >= 3214.19) return a limit 194;3: match(a:seller)-[e]->(b:buyer where (b.age is null)) return MIN(b.id / 40), b.id + 16;4: match(a:buyer)-[e:buyer_creates_orders]->(b) return AVG(SUM(e.f0) + 742 - 897), e.weight * 119.31;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我找出被作家吴梅认识的作家;2: 查询所有和名为悲惨世界的书有引用关系,或有引用的引用关系的书;3: 请帮我查找179个与罪与罚和白夜行都存在关系的book节点;4: 请帮我找出所有源点label为book,边label为book_refers_book的边,返回这些边的targetId减197的值,和targetId乘targetId的最小值;5: 请帮我找出从编辑赵建国出发,经过类型是publisher_publish_book的边,走2度到达的书点;",
        "output": "查询语句为:1: match(a:author)<-[e:author_knows_author]-(b:author where b.name='吴梅') return a, b;2: match(a:book where n.name=悲惨世界)-[e:book_refers_book]->{1,2}(b:book) return b;3: match(a where a.name='罪与罚')-[e]->(b:book)<-[e2]-(c where c.name='白夜行') return b limit 179;4: match(a:book)-[e:book_refers_book]->(b) return e.targetId - 197, MIN(e.targetId * e.targetId);5: match(a:publisher where a.name='赵建国')-[e:publisher_publish_book]->{2,2}(b:book) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部作家以id分组的身高, 根据身高降序排序",
        "output": "match(a:author) return a.height group by a.id order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出17到76之间的所有与电影院有关的电影节点，并计算这些节点的价值加12的数量。然后找出这些节点中每个节点的ID除以48减去的最大价值。",
        "output": "match(a:cinema)-[e]->(b:film where (b.id BETWEEN 17 AND 76)) return COUNT(b.value + 12), MAX(b.id / 48 - b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄加13的值",
        "output": "a.age + 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出共同关联的person节点，名称为何建国和黄建聪。",
        "output": "match(a where a.name = '何建国')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '黄建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回从id为24开始，id递减到54的所有订单。",
        "output": "match(a:orders where a.id >= 24) return a order by a.id desc limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person以id分组的年龄, 根据年龄从小到大排序",
        "output": "match(a:person) return a.age group by a.id order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表262,235,591,794,588, 源点的id等于输入表id,查询电影少年足球的所有标签等于朋友的边,并根据源点id降序排列,返回123个",
        "output": "with p as (select * from (VALUES(262),(235),(591),(794),(588)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '少年足球')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId DESC LIMIT 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为2的点的id,level",
        "output": "match(a where a.id = 2) return a.id, a.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询属于美国城市的belong关系。",
        "output": "match(a:country where a.name='美国')<-[e:belong]-(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 查询类型是post,名为Post_357的点,返回这些点的name,wordCount,id;2: 查找用户王建国的类型为相关者的边,并根据时间戳升序排列,返回16个;3: 查找188个名为黄轩的点likes的类型为post的节点,且其createTime不是2010年12月03日或name是95;4: 返回全部名为王若涵的点喜欢的帖子;",
        "output": "查询语句为:1: match(a:post where a.name = 'Post_357') return a.name, a.wordCount, a.id;2: match(a:user where a.name = '王建国')-[e:relation]->(b) return b order by e.timeStamp asc limit 16;3: match(a where a.name='黄轩')-[e:user_likes_post]->(b:post where b.createTime <> '2010-12-03' or b.name = 95) return b limit 188;4: match(a where a.name='王若涵')-[e:user_likes_post]->(b:post) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询92个名为张月的点knows的类型是person的节点,且其age大于67,name不等于黄梅",
        "output": "match(a where a.name='张月')-[e:knows]->(b:person where b.age > 67 and b.name <> '黄梅') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除155的值",
        "output": "a.height / 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,createTime,name, 数据为(5,2000-02-12,'呐喊'),(90,2000-11-10,'三体')的子查询作为输入表, 以属性name作为相等条件,请帮我查找80个名为赵伟的点publish的标签等于book的节点,且节点wordCount小于等于767",
        "output": "with p as (select * from (VALUES(5,2000-02-12,'呐喊'),(90,2000-11-10,'三体')) as t(id,createTime,name))MATCH (a WHERE a.name = p.name AND (a.name = '赵伟')) -[e:publisher_publish_book ]->(b:book WHERE b.wordCount <= 767) RETURN b LIMIT 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与买家赵思思有关,且与商品手机有关系的订单节点",
        "output": "match(a:buyer where a.name='赵思思')-[e:creates]-(b:orders)-[e2:contain]-(c:goods where c.name='手机') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出166个与马红和陈月都存在关系的person节点",
        "output": "match(a where a.name='马红')-[e]->(b:person)<-[e2]-(c where c.name='陈月') return b limit 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出论坛百度贴吧包含的用户,被其他论坛包含的数量",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:user)<-[e2:contain]-(c:forum) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为艺术学院的点拥有的全部教师,并对这些教师的年龄进行求和",
        "output": "match(a where a.name='艺术学院')-[e:has]->(b:teacher) return SUM(b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与杜建聪和周强都有关联的69个人节点",
        "output": "match(a where a.name='杜建聪')-[e]->(b:person)<-[e2]-(c where c.name='周强') return b limit 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出doctor周若涵creates的prescription,以及accept这些prescription的patient, 令prescription的height等于patient的height的求和值加177,令doctor的id等于doctor的height除162除age, 返回doctor的id,prescription的createTime,patient的gender",
        "output": "match(a:doctor where name = '周若涵')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) let b.height = SUM(c.height) + 177,let a.id = a.height / 162 / a.age return a.id,b.createTime,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从person黄思琪出发,经过标签等于knows的边,走1跳到达的person点",
        "output": "match(a:person where a.name='黄思琪')-[e:knows]->{1,1}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询被部门法学院拥有的学生;2: 请帮我查找名为周思琪的点选择的所有课程,并对这些点的id进行求和;3: 给出以has关系关联了department经管学院的university;4: 查找和教师有关联的课程节点,并根据其价值,课时分组,返回价值,课时,以及价值加61减90的平均值;5: 返回和教师王轩有关的课程,再返回和王轩teacher_teach_course的其他课程,返回它们;6: 帮我查询与教师kate和韩建国都存在teacher_teach_course关系的点;7: 查找所有department以name分组的size, 根据size升序排序;8: 查找所有源点标签等于大学,目标点标签等于部门,标签等于university_has_department的边;9: 给出university北京大学 has的department,返回department has的student的height除199的值 ;",
        "output": "查询语句为:1: match(a:student)<-[e:department_has_student]-(b:department where b.name='法学院') return a, b;2: match(a where a.name='周思琪')-[e:student_selects_course]->(b:course) return SUM(b.id);3: match(a:department where a.name='经管学院')<-[e:university_has_department]-(b:university) return b;4: match(a:teacher)-[e:teacher_teach_course]-(b:course) return b.value, b.courseHour, AVG(b.value + 61 - 90) group by b.value, b.courseHour;5: match(a:teacher where a.name = '王轩')-[e]-(b:course), (a:teacher)-[e2:teacher_teach_course]->(c:course) return a, b, c;6: match(a:teacher where a.name='kate')-[e:teacher_teach_course]->(b)<-[e2:teacher_teach_course]-(c:teacher where c.name='韩建国') return b;7: match(a:department) return a.size group by a.name order by a.size asc;8: match(a:university)-[e:university_has_department]->(b:department) return e;9: match(a:university where name = '北京大学')-[e:university_has_department]->(b:department)-[e2:department_has_student]->(c:student) return c.height / 199;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找74个买家马梅和何思琪,共同的伙伴",
        "output": "match(a:buyer where a.name='马梅')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='何思琪') return b limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型为仓库,边类型为拥有的边,返回这些边的f0对959取余对131取余减154.62的平均值,和源点id对源点id取余的最小值",
        "output": "match(a:repository)-[e:has]->(b) return AVG(e.f0 % 959 % 131 - 154.62), MIN(e.srcId % e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找源点name是蚂蚁集团,边标签为company_belong_city,且满足条件srcId为空的边,返回这些边的srcId减181的值",
        "output": "match(a where a.name = '蚂蚁集团')-[e:company_belong_city where (e.srcId is null)]->(b) return e.srcId - 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询课程线性代数的所有伙伴,的targetId的和乘37乘目标点id的值",
        "output": "match(a:course where a.name= '线性代数')-[e:partner]->(b) return SUM(e.targetId) * 37 * e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点标签为人，边标签为父母的边，并返回它们的权重乘以185.26再加上137的结果，以及将这个结果除以f0。",
        "output": "match(a:person)-[e:parent]->(b) return SUM(e.weight * 185.26 + 137), SUM(e.f0 / e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以53, 'Tt', 29作为输入调用pageRank函数,返回运算结果",
        "output": "Call PAGERANK(53, 'Tt', 29) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的salary的数量乘salary的值",
        "output": "match(a:person) return COUNT(a.salary) * a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表426,938, 以属性id作为相等条件,请帮我查找87个和label为person的点有person_pay_person关系的person,以及和这些person有person_knows_person关系的person",
        "output": "with p as (select * from (VALUES(426),(938)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_pay_person ]->(b:person) -[e2:person_knows_person ]->(c:person) RETURN c LIMIT 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出公司蚂蚁集团雇佣的person,以及雇佣这些person的公司, 令person的价值等于公司的名字, 返回公司(a)的价值,person(b)的id,公司(c)的人数",
        "output": "match(a:company where name = '蚂蚁集团')-[e:employee]->(b:person)<-[e2:employee]-(c:company) let b.value = a.name return a.value,b.id,c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与forum中国军事论坛存在contain关系,且与post Post_285存在likes关系的user节点，返回这些user的salary,id,name,及forum中国军事论坛的name,及post Post_285的wordCount",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:contain]->(b:user)<-[e2:likes]-(c:post where c.name='Post_285') return a.name,b.salary, b.id, b.name,c.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和label为教师的点有教关系的课程,且和这些课程有属于关系的部门,且和这些部门有拥有关系的学生",
        "output": "match(a:teacher)-[e:teach]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:student) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person何梅有关的person,再给出和何梅own的其他account,返回它们",
        "output": "match(a:person where a.name = '何梅')-[e]-(b:person), (a:person)-[e2:own]->(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 查询名为建国大业的film;2: 帮我查询person黄强的朋友的朋友的朋友;3: 找出和comment有关联的film节点,并根据其category,id,value分组,返回category,id,value,以及value减418的最大值;",
        "output": "查询语句为:1: match(a:film where a.name = '建国大业') return a;2: match(a:person where a.name='黄强')-[e:friend]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d;3: match(a:comment)-[e:comment_belong_film]-(b:film) return b.category, b.id, b.value, MAX(b.value - 418) group by b.category, b.id, b.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与城市广州存在包含关系,且与大学复旦大学存在合作关系的公司节点，返回这些公司的价值,及城市广州的价值,及大学复旦大学的名字",
        "output": "match(a:city where a.name='广州')-[e:contain]->(b:company)<-[e2:cooperate]-(c:university where c.name='复旦大学') return a.value,b.value,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签为用户,目标点标签为帖子,标签为帖子或用户或标签的边",
        "output": "match(a:user)-[e:post | user | tag]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,size, 数据为('物理学院',98,94)的子查询作为输入表, 以属性name作为相等条件,找出和部门体育学院有关的教师,称为X,再找出和这个X有关联的其他教师,以及和X有关联的教师",
        "output": "with p as (select * from (VALUES('物理学院',98,94)) as t(name,id,size))MATCH (a:department WHERE a.name = p.name AND (a.name = '体育学院')) -[e ]-(b:teacher) , (b:teacher) -[e2 ]-(c:teacher) , (b:teacher) -[e3 ]-(d:teacher) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找所有defaultName1的点deposit的account,然后查找defaultName1被apply的person,一起返回;2: 请帮我查找前72个满足条件name的平均值小于30,height对150取余的平均值小于等于4766,id不为空的person;3: 请帮我查找所有和person郑红之间有person_invest_company关系的公司;4: 找出全部源点类型为贷款,目标点类型为账号,类型为loan_deposit_account的边;5: 返回以申请关系关联了贷款defaultName的person;6: 帮我查询名为Zeus的账号;7: 返回贷款存款的账号,返回其源点的金额乘5434.75的值,以及目标点的id减24的值;",
        "output": "查询语句为:1: match(a where a.name = 'defaultName1')-[e:loan_deposit_account]->(b:account),(a where a.name = 'defaultName1')<-[e2:person_apply_loan]-(c:person) return a, b, c;2: match(a:person where AVG(a.name) < 30 and AVG(a.height % 150) <= 4766 and (a.id is not null)) return a limit 72;3: match(a:person where a.name='郑红')-[e:person_invest_company]->(b:company) return b;4: match(a:loan)-[e:loan_deposit_account]->(b:account) return e;5: match(a:loan where a.name='defaultName')<-[e:person_apply_loan]-(b:person) return b;6: match(a:account where a.name = 'Zeus') return a;7: match(a:loan)-[e:loan_deposit_account]->(b:account) return a.amount * 5434.75, b.id - 24;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生李思思创造的处方节点包含的药品",
        "output": "match(a:doctor where a.name = '李思思')-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找30个课时对36取余小于94的课程,根据课时从小到大排列",
        "output": "match(a:course where a.courseHour % 36 < 94) return a order by a.courseHour asc limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " LX001和Geaflow123有84个共同朋友。",
        "output": "match(a:account where a.name='LX001')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Geaflow123') return b limit 84",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 请帮我找出和person王轩有person_creates_comment关系的comment,以及和person韩轩有person_likes_comment关系的comment,将它们都返回;2: 帮我查询person黄月的全部类型是relation的边,并根据f1从大到小排列,返回38个;3: 帮我查询和评论有关联的电影节点,并根据其价值,id分组,返回价值,id,以及价值除价值的值;4: 返回comment的2跳以内的环;5: 查找与名为何建聪和王雪的点共同创造的,label为评论的节点;6: 请帮我找出person何月的全部friend,的targetId乘74的值;7: 请帮我查找全部id为44的comment关联的comment,和以creates关系关联了这些comment的其他person;8: 返回所有与person陈思思有关系的电影的价值;9: 返回和person有关联的电影节点,并根据其名字分组,返回名字,以及价值乘308的求和值;",
        "output": "查询语句为:1: match(a:person where a.name = '王轩')-[e:person_creates_comment]->(b:comment),(c:person where c.name = '韩轩')-[e2:person_likes_comment]->(d:comment)return a, b, c, d;2: match(a:person where a.name = '黄月')-[e:relation]->(b) return b order by e.f1 desc limit 38;3: match(a:comment)-[e:comment_belong_film]-(b:film) return b.value, b.id, b.value / b.value group by b.value, b.id;4: match(a:comment)->{0,1}(b)->(a) return a.id, b.id as b_id;5: match(a where a.name = '何建聪')-[e:person_creates_comment]->(b:comment)<-[e2:person_creates_comment]-(c where c.name = '王雪') return b;6: match(a:person where a.name= '何月')-[e:friend]->(b) return e.targetId * 74;7: match(a:comment where a.id = '44')-[e]-(b:comment)<-[e2:person_creates_comment]-(c:person) return b,c;8: match(a:person where a.name='陈思思')-[e]-(b:film) return b.value;9: match(a:person)-[e:person_watch_film]-(b:film) return b.name, SUM(b.value * 308) group by b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询同时涉及王宏和李雪的84个商品节点。",
        "output": "match(a where a.name='王宏')-[e]->(b:goods)<-[e2]-(c where c.name='李雪') return b limit 84",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出国家日本的全部伙伴,的targetId的最小值加132的最大值;2: 查找名为天津的城市;3: 帮我查询全部名为纽约的点的,id在51到95之间或name不等于俄罗斯的partner,返回这些partner的area,和边的f0;4: 给出前152个label为country_contain_city的边;",
        "output": "查询语句为:1: match(a:country where a.name= '日本')-[e:partner]->(b) return MAX(MIN(e.targetId) + 132);2: match(a:city where a.name = '天津') return a;3: match(a where a.name='纽约')-[e:partner]->(b where (b.id BETWEEN 51 AND 95) or b.name <> '俄罗斯') return b.area,e.f0;4: match(a)-[e:country_contain_city]->(b) return e limit 152;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被处方包含数量大于98的药品,记为relationCount,再查询这些药品包含的医生",
        "output": "match(a:medicine) let a.relationCount = COUNT((a:medicine)<-[e:contain]-(b:prescription) => b.id) match(a where a.relationCount > 98)-[e2:contain]->(c:doctor) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和tag历史有关系的cinema或film或comment,返回这些点的name",
        "output": "match(a:tag where a.name='历史')-[e]-(b:cinema | film | comment) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马宏认识的人中，被其他人喜欢的人数。",
        "output": "match(a:person where a.name='马宏')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查找和大学有关联的部门节点,并根据其名字分组,返回名字,以及id减42的平均值;2: 找出department数学学院的relation的relation的friend;3: 请帮我查找全部id为3的教师关联的教师,和以拥有关系关联了这些教师的其他部门;4: 给出部门拥有的学生,返回其源点的价值除979的最小值,以及目标点的id除61的最小值;5: 找出所有与university南京大学有关系的course的id;6: 给出所有与大学复旦大学有关系的学生的性别;7: 请帮我查找与法学院存在department_has_student关系的student,student与course存在student_selects_course关系的点,返回这些点的id;8: 找出和student吴科有student_selects_course关系的course,再找出以student_selects_course关系关联了吴科的course;9: 给出全部源点label为大学,目标点label为部门,label为university_has_department的边;",
        "output": "查询语句为:1: match(a:university)-[e:university_has_department]-(b:department) return b.name, AVG(b.id - 42) group by b.name;2: match(a:department where a.name='数学学院')-[e:relation]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d;3: match(a:teacher where a.id = '3')-[e]-(b:teacher)<-[e2:department_has_teacher]-(c:department) return b,c;4: match(a:department)-[e:department_has_student]->(b:student) return MIN(a.value / 979), MIN(b.id / 61);5: match(a:university where a.name='南京大学')-[e]-(b:course) return b.id;6: match(a:university where a.name='复旦大学')-[e]-(b:student) return b.gender;7: match(a where a.name = '法学院')-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return c.id;8: match(a:student where a.name = '吴科')-[e:student_selects_course]->(b:course),(a:student where a.name = '吴科')<-[e2:student_selects_course]-(c:course)return a, b, c;9: match(a:university)-[e:university_has_department]->(b:department) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询20个id小于等于4的书,根据创建时间升序排列",
        "output": "match(a:book where a.id <= 4) return a order by a.createTime asc limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 返回名为陈若涵的点喜欢的person,并对这些点的薪资进行求和;2: 请帮我找出person郑梅的所有类型是partner的边,并根据f0升序排列,返回71个;3: 返回前85个性别是famale或id不是64的person;4: 请帮我找出源点id是6995或name是杜月,且age大于等于50,边类型为person_pay_person,且满足条件srcId不是126且f1不等于true且timeStamp为2020年01月12日的边,返回这些边的srcId加117的个数;",
        "output": "查询语句为:1: match(a where a.name='陈若涵')-[e:person_likes_person]->(b:person) return SUM(b.salary);2: match(a:person where a.name = '郑梅')-[e:partner]->(b) return b order by e.f0 asc limit 71;3: match(a:person where a.gender = 'famale' or a.id <> 64) return a limit 85;4: match(a where (a.id = 6995 or a.name = '杜月') and a.age >= 50)-[e:person_pay_person where e.srcId <> 126 and e.f1 <> true and e.timeStamp = '2020-01-12']->(b) return COUNT(e.srcId + 117);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与卖家张红和孙伟都存在回答关系的点",
        "output": "match(a:seller where a.name='张红')-[e:ask]->(b)<-[e2:ask]-(c:seller where c.name='孙伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找48个name等于Order_155的orders,根据price从大到小排列",
        "output": "match(a:orders where a.name = 'Order_155') return a order by a.price desc limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以734,406,191作为请求点id, 源点的id等于输入表id,查询医生的伙伴,或其伙伴的伙伴",
        "output": "with p as (select * from (VALUES(734),(406),(191)) as t(id)) MATCH (a:doctor WHERE a.id = p.id) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出论坛CSDN的所有类型为朋友的边,并根据权重降序排列,返回41个",
        "output": "match(a:forum where a.name = 'CSDN')-[e:friend]->(b) return b order by e.weight desc limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找作家的2跳的环",
        "output": "match(a:author)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和person郑轩之间有恋人关系的person",
        "output": "match(a:person where a.name='郑轩')-[e:lover]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出110个person周梅和孙国强,共同的colleague;2: 请帮我找出名为马伟和孙月的,标签为person的点公共的家人节点的名单;3: 找出源点身高为173,边类型为person_parent_person,且权重小于154.59的边,返回这些边的权重除167.01的求和值;",
        "output": "查询语句为:1: match(a:person where a.name='周梅')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='孙国强') return b limit 110;2: match(a:person where a.name='马伟')-[e:person_family_person]->(b)<-[e2:person_family_person]-(c:person where c.name='孙月') return b.name;3: match(a where a.height = 173)-[e:person_parent_person where e.weight < 154.59]->(b) return SUM(e.weight / 167.01);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回边标签为'拥有',源点标签为'person',目标点标签为'账号'的边。",
        "output": "match(a:person)-[e:own]->(b:account) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名字为马月的person认识的person的名称,以及这些person 喜欢的person的名称",
        "output": "match(a:person where a.name = '马月')-[e:knows]->(b:person)-[e2:likes]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取年龄在39至61岁之间的买家创建的订单及其包含的商品名称。",
        "output": "match(a:buyer where (a.age BETWEEN 39 AND 61))-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回person标签的所有点，按身高升序排列。",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型是书,边类型是引用,且满足条件f0为空的边",
        "output": "match(a:book)-[e:refers where (e.f0 is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被company字节creates的software",
        "output": "match(a:software)<-[e:creates]-(b:company where b.name='字节') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person的三角的环,边标签等于knows, 并返回这些点的id",
        "output": "match(a:person)-[e:knows]->(b)-[e2:knows]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表833,479,842, 以属性id作为相等条件,查询与person黄雪和王国强都存在person_family_person关系的点",
        "output": "with p as (select * from (VALUES(833),(479),(842)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '黄雪')) -[e:person_family_person ]->(b) <-[e2:person_family_person ]-(c:person WHERE c.name = '王国强') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 韩轩和陈思思的共同联系人有多少个？",
        "output": "match(a:person where a.name='韩轩')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈思思') return b limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点peopleNumber小于等于657或name不等于Bilibili,且name不是阿里,目标点gender为famale,且标签为employee的边",
        "output": "match(a where (a.peopleNumber <= 657 or a.name <> 'Bilibili') and a.name <> '阿里')-[e:employee]->(b where b.gender = 'famale') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Flink的person或company或software,以及与其有关的person,并返回Flink的openSource和这些person的name",
        "output": "match(a:person | company | software where name = 'Flink')-[e]-(b:person) return a.openSource, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与54个标签为'person'的点有恋人关系且与这些人也有朋友关系的个体。",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person) return c limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person支付的person, 令person(b)的年龄的值等于喜欢person的person的性别的平均值, 再查找person喜欢的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.age = AVG((b:person)<-[e2:likes]-(c:person) => c.gender) match(b:person)-[e3:likes]->(d:person) return b.age, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与编辑张伟有关系的读者的id",
        "output": "match(a:publisher where a.name='张伟')-[e]-(b:reader) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有起点标签为'post'，终点标签为'tag'，且标签为'has'的边。",
        "output": "match(a:post)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前97个满足条件名字等于放射科或id不等于46,且地址不是C栋的部门",
        "output": "match(a:department where (a.name = '放射科' or a.id <> 46) and a.address <> 'C栋') return a limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为Tom和郑梅的,标签等于publisher的点公共的relation节点的名单",
        "output": "match(a:publisher where a.name='Tom')-[e:relation]->(b)<-[e2:relation]-(c:publisher where c.name='郑梅') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('Order_495',706,76)作为请求表数据,属性分别为name,value,id, 源点的value等于输入表value,请帮我找出类型是orders的所有点,并根据price从小到大排列",
        "output": "with p as (select * from (VALUES('Order_495',706,76)) as t(name,value,id))MATCH (a:orders WHERE a.value = p.value) RETURN a ORDER BY a.price ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部标签为software的点",
        "output": "match(a:software) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为蚂蚁集团的公司,以及与其有关的城市,并返回蚂蚁集团的名字和这些城市的人数",
        "output": "match(a:company where name = '蚂蚁集团')-[e]-(b:city) return a.name, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出person杜思思出发，通过parent类型的边，走了1到3步到达的所有person节点",
        "output": "match(a:person where a.name='杜思思')-[e:parent]->{1,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与department皮肤科和prescription Prescription_274都存在关系的patient节点，返回它们的id、age和height。",
        "output": "match(a:department where a.name='皮肤科')-[e]->(b:patient)<-[e2]-(c:prescription where c.name='Prescription_274') return b.id, b.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部类型是编辑或作家的点",
        "output": "match(a:publisher | author) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为person,名为陈建国的点,返回这些点的年龄,性别",
        "output": "match(a:person where a.name = '陈建国') return a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 返回名为张红的patient;2: 请帮我找出和病人有关联的处方节点,并根据其权重,创建时间,名字分组,返回权重,创建时间,名字,以及权重加233的平均值;3: 请帮我找出所有department以weight,id分组的name, 根据name降序排序;4: 返回prescription Prescription_436contain的medicine,被其他prescription contain的数量;5: 给出Prescription_309的点contain的medicine,然后给出Prescription_309被creates的doctor,一起返回;6: 返回标签等于处方的所有点,并根据id从小到大排列;7: 请帮我查找与department放射科有关,且与prescription Prescription_215有关系的doctor节点;8: 请帮我查找label为病人的点,返回163个;9: 帮我查询与名为韩若涵和韩科的点共同接受的,标签为处方的节点;",
        "output": "查询语句为:1: match(a:patient where a.name = '张红') return a;2: match(a:patient)-[e:patient_accept_prescription]-(b:prescription) return b.weight, b.createTime, b.name, AVG(b.weight + 233) group by b.weight, b.createTime, b.name;3: match(a:department) return a.name group by a.weight, a.id order by a.name desc;4: match(a:prescription where a.name='Prescription_436')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c:prescription) return COUNT(c);5: match(a where a.name = 'Prescription_309')-[e:prescription_contain_medicine]->(b:medicine),(a where a.name = 'Prescription_309')<-[e2:doctor_creates_prescription]-(c:doctor) return a, b, c;6: match(a:prescription) return a order by a.id asc;7: match(a:department where a.name='放射科')-[e:department_has_doctor]-(b:doctor)-[e2:doctor_creates_prescription]-(c:prescription where c.name='Prescription_215') return b;8: match(a:patient) return a limit 163;9: match(a where a.name = '韩若涵')-[e:patient_accept_prescription]->(b:prescription)<-[e2:patient_accept_prescription]-(c where c.name = '韩科') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与国家英国存在包含关系,且与国家法国存在属于关系的城市节点，返回这些城市的人数,名字,面积,及国家英国的人数,及国家法国的人数",
        "output": "match(a:country where a.name='英国')-[e:contain]->(b:city)<-[e2:belong]-(c:country where c.name='法国') return a.peopleNumber,b.peopleNumber, b.name, b.area,c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 给出所有和名为defaultName的贷款有相关者关系,或有相关者的相关者关系的账号;2: 找出account LX001的label为partner的边,并根据weight降序排列,返回125个;3: 请帮我查找全部company以name分组的name, 根据name从大到小排序;4: 查找账号XiaoHu还款的贷款,被其他账号还款的数量;5: 请帮我查找全部id为199的person关联的loan,和以repay关系关联了这些loan的其他account;6: 返回所有名为腾讯的点申请的贷款;7: 帮我查询名为陈科和韩建国的,标签等于person的点公共的相关者节点的名单;",
        "output": "查询语句为:1: match(a:loan where n.name=defaultName)-[e:relation]->{1,2}(b:account) return b;2: match(a:account where a.name = 'LX001')-[e:partner]->(b) return b order by e.weight desc limit 125;3: match(a:company) return a.name group by a.name order by a.name desc;4: match(a:account where a.name='XiaoHu')-[e:account_repay_loan]->(b:loan)<-[e2:account_repay_loan]-(c:account) return COUNT(c);5: match(a:person where a.id = '199')-[e]-(b:loan)<-[e2:account_repay_loan]-(c:account) return b,c;6: match(a where a.name='腾讯')-[e:company_apply_loan]->(b:loan) return b;7: match(a:person where a.name='陈科')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='韩建国') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与大学有关系的教师节点,且教师节点的性别不是famale,并返回这些教师的id减78的值,以及教师的薪资乘4101减14的最大值",
        "output": "match(a:university)-[e]->(b:teacher where b.gender <> 'famale') return b.id - 78, MAX(b.salary * 4101 - 14)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表119, 源点的id等于输入表id,请帮我找出名为杜科和吴国强的,标签等于person的点公共的朋友节点的名单",
        "output": "with p as (select * from (VALUES(119)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '杜科')) -[e:friend ]->(b) <-[e2:friend ]-(c:person WHERE c.name = '吴国强') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有与person相关的tag，以及这些tag与其他通过has关系连接的film。",
        "output": "match(a:person where a.id = '138')-[e]-(b:tag)<-[e2:has]-(c:film) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为属于,且f0小于91的边",
        "output": "match(a)-[e:belong where e.f0 < 91]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,薪资,id分组,计算身高除194的值",
        "output": "return a.height / 194 group by a.name, a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以705,199作为请求点id, 以属性id作为相等条件,请帮我查找源点名字不等于韩雪,边标签为person_knows_person,且f0在519到813之间的边,返回这些边的目标点id对目标点id取余的数量",
        "output": "with p as (select * from (VALUES(705),(199)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name <> '韩雪')) -[e:person_knows_person WHERE e.f0 BETWEEN ASYMMETRIC 519 AND 813 ]->(b) RETURN COUNT(e.targetId % e.targetId) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的最大值减salary的最小值",
        "output": "MIN(MAX(a.salary) - a.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据类别分组,计算字数对字数取余的值",
        "output": "return a.wordCount % a.wordCount group by a.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为卖家的点,返回150个",
        "output": "match(a:seller) return a limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算薪资除7620的最大值",
        "output": "return MAX(a.salary / 7620) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以197,445作为请求点id, 以属性id作为相等条件,查找buyer马宏look的goods,被其他orders contain的数量",
        "output": "with p as (select * from (VALUES(197),(445)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '马宏')) -[e:buyer_look_goods ]->(b:goods) <-[e2:orders_contain_goods ]-(c:orders) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Comment_133和Comment_401都有关联的点",
        "output": "match(a:comment where a.name='Comment_133')-[e:belong]->(b)<-[e2:belong]-(c:comment where c.name='Comment_401') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询何伟认识的人，返回他们支付人的性别",
        "output": "match(a:person where name = '何伟')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询和标记为'person'的节点有父母关系的节点，并且这些节点有家人关系，并且这些节点有朋友关系。",
        "output": "match(a:person)-[e:parent]->(b:person)-[e2:family]->(c:person)-[e3:friend]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从编辑黄科出发,经过label为发布的边,走2跳到达的书点",
        "output": "match(a:publisher where a.name='黄科')-[e:publish]->{2,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以包含关系关联了帖子Post_249的论坛",
        "output": "match(a:post where a.name='Post_249')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和教师孙国强有关的大学,称为X,再请帮我找出和这个X有关联的其他教师,以及和X有关联的大学",
        "output": "match(a:teacher where a.name = '孙国强')-[e]-(b:university), (b:university)-[e2]-(c:teacher),(b:university)-[e3]-(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询教师陈思琪教的课程,被其他教师教的数量",
        "output": "match(a:teacher where a.name='陈思琪')-[e:teach]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 筛选出180个非冻结且上次登录时间晚于2010年4月15日的账号，并按照是否冻结进行排序。",
        "output": "match(a:account where a.isBlock <> true and a.lastLoginTime <> '2010-04-15') return a order by a.isBlock asc limit 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person knows的person,返回其源点的age乘34的值,以及目标点的id除41的值",
        "output": "match(a:person)-[e:knows]->(b:person) return a.age * 34, b.id / 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找教学生郑建国选择的课程,的教师",
        "output": "match(a:student where name = '郑建国')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点label为用户,目标点label为帖子,label为标签或用户的边",
        "output": "match(a:user)-[e:tag | user]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问处方Prescription_425上有哪些药品？",
        "output": "match(a:medicine)<-[e:contain]-(b:prescription where b.name='Prescription_425') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张红的点的,名字等于何建聪的恋人,返回这些恋人的性别,和边的目标点id,权重",
        "output": "match(a where a.name='张红')-[e:lover]->(b where b.name = '何建聪') return b.gender,e.targetId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person马国强pay的person, 令person(a)的id等于person(b)的id, 返回person(a)的age, person(b)的id",
        "output": "match(a:person where a.name='马国强')-[e:pay]->(b:person) let a.id = b.id return a.age,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找Hadoop和Calcite共同使用的软件节点。",
        "output": "match(a where a.name = 'Hadoop')-[e:uses]->(b:software)<-[e2:uses]-(c where c.name = 'Calcite') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点salary小于等于8332或gender不等于male,目标点name不是杜月或salary小于等于1690,且salary不为空,且label为family的边",
        "output": "match(a where a.salary <= 8332 or a.gender <> 'male')-[e:family]->(b where (b.name <> '杜月' or b.salary <= 1690) and (b.salary is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出在天津的公司。",
        "output": "match(a:company)<-[e:contain]-(b:city where b.name='天津') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与company微软有关,且与country中国有关系的city节点",
        "output": "match(a:company where a.name='微软')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='中国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回喜欢Tom的人以及与Tom有支付关系的人。",
        "output": "match(a:person where a.name = 'Tom')-[e:likes]->(b:person),(a:person where a.name = 'Tom')<-[e2:pay]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有小于6783的买家取消的订单，还有包含哪些商品？",
        "output": "match(a:buyer where a.salary < 6783)-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为51的点的name,scale,peopleNumber",
        "output": "match(a where a.id = '51') return a.name, a.scale, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为person的点,返回14个",
        "output": "match(a:person) return a limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值分组,计算value的平均值除922的值",
        "output": "return AVG(a.value) / 922 group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家的伙伴,或其伙伴的伙伴",
        "output": "match(a:buyer)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与郑建聪存在belong关系的company,company与software存在creates关系的点,返回这些点的lang",
        "output": "match(a where a.name = '郑建聪')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person陈建聪有关,且与person徐建国有关系的person节点",
        "output": "match(a:person where a.name='陈建聪')-[e:pay]-(b:person)-[e2:knows]-(c:person where c.name='徐建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询体育学院（名称）为空部门的教师姓名和所授课程名称。",
        "output": "match(a:department where a.name = '体育学院' and (a.size is null))-[e:has]->(b:teacher)-[e2:teach]->(c:course) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出性别为女性或薪水不等于9360的人的关联人，以及这些人的关联人。",
        "output": "match(a:person where a.gender = 'famale' or a.salary <> 9360)-[e:relates]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和大学有关联的城市节点,并根据其id分组,返回id,以及area的最大值加面积的最大值",
        "output": "match(a:university)-[e:belong]-(b:city) return b.id, MAX(MAX(b.area) + b.area) group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,创建时间分组,计算id对id取余的值",
        "output": "return a.id % a.id group by a.weight, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与post相关的tag节点，按照它们的id、name和value进行分组，并返回这些信息。",
        "output": "match(a:post)-[e:has]-(b:tag) return b.id, b.name, b.value group by b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询包含公司节点的重庆和巴黎之间的共同点。",
        "output": "match(a where a.name = '重庆')-[e:contain]->(b:company)<-[e2:contain]-(c where c.name = '巴黎') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与书籍ID为31的作家相关的关联者，再查找与这些关联者相关的其他关联者。",
        "output": "match(a:book where id = '31')-[e]-(b:author)-[e2:relation]->(c), (b:author)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和病人杜宏有3到6度关系的药品",
        "output": "match(a:patient where a.name='杜宏')-[e]->{3,6}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为ISSUE-374的点属于的仓库",
        "output": "match(a where a.name='ISSUE-374')-[e:belong]->(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为日本的,id小于等于32,value不是160的friend,返回这些friend的area,和边的weight",
        "output": "match(a where a.name='日本')-[e:friend]->(b where b.id <= 32 and b.value <> 160) return b.area,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有作者知道的边，计算这些边中targetId除以75的余数最大的targetId，以及weight的总和。然后将这个结果加上115.58乘以13的结果。",
        "output": "match(a:author)-[e:knows]->(b) return MAX(e.targetId % 75), SUM((SUM(e.weight) + 115.58) * 13)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有名为'越南'且标签为'国家'的点，并返回它们的价值。",
        "output": "match(a:country where a.name = '越南') return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与中国军事论坛有包含关系且拥有悬疑标签的帖子节点，包括帖子ID、字数、人数以及中国军事论坛中该帖子的数量和悬疑标签的ID。",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:contain]->(b:post)<-[e2:has]-(c:tag where c.name='悬疑') return a.peopleNumber,b.value, b.id, b.wordCount,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回城市节点标签为city,边标签为contain的边，并计算这些边weight乘175.08的求和值，以及f0对523取余的平均值。",
        "output": "match(a:city)-[e:contain]->(b) return SUM(e.weight * 175.08), AVG(e.f0 % 523)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问是否有赵国强或名字小于等于158的作家所写的书籍，以及这些书籍所关联的书籍名称？",
        "output": "match(a:author where a.name = '赵国强' or a.name <= 158)-[e:write]->(b:book)-[e2:relates]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和处方Prescription_283有关的病人,称为X,再帮我查询和这个X有关联的其他病人,以及和X有关联的部门",
        "output": "match(a:prescription where a.name = 'Prescription_283')-[e]-(b:patient), (b:patient)-[e2]-(c:patient),(b:patient)-[e3]-(d:department) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f0,weight,srcId, 数据为(607,101.46,112), 源点的weight等于输入表weight,查找117个软件Spark和Geaflow,共同的伙伴",
        "output": "with p as (select * from (VALUES(607,101.46,112)) as t(f0,weight,srcId))MATCH (a:software WHERE a.weight = p.weight AND (a.name = 'Spark')) -[e:partner ]->(b) <-[e2:partner ]-(c:software WHERE c.name = 'Geaflow') RETURN b LIMIT 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出16个与伦敦和巴黎都存在关系的university节点",
        "output": "match(a where a.name='伦敦')-[e]->(b:university)<-[e2]-(c where c.name='巴黎') return b limit 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询author write的book, 令book的price的值等于writebook的author的age的最大值, 再查找book knows的book",
        "output": "match(a:author)-[e:write]->(b:book) let b.price = MAX((b:book)<-[e2:write]-(c:author) => c.age) match(b:book)-[e3:knows]->(d:book) return b.price, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前40个label为选择的边",
        "output": "match(a)-[e:selects]->(b) return e limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与患者马建国和杜建国有接受关系的所有处方，并将它们一起返回。",
        "output": "match(a:patient where a.name = '马建国')-[e:accept]->(b:prescription),(c:patient where c.name = '杜建国')-[e2:accept]->(d:prescription) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询张轩和李伟的person节点中，共同的父亲节点。",
        "output": "match(a:person where a.name='张轩')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='李伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部订单以价值,id分组的价格, 根据价格从小到大排序",
        "output": "match(a:orders) return a.price group by a.value, a.id order by a.price asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与company滴滴有belong关系的2度以内的环",
        "output": "match(a:company where name = '滴滴')-[e:belong]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询128个name是伦敦的city,根据value从小到大排列",
        "output": "match(a:city where a.name = '伦敦') return a order by a.value asc limit 128",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(168,1,'male'),(191,62,'male'),(155,49,'male')作为请求表数据,属性分别为height,id,gender, 源点的id等于输入表id,请帮我找出编辑郑梅发布的书,被其他书认识的数量",
        "output": "with p as (select * from (VALUES(168,1,'male'),(191,62,'male'),(155,49,'male')) as t(height,id,gender))MATCH (a:publisher WHERE a.id = p.id AND (a.name = '郑梅')) -[e:publisher_publish_book ]->(b:book) <-[e2:knows ]-(c:book) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以840作为请求点id, 以属性id作为相等条件,请帮我找出年龄小于等于41的节点",
        "output": "with p as (select * from (VALUES(840)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.age <= 41)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出买家王月的所有类型是伙伴的边,并根据f1从大到小排列,返回56个",
        "output": "match(a:buyer where a.name = '王月')-[e:partner]->(b) return b order by e.f1 desc limit 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与person韩红有关系的账号的上次登录时间",
        "output": "match(a:person where a.name='韩红')-[e]-(b:account) return b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "权重加629加价格加172的值",
        "output": "a.weight + 629 + a.price + 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出198位女性，她们的名字是赵建聪或者身高不为179，并按照性别进行升序排序。",
        "output": "match(a:person where (a.name = '赵建聪' or a.height <> 179) and a.gender = 'famale') return a order by a.gender asc limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person李建聪提交的软件",
        "output": "match(a:software)<-[e:commits]-(b:person where b.name='李建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找publisher陈月的全部partner,的targetId除143的平均值",
        "output": "match(a:publisher where a.name= '陈月')-[e:partner]->(b) return AVG(e.targetId / 143)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和作家孙思琪有关系的读者,返回这些点的性别,身高,薪资",
        "output": "match(a:author where a.name='孙思琪')-[e]-(b:reader) return b.gender, b.height, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与author王国强有关，并且与book计算机网络有关的author节点",
        "output": "match(a:author where a.name='王国强')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='计算机网络') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,name,size, 数据为(930,'法学院',79),(533,'数学学院',56)的子查询作为输入表, 源点的size等于输入表size,给出和部门土木学院有department_has_student关系的学生,再给出以department_has_teacher关系关联了土木学院的教师",
        "output": "with p as (select * from (VALUES(930,'法学院',79),(533,'数学学院',56)) as t(value,name,size))MATCH (a:department WHERE a.size = p.size AND (a.name = '土木学院')) -[e:department_has_student ]->(b:student) , (a:department WHERE a.name = '土木学院') <-[e2:department_has_teacher ]-(c:teacher) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回所有与作家何红有关系的读者的名字;2: 请帮我查找与名为马科和杜雪的点共同撰写的,类型为书的节点;3: 查询72个名为少年闰土的点relates的类型是book的节点,且节点id大于4或name是百年孤独;4: 请帮我找出id为65的点的字数,id,创建时间;5: 请帮我查找id为193的book有关的publisher的partner, 再请帮我查找和publisher有关系的partner;6: 请帮我查找和书有关联的书节点,并根据其名字,名字分组,返回名字,名字,以及wordCount的平均值乘207的平均值;7: 帮我查询以likes关系关联了book计算机网络的reader;8: 返回和类型为book的点有book_refers_book关系的book,以及和这些book有book_refers_book关系的book,以及和这些book有book_refers_book关系的book;",
        "output": "查询语句为:1: match(a:author where a.name='何红')-[e]-(b:reader) return b.name;2: match(a where a.name = '马科')-[e:author_write_book]->(b:book)<-[e2:author_write_book]-(c where c.name = '杜雪') return b;3: match(a where a.name='少年闰土')-[e:relates]->(b:book where b.id > 4 or b.name = '百年孤独') return b limit 72;4: match(a where a.id = '65') return a.wordCount, a.id, a.createTime;5: match(a:book where id = '193')-[e]-(b:publisher)-[e2:partner]->(c), (b:publisher)-[e3:partner]->(d) return a, b, c, d;6: match(a:book)-[e:book_refers_book]-(b:book) return b.name, b.name, AVG(AVG(b.wordCount) * 207) group by b.name, b.name;7: match(a:book where a.name='计算机网络')<-[e:reader_likes_book]-(b:reader) return b;8: match(a:book)-[e:book_refers_book]->(b:book)-[e2:book_refers_book]->(c:book)-[e3:book_refers_book]->(d:book) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为Hive的点uses的software,并对这些点的id进行求和",
        "output": "match(a where a.name='Hive')-[e:software_uses_software]->(b:software) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询person以name,salary分组的name, 根据name降序排序;2: 帮我查询person关联的person,返回其源点的身高对180取余乘23加4329的求和值,以及目标点的身高加身高对190取余的值;3: 查找person赵宏的全部friend,的f0的平均值减943减22的平均值;4: 帮我查询和person郑宏有关的person,再帮我查询和郑宏person_parent_person的其他person,返回它们;5: 查询标签为person,名为马建聪的点,返回这些点的薪资,性别,id;6: 查询源点标签为person,边标签为person_colleague_person的边,返回这些边的f0乘637的最大值,和目标点id加90的平均值;7: 找出与名为周红和Jimmy的点共同knows的,label为person的节点;8: 请帮我找出名为Alice和黄红的,标签等于person的点公共的同事节点的名单;9: 找出以knows关系关联了person黄科的person;",
        "output": "查询语句为:1: match(a:person) return a.name group by a.name, a.salary order by a.name desc;2: match(a:person)-[e:relates]->(b:person) return SUM(a.height % 180 * 23 + 4329), b.height + b.height % 190;3: match(a:person where a.name= '赵宏')-[e:person_friend_person]->(b) return AVG(AVG(e.f0) - 943 - 22);4: match(a:person where a.name = '郑宏')-[e]-(b:person), (a:person)-[e2:person_parent_person]->(c:person) return a, b, c;5: match(a:person where a.name = '马建聪') return a.salary, a.gender, a.id;6: match(a:person)-[e:person_colleague_person]->(b) return MAX(e.f0 * 637), AVG(e.targetId + 90);7: match(a where a.name = '周红')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = 'Jimmy') return b;8: match(a:person where a.name='Alice')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='黄红') return b.name;9: match(a:person where a.name='黄科')<-[e:knows]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和处方Prescription_174有包含关系的药品,再帮我查询以包含关系关联了Prescription_174的药品",
        "output": "match(a:prescription where a.name = 'Prescription_174')-[e:contain]->(b:medicine),(a:prescription where a.name = 'Prescription_174')<-[e2:contain]-(c:medicine)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与label为city的点有belong关系的19个国家，以及这些国家所包含的城市。",
        "output": "match(a:city)-[e:belong]->(b:country)-[e2:contain]->(c:city) return c limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和person陈思思有关系的person,返回这些点的身高",
        "output": "match(a:person where a.name='陈思思')-[e]-(b:person) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回一个名为Prescription_378的点，并返回该点的创建时间和ID。",
        "output": "match(a:prescription where a.name = 'Prescription_378') return a.createTime, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,wordCount,value, 数据为(61,835,107),(30,345,745), 以属性value作为相等条件,查询所有和帖子Post_147有2度关系的论坛",
        "output": "with p as (select * from (VALUES(61,835,107),(30,345,745)) as t(id,wordCount,value))MATCH (a:post WHERE a.value = p.value AND (a.name = 'Post_147')) -[e ]->{2,2}(b:forum) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据createTime分组,计算weight加728减87的平均值",
        "output": "return AVG(a.weight + 728 - 87) group by a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被买家咨询数量大于63的卖家,记为relationCount,再查询这些卖家咨询的商品",
        "output": "match(a:seller) let a.relationCount = MAX((a:seller)<-[e:consult]-(b:buyer) => b.id) match(a where a.relationCount > 63)-[e2:consult]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为东京的点的,id在29到32之间,人数小于75590的朋友,返回这些朋友的面积,和边的目标点id",
        "output": "match(a where a.name='东京')-[e:friend]->(b where (b.id BETWEEN 29 AND 32) and b.peopleNumber < 75590) return b.area,e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表628,364, 以属性id作为相等条件,请帮我找出标签等于country的所有点,并根据area从小到大排列",
        "output": "with p as (select * from (VALUES(628),(364)) as t(id)) MATCH (a:country WHERE a.id = p.id) RETURN a ORDER BY a.area ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id乘17的平均值",
        "output": "return AVG(a.id * 17) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下徐强的朋友的朋友关系",
        "output": "match(a:user where a.name='徐强')-[e:friend]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找电影变形金刚拥有的标签, 令标签的价值等于电影的类别,令标签的类别等于电影的名字,令电影的id等于电影的价值乘640乘229, 返回电影的价值, 标签的名字",
        "output": "match(a:film where a.name='变形金刚')-[e:has]->(b:tag) let b.value = a.category,let b.category = a.name,let a.id = a.value * 640 * 229 return a.value,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 找出所有和author杜雪之间有author_write_book关系的book;2: 返回author孙国强write的book,被其他reader likes的数量;3: 请帮我找出名为张思琪的点发布的书,并对这些点的名字进行求和;4: 查询从reader王建聪出发,经过标签为reader_likes_book的边,走1到3跳到达的book点;5: 给出名为赵轩和郑红的,类型为作家的点公共的伙伴节点的名单;6: 找出源点年龄小于等于60,边类型是reader_likes_book,且满足条件源点id不是16,f0大于958的边,返回这些边的源点id加22的最大值;",
        "output": "查询语句为:1: match(a:author where a.name='杜雪')-[e:author_write_book]->(b:book) return b;2: match(a:author where a.name='孙国强')-[e:author_write_book]->(b:book)<-[e2:reader_likes_book]-(c:reader) return COUNT(c);3: match(a where a.name='张思琪')-[e:publisher_publish_book]->(b:book) return SUM(b.name);4: match(a:reader where a.name='王建聪')-[e:reader_likes_book]->{1,3}(b:book) return b;5: match(a:author where a.name='赵轩')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='郑红') return b.name;6: match(a where a.age <= 60)-[e:reader_likes_book where e.srcId <> 16 and e.f0 > 958]->(b) return MAX(e.srcId + 22);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person点有认识关系的person节点,且边满足条件权重不为空,目标person节点身高不等于191",
        "output": "match(a:person)-[e:knows where (e.weight is not null)]->(b:person where b.height <> 191) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查询所有源点label为person,边label为person_likes_person,且满足条件目标点id不是22的边;2: 请帮我找出名为韩宏和周国强的,类型为person的点公共的伙伴节点的名单;3: 返回58个与张科和李建聪都存在关系的person节点;4: 查询与person黄思琪和张强都存在person_knows_person关系的点;5: 找出和person韩思琪有关的person,再找出和韩思琪person_knows_person的其他person,返回它们;6: 找出类型为person的点,并根据薪资降序排列;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person where e.targetId <> 22]->(b) return e;2: match(a:person where a.name='韩宏')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='周国强') return b.name;3: match(a where a.name='张科')-[e]->(b:person)<-[e2]-(c where c.name='李建聪') return b limit 58;4: match(a:person where a.name='黄思琪')-[e:person_knows_person]->(b)<-[e2:person_knows_person]-(c:person where c.name='张强') return b;5: match(a:person where a.name = '韩思琪')-[e]-(b:person), (a:person)-[e2:person_knows_person]->(c:person) return a, b, c;6: match(a:person) return a order by a.salary desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为杜国强的点拥有的商品",
        "output": "match(a where a.name='杜国强')-[e:has]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以12作为输入,返回id, value",
        "output": "Call PAGERANK(12) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与loan loan_52有deposit关系的1度的环",
        "output": "match(a:loan where name = 'loan_52')-[e:deposit]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和company美团有关的university,称为X,再给出和这个X有关联的其他company,以及和X有关联的city",
        "output": "match(a:company where a.name = '美团')-[e]-(b:university), (b:university)-[e2]-(c:company),(b:university)-[e3]-(d:city) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与seller韩雪有关系的buyer的name",
        "output": "match(a:seller where a.name='韩雪')-[e]-(b:buyer) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被医生创造数量大于4的处方,记为relationCount,再查询这些处方创造的药品",
        "output": "match(a:prescription) let a.relationCount = MAX((a:prescription)<-[e:creates]-(b:doctor) => b.id) match(a where a.relationCount > 4)-[e2:creates]->(c:medicine) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与土木学院有has关系的大学",
        "output": "match(a:department where a.name='土木学院')<-[e:has]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找大学中国科技大学的全部标签等于伙伴的边,并根据目标点id从大到小排列,返回76个",
        "output": "match(a:university where a.name = '中国科技大学')-[e:partner]->(b) return b order by e.targetId desc limit 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与软件MySQL和阿里公司有关联的软件节点，并返回它们的名称。",
        "output": "match(a:software where a.name='Mysql')-[e]->(b:software)<-[e2]-(c:company where c.name='阿里') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找16个名为LX001的点转账的类型是账号的节点,且节点创建时间不等于2006年07月14日且价值大于等于141",
        "output": "match(a where a.name='LX001')-[e:transfer]->(b:account where b.createTime <> '2006-07-14' and b.value >= 141) return b limit 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与合并请求有关系的用户节点,且用户节点的性别不是famale,并返回这些用户的年龄对1取余的平均值,以及用户的年龄加88的平均值",
        "output": "match(a:pullRequest)-[e]->(b:user where b.gender <> 'famale') return AVG(b.age % 1), AVG(b.age + 88)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和patient郑思琪之间有accept关系的prescription",
        "output": "match(a:patient where a.name='郑思琪')-[e:accept]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 找出名为吴伟的user,以及与其有关的forum,并返回吴伟的age和这些forum的peopleNumber;2: 给出帖子Post_384的标签等于伙伴的边,并根据目标点id从大到小排列,返回21个;3: 找出名为百度贴吧的,value为空,lang不等于Japanese的relation,返回这些relation的value,和边的f0;4: 请帮我找出名为历史的标签,以及与其有关的帖子,并返回历史的价值和这些帖子的价值;5: 给出被user黄建国publish的post;6: 请帮我找出id为116的论坛有关的用户的朋友, 再请帮我找出和用户有关系的朋友;",
        "output": "查询语句为:1: match(a:user where name = '吴伟')-[e]-(b:forum) return a.age, b.peopleNumber;2: match(a:post where a.name = 'Post_384')-[e:partner]->(b) return b order by e.targetId desc limit 21;3: match(a where a.name='百度贴吧')-[e:relation]->(b where (b.value is null) and b.lang <> 'Japanese') return b.value,e.f0;4: match(a:tag where name = '历史')-[e]-(b:post) return a.value, b.value;5: match(a:post)<-[e:user_publish_post]-(b:user where b.name='黄建国') return a, b;6: match(a:forum where id = '116')-[e]-(b:user)-[e2:friend]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 王国强支付的人数，被他喜欢的人数。",
        "output": "match(a:person where a.name='王国强')-[e:pay]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出全部源点标签为author,边标签为author_knows_author,并且targetId在38到74之间,srcId为空,weight不为空的边;2: 查询全部和author李月之间有author_write_book关系的book;3: 帮我查询全部名为徐红的点发布的书;4: 请帮我查找book孤城的全部标签等于refers的边,并根据f1从小到大排列,返回148个;5: 返回前86个标签等于reader_likes_book的边;6: 给出名为呐喊的book,以及与其有关的publisher,并返回呐喊的id和这些publisher的gender;7: 查询所有和编辑徐雪有3度关系的作家;8: 请帮我查找和作家有关联的书节点,并根据其创建时间分组,返回创建时间,以及id乘id的最小值;",
        "output": "查询语句为:1: match(a:author)-[e:author_knows_author where (e.targetId BETWEEN 38 AND 74) and (e.srcId is null) and (e.weight is not null)]->(b) return e;2: match(a:author where a.name='李月')-[e:author_write_book]->(b:book) return b;3: match(a where a.name='徐红')-[e:publisher_publish_book]->(b:book) return b;4: match(a:book where a.name = '孤城')-[e:book_refers_book]->(b) return b order by e.f1 asc limit 148;5: match(a)-[e:reader_likes_book]->(b) return e limit 86;6: match(a:book where name = '呐喊')-[e]-(b:publisher) return a.id, b.gender;7: match(a:publisher where a.name='徐雪')-[e]->{3,3}(b:author) return b;8: match(a:author)-[e:author_write_book]-(b:book) return b.createTime, MIN(b.id * b.id) group by b.createTime;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回徐红作家",
        "output": "match(a:author where a.name = '徐红') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'DO'作为输入调用personalRank函数,返回id, value",
        "output": "Call PERSONALRANK('DO') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出身高不为空且不是195的人，以及这些人认识的人的名称。",
        "output": "match(a:person where (a.height is not null) and a.height <> 195)-[e:pay]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询包含用户李思思的论坛,和这些论坛包含的帖子",
        "output": "match(a:user where name = '李思思')<-[e:contain]-(b:forum)-[e2:contain]->(c:post) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询电影院大众影院 上映的电影,返回电影 拥有的标签的value的数量减643的数量",
        "output": "match(a:cinema where name = '大众影院')-[e:releases]->(b:film)-[e2:has]->(c:tag) return COUNT(COUNT(c.value) - 643)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与买家吴月有查看关系的1跳以内的环",
        "output": "match(a:buyer where name = '吴月')-[e:look]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询141个person郑若涵和杜思思,共同的父母",
        "output": "match(a:person where a.name='郑若涵')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='杜思思') return b limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有黄科的点创造的订单,然后找出黄科被回答的卖家,一起返回",
        "output": "match(a where a.name = '黄科')-[e:creates]->(b:orders),(a where a.name = '黄科')<-[e2:ask]-(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表660,870,111, 源点的id等于输入表id,返回id为70的person有关的person的同事, 再返回和person有关系的家人",
        "output": "with p as (select * from (VALUES(660),(870),(111)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (id = '70')) -[e ]-(b:person) -[e2:person_colleague_person ]->(c) , (b:person) -[e3:person_family_person ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司美团合作的大学, 令公司的名字等于大学的id,令大学的名字等于公司的名字,令公司的id等于大学的id对id取余, 返回公司的规格, 大学的等级",
        "output": "match(a:company where a.name='美团')-[e:cooperate]->(b:university) let a.name = b.id,let b.name = a.name,let a.id = b.id % b.id return a.scale,b.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为PR-153的合并请求有相关者关系,或有相关者的相关者关系的仓库",
        "output": "match(a:pullRequest where n.name=PR-153)-[e:relation]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有与某个出版商相关的作者，以及这些作者认识的所有其他作者。",
        "output": "match(a:publisher where a.id = '154')-[e]-(b:author)<-[e2:knows]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签等于person,边标签等于apply,且满足条件f0不是534的边",
        "output": "match(a:person)-[e:apply where e.f0 <> 534]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为person的所有点,并根据id从大到小排列",
        "output": "match(a:person) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出的用户关联的帖子，以及与这些帖子有发布关系的其他用户。",
        "output": "match(a:user where a.id = '124')-[e]-(b:post)<-[e2:publish]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person杜思琪申请的贷款,以及申请这些贷款的person",
        "output": "match(a:person where name = '杜思琪')-[e:apply]->(b:loan)<-[e2:apply]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据大小,价值分组,计算大小乘大小的值",
        "output": "return a.size * a.size group by a.size, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与作家马强有关,且与作家徐建国有关系的作家节点",
        "output": "match(a:author where a.name='马强')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='徐建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从孙建聪开始，经过一条知道边，跳1下后到达的是哪个点？",
        "output": "match(a:person where a.name='孙建聪')-[e:knows]->{1,1}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为华中科技大学的点合作的公司",
        "output": "match(a where a.name='华中科技大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person有关联的person节点,并根据其薪资,性别分组,返回薪资,性别,以及id加5除id减45的值",
        "output": "match(a:person)-[e:pay]-(b:person) return b.salary, b.gender, (b.id + 5) / b.id - 45 group by b.salary, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出编辑杜思琪发布的书,被其他读者喜欢的数量",
        "output": "match(a:publisher where a.name='杜思琪')-[e:publish]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与皮肤科和急诊部相关的92个医学节点。",
        "output": "match(a where a.name='皮肤科')-[e]->(b:medicine)<-[e2]-(c where c.name='急诊部') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为defaultName的点存款的所有账号,并对这些点的是否冻结进行求和",
        "output": "match(a where a.name='defaultName')-[e:loan_deposit_account]->(b:account) return SUM(b.isBlock)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查找所有与医生徐思思有关系的病人的id;2: 请帮我查找名为Prescription_109的处方;3: 找出id为107的点的id,weight;",
        "output": "查询语句为:1: match(a:doctor where a.name='徐思思')-[e]-(b:patient) return b.id;2: match(a:prescription where a.name = 'Prescription_109') return a;3: match(a where a.id = '107') return a.id, a.weight;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为30的作家有关的书的引用, 再给出和书有关系的引用",
        "output": "match(a:author where id = 30)-[e]-(b:book)-[e2:refers]->(c), (b:book)-[e3:refers]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以673作为请求点id, 源点的id等于输入表id,返回类型是person的所有点,并根据薪资降序排列",
        "output": "with p as (select * from (VALUES(673)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ORDER BY a.salary DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id分组,计算weight的最大值对632取余的值",
        "output": "return MAX(a.weight) % 632 group by a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询forum天涯论坛的relation,的f0对611取余的平均值",
        "output": "match(a:forum where a.name= '天涯论坛')-[e:relation]->(b) return AVG(e.f0 % 611)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是发布,以及源点id不为空或源点id小于52或源点id不为空的边",
        "output": "match(a)-[e:publish where (e.srcId is not null) or e.srcId < 52 or (e.srcId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询包含名为'推特'和'中国军事论坛'的节点，并且类型为帖子。",
        "output": "match(a where a.name = '推特')-[e:contain]->(b:post)<-[e2:contain]-(c where c.name = '中国军事论坛') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型为city的点有belong关系的country,以及和这些country有contain关系的city,以及和这些city有contain关系的university",
        "output": "match(a:city)-[e:belong]->(b:country)-[e2:contain]->(c:city)-[e3:contain]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,age分组,计算height加181的个数",
        "output": "return COUNT(a.height + 181) group by a.gender, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为郑雪的点relates的所有person,并对这些person的salary进行求和",
        "output": "match(a where a.name='郑雪')-[e:relates]->(b:person) return SUM(b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算金额除3039.20的个数",
        "output": "return COUNT(a.amount / 3039.20) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按性别升序查找22位身高在167到169厘米之间的女性医生。",
        "output": "match(a:doctor where a.gender = 'famale' and (a.height BETWEEN 167 AND 169)) return a order by a.gender asc limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从person陈轩出发,经过类型为恋人的边,走1到3度到达的person点",
        "output": "match(a:person where a.name='陈轩')-[e:lover]->{1,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找36个与Order_284和Order_235都存在关系的买家或商品节点",
        "output": "match(a where a.name='Order_284')-[e]->(b:buyer | goods)<-[e2]-(c where c.name='Order_235') return b limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与用户吴建国有关联，且与处方Prescribe_153有关的处方项，并返回其名称。",
        "output": "match(a:user where a.name='吴建国')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_153') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于reader,名为赵科的点,返回这些点的age",
        "output": "match(a:reader where a.name = '赵科') return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出198个名为徐梅的点查看的标签为商品的节点,且其价格大于114.18",
        "output": "match(a where a.name='徐梅')-[e:look]->(b:goods where b.price > 114.18) return b limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询89个和标签为person的点有认识关系的person,且和这些person有购买关系的软件",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:buy]->(c:software) return c limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点规格不等于small或名字等于字节或价值小于508,目标点id大于3,等级小于2,且类型是合作的边",
        "output": "match(a where a.scale <> 'small' or a.name = '字节' or a.value < 508)-[e:cooperate]->(b where b.id > 3 and b.level < 2) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 帮我查询名为Sam的reader;2: 找出和author Tom有author_write_book关系的book,以及和author陈国强有author_write_book关系的book,将它们都返回;3: 返回书的2度以内的环;",
        "output": "查询语句为:1: match(a:reader where a.name = 'Sam') return a;2: match(a:author where a.name = 'Tom')-[e:author_write_book]->(b:book),(c:author where c.name = '陈国强')-[e2:author_write_book]->(d:book)return a, b, c, d;3: match(a:book)->{0,1}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回和赵宏有关的读者，再返回他发布的其他书。",
        "output": "match(a:publisher where a.name = '赵宏')-[e]-(b:reader), (a:publisher)-[e2:publish]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和医生徐思琪有关系的医生或处方,返回这些点的名字,地址,权重",
        "output": "match(a:doctor where a.name='徐思琪')-[e]-(b:doctor | prescription) return b.name, b.address, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以'ot'作为输入,返回id, distance",
        "output": "Call SSSP('ot') yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person马思思有关系的person的age",
        "output": "match(a:person where a.name='马思思')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与软件Zookeeper有关系的公司的价值",
        "output": "match(a:software where a.name='Zookeeper')-[e]-(b:company) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与doctor徐科和李国强都存在belong关系的点",
        "output": "match(a:doctor where a.name='徐科')-[e:belong]->(b)<-[e2:belong]-(c:doctor where c.name='李国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询department内科的friend,的weight对141.61取余除138.66的个数",
        "output": "match(a:department where a.name= '内科')-[e:friend]->(b) return COUNT(e.weight % 141.61 / 138.66)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生郑梅创造的处方, 令医生的id等于医生的id的求和值,令处方的创建时间等于处方的weight的最小值对149取余, 返回医生的年龄, 处方的权重",
        "output": "match(a:doctor where a.name='郑梅')-[e:creates]->(b:prescription) let a.id = SUM(a.id),let b.createTime = MIN(b.weight) % 149 return a.age,b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点年龄不是61或id的平均值不是62或身高为空,边标签等于诊断,且满足条件目标点id不为空的边,返回这些边的f0除997除152的值",
        "output": "match(a where a.age <> 61 or AVG(a.id) <> 62 or (a.height is null))-[e:diagnose where (e.targetId is not null)]->(b) return e.f0 / 997 / 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出属于放射科并且在放射科工作的医生。",
        "output": "match(a where a.name = '放射科')-[e:has]->(b:doctor),(a where a.name = '放射科')<-[e2:belong]-(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点label为buyer,目标点label为orders,label为buyer的边",
        "output": "match(a:buyer)-[e:buyer]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为category,name,weight, 数据为('皮肤药','布洛芬',910),('发烧药','枇杷糖浆',655),('感冒药','医疗酒精',233), 以属性name作为相等条件,请帮我查找医生韩若涵诊断的病人,被其他医生诊断的数量",
        "output": "with p as (select * from (VALUES('皮肤药','布洛芬',910),('发烧药','枇杷糖浆',655),('感冒药','医疗酒精',233)) as t(category,name,weight))MATCH (a:doctor WHERE a.name = p.name AND (a.name = '韩若涵')) -[e:doctor_diagnose_patient ]->(b:patient) <-[e2:doctor_diagnose_patient ]-(c:doctor) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有评论的字数减字数的值",
        "output": "match(a:comment) return a.wordCount - a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 帮我查询与person周红和孙强都存在person_commits_software关系的点;2: 帮我查询所有名为徐国强的点认识的person;3: 找出源点年龄小于等于20或身高大于4751,边类型为person_knows_person,且权重不为空或f0为空,且源点id大于188的边,返回这些边的f0乘587加802的值;4: 找出176个软件Redis和SprintBoot,共同的朋友;",
        "output": "查询语句为:1: match(a:person where a.name='周红')-[e:person_commits_software]->(b)<-[e2:person_commits_software]-(c:person where c.name='孙强') return b;2: match(a where a.name='徐国强')-[e:person_knows_person]->(b:person) return b;3: match(a where a.age <= 20 or a.height > 4751)-[e:person_knows_person where ((e.weight is not null) or (e.f0 is null)) and e.srcId > 188]->(b) return e.f0 * 587 + 802;4: match(a:software where a.name='Redis')-[e:friend]->(b)<-[e2:friend]-(c:software where c.name='SprintBoot') return b limit 176;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person有关系的person节点,且person节点的性别是famale,并返回这些person的id对29取余的数量,以及person的age的求和值除52除169对薪资取余的值",
        "output": "match(a:person)-[e]->(b:person where b.gender = 'famale') return COUNT(b.id % 29), SUM(b.age) / 52 / 169 % b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出173个与天涯论坛和知乎都存在关系的标签节点",
        "output": "match(a where a.name='天涯论坛')-[e]->(b:tag)<-[e2]-(c where c.name='知乎') return b limit 173",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person郑宏有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '郑宏')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为大学英语的teacher或university或department,以及与其有关的student,并返回大学英语的courseHour和这些student的gender",
        "output": "match(a:teacher | university | department where name = '大学英语')-[e]-(b:student) return a.courseHour, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与北京大学和电子科技大学都有关联的85个大学节点。",
        "output": "match(a where a.name='北京大学')-[e]->(b:university)<-[e2]-(c where c.name='电子科技大学') return b limit 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为王思琪的节点selects的student或course或teacher",
        "output": "match(a where a.name='王思琪')-[e:selects]->(b:student | course | teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person何月之间有invest关系的company",
        "output": "match(a:person where a.name='何月')-[e:invest]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点名字为美团或价值小于703,且价值不为空,边类型为申请,且f0不为空或f0为591或f0加919的求和值小于等于192.73的边,返回这些边的目标点id除127的值",
        "output": "match(a where (a.name = '美团' or a.value < 703) and (a.value is not null))-[e:apply where (e.f0 is not null) or e.f0 = 591 or SUM(e.f0 + 919) <= 192.73]->(b) return e.targetId / 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为person且名称为张思琪的点，返回这些点的gender和salary。",
        "output": "match(a:person where a.name = '张思琪') return a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,salary, 数据为(198,38,9034),(160,28,4373)的子查询作为输入表, 以属性id作为相等条件,找出person关联的person,返回其源点的身高加155的值,以及目标点的id减id的值",
        "output": "with p as (select * from (VALUES(198,38,9034),(160,28,4373)) as t(height,id,salary))MATCH (a:person WHERE a.id = p.id) -[e:relates ]->(b:person) RETURN a.height + 155, b.id - b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出与person王思思有person_lover_person关系的3度以内的环",
        "output": "match(a:person where name = '王思思')-[e:person_lover_person]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到标签为'orders'的所有点，然后按值从小到大地排序。",
        "output": "match(a:orders) return a order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的相关者,或其相关者的相关者",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回按照name升序排列的，1999年07月29日创建或者重量在163到316之间的，数量为143的prescription。",
        "output": "match(a:prescription where a.createTime = '1999-07-29' or (a.weight BETWEEN 163 AND 316)) return a order by a.name asc limit 143",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为我不是药神的节点拥有的评论或标签",
        "output": "match(a where a.name='我不是药神')-[e:has]->(b:comment | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和书java程序设计之间有引用关系的书",
        "output": "match(a:book where a.name='java程序设计')-[e:refers]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出账户源点带有'repay'标签的边，并返回这些边的权重除以163.99的值，以及这些边中源点ID从61开始的平均数。",
        "output": "match(a:account)-[e:repay]->(b) return e.weight / 163.99, AVG(e.srcId + 61)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为forum,边标签为contain的边,返回这些边的targetId对73取余的求和值,和weight的个数乘108.38的最小值",
        "output": "match(a:forum)-[e:contain]->(b) return SUM(e.targetId % 73), MIN(COUNT(e.weight) * 108.38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点标签为合并请求,目标点标签为仓库,标签为合并请求的边",
        "output": "match(a:pullRequest)-[e:pullRequest]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 返回person的3度的环;2: 查询全部和company微软之间有company_creates_software关系的software;3: 找出全部源点标签等于company,目标点标签等于person,标签等于company_employee_person的边;4: 返回所有software以id,openSource,lang分组的lang, 根据lang从大到小排序;5: 给出所有源点类型为公司,边类型为company_employee_person的边,返回这些边的权重减196.11的求和值,和f0加f0的值;6: 给出和person有关联的person节点,并根据其id分组,返回id,以及height减168减164的值;7: 返回和标签为公司的点有company_employee_person关系的person,且和这些person有person_knows_person关系的person,且和这些person有person_knows_person关系的person;",
        "output": "查询语句为:1: match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id;2: match(a:company where a.name='微软')-[e:company_creates_software]->(b:software) return b;3: match(a:company)-[e:company_employee_person]->(b:person) return e;4: match(a:software) return a.lang group by a.id, a.openSource, a.lang order by a.lang desc;5: match(a:company)-[e:company_employee_person]->(b) return SUM(e.weight - 196.11), e.f0 + e.f0;6: match(a:person)-[e:person_knows_person]-(b:person) return b.id, b.height - 168 - 164 group by b.id;7: match(a:company)-[e:company_employee_person]->(b:person)-[e2:person_knows_person]->(c:person)-[e3:person_knows_person]->(d:person) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是商品,名为苹果的点,返回这些点的名字",
        "output": "match(a:goods where a.name = '苹果') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和cinema UME有关的tag,再找出和UME releases的其他film,返回它们",
        "output": "match(a:cinema where a.name = 'UME')-[e]-(b:tag), (a:cinema)-[e2:releases]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person属于的公司,返回其源点的身高减197的值,以及目标点的价值减704的个数",
        "output": "match(a:person)-[e:belong]->(b:company) return a.height - 197, COUNT(b.value - 704)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person徐伟关联的person,被其他person认识的数量",
        "output": "match(a:person where a.name='徐伟')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为125的点的salary,id,age",
        "output": "match(a where a.id = 125) return a.salary, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与用户黄思琪和杜月都存在喜欢关系的点",
        "output": "match(a:user where a.name='黄思琪')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='杜月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与周轩存在write关系的book,book与book存在refers关系的点,返回这些点的createTime",
        "output": "match(a where a.name = '周轩')-[e:write]->(b:book)-[e2:refers]->(c:book) return c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表256, 以属性id作为相等条件,请帮我查找和医生李强之间有doctor_creates_prescription关系的处方",
        "output": "with p as (select * from (VALUES(256)) as t(id)) MATCH (a:doctor WHERE a.id = p.id AND (a.name = '李强')) -[e:doctor_creates_prescription ]->(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出满足条件语言是c,id大于45的节点",
        "output": "match(a where a.lang = 'c' and a.id > 45) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前124个星数在377到594之间,id在24到97之间,或语言为python的仓库",
        "output": "match(a:repository where ((a.stars BETWEEN 377 AND 594) and (a.id BETWEEN 24 AND 97)) or a.lang = 'python') return a limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询郑宏发布在其他论坛的帖子数量",
        "output": "match(a:user where a.name='郑宏')-[e:publish]->(b:post)<-[e2:contain]-(c:forum) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 孙月从teacher出发，沿着一条类型为teach的边走了3度，到达course点。",
        "output": "match(a:teacher where a.name='孙月')-[e:teach]->{3,3}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出病人陈轩接受的处方, 令病人的年龄等于病人的年龄, 返回病人的名字, 处方的创建时间",
        "output": "match(a:patient where a.name='陈轩')-[e:accept]->(b:prescription) let a.age = a.age return a.name,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person黄强拥有的账号",
        "output": "match(a:account)<-[e:own]-(b:person where b.name='黄强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为size,id,name, 数据为(71,30,'文学院'),(55,5,'经管学院'),(84,17,'体育学院'),(59,82,'艺术学院')的子查询作为输入表, 源点的id等于输入表id,找出大学电子科技大学 拥有的部门,返回部门 拥有的学生的年龄减年龄的值 ",
        "output": "with p as (select * from (VALUES(71,30,'文学院'),(55,5,'经管学院'),(84,17,'体育学院'),(59,82,'艺术学院')) as t(size,id,name))MATCH (a:university WHERE a.id = p.id AND (name = '电子科技大学')) -[e:university_has_department ]->(b:department) -[e2:department_has_student ]->(c:student) RETURN c.age - c.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查找和病人吴梅之间有patient_accept_prescription关系的处方;2: 返回以contain关系关联了medicine生理盐水的prescription;3: 返回赵科的点creates的prescription,然后返回赵科被has的department,一起返回;4: 查询所有medicine以name分组的id, 根据id从小到大排序;5: 请帮我找出label为医生的点,返回192个;6: 给出patient的2跳的环;7: 请帮我找出与名为郑伟和王强的点共同diagnose的,类型是patient的节点;",
        "output": "查询语句为:1: match(a:patient where a.name='吴梅')-[e:patient_accept_prescription]->(b:prescription) return b;2: match(a:medicine where a.name='生理盐水')<-[e:prescription_contain_medicine]-(b:prescription) return b;3: match(a where a.name = '赵科')-[e:doctor_creates_prescription]->(b:prescription),(a where a.name = '赵科')<-[e2:department_has_doctor]-(c:department) return a, b, c;4: match(a:medicine) return a.id group by a.name order by a.id asc;5: match(a:doctor) return a limit 192;6: match(a:patient)->{1,1}(b)->(a) return a.id, b.id as b_id;7: match(a where a.name = '郑伟')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = '王强') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询label为cinema_releases_film,并且目标点id大于71或权重加162.13小于139.03,且源点id不为空的边;2: 返回满足条件id小于等于81且大小在564到671之间的节点;3: 查找全部源点标签等于person,边标签等于person_likes_comment的边,返回这些边的目标点id除3的和,和f0对611取余的最小值;",
        "output": "查询语句为:1: match(a)-[e:cinema_releases_film where (e.targetId > 71 or e.weight + 162.13 < 139.03) and (e.srcId is not null)]->(b) return e;2: match(a where a.id <= 81 and (a.size BETWEEN 564 AND 671)) return a;3: match(a:person)-[e:person_likes_comment]->(b) return SUM(e.targetId / 3), MIN(e.f0 % 611);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被film has数量大于107的tag,记为relationCount,再查询这些tag has的tag",
        "output": "match(a:tag) let a.relationCount = MIN((a:tag)<-[e:has]-(b:film) => b.id) match(a where a.relationCount > 107)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与软件 SprintBoot 有 uses 关系的软件，再找出与 SprintBoot 以 uses 关系关联的软件。",
        "output": "match(a:software where a.name = 'SprintBoot')-[e:uses]->(b:software),(a:software where a.name = 'SprintBoot')<-[e2:uses]-(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到叫郑若涵的人",
        "output": "match(a:person where a.name = '郑若涵') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 杜轩和张思琪的公共朋友节点名单是什么？",
        "output": "match(a:person where a.name='杜轩')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='张思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 孙雪写的书回来了。",
        "output": "match(a:book)<-[e:write]-(b:author where b.name='孙雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与作家陈强有撰写关系的1度以内的环",
        "output": "match(a:author where name = '陈强')-[e:write]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的三角的环,边标签为likes, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 全额贷款的朋友，或者是朋友的朋友",
        "output": "match(a:loan)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为address,name,size, 数据为('西区','UME',814), 以属性size作为相等条件,返回全部类型是person的点",
        "output": "with p as (select * from (VALUES('西区','UME',814)) as t(address,name,size))MATCH (a:person WHERE a.size = p.size) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和帖子有关联的标签节点,并根据其价值分组,返回价值,以及价值减350减114的最小值",
        "output": "match(a:post)-[e:has]-(b:tag) return b.value, MIN(b.value - 350 - 114) group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和合并请求PR-79之间有属于关系的仓库",
        "output": "match(a:pullRequest where a.name='PR-79')-[e:belong]->(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询184个与张伟和赵月都存在关系的person节点",
        "output": "match(a where a.name='张伟')-[e]->(b:person)<-[e2]-(c where c.name='赵月') return b limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 找出university清华大学 has的department,返回department has的student的age减age的数量 ;2: 帮我查询全部和名为艺术学院的部门有伙伴关系,或有伙伴的伙伴关系的教师;3: 查询department has的student,返回其源点的value减519的求和值,以及目标点的height减169乘26的最大值;4: 找出名为程序设计的课程;5: 请帮我找出所有源点类型为university,边类型为university_has_department,且targetId大于51或targetId在173到190之间,且f1不是false的边;6: 请帮我查找源点性别是famale或id小于72或id是47,边标签为student_selects_course,且f1不等于false或源点id大于等于199,且f1为false的边,返回这些边的权重加185.17的数量;7: 帮我查询类型是course,名为马克思原理的点,返回这些点的courseHour,credit,value;",
        "output": "查询语句为:1: match(a:university where name = '清华大学')-[e:university_has_department]->(b:department)-[e2:department_has_student]->(c:student) return COUNT(c.age - c.age);2: match(a:department where n.name=艺术学院)-[e:partner]->{1,2}(b:teacher) return b;3: match(a:department)-[e:department_has_student]->(b:student) return SUM(a.value - 519), MAX((b.height - 169) * 26);4: match(a:course where a.name = '程序设计') return a;5: match(a:university)-[e:university_has_department where (e.targetId > 51 or (e.targetId BETWEEN 173 AND 190)) and e.f1 <> false]->(b) return e;6: match(a where a.gender = 'famale' or a.id < 72 or a.id = 47)-[e:student_selects_course where (e.f1 <> false or e.srcId >= 199) and e.f1 = false]->(b) return COUNT(e.weight + 185.17);7: match(a:course where a.name = '马克思原理') return a.courseHour, a.credit, a.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型为学生的点有选择关系的课程,且和这些课程有属于关系的部门,且和这些部门有拥有关系的学生",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:student) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 李宏和杜伟是163名教师中的两个人，他们之间有何关系需要进一步说明。",
        "output": "match(a:teacher where a.name='李宏')-[e:relation]->(b)<-[e2:relation]-(c:teacher where c.name='杜伟') return b limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询部门文学院拥有的教师,以及拥有这些教师的部门",
        "output": "match(a:department where name = '文学院')-[e:has]->(b:teacher)<-[e2:has]-(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id的值",
        "output": "a.id / a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与何思思有喜欢关系的用户。",
        "output": "match(a:person where a.name='何思思')<-[e:likes]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表474, 源点的id等于输入表id,给出标签为department的点,返回159个",
        "output": "with p as (select * from (VALUES(474)) as t(id)) MATCH (a:department WHERE a.id = p.id) RETURN a LIMIT 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为徐思思的,wordCount不为空且name是Comment_242的friend,返回这些friend的id,和边的f0,targetId",
        "output": "match(a where a.name='徐思思')-[e:friend]->(b where (b.wordCount is not null) and b.name = 'Comment_242') return b.id,e.f0, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出id为117的点的名字,id;2: 找出37个createTime是2007年12月21日或id大于72,且name为Prescription_337的prescription,根据id升序排列;3: 帮我查询user的三角的环,边类型是user_creates_issue, 并返回这些点的id;",
        "output": "查询语句为:1: match(a where a.id = '117') return a.name, a.id;2: match(a:prescription where (a.createTime = '2007-12-21' or a.id > 72) and a.name = 'Prescription_337') return a order by a.id asc limit 37;3: match(a:user)-[e:user_creates_issue]->(b)-[e2:user_creates_issue]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出部门土木学院拥有的教师,以及拥有这些教师的部门, 令部门的性别等于教师的id加82,令部门的id等于部门的id,令部门的id等于部门的id的最小值乘75, 返回部门(a)的大小,教师(b)的名字,部门(c)的大小",
        "output": "match(a:department where name = '土木学院')-[e:has]->(b:teacher)<-[e2:has]-(c:department) let a.gender = b.id + 82,let c.id = c.id,let c.id = MIN(c.id) * 75 return a.size,b.name,c.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找city广州contain的company,被其他city contain的数量;2: 查找和公司有关联的大学节点,并根据其等级,id分组,返回等级,id,以及等级减2的值;3: 给出以belong关系关联了city伦敦的company;4: 请帮我找出名为滴滴和腾讯的,标签等于公司的点公共的伙伴节点的名单;",
        "output": "查询语句为:1: match(a:city where a.name='广州')-[e:city_contain_company]->(b:company)<-[e2:city_contain_company]-(c:city) return COUNT(c);2: match(a:company)-[e:company_cooperate_university]-(b:university) return b.level, b.id, b.level - 2 group by b.level, b.id;3: match(a:city where a.name='伦敦')<-[e:company_belong_city]-(b:company) return b;4: match(a:company where a.name='滴滴')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='腾讯') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被作家王轩撰写的书,和王轩认识的作家",
        "output": "match(a:book)<-[e:write]-(b:author where name = '王轩')-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从城市纽约出发,经过类型为包含的边,走3度到达的公司点",
        "output": "match(a:city where a.name='纽约')-[e:contain]->{3,3}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前181个标签为拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型为合并请求,边类型为属于的边,返回这些边的权重减159.34的求和值,和目标点id除40的值",
        "output": "match(a:pullRequest)-[e:belong]->(b) return SUM(e.weight - 159.34), e.targetId / 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为contain,并且weight减weight不是141.23且srcId大于48,或srcId不等于114的边",
        "output": "match(a)-[e:contain where (e.weight - e.weight <> 141.23 and e.srcId > 48) or e.srcId <> 114]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与department节点关联的学生节点，按性别、年龄和ID分组并返回。",
        "output": "match(a:department)-[e:has]-(b:student) return b.gender, b.age, b.id group by b.gender, b.age, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询从软件Spark出发,经过标签等于software_uses_software的边,走3到6跳到达的软件点;2: 返回软件Hive的所有伙伴,的源点id对20取余的值;3: 请帮我查找和person张建聪有关的软件,再请帮我查找和张建聪person_buy_software的其他软件,返回它们;4: 找出60个lang是c的software,根据lang从大到小排列;",
        "output": "查询语句为:1: match(a:software where a.name='Spark')-[e:software_uses_software]->{3,6}(b:software) return b;2: match(a:software where a.name= 'Hive')-[e:partner]->(b) return e.srcId % 20;3: match(a:person where a.name = '张建聪')-[e]-(b:software), (a:person)-[e2:person_buy_software]->(c:software) return a, b, c;4: match(a:software where a.lang = 'c') return a order by a.lang desc limit 60;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为Prescription_149的处方",
        "output": "match(a:prescription where a.name = 'Prescription_149') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询支付person郑轩的person,和这些person认识的person",
        "output": "match(a:person where name = '郑轩')<-[e:pay]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有的人，并按照身高从低到高排序。",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询吴思琪观看的电影，返回每部电影的标签名称和值。",
        "output": "match(a:person where name = '吴思琪')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.name, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回由医生黄强创建的处方数量，以及由其他医生创建的处方数量。",
        "output": "match(a:doctor where a.name='黄强')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点类型是person,边类型是own的边,返回这些边的srcId的最大值除185的平均值,和targetId加19的平均值",
        "output": "match(a:person)-[e:own]->(b) return AVG(MAX(e.srcId) / 185), AVG(e.targetId + 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表981, 源点的id等于输入表id,查找名为经管学院的部门,以及与其有关的课程,并返回经管学院的名字和这些课程的名字",
        "output": "with p as (select * from (VALUES(981)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (name = '经管学院')) -[e ]-(b:course) RETURN a.name, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与教师黄红有教关系的1度的环",
        "output": "match(a:teacher where name = '黄红')-[e:teach]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回90个同时与Prescription_115和Prescription_439有关系的处方节点。",
        "output": "match(a where a.name='Prescription_115')-[e]->(b:prescription)<-[e2]-(c where c.name='Prescription_439') return b limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出标签为买家的点,并根据薪资从大到小排列",
        "output": "match(a:buyer) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 查找从reader何科出发,经过类型为reader_likes_book的边,走1到4跳到达的book点;2: 请帮我找出作家韩宏撰写的书,被其他作家撰写的数量;3: 帮我查询以发布关系关联了书百年孤独的编辑;4: 查询全部author以height,name,age分组的salary, 根据salary从大到小排序;5: 找出全部和编辑点有发布关系的书节点,且边满足条件目标点id小于等于35,目标书节点满足条件名字不是悲惨世界;",
        "output": "查询语句为:1: match(a:reader where a.name='何科')-[e:reader_likes_book]->{1,4}(b:book) return b;2: match(a:author where a.name='韩宏')-[e:author_write_book]->(b:book)<-[e2:author_write_book]-(c:author) return COUNT(c);3: match(a:book where a.name='百年孤独')<-[e:publisher_publish_book]-(b:publisher) return b;4: match(a:author) return a.salary group by a.height, a.name, a.age order by a.salary desc;5: match(a:publisher)-[e:publisher_publish_book where e.targetId <= 35]->(b:book where b.name <> '悲惨世界') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与user相关的post节点，按lang进行分组，并返回结果。",
        "output": "match(a:user)-[e:publish]-(b:post) return b.lang group by b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有医生以id,薪资,年龄分组的名字, 根据名字降序排序",
        "output": "match(a:doctor) return a.name group by a.id, a.salary, a.age order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有帖子以创建时间,名字分组的价值, 根据价值升序排序",
        "output": "match(a:post) return a.value group by a.createTime, a.name order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person吴思琪之间有knows关系的person",
        "output": "match(a:person where a.name='吴思琪')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回全部和doctor郑强之间有doctor_belong_department关系的department;2: 请帮我查找从patient陈国强出发,经过标签为patient_accept_prescription的边,走3到6度到达的prescription点;3: 找出30个年龄在10到73之间或名字不等于吴强的医生,根据身高从大到小排列;4: 返回名为内科和急诊部的,标签等于department的点公共的relation节点的名单;5: 返回与名为张伟和陈宏的点共同creates的,标签为prescription的节点;6: 请帮我找出全部源点类型为处方,目标点类型为药品,类型为prescription_contain_medicine的边;7: 给出与病人孙思琪存在patient_accept_prescription关系,且与药品生理盐水存在prescription_contain_medicine关系的处方节点，返回这些处方的创建时间,名字,及病人孙思琪的id,及药品生理盐水的类别;8: 找出名为呼吸科的点has的doctor,并对这些点的salary进行求和;",
        "output": "查询语句为:1: match(a:doctor where a.name='郑强')-[e:doctor_belong_department]->(b:department) return b;2: match(a:patient where a.name='陈国强')-[e:patient_accept_prescription]->{3,6}(b:prescription) return b;3: match(a:doctor where (a.age BETWEEN 10 AND 73) or a.name <> '吴强') return a order by a.height desc limit 30;4: match(a:department where a.name='内科')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='急诊部') return b.name;5: match(a where a.name = '张伟')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:doctor_creates_prescription]-(c where c.name = '陈宏') return b;6: match(a:prescription)-[e:prescription_contain_medicine]->(b:medicine) return e;7: match(a:patient where a.name='孙思琪')-[e:patient_accept_prescription]->(b:prescription)<-[e2:prescription_contain_medicine]-(c:medicine where c.name='生理盐水') return a.id,b.createTime, b.name,c.category;8: match(a where a.name='呼吸科')-[e:department_has_doctor]->(b:doctor) return SUM(b.salary);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person何建国有关的软件,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的公司",
        "output": "match(a:person where a.name = '何建国')-[e]-(b:software), (b:software)-[e2]-(c:person),(b:software)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询认识person张梅的person,和这些person支付的person",
        "output": "match(a:person where name = '张梅')<-[e:knows]-(b:person)-[e2:pay]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回与person孙建国有关,且与loan defaultName有关系的company节点",
        "output": "match(a:person where a.name='孙建国')-[e:person_invest_company]-(b:company)-[e2:company_apply_loan]-(c:loan where c.name='defaultName') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以316,767,767作为请求点id, 以属性id作为相等条件,请帮我查找person购买的软件,返回其源点的身高加160的求和值,以及目标点的id减id的最小值",
        "output": "with p as (select * from (VALUES(316),(767),(767)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]->(b:software) RETURN SUM(a.height + 160), MIN(b.id - b.id) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈国强卖什么货物？",
        "output": "match(a:goods)<-[e:has]-(b:seller where b.name='陈国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找黄思琪撰写的书，包括书名、字数和相关书籍。",
        "output": "match(a:author where name = '黄思琪')-[e:write]->(b:book)-[e2:relates]->(c:book) return c.name, c.wordCount, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 给出id为190的person关联的person,和以pay关系关联了这些person的其他person;2: 请帮我找出全部id为32的person关联的person,和以likes关系关联了这些person的其他person;3: 返回与person何红有关系的person的age;4: 查找44个名为王轩的点likes的类型是person的节点,且其age小于等于71或age等于52;5: 帮我查询person陈梅knows的person,被其他person knows的数量;",
        "output": "查询语句为:1: match(a:person where a.id = '190')-[e]-(b:person)<-[e2:person_pay_person]-(c:person) return b,c;2: match(a:person where a.id = '32')-[e]-(b:person)<-[e2:person_likes_person]-(c:person) return b,c;3: match(a:person where a.name='何红')-[e]-(b:person) return b.age;4: match(a where a.name='王轩')-[e:person_likes_person]->(b:person where b.age <= 71 or b.age = 52) return b limit 44;5: match(a:person where a.name='陈梅')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和teacher王思思之间有teach关系的course",
        "output": "match(a:teacher where a.name='王思思')-[e:teach]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为杜若涵的节点喜欢的用户或事项或合并请求",
        "output": "match(a where a.name='杜若涵')-[e:likes]->(b:user | issue | pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为大学物理和程序设计的点共同属于的,类型是部门的节点",
        "output": "match(a where a.name = '大学物理')-[e:belong]->(b:department)<-[e2:belong]-(c where c.name = '程序设计') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部用户以年龄,id分组的性别, 根据性别降序排序",
        "output": "match(a:user) return a.gender group by a.age, a.id order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找所有名为计算机学院的点的,height小于等于80的friend,返回这些friend的gender,和边的targetId,srcId;2: 查找所有和名为陈轩的教师有朋友关系,或有朋友的朋友关系的课程;3: 返回54个名字等于吴梅或名字不等于张建国或id在29到86之间的学生,根据名字升序排列;4: 查询类型为teacher,名为郑国强的点,返回这些点的age,gender,name;5: 返回名为计算机学院的department,以及与其有关的department,并返回计算机学院的size和这些department的name;6: 找出和大学有关联的部门节点,并根据其id分组,返回id,以及id的最大值除33的最小值;7: 给出从university浙江大学出发,经过label为university_has_department的边,走1到4跳到达的department点;8: 查询university复旦大学的全部relation,的f0加539的和;9: 找出类型是部门,名为计算机学院的点,返回这些点的大小;",
        "output": "查询语句为:1: match(a where a.name='计算机学院')-[e:friend]->(b where b.height <= 80) return b.gender,e.targetId, e.srcId;2: match(a:teacher where n.name=陈轩)-[e:friend]->{1,2}(b:course) return b;3: match(a:student where a.name = '吴梅' or a.name <> '张建国' or (a.id BETWEEN 29 AND 86)) return a order by a.name asc limit 54;4: match(a:teacher where a.name = '郑国强') return a.age, a.gender, a.name;5: match(a:department where name = '计算机学院')-[e]-(b:department) return a.size, b.name;6: match(a:university)-[e:university_has_department]-(b:department) return b.id, MIN(MAX(b.id) / 33) group by b.id;7: match(a:university where a.name='浙江大学')-[e:university_has_department]->{1,4}(b:department) return b;8: match(a:university where a.name= '复旦大学')-[e:relation]->(b) return SUM(e.f0 + 539);9: match(a:department where a.name = '计算机学院') return a.size;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以987,786,225,129,560作为请求点id, 以属性id作为相等条件,请帮我查找161个名为徐宏的点咨询的类型是卖家的节点,且节点名字不是周轩",
        "output": "with p as (select * from (VALUES(987),(786),(225),(129),(560)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐宏')) -[e:buyer_consult_seller ]->(b:seller WHERE b.name <> '周轩') RETURN b LIMIT 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person徐雪有关系的电影的id",
        "output": "match(a:person where a.name='徐雪')-[e]-(b:film) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出所有关联的人，以及与他们认识的所有其他人。",
        "output": "match(a:person where a.id = '51')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被用户创造数量大于184的合并请求,记为relationCount,再查询这些合并请求创造的用户",
        "output": "match(a:pullRequest) let a.relationCount = MIN((a:pullRequest)<-[e:creates]-(b:user) => b.id) match(a where a.relationCount > 184)-[e2:creates]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查询所有person以id分组的age, 根据age升序排序;2: 给出与person郑思琪和郑建国都存在person_family_person关系的点;3: 查找152个名为周强的点认识的标签等于person的节点,且其薪资小于等于7450;4: 请帮我找出名为徐宏和李建聪的,label为person的点公共的family节点的名单;5: 请帮我查找类型为person的点,并根据年龄降序排列;6: 找出所有源点name不等于孙国强,目标点age不为空,且标签为person_friend_person的边;7: 返回和person韩国强有关的person,再返回和韩国强person_family_person的其他person,返回它们;8: 返回person的三角的环,边类型是person_family_person, 并返回这些点的id;9: 找出从person Bob出发,经过label为person_parent_person的边,走3到6跳到达的person点;",
        "output": "查询语句为:1: match(a:person) return a.age group by a.id order by a.age asc;2: match(a:person where a.name='郑思琪')-[e:person_family_person]->(b)<-[e2:person_family_person]-(c:person where c.name='郑建国') return b;3: match(a where a.name='周强')-[e:knows]->(b:person where b.salary <= 7450) return b limit 152;4: match(a:person where a.name='徐宏')-[e:person_family_person]->(b)<-[e2:person_family_person]-(c:person where c.name='李建聪') return b.name;5: match(a:person) return a order by a.age desc;6: match(a where a.name <> '孙国强')-[e:person_friend_person]->(b where (b.age is not null)) return e;7: match(a:person where a.name = '韩国强')-[e]-(b:person), (a:person)-[e2:person_family_person]->(c:person) return a, b, c;8: match(a:person)-[e:person_family_person]->(b)-[e2:person_family_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;9: match(a:person where a.name='Bob')-[e:person_parent_person]->{3,6}(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点label为事项,目标点label为仓库,label为仓库或用户或合并请求的边",
        "output": "match(a:issue)-[e:repository | user | pullRequest]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从郑科出发，通过他自己的标签，走3或4步到达的账户。",
        "output": "match(a:person where a.name='郑科')-[e:own]->{3,4}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和账号TheShy之间有转账关系的账号",
        "output": "match(a:account where a.name='TheShy')-[e:transfer]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与company蚂蚁集团存在employee关系,且与person徐梅存在knows关系的person节点，返回这些person的id,age,height,及company蚂蚁集团的peopleNumber,及person徐梅的gender",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:employee]->(b:person)<-[e2:knows]-(c:person where c.name='徐梅') return a.peopleNumber,b.id, b.age, b.height,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以contain关系关联了user周国强的forum",
        "output": "match(a:user where a.name='周国强')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回与名为杭州和广州的点共同包含的,类型为公司的节点;2: 给出标签等于company,名为Bilibili的点,返回这些点的id,value,name;3: 请帮我查找大学复旦大学的所有label为朋友的边,并根据权重从大到小排列,返回44个;",
        "output": "查询语句为:1: match(a where a.name = '杭州')-[e:city_contain_company]->(b:company)<-[e2:city_contain_company]-(c where c.name = '广州') return b;2: match(a:company where a.name = 'Bilibili') return a.id, a.value, a.name;3: match(a:university where a.name = '复旦大学')-[e:friend]->(b) return b order by e.weight desc limit 44;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,名字分组,计算id的最大值加35的最小值",
        "output": "return MIN(MAX(a.id) + 35) group by a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李国强所属的所有公司，然后找出这些公司与软件公司之间的关联，并返回这些关联的星星数。",
        "output": "match(a where a.name = '李国强')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与tag动作有关联，并且与用户周思琪有关联的person节点，获取它们的id、name和age信息。",
        "output": "match(a:tag where a.name='动作')-[e]->(b:person)<-[e2]-(c:user where c.name='周思琪') return b.id, b.name, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点价值小于等于636,目标点价值为空,且标签等于合作的边",
        "output": "match(a where a.value <= 636)-[e:cooperate]->(b where (b.value is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person徐科有关系的person, 返回和这些person有关联的person的,薪资乘1687的最大值",
        "output": "match(a:person where a.name= '徐科')-[e]-(b:person)-[e2]-(c:person) return MAX(c.salary * 1687)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点满足条件id大于13或名字为马雪或薪资为8679,目标点满足条件身高是184,年龄不为空,或名字等于赵科,且标签为同事的边",
        "output": "match(a where a.id > 13 or a.name = '马雪' or a.salary = 8679)-[e:colleague]->(b where (b.height = 184 and (b.age is not null)) or b.name = '赵科') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于publish,且满足条件srcId大于500或f1等于false的边",
        "output": "match(a)-[e:publish where e.srcId > 500 or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回腾讯和谷歌共同创建的，标签为软件的节点。",
        "output": "match(a where a.name = '腾讯')-[e:creates]->(b:software)<-[e2:creates]-(c where c.name = '谷歌') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(179,9865,'陈红'),(167,8493,'陈轩')作为请求表数据,属性分别为height,salary,name, 源点的salary等于输入表salary,查询与person有关系的person节点,且person节点的身高小于164,并返回这些点的id加57的值,以及身高乘182的值",
        "output": "with p as (select * from (VALUES(179,9865,'陈红'),(167,8493,'陈轩')) as t(height,salary,name))MATCH (a:person WHERE a.salary = p.salary) -[e ]->(b:person WHERE b.height < 164) RETURN b.id + 57, b.height * 182 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询40个买家，其中有没有马思琪和周建聪共同合作的伙伴。",
        "output": "match(a:buyer where a.name='马思琪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='周建聪') return b limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回doctor孙建聪 diagnose的patient,返回patient accept的prescription的weight加350的最小值 ;2: 给出所有源点类型是医生,边类型是doctor_creates_prescription,以及满足条件源点id为空或f0为空的边;3: 请帮我找出id为123的药品有关的医生的朋友, 再请帮我找出和医生有关系的朋友;4: 查询类型是medicine的点,返回108个;5: 返回和药品医疗酒精有关的药品,称为X,再返回和这个X有关联的其他部门,以及和X有关联的处方;6: 请帮我查找全部源点label为医生,目标点label为处方,label为doctor_creates_prescription的边;7: 请帮我查找处方Prescription_270包含的药品,被其他处方包含的数量;8: 返回与部门皮肤科有关系的病人, 返回和这些病人有关联的处方的,weight的最大值除权重的最小值;9: 查询部门以地址,权重分组的权重, 根据权重降序排序;",
        "output": "查询语句为:1: match(a:doctor where name = '孙建聪')-[e:doctor_diagnose_patient]->(b:patient)-[e2:patient_accept_prescription]->(c:prescription) return MIN(c.weight + 350);2: match(a:doctor)-[e:doctor_creates_prescription where (e.srcId is null) or (e.f0 is null)]->(b) return e;3: match(a:medicine where id = '123')-[e]-(b:doctor)-[e2:friend]->(c), (b:doctor)-[e3:friend]->(d) return a, b, c, d;4: match(a:medicine) return a limit 108;5: match(a:medicine where a.name = '医疗酒精')-[e]-(b:medicine), (b:medicine)-[e2]-(c:department),(b:medicine)-[e3]-(d:prescription) return a, b, c, d;6: match(a:doctor)-[e:doctor_creates_prescription]->(b:prescription) return e;7: match(a:prescription where a.name='Prescription_270')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c:prescription) return COUNT(c);8: match(a:department where a.name= '皮肤科')-[e]-(b:patient)-[e2]-(c:prescription) return MIN(MAX(c.weight) / c.weight);9: match(a:department) return a.weight group by a.address, a.weight order by a.weight desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算id的最小值减id的值",
        "output": "return MIN(a.id) - a.id group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和类型为公司的点有属于关系的城市,并且和这些城市有包含关系的公司,并且和这些公司有合作关系的大学",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:company)-[e3:cooperate]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person黄建国和赵若涵都存在父母关系的点",
        "output": "match(a:person where a.name='黄建国')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='赵若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与repository XXRepo有关系的user的name",
        "output": "match(a:repository where a.name='XXRepo')-[e]-(b:user) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出105个和类型是学生的点有选择关系的课程,以及和这些课程有属于关系的部门",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department) return c limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的age加22的值",
        "output": "match(a:person) return a.age + 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为121的person有关的person的同事, 再请帮我查找和person有关系的父母",
        "output": "match(a:person where id = 121)-[e]-(b:person)-[e2:colleague]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,value,name, 数据为(88,519,'天津'),(95,608,'深圳')的子查询作为输入表, 源点的value等于输入表value,找出标签等于国家的点,返回46个",
        "output": "with p as (select * from (VALUES(88,519,'天津'),(95,608,'深圳')) as t(id,value,name))MATCH (a:country WHERE a.value = p.value) RETURN a LIMIT 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和城市纽约之间有包含关系的大学",
        "output": "match(a:city where a.name='纽约')-[e:contain]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点满足条件薪资不为空,年龄大于等于48,id不等于8,目标点满足条件id大于等于80或年龄小于等于94,且id小于3758,且类型是家人的边",
        "output": "match(a where (a.salary is not null) and a.age >= 48 and a.id <> 8)-[e:family]->(b where (b.id >= 80 or b.age <= 94) and b.id < 3758) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询悲惨世界这本书的作者和所有知道悲惨世界的点。",
        "output": "match(a where a.name = '悲惨世界')-[e:knows]->(b:book),(a where a.name = '悲惨世界')<-[e2:write]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为李若涵的点accept的所有prescription,并对这些prescription的weight进行求和",
        "output": "match(a where a.name='李若涵')-[e:accept]->(b:prescription) return SUM(b.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为郑宏和何思思的用户共同关注的商品节点",
        "output": "match(a where a.name = '郑宏')-[e:look]->(b:goods)<-[e2:look]-(c where c.name = '何思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person购买的软件, 令软件的星数的值等于购买软件的person的id的平均值, 再查找软件使用的软件",
        "output": "match(a:person)-[e:buy]->(b:software) let b.stars = AVG((b:software)<-[e2:buy]-(c:person) => c.id) match(b:software)-[e3:uses]->(d:software) return b.stars, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person王若涵有关的公司,称为X,再请帮我找出和这个X有关联的其他软件,以及和X有关联的公司",
        "output": "match(a:person where a.name = '王若涵')-[e]-(b:company), (b:company)-[e2]-(c:software),(b:company)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取id为161的人的恋人，以及与该人相关的家人信息。",
        "output": "match(a:person where id = '161')-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:family]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点label为软件,边label为使用,以及满足条件f1等于true的边",
        "output": "match(a:software)-[e:uses where e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有forum的合作伙伴，或它们的合作伙伴。",
        "output": "match(a:forum)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回label为issue的点,返回104个",
        "output": "match(a:issue) return a limit 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和department数学学院之间有has关系的student",
        "output": "match(a:department where a.name='数学学院')-[e:has]->(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查询company按照value和peopleNumber分组的scale,并按照升序排序？",
        "output": "match(a:company) return a.scale group by a.value, a.peopleNumber order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 找出所有id为127的person关联的person,和以likes关系关联了这些person的其他person;2: 请帮我查找和类型为person的点有person_pay_person关系的person,以及和这些person有person_likes_person关系的person,以及和这些person有person_pay_person关系的person;3: 给出和person有关联的person节点,并根据其薪资分组,返回薪资,以及age的个数对90取余的值;4: 找出名为杜思琪的person,以及与其有关的person,并返回杜思琪的height和这些person的gender;5: 返回与person有关系的person节点,且person节点的height乘height的最大值不是50,并返回这些点的height加192的平均值,以及height加height加age的值;6: 请帮我查找所有和person点有认识关系的person节点,且边满足条件目标点id为空,目标person节点满足条件名字为周梅;7: 返回person郑强knows的person节点knows的person;8: 请帮我找出和person何建国有person_knows_person关系的person,以及和person赵宏有person_knows_person关系的person,将它们都返回;9: 帮我查询所有源点label为person,边label为person_pay_person的边,返回这些边的权重除186.38的平均值,和f0乘f0的最大值;",
        "output": "查询语句为:1: match(a:person where a.id = '127')-[e]-(b:person)<-[e2:person_likes_person]-(c:person) return b,c;2: match(a:person)-[e:person_pay_person]->(b:person)-[e2:person_likes_person]->(c:person)-[e3:person_pay_person]->(d:person) return d;3: match(a:person)-[e:person_pay_person]-(b:person) return b.salary, COUNT(b.age) % 90 group by b.salary;4: match(a:person where name = '杜思琪')-[e]-(b:person) return a.height, b.gender;5: match(a:person)-[e]->(b:person where MAX(b.height * b.height) <> 50) return AVG(b.height + 192), b.height + b.height + b.age;6: match(a:person)-[e:person_knows_person where (e.targetId is null)]->(b:person where b.name = '周梅') return b;7: match(a:person where a.name = '郑强')-[e:person_knows_person]->(b:person)-[e2:person_knows_person]->(c:person) return c;8: match(a:person where a.name = '何建国')-[e:person_knows_person]->(b:person),(c:person where c.name = '赵宏')-[e2:person_knows_person]->(d:person)return a, b, c, d;9: match(a:person)-[e:person_pay_person]->(b) return AVG(e.weight / 186.38), MAX(e.f0 * e.f0);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出和user徐科有user_publish_post关系的post,以及和forum百度贴吧有forum_contain_post关系的post,将它们都返回;2: 查找和forum天涯论坛有1跳关系的forum;3: 找出和user有关联的post节点,并根据其createTime,lang,id分组,返回createTime,lang,id,以及id的个数乘55除761的最小值;",
        "output": "查询语句为:1: match(a:user where a.name = '徐科')-[e:user_publish_post]->(b:post),(c:forum where c.name = '百度贴吧')-[e2:forum_contain_post]->(d:post)return a, b, c, d;2: match(a:forum where a.name='天涯论坛')-[e]->{1,1}(b:forum) return b;3: match(a:user)-[e:user_likes_post]-(b:post) return b.createTime, b.lang, b.id, MIN(COUNT(b.id) * 55 / 761) group by b.createTime, b.lang, b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑国强拥有的账号,以及存款这些账号的贷款",
        "output": "match(a:person where name = '郑国强')-[e:own]->(b:account)<-[e2:deposit]-(c:loan) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与贷款有关系的person节点,且person节点的年龄不是12,并返回这些person的age的平均值减50的平均值,以及person的年龄加年龄的最小值",
        "output": "match(a:loan)-[e]->(b:person where b.age <> 12) return AVG(AVG(b.age) - 50), MIN(b.age + b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为account且同时包含LX001和Faker关系节点的列表。",
        "output": "match(a:account where a.name='LX001')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='Faker') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为王宏的,lang为German,name是Post_245的partner,返回这些partner的createTime,和边的f0",
        "output": "match(a where a.name='王宏')-[e:partner]->(b where b.lang = 'German' and b.name = 'Post_245') return b.createTime,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,id,name分组,计算height除height的值",
        "output": "return a.height / a.height group by a.salary, a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从清华大学出发，经过合作边，走2度或3度可以到达哪些公司？",
        "output": "match(a:university where a.name='清华大学')-[e:cooperate]->{2,3}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与名为Jack的人有恋人关系或恋人恋人关系的人。",
        "output": "match(a:person where n.name=Jack)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从person周轩出发,经过标签等于colleague的边,走2跳到达的person点",
        "output": "match(a:person where a.name='周轩')-[e:colleague]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到城市的所有合作伙伴，或者城市合作伙伴的合作伙伴。",
        "output": "match(a:city)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person以性别,id分组的身高, 根据身高降序排序",
        "output": "match(a:person) return a.height group by a.gender, a.id order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的height除height的值",
        "output": "match(a:person) return a.height / a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为人人影城的点releases的film",
        "output": "match(a where a.name='人人影城')-[e:releases]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为纽约和重庆的,类型为城市的点公共的朋友节点的名单",
        "output": "match(a:city where a.name='纽约')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='重庆') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "'获取张宏支付的人喜欢的人节点'",
        "output": "match(a:person where a.name = '张宏')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以25, 65, 'nL'作为输入调用triangleCount函数,返回运算结果",
        "output": "Call TRIANGLECOUNT(25, 65, 'nL') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定文学院的学生，以及这些学生选择的课程，返回这些课程的课时。",
        "output": "match(a where a.name = '文学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以10,30,645作为请求点id, 源点的id等于输入表id,给出所有person以height,gender分组的age, 根据age升序排序",
        "output": "with p as (select * from (VALUES(10),(30),(645)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.age GROUP BY a.height, a.gender ORDER BY a.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从person赵思思出发,经过标签等于家人的边,走1度到达的person点",
        "output": "match(a:person where a.name='赵思思')-[e:family]->{1,1}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找60个country韩国和法国,共同的partner",
        "output": "match(a:country where a.name='韩国')-[e:partner]->(b)<-[e2:partner]-(c:country where c.name='法国') return b limit 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为陈建国的节点支付的person",
        "output": "match(a where a.name='陈建国')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出订单Order_115的伙伴,的f0乘f0的值",
        "output": "match(a:orders where a.name= 'Order_115')-[e:partner]->(b) return e.f0 * e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈强和郑建国有两个共同朋友，他们都是96号买家。",
        "output": "match(a:buyer where a.name='陈强')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='郑建国') return b limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以972,432作为请求点id, 以属性id作为相等条件,查询源点类型是医生,目标点类型是病人,类型是doctor_diagnose_patient的边",
        "output": "with p as (select * from (VALUES(972),(432)) as t(id)) MATCH (a:doctor WHERE a.id = p.id) -[e:doctor_diagnose_patient ]->(b:patient) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找buyer的三角的环,边标签为consult, 并返回这些点的id",
        "output": "match(a:buyer)-[e:consult]->(b)-[e2:consult]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(53,69,'Comment_120')作为请求表数据,属性分别为wordCount,id,name, 以属性wordCount作为相等条件,查找和comment Comment_385有关的cinema,再查找和 Comment_385comment_belong_film的其他film,返回它们",
        "output": "with p as (select * from (VALUES(53,69,'Comment_120')) as t(wordCount,id,name))MATCH (a:comment WHERE a.wordCount = p.wordCount AND (a.name = 'Comment_385')) -[e ]-(b:cinema) , (a:comment) -[e2:comment_belong_film ]->(c:film) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为电影院,边label为上映,且满足条件srcId的数量乘16不是119.32的边",
        "output": "match(a:cinema)-[e:releases where COUNT(e.srcId) * 16 <> 119.32]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的height的最小值对187取余乘5464的最小值",
        "output": "match(a:user) return MIN(MIN(a.height) % 187 * 5464)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和buyer点有creates关系的orders节点,且边满足条件srcId在67到194之间,目标orders节点满足条件id小于等于29",
        "output": "match(a:buyer)-[e:creates where (e.srcId BETWEEN 67 AND 194)]->(b:orders where b.id <= 29) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为110的点的身高,id,年龄",
        "output": "match(a where a.id = 110) return a.height, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表161, 源点的id等于输入表id,给出user的relation,或其relation的relation",
        "output": "with p as (select * from (VALUES(161)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:relation ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为华为的点的,权重在6到29之间或权重不为空的朋友,返回这些朋友的权重,和边的f1,f0,源点id",
        "output": "match(a where a.name='华为')-[e:friend]->(b where (b.weight BETWEEN 6 AND 29) or (b.weight is not null)) return b.weight,e.f1, e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回university复旦大学的所有类型是partner的边,并根据f1升序排列,返回180个;2: 请帮我找出和大学有关联的城市节点,并根据其id,人数分组,返回id,人数,以及id的最大值对23取余除61509的求和值;3: 返回所有和名为华中科技大学的university有friend关系,或有friend的friend关系的company;4: 返回所有country以area分组的peopleNumber, 根据peopleNumber升序排序;5: 请帮我查找所有与国家日本有关系的国家的名字;6: 帮我查询前144个类型是city_belong_country的边;7: 计算所有公司的人数减886减71的最大值;8: 返回全部源点类型是大学,目标点类型是城市,类型是university_belong_city的边;",
        "output": "查询语句为:1: match(a:university where a.name = '复旦大学')-[e:partner]->(b) return b order by e.f1 asc limit 180;2: match(a:university)-[e:university_belong_city]-(b:city) return b.id, b.peopleNumber, SUM(MAX(b.id) % 23 / 61509) group by b.id, b.peopleNumber;3: match(a:university where n.name=华中科技大学)-[e:friend]->{1,2}(b:company) return b;4: match(a:country) return a.peopleNumber group by a.area order by a.peopleNumber asc;5: match(a:country where a.name='日本')-[e]-(b:country) return b.name;6: match(a)-[e:city_belong_country]->(b) return e limit 144;7: match(a:company) return MAX(a.peopleNumber - 886 - 71);8: match(a:university)-[e:university_belong_city]->(b:city) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于合作,并且满足条件f1不是false且目标点id大于640,或目标点id不为空的边",
        "output": "match(a)-[e:cooperate where (e.f1 <> false and e.targetId > 640) or (e.targetId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给医生徐若涵开处方，并给与徐若涵诊断相关的病人。",
        "output": "match(a:doctor where a.name = '徐若涵')-[e:creates]->(b:prescription),(a:doctor where a.name = '徐若涵')<-[e2:diagnose]-(c:patient) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄不等于60或id小于等于27,且id大于51的节点",
        "output": "match(a where (a.age <> 60 or a.id <= 27) and a.id > 51) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与类型为'person'的点有认识关系的另外55个'person'，并找出与这些'person'有提交关系的软件。",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:commits]->(c:software) return c limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘96的值",
        "output": "a.id * 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名字等于PR-148或id不为空的合并请求属于的仓库的名称,以及这些仓库 拥有的事项的名称",
        "output": "match(a:pullRequest where a.name = 'PR-148' or (a.id is not null))-[e:belong]->(b:repository)-[e2:has]->(c:issue) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,salary, 数据为(71,'王建国',1801),(20,'郑国强',3207),(65,'张思琪',7593),(59,'王梅',8664)的子查询作为输入表, 以属性salary作为相等条件,查询全部与吴若涵存在person_creates_comment关系的comment,comment与film存在comment_belong_film关系的点,返回这些点的value",
        "output": "with p as (select * from (VALUES(71,'王建国',1801),(20,'郑国强',3207),(65,'张思琪',7593),(59,'王梅',8664)) as t(id,name,salary))MATCH (a WHERE a.salary = p.salary AND (a.name = '吴若涵')) -[e:person_creates_comment ]->(b:comment) -[e2:comment_belong_film ]->(c:film) RETURN c.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出面积为0，且人口除以62338的余数大于9的国家所包含的城市和这些城市的公司名称。",
        "output": "match(a:country where (a.area is null) and a.peopleNumber % 62338 > 9)-[e:contain]->(b:city)-[e2:contain]->(c:company) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询所有person以身高,名字,薪资分组的id, 根据id从小到大排序;2: 请帮我找出和person陈建聪有关的person,称为X,再请帮我找出和这个X有关联的其他software,以及和X有关联的person;3: 找出全部Spark的点使用的软件,然后找出Spark被提交的person,一起返回;4: 请帮我查找与美团存在company_employee_person关系的person,person与person存在person_knows_person关系的点,返回这些点的薪资;",
        "output": "查询语句为:1: match(a:person) return a.id group by a.height, a.name, a.salary order by a.id asc;2: match(a:person where a.name = '陈建聪')-[e]-(b:person), (b:person)-[e2]-(c:software),(b:person)-[e3]-(d:person) return a, b, c, d;3: match(a where a.name = 'Spark')-[e:software_uses_software]->(b:software),(a where a.name = 'Spark')<-[e2:person_commits_software]-(c:person) return a, b, c;4: match(a where a.name = '美团')-[e:company_employee_person]->(b:person)-[e2:person_knows_person]->(c:person) return c.salary;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前79个label为发布的边",
        "output": "match(a)-[e:publish]->(b) return e limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和电影变形金刚有关的评论,称为X,再返回和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:film where a.name = '变形金刚')-[e]-(b:comment), (b:comment)-[e2]-(c:person),(b:comment)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 有109个人和标签为person的点一起观看了电影，并且这些电影与它们有has关系标签的tag。",
        "output": "match(a:person)-[e:watch]->(b:film)-[e2:has]->(c:tag) return c limit 109",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表946,476,423,503,497, 以属性id作为相等条件,请帮我查找label为商品,名为苹果的点,返回这些点的类别",
        "output": "with p as (select * from (VALUES(946),(476),(423),(503),(497)) as t(id)) MATCH (a:goods WHERE a.id = p.id AND (a.name = '苹果')) RETURN a.category ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与person ID为112相关的forum的关系，然后获取与forum相关的partner。",
        "output": "match(a:person where id = '112')-[e]-(b:forum)-[e2:relation]->(c), (b:forum)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王建聪的点接受的处方",
        "output": "match(a where a.name='王建聪')-[e:accept]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 给出全部名为吴轩的,id小于等于54的伙伴,返回这些伙伴的id,和边的源点id;2: 帮我查询全部名为杜科的点查看的商品;3: 请帮我找出以拥有关系关联了商品杯子的卖家;4: 帮我查询buyer赵月的label为partner的边,并根据targetId升序排列,返回108个;5: 给出197个薪资大于1764,性别为male,或身高为空的买家,根据身高从大到小排列;6: 请帮我找出全部和buyer徐科有关系的seller节点,返回这些点的height;7: 请帮我找出seller郑建国has的goods,被其他seller has的数量;8: 帮我查询所有订单以价值,id分组的价格, 根据价格从大到小排序;9: 请帮我查找和orders有关联的goods节点,并根据其category,name分组,返回category,name,以及id加81的值;",
        "output": "查询语句为:1: match(a where a.name='吴轩')-[e:partner]->(b where b.id <= 54) return b.id,e.srcId;2: match(a where a.name='杜科')-[e:buyer_look_goods]->(b:goods) return b;3: match(a:goods where a.name='杯子')<-[e:seller_has_goods]-(b:seller) return b;4: match(a:buyer where a.name = '赵月')-[e:partner]->(b) return b order by e.targetId asc limit 108;5: match(a:buyer where (a.salary > 1764 and a.gender = 'male') or (a.height is null)) return a order by a.height desc limit 197;6: match(a:buyer where a.name='徐科')-[e]-(b:seller) return b.height;7: match(a:seller where a.name='郑建国')-[e:seller_has_goods]->(b:goods)<-[e2:seller_has_goods]-(c:seller) return COUNT(c);8: match(a:orders) return a.price group by a.value, a.id order by a.price desc;9: match(a:orders)-[e:orders_contain_goods]-(b:goods) return b.category, b.name, b.id + 81 group by b.category, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与Post_205相关的论坛，并返回Post_205的标签。",
        "output": "match(a:post where a.name = 'Post_205')-[e]-(b:forum), (a:post)-[e2:has]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为178的book relates的book, 并将book有关的author的age的平均值赋值给book的id, 接着查询book的id小于178的book relates的book",
        "output": "match(a:book where a.id = 178)-[e:relates]->(b:book) let b.id = AVG((b:book)-[e2]-(c:author) => c.age) match(b:book where b.id < 178)-[e3:relates]->(d:book) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找被person徐伟属于的公司;2: 查询person韩梅commits的software,被其他person commits的数量;3: 返回被person张梅belong的company;4: 查找和名为张建聪的person有朋友关系,或有朋友的朋友关系的软件;5: 找出前90个名字不等于腾讯且规格为medium且规格等于large的公司;6: 请帮我查找被person杜科belong的company;7: 查找标签为person的点;",
        "output": "查询语句为:1: match(a:company)<-[e:person_belong_company]-(b:person where b.name='徐伟') return a, b;2: match(a:person where a.name='韩梅')-[e:person_commits_software]->(b:software)<-[e2:person_commits_software]-(c:person) return COUNT(c);3: match(a:company)<-[e:person_belong_company]-(b:person where b.name='张梅') return a, b;4: match(a:person where n.name=张建聪)-[e:friend]->{1,2}(b:software) return b;5: match(a:company where a.name <> '腾讯' and a.scale = 'medium' and a.scale = 'large') return a limit 90;6: match(a:company)<-[e:person_belong_company]-(b:person where b.name='杜科') return a, b;7: match(a:person) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 找出卖家的3跳以内的环;2: 查询全部与李若涵存在buyer_creates_orders关系的orders,orders与goods存在orders_contain_goods关系的点,返回这些点的price;3: 请帮我查找143个名为李伟的点look的标签为goods的节点,且节点value小于587;4: 找出186个买家孙雪和郑建国,共同的伙伴;",
        "output": "查询语句为:1: match(a:seller)->{0,2}(b)->(a) return a.id, b.id as b_id;2: match(a where a.name = '李若涵')-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c.price;3: match(a where a.name='李伟')-[e:buyer_look_goods]->(b:goods where b.value < 587) return b limit 143;4: match(a:buyer where a.name='孙雪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='郑建国') return b limit 186;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为22的点的销量,价值,名字",
        "output": "match(a where a.id = 22) return a.sellerNumber, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出id为111的点的年龄,性别,身高",
        "output": "match(a where a.id = '111') return a.age, a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有起点标记为'person'，终点标记为'company'，且标签为'invest'的边。",
        "output": "match(a:person)-[e:invest]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与goods矿泉水有关系的goods, 返回和这些goods有关联的orders的,id对88取余的最小值",
        "output": "match(a:goods where a.name= '矿泉水')-[e]-(b:goods)-[e2]-(c:orders) return MIN(c.id % 88)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询47个repository Flink和Kafka,共同的friend",
        "output": "match(a:repository where a.name='Flink')-[e:friend]->(b)<-[e2:friend]-(c:repository where c.name='Kafka') return b limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2356,'周强','male'),(5202,'陈梅','famale')作为请求表数据,属性分别为salary,name,gender, 以属性salary作为相等条件,查询所有和author黄红有1到3跳关系的author",
        "output": "with p as (select * from (VALUES(2356,'周强','male'),(5202,'陈梅','famale')) as t(salary,name,gender))MATCH (a:author WHERE a.salary = p.salary AND (a.name = '黄红')) -[e ]->{1,3}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被department物理学院has的teacher",
        "output": "match(a:teacher)<-[e:has]-(b:department where b.name='物理学院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生张建聪诊断的病人, 令病人的性别等于医生的性别,令病人的id等于医生的性别,令病人的身高等于病人的id的最大值减id, 返回医生的性别, 病人的身高",
        "output": "match(a:doctor where a.name='张建聪')-[e:diagnose]->(b:patient) let b.gender = a.gender,let b.id = a.gender,let b.height = MAX(b.id) - b.id return a.gender,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找151个用户赵思思和黄宏,共同的朋友",
        "output": "match(a:user where a.name='赵思思')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='黄宏') return b limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据等级,名字分组,计算等级对2取余的平均值",
        "output": "return AVG(a.level % 2) group by a.level, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Amily的点的,星数大于等于874,是否开源等于false的相关者,返回这些相关者的id,和边的权重,f0",
        "output": "match(a where a.name='Amily')-[e:relation]->(b where b.stars >= 874 and b.openSource = false) return b.id,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id的值",
        "output": "a.id / a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找43个名为中国的点包含的标签为城市的节点,且节点名字大于9849或价值不是506",
        "output": "match(a where a.name='中国')-[e:contain]->(b:city where b.name > 9849 or b.value <> 506) return b limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以47,869,770,829,463作为请求点id, 以属性id作为相等条件,查找和处方Prescription_272有prescription_contain_medicine关系的药品,再查找以prescription_contain_medicine关系关联了Prescription_272的药品",
        "output": "with p as (select * from (VALUES(47),(869),(770),(829),(463)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_272')) -[e:prescription_contain_medicine ]->(b:medicine) , (a:prescription WHERE a.name = 'Prescription_272') <-[e2:prescription_contain_medicine ]-(c:medicine) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表460,117, 源点的id等于输入表id,查找和药品999感冒灵有关系的病人节点,返回这些点的身高,薪资,性别",
        "output": "with p as (select * from (VALUES(460),(117)) as t(id)) MATCH (a:medicine WHERE a.id = p.id AND (a.name = '999感冒灵')) -[e ]-(b:patient) RETURN b.height, b.salary, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 卖家和买家之间建立的订单是一种创造性的关系。",
        "output": "match(a:buyer)-[e:creates]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为物理学院的课程或大学或学生,以及与其有关的部门,并返回物理学院的名字和这些部门的价值",
        "output": "match(a:course | university | student where name = '物理学院')-[e]-(b:department) return a.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间,上次登录时间,名字分组,计算value的和乘416除75的平均值",
        "output": "return AVG(SUM(a.value) * 416 / 75) group by a.createTime, a.lastLoginTime, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和post Post_351有1跳关系的tag",
        "output": "match(a:post where a.name='Post_351')-[e]->{1,1}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出订单Order_178包含的商品,以及包含这些商品的订单",
        "output": "match(a:orders where name = 'Order_178')-[e:contain]->(b:goods)<-[e2:contain]-(c:orders) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前86个满足条件name不是艺术学院,size不为空的department",
        "output": "match(a:department where a.name <> '艺术学院' and (a.size is not null)) return a limit 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为接受,以及f1不等于false或源点id是157的边",
        "output": "match(a)-[e:accept where e.f1 <> false or e.srcId = 157]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user黄建聪有creates关系的pullRequest,再查询以creates关系关联了黄建聪的issue",
        "output": "match(a:user where a.name = '黄建聪')-[e:creates]->(b:pullRequest),(a:user where a.name = '黄建聪')<-[e2:creates]-(c:issue)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与country日本存在contain关系,且与company微软存在contain关系的city节点，返回这些city的peopleNumber,及country日本的value,及company微软的name",
        "output": "match(a:country where a.name='日本')-[e:contain]->(b:city)<-[e2:contain]-(c:company where c.name='微软') return a.value,b.peopleNumber,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 找出所有和cinema横店影院有关系的person节点,返回这些点的height;2: 帮我查询与person有关系的标签节点,且标签节点的名字是文艺,并返回这些点的id乘id的值,以及价值加935的最大值;3: 给出电影我不是药神的全部标签等于相关者的边,并根据权重从小到大排列,返回93个;",
        "output": "查询语句为:1: match(a:cinema where a.name='横店影院')-[e]-(b:person) return b.height;2: match(a:person)-[e]->(b:tag where b.name = '文艺') return b.id * b.id, MAX(b.value + 935);3: match(a:film where a.name = '我不是药神')-[e:relation]->(b) return b order by e.weight asc limit 93;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值减289乘4的值",
        "output": "(AVG(a.value) - 289) * 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回徐月喜欢的帖子及其拥有的标签的ID和名称。",
        "output": "match(a:user where name = '徐月')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找前178个name是历史或name等于悬疑的tag;2: 返回与名为Post_432和Post_310的点共同拥有的,label为标签的节点;3: 请帮我找出forum CSDN的所有friend,的targetId乘158的最大值;4: 返回120个用户杜宏和孙思思,共同的相关者;5: 请帮我找出从用户王月出发,经过label为user_likes_post的边,走2度或3度到达的帖子点;6: 查询和论坛有关联的帖子节点,并根据其语言,名字,id分组,返回语言,名字,id,以及wordCount的个数乘字数的值;",
        "output": "查询语句为:1: match(a:tag where a.name = '历史' or a.name = '悬疑') return a limit 178;2: match(a where a.name = 'Post_432')-[e:post_has_tag]->(b:tag)<-[e2:post_has_tag]-(c where c.name = 'Post_310') return b;3: match(a:forum where a.name= 'CSDN')-[e:friend]->(b) return MAX(e.targetId * 158);4: match(a:user where a.name='杜宏')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='孙思思') return b limit 120;5: match(a:user where a.name='王月')-[e:user_likes_post]->{2,3}(b:post) return b;6: match(a:forum)-[e:forum_contain_post]-(b:post) return b.lang, b.name, b.id, COUNT(b.wordCount) * b.wordCount group by b.lang, b.name, b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为李红的节点查看的订单或商品",
        "output": "match(a where a.name='李红')-[e:look]->(b:orders | goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为大学的全部点,并根据id从大到小排列",
        "output": "match(a:university) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有label为person的点，按照性别升序排序。",
        "output": "match(a:person) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person孙建国有family关系的1跳以内的环",
        "output": "match(a:person where name = '孙建国')-[e:family]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我查找与国家有关系的城市节点,且城市节点的id不是27,并返回这些点的价值对665取余的最小值,以及area的数量除77167的数量;2: 给出所有和国家俄罗斯有3到6跳关系的大学;3: 找出公司字节的全部label为伙伴的边,并根据目标点id升序排列,返回44个;4: 查找id为147的国家有关的城市的朋友, 再查找和城市有关系的相关者;5: 找出company华为的所有friend,的targetId加targetId的数量;6: 找出城市杭州包含的大学,被其他城市包含的数量;7: 找出所有源点标签为城市,目标点标签为公司,标签为city_contain_company的边;8: 给出源点label为country,边label为country_contain_city的边,返回这些边的srcId的数量对40取余的值,和weight乘150.54除55的最大值;",
        "output": "查询语句为:1: match(a:country)-[e]->(b:city where b.id <> 27) return MIN(b.value % 665), COUNT(COUNT(b.area) / 77167);2: match(a:country where a.name='俄罗斯')-[e]->{3,6}(b:university) return b;3: match(a:company where a.name = '字节')-[e:partner]->(b) return b order by e.targetId asc limit 44;4: match(a:country where id = '147')-[e]-(b:city)-[e2:friend]->(c), (b:city)-[e3:relation]->(d) return a, b, c, d;5: match(a:company where a.name= '华为')-[e:friend]->(b) return COUNT(e.targetId + e.targetId);6: match(a:city where a.name='杭州')-[e:city_contain_university]->(b:university)<-[e2:city_contain_university]-(c:city) return COUNT(c);7: match(a:city)-[e:city_contain_company]->(b:company) return e;8: match(a:country)-[e:country_contain_city]->(b) return COUNT(e.srcId) % 40, MAX(e.weight * 150.54 / 55);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询郑建国和Amy之间存在的共同点。",
        "output": "match(a:doctor where a.name='郑建国')-[e:belong]->(b)<-[e2:belong]-(c:doctor where c.name='Amily') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person knows的person,返回其源点的salary的最大值加7536的最大值,以及目标点的salary乘9635的值",
        "output": "match(a:person)-[e:knows]->(b:person) return MAX(MAX(a.salary) + 7536), b.salary * 9635",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和repository有关联的pullRequest节点,并根据其createTime分组,返回createTime,以及changeFileNumber加417的最小值",
        "output": "match(a:repository)-[e:has]-(b:pullRequest) return b.createTime, MIN(b.changeFileNumber + 417) group by b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'uu', 'ls'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('uu', 'ls') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与土木学院相关的所有学生，包括那些与相关者有关的学生。",
        "output": "match(a:department where n.name=土木学院)-[e:relation]->{1,2}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与论坛推特有关系的论坛的创建时间",
        "output": "match(a:forum where a.name='推特')-[e]-(b:forum) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有部门的大小加99的值",
        "output": "match(a:department) return a.size + 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我找出类型为person_parent_person,并且满足条件源点id为空的边;2: 给出与person Sam有关系的person, 返回和这些person有关联的person的,id除46的最大值;3: 帮我查询名为周轩的person;4: 给出person的三角的环,边label为person_colleague_person, 并返回这些点的id;5: 查询全部和名为黄月的person有parent关系,或有parent的parent关系的person;6: 请帮我查找全部id为14的person关联的person,和以relates关系关联了这些person的其他person;7: 请帮我查找满足条件身高小于等于170的节点;8: 查询和person何思思有person_colleague_person关系的person,再查询以person_colleague_person关系关联了何思思的person;9: 查找前128个label为person_colleague_person的边;",
        "output": "查询语句为:1: match(a)-[e:person_parent_person where (e.srcId is null)]->(b) return e;2: match(a:person where a.name= 'Sam')-[e]-(b:person)-[e2]-(c:person) return MAX(c.id / 46);3: match(a:person where a.name = '周轩') return a;4: match(a:person)-[e:person_colleague_person]->(b)-[e2:person_colleague_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a:person where n.name=黄月)-[e:person_parent_person]->{1,2}(b:person) return b;6: match(a:person where a.id = '14')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;7: match(a where a.height <= 170) return a;8: match(a:person where a.name = '何思思')-[e:person_colleague_person]->(b:person),(a:person where a.name = '何思思')<-[e2:person_colleague_person]-(c:person)return a, b, c;9: match(a)-[e:person_colleague_person]->(b) return e limit 128;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 给出所有源点类型为person,边类型为person_likes_person的边,返回这些边的weight减weight的值,和targetId减12加28的值;2: 请帮我查找person likes的person,返回其源点的id除87的值,以及目标点的age对50取余的值;3: 查询154个person徐伟和张思琪,共同的伙伴;4: 请帮我找出和标签等于person的点有person_knows_person关系的person,且和这些person有person_likes_person关系的person,且和这些person有person_likes_person关系的person;5: 请帮我找出全部和person郑国强有关系的person节点,返回这些点的身高;6: 查询person韩思琪likes的person,被其他person pay的数量;7: 查询105个height小于193或name不等于马强的person,根据age升序排列;8: 查询所有源点性别不等于male或名字不是95或性别不是male,目标点性别等于famale且性别不等于famale,身高小于等于158,且标签为person_knows_person的边;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person]->(b) return e.weight - e.weight, e.targetId - 12 + 28;2: match(a:person)-[e:person_likes_person]->(b:person) return a.id / 87, b.age % 50;3: match(a:person where a.name='徐伟')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='张思琪') return b limit 154;4: match(a:person)-[e:person_knows_person]->(b:person)-[e2:person_likes_person]->(c:person)-[e3:person_likes_person]->(d:person) return d;5: match(a:person where a.name='郑国强')-[e]-(b:person) return b.height;6: match(a:person where a.name='韩思琪')-[e:person_likes_person]->(b:person)<-[e2:person_pay_person]-(c:person) return COUNT(c);7: match(a:person where a.height < 193 or a.name <> '马强') return a order by a.age asc limit 105;8: match(a where a.gender <> 'male' or a.name <> 95 or a.gender <> 'male')-[e:person_knows_person]->(b where b.gender = 'famale' and b.gender <> 'famale' and b.height <= 158) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和person郑建国之间有own关系的account",
        "output": "match(a:person where a.name='郑建国')-[e:own]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出28个与黄轩和张月都存在关系的person或公司或软件节点",
        "output": "match(a where a.name='黄轩')-[e]->(b:person | company | software)<-[e2]-(c where c.name='张月') return b limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前196个类型为支付的边",
        "output": "match(a)-[e:pay]->(b) return e limit 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 张思思和何雪都有父母。",
        "output": "match(a:person where a.name='张思思')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='何雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询属于国家英国的城市,和这些城市属于的国家",
        "output": "match(a:country where name = '英国')<-[e:belong]-(b:city)-[e2:belong]->(c:country) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我找出和author周建国有author_write_book关系的book,再请帮我找出以author_knows_author关系关联了周建国的author;2: 请帮我找出名为徐红和吴宏的,类型是编辑的点公共的伙伴节点的名单;3: 帮我查询被编辑杜红发布的书;4: 返回101个author张月和黄建国,共同的partner;5: 返回所有标签等于读者的点;6: 查询171个height是176或id不是33的author,根据name升序排列;7: 计算所有reader的salary加5499的值;",
        "output": "查询语句为:1: match(a:author where a.name = '周建国')-[e:author_write_book]->(b:book),(a:author where a.name = '周建国')<-[e2:author_knows_author]-(c:author)return a, b, c;2: match(a:publisher where a.name='徐红')-[e:partner]->(b)<-[e2:partner]-(c:publisher where c.name='吴宏') return b.name;3: match(a:book)<-[e:publisher_publish_book]-(b:publisher where b.name='杜红') return a, b;4: match(a:author where a.name='张月')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='黄建国') return b limit 101;5: match(a:reader) return a;6: match(a:author where a.height = 176 or a.id <> 33) return a order by a.name asc limit 171;7: match(a:reader) return a.salary + 5499;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查找一个名为韩若涵和吴强的人，共同取消一个orders类型的订单？",
        "output": "match(a where a.name = '韩若涵')-[e:cancel]->(b:orders)<-[e2:cancel]-(c where c.name = '吴强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询与名为呐喊和悲惨世界的点共同knows的,类型为book的节点;2: 返回所有编辑以薪资分组的id, 根据id降序排序;3: 帮我查询author何科的所有标签等于partner的边,并根据f0从小到大排列,返回40个;",
        "output": "查询语句为:1: match(a where a.name = '呐喊')-[e:knows]->(b:book)<-[e2:knows]-(c where c.name = '悲惨世界') return b;2: match(a:publisher) return a.id group by a.salary order by a.id desc;3: match(a:author where a.name = '何科')-[e:partner]->(b) return b order by e.f0 asc limit 40;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被department生物学院has的teacher,和生物学院has的teacher",
        "output": "match(a:teacher)<-[e:has]-(b:department where name = '生物学院')-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询性别不是male或性别为famale的person支付的person的名称,以及这些person 认识的person的名称",
        "output": "match(a:person where a.gender <> 'male' or a.gender = 'famale')-[e:pay]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 帮我查询与person李思琪有关,且与film建国大业有关系的comment节点;2: 找出label为person的点,并根据age降序排列;3: 给出id为183的点的年龄,身高,id;4: 帮我查询与电影我不是药神和星际穿越都存在film_has_tag关系的点;5: 请帮我查找全部和名为杜建聪的person有relation关系,或有relation的relation关系的comment;",
        "output": "查询语句为:1: match(a:person where a.name='李思琪')-[e:person_creates_comment]-(b:comment)-[e2:comment_belong_film]-(c:film where c.name='建国大业') return b;2: match(a:person) return a order by a.age desc;3: match(a where a.id = '183') return a.age, a.height, a.id;4: match(a:film where a.name='我不是药神')-[e:film_has_tag]->(b)<-[e2:film_has_tag]-(c:film where c.name='星际穿越') return b;5: match(a:person where n.name=杜建聪)-[e:relation]->{1,2}(b:comment) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height乘169的值",
        "output": "a.height * 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出陈思思喜欢的书其他编辑发布的数量。",
        "output": "match(a:reader where a.name='陈思思')-[e:likes]->(b:book)<-[e2:publish]-(c:publisher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出张强的点拥有的商品,然后找出张强被咨询的买家,一起返回",
        "output": "match(a where a.name = '张强')-[e:has]->(b:goods),(a where a.name = '张强')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有与买家或买家相关者有关的人。",
        "output": "match(a:buyer)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询22个和类型为person的点有认识关系的person,以及和这些person有认识关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person) return c limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height乘199的最大值",
        "output": "MAX(a.height * 199)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按id、area和value对country进行分组，然后根据value进行降序排序。",
        "output": "match(a:country) return a.value group by a.id, a.area, a.value order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回129个性别等于male或性别不等于male的person,根据薪资升序排列",
        "output": "match(a:person where a.gender = 'male' or a.gender <> 'male') return a order by a.salary asc limit 129",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为49的person购买的软件, 并将软件有关的公司的名字的最小值赋值给软件的id, 接着查询软件的id小于49的软件使用的软件",
        "output": "match(a:person where a.id = 49)-[e:buy]->(b:software) let b.id = MIN((b:software)-[e2]-(c:company) => c.name) match(b:software where b.id < 49)-[e3:uses]->(d:software) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值减96的值",
        "output": "AVG(a.id) - 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和repository Kafka有关的issue,称为X,再请帮我找出和这个X有关联的其他pullRequest,以及和X有关联的issue",
        "output": "match(a:repository where a.name = 'Kafka')-[e]-(b:issue), (b:issue)-[e2]-(c:pullRequest),(b:issue)-[e3]-(d:issue) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与软件有关系的person节点,且person节点的身高小于等于182,并返回这些person的id加47的平均值,以及person的age的平均值除年龄的最大值",
        "output": "match(a:software)-[e]->(b:person where b.height <= 182) return AVG(b.id + 47), MAX(AVG(b.age) / b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为196的university有关的university的relation, 再给出和university有关系的relation",
        "output": "match(a:university where id = 196)-[e]-(b:university)-[e2:relation]->(c), (b:university)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与医生孙国强有关系的药品, 返回和这些药品有关联的医生的,height的平均值乘191的值",
        "output": "match(a:doctor where a.name= '孙国强')-[e]-(b:medicine)-[e2]-(c:doctor) return AVG(c.height) * 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,gender,salary, 数据为('马梅','male',7613),('何雪','male',6838)的子查询作为输入表, 以属性salary作为相等条件,请帮我查找id为145的大学有关的学生的伙伴, 再请帮我查找和学生有关系的伙伴",
        "output": "with p as (select * from (VALUES('马梅','male',7613),('何雪','male',6838)) as t(name,gender,salary))MATCH (a:university WHERE a.salary = p.salary AND (id = '145')) -[e ]-(b:student) -[e2:partner ]->(c) , (b:student) -[e3:partner ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出140个名为徐建聪的点likes的类型是comment的节点,且其createTime为2012年11月10日且createTime等于2007年04月11日",
        "output": "match(a where a.name='徐建聪')-[e:likes]->(b:comment where b.createTime = '2012-11-10' and b.createTime = '2007-04-11') return b limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出同时与孙科和杜梅有关联的人。",
        "output": "match(a:person where a.name='孙科')-[e:colleague]-(b:person)-[e2:parent]-(c:person where c.name='杜梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为陈强的person,以及与其有关的公司,并返回陈强的薪资和这些公司的价值",
        "output": "match(a:person where name = '陈强')-[e]-(b:company) return a.salary, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与loan loan_99有关,且与account Faker有关系的account节点",
        "output": "match(a:loan where a.name='loan_99')-[e:deposit]-(b:account)-[e2:transfer]-(c:account where c.name='Faker') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出157个和标签为person的点有支付关系的person,并且和这些person有认识关系的person",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:knows]->(c:person) return c limit 157",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找四川大学的部门数量，以及这些部门被其他大学拥有的数量。",
        "output": "match(a:university where a.name='四川大学')-[e:has]->(b:department)<-[e2:has]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马若涵和吴轩作为用户拥有的共同朋友列表。",
        "output": "match(a:user where a.name='马若涵')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='吴轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight对weight取余的值",
        "output": "a.weight % a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person张若涵有关系的person, 返回和这些person有关联的person的,薪资对4046取余的值",
        "output": "match(a:person where a.name= '张若涵')-[e]-(b:person)-[e2]-(c:person) return c.salary % 4046",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person王红knows的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='王红') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部reader以name,height分组的age, 根据age从大到小排序",
        "output": "match(a:reader) return a.age group by a.name, a.height order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找被university复旦大学cooperate的company",
        "output": "match(a:company)<-[e:university_cooperate_company]-(b:university where b.name='复旦大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到Order_144的买家。",
        "output": "match(a:orders where a.name='Order_144')<-[e:creates]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找账号以价值,是否冻结,创建时间分组的价值, 根据价值升序排序",
        "output": "match(a:account) return a.value group by a.value, a.isBlock, a.createTime order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问腾讯公司所在的城市及其包含的大学ID、名称和价值是什么？",
        "output": "match(a:company where name = '腾讯')-[e:belong]->(b:city)-[e2:contain]->(c:university) return c.id, c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签等于software的点有uses关系的software,并且和这些software有uses关系的software,并且和这些software有uses关系的software",
        "output": "match(a:software)-[e:uses]->(b:software)-[e2:uses]->(c:software)-[e3:uses]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄降序，找出所有按年龄分组的人的年龄。",
        "output": "match(a:person) return a.age group by a.age order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询ID为42的城市中包含的公司名称，以及这些公司与哪些大学合作。",
        "output": "match(a:city where a.id = 42)-[e:contain]->(b:company)-[e2:cooperate]->(c:university) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是person的点,并根据身高从大到小排列",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为69的点的名字",
        "output": "match(a where a.id = 69) return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person郑红有关的软件,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的软件",
        "output": "match(a:person where a.name = '郑红')-[e]-(b:software), (b:software)-[e2]-(c:person),(b:software)-[e3]-(d:software) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size对size取余加87除65的值",
        "output": "(a.size % a.size + 87) / 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 请帮我查找类型为贷款的所有点,并根据金额降序排列;2: 查找company滴滴的relation的friend的partner;3: 返回名为华为的company;",
        "output": "查询语句为:1: match(a:loan) return a order by a.amount desc;2: match(a:company where a.name='滴滴')-[e:relation]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d;3: match(a:company where a.name = '华为') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出university武汉大学 belong的city,返回city contain的company的peopleNumber对721取余的值",
        "output": "match(a:university where name = '武汉大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c.peopleNumber % 721",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出事项ISSUE-288属于的仓库节点拥有的合并请求",
        "output": "match(a:issue where a.name = 'ISSUE-288')-[e:belong]->(b:repository)-[e2:has]->(c:pullRequest) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询发布用户Jack喜欢的帖子,的用户",
        "output": "match(a:user where name = 'Jack')-[e:likes]->(b:post)<-[e2:publish]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签等于person,目标点标签等于person,标签等于软件或公司的边",
        "output": "match(a:person)-[e:software | company]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为孙国强和马思琪的,类型是作家的点公共的相关者节点的名单",
        "output": "match(a:author where a.name='孙国强')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='马思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名字不等于重庆的节点",
        "output": "match(a where a.name <> '重庆') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和城市伦敦有包含关系的公司,再查询以包含关系关联了伦敦的公司",
        "output": "match(a:city where a.name = '伦敦')-[e:contain]->(b:company),(a:city where a.name = '伦敦')<-[e2:contain]-(c:company)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出177个id不为空或price的最小值加127大于等于18或类别不等于80的药品,根据名字降序排列",
        "output": "match(a:medicine where (a.id is not null) or MIN(a.price) + 127 >= 18 or a.category <> 80) return a order by a.name desc limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与韩梅和陈科有关的人，共有151个。",
        "output": "match(a where a.name='韩梅')-[e]->(b:person)<-[e2]-(c where c.name='陈科') return b limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算courseHour加37减29的值",
        "output": "return a.courseHour + 37 - 29 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找大学合作的公司, 令公司的人数的值等于合作公司的大学的名字的数量, 再查找公司属于的城市",
        "output": "match(a:university)-[e:cooperate]->(b:company) let b.peopleNumber = COUNT((b:company)<-[e2:cooperate]-(c:university) => c.name) match(b:company)-[e3:belong]->(d:city) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出李梅喜欢的人，并返回他的/她的薪资、年龄和 ID。",
        "output": "match(a:person where name = '李梅')-[e:likes]->(b:person)-[e2:pay]->(c:person) return c.salary, c.age, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和事项ISSUE-54有关的合并请求,再请帮我找出和ISSUE-54属于的其他仓库,返回它们",
        "output": "match(a:issue where a.name = 'ISSUE-54')-[e]-(b:pullRequest), (a:issue)-[e2:belong]->(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为113的教师关联的课程,和以选择关系关联了这些课程的其他学生",
        "output": "match(a:teacher where a.id = 113)-[e]-(b:course)<-[e2:selects]-(c:student) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以854,271,669作为请求点id, 以属性id作为相等条件,请帮我查找所有源点满足条件name不是重庆大学或level不为空,且id在16到59之间,目标点满足条件peopleNumber小于等于1503,且类型为university_belong_city的边",
        "output": "with p as (select * from (VALUES(854),(271),(669)) as t(id)) MATCH (a WHERE a.id = p.id AND ((a.name <> '重庆大学' OR a.level IS NOT NULL) AND a.id BETWEEN ASYMMETRIC 16 AND 59)) -[e:university_belong_city ]->(b WHERE b.peopleNumber <= 1503) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与合并请求有关系的用户节点,且用户节点的id小于等于155,并返回这些用户的薪资对8609取余的值,以及用户的id对44取余的值",
        "output": "match(a:pullRequest)-[e]->(b:user where b.id <= 155) return b.salary % 8609, b.id % 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出41个person马轩和黄月,共同的父母",
        "output": "match(a:person where a.name='马轩')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='黄月') return b limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被部门生物学院拥有的学生,和生物学院拥有的教师",
        "output": "match(a:student)<-[e:has]-(b:department where name = '生物学院')-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点标签为person,边标签为commits的边,返回这些边的weight除197.47加129乘181.43对123.21取余的值,和f0乘766除931的求和值",
        "output": "match(a:person)-[e:commits]->(b) return (e.weight / 197.47 + 129) * 181.43 % 123.21, SUM(e.f0 * 766 / 931)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出事项ISSUE-354 属于的仓库,返回仓库 拥有的事项的id乘28乘权重的值",
        "output": "match(a:issue where name = 'ISSUE-354')-[e:belong]->(b:repository)-[e2:has]->(c:issue) return c.id * 28 * c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person Alan的朋友,的weight的最大值加138.86除55加176.69的值",
        "output": "match(a:person where a.name= 'Alan')-[e:friend]->(b) return (MAX(e.weight) + 138.86) / 55 + 176.69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出提交person孙建聪购买的软件,的person",
        "output": "match(a:person where name = '孙建聪')-[e:buy]->(b:software)<-[e2:commits]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与计算机学院有关的学生，然后找出与计算机学院有关的教师。",
        "output": "match(a:department where a.name = '计算机学院')-[e:has]->(b:student),(a:department where a.name = '计算机学院')<-[e2:has]-(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和person张若涵有2跳或3跳关系的person",
        "output": "match(a:person where a.name='张若涵')-[e]->{2,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是公司的点有合作关系的大学,且和这些大学有合作关系的公司,且和这些公司有属于关系的城市",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company)-[e3:belong]->(d:city) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与王月有关联且与杜月有关联的作家节点，返回它们的年龄、性别和 ID。",
        "output": "match(a:reader where a.name='王月')-[e]->(b:author)<-[e2]-(c:author where c.name='杜月') return b.age, b.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于大学,名为电子科技大学的点,返回这些点的名字",
        "output": "match(a:university where a.name = '电子科技大学') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,age,gender, 数据为(181,31,'male'),(172,94,'male'),(153,72,'famale')的子查询作为输入表, 源点的gender等于输入表gender,找出91个价格为空或价格小于等于4721.03的订单,根据名字从大到小排列",
        "output": "with p as (select * from (VALUES(181,31,'male'),(172,94,'male'),(153,72,'famale')) as t(height,age,gender))MATCH (a:orders WHERE a.gender = p.gender AND (a.price IS NULL OR a.price <= 4721.03)) RETURN a ORDER BY a.name DESC LIMIT 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与公司Bilibili有关系的person, 返回和这些person有关联的person的,height的和减192除46除70的最小值",
        "output": "match(a:company where a.name= 'Bilibili')-[e]-(b:person)-[e2]-(c:person) return MIN((SUM(c.height) - 192) / 46 / 70)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出和person有关联的person节点,并根据其gender,id,name分组,返回gender,id,name,以及salary减8902减96的个数;2: 查找满足条件gender不等于famale且height大于等于171且name不是赵强的节点;3: 找出person王红的所有label为friend的边,并根据weight从小到大排列,返回82个;4: 查找全部孙雪的点关联的person,然后查找孙雪被认识的person,一起返回;",
        "output": "查询语句为:1: match(a:person)-[e:person_colleague_person]-(b:person) return b.gender, b.id, b.name, COUNT(b.salary - 8902 - 96) group by b.gender, b.id, b.name;2: match(a where a.gender <> 'famale' and a.height >= 171 and a.name <> '赵强') return a;3: match(a:person where a.name = '王红')-[e:person_friend_person]->(b) return b order by e.weight asc limit 82;4: match(a where a.name = '孙雪')-[e:relates]->(b:person),(a where a.name = '孙雪')<-[e2:knows]-(c:person) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以979,558,746,250,209作为请求点id, 源点的id等于输入表id,帮我查询名为孙强的seller,以及与其有关的goods,并返回孙强的name和这些goods的sellerNumber",
        "output": "with p as (select * from (VALUES(979),(558),(746),(250),(209)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (name = '孙强')) -[e ]-(b:goods) RETURN a.name, b.sellerNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为13的点的类别,字数,id",
        "output": "match(a where a.id = 13) return a.category, a.wordCount, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为少年闰土的书,以及与其有关的编辑,并返回少年闰土的id和这些编辑的性别",
        "output": "match(a:book where name = '少年闰土')-[e]-(b:publisher) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和课程程序设计有关系的学生,返回这些点的价值",
        "output": "match(a:course where a.name='程序设计')-[e]-(b:student) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person何国强有关系的person, 返回和这些person有关联的person的,salary的最小值减5112的值",
        "output": "match(a:person where a.name= '何国强')-[e]-(b:person)-[e2]-(c:person) return MIN(c.salary) - 5112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 找出源点人数是8246或名字的个数小于等于7839或id小于等于75,边label为city_contain_university,且满足条件f0大于等于713且源点id小于等于28,或f0大于等于868的边,返回这些边的源点id除12的最小值;2: 找出label为国家,名为法国的点,返回这些点的价值,人数;3: 请帮我查找前43个名字大于等于876或面积大于91673或价值大于等于62686的国家;4: 查询国家以名字,人数分组的人数, 根据人数从大到小排序;5: 查询和城市有关联的国家节点,并根据其名字分组,返回名字,以及人数减33299的最大值;6: 请帮我查找所有与城市上海有关系的公司的价值;7: 请帮我找出公司微软 属于的城市,返回城市 包含的公司的人数除978对842取余的最小值 ;",
        "output": "查询语句为:1: match(a where a.peopleNumber = 8246 or COUNT(a.name) <= 7839 or a.id <= 75)-[e:city_contain_university where (e.f0 >= 713 and e.srcId <= 28) or e.f0 >= 868]->(b) return MIN(e.srcId / 12);2: match(a:country where a.name = '法国') return a.value, a.peopleNumber;3: match(a:country where a.name >= 876 or a.area > 91673 or a.value >= 62686) return a limit 43;4: match(a:country) return a.peopleNumber group by a.name, a.peopleNumber order by a.peopleNumber desc;5: match(a:city)-[e:city_belong_country]-(b:country) return b.name, MAX(b.peopleNumber - 33299) group by b.name;6: match(a:city where a.name='上海')-[e]-(b:company) return b.value;7: match(a:company where name = '微软')-[e:company_belong_city]->(b:city)-[e2:city_contain_company]->(c:company) return MIN(c.peopleNumber / 978 % 842);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与user赵伟和郑月都存在publish关系的点",
        "output": "match(a:user where a.name='赵伟')-[e:publish]->(b)<-[e2:publish]-(c:user where c.name='郑月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与何思琪有关联的人。",
        "output": "match(a:person where a.name='何思琪')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出author韩若涵knows的author, 令author的name等于author的height的个数,令author的name等于author的height的平均值减167,令author的id等于author的name, 返回author(a)的height, author(b)的gender",
        "output": "match(a:author where a.name='韩若涵')-[e:knows]->(b:author) let a.name = COUNT(a.height),let a.name = AVG(a.height) - 167,let b.id = b.name return a.height,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找类型为'部门'的实体，其具有'拥有'关系的医生，这些医生又创建了'处方'，并且这些'处方'包含'药品'。",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription)-[e3:contain]->(d:medicine) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为徐建聪的节点喜欢的person",
        "output": "match(a where a.name='徐建聪')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点类型是person,目标点类型是公司,类型是账号或person的边",
        "output": "match(a:person)-[e:account | person]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出王建聪和张伟之间存在喜欢关系的证据。",
        "output": "match(a:reader where a.name='王建聪')-[e:likes]->(b)<-[e2:likes]-(c:reader where c.name='张伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以600,562,119作为请求点id, 以属性id作为相等条件,查找author李梅的类型是friend的边,并根据targetId从小到大排列,返回163个",
        "output": "with p as (select * from (VALUES(600),(562),(119)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.name = '李梅')) -[e:friend ]->(b) RETURN b ORDER BY e.targetId LIMIT 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被forum contain数量大于41的user,记为relationCount,再查询这些user contain的user",
        "output": "match(a:user) let a.relationCount = AVG((a:user)<-[e:contain]-(b:forum) => b.id) match(a where a.relationCount > 41)-[e2:contain]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以76作为输入,返回id, distance",
        "output": "Call SSSP(76) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与买家何思思有咨询关系并拥有商品手机的卖家信息，包括卖家名字、年龄、薪资以及买家何思思和商品手机的ID。",
        "output": "match(a:buyer where a.name='何思思')-[e:consult]->(b:seller)<-[e2:has]-(c:goods where c.name='手机') return a.id,b.name, b.age, b.salary,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为Post_480和Post_376的点共同拥有的,label为标签的节点",
        "output": "match(a where a.name = 'Post_480')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_376') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和仓库Tugraph有拥有关系的事项,再给出以拥有关系关联了Tugraph的用户",
        "output": "match(a:repository where a.name = 'Tugraph')-[e:has]->(b:issue),(a:repository where a.name = 'Tugraph')<-[e2:has]-(c:user)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和repository Mybatis有关的issue,再给出和Mybatis has的其他pullRequest,返回它们",
        "output": "match(a:repository where a.name = 'Mybatis')-[e]-(b:issue), (a:repository)-[e2:has]->(c:pullRequest) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person Tom的类型为伙伴的边,并根据f1升序排列,返回160个",
        "output": "match(a:person where a.name = 'Tom')-[e:partner]->(b) return b order by e.f1 asc limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于国家,名为越南的点,返回这些点的价值,名字,id",
        "output": "match(a:country where a.name = '越南') return a.value, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与帖子有关系的帖子节点,且帖子节点的价值为空,并返回这些帖子的字数对619取余的平均值,以及帖子的id对95取余的平均值",
        "output": "match(a:post)-[e]->(b:post where (b.value is null)) return AVG(b.wordCount % 619), AVG(b.id % 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 给出151个医生孙雪和陈建国,共同的相关者;2: 找出doctor赵科的全部label为partner的边,并根据srcId从大到小排列,返回52个;3: 给出所有处方以创建时间,权重分组的id, 根据id降序排序;4: 查询标签为prescription的全部点,并根据name从小到大排列;",
        "output": "查询语句为:1: match(a:doctor where a.name='孙雪')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='陈建国') return b limit 151;2: match(a:doctor where a.name = '赵科')-[e:partner]->(b) return b order by e.srcId desc limit 52;3: match(a:prescription) return a.id group by a.createTime, a.weight order by a.id desc;4: match(a:prescription) return a order by a.name asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 请帮我查找144个价值在88到108之间或名字不是悬疑,且id为空的标签,根据价值从小到大排列;2: 请帮我查找18个name等于Comment_123的comment,根据wordCount降序排列;3: 请帮我查找163个address的平均值大于等于104的cinema,根据id从小到大排列;4: 给出全部和cinema点有releases关系的film节点,且边满足条件targetId小于等于129.42,目标film节点满足条件category不是历史;5: 请帮我查找person马伟的全部类型为朋友的边,并根据f1从大到小排列,返回126个;6: 查找标签等于标签的点,并根据id从小到大排列;7: 查找所有person的朋友,或其朋友的朋友;8: 查找id为28的点的name;",
        "output": "查询语句为:1: match(a:tag where ((a.value BETWEEN 88 AND 108) or a.name <> '悬疑') and (a.id is null)) return a order by a.value asc limit 144;2: match(a:comment where a.name = 'Comment_123') return a order by a.wordCount desc limit 18;3: match(a:cinema where AVG(a.address) >= 104) return a order by a.id asc limit 163;4: match(a:cinema)-[e:cinema_releases_film where e.targetId <= 129.42]->(b:film where b.category <> '历史') return b;5: match(a:person where a.name = '马伟')-[e:friend]->(b) return b order by e.f1 desc limit 126;6: match(a:tag) return a order by a.id asc;7: match(a:person)-[e:friend]->{1,2}(b) return b;8: match(a where a.id = '28') return a.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id的平均值对id取余的最大值",
        "output": "return MAX(AVG(a.id) % a.id) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询与公司微软和蚂蚁集团都存在company_belong_city关系的点",
        "output": "match(a:company where a.name='微软')-[e:company_belong_city]->(b)<-[e2:company_belong_city]-(c:company where c.name='蚂蚁集团') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件名字等于kate,身高小于等于167且性别是famale的节点",
        "output": "match(a where a.name = 'kate' and a.height <= 167 and a.gender = 'famale') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查询与university武汉大学有关系的course的id;2: 请帮我找出student selects的course,返回其源点的height的求和值乘172的值,以及目标点的credit加credit的求和值;3: 找出标签等于department_has_student,且f1不是false且srcId小于42的边;4: 请帮我查找123个value小于910的university,根据id从大到小排列;5: 给出和教师点有教关系的课程节点,且边满足条件源点id减源点id不等于857,目标课程节点名字是大学物理;6: 找出197个名字是物理学院且名字等于体育学院且名字不是艺术学院的部门,根据大小降序排列;7: 返回所有与教师杜月有关系的大学的名字;8: 查找部门文学院的所有标签为伙伴的边,并根据f0升序排列,返回98个;",
        "output": "查询语句为:1: match(a:university where a.name='武汉大学')-[e]-(b:course) return b.id;2: match(a:student)-[e:student_selects_course]->(b:course) return SUM(a.height) * 172, SUM(b.credit + b.credit);3: match(a)-[e:department_has_student where e.f1 <> false and e.srcId < 42]->(b) return e;4: match(a:university where a.value < 910) return a order by a.id desc limit 123;5: match(a:teacher)-[e:teacher_teach_course where e.srcId - e.srcId <> 857]->(b:course where b.name = '大学物理') return b;6: match(a:department where a.name = '物理学院' and a.name = '体育学院' and a.name <> '艺术学院') return a order by a.size desc limit 197;7: match(a:teacher where a.name='杜月')-[e]-(b:university) return b.name;8: match(a:department where a.name = '文学院')-[e:partner]->(b) return b order by e.f0 asc limit 98;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,age,id, 数据为(190,40,51),(182,41,9),(191,12,27)的子查询作为输入表, 源点的age等于输入表age,返回从author张宏出发,经过label为author_knows_author的边,走2到5跳到达的author点",
        "output": "with p as (select * from (VALUES(190,40,51),(182,41,9),(191,12,27)) as t(height,age,id))MATCH (a:author WHERE a.age = p.age AND (a.name = '张宏')) -[e:author_knows_author ]->{2,5}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找处方的三角的环,边类型是包含, 并返回这些点的id",
        "output": "match(a:prescription)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以拥有关系关联了学生王思琪的部门",
        "output": "match(a:student where a.name='王思琪')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找叫吴若涵的人，他们有哪些信息，比如薪水、身高和年龄。",
        "output": "match(a:person where a.name = '吴若涵') return a.salary, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 帮我查询类型为账号的所有点,并根据是否冻结降序排列;2: 查询person的3度以内的环;3: 返回公司的三角的环,边类型为company_apply_loan, 并返回这些点的id;4: 帮我查询所有源点标签等于account,边标签等于account_transfer_account,以及f0小于等于737或f1是false的边;5: 查询person郑若涵的标签为朋友的边,并根据目标点id从大到小排列,返回173个;",
        "output": "查询语句为:1: match(a:account) return a order by a.isBlock desc;2: match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id;3: match(a:company)-[e:company_apply_loan]->(b)-[e2:company_apply_loan]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a:account)-[e:account_transfer_account where e.f0 <= 737 or e.f1 = false]->(b) return e;5: match(a:person where a.name = '郑若涵')-[e:friend]->(b) return b order by e.targetId desc limit 173;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与account TheShy有关系的company, 返回和这些company有关联的loan的,weight乘810的值",
        "output": "match(a:account where a.name= 'TheShy')-[e]-(b:company)-[e2]-(c:loan) return c.weight * 810",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person周科有喜欢关系的1度以内的环",
        "output": "match(a:person where name = '周科')-[e:likes]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和reader赵红之间有likes关系的book",
        "output": "match(a:reader where a.name='赵红')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成6个查询语句:1: 找出与loan defaultName存在loan_deposit_account关系,且与account Faker存在account_transfer_account关系的account节点，返回这些account的lastLoginTime,及loan defaultName的amount,及account Faker的lastLoginTime;2: 返回id为83的点的权重;3: 计算所有贷款的金额对9437.10取余的值;4: 帮我查询类型是账号的全部点,并根据是否冻结从小到大排列;5: 找出名为defaultName的点deposit的全部account,并对这些点的createTime进行求和;6: 帮我查询和account Light有关的company,称为X,再帮我查询和这个X有关联的其他company,以及和X有关联的loan;",
        "output": "查询语句为:1: match(a:loan where a.name='defaultName')-[e:loan_deposit_account]->(b:account)<-[e2:account_transfer_account]-(c:account where c.name='Faker') return a.amount,b.lastLoginTime,c.lastLoginTime;2: match(a where a.id = '83') return a.weight;3: match(a:loan) return a.amount % 9437.10;4: match(a:account) return a order by a.isBlock asc;5: match(a where a.name='defaultName')-[e:loan_deposit_account]->(b:account) return SUM(b.createTime);6: match(a:account where a.name = 'Light')-[e]-(b:company), (b:company)-[e2]-(c:company),(b:company)-[e3]-(d:loan) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为事项,目标点label为仓库,label为仓库或用户或合并请求的边",
        "output": "match(a:issue)-[e:repository | user | pullRequest]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表150,645,879,403,546, 以属性id作为相等条件,返回account以id,value,lastLoginTime分组的name, 根据name降序排序",
        "output": "with p as (select * from (VALUES(150),(645),(879),(403),(546)) as t(id)) MATCH (a:account WHERE a.id = p.id) RETURN a.name GROUP BY a.id, a.value, a.lastLoginTime ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person周轩认识的person,以及喜欢这些person的person",
        "output": "match(a:person where name = '周轩')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关的评论，以及这些评论被其他以喜欢关系关联的person所喜爱。",
        "output": "match(a:person where a.id = '123')-[e]-(b:comment)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以917,976,929作为请求点id, 源点的id等于输入表id,查询和标签悬疑有1跳关系的person",
        "output": "with p as (select * from (VALUES(917),(976),(929)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.name = '悬疑')) -[e ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找24个id为76或年龄小于等于74的作家,根据年龄从大到小排列",
        "output": "match(a:author where a.id = 76 or a.age <= 74) return a order by a.age desc limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与名为马月和Jimmy的人知道的，且类型为person的节点。",
        "output": "match(a where a.name = '马月')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = 'Jimmy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司属于的城市,返回其源点的人数对914取余加46减7的最大值,以及目标点的id加96的值",
        "output": "match(a:company)-[e:belong]->(b:city) return MAX(a.peopleNumber % 914 + 46 - 7), b.id + 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问郑梅和李若涵是否有共同的合作伙伴？",
        "output": "match(a:person where a.name='郑梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李若涵') return b limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型为person的点有家人关系的person,以及和这些person有父母关系的person,以及和这些person有父母关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person)-[e3:parent]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与大众影院有发行关系的电影，以及与复仇者联盟有标签关联的标签，返回它们。",
        "output": "match(a:cinema where a.name = '大众影院')-[e:releases]->(b:film),(c:film where c.name = '复仇者联盟')-[e2:has]->(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,gender,height分组,计算salary的最小值减3197的值",
        "output": "return MIN(a.salary) - 3197 group by a.salary, a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为吴建聪的点的,星数不是335的朋友,返回这些朋友的星数,和边的目标点id,f1,源点id",
        "output": "match(a where a.name='吴建聪')-[e:friend]->(b where b.stars <> 335) return b.stars,e.targetId, e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是仓库的点有拥有关系的用户,并且和这些用户有喜欢关系的仓库,并且和这些仓库有拥有关系的事项",
        "output": "match(a:repository)-[e:has]->(b:user)-[e2:likes]->(c:repository)-[e3:has]->(d:issue) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是用户,名为韩建国的点,返回这些点的id,性别",
        "output": "match(a:user where a.name = '韩建国') return a.id, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算height乘184的平均值",
        "output": "return AVG(a.height * 184) group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家张梅撰写的书节点关联的书",
        "output": "match(a:author where a.name = '张梅')-[e:write]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找62个value小于等于48的department,根据size从大到小排列;2: 请帮我查找65个名为法学院的点has的类型为teacher的节点,且其id小于等于56且id大于13;3: 给出与department土木学院有关,且与course形势与政策有关系的student节点;",
        "output": "查询语句为:1: match(a:department where a.value <= 48) return a order by a.size desc limit 62;2: match(a where a.name='法学院')-[e:department_has_teacher]->(b:teacher where b.id <= 56 and b.id > 13) return b limit 65;3: match(a:department where a.name='土木学院')-[e:department_has_student]-(b:student)-[e2:student_selects_course]-(c:course where c.name='形势与政策') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询own account TheShy transfer的account,的person",
        "output": "match(a:account where name = 'TheShy')-[e:transfer]->(b:account)<-[e2:own]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取帖子的相关人员，或者这些人员的联系人",
        "output": "match(a:post)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于作家的点",
        "output": "match(a:author) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与贷款defaultName相关的，且与账号TheShy有关联的账号节点。",
        "output": "match(a:loan where a.name='defaultName')-[e:deposit]-(b:account)-[e2:transfer]-(c:account where c.name='TheShy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和部门土木学院之间有拥有关系的教师",
        "output": "match(a:department where a.name='土木学院')-[e:has]->(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减50的最小值",
        "output": "MIN(a.age - 50)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为艺术学院的部门,以及与其有关的学生,并返回艺术学院的id和这些学生的id",
        "output": "match(a:department where name = '艺术学院')-[e]-(b:student) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出读者郑思琪 喜欢的书,返回书 认识的书的id减id的个数",
        "output": "match(a:reader where name = '郑思琪')-[e:likes]->(b:book)-[e2:knows]->(c:book) return COUNT(c.id - c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询一下，哪些国家的城市包含有大学，以及这些城市分别是哪几个。",
        "output": "match(a:country where (a.id is not null))-[e:contain]->(b:city)-[e2:contain]->(c:university) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为99的reader关联的book,和以knows关系关联了这些book的其他book",
        "output": "match(a:reader where a.id = 99)-[e]-(b:book)<-[e2:knows]-(c:book) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找满足条件人数为空且名字是美团,人数为空的节点",
        "output": "match(a where (a.peopleNumber is null) and a.name = '美团' and (a.peopleNumber is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我找出马宏和陈雪的共同朋友。",
        "output": "match(a:user where a.name='马宏')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='陈雪') return b limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与一个人有恋人关系的人，以及与这些人有朋友关系的人，以及与这些人有父母关系的人。",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person)-[e3:parent]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person张国强有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '张国强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(15,'历史',285),(16,'科幻',703), 以属性name作为相等条件,查找被电影绿巨人拥有的标签",
        "output": "with p as (select * from (VALUES(15,'历史',285),(16,'科幻',703)) as t(id,name,value))MATCH (a:tag WHERE a.name = p.name) <-[e:film_has_tag ]-(b:film WHERE b.name = '绿巨人') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照'label=book'的条件筛选点，并按照'id'属性从小到大排序。",
        "output": "match(a:book) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出13个与建国大业和功夫有关的评论节点。",
        "output": "match(a where a.name='建国大业')-[e]->(b:comment)<-[e2]-(c where c.name='功夫') return b limit 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查找被部门放射科拥有的医生;2: 请帮我查找33个和标签为department的点有department_has_doctor关系的doctor,且和这些doctor有doctor_diagnose_patient关系的patient;3: 请帮我查找179个名为Prescription_316的点包含的标签等于药品的节点,且节点名字不等于阿莫新林;",
        "output": "查询语句为:1: match(a:doctor)<-[e:department_has_doctor]-(b:department where b.name='放射科') return a, b;2: match(a:department)-[e:department_has_doctor]->(b:doctor)-[e2:doctor_diagnose_patient]->(c:patient) return c limit 33;3: match(a where a.name='Prescription_316')-[e:prescription_contain_medicine]->(b:medicine where b.name <> '阿莫新林') return b limit 179;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值对value取余对19取余的值",
        "output": "AVG(a.value) % a.value % 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以345,503,221,909,266作为请求点id, 源点的id等于输入表id,找出person的三角的环,边类型是person_buy_software, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(345),(503),(221),(909),(266)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]->(b) -[e2:person_buy_software ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与部门眼科有关,且与处方Prescription_497有关系的医生节点",
        "output": "match(a:department where a.name='眼科')-[e:has]-(b:doctor)-[e2:creates]-(c:prescription where c.name='Prescription_497') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找goods的2跳以内的环",
        "output": "match(a:goods)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找软件的三角的环,边标签等于使用, 并返回这些点的id",
        "output": "match(a:software)-[e:uses]->(b)-[e2:uses]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高乘150对11取余的值",
        "output": "a.height * 150 % 11",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Bilibili公司有归属和包含关系的城市节点，并返回这些城市的面积、ID以及Bilibili公司的价值和规模。",
        "output": "match(a:company where a.name='Bilibili')-[e:belong]->(b:city)<-[e2:contain]-(c:company where c.name='Bilibili') return a.value,b.area, b.id,c.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找全部名为呐喊的点knows的book;2: 查找以关联关系关联了书罪与罚的书;3: 查找和读者郑科有reader_likes_book关系的书,以及和作家杜强有author_knows_author关系的作家,将它们都返回;4: 查找全部与吴若涵存在author_write_book关系的book,book与book存在book_refers_book关系的点,返回这些点的price;5: 给出全部与书悲惨世界有关系的读者的薪资;6: 返回前162个价格大于等于36或类别不等于小说的书;",
        "output": "查询语句为:1: match(a where a.name='呐喊')-[e:knows]->(b:book) return b;2: match(a:book where a.name='罪与罚')<-[e:relates]-(b:book) return b;3: match(a:reader where a.name = '郑科')-[e:reader_likes_book]->(b:book),(c:author where c.name = '杜强')-[e2:author_knows_author]->(d:author)return a, b, c, d;4: match(a where a.name = '吴若涵')-[e:author_write_book]->(b:book)-[e2:book_refers_book]->(c:book) return c.price;5: match(a:book where a.name='悲惨世界')-[e]-(b:reader) return b.salary;6: match(a:book where a.price >= 36 or a.category <> '小说') return a limit 162;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为188的department有关的course的friend, 再查找和course有关系的relation",
        "output": "match(a:department where id = 188)-[e]-(b:course)-[e2:friend]->(c), (b:course)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出孙红和陈国强的共同朋友，共有147人。",
        "output": "match(a:person where a.name='孙红')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈国强') return b limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person knows数量大于59的person,记为relationCount,再查询这些person relates的person",
        "output": "match(a:person) let a.relationCount = AVG((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 59)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找部门数学学院 拥有的学生,返回学生 选择的课程的id的平均值对49取余的值 ",
        "output": "match(a:department where name = '数学学院')-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return AVG(c.id) % 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与账户Faker有转移关系的账户。",
        "output": "match(a:account where a.name='Faker')<-[e:transfer]-(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为吴宏的点的,薪资在6180到9965之间且性别不等于male的朋友,返回这些朋友的年龄,和边的权重,源点id,目标点id",
        "output": "match(a where a.name='吴宏')-[e:friend]->(b where (b.salary BETWEEN 6180 AND 9965) and b.gender <> 'male') return b.age,e.weight, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询美团所在城市",
        "output": "match(a:city)<-[e:belong]-(b:company where b.name='美团') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有编辑的age的个数乘14的值",
        "output": "match(a:publisher) return COUNT(a.age) * 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person张思琪有关,且与软件Hadoop有关系的软件节点",
        "output": "match(a:person where a.name='张思琪')-[e:commits]-(b:software)-[e2:uses]-(c:software where c.name='Hadoop') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 给出71个与历史和科幻都存在关系的标签节点;2: 找出标签等于用户的点,并根据id升序排列;3: 返回帖子以字数,名字,价值分组的id, 根据id从小到大排序;4: 请帮我找出所有源点标签为post,边标签为post_has_tag,并且targetId为空或targetId不等于86的边;5: 请帮我找出以包含关系关联了帖子Post_403的论坛;6: 请帮我找出id为120的点的value,name;7: 找出类型是post的所有点,并根据value从小到大排列;8: 找出标签为forum_contain_person,且f1不等于false且targetId小于196的边;",
        "output": "查询语句为:1: match(a where a.name='历史')-[e]->(b:tag)<-[e2]-(c where c.name='科幻') return b limit 71;2: match(a:user) return a order by a.id asc;3: match(a:post) return a.id group by a.wordCount, a.name, a.value order by a.id asc;4: match(a:post)-[e:post_has_tag where (e.targetId is null) or e.targetId <> 86]->(b) return e;5: match(a:post where a.name='Post_403')<-[e:forum_contain_post]-(b:forum) return b;6: match(a where a.id = '120') return a.value, a.name;7: match(a:post) return a order by a.value asc;8: match(a)-[e:forum_contain_person where e.f1 <> false and e.targetId < 196]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型为药品,名为医疗酒精的点,返回这些点的名字,id,类别",
        "output": "match(a:medicine where a.name = '医疗酒精') return a.name, a.id, a.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person喜欢数量大于24的person,记为relationCount,再查询这些person喜欢的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:likes]-(b:person) => b.id) match(a where a.relationCount > 24)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找张建国医生开具的处方 Prescription_204 对应的患者节点。",
        "output": "match(a:doctor where a.name='张建国')-[e:diagnose]-(b:patient)-[e2:accept]-(c:prescription where c.name='Prescription_204') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边标签等于likes, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和department点有has关系的teacher节点,且边满足条件srcId大于等于198.46,目标teacher节点满足条件id是27",
        "output": "match(a:department)-[e:has where e.srcId >= 198.46]->(b:teacher where b.id = 27) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为23的tag有关的person的partner, 再查找和person有关系的relation",
        "output": "match(a:tag where id = 23)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person马梅有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '马梅')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与买家韩国强有查看关系的商品和与买家赵伟有创造关系的订单。",
        "output": "match(a:buyer where a.name = '韩国强')-[e:look]->(b:goods),(c:buyer where c.name = '赵伟')-[e2:creates]->(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询韩红支付的人，并返回其性别",
        "output": "match(a:person where name = '韩红')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为cancel,且满足条件targetId在111到198之间,timeStamp不等于2003年05月12日,或srcId小于57的边",
        "output": "match(a)-[e:cancel where ((e.targetId BETWEEN 111 AND 198) and e.timeStamp <> '2003-05-12') or e.srcId < 57]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和学生马月有关系的部门,返回这些点的名字,年龄",
        "output": "match(a:student where a.name='马月')-[e]-(b:department) return b.name, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找所有源点类型为病人,边类型为patient_accept_prescription的边,返回这些边的目标点id减目标点id的最小值,和权重减124.67的值;2: 计算所有department的id减id除575的值;3: 请帮我查找doctor以age,name,id分组的id, 根据id降序排序;4: 找出全部名为孙轩的,地址不等于A座的伙伴,返回这些伙伴的名字,和边的目标点id,权重,源点id;5: 返回所有和doctor王轩有关系的prescription节点,返回这些点的createTime;6: 查询与名为孙思思和黄雪的点共同creates的,类型为prescription的节点;7: 查找从department传染部出发,经过类型是department_has_doctor的边,走1到4度到达的doctor点;",
        "output": "查询语句为:1: match(a:patient)-[e:patient_accept_prescription]->(b) return MIN(e.targetId - e.targetId), e.weight - 124.67;2: match(a:department) return (a.id - a.id) / 575;3: match(a:doctor) return a.id group by a.age, a.name, a.id order by a.id desc;4: match(a where a.name='孙轩')-[e:partner]->(b where b.address <> 'A座') return b.name,e.targetId, e.weight, e.srcId;5: match(a:doctor where a.name='王轩')-[e]-(b:prescription) return b.createTime;6: match(a where a.name = '孙思思')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:doctor_creates_prescription]-(c where c.name = '黄雪') return b;7: match(a:department where a.name='传染部')-[e:department_has_doctor]->{1,4}(b:doctor) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取身高在155到174之间且薪资不为空的person的名称。",
        "output": "match(a:person where (a.height BETWEEN 155 AND 174) and (a.salary is not null))-[e:relates]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘17的求和值",
        "output": "SUM(a.id * 17)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找论坛CSDN 包含的帖子,返回帖子 拥有的标签的id除7的最小值",
        "output": "match(a:forum where name = 'CSDN')-[e:contain]->(b:post)-[e2:has]->(c:tag) return MIN(c.id / 7)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和city巴黎有belong关系的country,再请帮我找出以belong关系关联了巴黎的country",
        "output": "match(a:city where a.name = '巴黎')-[e:belong]->(b:country),(a:city where a.name = '巴黎')<-[e2:belong]-(c:country)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回age从小到大的3个非男性person。",
        "output": "match(a:person where a.gender <> 'male') return a order by a.age asc limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找周建聪和周宏这两位用户，他们是否有共同的合作伙伴？",
        "output": "match(a:user where a.name='周建聪')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='周宏') return b limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(191,83,'male')作为请求表数据,属性分别为height,age,gender, 源点的age等于输入表age,查询和person有关联的公司节点,并根据其价值,名字,规格分组,返回价值,名字,规格,以及value的最小值加512的值",
        "output": "with p as (select * from (VALUES(191,83,'male')) as t(height,age,gender))MATCH (a:person WHERE a.age = p.age) -[e:person_belong_company ]-(b:company) RETURN b.value, b.name, b.scale, MIN(b.value) + 512 GROUP BY b.value, b.name, b.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询李若涵认识的人中，被其他人喜欢的数量",
        "output": "match(a:person where a.name='李若涵')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和author郑雪有knows关系的author,再查询以write关系关联了郑雪的book",
        "output": "match(a:author where a.name = '郑雪')-[e:knows]->(b:author),(a:author where a.name = '郑雪')<-[e2:write]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为40的买家咨询的卖家, 并将卖家有关的订单的名字的和赋值给卖家的薪资, 接着查询卖家的薪资小于40的卖家回答的买家",
        "output": "match(a:buyer where a.id = 40)-[e:consult]->(b:seller) let b.salary = SUM((b:seller)-[e2]-(c:orders) => c.name) match(b:seller where b.salary < 40)-[e3:ask]->(d:buyer) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找城市包含的公司, 令公司的价值的值等于包含公司的城市的人数的最小值, 再查找公司属于的城市",
        "output": "match(a:city)-[e:contain]->(b:company) let b.value = MIN((b:company)<-[e2:contain]-(c:city) => c.peopleNumber) match(b:company)-[e3:belong]->(d:city) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为XiaoHu的账户有关联，或者与该账户关联的人有关联的所有贷款。",
        "output": "match(a:account where n.name=XiaoHu)-[e:relation]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到何思思和陈月的共同父母。",
        "output": "match(a:person where a.name='何思思')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='陈月') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为person的点,返回127个",
        "output": "match(a:person) return a limit 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询作家的3度的环",
        "output": "match(a:author)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出部门的1跳以内的环",
        "output": "match(a:department)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,srcId,f1, 数据为(169.56,104,true), 以属性weight作为相等条件,返回与city深圳有city_contain_university关系的3跳的环",
        "output": "with p as (select * from (VALUES(169.56,104,true)) as t(weight,srcId,f1))MATCH (a:city WHERE a.weight = p.weight AND (name = '深圳')) -[e:city_contain_university ]->{2,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有张月知道的人，然后查询张月被喜欢的人，将两者的结果一起返回。",
        "output": "match(a where a.name = '张月')-[e:knows]->(b:person),(a where a.name = '张月')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找和国家有关联的城市节点,并根据其价值,人数,名字分组,返回价值,人数,名字,以及价值除673的个数;2: 返回所有源点label为城市,目标点label为国家,label为city_belong_country的边;3: 找出城市纽约的全部类型是朋友的边,并根据目标点id降序排列,返回153个;",
        "output": "查询语句为:1: match(a:country)-[e:country_contain_city]-(b:city) return b.value, b.peopleNumber, b.name, COUNT(b.value / 673) group by b.value, b.peopleNumber, b.name;2: match(a:city)-[e:city_belong_country]->(b:country) return e;3: match(a:city where a.name = '纽约')-[e:friend]->(b) return b order by e.targetId desc limit 153;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(37,'三体',98),(9,'java程序设计',94),(90,'罪与罚',24),(92,'三体',71)作为请求表数据,属性分别为id,name,id, 以属性id作为相等条件,返回标签为书的所有点,并根据id从大到小排列",
        "output": "with p as (select * from (VALUES(37,'三体',98),(9,'java程序设计',94),(90,'罪与罚',24),(92,'三体',71)) as t(id,name,id))MATCH (a:book WHERE a.id = p.id) RETURN a ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person赵建聪喜欢的person,被其他person认识的数量",
        "output": "match(a:person where a.name='赵建聪')-[e:person_likes_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出孙思琪和韩科共同喜欢的人的节点，类型是person。",
        "output": "match(a where a.name = '孙思琪')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '韩科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点name不等于杜梅且height除height为27,或height小于195,边类型为pay,且f0不为空或f0大于679的边,返回这些边的srcId减133的值",
        "output": "match(a where (a.name <> '杜梅' and a.height / a.height = 27) or a.height < 195)-[e:pay where (e.f0 is not null) or e.f0 > 679]->(b) return e.srcId - 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为杜雪的节点咨询的卖家或买家或商品",
        "output": "match(a where a.name='杜雪')-[e:consult]->(b:seller | buyer | goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person关联的person,返回其源点的年龄乘12的平均值,以及目标点的id对id取余的和",
        "output": "match(a:person)-[e:relates]->(b:person) return AVG(a.age * 12), SUM(b.id % b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有合并请求的id乘65的值",
        "output": "match(a:pullRequest) return a.id * 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有起点是部门，终点是医生，且带有拥有标签的边。",
        "output": "match(a:department)-[e:has]->(b:doctor) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询174个city武汉和重庆,共同的friend",
        "output": "match(a:city where a.name='武汉')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='重庆') return b limit 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有标签为'teacher'且标签为'teach'的边，并返回这些边的目标节点ID乘目标节点ID的值和f0乘668的值。",
        "output": "match(a:teacher)-[e:teach]->(b) return e.targetId * e.targetId, e.f0 * 668",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有编辑类型的源点和发布类型的边，然后计算这些边的权重乘以196.42的数量以及目标点ID乘以29的最小值。",
        "output": "match(a:publisher)-[e:publish]->(b) return COUNT(e.weight * 196.42), MIN(e.targetId * 29)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出16个与Comment_408和Comment_294都存在关系的person节点",
        "output": "match(a where a.name='Comment_408')-[e]->(b:person)<-[e2]-(c where c.name='Comment_294') return b limit 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您需要查询哪个用户，并按名字升序排列标签？",
        "output": "match(a:user) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Order_346的订单,以及与其有关的商品,并返回Order_346的id和这些商品的价格",
        "output": "match(a:orders where name = 'Order_346')-[e]-(b:goods) return a.id, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点名字不是周雪,年龄在15到33之间,目标点年龄小于30,年龄小于3,且类型是家人的边",
        "output": "match(a where a.name <> '周雪' and (a.age BETWEEN 15 AND 33))-[e:family]->(b where b.age < 30 and b.age < 3) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与类型为person的物品有关注（likes)的评论，并且这些评论属于某个属于（belong)电影的类别，并且这些电影包含标签（has)",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 帮我查询id为159的点的value,name;2: 查找和buyer有关联的orders节点,并根据其name,id分组,返回name,id,以及id加92乘925.93的值;3: 找出和seller有关联的goods节点,并根据其sellerNumber,price分组,返回sellerNumber,price,以及sellerNumber乘645.82的值;4: 给出所有label为商品的点;",
        "output": "查询语句为:1: match(a where a.id = '159') return a.value, a.name;2: match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.name, b.id, (b.id + 92) * 925.93 group by b.name, b.id;3: match(a:seller)-[e:seller_has_goods]-(b:goods) return b.sellerNumber, b.price, b.sellerNumber * 645.82 group by b.sellerNumber, b.price;4: match(a:goods) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'kY'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('kY') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有类型是person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找账号转账的账号,返回其源点的id除60的求和值,以及目标点的id乘14的值",
        "output": "match(a:account)-[e:transfer]->(b:account) return SUM(a.id / 60), b.id * 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 在大众电影院观看电影的人数",
        "output": "match(a:cinema where a.name='大众影院')-[e:releases]->(b:film)<-[e2:watch]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查询所有源点满足条件name不是Hive且value等于962,目标点满足条件id不为空,且类型是software_uses_software的边;2: 查询被person吴梅knows的person;3: 请帮我找出id为19的软件有关的person的相关者, 再请帮我找出和person有关系的伙伴;4: 返回和person孙梅有person_knows_person关系的person,再返回以person_knows_person关系关联了孙梅的person;5: 给出51个性别等于male且薪资对4234取余等于160的person,根据身高从小到大排列;6: 查询标签为software的全部点,并根据value从大到小排列;7: 帮我查询id为84的点的规格;8: 请帮我找出名为郑强的person;9: 请帮我找出以购买关系关联了软件Calcite的person;",
        "output": "查询语句为:1: match(a where a.name <> 'Hive' and a.value = 962)-[e:software_uses_software]->(b where (b.id is not null)) return e;2: match(a:person)<-[e:person_knows_person]-(b:person where b.name='吴梅') return a, b;3: match(a:software where id = '19')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d;4: match(a:person where a.name = '孙梅')-[e:person_knows_person]->(b:person),(a:person where a.name = '孙梅')<-[e2:person_knows_person]-(c:person)return a, b, c;5: match(a:person where a.gender = 'male' and a.salary % 4234 = 160) return a order by a.height asc limit 51;6: match(a:software) return a order by a.value desc;7: match(a where a.id = '84') return a.scale;8: match(a:person where a.name = '郑强') return a;9: match(a:software where a.name='Calcite')<-[e:person_buy_software]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询和电影复仇者联盟有关系的person节点,返回这些点的薪资;2: 返回从comment Comment_304出发,经过类型是comment_belong_film的边,走2到4跳到达的film点;3: 请帮我找出全部和person徐建国有关系的comment节点,返回这些点的id;",
        "output": "查询语句为:1: match(a:film where a.name='复仇者联盟')-[e]-(b:person) return b.salary;2: match(a:comment where a.name='Comment_304')-[e:comment_belong_film]->{2,4}(b:film) return b;3: match(a:person where a.name='徐建国')-[e]-(b:comment) return b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高加159的最小值",
        "output": "MIN(a.height + 159)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找和部门有关联的学生节点,并根据其性别,名字分组,返回性别,名字,以及身高加183的值",
        "output": "match(a:department)-[e:department_has_student]-(b:student) return b.gender, b.name, b.height + 183 group by b.gender, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出所有comment以createTime,name分组的name, 根据name降序排序",
        "output": "match(a:comment) return a.name group by a.createTime, a.name order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从何宏出发，经过同事标签的边，跳2次或3次到达的点。",
        "output": "match(a:person where a.name='何宏')-[e:colleague]->{2,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与名为知乎和天涯论坛的点共同包含的,label为帖子的节点",
        "output": "match(a where a.name = '知乎')-[e:contain]->(b:post)<-[e2:contain]-(c where c.name = '天涯论坛') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找58个电影院好视影院和UME,共同的伙伴",
        "output": "match(a:cinema where a.name='好视影院')-[e:partner]->(b)<-[e2:partner]-(c:cinema where c.name='UME') return b limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表171,834,317,803, 以属性id作为相等条件,请帮我找出源点标签为公司,边标签为company_belong_city,且f1为true或f0为空或权重为空的边",
        "output": "with p as (select * from (VALUES(171),(834),(317),(803)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_belong_city WHERE e.f1 = TRUE OR e.f0 IS NULL OR e.weight IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与我所在的部门有联系的医生，以及那些与这些医生有关联的其他部门。",
        "output": "match(a:department where a.id = '173')-[e]-(b:doctor)<-[e2:has]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为谷歌的点雇佣的所有person,并对这些person的性别进行求和",
        "output": "match(a where a.name='谷歌')-[e:employee]->(b:person) return SUM(b.gender)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,height, 数据为(30,2909,178),(65,6601,161),(45,9532,165)的子查询作为输入表, 以属性salary作为相等条件,给出102个price在15到23之间的medicine,根据price从大到小排列",
        "output": "with p as (select * from (VALUES(30,2909,178),(65,6601,161),(45,9532,165)) as t(id,salary,height))MATCH (a:medicine WHERE a.salary = p.salary AND a.price BETWEEN ASYMMETRIC 15 AND 23) RETURN a ORDER BY a.price DESC LIMIT 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对2取余的值",
        "output": "a.id % 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以635,64,881作为请求点id, 以属性id作为相等条件,返回seller杜思琪的所有friend,的targetId乘80乘593的值",
        "output": "with p as (select * from (VALUES(635),(64),(881)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (a.name = '杜思琪')) -[e:friend ]->(b) RETURN e.targetId * 80 * 593 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与Post_487有关联的tag，以及由用户周宏发布的所有post。",
        "output": "match(a:post where a.name = 'Post_487')-[e:has]->(b:tag),(c:user where c.name = '周宏')-[e2:publish]->(d:post) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为61的film关联的comment,和以likes关系关联了这些comment的其他person",
        "output": "match(a:film where a.id = 61)-[e]-(b:comment)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查询11个id不等于64或id小于等于4或level除4小于等于48的university,根据value升序排列;2: 帮我查询以属于关系关联了城市武汉的公司;3: 找出university复旦大学belong的city,被其他country contain的数量;4: 返回以belong关系关联了city广州的university;5: 给出id为196的company有关的company的partner, 再给出和company有关系的partner;6: 请帮我找出所有和国家韩国有3跳或4跳关系的城市;",
        "output": "查询语句为:1: match(a:university where a.id <> 64 or a.id <= 4 or a.level / 4 <= 48) return a order by a.value asc limit 11;2: match(a:city where a.name='武汉')<-[e:company_belong_city]-(b:company) return b;3: match(a:university where a.name='复旦大学')-[e:university_belong_city]->(b:city)<-[e2:country_contain_city]-(c:country) return COUNT(c);4: match(a:city where a.name='广州')<-[e:university_belong_city]-(b:university) return b;5: match(a:company where id = '196')-[e]-(b:company)-[e2:partner]->(c), (b:company)-[e3:partner]->(d) return a, b, c, d;6: match(a:country where a.name='韩国')-[e]->{3,4}(b:city) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为黄红的节点write的book或reader",
        "output": "match(a where a.name='黄红')-[e:write]->(b:book | reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从合并请求PR-286出发,经过类型是属于的边,走3到6跳到达的仓库点",
        "output": "match(a:pullRequest where a.name='PR-286')-[e:belong]->{3,6}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为张梅和陈科的点共同申请的,label为贷款的节点",
        "output": "match(a where a.name = '张梅')-[e:apply]->(b:loan)<-[e2:apply]-(c where c.name = '陈科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被大学电子科技大学合作的公司",
        "output": "match(a:company)<-[e:cooperate]-(b:university where b.name='电子科技大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我查找与大学重庆大学和浙江大学都存在university_cooperate_company关系的点;2: 查找全部源点满足条件id不是63,value大于567,目标点满足条件value为空且id加id的个数不是528,且标签为city_contain_university的边;3: 查找被university浙江大学cooperate的company;4: 请帮我查找标签为country的全部点,并根据name从小到大排列;5: 返回company的2度以内的环;6: 请帮我找出被大学北京大学合作的公司;",
        "output": "查询语句为:1: match(a:university where a.name='重庆大学')-[e:university_cooperate_company]->(b)<-[e2:university_cooperate_company]-(c:university where c.name='浙江大学') return b;2: match(a where a.id <> 63 and a.value > 567)-[e:city_contain_university]->(b where (b.value is null) and COUNT(b.id + b.id) <> 528) return e;3: match(a:company)<-[e:university_cooperate_company]-(b:university where b.name='浙江大学') return a, b;4: match(a:country) return a order by a.name asc;5: match(a:company)->{0,1}(b)->(a) return a.id, b.id as b_id;6: match(a:company)<-[e:university_cooperate_company]-(b:university where b.name='北京大学') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 查询与user有关系的post节点,且post节点的createTime等于2014年12月04日,并返回这些点的wordCount对444取余的求和值,以及wordCount的最大值加55的个数;2: 返回全部和名为中国军事论坛的论坛有朋友关系,或有朋友的朋友关系的帖子;3: 给出所有和tag动作有2度关系的post;",
        "output": "查询语句为:1: match(a:user)-[e]->(b:post where b.createTime = '2014-12-04') return SUM(b.wordCount % 444), COUNT(MAX(b.wordCount) + 55);2: match(a:forum where n.name=中国军事论坛)-[e:friend]->{1,2}(b:post) return b;3: match(a:tag where a.name='动作')-[e]->{2,2}(b:post) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出公司源点且边类型为创造的边，并返回这些边中源点ID乘186和目标点ID加65的最大值。",
        "output": "match(a:company)-[e:creates]->(b) return e.srcId * 186, MAX(e.targetId + 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person徐宏有关系的person的名字",
        "output": "match(a:person where a.name='徐宏')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出教师或相关者的相关者。",
        "output": "match(a:teacher)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与买家何思琪和杜思琪都存在咨询关系的点",
        "output": "match(a:buyer where a.name='何思琪')-[e:consult]->(b)<-[e2:consult]-(c:buyer where c.name='杜思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找帖子Post_259拥有的标签,被其他帖子拥有的数量",
        "output": "match(a:post where a.name='Post_259')-[e:has]->(b:tag)<-[e2:has]-(c:post) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 帮我查询和person有关联的账号节点,并根据其价值,上次登录时间分组,返回价值,上次登录时间,以及id的数量减87乘价值的值;2: 找出名为徐强和郑雪的,标签等于person的点公共的partner节点的名单;3: 查询和贷款defaultName有关系的账号节点,返回这些点的价值,名字,上次登录时间;4: 返回公司Bilibili的所有类型是相关者的边,并根据f0从大到小排列,返回120个;5: 帮我查询与person陈雪有关系的账号, 返回和这些账号有关联的person的,id加85的值;6: 查询所有loan的friend,或其friend的friend;7: 请帮我找出81个名为周月的点申请的标签等于贷款的节点,且节点权重不为空或权重在429到481之间;8: 返回贷款存款的账号,返回其源点的权重加906对1141.78取余的和,以及目标点的id的最小值减9的值;9: 给出账号Geaflow123转账的账号,被其他贷款存款的数量;",
        "output": "查询语句为:1: match(a:person)-[e:person_own_account]-(b:account) return b.value, b.lastLoginTime, (COUNT(b.id) - 87) * b.value group by b.value, b.lastLoginTime;2: match(a:person where a.name='徐强')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='郑雪') return b.name;3: match(a:loan where a.name='defaultName')-[e]-(b:account) return b.value, b.name, b.lastLoginTime;4: match(a:company where a.name = 'Bilibili')-[e:relation]->(b) return b order by e.f0 desc limit 120;5: match(a:person where a.name= '陈雪')-[e]-(b:account)-[e2]-(c:person) return c.id + 85;6: match(a:loan)-[e:friend]->{1,2}(b) return b;7: match(a where a.name='周月')-[e:person_apply_loan]->(b:loan where (b.weight is not null) or (b.weight BETWEEN 429 AND 481)) return b limit 81;8: match(a:loan)-[e:loan_deposit_account]->(b:account) return SUM(a.weight + 906 % 1141.78), MIN(b.id) - 9;9: match(a:account where a.name='Geaflow123')-[e:account_transfer_account]->(b:account)<-[e2:loan_deposit_account]-(c:loan) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为loan_75的点存款的账号",
        "output": "match(a where a.name='loan_75')-[e:deposit]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找张建国和杜建聪共同认识的人。",
        "output": "match(a:person where a.name='张建国')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='杜建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我找出和person孙宏有关的person,再请帮我找出和孙宏person_likes_person的其他person,返回它们;2: 给出从person孙科出发,经过类型为person_pay_person的边,走3到6跳到达的person点;3: 查询与person张强有person_likes_person关系的3度的环;4: 找出与person李思思和孙建聪都存在person_knows_person关系的点;5: 返回person以salary分组的gender, 根据gender降序排序;6: 返回所有person以薪资,身高分组的id, 根据id降序排序;",
        "output": "查询语句为:1: match(a:person where a.name = '孙宏')-[e]-(b:person), (a:person)-[e2:person_likes_person]->(c:person) return a, b, c;2: match(a:person where a.name='孙科')-[e:person_pay_person]->{3,6}(b:person) return b;3: match(a:person where name = '张强')-[e:person_likes_person]->{2,2}(b)->(a) return a.id, b.id as b_id;4: match(a:person where a.name='李思思')-[e:person_knows_person]->(b)<-[e2:person_knows_person]-(c:person where c.name='孙建聪') return b;5: match(a:person) return a.gender group by a.salary order by a.gender desc;6: match(a:person) return a.id group by a.salary, a.height order by a.id desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为周若涵和马宏的,label为person的点公共的friend节点的名单",
        "output": "match(a:person where a.name='周若涵')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='马宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person徐红knows的person,以及knows这些person的person",
        "output": "match(a:person where name = '徐红')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查找79个与呐喊和java程序设计都存在关系的读者节点;2: 查询所有reader以id,height分组的age, 根据age从小到大排序;3: 查询源点类型是作家,边类型是author_write_book的边,返回这些边的f0的个数加990的值,和targetId的个数加146乘11的值;4: 给出和作家有关联的作家节点,并根据其性别分组,返回性别,以及id乘38乘8794的最大值;5: 给出id为150的publisher有关的book的refers, 再给出和book有关系的refers;6: 请帮我找出与名为郑强和王雪的点共同likes的,标签等于book的节点;7: 返回和book呐喊之间有book_refers_book关系的book;8: 查找类型是author的所有点,并根据gender降序排列;",
        "output": "查询语句为:1: match(a where a.name='呐喊')-[e]->(b:reader)<-[e2]-(c where c.name='java程序设计') return b limit 79;2: match(a:reader) return a.age group by a.id, a.height order by a.age asc;3: match(a:author)-[e:author_write_book]->(b) return COUNT(e.f0) + 990, (COUNT(e.targetId) + 146) * 11;4: match(a:author)-[e:author_knows_author]-(b:author) return b.gender, MAX(b.id * 38 * 8794) group by b.gender;5: match(a:publisher where id = '150')-[e]-(b:book)-[e2:book_refers_book]->(c), (b:book)-[e3:book_refers_book]->(d) return a, b, c, d;6: match(a where a.name = '郑强')-[e:reader_likes_book]->(b:book)<-[e2:reader_likes_book]-(c where c.name = '王雪') return b;7: match(a:book where a.name='呐喊')-[e:book_refers_book]->(b:book) return b;8: match(a:author) return a order by a.gender desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person有关系的person节点,且person节点的height为空,并返回这些person的height除180的个数,以及person的age除age的值",
        "output": "match(a:person)-[e]->(b:person where (b.height is null)) return COUNT(b.height / 180), b.age / b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照名字分组返回所有读者的身高，并按照身高从大到小排序。",
        "output": "match(a:reader) return a.height group by a.name order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询82个名为李雪的点喜欢的标签等于帖子的节点,且节点创建时间不是2023年03月05日且语言不是French",
        "output": "match(a where a.name='李雪')-[e:likes]->(b:post where b.createTime <> '2023-03-05' and b.lang <> 'French') return b limit 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出contain city纽约contain的company,的city",
        "output": "match(a:city where name = '纽约')-[e:contain]->(b:company)<-[e2:contain]-(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询包含'中国军事论坛'的帖子，并返回与'中国军事论坛'标签相关的标签值。",
        "output": "match(a where a.name = '中国军事论坛')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,id, 数据为(9424,150,5),(6176,163,81), 源点的id等于输入表id,查找person黄宏的所有标签等于伙伴的边,并根据f1升序排列,返回19个",
        "output": "with p as (select * from (VALUES(9424,150,5),(6176,163,81)) as t(salary,height,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '黄宏')) -[e:partner ]->(b) RETURN b ORDER BY e.f1 LIMIT 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,age,id, 数据为(7372,68,60),(2939,63,77),(3686,25,9),(1706,85,43), 以属性id作为相等条件,查找salary的数量大于等于156或salary小于8835的buyer cancel的orders的名称,以及这些orders contain的goods的名称",
        "output": "with p as (select * from (VALUES(7372,68,60),(2939,63,77),(3686,25,9),(1706,85,43)) as t(salary,age,id))MATCH (a:buyer WHERE a.id = p.id AND (COUNT(a.salary) >= 156 OR a.salary < 8835)) -[e:buyer_cancel_orders ]->(b:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回company creates的software,返回其源点的id乘75的值,以及目标点的id乘28除529乘116的值;2: 帮我查询全部公司以名字分组的名字, 根据名字从大到小排序;3: 请帮我查找id为8的company有关的software的friend, 再请帮我查找和software有关系的friend;4: 找出和软件SprintBoot有software_uses_software关系的软件,以及和person张红有person_buy_software关系的软件,将它们都返回;5: 查询全部与字节存在company_employee_person关系的person,person与software存在person_buy_software关系的点,返回这些点的openSource;6: 找出全部与person有关系的软件节点,且软件节点的价值不为空,并返回这些点的id除39的数量,以及id减39的最大值;7: 请帮我查找与名为Zookeeper和Spark的点共同使用的,label为软件的节点;8: 帮我查询company谷歌的全部friend,的f0乘f0的求和值;",
        "output": "查询语句为:1: match(a:company)-[e:company_creates_software]->(b:software) return a.id * 75, b.id * 28 / 529 * 116;2: match(a:company) return a.name group by a.name order by a.name desc;3: match(a:company where id = '8')-[e]-(b:software)-[e2:friend]->(c), (b:software)-[e3:friend]->(d) return a, b, c, d;4: match(a:software where a.name = 'SprintBoot')-[e:software_uses_software]->(b:software),(c:person where c.name = '张红')-[e2:person_buy_software]->(d:software)return a, b, c, d;5: match(a where a.name = '字节')-[e:company_employee_person]->(b:person)-[e2:person_buy_software]->(c:software) return c.openSource;6: match(a:person)-[e]->(b:software where (b.value is not null)) return COUNT(b.id / 39), MAX(b.id - 39);7: match(a where a.name = 'Zookeeper')-[e:software_uses_software]->(b:software)<-[e2:software_uses_software]-(c where c.name = 'Spark') return b;8: match(a:company where a.name= '谷歌')-[e:friend]->(b) return SUM(e.f0 * e.f0);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找name不等于电子科技大学的university has的department的名称,以及这些department has的teacher的名称",
        "output": "match(a:university where a.name <> '电子科技大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与Tom存在撰写关系的书,书与书存在引用关系的点,返回这些点的名字",
        "output": "match(a where a.name = 'Tom')-[e:write]->(b:book)-[e2:refers]->(c:book) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家查看的商品,返回其源点的身高加身高减84的最小值,以及目标点的价格加4301.78除571的值",
        "output": "match(a:buyer)-[e:look]->(b:goods) return MIN(a.height + a.height - 84), (b.price + 4301.78) / 571",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与作家赵强有关系的作家的名字",
        "output": "match(a:author where a.name='赵强')-[e]-(b:author) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以184,634,587,465,36作为请求点id, 源点的id等于输入表id,给出城市深圳的所有类型为朋友的边,并根据f1升序排列,返回195个",
        "output": "with p as (select * from (VALUES(184),(634),(587),(465),(36)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '深圳')) -[e:friend ]->(b) RETURN b ORDER BY e.f1 LIMIT 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id小于785的department has的doctor的名称,以及这些doctor creates的prescription的名称",
        "output": "match(a:department where a.id < 785)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与推特存在包含关系的用户,用户与帖子存在发布关系的点,返回这些点的id",
        "output": "match(a where a.name = '推特')-[e:contain]->(b:user)-[e2:publish]->(c:post) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回44个和label为company的点有apply关系的loan,且和这些loan有deposit关系的account",
        "output": "match(a:company)-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与标签有关系的电影节点,且电影节点的价值小于等于96,并返回这些电影的价值除963的值,以及电影的value的平均值减443的和",
        "output": "match(a:tag)-[e]->(b:film where b.value <= 96) return b.value / 963, SUM(AVG(b.value) - 443)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出和大学华中科技大学之间有university_belong_city关系的城市;2: 帮我查询与大学电子科技大学有关系的国家, 返回和这些国家有关联的国家的,人数加59340的求和值;3: 查找城市的三角的环,边类型是city_contain_university, 并返回这些点的id;4: 给出和公司蚂蚁集团有company_cooperate_university关系的大学,再给出以company_belong_city关系关联了蚂蚁集团的城市;5: 帮我查询和country点有contain关系的city节点,且边满足条件f1不是true,目标city节点value在294到334之间;6: 帮我查询全部类型是city的点;",
        "output": "查询语句为:1: match(a:university where a.name='华中科技大学')-[e:university_belong_city]->(b:city) return b;2: match(a:university where a.name= '电子科技大学')-[e]-(b:country)-[e2]-(c:country) return SUM(c.peopleNumber + 59340);3: match(a:city)-[e:city_contain_university]->(b)-[e2:city_contain_university]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a:company where a.name = '蚂蚁集团')-[e:company_cooperate_university]->(b:university),(a:company where a.name = '蚂蚁集团')<-[e2:company_belong_city]-(c:city)return a, b, c;5: match(a:country)-[e:country_contain_city where e.f1 <> true]->(b:city where (b.value BETWEEN 294 AND 334)) return b;6: match(a:city) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出部门拥有的学生,返回其源点的大小除56的数量,以及目标点的id加60加身高的值",
        "output": "match(a:department)-[e:has]->(b:student) return COUNT(a.size / 56), b.id + 60 + b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与病人相关的处方节点，并按其权重、ID、创建时间分组，返回每个节点的权重、ID和创建时间。",
        "output": "match(a:patient)-[e:accept]-(b:prescription) return b.weight, b.id, b.createTime group by b.weight, b.id, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被department艺术学院has的student,和艺术学院has的teacher",
        "output": "match(a:student)<-[e:has]-(b:department where name = '艺术学院')-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照升序排序，给定每个company的id、名称和价值，以id,name,value分组。",
        "output": "match(a:company) return a.scale group by a.id, a.name, a.value order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,name,id, 数据为(544,'经管学院',12), 以属性id作为相等条件,给出188个id的最大值大于等于3669且gender不是famale的student,根据name从大到小排列",
        "output": "with p as (select * from (VALUES(544,'经管学院',12)) as t(value,name,id))MATCH (a:student WHERE a.id = p.id AND (MAX(a.id) >= 3669 AND a.gender <> 'famale')) RETURN a ORDER BY a.name DESC LIMIT 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被seller李思思has的goods",
        "output": "match(a:goods)<-[e:has]-(b:seller where b.name='李思思') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询陈建聪写的书，以及知道他作为作者的姓名，返回两者。",
        "output": "match(a where a.name = '陈建聪')-[e:write]->(b:book),(a where a.name = '陈建聪')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为27的标签有关的评论的伙伴, 再请帮我查找和评论有关系的朋友",
        "output": "match(a:tag where id = 27)-[e]-(b:comment)-[e2:partner]->(c), (b:comment)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为陈轩和周强的点共同撰写的,标签为书的节点",
        "output": "match(a where a.name = '陈轩')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '周强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为Prescription_135的处方,以及与其有关的处方,并返回Prescription_135的id和这些处方的id",
        "output": "match(a:prescription where name = 'Prescription_135')-[e]-(b:prescription) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找事项ISSUE-315属于的仓库,以及属于这些仓库的合并请求, 令事项的语言等于仓库的星数的个数,令合并请求的语言等于仓库的id,令合并请求的变更文件数等于合并请求的变更文件数对44取余乘384, 返回事项的id,仓库的语言,合并请求的创建时间",
        "output": "match(a:issue where name = 'ISSUE-315')-[e:belong]->(b:repository)<-[e2:belong]-(c:pullRequest) let a.lang = COUNT(b.stars),let c.lang = b.id,let c.changeFileNumber = c.changeFileNumber % 44 * 384 return a.id,b.lang,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person支付的person,返回其源点的年龄加11的平均值,以及目标点的薪资加9639的值",
        "output": "match(a:person)-[e:pay]->(b:person) return AVG(a.age + 11), b.salary + 9639",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和country韩国之间有contain关系的city",
        "output": "match(a:country where a.name='韩国')-[e:contain]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出账号Faker转账的账号,以及存款这些账号的贷款, 令账号(a)的创建时间等于账号(b)的价值加176, 返回账号(a)的创建时间,账号(b)的价值,贷款(c)的权重",
        "output": "match(a:account where name = 'Faker')-[e:transfer]->(b:account)<-[e2:deposit]-(c:loan) let a.createTime = b.value + 176 return a.createTime,b.value,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出cancel orders Order_494的buyer,和这些buyer creates的orders",
        "output": "match(a:orders where name = 'Order_494')<-[e:cancel]-(b:buyer)-[e2:creates]->(c:orders) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和名为陈建国的user有friend关系,或有friend的friend关系的repository",
        "output": "match(a:user where n.name=陈建国)-[e:friend]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person创造的评论,返回其源点的id对21取余减4498的值,以及目标点的id的个数对43取余的最小值",
        "output": "match(a:person)-[e:creates]->(b:comment) return a.id % 21 - 4498, MIN(COUNT(b.id) % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出71个与Prescription_221和Prescription_229都存在关系的部门节点",
        "output": "match(a where a.name='Prescription_221')-[e]->(b:department)<-[e2]-(c where c.name='Prescription_229') return b limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和仓库JavaGuid有拥有关系的用户,再找出以拥有关系关联了JavaGuid的用户",
        "output": "match(a:repository where a.name = 'JavaGuid')-[e:has]->(b:user),(a:repository where a.name = 'JavaGuid')<-[e2:has]-(c:user)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找申请person杜国强申请的贷款,的公司",
        "output": "match(a:person where name = '杜国强')-[e:apply]->(b:loan)<-[e2:apply]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被book relates数量大于117的book,记为relationCount,再查询这些book relates的author",
        "output": "match(a:book) let a.relationCount = AVG((a:book)<-[e:relates]-(b:book) => b.id) match(a where a.relationCount > 117)-[e2:relates]->(c:author) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,amount,weight分组,计算id的个数加id的最大值",
        "output": "return MAX(COUNT(a.id) + a.id) group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person周梅有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '周梅')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签为buyer、边标签为creates的边，计算它们的f0数量乘以971，以及weight的数量乘以161.81。",
        "output": "match(a:buyer)-[e:creates]->(b) return COUNT(e.f0) * 971, e.weight * 161.81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问天涯论坛的帖子节点有哪些标签？",
        "output": "match(a:forum where a.name = '天涯论坛')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,height,age, 数据为(7168,154,85),(6630,171,30),(4961,198,62), 源点的height等于输入表height,查找所有名为韩强的点属于的公司",
        "output": "with p as (select * from (VALUES(7168,154,85),(6630,171,30),(4961,198,62)) as t(salary,height,age))MATCH (a WHERE a.height = p.height AND (a.name = '韩强')) -[e:person_belong_company ]->(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person有关系的person节点,且person节点的身高是188,并返回这些person的id加21的最小值,以及person的年龄加79的值",
        "output": "match(a:person)-[e]->(b:person where b.height = 188) return MIN(b.id + 21), b.age + 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回belong issue ISSUE-239 belong的repository,的pullRequest",
        "output": "match(a:issue where name = 'ISSUE-239')-[e:belong]->(b:repository)<-[e2:belong]-(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出54个与李宏和黄思思都存在关系的编辑或读者或作家节点",
        "output": "match(a where a.name='李宏')-[e]->(b:publisher | reader | author)<-[e2]-(c where c.name='黄思思') return b limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与徐红和马伟有关的处方节点，返回它们的权重和名称。",
        "output": "match(a:user where a.name='徐红')-[e]->(b:prescription)<-[e2]-(c:user where c.name='马伟') return b.weight, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标记为人的人，并按照年龄从小到大排序。",
        "output": "match(a:person) return a order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为美团的点雇佣的person,并对这些person的id进行求和",
        "output": "match(a where a.name='美团')-[e:employee]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "提供所有与药品相关的药品，以及包含这些药品的其他处方。",
        "output": "match(a:medicine where a.id = '33')-[e]-(b:medicine)<-[e2:contain]-(c:prescription) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为王强的点relates的所有person,并对这些person的name进行求和",
        "output": "match(a where a.name='王强')-[e:relates]->(b:person) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我查找77个person黄思琪和韩红,共同的friend;2: 帮我查询company腾讯的所有friend,的f0除514除190的值;3: 请帮我找出和公司谷歌有company_creates_software关系的软件,以及和person赵轩有person_commits_software关系的软件,将它们都返回;4: 给出类型为company_employee_person,且满足条件f1是true,f1不是false,或f1是true的边;5: 找出标签为公司,名为腾讯的点,返回这些点的人数,名字;6: 返回和company Bilibili有关的software,称为X,再返回和这个X有关联的其他person,以及和X有关联的person;7: 查询名为吴思琪的点购买的软件,并对这些点的开源进行求和;8: 给出全部与software有关系的software节点,且software节点的stars在571到602之间,并返回这些点的value减value的平均值,以及value除805的值;",
        "output": "查询语句为:1: match(a:person where a.name='黄思琪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='韩红') return b limit 77;2: match(a:company where a.name= '腾讯')-[e:friend]->(b) return e.f0 / 514 / 190;3: match(a:company where a.name = '谷歌')-[e:company_creates_software]->(b:software),(c:person where c.name = '赵轩')-[e2:person_commits_software]->(d:software)return a, b, c, d;4: match(a)-[e:company_employee_person where (e.f1 = true and e.f1 <> false) or e.f1 = true]->(b) return e;5: match(a:company where a.name = '腾讯') return a.peopleNumber, a.name;6: match(a:company where a.name = 'Bilibili')-[e]-(b:software), (b:software)-[e2]-(c:person),(b:software)-[e3]-(d:person) return a, b, c, d;7: match(a where a.name='吴思琪')-[e:person_buy_software]->(b:software) return SUM(b.openSource);8: match(a:software)-[e]->(b:software where (b.stars BETWEEN 571 AND 602)) return AVG(b.value - b.value), b.value / 805;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "提供与公司相关的贷款节点，并按权重进行分组，然后返回这些权重。",
        "output": "match(a:company)-[e:apply]-(b:loan) return b.weight group by b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与艺术学院存在拥有关系的教师,教师与课程存在教关系的点,返回这些点的学分",
        "output": "match(a where a.name = '艺术学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return c.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是teach,并且f0为空且f0大于920,f1不是false的边",
        "output": "match(a)-[e:teach where (e.f0 is null) and e.f0 > 920 and e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与用户周国强有关系的仓库, 返回和这些仓库有关联的事项的,权重乘942的最小值",
        "output": "match(a:user where a.name= '周国强')-[e]-(b:repository)-[e2]-(c:issue) return MIN(c.weight * 942)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,age,height, 数据为('famale',32,177),('male',1,174),('famale',51,166)的子查询作为输入表, 以属性gender作为相等条件,请帮我查找user以gender分组的age, 根据age从大到小排序",
        "output": "with p as (select * from (VALUES('famale',32,177),('male',1,174),('famale',51,166)) as t(gender,age,height))MATCH (a:user WHERE a.gender = p.gender) RETURN a.age GROUP BY a.gender ORDER BY a.age DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和doctor郑思思之间有diagnose关系的patient",
        "output": "match(a:doctor where a.name='郑思思')-[e:diagnose]->(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 返回名为绿巨人的电影,以及与其有关的电影,并返回绿巨人的id和这些电影的id;2: 查找所有与person有关系的person节点,且person节点的salary不为空,并返回这些点的salary的数量减1789的值,以及id对93取余的值;3: 查找和电影我不是药神有film_has_tag关系的标签,再查找以film_has_tag关系关联了我不是药神的标签;4: 请帮我查找全部和film复仇者联盟之间有film_has_tag关系的tag;",
        "output": "查询语句为:1: match(a:film where name = '绿巨人')-[e]-(b:film) return a.id, b.id;2: match(a:person)-[e]->(b:person where (b.salary is not null)) return COUNT(b.salary) - 1789, b.id % 93;3: match(a:film where a.name = '我不是药神')-[e:film_has_tag]->(b:tag),(a:film where a.name = '我不是药神')<-[e2:film_has_tag]-(c:tag)return a, b, c;4: match(a:film where a.name='复仇者联盟')-[e:film_has_tag]->(b:tag) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我找出源点label为person,边label为person_knows_person的边,返回这些边的weight除107.81乘f0的个数,和targetId加targetId除121.08的值;2: 给出id为136的person有关的person的partner, 再给出和person有关系的relation;3: 请帮我找出类型为person的全部点,并根据gender从大到小排列;4: 给出和person有关联的person节点,并根据其名字,薪资分组,返回名字,薪资,以及age的平均值除8的值;5: 请帮我找出和person李思琪有关系的person节点,返回这些点的身高,id;6: 查找person的2度以内的环;7: 查找与person有关系的person节点,且person节点的id为空,并返回这些点的age加78的最小值,以及id对36取余的值;8: 请帮我查找与名为杜轩和马强的点共同认识的,类型为person的节点;9: 给出32个与何若涵和陈国强都存在关系的person节点;",
        "output": "查询语句为:1: match(a:person)-[e:person_knows_person]->(b) return COUNT(e.weight / 107.81 * e.f0), (e.targetId + e.targetId) / 121.08;2: match(a:person where id = '136')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d;3: match(a:person) return a order by a.gender desc;4: match(a:person)-[e:person_likes_person]-(b:person) return b.name, b.salary, AVG(b.age) / 8 group by b.name, b.salary;5: match(a:person where a.name='李思琪')-[e]-(b:person) return b.height, b.id;6: match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id;7: match(a:person)-[e]->(b:person where (b.id is null)) return MIN(b.age + 78), b.id % 36;8: match(a where a.name = '杜轩')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '马强') return b;9: match(a where a.name='何若涵')-[e]->(b:person)<-[e2]-(c where c.name='陈国强') return b limit 32;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出所有类型为'country'的点，并按 id 从小到大的顺序排序。",
        "output": "match(a:country) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出合作公司阿里合作的大学,的公司",
        "output": "match(a:company where name = '阿里')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名字不是吴强的卖家回答的买家的名称,以及这些买家 查看的商品的名称",
        "output": "match(a:seller where a.name <> '吴强')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先查找与ID为15的人有关联的人，再查找这些人的人际关系。",
        "output": "match(a:person where id = '15')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询两个人徐梅和徐宏在点对点关系中的partner节点，标签为person。",
        "output": "match(a:person where a.name='徐梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='徐宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以拥有关系关联了商品桌子的卖家",
        "output": "match(a:goods where a.name='桌子')<-[e:has]-(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和商品苹果有2度或3度关系的买家",
        "output": "match(a:goods where a.name='苹果')-[e]->{2,3}(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以0作为请求点id, 源点的id等于输入表id,给出名为郑思琪的person",
        "output": "with p as (select * from (VALUES(0)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '郑思琪')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和书点有关联关系的书节点,且边满足条件源点id小于9,目标书节点字数不等于65",
        "output": "match(a:book)-[e:relates where e.srcId < 9]->(b:book where b.wordCount <> 65) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照credit降序排序，查找以value、name、courseHour分组的course。",
        "output": "match(a:course) return a.credit group by a.value, a.name, a.courseHour order by a.credit desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找名为何伟的标签为person的点，并返回这些点的薪资、年龄和性别。",
        "output": "match(a:person where a.name = '何伟') return a.salary, a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为55的person belong的company, 并将company有关的company的id的平均值赋值给company(b)的peopleNumber, 接着查询company(b)的peopleNumber小于55的company creates的software",
        "output": "match(a:person where a.id = 55)-[e:belong]->(b:company) let b.peopleNumber = AVG((b:company)-[e2]-(c:company) => c.id) match(b:company where b.peopleNumber < 55)-[e3:creates]->(d:software) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,salary,age, 数据为(188,5377,71), 源点的age等于输入表age,请帮我查找全部源点label为person,边label为person_knows_person,且f0的数量为140的边",
        "output": "with p as (select * from (VALUES(188,5377,71)) as t(height,salary,age))MATCH (a:person WHERE a.age = p.age) -[e:person_knows_person WHERE COUNT(e.f0) = 140 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与李建国和Alan有关的评论。",
        "output": "match(a:person where a.name = '李建国')-[e:creates]->(b:comment),(c:person where c.name = 'Alan')-[e2:creates]->(d:comment) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有合并请求以名字分组的名字, 根据名字升序排序",
        "output": "match(a:pullRequest) return a.name group by a.name order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询tag的1度的环",
        "output": "match(a:tag)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 请帮我找出151个名为孙思琪的点has的label为goods的节点,且节点name不等于键盘;2: 查找所有源点标签为买家,边标签为buyer_look_goods,以及源点id不为空,targetId的平均值除172不是158.21,或源点id在35到172之间的边;3: 查找178个id在33到78之间或salary小于6007,且salary为空的buyer,根据name从小到大排列;4: 给出buyer郑雪 cancel的orders,返回orders contain的goods的sellerNumber对1430.98取余的最小值 ;5: 查找所有源点类型为buyer,边类型为buyer_look_goods的边,返回这些边的weight对weight取余的数量,和targetId乘144的求和值;",
        "output": "查询语句为:1: match(a where a.name='孙思琪')-[e:seller_has_goods]->(b:goods where b.name <> '键盘') return b limit 151;2: match(a:buyer)-[e:buyer_look_goods where ((e.srcId is not null) and AVG(e.targetId) / 172 <> 158.21) or (e.srcId BETWEEN 35 AND 172)]->(b) return e;3: match(a:buyer where ((a.id BETWEEN 33 AND 78) or a.salary < 6007) and (a.salary is null)) return a order by a.name asc limit 178;4: match(a:buyer where name = '郑雪')-[e:buyer_cancel_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return MIN(c.sellerNumber % 1430.98);5: match(a:buyer)-[e:buyer_look_goods]->(b) return COUNT(e.weight % e.weight), SUM(e.targetId * 144);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有用户源点之间、标签为'创造'的边，并返回这些边中每个边的srcId平均值，再加上源点id除以156.26的值，以及目标点id乘以110的值。",
        "output": "match(a:user)-[e:creates]->(b) return (AVG(e.srcId) + e.srcId) / 156.26, e.targetId * 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找belong film少年足球的comment,和这些comment belong的film",
        "output": "match(a:film where name = '少年足球')<-[e:belong]-(b:comment)-[e2:belong]->(c:film) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有处方的权重减368的最大值",
        "output": "match(a:prescription) return MAX(a.weight - 368)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和软件Geaflow有关系的person,返回这些点的id,身高,年龄",
        "output": "match(a:software where a.name='Geaflow')-[e]-(b:person) return b.id, b.height, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出年龄小于98或者薪资大于等于3287的person，按照年龄降序排序，总数为138。",
        "output": "match(a:person where (a.salary >= 3287 and a.age < 98) or (a.age is not null)) return a order by a.age desc limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表529,16,92,93, 源点的id等于输入表id,请帮我找出名为吴思思和杜宏的,标签为person的点公共的恋人节点的名单",
        "output": "with p as (select * from (VALUES(529),(16),(92),(93)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴思思')) -[e:person_lover_person ]->(b) <-[e2:person_lover_person ]-(c:person WHERE c.name = '杜宏') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出195个帖子Post_363和Post_271,共同的朋友",
        "output": "match(a:post where a.name='Post_363')-[e:friend]->(b)<-[e2:friend]-(c:post where c.name='Post_271') return b limit 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为体育学院的course或department,以及与其有关的department,并返回体育学院的size和这些department的id",
        "output": "match(a:course | department where name = '体育学院')-[e]-(b:department) return a.size, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person的3跳的环",
        "output": "match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询书呐喊关联的书,以及发布这些书的编辑, 令编辑的id等于书的类别,令书的创建时间等于书的id的平均值减5, 返回书(a)的创建时间,书(b)的id,编辑(c)的性别",
        "output": "match(a:book where name = '呐喊')-[e:relates]->(b:book)<-[e2:publish]-(c:publisher) let c.id = a.category,let a.createTime = AVG(a.id) - 5 return a.createTime,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 请帮我查找名为短袖的商品,以及与其有关的订单,并返回短袖的价值和这些订单的价格;2: 帮我查询buyer consult的seller,返回其源点的salary除3810除45的个数,以及目标点的salary对4055取余的值;3: 请帮我找出源点id不为空或名字不是赵国强,且名字为赵红,边label为buyer_look_goods,且目标点id为空的边,返回这些边的f0除792的值;4: 给出与buyer韩雪存在buyer_creates_orders关系,且与goods鞋子存在orders_contain_goods关系的orders节点，返回这些orders的price,value,及buyer韩雪的id,及goods鞋子的value;5: 查找名为杜雪的,id等于76的partner,返回这些partner的name,和边的targetId,timeStamp;",
        "output": "查询语句为:1: match(a:goods where name = '短袖')-[e]-(b:orders) return a.value, b.price;2: match(a:buyer)-[e:buyer_consult_seller]->(b:seller) return COUNT(a.salary / 3810 / 45), b.salary % 4055;3: match(a where ((a.id is not null) or a.name <> '赵国强') and a.name = '赵红')-[e:buyer_look_goods where (e.targetId is null)]->(b) return e.f0 / 792;4: match(a:buyer where a.name='韩雪')-[e:buyer_creates_orders]->(b:orders)<-[e2:orders_contain_goods]-(c:goods where c.name='鞋子') return a.id,b.price, b.value,c.value;5: match(a where a.name='杜雪')-[e:partner]->(b where b.id = 76) return b.name,e.targetId, e.timeStamp;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找赵建聪的合作伙伴的朋友。",
        "output": "match(a:person where a.name='赵建聪')-[e:friend]->(b)-[e2:partner]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵强申请的贷款节点存款的账号",
        "output": "match(a:person where a.name = '赵强')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有互相喜欢的人以及他们共同喜欢的人",
        "output": "match(a:person where a.id = '11')-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和评论Comment_323有2到5度关系的标签",
        "output": "match(a:comment where a.name='Comment_323')-[e]->{2,5}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和医生点有诊断关系的病人节点,且边满足条件f0小于513,目标病人节点满足条件薪资小于1613",
        "output": "match(a:doctor)-[e:diagnose where e.f0 < 513]->(b:patient where b.salary < 1613) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与城市类型的点具有归属关系的国家，以及与这些国家具有包含关系的城市，以及与这些城市具有包含关系的大学。",
        "output": "match(a:city)-[e:belong]->(b:country)-[e2:contain]->(c:city)-[e3:contain]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回天津城市中包含公司的信息，包括公司所属的城市的ID、面积和人口数量。",
        "output": "match(a:city where name = '天津')-[e:contain]->(b:company)-[e2:belong]->(c:city) return c.id, c.area, c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于国家的点,并根据面积从大到小排列",
        "output": "match(a:country) return a order by a.area desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从person黄轩出发,经过类型是parent的边,走2跳到达的person点",
        "output": "match(a:person where a.name='黄轩')-[e:parent]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出159个与赵建国和周梅都存在关系的cinema或film或person节点",
        "output": "match(a where a.name='赵建国')-[e]->(b:cinema | film | person)<-[e2]-(c where c.name='周梅') return b limit 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person何月有关,且与账号Zeus有关系的账号节点",
        "output": "match(a:person where a.name='何月')-[e:own]-(b:account)-[e2:transfer]-(c:account where c.name='Zeus') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和公司有关联的大学节点,并根据其等级,名字,id分组,返回等级,名字,id,以及等级减2的值",
        "output": "match(a:company)-[e:cooperate]-(b:university) return b.level, b.name, b.id, b.level - 2 group by b.level, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找同时与账号LX001存在还款关系，与账号TheShy存在存款关系的贷款节点，并返回这些贷款的ID,以及账号LX001的名称和账号TheShy的创建时间。",
        "output": "match(a:account where a.name='LX001')-[e:repay]->(b:loan)<-[e2:deposit]-(c:account where c.name='TheShy') return a.name,b.id,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和名为大众影院的电影院有相关者关系,或有相关者的相关者关系的电影",
        "output": "match(a:cinema where n.name=大众影院)-[e:relation]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person马雪 认识的person,返回person 购买的软件的value的最小值减478的值",
        "output": "match(a:person where name = '马雪')-[e:knows]->(b:person)-[e2:buy]->(c:software) return MIN(c.value) - 478",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出99个身高大于等于198的person,根据年龄从大到小排列",
        "output": "match(a:person where a.height >= 198) return a order by a.age desc limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我查找标签等于university_has_department,以及满足条件f1是true或targetId不为空的边;2: 查询与student孙伟和韩思琪都存在student_selects_course关系的点;3: 请帮我找出所有id为90的学生关联的部门,和以拥有关系关联了这些部门的其他大学;4: 帮我查询前84个标签等于department_has_teacher的边;5: 查询和大学浙江大学有关的大学,称为X,再查询和这个X有关联的其他学生,以及和X有关联的教师;6: 帮我查询department的1度以内的环;7: 查找前68个label为department_has_student的边;",
        "output": "查询语句为:1: match(a)-[e:university_has_department where e.f1 = true or (e.targetId is not null)]->(b) return e;2: match(a:student where a.name='孙伟')-[e:student_selects_course]->(b)<-[e2:student_selects_course]-(c:student where c.name='韩思琪') return b;3: match(a:student where a.id = '90')-[e]-(b:department)<-[e2:university_has_department]-(c:university) return b,c;4: match(a)-[e:department_has_teacher]->(b) return e limit 84;5: match(a:university where a.name = '浙江大学')-[e]-(b:university), (b:university)-[e2]-(c:student),(b:university)-[e3]-(d:teacher) return a, b, c, d;6: match(a:department)->{0,0}(b)->(a) return a.id, b.id as b_id;7: match(a)-[e:department_has_student]->(b) return e limit 68;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点满足条件价值为空且名字的最大值小于等于80,目标点满足条件年龄小于86,薪资为空,性别不是famale,且label为拥有的边",
        "output": "match(a where (a.value is null) and MAX(a.name) <= 80)-[e:has]->(b where b.age < 86 and (b.salary is null) and b.gender <> 'famale') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与贷款defaultName有关联的账户，以及与周强有关联的账户，并将两者都返回。",
        "output": "match(a:loan where a.name = 'defaultName')-[e:deposit]->(b:account),(c:person where c.name = '周强')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高对170取余的值",
        "output": "a.height % 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被部门体育学院拥有的教师",
        "output": "match(a:teacher)<-[e:has]-(b:department where b.name='体育学院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵轩 关联的person,返回person 关联的person的薪资减3591的值",
        "output": "match(a:person where name = '赵轩')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c.salary - 3591",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以57作为输入,返回运算结果",
        "output": "Call TRIANGLECOUNT(57) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以下是经过简化的句子：'以上映关系与绿巨人的电影院有关联。'",
        "output": "match(a:film where a.name='绿巨人')<-[e:releases]-(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出大学关联的部门，以及与这些部门有联系的其他大学。",
        "output": "match(a:university where a.id = '195')-[e]-(b:department)<-[e2:has]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表16, 以属性id作为相等条件,请帮我查找和person吴强有person_parent_person关系的person,以及和person何雪有person_lover_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(16)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴强')) -[e:person_parent_person ]->(b:person) , (c:person WHERE c.name = '何雪') -[e2:person_lover_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为何若涵的点likes的所有book,并对这些book的id进行求和",
        "output": "match(a where a.name='何若涵')-[e:likes]->(b:book) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和书白夜行有引用关系的书,再给出以引用关系关联了白夜行的书",
        "output": "match(a:book where a.name = '白夜行')-[e:refers]->(b:book),(a:book where a.name = '白夜行')<-[e2:refers]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与郑月有关联的人，并计算他们之间的年龄关系。",
        "output": "match(a where a.name = '郑月')-[e:likes]->(b:person)-[e2:likes]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表554,820,50, 源点的id等于输入表id,查找所有名为Light的点转账的账号",
        "output": "with p as (select * from (VALUES(554),(820),(50)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Light')) -[e:account_transfer_account ]->(b:account) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为马轩和王强的,类型为买家的点公共的伙伴节点的名单",
        "output": "match(a:buyer where a.name='马轩')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='王强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和orders有关联的goods节点,并根据其sellerNumber,value,category分组,返回sellerNumber,value,category,以及value除value的值",
        "output": "match(a:orders)-[e:contain]-(b:goods) return b.sellerNumber, b.value, b.category, b.value / b.value group by b.sellerNumber, b.value, b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与人型点有喜欢关系的人，这些人又与我有支付关系，并且这些人又与我有认识关系。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与王雪和Tom都认识的人，返回他们的性别、年龄以及王雪的薪资和Tom的年龄。",
        "output": "match(a:person where a.name='王雪')-[e:knows]->(b:person)<-[e2:knows]-(c:person where c.name='Tom') return a.salary,b.gender, b.age,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为滴滴的点的,名字不是5195且身高的最大值小于23的相关者,返回这些相关者的id,和边的f1,目标点id,源点id",
        "output": "match(a where a.name='滴滴')-[e:relation]->(b where b.name <> 5195 and MAX(b.height) < 23) return b.id,e.f1, e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找20个和标签为seller的点有ask关系的buyer,且和这些buyer有look关系的goods",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以belong关系关联了company阿里的person",
        "output": "match(a:company where a.name='阿里')<-[e:belong]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的age减65的值",
        "output": "match(a:person) return a.age - 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为黄建聪的点购买的所有软件,并对这些软件的id进行求和",
        "output": "match(a where a.name='黄建聪')-[e:buy]->(b:software) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为李月的点发布的全部帖子,并对这些帖子的字数进行求和",
        "output": "match(a where a.name='李月')-[e:publish]->(b:post) return SUM(b.wordCount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出重庆大学和南京大学共同的167个合作伙伴。",
        "output": "match(a:university where a.name='重庆大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='南京大学') return b limit 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询城市属于的国家,返回其源点的价值加327的个数,以及目标点的价值乘995的个数",
        "output": "match(a:city)-[e:belong]->(b:country) return COUNT(a.value + 327), COUNT(b.value * 995)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回两个人的共同伴侣。",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和repository点有has关系的user节点,且边满足条件weight小于154,目标user节点id为空",
        "output": "match(a:repository)-[e:has where e.weight < 154]->(b:user where (b.id is null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出名为BIN的点repay的全部loan,并对这些点的amount进行求和;2: 查找所有名为杜红的点投资的公司;3: 给出account的3度的环;4: 给出以invest关系关联了company滴滴的person;5: 帮我查询被account Geaflow123repay的loan;6: 给出被账号XiaoHu转账的账号;",
        "output": "查询语句为:1: match(a where a.name='BIN')-[e:account_repay_loan]->(b:loan) return SUM(b.amount);2: match(a where a.name='杜红')-[e:person_invest_company]->(b:company) return b;3: match(a:account)->{2,2}(b)->(a) return a.id, b.id as b_id;4: match(a:company where a.name='滴滴')<-[e:person_invest_company]-(b:person) return b;5: match(a:loan)<-[e:account_repay_loan]-(b:account where b.name='Geaflow123') return a, b;6: match(a:account)<-[e:account_transfer_account]-(b:account where b.name='XiaoHu') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 找出前176个label为person_apply_loan的边;2: 查找74个和类型为person的点有person_own_account关系的账号,并且和这些账号有account_transfer_account关系的账号;3: 请帮我找出全部和名为孙思思的person有相关者关系,或有相关者的相关者关系的贷款;4: 查询所有account以value,lastLoginTime,isBlock分组的isBlock, 根据isBlock升序排序;5: 帮我查询标签为公司,名为美团的点,返回这些点的规格,id,名字;",
        "output": "查询语句为:1: match(a)-[e:person_apply_loan]->(b) return e limit 176;2: match(a:person)-[e:person_own_account]->(b:account)-[e2:account_transfer_account]->(c:account) return c limit 74;3: match(a:person where n.name=孙思思)-[e:relation]->{1,2}(b:loan) return b;4: match(a:account) return a.isBlock group by a.value, a.lastLoginTime, a.isBlock order by a.isBlock asc;5: match(a:company where a.name = '美团') return a.scale, a.id, a.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为周建国的人有朋友关系，或者有朋友的朋友关系的人。",
        "output": "match(a:person where n.name=周建国)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有类型为prescription或medicine的点",
        "output": "match(a:prescription | medicine) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(67,98033,5502),(74,33708,5534)作为请求表数据,属性分别为id,area,peopleNumber, 源点的id等于输入表id,查找城市的朋友,或其朋友的朋友",
        "output": "with p as (select * from (VALUES(67,98033,5502),(74,33708,5534)) as t(id,area,peopleNumber))MATCH (a:city WHERE a.id = p.id) -[e:friend ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以600,516作为请求点id, 以属性id作为相等条件,请帮我找出和电影院人人影城之间有cinema_releases_film关系的电影",
        "output": "with p as (select * from (VALUES(600),(516)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.name = '人人影城')) -[e:cinema_releases_film ]->(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以265,431,361,119,183作为请求点id, 以属性id作为相等条件,帮我查询与软件Geaflow有关系的软件, 返回和这些软件有关联的公司的,id的最大值除id的和",
        "output": "with p as (select * from (VALUES(265),(431),(361),(119),(183)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.name = 'Geaflow')) -[e ]-(b:software) -[e2 ]-(c:company) RETURN SUM(MAX(c.id) / c.id) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为192的国家包含的城市, 并将城市有关的公司的名字的数量赋值给城市的id, 接着查询城市的id小于192的城市包含的公司",
        "output": "match(a:country where a.id = 192)-[e:contain]->(b:city) let b.id = COUNT((b:city)-[e2]-(c:company) => c.name) match(b:city where b.id < 192)-[e3:contain]->(d:company) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 返回名为Comment_440的,name不是神探狄仁杰的friend,返回这些friend的id,和边的f1,weight;2: 给出与film神探狄仁杰有film_has_tag关系的1度以内的环;3: 帮我查询所有电影院以名字,id,大小分组的id, 根据id从小到大排序;",
        "output": "查询语句为:1: match(a where a.name='Comment_440')-[e:friend]->(b where b.name <> '神探狄仁杰') return b.id,e.f1, e.weight;2: match(a:film where name = '神探狄仁杰')-[e:film_has_tag]->{0,0}(b)->(a) return a.id, b.id as b_id;3: match(a:cinema) return a.id group by a.name, a.id, a.size order by a.id asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出以属于关系关联了部门传染部的医生",
        "output": "match(a:department where a.name='传染部')<-[e:doctor_belong_department]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点名字不是张若涵或薪资大于等于8229,且名字为郑若涵,边类型是申请,且权重小于等于188.59的边,返回这些边的源点id加139除757的最大值",
        "output": "match(a where (a.name <> '张若涵' or a.salary >= 8229) and a.name = '郑若涵')-[e:apply where e.weight <= 188.59]->(b) return MAX((e.srcId + 139) / 757)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出seller吴科has的goods,被其他orders contain的数量",
        "output": "match(a:seller where a.name='吴科')-[e:has]->(b:goods)<-[e2:contain]-(c:orders) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和名为loan_45的loan有partner关系,或有partner的partner关系的account",
        "output": "match(a:loan where n.name=loan_45)-[e:partner]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person的1度的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与部门内科有关,且与病人周国强有关系的医生节点",
        "output": "match(a:department where a.name='内科')-[e:has]-(b:doctor)-[e2:diagnose]-(c:patient where c.name='周国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表721,465,288,762,647, 源点的id等于输入表id,查找所有与person李红有关系的person的age",
        "output": "with p as (select * from (VALUES(721),(465),(288),(762),(647)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李红')) -[e ]-(b:person) RETURN b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询141个和标签等于作家的点有撰写关系的书,并且和这些书有引用关系的书",
        "output": "match(a:author)-[e:write]->(b:book)-[e2:refers]->(c:book) return c limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查询全部何强的点teach的course,然后查询何强被has的department,一起返回;2: 返回全部与teacher李雪有关系的student的id;3: 返回前90个满足条件id不为空或性别为famale的教师;",
        "output": "查询语句为:1: match(a where a.name = '何强')-[e:teacher_teach_course]->(b:course),(a where a.name = '何强')<-[e2:department_has_teacher]-(c:department) return a, b, c;2: match(a:teacher where a.name='李雪')-[e]-(b:student) return b.id;3: match(a:teacher where (a.id is not null) or a.gender = 'famale') return a limit 90;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,身高,id分组,计算年龄除63的值",
        "output": "return a.age / 63 group by a.name, a.height, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为128的software有关的person的relation, 再查找和person有关系的friend",
        "output": "match(a:software where id = 128)-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为128的点的id,id,创建时间",
        "output": "match(a where a.id = 128) return a.id, a.id, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与书孤城有引用关系的1跳的环",
        "output": "match(a:book where name = '孤城')-[e:refers]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前142个价值的求和值不是58或id除id的最大值是383,且id不等于3的电影",
        "output": "match(a:film where (SUM(a.value) <> 58 or MAX(a.id / a.id) = 383) and a.id <> 3) return a limit 142",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "耳鼻喉科部门合伙人的朋友关系",
        "output": "match(a:department where a.name='耳鼻喉科')-[e:partner]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与post Post_419和Post_465都存在has关系的点",
        "output": "match(a:post where a.name='Post_419')-[e:has]->(b)<-[e2:has]-(c:post where c.name='Post_465') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和person李伟之间有likes关系的person",
        "output": "match(a:person where a.name='李伟')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李宏的父母的家庭背景。",
        "output": "match(a:person where a.name='李宏')-[e:parent]->(b)-[e2:family]->(c)-[e3:parent]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是person的点,返回108个",
        "output": "match(a:person) return a limit 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为买家的所有点,并根据身高从小到大排列",
        "output": "match(a:buyer) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person马国强购买的软件, 令软件的星数等于软件的星数乘577的最小值, 返回person的名字, 软件的价值",
        "output": "match(a:person where a.name='马国强')-[e:buy]->(b:software) let b.stars = MIN(b.stars * 577) return a.name,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询部门眼科 拥有的医生,返回医生 诊断的病人的salary的数量乘9307的值",
        "output": "match(a:department where name = '眼科')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return COUNT(c.salary) * 9307",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person有关系的公司节点,且公司节点的名字为阿里,并返回这些公司的人数减994加747减795的求和值,以及公司的人数加718的值",
        "output": "match(a:person)-[e]->(b:company where b.name = '阿里') return SUM(b.peopleNumber - 994 + 747 - 795), b.peopleNumber + 718",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回reader的1跳的环",
        "output": "match(a:reader)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为person的所有点,并根据性别从大到小排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与吴红是同事的人，以及与吴思思是父母关系的人，并将他们全部返回。",
        "output": "match(a:person where a.name = '吴红')-[e:colleague]->(b:person),(c:person where c.name = '吴思思')-[e2:parent]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为吴建国的点喜欢的评论",
        "output": "match(a where a.name='吴建国')-[e:likes]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出孙强提交的软件。",
        "output": "match(a:software)<-[e:commits]-(b:person where b.name='孙强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找course操作系统belong的department,以及has这些department的university",
        "output": "match(a:course where name = '操作系统')-[e:belong]->(b:department)<-[e2:has]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,height,salary分组,计算salary减7658对193取余的最大值",
        "output": "return MAX(a.salary - 7658 % 193) group by a.id, a.height, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询account XXD transfer的account, 令account的name等于account的id对87取余的个数,令account(b)的value等于account(a)的value对38取余的最小值,令account(a)的isBlock等于account(b)的value乘value, 返回account(a)的isBlock, account(b)的name",
        "output": "match(a:account where a.name='XXD')-[e:transfer]->(b:account) let a.name = COUNT(a.id % 87),let b.value = MIN(a.value % 38),let a.isBlock = b.value * b.value return a.isBlock,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和作家何轩之间有认识关系的作家",
        "output": "match(a:author where a.name='何轩')-[e:knows]->(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找喜欢person李宏的person,和这些person认识的person",
        "output": "match(a:person where name = '李宏')<-[e:likes]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为issue,名为ISSUE-432的点,返回这些点的id",
        "output": "match(a:issue where a.name = 'ISSUE-432') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(52,7791,59),(84,6302,36),(66,5272,63)作为请求表数据,属性分别为id,salary,age, 源点的id等于输入表id,给出与person孙强和李月都存在person_colleague_person关系的点",
        "output": "with p as (select * from (VALUES(52,7791,59),(84,6302,36),(66,5272,63)) as t(id,salary,age))MATCH (a:person WHERE a.id = p.id AND (a.name = '孙强')) -[e:person_colleague_person ]->(b) <-[e2:person_colleague_person ]-(c:person WHERE c.name = '李月') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为孙红的点likes的person",
        "output": "match(a where a.name='孙红')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与部门传染部有关联，并创造了处方Prescription_310的医生。请提供这些医生的性别、部门传染部的名称以及处方Prescription_310的ID。",
        "output": "match(a:department where a.name='传染部')-[e:has]->(b:doctor)<-[e2:creates]-(c:prescription where c.name='Prescription_310') return a.name,b.gender,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找142个price等于277且weight为空，或id小于等于89的药品，并按category从小到大排序。",
        "output": "match(a:medicine where (a.price = 277 and (a.weight is null)) or a.id <= 89) return a order by a.category asc limit 142",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回和电影少年足球有关的电影院,再返回和少年足球film_has_tag的其他标签,返回它们",
        "output": "match(a:film where a.name = '少年足球')-[e]-(b:cinema), (a:film)-[e2:film_has_tag]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到黄月的买家朋友的朋友",
        "output": "match(a:buyer where a.name='黄月')-[e:relation]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为大众影院和好视影院的点共同上映的,label为电影的节点",
        "output": "match(a where a.name = '大众影院')-[e:releases]->(b:film)<-[e2:releases]-(c where c.name = '好视影院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出80个名为张雪的点诊断的类型是病人的节点,且其薪资小于7468,id在46到54之间",
        "output": "match(a where a.name='张雪')-[e:diagnose]->(b:patient where b.salary < 7468 and (b.id BETWEEN 46 AND 54)) return b limit 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前20个类型为认识的边",
        "output": "match(a)-[e:knows]->(b) return e limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以99,330作为请求点id, 源点的id等于输入表id,帮我查询与名为吴建聪和徐思思的点共同诊断的,标签等于病人的节点",
        "output": "with p as (select * from (VALUES(99),(330)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴建聪')) -[e:doctor_diagnose_patient ]->(b:patient) <-[e2:doctor_diagnose_patient ]-(c WHERE c.name = '徐思思') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为tag或user或post的点",
        "output": "match(a:tag | user | post) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person孙雪有关系的person的name",
        "output": "match(a:person where a.name='孙雪')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为level,name,value, 数据为(3,'华中科技大学',497),(1,'电子科技大学',575),(1,'武汉大学',105)的子查询作为输入表, 以属性name作为相等条件,查找所有伦敦的点belong的country,然后查找伦敦被belong的university,一起返回",
        "output": "with p as (select * from (VALUES(3,'华中科技大学',497),(1,'电子科技大学',575),(1,'武汉大学',105)) as t(level,name,value))MATCH (a WHERE a.name = p.name AND (a.name = '伦敦')) -[e:city_belong_country ]->(b:country) , (a WHERE a.name = '伦敦') <-[e2:university_belong_city ]-(c:university) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 北京大学的合作伙伴是相关者。",
        "output": "match(a:university where a.name='北京大学')-[e:partner]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出74个ID为94的评论，并按创建时间倒序排序。",
        "output": "match(a:comment where a.id = 94) return a order by a.createTime desc limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户的三角的环,边标签为创造, 并返回这些点的id",
        "output": "match(a:user)-[e:creates]->(b)-[e2:creates]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为短袖的买家或订单,以及与其有关的买家,并返回短袖的类别和这些买家的id",
        "output": "match(a:buyer | orders where name = '短袖')-[e]-(b:buyer) return a.category, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型为person,目标点类型为person,类型为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和大学有关联的公司节点,并根据其人数,名字分组,返回人数,名字,以及人数除759的值",
        "output": "match(a:university)-[e:cooperate]-(b:company) return b.peopleNumber, b.name, b.peopleNumber / 759 group by b.peopleNumber, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表410,431,499,739, 以属性id作为相等条件,计算所有prescription的id除id除502的值",
        "output": "with p as (select * from (VALUES(410),(431),(499),(739)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) RETURN a.id / a.id / 502 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为王思琪的买家存在伙伴关系，或者其伙伴之间存在伙伴关系的订单。",
        "output": "match(a:buyer where n.name=王思琪)-[e:partner]->{1,2}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签为大学,边标签为属于,且满足条件目标点id大于等于144或目标点id为空,且目标点id不等于56的边",
        "output": "match(a:university)-[e:belong where (e.targetId >= 144 or (e.targetId is null)) and e.targetId <> 56]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除1的值",
        "output": "a.id / 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为179的person的同事，再帮我查询与person相关的父母。",
        "output": "match(a:person where id = '179')-[e]-(b:person)-[e2:colleague]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以289,170,93作为请求点id, 以属性id作为相等条件,请帮我查找id为140的部门有关的医生的相关者, 再请帮我查找和医生有关系的相关者",
        "output": "with p as (select * from (VALUES(289),(170),(93)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (id = '140')) -[e ]-(b:doctor) -[e2:relation ]->(c) , (b:doctor) -[e3:relation ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到标签为'company'的所有点，然后按值从大到小排序。",
        "output": "match(a:company) return a order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与person相关的software节点，按id、name和stars进行分组，并返回它们。",
        "output": "match(a:person)-[e:buy]-(b:software) return b.id, b.name, b.stars group by b.id, b.name, b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(7631,15,'吴建国'),(8086,99,'杜思思'),(2417,90,'赵思思'),(3864,31,'赵国强')作为请求表数据,属性分别为salary,id,name, 以属性id作为相等条件,帮我查询和orders Order_111有orders_contain_goods关系的goods,再帮我查询以orders_contain_goods关系关联了 Order_111的goods",
        "output": "with p as (select * from (VALUES(7631,15,'吴建国'),(8086,99,'杜思思'),(2417,90,'赵思思'),(3864,31,'赵国强')) as t(salary,id,name))MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_111')) -[e:orders_contain_goods ]->(b:goods) , (a:orders WHERE a.name = 'Order_111') <-[e2:orders_contain_goods ]-(c:goods) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按照address降序排序，找出department以id、name和weight分组的address。",
        "output": "match(a:department) return a.address group by a.id, a.name, a.weight order by a.address desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询星际穿越的标签，并查询星际穿越在哪些电影院上映，然后把结果一起告诉我。",
        "output": "match(a where a.name = '星际穿越')-[e:has]->(b:tag),(a where a.name = '星际穿越')<-[e2:releases]-(c:cinema) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为马伟的点发布的所有帖子,并对这些帖子的id进行求和",
        "output": "match(a where a.name='马伟')-[e:publish]->(b:post) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于订单,名为Order_435的点,返回这些点的id",
        "output": "match(a:orders where a.name = 'Order_435') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与仓库FSM有关系的仓库的创建时间",
        "output": "match(a:repository where a.name='FSM')-[e]-(b:repository) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为浙江大学的点的,规格为medium,id在41到76之间的朋友,返回这些朋友的价值,和边的源点id,f0,权重",
        "output": "match(a where a.name='浙江大学')-[e:friend]->(b where b.scale = 'medium' and (b.id BETWEEN 41 AND 76)) return b.value,e.srcId, e.f0, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 帮我查询标签等于person的所有点,并根据性别从小到大排列;2: 帮我查询和film少年足球有2度或3度关系的cinema;3: 返回person徐雪的标签为朋友的边,并根据目标点id降序排列,返回84个;4: 返回comment Comment_402的所有friend,的targetId的求和值对170取余的数量;5: 找出和film有关联的tag节点,并根据其id,name,value分组,返回id,name,value,以及value减837的平均值;6: 给出全部与person徐月有关系的电影的类别;7: 给出前24个id不等于78,name是动作的tag;8: 返回30个名为马雪的点likes的类型为comment的节点,且节点name不等于Comment_192;",
        "output": "查询语句为:1: match(a:person) return a order by a.gender asc;2: match(a:film where a.name='少年足球')-[e]->{2,3}(b:cinema) return b;3: match(a:person where a.name = '徐雪')-[e:friend]->(b) return b order by e.targetId desc limit 84;4: match(a:comment where a.name= 'Comment_402')-[e:friend]->(b) return COUNT(SUM(e.targetId) % 170);5: match(a:film)-[e:film_has_tag]-(b:tag) return b.id, b.name, b.value, AVG(b.value - 837) group by b.id, b.name, b.value;6: match(a:person where a.name='徐月')-[e]-(b:film) return b.category;7: match(a:tag where a.id <> 78 and a.name = '动作') return a limit 24;8: match(a where a.name='马雪')-[e:person_likes_comment]->(b:comment where b.name <> 'Comment_192') return b limit 30;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查询148个名为杜伟的点认识的类型为person的节点,且节点年龄大于等于47且年龄小于等于54;2: 给出与名为陈月和杜伟的点共同knows的,标签等于person的节点;3: 请帮我查找所有公司以价值分组的id, 根据id升序排序;4: 查找43个name是腾讯的company,根据peopleNumber降序排列;5: 查询类型为software的所有点,并根据lang降序排列;6: 查找和person有关联的person节点,并根据其薪资分组,返回薪资,以及薪资加薪资的值;7: 请帮我找出源点id为67或性别不是famale或年龄不是50,边类型是person_belong_company,且源点id小于146的边,返回这些边的权重加122.91的平均值;8: 给出类型是person,名为杜建国的点,返回这些点的age;9: 帮我查询前34个label为person_buy_software的边;",
        "output": "查询语句为:1: match(a where a.name='杜伟')-[e:person_knows_person]->(b:person where b.age >= 47 and b.age <= 54) return b limit 148;2: match(a where a.name = '陈月')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '杜伟') return b;3: match(a:company) return a.id group by a.value order by a.id asc;4: match(a:company where a.name = '腾讯') return a order by a.peopleNumber desc limit 43;5: match(a:software) return a order by a.lang desc;6: match(a:person)-[e:person_knows_person]-(b:person) return b.salary, b.salary + b.salary group by b.salary;7: match(a where a.id = 67 or a.gender <> 'famale' or a.age <> 50)-[e:person_belong_company where e.srcId < 146]->(b) return AVG(e.weight + 122.91);8: match(a:person where a.name = '杜建国') return a.age;9: match(a)-[e:person_buy_software]->(b) return e limit 34;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有卖家及其伙伴的伙伴",
        "output": "match(a:seller)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询标签为person,名为黄建国的点,返回这些点的name,id;2: 请帮我找出所有和person韩伟之间有person_pay_person关系的person;3: 给出标签为person的所有点,并根据name从大到小排列;4: 找出label为person的点,并根据id升序排列;5: 找出前128个类型是person_knows_person的边;6: 请帮我找出全部person的相关者,或其相关者的相关者;7: 查找所有徐强的点pay的person,然后查找徐强被pay的person,一起返回;8: 返回与名为孙强和郑宏的点共同喜欢的,标签为person的节点;9: 给出person孙宏pay的person,被其他person knows的数量;",
        "output": "查询语句为:1: match(a:person where a.name = '黄建国') return a.name, a.id;2: match(a:person where a.name='韩伟')-[e:person_pay_person]->(b:person) return b;3: match(a:person) return a order by a.name desc;4: match(a:person) return a order by a.id asc;5: match(a)-[e:person_knows_person]->(b) return e limit 128;6: match(a:person)-[e:relation]->{1,2}(b) return b;7: match(a where a.name = '徐强')-[e:person_pay_person]->(b:person),(a where a.name = '徐强')<-[e2:person_pay_person]-(c:person) return a, b, c;8: match(a where a.name = '孙强')-[e:person_likes_person]->(b:person)<-[e2:person_likes_person]-(c where c.name = '郑宏') return b;9: match(a:person where a.name='孙宏')-[e:person_pay_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person黄强支付的person,被其他person喜欢的数量",
        "output": "match(a:person where a.name='黄强')-[e:pay]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部国家的伙伴,或其伙伴的伙伴",
        "output": "match(a:country)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为course,名为操作系统的点,返回这些点的value",
        "output": "match(a:course where a.name = '操作系统') return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以174作为请求点id, 源点的id等于输入表id,查询person韩轩relates的person,被其他person relates的数量",
        "output": "with p as (select * from (VALUES(174)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩轩')) -[e:relates ]->(b:person) <-[e2:relates ]-(c:person) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创建了label为orders且被名为张宏和杜建国的点共同创建的节点",
        "output": "match(a where a.name = '张宏')-[e:creates]->(b:orders)<-[e2:creates]-(c where c.name = '杜建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从company华为出发,经过类型为employee的边,走3度到达的person点",
        "output": "match(a:company where a.name='华为')-[e:employee]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,性别,id分组,计算age的个数减94减60的值",
        "output": "return COUNT(a.age) - 94 - 60 group by a.height, a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('陈月',80,196),('赵轩',42,162)作为请求表数据,属性分别为name,id,height, 以属性name作为相等条件,帮我查询名为周国强的person",
        "output": "with p as (select * from (VALUES('陈月',80,196),('赵轩',42,162)) as t(name,id,height))MATCH (a:person WHERE a.name = p.name AND (a.name = '周国强')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,gender, 数据为(29,4230,'famale'), 源点的gender等于输入表gender,请帮我找出和person吴思思之间有person_friend_person关系的person",
        "output": "with p as (select * from (VALUES(29,4230,'famale')) as t(age,salary,gender))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '吴思思')) -[e:person_friend_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以868,776,834,176作为请求点id, 源点的id等于输入表id,请帮我找出全部和university点有has关系的department节点,且边满足条件f1不等于false,目标department节点满足条件id为空",
        "output": "with p as (select * from (VALUES(868),(776),(834),(176)) as t(id)) MATCH (a:university WHERE a.id = p.id) -[e:university_has_department WHERE e.f1 <> FALSE ]->(b:department WHERE b.id IS NULL) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与用户赵建聪有关,且与标签动作有关系的帖子节点",
        "output": "match(a:user where a.name='赵建聪')-[e:publish]-(b:post)-[e2:has]-(c:tag where c.name='动作') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点标签等于电影院,边标签等于上映的边,返回这些边的权重乘131.40的值,和targetId的平均值除56的值",
        "output": "match(a:cinema)-[e:releases]->(b) return e.weight * 131.40, AVG(e.targetId) / 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表645,696,622,874, 以属性id作为相等条件,返回全部源点类型是reader,边类型是reader_likes_book,以及满足条件f0不为空的边",
        "output": "with p as (select * from (VALUES(645),(696),(622),(874)) as t(id)) MATCH (a:reader WHERE a.id = p.id) -[e:reader_likes_book WHERE e.f0 IS NOT NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出同时被标记为Hadoop和SprintBoot的软件节点的共同使用情况。",
        "output": "match(a where a.name = 'Hadoop')-[e:uses]->(b:software)<-[e2:uses]-(c where c.name = 'SprintBoot') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和软件SprintBoot有关的公司,称为X,再请帮我找出和这个X有关联的其他软件,以及和X有关联的公司",
        "output": "match(a:software where a.name = 'SprintBoot')-[e]-(b:company), (b:company)-[e2]-(c:software),(b:company)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部类型是pullRequest的点",
        "output": "match(a:pullRequest) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person杜建聪有colleague关系的1跳以内的环",
        "output": "match(a:person where name = '杜建聪')-[e:colleague]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找post Post_285的全部friend,的f0加910的值",
        "output": "match(a:post where a.name= 'Post_285')-[e:friend]->(b) return e.f0 + 910",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为87的city contain的university, 并将university有关的city的value的求和值赋值给university的name, 接着查询university的name小于87的university cooperate的company",
        "output": "match(a:city where a.id = 87)-[e:contain]->(b:university) let b.name = SUM((b:university)-[e2]-(c:city) => c.value) match(b:university where b.name < 87)-[e3:cooperate]->(d:company) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找创造处方Prescription_412的医生,和这些医生属于的部门",
        "output": "match(a:prescription where name = 'Prescription_412')<-[e:creates]-(b:doctor)-[e2:belong]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表544,373,272,59,188, 以属性id作为相等条件,请帮我找出144个字数除569的和大于52或id小于61的书,根据名字降序排列",
        "output": "with p as (select * from (VALUES(544),(373),(272),(59),(188)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (SUM(a.wordCount / 569) > 52 OR a.id < 61)) RETURN a ORDER BY a.name DESC LIMIT 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被company Bilibili cooperate的university,和Bilibili belong的city",
        "output": "match(a:university)<-[e:cooperate]-(b:company where name = 'Bilibili')-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出北京大学和电子科技大学之间的大学点公共伙伴节点名单。",
        "output": "match(a:university where a.name='北京大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='电子科技大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找创造处方Prescription_317的医生,和这些医生属于的部门",
        "output": "match(a:prescription where name = 'Prescription_317')<-[e:creates]-(b:doctor)-[e2:belong]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 请帮我查找标签为person的全部点,并根据年龄降序排列;2: 请帮我查找152个规格不是small的公司,根据id升序排列;3: 返回person的partner,或其partner的partner;4: 返回源点类型是account,目标点类型是account,类型是account_transfer_account的边;5: 找出全部贷款的朋友,或其朋友的朋友;6: 请帮我找出从account BIN出发,经过标签等于account_repay_loan的边,走2跳到达的loan点;7: 返回所有id为147的person关联的account,和以transfer关系关联了这些account的其他account;8: 找出全部与贷款defaultName有关系的账号的是否冻结;9: 返回名为华为的,id为空,权重大于等于7404.82的朋友,返回这些朋友的权重,和边的f0;",
        "output": "查询语句为:1: match(a:person) return a order by a.age desc;2: match(a:company where a.scale <> 'small') return a order by a.id asc limit 152;3: match(a:person)-[e:partner]->{1,2}(b) return b;4: match(a:account)-[e:account_transfer_account]->(b:account) return e;5: match(a:loan)-[e:friend]->{1,2}(b) return b;6: match(a:account where a.name='BIN')-[e:account_repay_loan]->{2,2}(b:loan) return b;7: match(a:person where a.id = '147')-[e]-(b:account)<-[e2:account_transfer_account]-(c:account) return b,c;8: match(a:loan where a.name='defaultName')-[e]-(b:account) return b.isBlock;9: match(a where a.name='华为')-[e:friend]->(b where (b.id is null) and b.weight >= 7404.82) return b.weight,e.f0;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,name,salary, 数据为('famale','杜国强',1782)的子查询作为输入表, 以属性gender作为相等条件,帮我查询论坛的3度以内的环",
        "output": "with p as (select * from (VALUES('famale','杜国强',1782)) as t(gender,name,salary))MATCH (a:forum WHERE a.gender = p.gender) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为王思思和王轩的,标签为person的点公共的伙伴节点的名单",
        "output": "match(a:person where a.name='王思思')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='王轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person马宏有关系的公司, 返回和这些公司有关联的person的,id加16的平均值",
        "output": "match(a:person where a.name= '马宏')-[e]-(b:company)-[e2]-(c:person) return AVG(c.id + 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请按性别升序排列，帮我找出所有按照身高、姓名和薪资进行分组的编辑。",
        "output": "match(a:publisher) return a.gender group by a.height, a.name, a.salary order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person郑雪之间有投资关系的公司",
        "output": "match(a:person where a.name='郑雪')-[e:invest]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为王若涵的读者,以及与其有关的书,并返回王若涵的名字和这些书的id",
        "output": "match(a:reader where name = '王若涵')-[e]-(b:book) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高和名字对卖家进行分组，然后按年龄升序排序所有结果。",
        "output": "match(a:seller) return a.age group by a.height, a.name order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前72个类型为belong的边",
        "output": "match(a)-[e:belong]->(b) return e limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为PR-415的点belong的repository,并对这些repository的id进行求和",
        "output": "match(a where a.name='PR-415')-[e:belong]->(b:repository) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回吴梅的子女或其他亲属。",
        "output": "match(a:person where a.name = '吴梅')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为145的repository has的user, 并将user有关的issue的createTime的数量赋值给user的age, 接着查询user的age小于145的user likes的repository",
        "output": "match(a:repository where a.id = 145)-[e:has]->(b:user) let b.age = COUNT((b:user)-[e2]-(c:issue) => c.createTime) match(b:user where b.age < 145)-[e3:likes]->(d:repository) return b.age, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为buyer的点有consult关系的seller,并且和这些seller有ask关系的buyer,并且和这些buyer有look关系的goods",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:look]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找doctor陈雪creates的prescription,被其他doctor creates的数量",
        "output": "match(a:doctor where a.name='陈雪')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和person点有认识关系的person节点,且边满足条件f1等于true,目标person节点id大于等于29",
        "output": "match(a:person)-[e:knows where e.f1 = true]->(b:person where b.id >= 29) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有医生节点同时属于传染部和外科，并且标签为医生的？",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)<-[e2:has]-(c where c.name = '外科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以293,688,340,417作为请求点id, 以属性id作为相等条件,返回源点类型为部门,边类型为department_has_teacher,且权重小于114.82的边",
        "output": "with p as (select * from (VALUES(293),(688),(340),(417)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e:department_has_teacher WHERE e.weight < 114.82 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有病人的家属或家属的家属",
        "output": "match(a:patient)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件id大于2或名字不是Order_229或价格在313.05到4842.40之间的节点",
        "output": "match(a where a.id > 2 or a.name <> 'Order_229' or (a.price BETWEEN 313.05 AND 4842.40)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为XXRepo和Flink的,label为仓库的点公共的相关者节点的名单",
        "output": "match(a:repository where a.name='XXRepo')-[e:relation]->(b)<-[e2:relation]-(c:repository where c.name='Flink') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被comment belong数量大于58的film,记为relationCount,再查询这些film belong的person",
        "output": "match(a:film) let a.relationCount = COUNT((a:film)<-[e:belong]-(b:comment) => b.id) match(a where a.relationCount > 58)-[e2:belong]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与订单Order_243有关系的卖家的名字",
        "output": "match(a:orders where a.name='Order_243')-[e]-(b:seller) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为赵建聪和孙建国的，类型为person的点的共同相关者节点名单。",
        "output": "match(a:person where a.name='赵建聪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='孙建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为病人，边标签为接受的边。返回这些边的f0之和与目标点id除以97的结果的最大值。",
        "output": "match(a:patient)-[e:accept]->(b) return MAX(e.f0 + e.f0), COUNT(e.targetId / 97)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询认识person王国强认识的person,的person",
        "output": "match(a:person where name = '王国强')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我找出源点标签等于person,边标签等于person_colleague_person,以及f0小于等于553,目标点id不是45,目标点id小于165的边;2: 请帮我查找person周伟knows的person,被其他person relates的数量;3: 帮我查询源点age的最小值乘62的数量小于等于159或age在24到30之间,边label为person_family_person,且f0在583到699之间或targetId不为空,且f1不是false的边,返回这些边的f0减845除166的最小值;4: 请帮我查找person的三角的环,边label为person_colleague_person, 并返回这些点的id;5: 给出person孙建国 knows的person,返回person relates的person的age加13的值 ;6: 找出person以age分组的gender, 根据gender从小到大排序;7: 查找和person徐若涵之间有person_friend_person关系的person;",
        "output": "查询语句为:1: match(a:person)-[e:person_colleague_person where e.f0 <= 553 and e.targetId <> 45 and e.targetId < 165]->(b) return e;2: match(a:person where a.name='周伟')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c);3: match(a where COUNT(MIN(a.age) * 62) <= 159 or (a.age BETWEEN 24 AND 30))-[e:person_family_person where ((e.f0 BETWEEN 583 AND 699) or (e.targetId is not null)) and e.f1 <> false]->(b) return MIN((e.f0 - 845) / 166);4: match(a:person)-[e:person_colleague_person]->(b)-[e2:person_colleague_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a:person where name = '孙建国')-[e:knows]->(b:person)-[e2:relates]->(c:person) return c.age + 13;6: match(a:person) return a.gender group by a.age order by a.gender asc;7: match(a:person where a.name='徐若涵')-[e:person_friend_person]->(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与订单Order_126有关系的买家的性别",
        "output": "match(a:orders where a.name='Order_126')-[e]-(b:buyer) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为108的pullRequest belong的repository, 并将repository有关的user的gender的最小值赋值给repository的lang, 接着查询repository的lang小于108的repository has的issue",
        "output": "match(a:pullRequest where a.id = 108)-[e:belong]->(b:repository) let b.lang = MIN((b:repository)-[e2]-(c:user) => c.gender) match(b:repository where b.lang < 108)-[e3:has]->(d:issue) return b.lang, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与author张雪有关系的book, 返回和这些book有关联的reader的,height减151的值",
        "output": "match(a:author where a.name= '张雪')-[e]-(b:book)-[e2]-(c:reader) return c.height - 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家杜思思的所有label为伙伴的边,并根据目标点id从大到小排列,返回15个",
        "output": "match(a:buyer where a.name = '杜思思')-[e:partner]->(b) return b order by e.targetId desc limit 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有短袖衣服？",
        "output": "match(a:goods where a.name = '短袖') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询有关id为105的人的评论的朋友，以及与评论相关的其他相关者。",
        "output": "match(a:person where id = '105')-[e]-(b:comment)-[e2:friend]->(c), (b:comment)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件age大于55,salary不为空,salary的平均值小于3349的节点",
        "output": "match(a where a.age > 55 and (a.salary is not null) and AVG(a.salary) < 3349) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询film的partner,及其partner",
        "output": "match(a:film)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为陈雪的patient有relation关系,或有relation的relation关系的prescription",
        "output": "match(a:patient where n.name=陈雪)-[e:relation]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询医生陈科的所有相关者,的srcId的个数乘83除175.80的值",
        "output": "match(a:doctor where a.name= '陈科')-[e:relation]->(b) return COUNT(e.srcId) * 83 / 175.80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄乘8的最小值",
        "output": "MIN(a.age * 8)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标签为学生或大学的点",
        "output": "match(a:student | university) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为属于,且f0大于645或f0对985取余减139.59大于等于171,且f0小于605的边",
        "output": "match(a)-[e:belong where (e.f0 > 645 or e.f0 % 985 - 139.59 >= 171) and e.f0 < 605]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为赵建国和郑建聪的,类型是用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='赵建国')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='郑建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询Order_282中包含的商品，这些商品在其他卖家那里有多少库存。",
        "output": "match(a:orders where a.name='Order_282')-[e:contain]->(b:goods)<-[e2:has]-(c:seller) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和卖家点有拥有关系的商品节点,且边满足条件源点id不为空,目标商品节点满足条件id不为空",
        "output": "match(a:seller)-[e:has where (e.srcId is not null)]->(b:goods where (b.id is not null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和person张伟有关系的person,返回这些点的age,salary",
        "output": "match(a:person where a.name='张伟')-[e]-(b:person) return b.age, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表650,421, 源点的id等于输入表id,查找被电影功夫拥有的标签",
        "output": "with p as (select * from (VALUES(650),(421)) as t(id)) MATCH (a:tag WHERE a.id = p.id) <-[e:film_has_tag ]-(b:film WHERE b.name = '功夫') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表871,318, 以属性id作为相等条件,查找与名为java程序设计和少年闰土的点共同关联的,标签为书的节点",
        "output": "with p as (select * from (VALUES(871),(318)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'java程序设计')) -[e:relates ]->(b:book) <-[e2:relates ]-(c WHERE c.name = '少年闰土') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和software Zookeeper有uses关系的software,再请帮我找出以uses关系关联了Zookeeper的software",
        "output": "match(a:software where a.name = 'Zookeeper')-[e:uses]->(b:software),(a:software where a.name = 'Zookeeper')<-[e2:uses]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点height在171到191之间,目标点stars小于356,且label为likes的边",
        "output": "match(a where (a.height BETWEEN 171 AND 191))-[e:likes]->(b where b.stars < 356) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询city contain的university,返回其源点的id减23的值,以及目标点的value减342减406的最小值",
        "output": "match(a:city)-[e:contain]->(b:university) return a.id - 23, MIN(b.value - 342 - 406)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person黄宏有friend关系的person,再请帮我找出以lover关系关联了黄宏的person",
        "output": "match(a:person where a.name = '黄宏')-[e:friend]->(b:person),(a:person where a.name = '黄宏')<-[e2:lover]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与杜梅存在喜欢关系的仓库,仓库与合并请求存在拥有关系的点,返回这些点的名字",
        "output": "match(a where a.name = '杜梅')-[e:likes]->(b:repository)-[e2:has]->(c:pullRequest) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于person的点,并根据salary升序排列",
        "output": "match(a:person) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点类型为person,边类型为likes的边,返回这些边的f0的求和值加622的数量,和weight除188.80的值",
        "output": "match(a:person)-[e:likes]->(b) return COUNT(SUM(e.f0) + 622), e.weight / 188.80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为撰写,以及满足条件目标点id大于44的边",
        "output": "match(a)-[e:write where e.targetId > 44]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和名为马建聪的person有相关者关系,或有相关者的相关者关系的评论",
        "output": "match(a:person where n.name=马建聪)-[e:relation]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找50个名为黄建国的点creates的标签等于comment的节点,且节点name等于Comment_332",
        "output": "match(a where a.name='黄建国')-[e:person_creates_comment]->(b:comment where b.name = 'Comment_332') return b limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person支付的person, 令person(b)的性别的值等于支付person的person的性别的最小值, 再查找person喜欢的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.gender = MIN((b:person)<-[e2:pay]-(c:person) => c.gender) match(b:person)-[e3:likes]->(d:person) return b.gender, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与徐建聪是朋友关系的人，以及与赵红是家人关系的人，并将他们全部返回。",
        "output": "match(a:person where a.name = '徐建聪')-[e:friend]->(b:person),(c:person where c.name = '赵红')-[e2:family]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person黄建国的全部相关者,的f0乘999的值",
        "output": "match(a:person where a.name= '黄建国')-[e:relation]->(b) return e.f0 * 999",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被公司滴滴雇佣的person",
        "output": "match(a:person)<-[e:employee]-(b:company where b.name='滴滴') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从医生赵科出发，经过标签为诊断的边，跳1下到达病人点。",
        "output": "match(a:doctor where a.name='赵科')-[e:diagnose]->{1,1}(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "人数加83100的值",
        "output": "a.peopleNumber + 83100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表668,723, 以属性id作为相等条件,查找全部源点满足条件name等于滴滴且scale不是small,目标点满足条件age不是15且height小于等于187,且类型是company_employee_person的边",
        "output": "with p as (select * from (VALUES(668),(723)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '滴滴' AND a.scale <> 'small')) -[e:company_employee_person ]->(b WHERE b.age <> 15 AND b.height <= 187) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 帮我查询与买家Jimmy有buyer_cancel_orders关系的1跳以内的环;2: 帮我查询所有源点标签为buyer,边标签为buyer_cancel_orders的边,返回这些边的targetId对6取余减122减929对targetId取余的值,和srcId减145的值;3: 请帮我查找和buyer李梅有buyer_creates_orders关系的orders,再请帮我查找以buyer_consult_seller关系关联了李梅的seller;4: 请帮我查找前58个label为orders_contain_goods的边;5: 查找源点类型为orders,目标点类型为goods,类型为orders_contain_goods的边;6: 返回与orders Order_295和Order_146都存在orders_contain_goods关系的点;7: 查询以cancel关系关联了orders Order_365的buyer;8: 帮我查询buyer cancel的orders,返回其源点的age对43取余乘2617的值,以及目标点的price的平均值加1976.48的最大值;9: 请帮我找出seller马月的所有partner,的targetId的最大值加targetId的数量;",
        "output": "查询语句为:1: match(a:buyer where name = 'Jimmy')-[e:buyer_cancel_orders]->{0,0}(b)->(a) return a.id, b.id as b_id;2: match(a:buyer)-[e:buyer_cancel_orders]->(b) return e.targetId % 6 - 122 - 929 % e.targetId, e.srcId - 145;3: match(a:buyer where a.name = '李梅')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '李梅')<-[e2:buyer_consult_seller]-(c:seller)return a, b, c;4: match(a)-[e:orders_contain_goods]->(b) return e limit 58;5: match(a:orders)-[e:orders_contain_goods]->(b:goods) return e;6: match(a:orders where a.name='Order_295')-[e:orders_contain_goods]->(b)<-[e2:orders_contain_goods]-(c:orders where c.name='Order_146') return b;7: match(a:orders where a.name='Order_365')<-[e:buyer_cancel_orders]-(b:buyer) return b;8: match(a:buyer)-[e:buyer_cancel_orders]->(b:orders) return a.age % 43 * 2617, MAX(AVG(b.price) + 1976.48);9: match(a:seller where a.name= '马月')-[e:partner]->(b) return COUNT(MAX(e.targetId) + e.targetId);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用KHOP函数,以74作为输入,返回运算结果",
        "output": "Call KHOP(74) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查找与作家周红有关,且与书百年孤独有关系的作家节点;2: 查找前146个满足条件salary小于等于1658或id不是153的reader;3: 返回书以id,名字分组的类别, 根据类别从大到小排序;",
        "output": "查询语句为:1: match(a:author where a.name='周红')-[e:author_knows_author]-(b:author)-[e2:author_write_book]-(c:book where c.name='百年孤独') return b;2: match(a:reader where a.salary <= 1658 or a.id <> 153) return a limit 146;3: match(a:book) return a.category group by a.id, a.name order by a.category desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与公司美团和滴滴都存在雇佣关系的点",
        "output": "match(a:company where a.name='美团')-[e:employee]->(b)<-[e2:employee]-(c:company where c.name='滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有源点类型为账号，目标点类型为账号，且类型为转账的边。",
        "output": "match(a:account)-[e:transfer]->(b:account) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,salary, 数据为('male',158,5671), 以属性height作为相等条件,请帮我找出person的2跳的环",
        "output": "with p as (select * from (VALUES('male',158,5671)) as t(gender,height,salary))MATCH (a:person WHERE a.height = p.height) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为徐梅的节点属于的医生或部门",
        "output": "match(a where a.name='徐梅')-[e:belong]->(b:doctor | department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表75,658,31,679,547, 以属性id作为相等条件,查询名为武汉大学的点拥有的部门",
        "output": "with p as (select * from (VALUES(75),(658),(31),(679),(547)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '武汉大学')) -[e:university_has_department ]->(b:department) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为赵科的,createTime等于2034年01月18日或value为空的friend,返回这些friend的wordCount,和边的f1,f0",
        "output": "match(a where a.name='赵科')-[e:friend]->(b where b.createTime = '2034-01-18' or (b.value is null)) return b.wordCount,e.f1, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照年龄、薪资和ID对读者进行分组，然后按名称升序排序。",
        "output": "match(a:reader) return a.name group by a.age, a.salary, a.id order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('杜梅',5307,86),('徐月',9847,15),('张月',2911,54)作为请求表数据,属性分别为name,salary,age, 以属性age作为相等条件,找出和person有关联的person节点,并根据其薪资,名字分组,返回薪资,名字,以及salary的平均值对4825取余的值",
        "output": "with p as (select * from (VALUES('杜梅',5307,86),('徐月',9847,15),('张月',2911,54)) as t(name,salary,age))MATCH (a:person WHERE a.age = p.age) -[e:person_knows_person ]-(b:person) RETURN b.salary, b.name, AVG(b.salary) % 4825 GROUP BY b.salary, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以134,872,588,717作为请求点id, 源点的id等于输入表id,查找orders Order_107contain的goods,被其他buyer look的数量",
        "output": "with p as (select * from (VALUES(134),(872),(588),(717)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_107')) -[e:orders_contain_goods ]->(b:goods) <-[e2:buyer_look_goods ]-(c:buyer) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为韩科和周月的点共同拥有的,label为账号的节点",
        "output": "match(a where a.name = '韩科')-[e:own]->(b:account)<-[e2:own]-(c where c.name = '周月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person徐思思和张思思都存在own关系的点",
        "output": "match(a:person where a.name='徐思思')-[e:own]->(b)<-[e2:own]-(c:person where c.name='张思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以311,8,935,284,384作为请求点id, 以属性id作为相等条件,请帮我查找与person马思琪存在person_likes_person关系,且与person王若涵存在person_knows_person关系的person节点，返回这些person的gender,及person马思琪的age,及person王若涵的name",
        "output": "with p as (select * from (VALUES(311),(8),(935),(284),(384)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '马思琪')) -[e:person_likes_person ]->(b:person) <-[e2:person_knows_person ]-(c:person WHERE c.name = '王若涵') RETURN a.age, b.gender, c.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前158个salary为空或name不等于Alan或height是199的patient",
        "output": "match(a:patient where (a.salary is null) or a.name <> 'Alan' or a.height = 199) return a limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f0,srcId,timeStamp, 数据为(872,142,1997-10-11),(931,33,2025-05-15), 源点的timeStamp等于输入表timeStamp,返回和论坛有关联的person节点,并根据其年龄,id分组,返回年龄,id,以及身高对173取余的最大值",
        "output": "with p as (select * from (VALUES(872,142,1997-10-11),(931,33,2025-05-15)) as t(f0,srcId,timeStamp))MATCH (a:forum WHERE a.timeStamp = p.timeStamp) -[e:forum_contain_person ]-(b:person) RETURN b.age, b.id, MAX(b.height % 173) GROUP BY b.age, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出'department'节点下的'学生'节点选择了哪些'课程'。",
        "output": "match(a:department where a.name = '经管学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部赵雪的点创造的处方,然后查询赵雪被拥有的部门,一起返回",
        "output": "match(a where a.name = '赵雪')-[e:creates]->(b:prescription),(a where a.name = '赵雪')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以793,462,782,867,349作为请求点id, 以属性id作为相等条件,请帮我找出公司合作的大学,返回其源点的id除id的最大值,以及目标点的等级减等级除3除978的和",
        "output": "with p as (select * from (VALUES(793),(462),(782),(867),(349)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_cooperate_university ]->(b:university) RETURN MAX(a.id / a.id), SUM((b.level - b.level) / 3 / 978) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 查询label为orders的点,并根据id降序排列;2: 请帮我查找与买家韩思琪有buyer_consult_seller关系的2跳以内的环;3: 查找buyer马梅consult的seller,被其他buyer consult的数量;4: 查找买家孙伟 创造的订单,返回订单 包含的商品的id除30的数量 ;5: 帮我查询被orders Order_357contain的goods;6: 请帮我查找名为张红的seller;7: 给出订单的3度以内的环;8: 给出源点label为seller,目标点label为goods,label为seller_has_goods的边;9: 请帮我查找与卖家郑科有关系的商品, 返回和这些商品有关联的商品的,价值除273的数量;",
        "output": "查询语句为:1: match(a:orders) return a order by a.id desc;2: match(a:buyer where name = '韩思琪')-[e:buyer_consult_seller]->{0,1}(b)->(a) return a.id, b.id as b_id;3: match(a:buyer where a.name='马梅')-[e:buyer_consult_seller]->(b:seller)<-[e2:buyer_consult_seller]-(c:buyer) return COUNT(c);4: match(a:buyer where name = '孙伟')-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return COUNT(c.id / 30);5: match(a:goods)<-[e:orders_contain_goods]-(b:orders where b.name='Order_357') return a, b;6: match(a:seller where a.name = '张红') return a;7: match(a:orders)->{0,2}(b)->(a) return a.id, b.id as b_id;8: match(a:seller)-[e:seller_has_goods]->(b:goods) return e;9: match(a:seller where a.name= '郑科')-[e]-(b:goods)-[e2]-(c:goods) return COUNT(c.value / 273);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,height,gender, 数据为(9,177,'famale'),(55,194,'male'),(54,151,'male'),(6,179,'male')的子查询作为输入表, 源点的height等于输入表height,给出前1个类型为loan_deposit_account的边",
        "output": "with p as (select * from (VALUES(9,177,'famale'),(55,194,'male'),(54,151,'male'),(6,179,'male')) as t(id,height,gender))MATCH (a WHERE a.height = p.height) -[e:loan_deposit_account ]->(b) RETURN e LIMIT 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和doctor点有creates关系的prescription节点,且边满足条件targetId对97取余为948,目标prescription节点满足条件weight在479到896之间",
        "output": "match(a:doctor)-[e:creates where e.targetId % 97 = 948]->(b:prescription where (b.weight BETWEEN 479 AND 896)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,salary,height, 数据为('famale',7229,163),('male',1348,195), 源点的salary等于输入表salary,返回与用户徐红有user_creates_issue关系的3度的环",
        "output": "with p as (select * from (VALUES('famale',7229,163),('male',1348,195)) as t(gender,salary,height))MATCH (a:user WHERE a.salary = p.salary AND (name = '徐红')) -[e:user_creates_issue ]->{2,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算height对169取余减198的和",
        "output": "return SUM(a.height % 169 - 198) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为微软的公司",
        "output": "match(a:company where a.name = '微软') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出36个名为中国军事论坛的点contain的label为user的节点,且其age大于等于77",
        "output": "match(a where a.name='中国军事论坛')-[e:contain]->(b:user where b.age >= 77) return b limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 帮我查询从医生杜梅出发,经过类型为doctor_creates_prescription的边,走3度到达的处方点;2: 请帮我查找68个名为Prescription_313的点contain的标签等于medicine的节点,且其category不等于安眠药或price为空;3: 查询department眼科的relation,的targetId的个数对141取余的值;4: 返回医生杜若涵的所有label为相关者的边,并根据f0从大到小排列,返回94个;5: 给出所有doctor以gender分组的id, 根据id升序排序;",
        "output": "查询语句为:1: match(a:doctor where a.name='杜梅')-[e:doctor_creates_prescription]->{3,3}(b:prescription) return b;2: match(a where a.name='Prescription_313')-[e:prescription_contain_medicine]->(b:medicine where b.category <> '安眠药' or (b.price is null)) return b limit 68;3: match(a:department where a.name= '眼科')-[e:relation]->(b) return COUNT(e.targetId) % 141;4: match(a:doctor where a.name = '杜若涵')-[e:relation]->(b) return b order by e.f0 desc limit 94;5: match(a:doctor) return a.id group by a.gender order by a.id asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为陈月和周伟的点共同喜欢的,标签为书的节点",
        "output": "match(a where a.name = '陈月')-[e:likes]->(b:book)<-[e2:likes]-(c where c.name = '周伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为吴轩的点creates的pullRequest",
        "output": "match(a where a.name='吴轩')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签等于医生,边标签等于创造,以及f0不是109.06或f0在771到813之间,且权重小于180.81的边",
        "output": "match(a:doctor)-[e:creates where (e.f0 <> 109.06 or (e.f0 BETWEEN 771 AND 813)) and e.weight < 180.81]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出杜月的关系关系",
        "output": "match(a:person where a.name='杜月')-[e:relation]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点名字等于天涯论坛,边标签为包含,且源点id小于等于89的边,返回这些边的源点id乘78的最大值",
        "output": "match(a where a.name = '天涯论坛')-[e:contain where e.srcId <= 89]->(b) return MAX(e.srcId * 78)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为Comment_478的,id在82到89之间,价值大于等于669的朋友,返回这些朋友的id,和边的目标点id,f0,f1",
        "output": "match(a where a.name='Comment_478')-[e:friend]->(b where (b.id BETWEEN 82 AND 89) and b.value >= 669) return b.id,e.targetId, e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出cinema横店影院和tag科幻相关的film节点",
        "output": "match(a:cinema where a.name='横店影院')-[e:releases]-(b:film)-[e2:has]-(c:tag where c.name='科幻') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找177个与孙若涵和赵若涵都存在关系的商品或卖家节点",
        "output": "match(a where a.name='孙若涵')-[e]->(b:goods | seller)<-[e2]-(c where c.name='赵若涵') return b limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与李伟有关且与滴滴公司有联系的任何人。",
        "output": "match(a:person where a.name='李伟')-[e:knows]-(b:person)-[e2:belong]-(c:company where c.name='滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询李月和郑思琪共同的友人。",
        "output": "match(a:person where a.name='李月')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='郑思琪') return b limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我找出与部门耳鼻喉科有关系的病人, 返回和这些病人有关联的病人的,年龄乘84的最小值;2: 给出所有源点满足条件身高在178到184之间,目标点满足条件年龄在63到90之间或名字为杜轩,且类型为doctor_diagnose_patient的边;3: 帮我查询所有和doctor徐科之间有doctor_diagnose_patient关系的patient;4: 查找8个部门放射科和急诊部,共同的伙伴;5: 返回全部源点id大于等于34且salary为空,或name不等于何科,目标点weight对weight取余大于53,且类型是patient_accept_prescription的边;6: 查询前195个满足条件创建时间是1999年06月08日的处方;",
        "output": "查询语句为:1: match(a:department where a.name= '耳鼻喉科')-[e]-(b:patient)-[e2]-(c:patient) return MIN(c.age * 84);2: match(a where (a.height BETWEEN 178 AND 184))-[e:doctor_diagnose_patient]->(b where (b.age BETWEEN 63 AND 90) or b.name = '杜轩') return e;3: match(a:doctor where a.name='徐科')-[e:doctor_diagnose_patient]->(b:patient) return b;4: match(a:department where a.name='放射科')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='急诊部') return b limit 8;5: match(a where (a.id >= 34 and (a.salary is null)) or a.name <> '何科')-[e:patient_accept_prescription]->(b where b.weight % b.weight > 53) return e;6: match(a:prescription where a.createTime = '1999-06-08') return a limit 195;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点label为用户,边label为创造,以及满足条件f1等于true或f1为false,且权重大于144.31的边",
        "output": "match(a:user)-[e:creates where (e.f1 = true or e.f1 = false) and e.weight > 144.31]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为韩科的节点创造的医生或病人",
        "output": "match(a where a.name='韩科')-[e:creates]->(b:doctor | patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有标签等于person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询包含用户张科的论坛,和这些论坛包含的用户",
        "output": "match(a:user where name = '张科')<-[e:contain]-(b:forum)-[e2:contain]->(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部名为悲惨世界的,类别不是小说的引用,返回这些引用的价格,和边的源点id,权重",
        "output": "match(a where a.name='悲惨世界')-[e:book_refers_book]->(b where b.category <> '小说') return b.price,e.srcId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下吴国强创建的订单",
        "output": "match(a:orders)<-[e:creates]-(b:buyer where b.name='吴国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 找出类型为company的全部点,并根据name从大到小排列;2: 帮我查询id为100的大学有关的大学的朋友, 再帮我查询和大学有关系的朋友;3: 请帮我查找130个名为重庆的点属于的标签等于国家的节点,且节点id小于等于77;4: 帮我查询所有武汉的点包含的大学,然后帮我查询武汉被包含的国家,一起返回;5: 请帮我查找94个id不为空的大学,根据名字降序排列;6: 帮我查询全部和城市杭州有1到4度关系的国家;7: 请帮我找出148个城市武汉和纽约,共同的朋友;8: 请帮我查找label为university,名为武汉大学的点,返回这些点的value,id,name;9: 找出所有国家以价值分组的id, 根据id升序排序;",
        "output": "查询语句为:1: match(a:company) return a order by a.name desc;2: match(a:university where id = '100')-[e]-(b:university)-[e2:friend]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d;3: match(a where a.name='重庆')-[e:city_belong_country]->(b:country where b.id <= 77) return b limit 130;4: match(a where a.name = '武汉')-[e:city_contain_university]->(b:university),(a where a.name = '武汉')<-[e2:country_contain_city]-(c:country) return a, b, c;5: match(a:university where (a.id is not null)) return a order by a.name desc limit 94;6: match(a:city where a.name='杭州')-[e]->{1,4}(b:country) return b;7: match(a:city where a.name='武汉')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='纽约') return b limit 148;8: match(a:university where a.name = '武汉大学') return a.value, a.id, a.name;9: match(a:country) return a.id group by a.value order by a.id asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出与person马宏和周梅都存在person_likes_person关系的点;2: 查找全部与person徐轩有关系的person的身高;3: 返回名为孙月的person,以及与其有关的person,并返回孙月的名字和这些person的身高;4: 给出类型是person的全部点,并根据身高降序排列;5: 返回person马思思的类型是朋友的边,并根据f0从大到小排列,返回102个;6: 给出全部类型为person的点;",
        "output": "查询语句为:1: match(a:person where a.name='马宏')-[e:person_likes_person]->(b)<-[e2:person_likes_person]-(c:person where c.name='周梅') return b;2: match(a:person where a.name='徐轩')-[e]-(b:person) return b.height;3: match(a:person where name = '孙月')-[e]-(b:person) return a.name, b.height;4: match(a:person) return a order by a.height desc;5: match(a:person where a.name = '马思思')-[e:friend]->(b) return b order by e.f0 desc limit 102;6: match(a:person) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 返回源点height在158到160之间,边标签等于person_family_person,且weight为空的边,返回这些边的f0的个数减503的值;2: 请帮我找出全部与person张若涵有关系的person的名字;3: 查找person的3跳的环;4: 帮我查询全部源点height在177到195之间或salary大于11或height在153到180之间,目标点id减id大于等于169且name不是李国强且id大于等于19,且label为person_lover_person的边;5: 帮我查询标签等于person的点,返回13个;6: 帮我查询与person徐红和李国强都存在person_parent_person关系的点;",
        "output": "查询语句为:1: match(a where (a.height BETWEEN 158 AND 160))-[e:person_family_person where (e.weight is null)]->(b) return COUNT(e.f0) - 503;2: match(a:person where a.name='张若涵')-[e]-(b:person) return b.name;3: match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id;4: match(a where (a.height BETWEEN 177 AND 195) or a.salary > 11 or (a.height BETWEEN 153 AND 180))-[e:person_lover_person]->(b where b.id - b.id >= 169 and b.name <> '李国强' and b.id >= 19) return e;5: match(a:person) return a limit 13;6: match(a:person where a.name='徐红')-[e:person_parent_person]->(b)<-[e2:person_parent_person]-(c:person where c.name='李国强') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与处方Prescription_303有关系的医生的年龄",
        "output": "match(a:prescription where a.name='Prescription_303')-[e]-(b:doctor) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前132个名字不是历史或id小于28的标签",
        "output": "match(a:tag where a.name <> '历史' or a.id < 28) return a limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出salary小于等于4或id是57的person likes的comment的名称,以及这些comment belong的film的名称",
        "output": "match(a:person where a.salary <= 4 or a.id = 57)-[e:likes]->(b:comment)-[e2:belong]->(c:film) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询男性用户发布的帖子名称和它们所带的标签。",
        "output": "match(a:user where a.gender = 'famale')-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前183个满足条件创建时间不等于2001年03月26日或名字为PR-379或id为空的合并请求",
        "output": "match(a:pullRequest where a.createTime <> '2001-03-26' or a.name = 'PR-379' or (a.id is null)) return a limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找城市的朋友,或其朋友的朋友",
        "output": "match(a:city)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,id, 数据为('王思思',179,96),('郑轩',192,11),('陈建国',192,56), 以属性id作为相等条件,返回person李红的所有类型是朋友的边,并根据权重降序排列,返回54个",
        "output": "with p as (select * from (VALUES('王思思',179,96),('郑轩',192,11),('陈建国',192,56)) as t(name,height,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '李红')) -[e:person_friend_person ]->(b) RETURN b ORDER BY e.weight DESC LIMIT 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为生物学院的节点拥有的部门",
        "output": "match(a where a.name='生物学院')-[e:has]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,height,gender, 数据为(65,151,'male'),(41,180,'male'),(45,173,'male'),(42,185,'male'), 以属性id作为相等条件,请帮我查找87个与蚂蚁集团和谷歌都存在关系的account节点",
        "output": "with p as (select * from (VALUES(65,151,'male'),(41,180,'male'),(45,173,'male'),(42,185,'male')) as t(id,height,gender))MATCH (a WHERE a.id = p.id AND (a.name = '蚂蚁集团')) -[e ]->(b:account) <-[e2 ]-(c WHERE c.name = '谷歌') RETURN b LIMIT 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄分组,计算薪资乘2881的平均值",
        "output": "return AVG(a.salary * 2881) group by a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找标签为orders_contain_goods,并且目标点id不等于165或f1不是true的边",
        "output": "match(a)-[e:orders_contain_goods where e.targetId <> 165 or e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和person赵思琪有关系的person,返回这些点的年龄,性别",
        "output": "match(a:person where a.name='赵思琪')-[e]-(b:person) return b.age, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取id为118的university相关的company的relation，然后获取这个company相关的friend。",
        "output": "match(a:university where id = '118')-[e]-(b:company)-[e2:relation]->(c), (b:company)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为马红的卖家或者其合作伙伴有关的商品",
        "output": "match(a:seller where n.name=马红)-[e:partner]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出70个和标签等于医生的点有创造关系的处方,且和这些处方有包含关系的药品",
        "output": "match(a:doctor)-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return c limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被医生周强诊断的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='周强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点类型为person,边类型为家人,并且满足条件目标点id小于155或f0不等于913,且源点id乘源点id小于等于132的边",
        "output": "match(a:person)-[e:family where (e.targetId < 155 or e.f0 <> 913) and e.srcId * e.srcId <= 132]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person徐雪和张科都存在lover关系的点",
        "output": "match(a:person where a.name='徐雪')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='张科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为计算机体系结构的课程,以及与其有关的大学,并返回计算机体系结构的名字和这些大学的名字",
        "output": "match(a:course where name = '计算机体系结构')-[e]-(b:university) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person周强knows的person,以及knows这些person的person",
        "output": "match(a:person where name = '周强')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询123个和类型为大学的点有拥有关系的部门,且和这些部门有拥有关系的学生",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student) return c limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 阿里是一家公司。",
        "output": "match(a:company where a.name = '阿里') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id,value分组,计算value乘78的值",
        "output": "return a.value * 78 group by a.name, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从person李宏出发,经过类型为colleague的边,走1到4跳到达的person点",
        "output": "match(a:person where a.name='李宏')-[e:colleague]->{1,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与处方ID为103的用户相关的用户，并找出这些用户的朋友。",
        "output": "match(a:prescription where id = '103')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight加940的平均值",
        "output": "AVG(a.weight + 940)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找buyer郑国强的类型为partner的边,并根据f0从小到大排列,返回85个",
        "output": "match(a:buyer where a.name = '郑国强')-[e:partner]->(b) return b order by e.f0 asc limit 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与学生赵伟有关系的部门, 返回和这些部门有关联的学生的,id对48取余的值",
        "output": "match(a:student where a.name= '赵伟')-[e]-(b:department)-[e2]-(c:student) return c.id % 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为教师,名为何宏的点,返回这些点的薪资",
        "output": "match(a:teacher where a.name = '何宏') return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回3到53岁或名字为孙月的人的喜欢评论的名称，以及这些评论所属的影片名称。",
        "output": "match(a:person where (a.age BETWEEN 3 AND 53) or a.name = '孙月')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为person的全部点,并根据名字从大到小排列",
        "output": "match(a:person) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表304,490,156, 以属性id作为相等条件,给出所有id为50的订单关联的卖家,和以咨询关系关联了这些卖家的其他买家",
        "output": "with p as (select * from (VALUES(304),(490),(156)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.id = '50')) -[e ]-(b:seller) <-[e2:buyer_consult_seller ]-(c:buyer) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person吴思思有关系的person的名字",
        "output": "match(a:person where a.name='吴思思')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有id为84的teacher关联的teacher,和以has关系关联了这些teacher的其他department",
        "output": "match(a:teacher where a.id = '84')-[e]-(b:teacher)<-[e2:department_has_teacher]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为南京大学的点的,名字的和大于1249的相关者,返回这些相关者的人数,和边的权重",
        "output": "match(a where a.name='南京大学')-[e:relation]->(b where SUM(b.name) > 1249) return b.peopleNumber,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找城市广州的全部相关者,的f0的个数乘f0的值",
        "output": "match(a:city where a.name= '广州')-[e:relation]->(b) return COUNT(e.f0) * e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与医生ID为36的处方相关的医生，然后查询这些医生的合作伙伴。",
        "output": "match(a:prescription where id = '36')-[e]-(b:doctor)-[e2:relation]->(c), (b:doctor)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为person，边标签为申请的边。返回这些边的weight最大值加181.83以及weight的平均值乘以155.46。",
        "output": "match(a:person)-[e:apply]->(b) return MAX(e.weight) + 181.83, AVG(e.weight) * 155.46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我找出源点性别是famale,性别为famale,id小于等于98,边label为doctor_creates_prescription,且满足条件f1为false,源点id为空的边,返回这些边的源点id乘13的值;2: 找出类型是doctor_creates_prescription,以及满足条件源点id是633的边;3: 请帮我找出全部部门以名字,权重分组的名字, 根据名字从大到小排序;4: 请帮我找出所有和prescription Prescription_351有关系的medicine节点,返回这些点的id,price,name;5: 找出所有源点类型是医生,边类型是doctor_diagnose_patient的边,返回这些边的权重加192.58的和,和f0对701取余加f0除61的最大值;6: 找出label为patient的所有点,并根据id从大到小排列;7: 给出176个名为张红的点accept的标签为prescription的节点,且其createTime为2015年07月15日;",
        "output": "查询语句为:1: match(a where a.gender = 'famale' and a.gender = 'famale' and a.id <= 98)-[e:doctor_creates_prescription where e.f1 = false and (e.srcId is null)]->(b) return e.srcId * 13;2: match(a)-[e:doctor_creates_prescription where e.srcId = 633]->(b) return e;3: match(a:department) return a.name group by a.name, a.weight order by a.name desc;4: match(a:prescription where a.name='Prescription_351')-[e]-(b:medicine) return b.id, b.price, b.name;5: match(a:doctor)-[e:doctor_diagnose_patient]->(b) return SUM(e.weight + 192.58), MAX((e.f0 % 701 + e.f0) / 61);6: match(a:patient) return a order by a.id desc;7: match(a where a.name='张红')-[e:patient_accept_prescription]->(b:prescription where b.createTime = '2015-07-15') return b limit 176;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "提供company的关系，或者关系中的关系。",
        "output": "match(a:company)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与公司谷歌有关系的软件的是否开源",
        "output": "match(a:company where a.name='谷歌')-[e]-(b:software) return b.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与person有关系的person节点,且person节点的salary为空,并返回这些person的salary除3993的最小值,以及person的salary加3227的和",
        "output": "match(a:person)-[e]->(b:person where (b.salary is null)) return MIN(b.salary / 3993), SUM(b.salary + 3227)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为person的所有点，按 id 从大到小排序。",
        "output": "match(a:person) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找university has的department,返回其源点的id的和乘7的值,以及目标点的value的最小值除917的值",
        "output": "match(a:university)-[e:has]->(b:department) return SUM(a.id) * 7, MIN(b.value) / 917",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询apply loan loan_30的person,和这些person invest的company",
        "output": "match(a:loan where name = 'loan_30')<-[e:apply]-(b:person)-[e2:invest]->(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和公司美团有关的软件,再帮我查询和美团创造的其他软件,返回它们",
        "output": "match(a:company where a.name = '美团')-[e]-(b:software), (a:company)-[e2:creates]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点id不是13,名字为韩思琪,年龄小于18,边label为选择,且满足条件f0不是555,源点id为空,f0大于等于672的边,返回这些边的f0除623的值",
        "output": "match(a where a.id <> 13 and a.name = '韩思琪' and a.age < 18)-[e:selects where e.f0 <> 555 and (e.srcId is null) and e.f0 >= 672]->(b) return e.f0 / 623",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Iw', 'KV', 65作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('Iw', 'KV', 65) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与标签为'账号'的点有转账关系、与这些账号有还款关系、与这些贷款有存款关系的账号。",
        "output": "match(a:account)-[e:transfer]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,name,id, 数据为('male','何强',1),('male','黄建国',44),('famale','孙科',88), 以属性gender作为相等条件,请帮我查找与person何宏有person_knows_person关系的3跳以内的环",
        "output": "with p as (select * from (VALUES('male','何强',1),('male','黄建国',44),('famale','孙科',88)) as t(gender,name,id))MATCH (a:person WHERE a.gender = p.gender AND (name = '何宏')) -[e:person_knows_person ]->{0,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找171个名为Post_370的点拥有的标签等于标签的节点,且其价值大于846或价值小于等于829",
        "output": "match(a where a.name='Post_370')-[e:has]->(b:tag where b.value > 846 or b.value <= 829) return b limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您需要查询哪些商品节点？这些商品节点的价格必须小于等于576.25,并且需要返回这些节点的销量乘143.78的最大值，以及它们ID对19取余的最小值。",
        "output": "match(a:seller)-[e]->(b:goods where b.price <= 576.25) return MAX(b.sellerNumber * 143.78), MIN(b.id % 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回8个与韩思琪和周建聪都存在关系的用户节点",
        "output": "match(a where a.name='韩思琪')-[e]->(b:user)<-[e2]-(c where c.name='周建聪') return b limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为徐宏和李伟的点共同创造的,label为合并请求的节点",
        "output": "match(a where a.name = '徐宏')-[e:creates]->(b:pullRequest)<-[e2:creates]-(c where c.name = '李伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以73,811,104,878,480作为请求点id, 以属性id作为相等条件,查找类型为大学的点,并根据等级从大到小排列",
        "output": "with p as (select * from (VALUES(73),(811),(104),(878),(480)) as t(id)) MATCH (a:university WHERE a.id = p.id) RETURN a ORDER BY a.level DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,price,name, 数据为(13,2761.62,'Order_455')的子查询作为输入表, 以属性id作为相等条件,请帮我找出标签等于orders的全部点,并根据id从大到小排列",
        "output": "with p as (select * from (VALUES(13,2761.62,'Order_455')) as t(id,price,name))MATCH (a:orders WHERE a.id = p.id) RETURN a ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和贷款loan_24有关的公司,称为X,再查找和这个X有关联的其他贷款,以及和X有关联的公司",
        "output": "match(a:loan where a.name = 'loan_24')-[e]-(b:company), (b:company)-[e2]-(c:loan),(b:company)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点gender等于male或height大于等于180或gender不是famale,目标点id大于等于39,且类型是colleague的边",
        "output": "match(a where a.gender = 'male' or a.height >= 180 or a.gender <> 'famale')-[e:colleague]->(b where b.id >= 39) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,name,height, 数据为(78,'王思思',150),(81,'王建国',197)的子查询作为输入表, 源点的age等于输入表age,请帮我找出前66个标签为person_belong_company的边",
        "output": "with p as (select * from (VALUES(78,'王思思',150),(81,'王建国',197)) as t(age,name,height))MATCH (a WHERE a.age = p.age) -[e:person_belong_company ]->(b) RETURN e LIMIT 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与 XiaoHu 相关的账户，找出 XiaoHu 偿还的贷款，然后返回它们。",
        "output": "match(a:account where a.name = 'XiaoHu')-[e]-(b:account), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以184,778作为请求点id, 源点的id等于输入表id,查询和university电子科技大学有university_has_department关系的department,以及和student孙思思有student_selects_course关系的course,将它们都返回",
        "output": "with p as (select * from (VALUES(184),(778)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name = '电子科技大学')) -[e:university_has_department ]->(b:department) , (c:student WHERE c.name = '孙思思') -[e2:student_selects_course ]->(d:course) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点label为person,边label为lover的边,返回这些边的f0的求和值乘500的值,和weight乘weight乘targetId的值",
        "output": "match(a:person)-[e:lover]->(b) return SUM(e.f0) * 500, e.weight * e.weight * e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为166的点的权重,状态,创建时间",
        "output": "match(a where a.id = 166) return a.weight, a.status, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person认识数量大于162的person,记为relationCount,再查询这些person认识的person",
        "output": "match(a:person) let a.relationCount = MAX((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 162)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和patient点有accept关系的prescription节点,且边满足条件f0大于689,目标prescription节点weight大于等于429",
        "output": "match(a:patient)-[e:accept where e.f0 > 689]->(b:prescription where b.weight >= 429) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与PR-81存在属于关系的仓库,仓库与用户存在拥有关系的点,返回这些点的id",
        "output": "match(a where a.name = 'PR-81')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和名为UME的电影院有伙伴关系,或有伙伴的伙伴关系的电影",
        "output": "match(a:cinema where n.name=UME)-[e:partner]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为49的person有关的person的family, 再找出和person有关系的lover",
        "output": "match(a:person where id = 49)-[e]-(b:person)-[e2:family]->(c), (b:person)-[e3:lover]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查找person李梅认识的person,被其他person关联的数量;2: 给出全部张伟的点knows的person,然后给出张伟被relates的person,一起返回;3: 找出源点年龄大于72,边类型是person_friend_person,且f0不为空的边,返回这些边的权重对198.11取余的值;4: 查询person杜科的全部类型是恋人的边,并根据权重降序排列,返回136个;",
        "output": "查询语句为:1: match(a:person where a.name='李梅')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c);2: match(a where a.name = '张伟')-[e:knows]->(b:person),(a where a.name = '张伟')<-[e2:relates]-(c:person) return a, b, c;3: match(a where a.age > 72)-[e:person_friend_person where (e.f0 is not null)]->(b) return e.weight % 198.11;4: match(a:person where a.name = '杜科')-[e:person_lover_person]->(b) return b order by e.weight desc limit 136;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和repository点有has关系的issue节点,且边满足条件f0在565到716之间,目标issue节点id大于等于1",
        "output": "match(a:repository)-[e:has where (e.f0 BETWEEN 565 AND 716)]->(b:issue where b.id >= 1) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与蚂蚁集团所在城市有关联的城市",
        "output": "match(a:company where a.name='蚂蚁集团')<-[e:contain]-(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为周轩的节点认识的person",
        "output": "match(a where a.name='周轩')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与编辑有关系的所有作家节点，并返回这些节点中身高加155后对161取余的数量，以及身高对161取余的值。",
        "output": "match(a:publisher)-[e]->(b:author where (b.id is null)) return COUNT(b.height + 155 % b.height), b.height % 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,name分组,计算salary乘4125除187的值",
        "output": "return a.salary * 4125 / 187 group by a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以合作关系关联了公司谷歌的大学",
        "output": "match(a:company where a.name='谷歌')<-[e:cooperate]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和名为巴黎的城市有相关者关系,或有相关者的相关者关系的大学",
        "output": "match(a:city where n.name=巴黎)-[e:relation]->{1,2}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和作家点有认识关系的作家节点,且边满足条件f0不是595,目标作家节点性别等于famale",
        "output": "match(a:author)-[e:knows where e.f0 <> 595]->(b:author where b.gender = 'famale') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为Amily的点发布的帖子,并对这些帖子的字数进行求和",
        "output": "match(a where a.name='Amily')-[e:publish]->(b:post) return SUM(b.wordCount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表439,377,156,91,833, 源点的id等于输入表id,请帮我找出与书白夜行有关系的书, 返回和这些书有关联的书的,id的个数减11的最小值",
        "output": "with p as (select * from (VALUES(439),(377),(156),(91),(833)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.name = '白夜行')) -[e ]-(b:book) -[e2 ]-(c:book) RETURN MIN(COUNT(c.id) - 11) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为person,名为吴轩的点,返回这些点的id",
        "output": "match(a:person where a.name = '吴轩') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有类型是person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与student黄强和徐国强都存在selects关系的点",
        "output": "match(a:student where a.name='黄强')-[e:selects]->(b)<-[e2:selects]-(c:student where c.name='徐国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与79个账号类型的点有转账关系的账号，以及这些账号与其他账号之间的转账关系",
        "output": "match(a:account)-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value分组,计算id的求和值除id减786的值",
        "output": "return SUM(a.id) / a.id - 786 group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询卖家源点类型为seller,边类型为has的边，返回这些边的目标ID对9取余的值和weight的个数乘以138.74除以803的值。",
        "output": "match(a:seller)-[e:has]->(b) return e.targetId % 9, COUNT(e.weight) * 138.74 / 803",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person郑月申请的贷款,被其他公司申请的数量",
        "output": "match(a:person where a.name='郑月')-[e:apply]->(b:loan)<-[e2:apply]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company字节有关的company,再返回和字节apply的其他loan,返回它们",
        "output": "match(a:company where a.name = '字节')-[e]-(b:company), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表219,182, 源点的id等于输入表id,查询标签为company,名为字节的点,返回这些点的id,name,scale",
        "output": "with p as (select * from (VALUES(219),(182)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '字节')) RETURN a.id, a.name, a.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找forum中国诗词论坛和历史相关的帖子",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]-(b:post)-[e2:has]-(c:tag where c.name='历史') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 找出类型是buyer_creates_orders,以及满足条件timeStamp为2028年12月20日或f0为530或f0为空的边;2: 帮我查询所有源点标签为买家,目标点标签为订单,标签为buyer_creates_orders的边;3: 查询满足条件价值小于3659.95且销量在891.67到1311.73之间的节点;",
        "output": "查询语句为:1: match(a)-[e:buyer_creates_orders where e.timeStamp = '2028-12-20' or e.f0 = 530 or (e.f0 is null)]->(b) return e;2: match(a:buyer)-[e:buyer_creates_orders]->(b:orders) return e;3: match(a where a.value < 3659.95 and (a.sellerNumber BETWEEN 891.67 AND 1311.73)) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前60个满足条件薪资除4780的数量是2376的person",
        "output": "match(a:person where COUNT(a.salary / 4780) = 2376) return a limit 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前95个label为发布的边",
        "output": "match(a)-[e:publish]->(b) return e limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款loan_90存款的账号节点转账的账号",
        "output": "match(a:loan where a.name = 'loan_90')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从马思思出发，经过认识的朋友，跳3次，到达点。",
        "output": "match(a:person where a.name='马思思')-[e:knows]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person孙思琪之间有likes关系的comment",
        "output": "match(a:person where a.name='孙思琪')-[e:likes]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找109个用户韩强和杜轩,共同的伙伴",
        "output": "match(a:user where a.name='韩强')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='杜轩') return b limit 109",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为赵国强的person,以及与其有关的person,并返回赵国强的名字和这些person的年龄",
        "output": "match(a:person where name = '赵国强')-[e]-(b:person) return a.name, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为weight,name,createTime, 数据为(847,'Prescription_197',2008-09-20)的子查询作为输入表, 源点的createTime等于输入表createTime,找出全部与prescription Prescription_420有关系的prescription的createTime",
        "output": "with p as (select * from (VALUES(847,'Prescription_197',2008-09-20)) as t(weight,name,createTime))MATCH (a:prescription WHERE a.createTime = p.createTime AND (a.name = 'Prescription_420')) -[e ]-(b:prescription) RETURN b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和film功夫有2到4跳关系的cinema",
        "output": "match(a:film where a.name='功夫')-[e]->{2,4}(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值减48除63对33取余的值",
        "output": "(MAX(a.id) - 48) / 63 % 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询105个名为韩思思的点喜欢的标签等于书的节点,且节点创建时间不等于2029年04月13日",
        "output": "match(a where a.name='韩思思')-[e:likes]->(b:book where b.createTime <> '2029-04-13') return b limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回所有和书呐喊有1跳或2跳关系的读者;2: 返回前77个标签等于author_write_book的边;3: 查询和作家有关联的书节点,并根据其id,字数,名字分组,返回id,字数,名字,以及价格减15的最大值;",
        "output": "查询语句为:1: match(a:book where a.name='呐喊')-[e]->{1,2}(b:reader) return b;2: match(a)-[e:author_write_book]->(b) return e limit 77;3: match(a:author)-[e:author_write_book]-(b:book) return b.id, b.wordCount, b.name, MAX(b.price - 15) group by b.id, b.wordCount, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为131的订单的买家的朋友，再查询与买家相关的人员",
        "output": "match(a:orders where id = '131')-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person陈轩有关,且与标签悬疑有关系的电影节点",
        "output": "match(a:person where a.name='陈轩')-[e:watch]-(b:film)-[e2:has]-(c:tag where c.name='悬疑') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与公司谷歌有创造关系的3度以内的环",
        "output": "match(a:company where name = '谷歌')-[e:creates]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找创建时间不是1999年03月20日或字数为空的节点",
        "output": "match(a where a.createTime <> '1999-03-20' or (a.wordCount is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为27的person关联的person,和以喜欢关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 27)-[e]-(b:person)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value对966取余的值",
        "output": "a.value % 966",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person徐雪有1到3跳关系的person",
        "output": "match(a:person where a.name='徐雪')-[e]->{1,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查询16个与文艺和其他都存在关系的论坛节点;2: 帮我查询用户的三角的环,边label为user_likes_post, 并返回这些点的id;3: 返回与user陈科有关,且与tag文艺有关系的post节点;",
        "output": "查询语句为:1: match(a where a.name='文艺')-[e]->(b:forum)<-[e2]-(c where c.name='其他') return b limit 16;2: match(a:user)-[e:user_likes_post]->(b)-[e2:user_likes_post]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:user where a.name='陈科')-[e:user_likes_post]-(b:post)-[e2:post_has_tag]-(c:tag where c.name='文艺') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为50的user关联的issue,和以has关系关联了这些issue的其他repository",
        "output": "match(a:user where a.id = 50)-[e]-(b:issue)<-[e2:has]-(c:repository) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询teacher张强的relation的partner的partner;2: 请帮我找出学分为4且id在29到47之间的节点;3: 查找类型是student_selects_course,并且源点id在43到95之间的边;4: 请帮我查找前76个类型为department_has_teacher的边;5: 找出名为华中科技大学和中国科技大学的,标签为university的点公共的relation节点的名单;",
        "output": "查询语句为:1: match(a:teacher where a.name='张强')-[e:relation]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d;2: match(a where a.credit = 4 and (a.id BETWEEN 29 AND 47)) return a;3: match(a)-[e:student_selects_course where (e.srcId BETWEEN 43 AND 95)]->(b) return e;4: match(a)-[e:department_has_teacher]->(b) return e limit 76;5: match(a:university where a.name='华中科技大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='中国科技大学') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与software Geaflow有关系的software的lang",
        "output": "match(a:software where a.name='Geaflow')-[e]-(b:software) return b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按价值从小到大，返回所有根据账号和id分组后的价值。",
        "output": "match(a:account) return a.value group by a.value, a.id order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询孙思思家人的朋友的父母",
        "output": "match(a:person where a.name='孙思思')-[e:family]->(b)-[e2:friend]->(c)-[e3:parent]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于contain,以及满足条件weight大于等于179.00且f1不等于true,或srcId小于198的边",
        "output": "match(a)-[e:contain where (e.weight >= 179.00 and e.f1 <> true) or e.srcId < 198]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以17,276,325作为请求点id, 以属性id作为相等条件,找出全部orders以name,id分组的value, 根据value从大到小排序",
        "output": "with p as (select * from (VALUES(17),(276),(325)) as t(id)) MATCH (a:orders WHERE a.id = p.id) RETURN a.value GROUP BY a.name, a.id ORDER BY a.value DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找性别小于69或身高不是150的用户喜欢的仓库的名称,以及这些仓库 拥有的事项的名称",
        "output": "match(a:user where a.gender < 69 or a.height <> 150)-[e:likes]->(b:repository)-[e2:has]->(c:issue) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以638,523,214作为请求点id, 以属性id作为相等条件,查询前47个类型是author_write_book的边",
        "output": "with p as (select * from (VALUES(638),(523),(214)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:author_write_book ]->(b) RETURN e LIMIT 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询book表中，不满足以下条件的数据：name为'白夜行'、createTime为2027年08月22日或2006年03月26日。然后按照wordCount降序排序结果。",
        "output": "match(a:book where a.createTime <> '2027-08-22' or a.name = '白夜行' or a.createTime = '2006-03-26') return a order by a.wordCount desc limit 78",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 查找13个和类型为buyer的点有buyer_creates_orders关系的orders,且和这些orders有orders_contain_goods关系的goods;2: 请帮我找出所有卖家以身高分组的性别, 根据性别从大到小排序;3: 查找全部源点label为buyer,边label为buyer_look_goods,以及满足条件targetId为空的边;4: 返回类型是buyer的点,并根据age从大到小排列;5: 请帮我查找orders contain的goods,返回其源点的id乘97的个数,以及目标点的sellerNumber减1616.16乘sellerNumber的值;6: 查找买家赵建聪创造的订单,被其他买家创造的数量;7: 给出以has关系关联了goods键盘的seller;",
        "output": "查询语句为:1: match(a:buyer)-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c limit 13;2: match(a:seller) return a.gender group by a.height order by a.gender desc;3: match(a:buyer)-[e:buyer_look_goods where (e.targetId is null)]->(b) return e;4: match(a:buyer) return a order by a.age desc;5: match(a:orders)-[e:orders_contain_goods]->(b:goods) return COUNT(a.id * 97), (b.sellerNumber - 1616.16) * b.sellerNumber;6: match(a:buyer where a.name='赵建聪')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c:buyer) return COUNT(c);7: match(a:goods where a.name='键盘')<-[e:seller_has_goods]-(b:seller) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点规格的个数小于745,边类型是创造,且满足条件f1不等于false,源点id不为空的边,返回这些边的f0乘800对f0取余减权重对671取余的值",
        "output": "match(a where COUNT(a.scale) < 745)-[e:creates where e.f1 <> false and (e.srcId is not null)]->(b) return e.f0 * 800 % e.f0 - e.weight % 671",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于拥有,以及满足条件权重不为空或源点id为空或f0大于等于813的边",
        "output": "match(a)-[e:has where (e.weight is not null) or (e.srcId is null) or e.f0 >= 813]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被城市伦敦包含的公司,和伦敦包含的公司",
        "output": "match(a:company)<-[e:contain]-(b:city where name = '伦敦')-[e2:contain]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为loan_54的点的,isBlock等于true的friend,返回这些friend的value,和边的targetId,f1",
        "output": "match(a where a.name='loan_54')-[e:friend]->(b where b.isBlock = true) return b.value,e.targetId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person韩月knows的person,以及likes这些person的person, 令person(b)的salary等于person(a)的age的最大值, 返回person(a)的salary,person(b)的salary,person(c)的salary",
        "output": "match(a:person where name = '韩月')-[e:knows]->(b:person)<-[e2:likes]-(c:person) let b.salary = MAX(a.age) return a.salary,b.salary,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成6个查询语句:1: 查找从买家马伟出发,经过标签为buyer_consult_seller的边,走1度或2度到达的卖家点;2: 帮我查询买家马轩的label为伙伴的边,并根据源点id降序排列,返回45个;3: 查询和orders Order_123有关的goods,再查询和 Order_123orders_contain_goods的其他goods,返回它们;4: 返回被buyer何雪creates的orders;5: 找出name等于王雪或height在156到198之间的buyer consult的seller的名称,以及这些seller has的goods的名称;6: 查找所有与orders Order_183有关系的seller的name;",
        "output": "查询语句为:1: match(a:buyer where a.name='马伟')-[e:buyer_consult_seller]->{1,2}(b:seller) return b;2: match(a:buyer where a.name = '马轩')-[e:partner]->(b) return b order by e.srcId desc limit 45;3: match(a:orders where a.name = 'Order_123')-[e]-(b:goods), (a:orders)-[e2:orders_contain_goods]->(c:goods) return a, b, c;4: match(a:orders)<-[e:buyer_creates_orders]-(b:buyer where b.name='何雪') return a, b;5: match(a:buyer where a.name = '王雪' or (a.height BETWEEN 156 AND 198))-[e:buyer_consult_seller]->(b:seller)-[e2:seller_has_goods]->(c:goods) return b.name as b_name, c.name as c_name;6: match(a:orders where a.name='Order_183')-[e]-(b:seller) return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'AI', 'Yv'作为输入调用triangleCount函数,返回number",
        "output": "Call TRIANGLECOUNT('AI', 'Yv') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为192的person关联的person,和以relates关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 192)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,性别分组,计算height的数量加身高乘7855的最小值",
        "output": "return MIN((COUNT(a.height) + a.height) * 7855) group by a.name, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询186个与赵若涵和韩思琪都存在关系的编辑节点",
        "output": "match(a where a.name='赵若涵')-[e]->(b:publisher)<-[e2]-(c where c.name='韩思琪') return b limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和评论Comment_480之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_480')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询部门耳鼻喉科的全部标签等于伙伴的边,并根据目标点id降序排列,返回30个;2: 给出id为72的病人有关的医生的伙伴, 再给出和医生有关系的伙伴;3: 请帮我查找医生的1跳的环;",
        "output": "查询语句为:1: match(a:department where a.name = '耳鼻喉科')-[e:partner]->(b) return b order by e.targetId desc limit 30;2: match(a:patient where id = '72')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:partner]->(d) return a, b, c, d;3: match(a:doctor)->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标记为人的人工制品，并按照身高从矮到高进行排序。",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从处方Prescription_335出发,经过标签等于包含的边,走1到3跳到达的药品点",
        "output": "match(a:prescription where a.name='Prescription_335')-[e:contain]->{1,3}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和company微软有关的person,再找出和微软apply的其他loan,返回它们",
        "output": "match(a:company where a.name = '微软')-[e]-(b:person), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张宏和赵宏的,标签为卖家的点公共的伙伴节点的名单",
        "output": "match(a:seller where a.name='张宏')-[e:partner]->(b)<-[e2:partner]-(c:seller where c.name='赵宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点label为病人,边label为接受的边,返回这些边的源点id除8的值,和targetId的最大值减2的值",
        "output": "match(a:patient)-[e:accept]->(b) return e.srcId / 8, MAX(e.targetId) - 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部生物学院的点has的student,然后查询生物学院被has的university,一起返回",
        "output": "match(a where a.name = '生物学院')-[e:has]->(b:student),(a where a.name = '生物学院')<-[e2:has]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value乘186的值",
        "output": "a.value * 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 所有订单包含商品。",
        "output": "match(a:orders)-[e:contain]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与城市广州有关系的国家, 返回和这些国家有关联的城市的,id加40的最大值",
        "output": "match(a:city where a.name= '广州')-[e]-(b:country)-[e2]-(c:city) return MAX(c.id + 40)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出提交软件SprintBoot的person,和这些person提交的软件",
        "output": "match(a:software where name = 'SprintBoot')<-[e:commits]-(b:person)-[e2:commits]->(c:software) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有源点为患者，边类型为接受的边，并计算它们的权重平均值，然后返回这些权重值的最小乘积，再除以195.99。",
        "output": "match(a:patient)-[e:accept]->(b) return AVG(e.weight) / 195.99, MIN(e.weight * e.weight * 137)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄加84的值",
        "output": "a.age + 84",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size乘96的个数",
        "output": "COUNT(a.size * 96)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查找源点salary为空或gender是male,且age大于64,边类型为author_write_book,且targetId大于188,timeStamp是2019年02月02日且srcId的求和值乘77除150是171的边,返回这些边的weight的平均值减147.11的值;2: 请帮我查找所有书以创建时间,名字分组的价格, 根据价格从大到小排序;3: 请帮我找出全部编辑的伙伴,或其伙伴的伙伴;4: 返回身高不为空且身高是163的作家认识的作家的名称,以及这些作家 撰写的书的名称;",
        "output": "查询语句为:1: match(a where ((a.salary is null) or a.gender = 'male') and a.age > 64)-[e:author_write_book where e.targetId > 188 and e.timeStamp = '2019-02-02' and SUM(e.srcId) * 77 / 150 = 171]->(b) return AVG(e.weight) - 147.11;2: match(a:book) return a.price group by a.createTime, a.name order by a.price desc;3: match(a:publisher)-[e:partner]->{1,2}(b) return b;4: match(a:author where (a.height is not null) and a.height = 163)-[e:author_knows_author]->(b:author)-[e2:author_write_book]->(c:book) return b.name as b_name, c.name as c_name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表387,490,343,767,252, 以属性id作为相等条件,返回和名为Prescription_145的处方有伙伴关系,或有伙伴的伙伴关系的药品",
        "output": "with p as (select * from (VALUES(387),(490),(343),(767),(252)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (n.name = Prescription_145)) -[e:partner ]->{1,2}(b:medicine) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2519,42,195),(1667,0,796),(2609,5,529)作为请求表数据,属性分别为peopleNumber,id,value, 源点的value等于输入表value,帮我查询44个与微软和字节都存在关系的大学节点",
        "output": "with p as (select * from (VALUES(2519,42,195),(1667,0,796),(2609,5,529)) as t(peopleNumber,id,value))MATCH (a WHERE a.value = p.value AND (a.name = '微软')) -[e ]->(b:university) <-[e2 ]-(c WHERE c.name = '字节') RETURN b LIMIT 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与tag科幻有关系的film, 返回和这些film有关联的person的,age减65的个数",
        "output": "match(a:tag where a.name= '科幻')-[e]-(b:film)-[e2]-(c:person) return COUNT(c.age - 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和城市纽约有关系的大学,返回这些点的名字,等级,id",
        "output": "match(a:city where a.name='纽约')-[e]-(b:university) return b.name, b.level, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出14个与标签为'person'的地点有同事关系的地点，以及与这些地点有同事关系的地点。",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:colleague]->(c:person) return c limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,salary,id, 数据为('male',6388,78),('famale',7691,74), 以属性gender作为相等条件,查询person赵强的标签为relation的边,并根据weight从小到大排列,返回75个",
        "output": "with p as (select * from (VALUES('male',6388,78),('famale',7691,74)) as t(gender,salary,id))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '赵强')) -[e:relation ]->(b) RETURN b ORDER BY e.weight LIMIT 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部源点标签等于teacher,目标点标签等于course,标签等于teacher_teach_course的边",
        "output": "match(a:teacher)-[e:teacher_teach_course]->(b:course) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与武汉大学有合作关系的公司，再找出与这些公司有合作关系的公司。",
        "output": "match(a:university where a.name = '武汉大学')-[e:cooperate]->(b:company),(a:university where a.name = '武汉大学')<-[e2:cooperate]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "'找出马梅喜欢的人'",
        "output": "match(a:person)<-[e:likes]-(b:person where b.name='马梅') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person周宏 支付的person,返回person 支付的person的id减26的值",
        "output": "match(a:person where name = '周宏')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.id - 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于用户的点,并根据名字从大到小排列",
        "output": "match(a:user) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,lang,id分组,计算wordCount减327对74取余的值",
        "output": "return a.wordCount - 327 % 74 group by a.name, a.lang, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为192的person有关的person的friend, 再查询和person有关系的friend",
        "output": "match(a:person where id = '192')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找全部和teacher点有teach关系的course节点,且边满足条件f1不是true,目标course节点courseHour不等于31;2: 请帮我找出部门法学院的类型是朋友的边,并根据源点id升序排列,返回59个;3: 查询类型为学生的点;4: 查找和university电子科技大学有university_has_department关系的department,再查找以university_has_department关系关联了电子科技大学的department;5: 给出名为数学学院和物理学院的,类型是department的点公共的relation节点的名单;6: 计算所有教师的年龄加84乘薪资的值;7: 帮我查询所有源点标签为学生,边标签为student_selects_course的边,返回这些边的源点id乘0的值,和srcId的最大值对144取余的值;",
        "output": "查询语句为:1: match(a:teacher)-[e:teacher_teach_course where e.f1 <> true]->(b:course where b.courseHour <> 31) return b;2: match(a:department where a.name = '法学院')-[e:friend]->(b) return b order by e.srcId asc limit 59;3: match(a:student) return a;4: match(a:university where a.name = '电子科技大学')-[e:university_has_department]->(b:department),(a:university where a.name = '电子科技大学')<-[e2:university_has_department]-(c:department)return a, b, c;5: match(a:department where a.name='数学学院')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='物理学院') return b.name;6: match(a:teacher) return (a.age + 84) * a.salary;7: match(a:student)-[e:student_selects_course]->(b) return e.srcId * 0, MAX(e.srcId) % 144;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出stars为空或stars大于等于710,且stars在78到139之间的节点",
        "output": "match(a where ((a.stars is null) or a.stars >= 710) and (a.stars BETWEEN 78 AND 139)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询20个和label为论坛的点有包含关系的帖子,以及和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:post)-[e2:has]->(c:tag) return c limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为李建聪的点取消的全部订单,并对这些订单的价格进行求和",
        "output": "match(a where a.name='李建聪')-[e:cancel]->(b:orders) return SUM(b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为马克思原理的点belong的所有department,并对这些department的name进行求和",
        "output": "match(a where a.name='马克思原理')-[e:belong]->(b:department) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加id的个数",
        "output": "COUNT(a.id + a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与72名被标记为医生的患者有关联的诊断患者，以及这些患者接收过的处方。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为越南和中国的,类型为country的点公共的friend节点的名单",
        "output": "match(a:country where a.name='越南')-[e:friend]->(b)<-[e2:friend]-(c:country where c.name='中国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询大学合作的公司,返回其源点的等级乘3对2取余的数量,以及目标点的id加77的最小值",
        "output": "match(a:university)-[e:cooperate]->(b:company) return COUNT(a.level * 3 % 2), MIN(b.id + 77)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和公司有关联的person节点,并根据其性别分组,返回性别,以及年龄除91乘9128的值",
        "output": "match(a:company)-[e:employee]-(b:person) return b.gender, b.age / 91 * 9128 group by b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 天津的一个大学节点与一家公司合作了。",
        "output": "match(a:city where a.name = '天津')-[e:contain]->(b:university)-[e2:cooperate]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与杜雪有恋人关系的对象，以及与杜雪以朋友关系相关的对象。",
        "output": "match(a:person where a.name = '杜雪')-[e:lover]->(b:person),(a:person where a.name = '杜雪')<-[e2:friend]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为公司,名为微软的点,返回这些点的规格,价值,名字",
        "output": "match(a:company where a.name = '微软') return a.scale, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和标签为person的点有创造关系的评论,且和这些评论有属于关系的电影,且和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与仓库Tugraph和Mybatis都存在拥有关系的点",
        "output": "match(a:repository where a.name='Tugraph')-[e:has]->(b)<-[e2:has]-(c:repository where c.name='Mybatis') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以876作为请求点id, 源点的id等于输入表id,请帮我找出源点name等于郑轩或gender等于7633,且height不为空,边类型为user_publish_post,且满足条件f1等于true的边,返回这些边的srcId加srcId的最大值",
        "output": "with p as (select * from (VALUES(876)) as t(id)) MATCH (a WHERE a.id = p.id AND ((a.name = '郑轩' OR a.gender = 7633) AND a.height IS NOT NULL)) -[e:user_publish_post WHERE e.f1 = TRUE ]->(b) RETURN MAX(e.srcId + e.srcId) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为吴轩的节点回答的商品或订单或卖家",
        "output": "match(a where a.name='吴轩')-[e:ask]->(b:goods | orders | seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与名为陈强的人有伙伴关系或伙伴关系的所有人。",
        "output": "match(a:person where n.name=陈强)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部公司的朋友,或其朋友的朋友",
        "output": "match(a:company)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与医生节点有诊断关系的患者节点，以及这些患者节点接受的处方节点，再找到这些处方节点包含的药品节点。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription)-[e3:contain]->(d:medicine) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person的2跳以内的环",
        "output": "match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边标签为提交, 并返回这些点的id",
        "output": "match(a:person)-[e:commits]->(b)-[e2:commits]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与大学中国科技大学有关系的城市的面积",
        "output": "match(a:university where a.name='中国科技大学')-[e]-(b:city) return b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,薪资,年龄分组,计算薪资乘8698的最大值",
        "output": "return MAX(a.salary * 8698) group by a.id, a.salary, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前23个满足条件名字为推特的论坛",
        "output": "match(a:forum where a.name = '推特') return a limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出comment Comment_347 belong的film,被其他cinema releases的数量",
        "output": "match(a:comment where a.name='Comment_347')-[e:belong]->(b:film)<-[e2:releases]-(c:cinema) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出pullRequest PR-182 belong的repository,以及belong这些repository的issue, 令issue的createTime等于repository的createTime,令issue的lang等于repository的weight对weight取余, 返回pullRequest的id,repository的stars,issue的weight",
        "output": "match(a:pullRequest where name = 'PR-182')-[e:belong]->(b:repository)<-[e2:belong]-(c:issue) let c.createTime = b.createTime,let c.lang = b.weight % b.weight return a.id,b.stars,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点label为company,边label为cooperate的边,返回这些边的srcId加srcId对166取余的值,和srcId对73取余对152.38取余减f0乘95的值",
        "output": "match(a:company)-[e:cooperate]->(b) return e.srcId + e.srcId % 166, (e.srcId % 73 % 152.38 - e.f0) * 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,peopleNumber,name分组,计算peopleNumber的最小值对767取余的最小值",
        "output": "return MIN(MIN(a.peopleNumber) % 767) group by a.value, a.peopleNumber, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person点有支付关系的person节点,且边满足条件源点id在36到192之间,目标person节点满足条件薪资为空",
        "output": "match(a:person)-[e:pay where (e.srcId BETWEEN 36 AND 192)]->(b:person where (b.salary is null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回申请贷款loan_56的公司,和这些公司申请的贷款",
        "output": "match(a:loan where name = 'loan_56')<-[e:apply]-(b:company)-[e2:apply]->(c:loan) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的薪资加9802的值",
        "output": "match(a:person) return a.salary + 9802",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 找出马若涵的点knows的person,然后找出马若涵被relates的person,一起返回;2: 返回person孙雪的全部parent,的srcId乘srcId的值;3: 帮我查询与名为杜建聪和李月的点共同关联的,类型为person的节点;4: 请帮我查找全部和person点有relates关系的person节点,且边满足条件weight的最大值大于等于149,目标person节点满足条件id不是25;5: 查找id为165的person关联的person,和以knows关系关联了这些person的其他person;6: 找出所有类型为person的点;7: 给出person的2跳以内的环;",
        "output": "查询语句为:1: match(a where a.name = '马若涵')-[e:knows]->(b:person),(a where a.name = '马若涵')<-[e2:relates]-(c:person) return a, b, c;2: match(a:person where a.name= '孙雪')-[e:person_parent_person]->(b) return e.srcId * e.srcId;3: match(a where a.name = '杜建聪')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '李月') return b;4: match(a:person)-[e:relates where MAX(e.weight) >= 149]->(b:person where b.id <> 25) return b;5: match(a:person where a.id = '165')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c;6: match(a:person) return a;7: match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(262,'微软','large'),(260,'微软','small')作为请求表数据,属性分别为value,name,scale, 源点的name等于输入表name,查找满足条件gender不是male的节点",
        "output": "with p as (select * from (VALUES(262,'微软','large'),(260,'微软','small')) as t(value,name,scale))MATCH (a WHERE a.name = p.name AND (a.gender <> 'male')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出陈思思医生的诊断患者和周国强患者的处方，返回它们。",
        "output": "match(a:doctor where a.name = '陈思思')-[e:diagnose]->(b:patient),(c:patient where c.name = '周国强')-[e2:accept]->(d:prescription) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有id为37的user关联的user,和以has关系关联了这些user的其他repository",
        "output": "match(a:user where a.id = 37)-[e]-(b:user)<-[e2:has]-(c:repository) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点类型是buyer,目标点类型是orders,类型是orders的边",
        "output": "match(a:buyer)-[e:orders]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,上次登录时间分组,计算id减53的值",
        "output": "return a.id - 53 group by a.value, a.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有合并请求的id加16的值",
        "output": "match(a:pullRequest) return a.id + 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person有关系的person节点,且person节点的薪资小于5827,并返回这些person的薪资除9647的值,以及person的身高减195的值",
        "output": "match(a:person)-[e]->(b:person where b.salary < 5827) return b.salary / 9647, b.height - 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为王月的节点commits的person或company或software",
        "output": "match(a where a.name='王月')-[e:commits]->(b:person | company | software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前19个销量不为空且销量不是1878.81,或销量大于等于433.74的商品",
        "output": "match(a:goods where ((a.sellerNumber is not null) and a.sellerNumber <> 1878.81) or a.sellerNumber >= 433.74) return a limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出39部与电影院标签相关的上映电影，以及这些电影所关联的所有标签",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘46的最小值",
        "output": "MIN(a.id * 46)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以knows关系关联了person陈轩的person",
        "output": "match(a:person where a.name='陈轩')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以'Dh', 93, 24作为输入,返回id, distance",
        "output": "Call SSSP('Dh', 93, 24) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为张思琪和李红的,标签等于读者的点公共的伙伴节点的名单",
        "output": "match(a:reader where a.name='张思琪')-[e:partner]->(b)<-[e2:partner]-(c:reader where c.name='李红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以598,156作为请求点id, 源点的id等于输入表id,帮我查询等级在1到3之间,名字不是复旦大学且id小于42的节点",
        "output": "with p as (select * from (VALUES(598),(156)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.level BETWEEN ASYMMETRIC 1 AND 3 AND a.name <> '复旦大学' AND a.id < 42)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为黄强的点创造的所有订单,并对这些订单的价值进行求和",
        "output": "match(a where a.name='黄强')-[e:creates]->(b:orders) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查询全部id为191的person关联的person,和以认识关系关联了这些person的其他person;2: 给出前80个满足条件性别不是famale,id除id不等于2133的person;3: 请帮我找出类型为person的点,并根据id从大到小排列;4: 帮我查询所有id为156的person关联的person,和以knows关系关联了这些person的其他person;5: 查询12个与张宏和杜思思都存在关系的person节点;",
        "output": "查询语句为:1: match(a:person where a.id = '191')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c;2: match(a:person where a.gender <> 'famale' and a.id / a.id <> 2133) return a limit 80;3: match(a:person) return a order by a.id desc;4: match(a:person where a.id = '156')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c;5: match(a where a.name='张宏')-[e]->(b:person)<-[e2]-(c where c.name='杜思思') return b limit 12;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person Tom的所有相关者,的srcId的和减99的最小值",
        "output": "match(a:person where a.name= 'Tom')-[e:relation]->(b) return MIN(SUM(e.srcId) - 99)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person吴国强 认识的person,返回person 喜欢的person的薪资对8952取余的值",
        "output": "match(a:person where name = '吴国强')-[e:knows]->(b:person)-[e2:likes]->(c:person) return c.salary % 8952",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被城市天津包含的大学,和天津包含的大学",
        "output": "match(a:university)<-[e:contain]-(b:city where name = '天津')-[e2:contain]->(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回user creates的pullRequest, 令pullRequest的changeFileNumber的值等于createspullRequest的user的age的平均值, 再查找pullRequest belong的repository",
        "output": "match(a:user)-[e:creates]->(b:pullRequest) let b.changeFileNumber = AVG((b:pullRequest)<-[e2:creates]-(c:user) => c.age) match(b:pullRequest)-[e3:belong]->(d:repository) return b.changeFileNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和student何科有2到4跳关系的university",
        "output": "match(a:student where a.name='何科')-[e]->{2,4}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为123的person关联的person,和以关联关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 123)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查一下孙国强申请的贷款，有多少笔是由其他账号还款的。",
        "output": "match(a:person where a.name='孙国强')-[e:apply]->(b:loan)<-[e2:repay]-(c:account) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点label为部门,目标点label为医生,label为部门或处方或病人的边",
        "output": "match(a:department)-[e:department | prescription | patient]->(b:doctor) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为'数学学院'的部门有关联关系，或者具有关联关系的学生。",
        "output": "match(a:department where n.name=数学学院)-[e:relation]->{1,2}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出黄梅和何红两位作者之间共同的关联。",
        "output": "match(a:author where a.name='黄梅')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='何红') return b limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和作家吴月有关系的作家或编辑或书,返回这些点的id,id",
        "output": "match(a:author where a.name='吴月')-[e]-(b:author | publisher | book) return b.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出164个cinema UME和好视影院,共同的relation;2: 找出被person张雪观看的电影;3: 找出前9个类型是person_likes_comment的边;4: 给出以creates关系关联了comment Comment_182的person;5: 返回源点满足条件value的数量减951的平均值小于164,目标点满足条件价值为391或价值大于288或名字等于61,且标签等于film_has_tag的边;6: 查询与film泰坦尼克号和我不是药神都存在film_has_tag关系的点;",
        "output": "查询语句为:1: match(a:cinema where a.name='UME')-[e:relation]->(b)<-[e2:relation]-(c:cinema where c.name='好视影院') return b limit 164;2: match(a:film)<-[e:person_watch_film]-(b:person where b.name='张雪') return a, b;3: match(a)-[e:person_likes_comment]->(b) return e limit 9;4: match(a:comment where a.name='Comment_182')<-[e:person_creates_comment]-(b:person) return b;5: match(a where AVG(COUNT(a.value) - 951) < 164)-[e:film_has_tag]->(b where b.value = 391 or b.value > 288 or b.name = 61) return e;6: match(a:film where a.name='泰坦尼克号')-[e:film_has_tag]->(b)<-[e2:film_has_tag]-(c:film where c.name='我不是药神') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找医生杜若涵创造的处方,以及接受这些处方的病人",
        "output": "match(a:doctor where name = '杜若涵')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和名为广州的城市有朋友关系,或有朋友的朋友关系的国家",
        "output": "match(a:city where n.name=广州)-[e:friend]->{1,2}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部源点类型为company,边类型为company_employee_person,以及f1小于99且f0小于882,或f1为false的边",
        "output": "match(a:company)-[e:company_employee_person where (e.f1 < 99 and e.f0 < 882) or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的age的求和值乘94的值",
        "output": "match(a:person) return SUM(a.age) * 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点标签等于电影,边标签等于拥有,且目标点id不等于106的边",
        "output": "match(a:film)-[e:has where e.targetId <> 106]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询和user何宏有user_publish_post关系的post,再帮我查询以user_publish_post关系关联了何宏的post;2: 查找9个post Post_269和Post_427,共同的relation;3: 找出post Post_218的标签为relation的边,并根据targetId从小到大排列,返回162个;",
        "output": "查询语句为:1: match(a:user where a.name = '何宏')-[e:user_publish_post]->(b:post),(a:user where a.name = '何宏')<-[e2:user_publish_post]-(c:post)return a, b, c;2: match(a:post where a.name='Post_269')-[e:relation]->(b)<-[e2:relation]-(c:post where c.name='Post_427') return b limit 9;3: match(a:post where a.name = 'Post_218')-[e:relation]->(b) return b order by e.targetId asc limit 162;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询软件以价值,是否开源,星数分组的星数, 根据星数从小到大排序",
        "output": "match(a:software) return a.stars group by a.value, a.openSource, a.stars order by a.stars asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出三个属于公司的城市，以及包含这些城市的公司。",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:company) return c limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为何建聪和赵科的点共同支付的,标签等于person的节点",
        "output": "match(a where a.name = '何建聪')-[e:pay]->(b:person)<-[e2:pay]-(c where c.name = '赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person徐若涵出发,经过label为支付的边,走1跳到达的person点",
        "output": "match(a:person where a.name='徐若涵')-[e:pay]->{1,1}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到徐国强支付的人，这个人知道的人",
        "output": "match(a:person where a.name = '徐国强')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按peopleNumber和id对company进行分组，并根据value进行降序排序。",
        "output": "match(a:company) return a.value group by a.peopleNumber, a.id order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和用户赵科之间有喜欢关系的帖子",
        "output": "match(a:user where a.name='赵科')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生诊断的病人,返回其源点的age的求和值对年龄取余的值,以及目标点的薪资加1934的值",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return SUM(a.age) % a.age, b.salary + 1934",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person有关联的person节点，这些节点的名字不叫赵思琪。然后计算这些节点的salary除以salary的余数的平均值，以及age减去35的最小值。",
        "output": "match(a:person)-[e]->(b:person where b.name <> '赵思琪') return AVG(b.salary % b.salary), MIN(b.age - 35)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有大学的id乘59的值",
        "output": "match(a:university) return a.id * 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找所有与loan有关系的account节点,且account节点的id在38到56之间,并返回这些点的id加5的值,以及id减67的值;2: 找出label为person,名为马若涵的点,返回这些点的gender;3: 帮我查询和account有关联的account节点,并根据其value,lastLoginTime分组,返回value,lastLoginTime,以及value加value的值;4: 请帮我查找账号Geaflow123的伙伴,的源点id乘118的值;5: 找出179个id小于16且scale不是medium,或id大于576的company,根据scale从小到大排列;6: 查询源点价值小于等于874或规格等于large,且id不为空,边标签等于company_apply_loan,且满足条件源点id不等于727,f1不是true,或权重小于179.30的边,返回这些边的目标点id减96的值;",
        "output": "查询语句为:1: match(a:loan)-[e]->(b:account where (b.id BETWEEN 38 AND 56)) return b.id + 5, b.id - 67;2: match(a:person where a.name = '马若涵') return a.gender;3: match(a:account)-[e:account_transfer_account]-(b:account) return b.value, b.lastLoginTime, b.value + b.value group by b.value, b.lastLoginTime;4: match(a:account where a.name= 'Geaflow123')-[e:partner]->(b) return e.srcId * 118;5: match(a:company where (a.id < 16 and a.scale <> 'medium') or a.id > 576) return a order by a.scale asc limit 179;6: match(a where (a.value <= 874 or a.scale = 'large') and (a.id is not null))-[e:company_apply_loan where (e.srcId <> 727 and e.f1 <> true) or e.weight < 179.30]->(b) return e.targetId - 96;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回191个名为Kafka的点has的标签等于pullRequest的节点,且其id对75取余大于等于959",
        "output": "match(a where a.name='Kafka')-[e:has]->(b:pullRequest where b.id % 75 >= 959) return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵红同学选的所有课程中，由其他老师教的课程数量。",
        "output": "match(a:student where a.name='赵红')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和买家有关联的卖家节点,并根据其薪资分组,返回薪资,以及salary的最大值对4464取余的平均值",
        "output": "match(a:buyer)-[e:consult]-(b:seller) return b.salary, AVG(MAX(b.salary) % 4464) group by b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出所有名为美团的点合作的大学;2: 查询label为城市的所有点,并根据名字从小到大排列;3: 找出名为越南的点包含的城市,并对这些点的人数进行求和;",
        "output": "查询语句为:1: match(a where a.name='美团')-[e:company_cooperate_university]->(b:university) return b;2: match(a:city) return a order by a.name asc;3: match(a where a.name='越南')-[e:country_contain_city]->(b:city) return SUM(b.peopleNumber);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我查找id为45的点的年龄;2: 查询和公司蚂蚁集团有1到4跳关系的公司;3: 返回所有与公司谷歌有关系的公司的名字;4: 返回所有与公司蚂蚁集团有关系的person的性别;5: 请帮我找出和公司华为有关的公司,再请帮我找出和华为company_employee_person的其他person,返回它们;",
        "output": "查询语句为:1: match(a where a.id = '45') return a.age;2: match(a:company where a.name='蚂蚁集团')-[e]->{1,4}(b:company) return b;3: match(a:company where a.name='谷歌')-[e]-(b:company) return b.name;4: match(a:company where a.name='蚂蚁集团')-[e]-(b:person) return b.gender;5: match(a:company where a.name = '华为')-[e]-(b:company), (a:company)-[e2:company_employee_person]->(c:person) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出65个与大学有拥有关系的部门，以及与这些部门有拥有关系的教师。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher) return c limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为课程的全部点,并根据课时降序排列",
        "output": "match(a:course) return a order by a.courseHour desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值对87取余的值",
        "output": "MAX(a.id) % 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和订单Order_238有关的商品,再给出和Order_238包含的其他商品,返回它们",
        "output": "match(a:orders where a.name = 'Order_238')-[e]-(b:goods), (a:orders)-[e2:contain]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出和person有关联的person节点,并根据其身高分组,返回身高,以及身高减195的值;2: 返回11个person韩雪和吴强,共同的伙伴;3: 计算所有person的id对31取余的求和值;",
        "output": "查询语句为:1: match(a:person)-[e:person_knows_person]-(b:person) return b.height, b.height - 195 group by b.height;2: match(a:person where a.name='韩雪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='吴强') return b limit 11;3: match(a:person) return SUM(a.id % 31);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出和company有关联的software节点,并根据其value,openSource分组,返回value,openSource,以及stars除779的值",
        "output": "match(a:company)-[e:company_creates_software]-(b:software) return b.value, b.openSource, b.stars / 779 group by b.value, b.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被买家张建聪取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='张建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,id,gender, 数据为('吴国强',80,'male'),('吴雪',38,'male'),('黄宏',95,'male'), 以属性id作为相等条件,找出名为孙若涵和吴月的,标签等于person的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES('吴国强',80,'male'),('吴雪',38,'male'),('黄宏',95,'male')) as t(name,id,gender))MATCH (a:person WHERE a.id = p.id AND (a.name = '孙若涵')) -[e:friend ]->(b) <-[e2:friend ]-(c:person WHERE c.name = '吴月') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询person韩强likes的comment,被其他person likes的数量",
        "output": "match(a:person where a.name='韩强')-[e:person_likes_comment]->(b:comment)<-[e2:person_likes_comment]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点身高在151到152之间且年龄在22到80之间且身高为空,边标签为支付,且满足条件时间戳是2031年03月24日且f0等于732的边,返回这些边的源点id加26的平均值",
        "output": "match(a where (a.height BETWEEN 151 AND 152) and (a.age BETWEEN 22 AND 80) and (a.height is null))-[e:pay where e.timeStamp = '2031-03-24' and e.f0 = 732]->(b) return AVG(e.srcId + 26)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和编辑Jack有2跳或3跳关系的读者",
        "output": "match(a:publisher where a.name='Jack')-[e]->{2,3}(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 给出author以gender分组的id, 根据id升序排序;2: 帮我查询label为编辑,名为何伟的点,返回这些点的年龄,身高,id;3: 查找全部名为何梅的,名字不是孤城或类别是小说的伙伴,返回这些伙伴的类别,和边的f1;4: 给出被作家吴月认识的作家;5: 帮我查询源点类型为author,目标点类型为author,类型为author_knows_author的边;6: 给出从书java程序设计出发,经过label为book_refers_book的边,走3跳或4跳到达的书点;7: 查找与书三体有book_refers_book关系的1度以内的环;8: 找出名为呐喊和计算机网络的,标签为book的点公共的refers节点的名单;",
        "output": "查询语句为:1: match(a:author) return a.id group by a.gender order by a.id asc;2: match(a:publisher where a.name = '何伟') return a.age, a.height, a.id;3: match(a where a.name='何梅')-[e:partner]->(b where b.name <> '孤城' or b.category = '小说') return b.category,e.f1;4: match(a:author)<-[e:author_knows_author]-(b:author where b.name='吴月') return a, b;5: match(a:author)-[e:author_knows_author]->(b:author) return e;6: match(a:book where a.name='java程序设计')-[e:book_refers_book]->{3,4}(b:book) return b;7: match(a:book where name = '三体')-[e:book_refers_book]->{0,0}(b)->(a) return a.id, b.id as b_id;8: match(a:book where a.name='呐喊')-[e:book_refers_book]->(b)<-[e2:book_refers_book]-(c:book where c.name='计算机网络') return b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点标签等于user,目标点标签等于post,标签等于tag的边",
        "output": "match(a:user)-[e:tag]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为openSource,id,stars, 数据为(false,40,318),(false,49,438),(true,64,305), 源点的id等于输入表id,给出所有id为183的software关联的software,和以uses关系关联了这些software的其他software",
        "output": "with p as (select * from (VALUES(false,40,318),(false,49,438),(true,64,305)) as t(openSource,id,stars))MATCH (a:software WHERE a.id = p.id AND (a.id = '183')) -[e ]-(b:software) <-[e2:software_uses_software ]-(c:software) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表780,691, 以属性id作为相等条件,帮我查询与person周建国有person_knows_person关系的2度以内的环",
        "output": "with p as (select * from (VALUES(780),(691)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '周建国')) -[e:person_knows_person ]->{0,1}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为person,名为何宏的点,返回这些点的id",
        "output": "match(a:person where a.name = '何宏') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是拥有,且权重大于140.45,f1不是true的边",
        "output": "match(a)-[e:has where e.weight > 140.45 and e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为电影的点,并根据价值从大到小排列",
        "output": "match(a:film) return a order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询生物学院的学生选择了哪些课程，从 department(部门） 生物学院 这个节点开始。",
        "output": "match(a:department where a.name = '生物学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,age, 数据为('famale',157,65), 源点的age等于输入表age,计算所有部门的id除id的值",
        "output": "with p as (select * from (VALUES('famale',157,65)) as t(gender,height,age))MATCH (a:department WHERE a.age = p.age) RETURN a.id / a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和user郑若涵有likes关系的post,再返回以publish关系关联了郑若涵的post",
        "output": "match(a:user where a.name = '郑若涵')-[e:likes]->(b:post),(a:user where a.name = '郑若涵')<-[e2:publish]-(c:post)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出姓杜的人。",
        "output": "match(a:person where a.name = '杜宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找李伟发的帖子，然后计算标签的价值。",
        "output": "match(a:user where name = '李伟')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与部门外科存在拥有关系,且与部门内科存在属于关系的医生节点，返回这些医生的性别,id,年龄,及部门外科的权重,及部门内科的id",
        "output": "match(a:department where a.name='外科')-[e:has]->(b:doctor)<-[e2:belong]-(c:department where c.name='内科') return a.weight,b.gender, b.id, b.age,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边label为watch, 并返回这些点的id",
        "output": "match(a:person)-[e:watch]->(b)-[e2:watch]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和company微软有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的company",
        "output": "match(a:company where a.name = '微软')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回读者喜欢的书, 令书的字数的值等于撰写书的作家的薪资的个数, 再查找书认识的书",
        "output": "match(a:reader)-[e:likes]->(b:book) let b.wordCount = COUNT((b:book)<-[e2:write]-(c:author) => c.salary) match(b:book)-[e3:knows]->(d:book) return b.wordCount, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于pullRequest,名为PR-382的点,返回这些点的changeFileNumber",
        "output": "match(a:pullRequest where a.name = 'PR-382') return a.changeFileNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为徐雪的节点喜欢的person",
        "output": "match(a where a.name='徐雪')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和病人孙月有接受关系的处方,再找出以接受关系关联了孙月的处方",
        "output": "match(a:patient where a.name = '孙月')-[e:accept]->(b:prescription),(a:patient where a.name = '孙月')<-[e2:accept]-(c:prescription)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,height,salary, 数据为('徐月',153,4186),('Amily',172,7458),('徐若涵',175,6141),('李月',162,2097)的子查询作为输入表, 源点的salary等于输入表salary,返回前180个label为person_knows_person的边",
        "output": "with p as (select * from (VALUES('徐月',153,4186),('Amily',172,7458),('徐若涵',175,6141),('李月',162,2097)) as t(name,height,salary))MATCH (a WHERE a.salary = p.salary) -[e:person_knows_person ]->(b) RETURN e LIMIT 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取一个人的所有家庭成员，包括他的直系亲属和他们的家庭成员。",
        "output": "match(a:person)-[e:family]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为周轩和杜雪的点共同认识的,标签等于person的节点",
        "output": "match(a where a.name = '周轩')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '杜雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出pay person孙建国pay的person,的person",
        "output": "match(a:person where name = '孙建国')-[e:pay]->(b:person)<-[e2:pay]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回city广州 contain的company,返回company belong的city的area的最小值除area的值 ;2: 查询和country韩国有country_contain_city关系的city,再查询以country_contain_city关系关联了韩国的city;3: 请帮我找出label为大学的点,返回183个;4: 找出与名为复旦大学和浙江大学的点共同cooperate的,标签等于company的节点;5: 查找和名为中国的国家有伙伴关系,或有伙伴的伙伴关系的城市;6: 请帮我查找全部与公司华为有关系的国家的面积;7: 查找前34个满足条件id大于等于57或value小于959或name不等于华为的company;8: 帮我查询类型是city,名为杭州的点,返回这些点的value;9: 帮我查询所有和名为腾讯的company有friend关系,或有friend的friend关系的city;",
        "output": "查询语句为:1: match(a:city where name = '广州')-[e:city_contain_company]->(b:company)-[e2:company_belong_city]->(c:city) return MIN(c.area) / c.area;2: match(a:country where a.name = '韩国')-[e:country_contain_city]->(b:city),(a:country where a.name = '韩国')<-[e2:country_contain_city]-(c:city)return a, b, c;3: match(a:university) return a limit 183;4: match(a where a.name = '复旦大学')-[e:university_cooperate_company]->(b:company)<-[e2:university_cooperate_company]-(c where c.name = '浙江大学') return b;5: match(a:country where n.name=中国)-[e:partner]->{1,2}(b:city) return b;6: match(a:company where a.name='华为')-[e]-(b:country) return b.area;7: match(a:company where a.id >= 57 or a.value < 959 or a.name <> '华为') return a limit 34;8: match(a:city where a.name = '杭州') return a.value;9: match(a:company where n.name=腾讯)-[e:friend]->{1,2}(b:city) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表156,811,662,137,682, 源点的id等于输入表id,帮我查询名为Order_178的,类别不等于水果或销量小于1704.21的朋友,返回这些朋友的名字,和边的权重,目标点id",
        "output": "with p as (select * from (VALUES(156),(811),(662),(137),(682)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Order_178')) -[e:friend ]->(b WHERE b.category <> '水果' OR b.sellerNumber < 1704.21) RETURN b.name, e.weight, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,gender,name分组,计算height加height的值",
        "output": "return a.height + a.height group by a.id, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以578,78,682,130,935作为请求点id, 以属性id作为相等条件,返回名为建国大业的film,以及与其有关的person,并返回建国大业的category和这些person的id",
        "output": "with p as (select * from (VALUES(578),(78),(682),(130),(935)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (name = '建国大业')) -[e ]-(b:person) RETURN a.category, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与cinema大众影院有releases关系的film，以及与comment Comment_253有belong关系的film，并将它们全部返回。",
        "output": "match(a:cinema where a.name = '大众影院')-[e:releases]->(b:film),(c:comment where c.name = 'Comment_253')-[e2:belong]->(d:film) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出113个与中国诗词论坛和知乎都存在关系的用户节点",
        "output": "match(a where a.name='中国诗词论坛')-[e]->(b:user)<-[e2]-(c where c.name='知乎') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为183的点的价值,名字",
        "output": "match(a where a.id = 183) return a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与buyer相关的orders节点，按name和id进行分组，并返回name和id。",
        "output": "match(a:buyer)-[e:cancel]-(b:orders) return b.name, b.id group by b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表648,730,297,123,151, 以属性id作为相等条件,查询和label为person的点有person_likes_person关系的person,且和这些person有person_knows_person关系的person,且和这些person有person_pay_person关系的person",
        "output": "with p as (select * from (VALUES(648),(730),(297),(123),(151)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_likes_person ]->(b:person) -[e2:person_knows_person ]->(c:person) -[e3:person_pay_person ]->(d:person) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和author吴思琪有关系的book,返回这些点的salary,age,height",
        "output": "match(a:author where a.name='吴思琪')-[e]-(b:book) return b.salary, b.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与大学四川大学有合作关系的2跳以内的环",
        "output": "match(a:university where name = '四川大学')-[e:cooperate]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有字节的点属于的城市,然后帮我查询字节被合作的大学,一起返回",
        "output": "match(a where a.name = '字节')-[e:belong]->(b:city),(a where a.name = '字节')<-[e2:cooperate]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些满足以下条件的电影院：名字不是'好视影院'，大小不为空，或者id小于等于89。然后按照id从大到小进行排序。",
        "output": "match(a:cinema where (a.name <> '好视影院' and (a.size is not null)) or a.id <= 89) return a order by a.id desc limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询合并请求属于的仓库, 令仓库的星数的值等于属于仓库的合并请求的变更文件数的最小值, 再查找仓库拥有的用户",
        "output": "match(a:pullRequest)-[e:belong]->(b:repository) let b.stars = MIN((b:repository)<-[e2:belong]-(c:pullRequest) => c.changeFileNumber) match(b:repository)-[e3:has]->(d:user) return b.stars, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size除54的最大值",
        "output": "MAX(a.size / 54)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为'杭州'的城市点，返回这些点的价值和名称。",
        "output": "match(a:city where a.name = '杭州') return a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找doctor黄雪的relation,的f0乘516的最小值;2: 查询72个名为徐伟的点diagnose的标签为patient的节点,且其height小于等于155或age不为空;3: 给出全部prescription以name,weight,createTime分组的id, 根据id升序排序;4: 帮我查询所有和prescription Prescription_119之间有prescription_contain_medicine关系的medicine;",
        "output": "查询语句为:1: match(a:doctor where a.name= '黄雪')-[e:relation]->(b) return MIN(e.f0 * 516);2: match(a where a.name='徐伟')-[e:doctor_diagnose_patient]->(b:patient where b.height <= 155 or (b.age is not null)) return b limit 72;3: match(a:prescription) return a.id group by a.name, a.weight, a.createTime order by a.id asc;4: match(a:prescription where a.name='Prescription_119')-[e:prescription_contain_medicine]->(b:medicine) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与徐思琪和马梅都有关联的114个Patient节点。",
        "output": "match(a where a.name='徐思琪')-[e]->(b:patient)<-[e2]-(c where c.name='马梅') return b limit 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为182的公司雇佣的person, 并将person有关的公司的规格的数量赋值给person的年龄, 接着查询person的年龄小于182的person提交的软件",
        "output": "match(a:company where a.id = 182)-[e:employee]->(b:person) let b.age = COUNT((b:person)-[e2]-(c:company) => c.scale) match(b:person where b.age < 182)-[e3:commits]->(d:software) return b.age, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照createTime和weight分组，然后按名称从大到小排序。",
        "output": "match(a:prescription) return a.name group by a.createTime, a.weight order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person郑强的所有家人,的f0对830取余的最小值",
        "output": "match(a:person where a.name= '郑强')-[e:family]->(b) return MIN(e.f0 % 830)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 请帮我找出id为43的点的名字,id,身高;2: 请帮我查找与person韩梅有关系的person的name;3: 给出121个与徐雪和马红都存在关系的person节点;4: 帮我查询与person王思思有关系的person的salary;5: 给出person以薪资分组的身高, 根据身高从小到大排序;6: 请帮我查找与名为孙月和周月的点共同relates的,标签等于person的节点;7: 给出所有person的parent,或其parent的parent;8: 请帮我找出109个名为郑科的点关联的标签为person的节点,且节点年龄大于等于42;",
        "output": "查询语句为:1: match(a where a.id = '43') return a.name, a.id, a.height;2: match(a:person where a.name='韩梅')-[e]-(b:person) return b.name;3: match(a where a.name='徐雪')-[e]->(b:person)<-[e2]-(c where c.name='马红') return b limit 121;4: match(a:person where a.name='王思思')-[e]-(b:person) return b.salary;5: match(a:person) return a.height group by a.salary order by a.height asc;6: match(a where a.name = '孙月')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '周月') return b;7: match(a:person)-[e:person_parent_person]->{1,2}(b) return b;8: match(a where a.name='郑科')-[e:relates]->(b:person where b.age >= 42) return b limit 109;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找到名为Prescription_447的处方节点，并返回其id加76的值，以及权重对745取余的平均值。",
        "output": "match(a:prescription)-[e]->(b:prescription where b.name = 'Prescription_447') return b.id + 76, AVG(b.weight % 745)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询17个部门内科和耳鼻喉科,共同的相关者",
        "output": "match(a:department where a.name='内科')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='耳鼻喉科') return b limit 17",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回buyer杜雪creates的orders,以及creates这些orders的buyer",
        "output": "match(a:buyer where name = '杜雪')-[e:creates]->(b:orders)<-[e2:creates]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查找reader周国强 likes的book,返回book relates的book的wordCount加814对77取余的值 ;2: 给出book三体的全部类型是refers的边,并根据f0降序排列,返回39个;3: 查找和reader有关联的book节点,并根据其price,name分组,返回price,name,以及id除8的值;4: 找出源点gender不等于famale,边标签等于author_write_book,且srcId等于187或weight的数量乘149.40不是757,且f0大于等于192的边,返回这些边的srcId的最小值对7取余的值;5: 请帮我查找id为109的author有关的author的partner, 再请帮我查找和author有关系的partner;6: 给出读者以id分组的id, 根据id降序排序;7: 给出与读者张伟有关系的读者, 返回和这些读者有关联的作家的,薪资乘7097的平均值;8: 返回所有名为黄建聪的点publish的book;9: 给出和读者何建聪有关的书,再给出和何建聪reader_likes_book的其他书,返回它们;",
        "output": "查询语句为:1: match(a:reader where name = '周国强')-[e:reader_likes_book]->(b:book)-[e2:relates]->(c:book) return c.wordCount + 814 % 77;2: match(a:book where a.name = '三体')-[e:book_refers_book]->(b) return b order by e.f0 desc limit 39;3: match(a:reader)-[e:reader_likes_book]-(b:book) return b.price, b.name, b.id / 8 group by b.price, b.name;4: match(a where a.gender <> 'famale')-[e:author_write_book where (e.srcId = 187 or COUNT(e.weight) * 149.40 <> 757) and e.f0 >= 192]->(b) return MIN(e.srcId) % 7;5: match(a:author where id = '109')-[e]-(b:author)-[e2:partner]->(c), (b:author)-[e3:partner]->(d) return a, b, c, d;6: match(a:reader) return a.id group by a.id order by a.id desc;7: match(a:reader where a.name= '张伟')-[e]-(b:reader)-[e2]-(c:author) return AVG(c.salary * 7097);8: match(a where a.name='黄建聪')-[e:publisher_publish_book]->(b:book) return b;9: match(a:reader where a.name = '何建聪')-[e]-(b:book), (a:reader)-[e2:reader_likes_book]->(c:book) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询公司信息，按规格从小到大排序。",
        "output": "match(a:company) return a order by a.scale asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以85,957,986,430,55作为请求点id, 源点的id等于输入表id,帮我查询全部和department经管学院之间有department_has_student关系的student",
        "output": "with p as (select * from (VALUES(85),(957),(986),(430),(55)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '经管学院')) -[e:department_has_student ]->(b:student) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回24个department眼科和急诊部,共同的friend",
        "output": "match(a:department where a.name='眼科')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='急诊部') return b limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出合并请求的三角的环,边类型是属于, 并返回这些点的id",
        "output": "match(a:pullRequest)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(30,89,'张国强'),(39,49,'韩轩'),(74,29,'王梅'),(56,3,'马若涵')作为请求表数据,属性分别为id,age,name, 以属性id作为相等条件,请帮我找出和person有关联的software节点,并根据其stars,name,id分组,返回stars,name,id,以及stars加812减40的最小值",
        "output": "with p as (select * from (VALUES(30,89,'张国强'),(39,49,'韩轩'),(74,29,'王梅'),(56,3,'马若涵')) as t(id,age,name))MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]-(b:software) RETURN b.stars, b.name, b.id, MIN(b.stars + 812 - 40) GROUP BY b.stars, b.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与account Faker有关系的account的name",
        "output": "match(a:account where a.name='Faker')-[e]-(b:account) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄和ID对卖家进行分组，然后按照性别从A到Z排序。",
        "output": "match(a:seller) return a.gender group by a.age, a.id order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Zeus的点repay的loan,并对这些loan的id进行求和",
        "output": "match(a where a.name='Zeus')-[e:repay]->(b:loan) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出大学北京大学拥有的部门, 令部门的价值等于大学的价值,令部门的id等于大学的id, 返回大学的价值, 部门的名字",
        "output": "match(a:university where a.name='北京大学')-[e:has]->(b:department) let b.value = a.value,let b.id = a.id return a.value,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与教师杜强和学生黄月都有关系的大学节点，并返回它们的名字和价值。",
        "output": "match(a:teacher where a.name='杜强')-[e]->(b:university)<-[e2]-(c:student where c.name='黄月') return b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前48个满足条件价值小于等于22的大学",
        "output": "match(a:university where a.value <= 22) return a limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和合并请求PR-122有关的用户,再帮我查询和PR-122属于的其他仓库,返回它们",
        "output": "match(a:pullRequest where a.name = 'PR-122')-[e]-(b:user), (a:pullRequest)-[e2:belong]->(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为publisher的所有点，按height升序排列。",
        "output": "match(a:publisher) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询同时与蚂蚁集团和孙科有关联的人，返回他们的年龄和姓名。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e]->(b:person)<-[e2]-(c:person where c.name='孙科') return b.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 35个教师中，孙雪和黄宏是共同的相关者。",
        "output": "match(a:teacher where a.name='孙雪')-[e:relation]->(b)<-[e2:relation]-(c:teacher where c.name='黄宏') return b limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为Zookeeper的software,以及与其有关的company,并返回Zookeeper的value和这些company的scale",
        "output": "match(a:software where name = 'Zookeeper')-[e]-(b:company) return a.value, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出与user吴若涵有user_likes_repository关系的3跳的环",
        "output": "match(a:user where name = '吴若涵')-[e:user_likes_repository]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person杜强有关,且与person韩思琪有关系的person节点",
        "output": "match(a:person where a.name='杜强')-[e:likes]-(b:person)-[e2:likes]-(c:person where c.name='韩思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减73的最小值",
        "output": "MIN(a.id - 73)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和国家英国有关的大学,再请帮我查找和英国包含的其他城市,返回它们",
        "output": "match(a:country where a.name = '英国')-[e]-(b:university), (a:country)-[e2:contain]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和大学浙江大学有属于关系的城市,再请帮我查找以合作关系关联了浙江大学的公司",
        "output": "match(a:university where a.name = '浙江大学')-[e:belong]->(b:city),(a:university where a.name = '浙江大学')<-[e2:cooperate]-(c:company)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与李若涵存在喜欢关系的仓库,仓库与用户存在拥有关系的点,返回这些点的薪资",
        "output": "match(a where a.name = '李若涵')-[e:likes]->(b:repository)-[e2:has]->(c:user) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为138的标签有关的帖子的相关者, 再返回和帖子有关系的朋友",
        "output": "match(a:tag where id = 138)-[e]-(b:post)-[e2:relation]->(c), (b:post)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与用户何强有喜欢关系的帖子，以及与帖子Post_492有关联的标签。",
        "output": "match(a:user where a.name = '何强')-[e:likes]->(b:post),(c:post where c.name = 'Post_492')-[e2:has]->(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部用户以身高,薪资,性别分组的性别, 根据性别从小到大排序",
        "output": "match(a:user) return a.gender group by a.height, a.salary, a.gender order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供与徐宏有关的账户信息，以及与李国强有关的投资公司的信息。",
        "output": "match(a:person where a.name = '徐宏')-[e:own]->(b:account),(c:person where c.name = '李国强')-[e2:invest]->(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出买家郑思琪 取消的订单,返回订单 包含的商品的价值乘761的值",
        "output": "match(a:buyer where name = '郑思琪')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.value * 761",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为文学院的部门,以及与其有关的学生,并返回文学院的大小和这些学生的名字",
        "output": "match(a:department where name = '文学院')-[e]-(b:student) return a.size, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询person及其friend的friends。",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被作家陈若涵认识的作家",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='陈若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与软件相关的公司节点，其中公司节点名称为谷歌，并返回这些节点中人数减去620的人数，以及这些节点中每人价值乘976除以人数所得的最大值。",
        "output": "match(a:software)-[e]->(b:company where b.name = '谷歌') return COUNT(COUNT(b.peopleNumber) - 620), MAX(b.value * 976 / b.peopleNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出两个名字为何强和张强，标签为用户的节点，它们之间的相关者节点。",
        "output": "match(a:user where a.name='何强')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点标签等于person,边标签等于喜欢的边,返回这些边的源点id除19的最小值,和权重除140.39的值",
        "output": "match(a:person)-[e:likes]->(b) return MIN(e.srcId / 19), e.weight / 140.39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 给出与person李科存在person_likes_person关系,且与person孙宏存在person_likes_person关系的person节点，返回这些person的gender,height,salary,及person李科的height,及person孙宏的salary;2: 请帮我找出与名为何宏和马红的点共同pay的,label为person的节点;3: 找出全部和person孙轩之间有person_knows_person关系的person;4: 查询person张红的partner的friend的partner;5: 找出类型为person的全部点,并根据薪资升序排列;6: 请帮我找出名为孙思琪的点likes的全部person,并对这些点的salary进行求和;7: 帮我查询和类型为person的点有person_knows_person关系的person,以及和这些person有person_likes_person关系的person,以及和这些person有person_likes_person关系的person;8: 查找所有名为周月的,薪资小于6415的朋友,返回这些朋友的性别,和边的f0,目标点id;9: 帮我查询id不是45的节点;",
        "output": "查询语句为:1: match(a:person where a.name='李科')-[e:person_likes_person]->(b:person)<-[e2:person_likes_person]-(c:person where c.name='孙宏') return a.height,b.gender, b.height, b.salary,c.salary;2: match(a where a.name = '何宏')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c where c.name = '马红') return b;3: match(a:person where a.name='孙轩')-[e:person_knows_person]->(b:person) return b;4: match(a:person where a.name='张红')-[e:partner]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d;5: match(a:person) return a order by a.salary asc;6: match(a where a.name='孙思琪')-[e:person_likes_person]->(b:person) return SUM(b.salary);7: match(a:person)-[e:person_knows_person]->(b:person)-[e2:person_likes_person]->(c:person)-[e3:person_likes_person]->(d:person) return d;8: match(a where a.name='周月')-[e:friend]->(b where b.salary < 6415) return b.gender,e.f0, e.targetId;9: match(a where a.id <> 45) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为'book'，边标签为'refers'的边。返回这些边的srcId除以srcId的结果，以及targetId对32取余后加124.85的最大值。",
        "output": "match(a:book)-[e:refers]->(b) return e.srcId / e.srcId, MAX(e.targetId % 32 + 124.85)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为仓库,名为Tugraph的点,返回这些点的名字",
        "output": "match(a:repository where a.name = 'Tugraph') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按名字和性别分组，然后按照性别降序排序买家列表。",
        "output": "match(a:buyer) return a.gender group by a.name, a.gender order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为喜欢,并且满足条件f1不是false的边",
        "output": "match(a)-[e:likes where e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找点Prescription_265并返回它们的重量。",
        "output": "match(a:prescription where a.name = 'Prescription_265') return a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为药品的全部点,并根据类别从大到小排列",
        "output": "match(a:medicine) return a order by a.category desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以还款关系关联了贷款loan_57的账号",
        "output": "match(a:loan where a.name='loan_57')<-[e:repay]-(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与赵建聪有关联的apply贷款，然后找出与赵建聪有关联的own账户",
        "output": "match(a:person where a.name = '赵建聪')-[e:apply]->(b:loan),(a:person where a.name = '赵建聪')<-[e2:own]-(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出黄建聪和赵建国这两个名为买家的点公共伙伴节点的名单。",
        "output": "match(a:buyer where a.name='黄建聪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='赵建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与user徐红存在likes关系,且与tag古代存在has关系的post节点，返回这些post的lang,及user徐红的height,及tag古代的id",
        "output": "match(a:user where a.name='徐红')-[e:likes]->(b:post)<-[e2:has]-(c:tag where c.name='古代') return a.height,b.lang,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person陈轩有支付关系的person,再给出以喜欢关系关联了陈轩的person",
        "output": "match(a:person where a.name = '陈轩')-[e:pay]->(b:person),(a:person where a.name = '陈轩')<-[e2:likes]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 给出名为吴强的person,以及与其有关的person,并返回吴强的年龄和这些person的身高;2: 查找与person吴梅和郑红都存在person_colleague_person关系的点;3: 找出person relates的person,返回其源点的height乘height的值,以及目标点的age对33取余的个数;4: 查询全部标签等于person的点;5: 查找名为黄强的person,以及与其有关的person,并返回黄强的名字和这些person的性别;6: 给出名为杜科的点认识的person;7: 请帮我查找徐轩的点knows的person,然后请帮我查找徐轩被knows的person,一起返回;8: 请帮我找出与person kate存在person_family_person关系,且与person李科存在person_lover_person关系的person节点，返回这些person的id,gender,age,及person kate的height,及person李科的salary;9: 查找所有标签等于person的点;",
        "output": "查询语句为:1: match(a:person where name = '吴强')-[e]-(b:person) return a.age, b.height;2: match(a:person where a.name='吴梅')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='郑红') return b;3: match(a:person)-[e:relates]->(b:person) return a.height * a.height, COUNT(b.age % 33);4: match(a:person) return a;5: match(a:person where name = '黄强')-[e]-(b:person) return a.name, b.gender;6: match(a where a.name='杜科')-[e:knows]->(b:person) return b;7: match(a where a.name = '徐轩')-[e:knows]->(b:person),(a where a.name = '徐轩')<-[e2:knows]-(c:person) return a, b, c;8: match(a:person where a.name='kate')-[e:person_family_person]->(b:person)<-[e2:person_lover_person]-(c:person where c.name='李科') return a.height,b.id, b.gender, b.age,c.salary;9: match(a:person) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为Post_229和Post_118的点共同拥有的,标签等于标签的节点",
        "output": "match(a where a.name = 'Post_229')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_118') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询电影院好视影院上映的电影,以及上映这些电影的电影院, 令电影院(c)的id等于电影院(a)的地址,令电影的id等于电影的名字,令电影院的类别等于电影的id除id的求和值, 返回电影院(a)的名字,电影(b)的价值,电影院(c)的名字",
        "output": "match(a:cinema where name = '好视影院')-[e:releases]->(b:film)<-[e2:releases]-(c:cinema) let c.id = a.address,let b.id = b.name,let a.category = SUM(b.id / b.id) return a.name,b.value,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部标签为city的点",
        "output": "match(a:city) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以939,213,445,399,193作为请求点id, 以属性id作为相等条件,给出名为吴思思的点的,创建时间不等于1996年12月12日或创建时间等于2009年12月31日的相关者,返回这些相关者的名字,和边的权重,时间戳",
        "output": "with p as (select * from (VALUES(939),(213),(445),(399),(193)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴思思')) -[e:relation ]->(b WHERE b.createTime <> '1996-12-12' OR b.createTime = '2009-12-31') RETURN b.name, e.weight, e.timeStamp ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与孙思琪有关联的人",
        "output": "match(a:person where a.name='孙思琪')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与person有关系的person节点,且person节点的年龄为空,并返回这些person的id乘61的值,以及person的id减68的最小值",
        "output": "match(a:person)-[e]->(b:person where (b.age is null)) return b.id * 61, MIN(b.id - 68)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以58,416,242,291,649作为请求点id, 以属性id作为相等条件,找出所有源点标签为医生,边标签为doctor_belong_department,并且满足条件目标点id大于148,f0为空的边",
        "output": "with p as (select * from (VALUES(58),(416),(242),(291),(649)) as t(id)) MATCH (a:doctor WHERE a.id = p.id) -[e:doctor_belong_department WHERE e.targetId > 148 AND e.f0 IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表399,970, 以属性id作为相等条件,请帮我找出被买家郑红创造的订单",
        "output": "with p as (select * from (VALUES(399),(970)) as t(id)) MATCH (a:orders WHERE a.id = p.id) <-[e:buyer_creates_orders ]-(b:buyer WHERE b.name = '郑红') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找pay person杜建聪pay的person,的person",
        "output": "match(a:person where name = '杜建聪')-[e:pay]->(b:person)<-[e2:pay]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以10, 4, 62作为输入,返回id, distance",
        "output": "Call SSSP(10, 4, 62) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为吴思琪的点的,id除79小于9721或id为30的朋友,返回这些朋友的名字,和边的f1,源点id,目标点id",
        "output": "match(a where a.name='吴思琪')-[e:friend]->(b where b.id / 79 < 9721 or b.id = 30) return b.name,e.f1, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为'字节'的公司有关，或者与该公司关联的人所在的城市。",
        "output": "match(a:company where n.name=字节)-[e:relation]->{1,2}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和大学清华大学有拥有关系的部门,再返回以拥有关系关联了清华大学的部门",
        "output": "match(a:university where a.name = '清华大学')-[e:has]->(b:department),(a:university where a.name = '清华大学')<-[e2:has]-(c:department)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和用户王建国有1跳或2跳关系的person",
        "output": "match(a:user where a.name='王建国')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点label为帖子,边label为拥有,以及f1不是true,f0小于等于909,或f1大于等于156的边",
        "output": "match(a:post)-[e:has where (e.f1 <> true and e.f0 <= 909) or e.f1 >= 156]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和university清华大学有关系的company或city,返回这些点的area",
        "output": "match(a:university where a.name='清华大学')-[e]-(b:company | city) return b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,id,gender, 数据为(197,39,'famale'),(179,93,'famale'), 源点的height等于输入表height,查询以likes关系关联了book计算机网络的reader",
        "output": "with p as (select * from (VALUES(197,39,'famale'),(179,93,'famale')) as t(height,id,gender))MATCH (a:book WHERE a.height = p.height AND (a.name = '计算机网络')) <-[e:reader_likes_book ]-(b:reader) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与seller张轩有consult关系的所有buyer信息",
        "output": "match(a:seller where a.name='张轩')<-[e:consult]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找用户孙建聪的所有伙伴,的源点id除154乘150.60的平均值",
        "output": "match(a:user where a.name= '孙建聪')-[e:partner]->(b) return AVG(e.srcId / 154 * 150.60)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和贷款loan_58有1到3度关系的公司",
        "output": "match(a:loan where a.name='loan_58')-[e]->{1,3}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,height,salary, 数据为(61,178,4620),(63,176,5213),(19,176,5581), 源点的salary等于输入表salary,请帮我找出标签等于公司的点,返回195个",
        "output": "with p as (select * from (VALUES(61,178,4620),(63,176,5213),(19,176,5581)) as t(age,height,salary))MATCH (a:company WHERE a.salary = p.salary) RETURN a LIMIT 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部person以名字分组的年龄, 根据年龄升序排序",
        "output": "match(a:person) return a.age group by a.name order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回城市的3度的环",
        "output": "match(a:city)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取id在58到63之间的account repay的loan的名称，以及这些loan对应的deposit的account的名称。",
        "output": "match(a:account where (a.id BETWEEN 58 AND 63) and a.createTime = '1996-07-29')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 给出所有处方以id,创建时间分组的id, 根据id降序排序;2: 帮我查询名为阿莫新林的药品;3: 查询和药品枇杷糖浆有关的部门,称为X,再查询和这个X有关联的其他药品,以及和X有关联的病人;4: 返回前13个薪资大于等于18或身高在159到182之间或id不为空的病人;",
        "output": "查询语句为:1: match(a:prescription) return a.id group by a.id, a.createTime order by a.id desc;2: match(a:medicine where a.name = '阿莫新林') return a;3: match(a:medicine where a.name = '枇杷糖浆')-[e]-(b:department), (b:department)-[e2]-(c:medicine),(b:department)-[e3]-(d:patient) return a, b, c, d;4: match(a:patient where a.salary >= 18 or (a.height BETWEEN 159 AND 182) or (a.id is not null)) return a limit 13;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person王梅认识的person,被其他person关联的数量",
        "output": "match(a:person where a.name='王梅')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生孙建聪属于的部门,和孙建聪诊断的病人",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '孙建聪')-[e2:diagnose]->(c:patient) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型为软件,边类型为使用,且源点id大于等于17且源点id在177到185之间,f1不是false的边",
        "output": "match(a:software)-[e:uses where e.srcId >= 17 and (e.srcId BETWEEN 177 AND 185) and e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(27932,4217,'重庆')作为请求表数据,属性分别为area,peopleNumber,name, 以属性peopleNumber作为相等条件,返回被country澳大利亚contain的city",
        "output": "with p as (select * from (VALUES(27932,4217,'重庆')) as t(area,peopleNumber,name))MATCH (a:city WHERE a.peopleNumber = p.peopleNumber) <-[e:country_contain_city ]-(b:country WHERE b.name = '澳大利亚') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出杜月和徐梅共同的父节点。",
        "output": "match(a:person where a.name='杜月')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='徐梅') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出名为Prescription_121和Prescription_328的,类型为prescription的点公共的relation节点的名单;2: 请帮我查找与处方Prescription_446有prescription_contain_medicine关系的1度以内的环;3: 给出170个与外科和内科都存在关系的medicine节点;4: 请帮我查找与prescription Prescription_156有prescription_contain_medicine关系的1度的环;5: 找出标签为药品的点;6: 请帮我找出源点身高大于179,边label为doctor_diagnose_patient,且f1不是true且目标点id小于等于44的边,返回这些边的目标点id除171的值;7: 返回标签为doctor的点;8: 给出prescription Prescription_296的全部relation,的f0乘897的值;",
        "output": "查询语句为:1: match(a:prescription where a.name='Prescription_121')-[e:relation]->(b)<-[e2:relation]-(c:prescription where c.name='Prescription_328') return b.name;2: match(a:prescription where name = 'Prescription_446')-[e:prescription_contain_medicine]->{0,0}(b)->(a) return a.id, b.id as b_id;3: match(a where a.name='外科')-[e]->(b:medicine)<-[e2]-(c where c.name='内科') return b limit 170;4: match(a:prescription where name = 'Prescription_156')-[e:prescription_contain_medicine]->{0,0}(b)->(a) return a.id, b.id as b_id;5: match(a:medicine) return a;6: match(a where a.height > 179)-[e:doctor_diagnose_patient where e.f1 <> true and e.targetId <= 44]->(b) return e.targetId / 171;7: match(a:doctor) return a;8: match(a:prescription where a.name= 'Prescription_296')-[e:relation]->(b) return e.f0 * 897;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出卖家徐科 回答的买家,返回买家 创造的订单的价值加价值的值",
        "output": "match(a:seller where name = '徐科')-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c.value + c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person陈国强有关,且与person徐强有关系的person节点",
        "output": "match(a:person where a.name='陈国强')-[e:colleague]-(b:person)-[e2:parent]-(c:person where c.name='徐强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找ISSUE-404的点belong的repository,然后请帮我查找ISSUE-404被has的repository,一起返回",
        "output": "match(a where a.name = 'ISSUE-404')-[e:belong]->(b:repository),(a where a.name = 'ISSUE-404')<-[e2:has]-(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出郑科店铺中所有商品，并找出向郑科咨询的买家，然后将两者一起返回。",
        "output": "match(a where a.name = '郑科')-[e:has]->(b:goods),(a where a.name = '郑科')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出city伦敦的所有label为partner的边,并根据f1从小到大排列,返回61个",
        "output": "match(a:city where a.name = '伦敦')-[e:partner]->(b) return b order by e.f1 asc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为美团的点cooperate的university",
        "output": "match(a where a.name='美团')-[e:cooperate]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询loan deposit的account, 令account的name的值等于ownaccount的person的gender的数量, 再查找account transfer的account",
        "output": "match(a:loan)-[e:deposit]->(b:account) let b.name = COUNT((b:account)<-[e2:own]-(c:person) => c.gender) match(b:account)-[e3:transfer]->(d:account) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 帮我查询源点薪资大于179,薪资除4774对身高取余大于5,或性别是male,边标签等于person_pay_person,且满足条件时间戳为2011年07月05日,f1是false的边,返回这些边的源点id加源点id的最大值;2: 返回和person有关联的person节点,并根据其age,id,gender分组,返回age,id,gender,以及age除70的值;3: 请帮我查找和person陈思琪有关的person,再请帮我查找和陈思琪person_pay_person的其他person,返回它们;4: 请帮我找出和person郑伟有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person;5: 请帮我找出所有person的相关者,或其相关者的相关者;6: 请帮我查找person郑思琪的friend,的targetId乘199的个数;7: 查找全部id为94的person关联的person,和以认识关系关联了这些person的其他person;8: 给出id为152的person有关的person的伙伴, 再给出和person有关系的相关者;9: 查找person赵科的所有类型为相关者的边,并根据f1升序排列,返回14个;",
        "output": "查询语句为:1: match(a where (a.salary > 179 and a.salary / 4774 % a.height > 5) or a.gender = 'male')-[e:person_pay_person where e.timeStamp = '2011-07-05' and e.f1 = false]->(b) return MAX(e.srcId + e.srcId);2: match(a:person)-[e:person_pay_person]-(b:person) return b.age, b.id, b.gender, b.age / 70 group by b.age, b.id, b.gender;3: match(a:person where a.name = '陈思琪')-[e]-(b:person), (a:person)-[e2:person_pay_person]->(c:person) return a, b, c;4: match(a:person where a.name = '郑伟')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;5: match(a:person)-[e:relation]->{1,2}(b) return b;6: match(a:person where a.name= '郑思琪')-[e:friend]->(b) return COUNT(e.targetId * 199);7: match(a:person where a.id = '94')-[e]-(b:person)<-[e2:person_knows_person]-(c:person) return b,c;8: match(a:person where id = '152')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d;9: match(a:person where a.name = '赵科')-[e:relation]->(b) return b order by e.f1 asc limit 14;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回buyer吴科的类型为partner的边,并根据f0从大到小排列,返回2个",
        "output": "match(a:buyer where a.name = '吴科')-[e:partner]->(b) return b order by e.f0 desc limit 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与company有关系的loan节点,且loan节点的id小于79,并返回这些loan的weight的平均值减312的值,以及loan的weight乘872的平均值",
        "output": "match(a:company)-[e]->(b:loan where b.id < 79) return AVG(b.weight) - 312, AVG(b.weight * 872)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询杜思琪支付过的人中，有哪些人认识她。",
        "output": "match(a:person where a.name = '杜思琪')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为Zookeeper的点使用的软件",
        "output": "match(a where a.name='Zookeeper')-[e:uses]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出reader赵雪和黄建聪都喜欢的点",
        "output": "match(a:reader where a.name='赵雪')-[e:likes]->(b)<-[e2:likes]-(c:reader where c.name='黄建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为'person'且同时属于杜雪和吴思思的relation节点列表。",
        "output": "match(a:person where a.name='杜雪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='吴思思') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名为'Prescription_116'且类型为'prescription'的点，返回它们的weight和id。",
        "output": "match(a:prescription where a.name = 'Prescription_116') return a.weight, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为150的person关联的person,和以支付关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 150)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出apply了贷款且贷款不为空的person，显示他们的姓名。同时，也显示他们贷款对应的存款账户的名称。",
        "output": "match(a:person where (a.salary is not null))-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 帮我查询源点面积为空,价值在627到743之间,价值在371到580之间,边标签为city_contain_university,且满足条件f1等于true且f0大于712,或f0小于563的边,返回这些边的targetId的求和值加目标点id的个数;2: 找出全部和country点有contain关系的city节点,且边满足条件f1不是true,目标city节点id在15到72之间;3: 找出和城市伦敦有关的城市,称为X,再找出和这个X有关联的其他大学,以及和X有关联的大学;4: 请帮我找出名为南京大学和华中科技大学的,类型为大学的点公共的朋友节点的名单;5: 查询所有上海的点属于的国家,然后查询上海被属于的公司,一起返回;6: 查询与university华中科技大学有university_cooperate_company关系的2跳以内的环;7: 请帮我查找城市北京包含的大学节点合作的公司;8: 给出和大学清华大学有university_belong_city关系的城市,以及和国家英国有country_contain_city关系的城市,将它们都返回;",
        "output": "查询语句为:1: match(a where (a.area is null) and (a.value BETWEEN 627 AND 743) and (a.value BETWEEN 371 AND 580))-[e:city_contain_university where (e.f1 = true and e.f0 > 712) or e.f0 < 563]->(b) return COUNT(SUM(e.targetId) + e.targetId);2: match(a:country)-[e:country_contain_city where e.f1 <> true]->(b:city where (b.id BETWEEN 15 AND 72)) return b;3: match(a:city where a.name = '伦敦')-[e]-(b:city), (b:city)-[e2]-(c:university),(b:city)-[e3]-(d:university) return a, b, c, d;4: match(a:university where a.name='南京大学')-[e:friend]->(b)<-[e2:friend]-(c:university where c.name='华中科技大学') return b.name;5: match(a where a.name = '上海')-[e:city_belong_country]->(b:country),(a where a.name = '上海')<-[e2:company_belong_city]-(c:company) return a, b, c;6: match(a:university where name = '华中科技大学')-[e:university_cooperate_company]->{0,1}(b)->(a) return a.id, b.id as b_id;7: match(a:city where a.name = '北京')-[e:city_contain_university]->(b:university)-[e2:university_cooperate_company]->(c:company) return c;8: match(a:university where a.name = '清华大学')-[e:university_belong_city]->(b:city),(c:country where c.name = '英国')-[e2:country_contain_city]->(d:city)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型是包含,且满足条件目标点id的和小于104.30的边",
        "output": "match(a)-[e:contain where SUM(e.targetId) < 104.30]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签等于person的点有family关系的person,且和这些person有parent关系的person,且和这些person有colleague关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person)-[e3:colleague]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找teacher的1度的环",
        "output": "match(a:teacher)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以496,133,47作为请求点id, 源点的id等于输入表id,帮我查询账号Light的所有标签等于相关者的边,并根据权重从小到大排列,返回139个",
        "output": "with p as (select * from (VALUES(496),(133),(47)) as t(id)) MATCH (a:account WHERE a.id = p.id AND (a.name = 'Light')) -[e:relation ]->(b) RETURN b ORDER BY e.weight LIMIT 139",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出别的标签。",
        "output": "match(a:tag where a.name = '其他') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有id为53的大学关联的大学,和以包含关系关联了这些大学的其他城市",
        "output": "match(a:university where a.id = 53)-[e]-(b:university)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person likes的comment,返回其源点的salary的最大值减salary的平均值,以及目标点的id加45除33的值",
        "output": "match(a:person)-[e:likes]->(b:comment) return AVG(MAX(a.salary) - a.salary), (b.id + 45) / 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为读者,名为李轩的点,返回这些点的年龄",
        "output": "match(a:reader where a.name = '李轩') return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,age, 数据为(184,53,91),(157,44,21),(155,65,24),(173,86,65)的子查询作为输入表, 以属性id作为相等条件,查找所有Sam的点创造的处方,然后查找Sam被拥有的部门,一起返回",
        "output": "with p as (select * from (VALUES(184,53,91),(157,44,21),(155,65,24),(173,86,65)) as t(height,id,age))MATCH (a WHERE a.id = p.id AND (a.name = 'Sam')) -[e:doctor_creates_prescription ]->(b:prescription) , (a WHERE a.name = 'Sam') <-[e2:department_has_doctor ]-(c:department) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出student的三角的环,边label为student_selects_course, 并返回这些点的id",
        "output": "match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与person相关的评论节点，按其id和名称进行分组，并返回id和名称。",
        "output": "match(a:person)-[e:likes]-(b:comment) return b.id, b.name group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询编辑徐建聪发布的书,以及关联这些书的书, 令书的id等于书的创建时间, 返回编辑(a)的名字,书(b)的id,书(c)的id",
        "output": "match(a:publisher where name = '徐建聪')-[e:publish]->(b:book)<-[e2:relates]-(c:book) let b.id = b.createTime return a.name,b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为Comment_388和Comment_417的点共同属于的,类型为电影的节点",
        "output": "match(a where a.name = 'Comment_388')-[e:belong]->(b:film)<-[e2:belong]-(c where c.name = 'Comment_417') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询徐伟和孙科之间共同的买家关系。",
        "output": "match(a:buyer where a.name='徐伟')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='孙科') return b limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为中国科技大学和复旦大学的,标签为university的点公共的relation节点的名单",
        "output": "match(a:university where a.name='中国科技大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='复旦大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回清华大学拥有的部门与学生之间的关系，并获取这些关系中的所有点，最后返回这些点的年龄。",
        "output": "match(a where a.name = '清华大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为电脑的buyer,以及与其有关的orders,并返回电脑的id和这些orders的price",
        "output": "match(a:buyer where name = '电脑')-[e]-(b:orders) return a.id, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和大学点有属于关系的城市节点,且边满足条件权重不为空,目标城市节点满足条件名字等于重庆",
        "output": "match(a:university)-[e:belong where (e.weight is not null)]->(b:city where b.name = '重庆') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有id为37的病人关联的处方,和以接受关系关联了这些处方的其他病人",
        "output": "match(a:patient where a.id = 37)-[e]-(b:prescription)<-[e2:accept]-(c:patient) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person购买数量大于138的软件,记为relationCount,再查询这些软件购买的person",
        "output": "match(a:software) let a.relationCount = COUNT((a:software)<-[e:buy]-(b:person) => b.id) match(a where a.relationCount > 138)-[e2:buy]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出52个与标签'用户'有喜欢关系的帖子，并找出与这些帖子有拥有关系的标签。",
        "output": "match(a:user)-[e:likes]->(b:post)-[e2:has]->(c:tag) return c limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找28个和类型是account的点有repay关系的loan,且和这些loan有deposit关系的account",
        "output": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回user赵月publish的post, 令post的createTime等于post的id加80,令post的age等于user的age的求和值,令post的name等于user的name, 返回user的age, post的wordCount",
        "output": "match(a:user where a.name='赵月')-[e:publish]->(b:post) let b.createTime = b.id + 80,let b.age = SUM(a.age),let b.name = a.name return a.age,b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签等于论坛的点有包含关系的用户,且和这些用户有喜欢关系的帖子,且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:likes]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询前81个id大于17且价格大于等于55,或价格不是30的书",
        "output": "match(a:book where (a.id > 17 and a.price >= 55) or a.price <> 30) return a limit 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回病人的朋友,或其朋友的朋友",
        "output": "match(a:patient)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 给出所有和user孙若涵之间有user_publish_post关系的post;2: 请帮我查找和forum天涯论坛有forum_contain_person关系的person,以及和post Post_495有post_has_tag关系的tag,将它们都返回;3: 查询和user有关联的post节点,并根据其id,wordCount分组,返回id,wordCount,以及value除888的值;",
        "output": "查询语句为:1: match(a:user where a.name='孙若涵')-[e:user_publish_post]->(b:post) return b;2: match(a:forum where a.name = '天涯论坛')-[e:forum_contain_person]->(b:person),(c:post where c.name = 'Post_495')-[e2:post_has_tag]->(d:tag)return a, b, c, d;3: match(a:user)-[e:user_publish_post]-(b:post) return b.id, b.wordCount, b.value / 888 group by b.id, b.wordCount;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的薪资减1070乘36的值",
        "output": "match(a:person) return (a.salary - 1070) * 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被电影院人人影城上映的电影",
        "output": "match(a:film)<-[e:releases]-(b:cinema where b.name='人人影城') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于读者,名为李国强的点,返回这些点的id,薪资,身高",
        "output": "match(a:reader where a.name = '李国强') return a.id, a.salary, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Comment_338的评论",
        "output": "match(a:comment where a.name = 'Comment_338') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前119个label为提交的边",
        "output": "match(a)-[e:commits]->(b) return e limit 119",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出同时与电影《我不是药神》和《复仇者联盟》有关系的点。",
        "output": "match(a:film where a.name='我不是药神')-[e:has]->(b)<-[e2:has]-(c:film where c.name='复仇者联盟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找陈国强的点认识的person,然后请帮我查找陈国强被关联的person,一起返回",
        "output": "match(a where a.name = '陈国强')-[e:knows]->(b:person),(a where a.name = '陈国强')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出仓库Mybatis拥有的用户,以及拥有这些用户的仓库",
        "output": "match(a:repository where name = 'Mybatis')-[e:has]->(b:user)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person Tom有关系的person的name",
        "output": "match(a:person where a.name='Tom')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出100个与两个人李宏和韩轩都有联系的订单。",
        "output": "match(a where a.name='李宏')-[e]->(b:orders)<-[e2]-(c where c.name='韩轩') return b limit 100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回咨询卖家李轩的买家,和这些买家查看的商品",
        "output": "match(a:seller where name = '李轩')<-[e:consult]-(b:buyer)-[e2:look]->(c:goods) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑思思 knows的person,返回person knows的person的age加age的数量",
        "output": "match(a:person where name = '郑思思')-[e:knows]->(b:person)-[e2:knows]->(c:person) return COUNT(c.age + c.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "area的个数加11232的平均值",
        "output": "AVG(COUNT(a.area) + 11232)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部类型为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有department的weight对670取余的和",
        "output": "match(a:department) return SUM(a.weight % 670)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出Comment_117和Comment_482这两个标签为评论节点且它们的朋友节点共有的节点。",
        "output": "match(a:comment where a.name='Comment_117')-[e:friend]->(b)<-[e2:friend]-(c:comment where c.name='Comment_482') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被city天津contain的company",
        "output": "match(a:company)<-[e:contain]-(b:city where b.name='天津') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和学生王宏之间有选择关系的课程",
        "output": "match(a:student where a.name='王宏')-[e:selects]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回公司申请的贷款, 令贷款的权重的值等于申请贷款的公司的id的最小值, 再查找贷款存款的账号",
        "output": "match(a:company)-[e:apply]->(b:loan) let b.weight = MIN((b:loan)<-[e2:apply]-(c:company) => c.id) match(b:loan)-[e3:deposit]->(d:account) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回卖家源点中所有拥有边（即目标点ID-124为正向边，目标点ID+124为正向边）,并计算目标点ID-124减权重的值和f0-569加目标点ID+944的求和值。",
        "output": "match(a:seller)-[e:has]->(b) return e.targetId - 124 - e.weight, SUM(e.f0 - 569 + e.targetId + 944)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有源点标签为'论坛'，目标点标签为'person'，标签为'包含'的边。",
        "output": "match(a:forum)-[e:contain]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person周月有关的person,称为X,再查找和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '周月')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表613,833, 以属性id作为相等条件,请帮我找出所有和person点有喜欢关系的person节点,且边满足条件目标点id大于等于31,目标person节点年龄小于等于7",
        "output": "with p as (select * from (VALUES(613),(833)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_likes_person WHERE e.targetId >= 31 ]->(b:person WHERE b.age <= 7) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和读者徐思思之间有喜欢关系的书",
        "output": "match(a:reader where a.name='徐思思')-[e:likes]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据人数,面积,价值分组,计算人数乘13489除39327减69956的求和值",
        "output": "return SUM(a.peopleNumber * 13489 / 39327 - 69956) group by a.peopleNumber, a.area, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出166个与Prescription_166和Prescription_258都存在关系的prescription节点;2: 找出127个weight小于等于157的prescription,根据id从大到小排列;3: 找出与用户陈雪和陈月都存在user_creates_issue关系的点;",
        "output": "查询语句为:1: match(a where a.name='Prescription_166')-[e]->(b:prescription)<-[e2]-(c where c.name='Prescription_258') return b limit 166;2: match(a:prescription where a.weight <= 157) return a order by a.id desc limit 127;3: match(a:user where a.name='陈雪')-[e:user_creates_issue]->(b)<-[e2:user_creates_issue]-(c:user where c.name='陈月') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为杜建国的点likes的全部repository,并对这些repository的weight进行求和",
        "output": "match(a where a.name='杜建国')-[e:likes]->(b:repository) return SUM(b.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据createTime,isBlock分组,计算id除89的值",
        "output": "return a.id / 89 group by a.createTime, a.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出公司蚂蚁集团的所有伙伴,的weight的最小值除183.48的最大值",
        "output": "match(a:company where a.name= '蚂蚁集团')-[e:partner]->(b) return MAX(MIN(e.weight) / 183.48)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑强invest的company, 令company的height等于person的age, 返回person的id, company的scale",
        "output": "match(a:person where a.name='郑强')-[e:invest]->(b:company) let b.height = a.age return a.id,b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与桌子和书都有关联的seller节点，数量为196。",
        "output": "match(a where a.name='桌子')-[e]->(b:seller)<-[e2]-(c where c.name='书') return b limit 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出130个性别是male的person,根据名字从大到小排列",
        "output": "match(a:person where a.gender = 'male') return a order by a.name desc limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有孙轩的点支付的person,然后帮我查询孙轩被认识的person,一起返回",
        "output": "match(a where a.name = '孙轩')-[e:person_pay_person]->(b:person),(a where a.name = '孙轩')<-[e2:person_knows_person]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的平均值对3732取余减28的最大值",
        "output": "MAX(AVG(a.salary) % 3732 - 28)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和post Post_483之间有has关系的tag",
        "output": "match(a:post where a.name='Post_483')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为scale,id,peopleNumber, 数据为('small',86,533), 以属性scale作为相等条件,给出全部名为华中科技大学的点的,peopleNumber在2226到7204之间的friend,返回这些friend的id,和边的srcId,f0,targetId",
        "output": "with p as (select * from (VALUES('small',86,533)) as t(scale,id,peopleNumber))MATCH (a WHERE a.scale = p.scale AND (a.name = '华中科技大学')) -[e:friend ]->(b WHERE b.peopleNumber BETWEEN ASYMMETRIC 2226 AND 7204) RETURN b.id, e.srcId, e.f0, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据规格分组,计算价值除300对698取余的最小值",
        "output": "return MIN(a.value / 300 % 698) group by a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部教师的相关者,或其相关者的相关者",
        "output": "match(a:teacher)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出76个和label为person的点有family关系的person,以及和这些person有lover关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:lover]->(c:person) return c limit 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与大学复旦大学和武汉大学都存在合作关系的点",
        "output": "match(a:university where a.name='复旦大学')-[e:cooperate]->(b)<-[e2:cooperate]-(c:university where c.name='武汉大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回buyer李宏 cancel的orders,返回orders contain的goods的sellerNumber的和加sellerNumber的最大值",
        "output": "match(a:buyer where name = '李宏')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return MAX(SUM(c.sellerNumber) + c.sellerNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于likes,且f1不是false的边",
        "output": "match(a)-[e:likes where e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与读者Alice有关系的作家的性别",
        "output": "match(a:reader where a.name='Alice')-[e]-(b:author) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为王宏的点申请的贷款",
        "output": "match(a where a.name='王宏')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为浙江大学和清华大学的点共同belong的,类型是city的节点",
        "output": "match(a where a.name = '浙江大学')-[e:belong]->(b:city)<-[e2:belong]-(c where c.name = '清华大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回赵月的点认识的person,然后返回赵月被认识的person,一起返回",
        "output": "match(a where a.name = '赵月')-[e:knows]->(b:person),(a where a.name = '赵月')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与Prescription_314处方包含关系的药物，以及与急诊部department有拥有关系的医生，返回它们。",
        "output": "match(a:prescription where a.name = 'Prescription_314')-[e:contain]->(b:medicine),(c:department where c.name = '急诊部')-[e2:has]->(d:doctor) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与CSDN论坛有关联的人，以及与CSDN有关联的人。",
        "output": "match(a:forum where a.name = 'CSDN')-[e:contain]->(b:person),(a:forum where a.name = 'CSDN')<-[e2:contain]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为郑思琪的,年龄不为空或年龄是42的同事,返回这些同事的名字,和边的源点id",
        "output": "match(a where a.name='郑思琪')-[e:colleague]->(b where (b.age is not null) or b.age = 42) return b.name,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value对429取余的最小值",
        "output": "MIN(a.value % 429)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和repository JavaGuid之间有has关系的issue",
        "output": "match(a:repository where a.name='JavaGuid')-[e:has]->(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找70个与法国和越南有关联的公司节点。",
        "output": "match(a where a.name='法国')-[e]->(b:company)<-[e2]-(c where c.name='越南') return b limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 查找和类型为贷款的点有loan_deposit_account关系的账号,并且和这些账号有account_repay_loan关系的贷款,并且和这些贷款有loan_deposit_account关系的账号;2: 查找和account Geaflow123有1到3度关系的company;3: 请帮我找出和company微软有关的account,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person;4: 请帮我查找person拥有的账号,返回其源点的年龄减年龄乘id除56的平均值,以及目标点的value的平均值除价值减824的平均值;5: 帮我查询全部账号以是否冻结,创建时间分组的创建时间, 根据创建时间降序排序;6: 查找标签为company_apply_loan,并且满足条件f1为false的边;7: 查找和贷款defaultName有关的贷款,再查找和defaultName loan_deposit_account的其他账号,返回它们;",
        "output": "查询语句为:1: match(a:loan)-[e:loan_deposit_account]->(b:account)-[e2:account_repay_loan]->(c:loan)-[e3:loan_deposit_account]->(d:account) return d;2: match(a:account where a.name='Geaflow123')-[e]->{1,3}(b:company) return b;3: match(a:company where a.name = '微软')-[e]-(b:account), (b:account)-[e2]-(c:person),(b:account)-[e3]-(d:person) return a, b, c, d;4: match(a:person)-[e:person_own_account]->(b:account) return AVG((a.age - a.age) * a.id / 56), AVG(AVG(b.value) / b.value - 824);5: match(a:account) return a.createTime group by a.isBlock, a.createTime order by a.createTime desc;6: match(a)-[e:company_apply_loan where e.f1 = false]->(b) return e;7: match(a:loan where a.name = 'defaultName')-[e]-(b:loan), (a:loan)-[e2:loan_deposit_account]->(c:account) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为韩国的国家,以及与其有关的公司,并返回韩国的id和这些公司的规格",
        "output": "match(a:country where name = '韩国')-[e]-(b:company) return a.id, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有四川大学的点合作的公司,然后查询四川大学被包含的城市,一起返回",
        "output": "match(a where a.name = '四川大学')-[e:cooperate]->(b:company),(a where a.name = '四川大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为person的全部点,并根据年龄从大到小排列",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减72的值",
        "output": "a.id - 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关系的person节点,且person节点的身高小于等于162,并返回这些person的身高对174取余减id的最小值,以及person的height的最大值对182取余的个数",
        "output": "match(a:person)-[e]->(b:person where b.height <= 162) return MIN(b.height % 174 - b.id), COUNT(MAX(b.height) % 182)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person吴月knows的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='吴月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出22个名为徐思思的点has的标签为goods的节点,且其name等于苹果",
        "output": "match(a where a.name='徐思思')-[e:has]->(b:goods where b.name = '苹果') return b limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部person的relation,或其relation的relation",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出Light账号相关者的伙伴朋友",
        "output": "match(a:account where a.name='Light')-[e:relation]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出company阿里 belong的city,返回city belong的country的peopleNumber除peopleNumber的值",
        "output": "match(a:company where name = '阿里')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.peopleNumber / c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有id为164的person关联的person,和以认识关系关联了这些person的其他person",
        "output": "match(a:person where a.id = '164')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点类型为person、边类型为parent的边，返回这些边中f0减去746的最大值以及targetId减去8的结果。",
        "output": "match(a:person)-[e:parent]->(b) return MAX(e.f0 - 746), e.targetId - 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为117的account关联的loan，再查询与loan相关的relation。",
        "output": "match(a:account where id = '117')-[e]-(b:loan)-[e2:relation]->(c), (b:loan)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除65的求和值",
        "output": "SUM(a.id / 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person周思思 属于的公司,返回公司 雇佣的person的身高加166的求和值",
        "output": "match(a:person where name = '周思思')-[e:belong]->(b:company)-[e2:employee]->(c:person) return SUM(c.height + 166)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被处方Prescription_325包含的药品",
        "output": "match(a:medicine)<-[e:contain]-(b:prescription where b.name='Prescription_325') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对66取余的值",
        "output": "a.age % 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与黄科和马建国都认识的人。",
        "output": "match(a:person where a.name='黄科')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='马建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找订单号Order_492。",
        "output": "match(a:orders where a.name = 'Order_492') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f0,srcId,weight, 数据为(543,160,140.88),(805,9,142.80),(561,138,182.79),(913,109,168.17), 以属性weight作为相等条件,找出公司创造的软件,返回其源点的人数加634的值,以及目标点的价值乘606的最大值",
        "output": "with p as (select * from (VALUES(543,160,140.88),(805,9,142.80),(561,138,182.79),(913,109,168.17)) as t(f0,srcId,weight))MATCH (a:company WHERE a.weight = p.weight) -[e:company_creates_software ]->(b:software) RETURN a.peopleNumber + 634, MAX(b.value * 606) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与电影《泰坦尼克号》和人人影城电影院有关联的标签节点，并返回它们的ID、名称和价值。",
        "output": "match(a:film where a.name='泰坦尼克号')-[e]->(b:tag)<-[e2]-(c:cinema where c.name='人人影城') return b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按年龄分组，列出所有人的身高，并按照身高从高到低排序。",
        "output": "match(a:person) return a.height group by a.age order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询价值大于等于894或人数不是50638的国家包含的城市的名称,以及这些城市 包含的公司的名称",
        "output": "match(a:country where a.value >= 894 or a.peopleNumber <> 50638)-[e:contain]->(b:city)-[e2:contain]->(c:company) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为person的所有点,并根据age从大到小排列",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为赵思思的点pay的全部person,并对这些person的id进行求和",
        "output": "match(a where a.name='赵思思')-[e:pay]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创建时间按升序排列的，价格大于88并且ID大于等于29或者名字不等于'呐喊'的书籍，一共有27本。",
        "output": "match(a:book where (a.id >= 29 or a.name <> '呐喊') and a.price > 88) return a order by a.createTime asc limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表469, 以属性id作为相等条件,给出所有名为吴红的点watch的film",
        "output": "with p as (select * from (VALUES(469)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴红')) -[e:person_watch_film ]->(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和公司点有雇佣关系的person节点,且边满足条件目标点id不为空,目标person节点身高小于等于151",
        "output": "match(a:company)-[e:employee where (e.targetId is not null)]->(b:person where b.height <= 151) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为74的person有关的person的partner, 再找出和person有关系的friend",
        "output": "match(a:person where id = 74)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的和除4的值",
        "output": "SUM(a.id) / 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出属于类型为film且同时与Comment_228和Comment_176两点都相关的所有节点。",
        "output": "match(a where a.name = 'Comment_228')-[e:belong]->(b:film)<-[e2:belong]-(c where c.name = 'Comment_176') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点id大于等于44,目标点价值在75到660之间,且类型为属于的边",
        "output": "match(a where a.id >= 44)-[e:belong]->(b where (b.value BETWEEN 75 AND 660)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找44个area在14736到41573之间或area不是43313的city,根据name降序排列;2: 请帮我找出名为华中科技大学的university,以及与其有关的country,并返回华中科技大学的name和这些country的area;3: 请帮我找出所有源点类型是company,边类型是company_cooperate_university,并且f1为true或targetId不等于179,且f1不等于true的边;4: 找出company美团的所有类型是friend的边,并根据targetId从小到大排列,返回105个;5: 帮我查询与城市深圳有city_belong_country关系的1度以内的环;6: 请帮我找出以cooperate关系关联了company腾讯的university;",
        "output": "查询语句为:1: match(a:city where (a.area BETWEEN 14736 AND 41573) or a.area <> 43313) return a order by a.name desc limit 44;2: match(a:university where name = '华中科技大学')-[e]-(b:country) return a.name, b.area;3: match(a:company)-[e:company_cooperate_university where (e.f1 = true or e.targetId <> 179) and e.f1 <> true]->(b) return e;4: match(a:company where a.name = '美团')-[e:friend]->(b) return b order by e.targetId asc limit 105;5: match(a:city where name = '深圳')-[e:city_belong_country]->{0,0}(b)->(a) return a.id, b.id as b_id;6: match(a:company where a.name='腾讯')<-[e:university_cooperate_company]-(b:university) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与id为139的物品相关的买家的朋友，再查找与买家有关系的关联。",
        "output": "match(a:goods where id = '139')-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请按名称从大到小的顺序，为我列出所有电影按照类别分组的名字",
        "output": "match(a:film) return a.name group by a.category order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被课程属于数量大于199的部门,记为relationCount,再查询这些部门属于的教师",
        "output": "match(a:department) let a.relationCount = MAX((a:department)<-[e:belong]-(b:course) => b.id) match(a where a.relationCount > 199)-[e2:belong]->(c:teacher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找作家周思思的相关者,的f0的最小值对839取余加权重的值",
        "output": "match(a:author where a.name= '周思思')-[e:relation]->(b) return MIN(e.f0) % 839 + e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和论坛CSDN之间有包含关系的用户",
        "output": "match(a:forum where a.name='CSDN')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为Post_401和Post_258的点共同拥有的,类型是标签的节点",
        "output": "match(a where a.name = 'Post_401')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_258') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(11246,7444,'杭州'),(90755,8967,'武汉')作为请求表数据,属性分别为area,peopleNumber,name, 源点的peopleNumber等于输入表peopleNumber,查找label为city_contain_university,且满足条件f0的最小值乘731是130.80,weight为空的边",
        "output": "with p as (select * from (VALUES(11246,7444,'杭州'),(90755,8967,'武汉')) as t(area,peopleNumber,name))MATCH (a WHERE a.peopleNumber = p.peopleNumber) -[e:city_contain_university WHERE MIN(e.f0) * 731 = 130.80 AND e.weight IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点类型为loan,边类型为deposit,以及满足条件timeStamp为2001年06月25日的边",
        "output": "match(a:loan)-[e:deposit where e.timeStamp = '2001-06-25']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找department内科has的doctor,以及has这些doctor的department, 令department的name等于department的id加33,令department(c)的name等于department(a)的weight减weight, 返回department(a)的weight,doctor(b)的id,department(c)的id",
        "output": "match(a:department where name = '内科')-[e:has]->(b:doctor)<-[e2:has]-(c:department) let c.name = c.id + 33,let c.name = a.weight - a.weight return a.weight,b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为size,name,id, 数据为(144,'横店影院',32),(452,'UME',67),(192,'好视影院',56),(650,'UME',39)的子查询作为输入表, 源点的name等于输入表name,查找以watch关系关联了film神探狄仁杰的person",
        "output": "with p as (select * from (VALUES(144,'横店影院',32),(452,'UME',67),(192,'好视影院',56),(650,'UME',39)) as t(size,name,id))MATCH (a:film WHERE a.name = p.name AND (a.name = '神探狄仁杰')) <-[e:person_watch_film ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为马宏的点支付的所有person,并对这些person的性别进行求和",
        "output": "match(a where a.name='马宏')-[e:pay]->(b:person) return SUM(b.gender)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出论坛的三角的环,边标签为包含, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出87个名为何建国的点创造的类型为订单的节点,且节点id为空或id大于等于76",
        "output": "match(a where a.name='何建国')-[e:creates]->(b:orders where (b.id is null) or b.id >= 76) return b limit 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person吴雪出发，通过朋友关系，走过3跳或者4跳可以到达的人",
        "output": "match(a:person where a.name='吴雪')-[e:friend]->{3,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为用户,名为杜若涵的点,返回这些点的性别,身高,年龄",
        "output": "match(a:user where a.name = '杜若涵') return a.gender, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(3695,29,'周伟'),(9251,95,'郑月'),(1876,73,'周红'),(4070,5,'李轩')作为请求表数据,属性分别为salary,age,name, 以属性salary作为相等条件,查询person Amily喜欢的person,被其他person支付的数量",
        "output": "with p as (select * from (VALUES(3695,29,'周伟'),(9251,95,'郑月'),(1876,73,'周红'),(4070,5,'李轩')) as t(salary,age,name))MATCH (a:person WHERE a.salary = p.salary AND (a.name = 'Amily')) -[e:person_likes_person ]->(b:person) <-[e2:person_pay_person ]-(c:person) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'vM', 'dx'作为输入调用personalRank函数,返回运算结果",
        "output": "Call PERSONALRANK('vM', 'dx') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点label为部门,边label为拥有的边,返回这些边的目标点id加189的平均值,和目标点id加112的求和值",
        "output": "match(a:department)-[e:has]->(b) return AVG(e.targetId + 189), SUM(e.targetId + 112)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 帮我查询源点标签等于评论,边标签等于comment_belong_film,以及权重不为空的边;2: 查找12个与科幻和喜剧都存在关系的电影节点;3: 帮我查询名为杜国强和吴梅的,标签等于person的点公共的相关者节点的名单;4: 请帮我查找person以height,age分组的gender, 根据gender从小到大排序;",
        "output": "查询语句为:1: match(a:comment)-[e:comment_belong_film where (e.weight is not null)]->(b) return e;2: match(a where a.name='科幻')-[e]->(b:film)<-[e2]-(c where c.name='喜剧') return b limit 12;3: match(a:person where a.name='杜国强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='吴梅') return b.name;4: match(a:person) return a.gender group by a.height, a.age order by a.gender asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出119个和类型是部门的点有拥有关系的医生,以及和这些医生有属于关系的部门",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c limit 119",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签为学生,边标签为选择,以及满足条件目标点id大于100或权重为空或f0小于773的边",
        "output": "match(a:student)-[e:selects where e.targetId > 100 or (e.weight is null) or e.f0 < 773]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到张梅和何伟的共同作家伙伴。",
        "output": "match(a:author where a.name='张梅')-[e:partner]->(b)<-[e2:partner]-(c:author where c.name='何伟') return b limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以515作为请求点id, 以属性id作为相等条件,查找与用户韩雪和张强都存在user_creates_issue关系的点",
        "output": "with p as (select * from (VALUES(515)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '韩雪')) -[e:user_creates_issue ]->(b) <-[e2:user_creates_issue ]-(c:user WHERE c.name = '张强') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取person创建的评论名称和这些评论所属的电影名称，条件是：评论的id大于等于21或者名字不叫陈若涵。",
        "output": "match(a:person where a.id >= 21 or a.name <> '陈若涵')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出university的friend,或其friend的friend",
        "output": "match(a:university)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找同时与Post_361和Post_321有has关系的点。",
        "output": "match(a:post where a.name='Post_361')-[e:has]->(b)<-[e2:has]-(c:post where c.name='Post_321') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前50个label为knows的边",
        "output": "match(a)-[e:knows]->(b) return e limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person马强有关的软件,称为X,再查询和这个X有关联的其他公司,以及和X有关联的公司",
        "output": "match(a:person where a.name = '马强')-[e]-(b:software), (b:software)-[e2]-(c:company),(b:software)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以66, 'ZG'作为输入,返回id, distance",
        "output": "Call SSSP(66, 'ZG') yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和user李红有关的user,称为X,再请帮我找出和这个X有关联的其他forum,以及和X有关联的tag",
        "output": "match(a:user where a.name = '李红')-[e]-(b:user), (b:user)-[e2]-(c:forum),(b:user)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找书关联的书,返回其源点的字数除787的值,以及目标点的字数乘215的最大值",
        "output": "match(a:book)-[e:relates]->(b:book) return a.wordCount / 787, MAX(b.wordCount * 215)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为74的点的id",
        "output": "match(a where a.id = 74) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回前138个满足条件id大于等于31或name等于体育学院,且value小于等于632的department",
        "output": "match(a:department where (a.id >= 31 or a.name = '体育学院') and a.value <= 632) return a limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出95个用户发布的帖子和它们所拥有的标签。",
        "output": "match(a:user)-[e:publish]->(b:post)-[e2:has]->(c:tag) return c limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出54个年龄大于等于1或性别为male或名字为徐建国的person,根据名字降序排列",
        "output": "match(a:person where a.age >= 1 or a.gender = 'male' or a.name = '徐建国') return a order by a.name desc limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型为公司的点",
        "output": "match(a:company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询repository FSM的全部friend,的targetId的和乘29的值",
        "output": "match(a:repository where a.name= 'FSM')-[e:friend]->(b) return SUM(e.targetId) * 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person郑国强有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '郑国强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有哪些韩国城市被包含在国家范围内？",
        "output": "match(a:city)<-[e:contain]-(b:country where b.name='韩国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询按ID分组的所有人的年龄，并以从小到大的顺序排序。",
        "output": "match(a:person) return a.age group by a.id order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person王若涵的全部家人,的目标点id减目标点id的值",
        "output": "match(a:person where a.name= '王若涵')-[e:family]->(b) return e.targetId - e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为reader的点,返回89个",
        "output": "match(a:reader) return a limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'书'且名称为'百年孤独'的点，并返回它们的ID、创建时间和名称。",
        "output": "match(a:book where a.name = '百年孤独') return a.id, a.createTime, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询book的三角的环,边标签等于refers, 并返回这些点的id",
        "output": "match(a:book)-[e:refers]->(b)-[e2:refers]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查找和公司谷歌有关的城市,再查找和谷歌company_cooperate_university的其他大学,返回它们;2: 查询源点value为空,area大于98136,边标签等于city_belong_country,且f1是true的边,返回这些边的targetId加0的个数;3: 查询company微软的friend,的weight除130.66的值;4: 计算所有city的peopleNumber对6324取余的值;",
        "output": "查询语句为:1: match(a:company where a.name = '谷歌')-[e]-(b:city), (a:company)-[e2:company_cooperate_university]->(c:university) return a, b, c;2: match(a where (a.value is null) and a.area > 98136)-[e:city_belong_country where e.f1 = true]->(b) return COUNT(e.targetId + 0);3: match(a:company where a.name= '微软')-[e:friend]->(b) return e.weight / 130.66;4: match(a:city) return a.peopleNumber % 6324;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点是buyer，目标点是goods，类型是look的边。",
        "output": "match(a:buyer)-[e:look]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找名为徐宏的点relates的person;2: 请帮我查找person的三角的环,边标签等于person_family_person, 并返回这些点的id;3: 请帮我查找person张宏的所有标签等于家人的边,并根据f0从小到大排列,返回98个;4: 帮我查询名为马科的点relates的全部person,并对这些点的id进行求和;",
        "output": "查询语句为:1: match(a where a.name='徐宏')-[e:relates]->(b:person) return b;2: match(a:person)-[e:person_family_person]->(b)-[e2:person_family_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:person where a.name = '张宏')-[e:person_family_person]->(b) return b order by e.f0 asc limit 98;4: match(a where a.name='马科')-[e:relates]->(b:person) return SUM(b.id);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有帖子的id对id取余的值",
        "output": "match(a:post) return a.id % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和book计算机网络有关系的reader或book或publisher,返回这些点的id,id,price",
        "output": "match(a:book where a.name='计算机网络')-[e]-(b:reader | book | publisher) return b.id, b.id, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出书关联的书,返回其源点的价格减价格的值,以及目标点的price的和乘29的和",
        "output": "match(a:book)-[e:relates]->(b:book) return a.price - a.price, SUM(SUM(b.price) * 29)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以likes关系关联了book百年孤独的reader",
        "output": "match(a:book where a.name='百年孤独')<-[e:likes]-(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签为公司的点有合作关系的大学,且和这些大学有属于关系的城市,且和这些城市有包含关系的大学",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:belong]->(c:city)-[e3:contain]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Comment_276的节点belong的comment或film或cinema",
        "output": "match(a where a.name='Comment_276')-[e:belong]->(b:comment | film | cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为孙思琪的点的,weight大于652的relation,返回这些relation的weight,和边的f0",
        "output": "match(a where a.name='孙思琪')-[e:relation]->(b where b.weight > 652) return b.weight,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'mm', 'Na', 31作为输入调用triangleCount函数,返回number",
        "output": "Call TRIANGLECOUNT('mm', 'Na', 31) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 帮我查询和person赵雪有person_colleague_person关系的person,以及和person韩宏有person_friend_person关系的person,将它们都返回;2: 查询person的三角的环,边标签等于person_friend_person, 并返回这些点的id;3: 查找173个和标签为person的点有person_friend_person关系的person,以及和这些person有person_lover_person关系的person;4: 找出87个薪资小于6577的person,根据名字从小到大排列;5: 查询label为person_friend_person,且满足条件f1不等于false,f0不为空的边;",
        "output": "查询语句为:1: match(a:person where a.name = '赵雪')-[e:person_colleague_person]->(b:person),(c:person where c.name = '韩宏')-[e2:person_friend_person]->(d:person)return a, b, c, d;2: match(a:person)-[e:person_friend_person]->(b)-[e2:person_friend_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:person)-[e:person_friend_person]->(b:person)-[e2:person_lover_person]->(c:person) return c limit 173;4: match(a:person where a.salary < 6577) return a order by a.name asc limit 87;5: match(a)-[e:person_friend_person where e.f1 <> false and (e.f0 is not null)]->(b) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找书少年闰土的所有引用,的源点id除3的值",
        "output": "match(a:book where a.name= '少年闰土')-[e:refers]->(b) return e.srcId / 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找22个价值在410到503之间的帖子,根据名字升序排列",
        "output": "match(a:post where (a.value BETWEEN 410 AND 503)) return a order by a.name asc limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表211,56,940, 源点的id等于输入表id,请帮我查找和部门有关联的教师节点,并根据其id,年龄分组,返回id,年龄,以及height的最小值对身高取余的值",
        "output": "with p as (select * from (VALUES(211),(56),(940)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e:department_has_teacher ]-(b:teacher) RETURN b.id, b.age, MIN(b.height) % b.height GROUP BY b.id, b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前193个类型为朋友的边",
        "output": "match(a)-[e:friend]->(b) return e limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与腾讯和电子科技大学都有关联的公司的信息，包括规格、人数和名称。",
        "output": "match(a:company where a.name='腾讯')-[e]->(b:company)<-[e2]-(c:university where c.name='电子科技大学') return b.scale, b.peopleNumber, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和label为课程的点有属于关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",
        "output": "match(a:course)-[e:belong]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询issue的2度的环",
        "output": "match(a:issue)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和周思琪有关的人，以及与这些人有关联的人，并返回它们。",
        "output": "match(a:person where a.name = '周思琪')-[e]-(b:person), (a:person)-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我找出论坛包含的person,返回其源点的id的平均值乘38的值,以及目标点的年龄加年龄的和;2: 查询和user李若涵有user_likes_post关系的post,以及和user张建国有user_likes_post关系的post,将它们都返回;3: 返回所有和post Post_279有2跳关系的user;4: 查找源点name不是百度贴吧,边类型是forum_contain_person,且weight在112.98到140.69之间或targetId的平均值对176取余为125或targetId小于等于21的边,返回这些边的targetId除44的值;5: 请帮我查找与user周雪存在user_publish_post关系,且与tag悬疑存在post_has_tag关系的post节点，返回这些post的wordCount,id,及user周雪的age,及tag悬疑的id;6: 找出前161个类型是post_has_tag的边;",
        "output": "查询语句为:1: match(a:forum)-[e:forum_contain_person]->(b:person) return AVG(a.id) * 38, SUM(b.age + b.age);2: match(a:user where a.name = '李若涵')-[e:user_likes_post]->(b:post),(c:user where c.name = '张建国')-[e2:user_likes_post]->(d:post)return a, b, c, d;3: match(a:post where a.name='Post_279')-[e]->{2,2}(b:user) return b;4: match(a where a.name <> '百度贴吧')-[e:forum_contain_person where (e.weight BETWEEN 112.98 AND 140.69) or AVG(e.targetId) % 176 = 125 or e.targetId <= 21]->(b) return e.targetId / 44;5: match(a:user where a.name='周雪')-[e:user_publish_post]->(b:post)<-[e2:post_has_tag]-(c:tag where c.name='悬疑') return a.age,b.wordCount, b.id,c.id;6: match(a)-[e:post_has_tag]->(b) return e limit 161;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以67, 5作为输入调用triangleCount函数,返回运算结果",
        "output": "Call TRIANGLECOUNT(67, 5) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与重庆大学相关的大学，再查询与这些大学位于同一城市的其他城市，并返回它们。",
        "output": "match(a:university where a.name = '重庆大学')-[e]-(b:university), (a:university)-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与publisher李轩有关系的book的createTime",
        "output": "match(a:publisher where a.name='李轩')-[e]-(b:book) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出前52个标签等于company_creates_software的边",
        "output": "match(a)-[e:company_creates_software]->(b) return e limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表576,469,436,154, 以属性id作为相等条件,查找buyer赵建国的全部partner,的srcId乘39的值",
        "output": "with p as (select * from (VALUES(576),(469),(436),(154)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '赵建国')) -[e:partner ]->(b) RETURN e.srcId * 39 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型是person,边类型是认识的边,返回这些边的源点id对169取余的值,和srcId的最大值对199取余的值",
        "output": "match(a:person)-[e:knows]->(b) return e.srcId % 169, MAX(e.srcId) % 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 请帮我查找user张科的所有标签等于partner的边,并根据targetId降序排列,返回22个;2: 给出类型是帖子,名为Post_156的点,返回这些点的id,价值;3: 帮我查询与用户李建国有关,且与标签动作有关系的帖子节点;4: 请帮我找出论坛CSDN包含的person,被其他论坛包含的数量;5: 返回名为动作的tag,以及与其有关的post,并返回动作的value和这些post的name;",
        "output": "查询语句为:1: match(a:user where a.name = '张科')-[e:partner]->(b) return b order by e.targetId desc limit 22;2: match(a:post where a.name = 'Post_156') return a.id, a.value;3: match(a:user where a.name='李建国')-[e:user_likes_post]-(b:post)-[e2:post_has_tag]-(c:tag where c.name='动作') return b;4: match(a:forum where a.name='CSDN')-[e:forum_contain_person]->(b:person)<-[e2:forum_contain_person]-(c:forum) return COUNT(c);5: match(a:tag where name = '动作')-[e]-(b:post) return a.value, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取出版社ID为15的书籍相关的合作伙伴，然后获取与该出版社有合作关系的朋友。",
        "output": "match(a:book where id = '15')-[e]-(b:publisher)-[e2:partner]->(c), (b:publisher)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找name的最大值大于55的节点",
        "output": "match(a where MAX(a.name) > 55) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(167,'famale',7660),(181,'famale',8695),(173,'male',2870),(163,'famale',5925)作为请求表数据,属性分别为height,gender,salary, 以属性gender作为相等条件,给出名为王科和吴强的,类型为buyer的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES(167,'famale',7660),(181,'famale',8695),(173,'male',2870),(163,'famale',5925)) as t(height,gender,salary))MATCH (a:buyer WHERE a.gender = p.gender AND (a.name = '王科')) -[e:friend ]->(b) <-[e2:friend ]-(c:buyer WHERE c.name = '吴强') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询以has关系关联了department物理学院的university;2: 返回和department有关联的teacher节点,并根据其salary,gender分组,返回salary,gender,以及salary除salary的最小值;3: 找出大学浙江大学 拥有的部门,返回部门 拥有的教师的身高除155的值 ;4: 找出department的1度以内的环;",
        "output": "查询语句为:1: match(a:department where a.name='物理学院')<-[e:university_has_department]-(b:university) return b;2: match(a:department)-[e:department_has_teacher]-(b:teacher) return b.salary, b.gender, MIN(b.salary / b.salary) group by b.salary, b.gender;3: match(a:university where name = '浙江大学')-[e:university_has_department]->(b:department)-[e2:department_has_teacher]->(c:teacher) return c.height / 155;4: match(a:department)->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为10的点的id",
        "output": "match(a where a.id = 10) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person有关联的软件节点,并根据其语言,名字,id分组,返回语言,名字,id,以及价值对418取余的值",
        "output": "match(a:person)-[e:buy]-(b:software) return b.lang, b.name, b.id, b.value % 418 group by b.lang, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出91个价值大于等于515且创建时间是2021年02月23日的账号,根据价值从小到大排列",
        "output": "match(a:account where a.value >= 515 and a.createTime = '2021-02-23') return a order by a.value asc limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是帖子的点,返回101个",
        "output": "match(a:post) return a limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和公司美团有关系的公司或大学,返回这些点的id,价值",
        "output": "match(a:company where a.name='美团')-[e]-(b:company | university) return b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点label为person,边label为父母的边,返回这些边的权重减116.84的个数,和目标点id减目标点id的值",
        "output": "match(a:person)-[e:parent]->(b) return COUNT(e.weight - 116.84), e.targetId - e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照性别从小到大排序，搜索所有person类型的数据。",
        "output": "match(a:person) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和account有关联的account节点,并根据其value分组,返回value,以及id乘83的平均值",
        "output": "match(a:account)-[e:transfer]-(b:account) return b.value, AVG(b.id * 83) group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与贷款有关系的公司节点,且公司节点的名字不是微软,并返回这些公司的id除98除id的个数,以及公司的价值加710的数量",
        "output": "match(a:loan)-[e]->(b:company where b.name <> '微软') return COUNT(b.id / 98 / b.id), COUNT(b.value + 710)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张科的点认识的person",
        "output": "match(a where a.name='张科')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与'电影院好视影院'和'评论Comment_256'都有关系的标签节点，然后返回它们的ID、名称和价值。",
        "output": "match(a:cinema where a.name='好视影院')-[e]->(b:tag)<-[e2]-(c:comment where c.name='Comment_256') return b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与仓库有关系的用户节点,且用户节点的名字不是张国强,并返回这些用户的年龄加年龄的值,以及用户的height的数量加192的值",
        "output": "match(a:repository)-[e]->(b:user where b.name <> '张国强') return b.age + b.age, COUNT(b.height) + 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表808,989, 源点的id等于输入表id,返回名为马国强和徐国强的,标签为buyer的点公共的relation节点的名单",
        "output": "with p as (select * from (VALUES(808),(989)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '马国强')) -[e:relation ]->(b) <-[e2:relation ]-(c:buyer WHERE c.name = '徐国强') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与大学复旦大学有关,且与教师韩思思有关系的部门节点",
        "output": "match(a:university where a.name='复旦大学')-[e:university_has_department]-(b:department)-[e2:department_has_teacher]-(c:teacher where c.name='韩思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问文学院有多少学生被其他部门所拥有？",
        "output": "match(a:department where a.name='文学院')-[e:has]->(b:student)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于orders的点,返回133个",
        "output": "match(a:orders) return a limit 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为category,id,value, 数据为('历史',97,341), 以属性value作为相等条件,返回以拥有关系关联了标签科幻的电影",
        "output": "with p as (select * from (VALUES('历史',97,341)) as t(category,id,value))MATCH (a:tag WHERE a.value = p.value AND (a.name = '科幻')) <-[e:film_has_tag ]-(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找全部名为张思琪的点的,年龄大于59或性别是famale的父母,返回这些父母的名字,和边的f1,源点id;2: 请帮我找出以关联关系关联了person何月的person;3: 返回和person陈建聪有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person;4: 给出全部person以性别,id,年龄分组的性别, 根据性别从大到小排序;5: 查找被person周思琪knows的person;6: 找出所有和名为韩雪的person有父母关系,或有父母的父母关系的person;7: 查询和person赵强有person_family_person关系的person,以及和person赵梅有person_colleague_person关系的person,将它们都返回;8: 查找全部id为193的person关联的person,和以关联关系关联了这些person的其他person;9: 查询和person Bob有person_colleague_person关系的person,以及和person郑月有person_friend_person关系的person,将它们都返回;",
        "output": "查询语句为:1: match(a where a.name='张思琪')-[e:person_parent_person]->(b where b.age > 59 or b.gender = 'famale') return b.name,e.f1, e.srcId;2: match(a:person where a.name='何月')<-[e:relates]-(b:person) return b;3: match(a:person where a.name = '陈建聪')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;4: match(a:person) return a.gender group by a.gender, a.id, a.age order by a.gender desc;5: match(a:person)<-[e:knows]-(b:person where b.name='周思琪') return a, b;6: match(a:person where n.name=韩雪)-[e:person_parent_person]->{1,2}(b:person) return b;7: match(a:person where a.name = '赵强')-[e:person_family_person]->(b:person),(c:person where c.name = '赵梅')-[e2:person_colleague_person]->(d:person)return a, b, c, d;8: match(a:person where a.id = '193')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;9: match(a:person where a.name = 'Bob')-[e:person_colleague_person]->(b:person),(c:person where c.name = '郑月')-[e2:person_friend_person]->(d:person)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从贷款loan_3出发,经过标签等于存款的边,走2到5跳到达的账号点",
        "output": "match(a:loan where a.name='loan_3')-[e:deposit]->{2,5}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从pullRequest PR-128出发,经过标签为belong的边,走3到6跳到达的repository点",
        "output": "match(a:pullRequest where a.name='PR-128')-[e:belong]->{3,6}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签为person,目标点标签为person,标签为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('腾讯',754,'medium'),('阿里',126,'large')作为请求表数据,属性分别为name,value,scale, 源点的name等于输入表name,返回和loan有关联的account节点,并根据其lastLoginTime,value分组,返回lastLoginTime,value,以及value减value的和",
        "output": "with p as (select * from (VALUES('腾讯',754,'medium'),('阿里',126,'large')) as t(name,value,scale))MATCH (a:loan WHERE a.name = p.name) -[e:loan_deposit_account ]-(b:account) RETURN b.lastLoginTime, b.value, SUM(b.value - b.value) GROUP BY b.lastLoginTime, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有从country类型的源点到city类型的target点，且类型为contain的边。",
        "output": "match(a:country)-[e:contain]->(b:city) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 马雪认识的人。",
        "output": "match(a:person where a.name = '马雪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person郑思思的friend,的f0除580的值",
        "output": "match(a:person where a.name= '郑思思')-[e:friend]->(b) return e.f0 / 580",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件name不是吴轩,age大于57且id大于69的节点",
        "output": "match(a where a.name <> '吴轩' and a.age > 57 and a.id > 69) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点label为卖家,目标点label为买家,label为卖家或订单的边",
        "output": "match(a:seller)-[e:seller | orders]->(b:buyer) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出前170个标签为person_pay_person的边",
        "output": "match(a)-[e:person_pay_person]->(b) return e limit 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为loan_43的loan,以及与其有关的company,并返回loan_43的id和这些company的scale",
        "output": "match(a:loan where name = 'loan_43')-[e]-(b:company) return a.id, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 找出全部部门以id,权重分组的id, 根据id从小到大排序;2: 找出前129个标签为patient_accept_prescription的边;3: 返回和医生徐建聪有doctor_diagnose_patient关系的病人,再返回以doctor_diagnose_patient关系关联了徐建聪的病人;4: 查找所有源点类型为doctor,边类型为doctor_creates_prescription的边,返回这些边的weight减weight乘174的数量,和weight除154.86的数量;",
        "output": "查询语句为:1: match(a:department) return a.id group by a.id, a.weight order by a.id asc;2: match(a)-[e:patient_accept_prescription]->(b) return e limit 129;3: match(a:doctor where a.name = '徐建聪')-[e:doctor_diagnose_patient]->(b:patient),(a:doctor where a.name = '徐建聪')<-[e2:doctor_diagnose_patient]-(c:patient)return a, b, c;4: match(a:doctor)-[e:doctor_creates_prescription]->(b) return COUNT((e.weight - e.weight) * 174), COUNT(e.weight / 154.86);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person王思思有关系的person的薪资",
        "output": "match(a:person where a.name='王思思')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为孙建国和吴轩的,标签为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='孙建国')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='吴轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被账号转账数量大于101的账号,记为relationCount,再查询这些账号转账的person",
        "output": "match(a:account) let a.relationCount = COUNT((a:account)<-[e:transfer]-(b:account) => b.id) match(a where a.relationCount > 101)-[e2:transfer]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person李伟之间有恋人关系的person",
        "output": "match(a:person where a.name='李伟')-[e:lover]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出源点年龄是91,id不为空,边label为user_likes_post,且时间戳等于2001年01月03日或目标点id除目标点id对源点id取余大于等于917的边,返回这些边的目标点id除182的值",
        "output": "match(a where a.age = 91 and (a.id is not null))-[e:user_likes_post where e.timeStamp = '2001-01-03' or e.targetId / e.targetId % e.srcId >= 917]->(b) return e.targetId / 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对年龄取余的值",
        "output": "a.age % a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被reader杜国强likes的book,和杜国强likes的book",
        "output": "match(a:book)<-[e:likes]-(b:reader where name = '杜国强')-[e2:likes]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出book knows的book, 令book的name的值等于publishbook的publisher的height的最大值, 再查找book knows的book",
        "output": "match(a:book)-[e:knows]->(b:book) let b.name = MAX((b:book)<-[e2:publish]-(c:publisher) => c.height) match(b:book)-[e3:knows]->(d:book) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和教师赵国强有关的部门,再返回和赵国强教的其他课程,返回它们",
        "output": "match(a:teacher where a.name = '赵国强')-[e]-(b:department), (a:teacher)-[e2:teach]->(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标签其他有关系的标签的价值",
        "output": "match(a:tag where a.name='其他')-[e]-(b:tag) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我找出与名为张思思和孙建国的点共同knows的,类型是person的节点;2: 返回和person徐若涵有关的company,称为X,再返回和这个X有关联的其他person,以及和X有关联的company;3: 请帮我找出58个名为杜建聪的点knows的label为person的节点,且其name不等于徐建聪,gender不等于male;4: 帮我查询和软件Flink有software_uses_software关系的软件,以及和公司谷歌有company_employee_person关系的person,将它们都返回;",
        "output": "查询语句为:1: match(a where a.name = '张思思')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '孙建国') return b;2: match(a:person where a.name = '徐若涵')-[e]-(b:company), (b:company)-[e2]-(c:person),(b:company)-[e3]-(d:company) return a, b, c, d;3: match(a where a.name='杜建聪')-[e:person_knows_person]->(b:person where b.name <> '徐建聪' and b.gender <> 'male') return b limit 58;4: match(a:software where a.name = 'Flink')-[e:software_uses_software]->(b:software),(c:company where c.name = '谷歌')-[e2:company_employee_person]->(d:person)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出belong department皮肤科的doctor,和这些doctor diagnose的patient",
        "output": "match(a:department where name = '皮肤科')<-[e:belong]-(b:doctor)-[e2:diagnose]->(c:patient) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前34个创建时间不等于2017年10月07日或创建时间不等于2010年05月22日或语言小于等于23的帖子",
        "output": "match(a:post where a.createTime <> '2017-10-07' or a.createTime <> '2010-05-22' or a.lang <= 23) return a limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘id的值",
        "output": "a.id * a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person黄思思支付的person,以及认识这些person的person",
        "output": "match(a:person where name = '黄思思')-[e:pay]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与university复旦大学有关系的company的id",
        "output": "match(a:university where a.name='复旦大学')-[e]-(b:company) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与医生郑雪和何月都存在创造关系的点",
        "output": "match(a:doctor where a.name='郑雪')-[e:creates]->(b)<-[e2:creates]-(c:doctor where c.name='何月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表915,736, 源点的id等于输入表id,返回和person Jimmy有关的person,再返回和 Jimmy person_knows_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(915),(736)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = 'Jimmy')) -[e ]-(b:person) , (a:person) -[e2:person_knows_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签等于买家,目标点标签等于卖家,标签等于买家或商品或订单的边",
        "output": "match(a:buyer)-[e:buyer | goods | orders]->(b:seller) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,gender,age分组,计算salary减1588的值",
        "output": "return a.salary - 1588 group by a.name, a.gender, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出68个名为徐红的点喜欢的类型是person的节点,且其薪资大于等于9981或名字等于张宏",
        "output": "match(a where a.name='徐红')-[e:likes]->(b:person where b.salary >= 9981 or b.name = '张宏') return b limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为用户，边label为创造的边，并返回这些边的权重减去148.15后最小的那个值，以及f0除以749后的余数之和。",
        "output": "match(a:user)-[e:creates]->(b) return MIN(e.weight - 148.15), SUM(e.f0 % 749)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与user吴宏有关系的repository的lang",
        "output": "match(a:user where a.name='吴宏')-[e]-(b:repository) return b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与forum中国诗词论坛有contain关系的2度的环",
        "output": "match(a:forum where name = '中国诗词论坛')-[e:contain]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与teacher韩红有teach关系的2度的环",
        "output": "match(a:teacher where name = '韩红')-[e:teach]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问CSDN论坛中某个帖子被其他用户喜欢的数量是多少？",
        "output": "match(a:forum where a.name='CSDN')-[e:contain]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找电影院UME的全部类型是伙伴的边,并根据f0降序排列,返回70个",
        "output": "match(a:cinema where a.name = 'UME')-[e:partner]->(b) return b order by e.f0 desc limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以504作为请求点id, 源点的id等于输入表id,帮我查询id为87的city有关的university的partner, 再帮我查询和university有关系的relation",
        "output": "with p as (select * from (VALUES(504)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (id = '87')) -[e ]-(b:university) -[e2:partner ]->(c) , (b:university) -[e3:relation ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找知网论坛",
        "output": "match(a:forum where a.name = '知网') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查询id为115的点的价值,名字,id;2: 找出和company Bilibili有company_cooperate_university关系的university,再找出以company_cooperate_university关系关联了 Bilibili的university;3: 查找类型是公司的全部点,并根据规格从小到大排列;4: 帮我查询id为184的city关联的company,和以cooperate关系关联了这些company的其他university;",
        "output": "查询语句为:1: match(a where a.id = '115') return a.value, a.name, a.id;2: match(a:company where a.name = 'Bilibili')-[e:company_cooperate_university]->(b:university),(a:company where a.name = 'Bilibili')<-[e2:company_cooperate_university]-(c:university)return a, b, c;3: match(a:company) return a order by a.scale asc;4: match(a:city where a.id = '184')-[e]-(b:company)<-[e2:university_cooperate_company]-(c:university) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person李思琪有关系的person的age",
        "output": "match(a:person where a.name='李思琪')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(64,2321.09,531)作为请求表数据,属性分别为id,price,value, 以属性value作为相等条件,找出所有源点标签等于buyer,边标签等于buyer_consult_seller的边,返回这些边的weight加114.04加srcId的数量,和weight对weight取余的值",
        "output": "with p as (select * from (VALUES(64,2321.09,531)) as t(id,price,value))MATCH (a:buyer WHERE a.value = p.value) -[e:buyer_consult_seller ]->(b) RETURN COUNT(e.weight + 114.04 + e.srcId), e.weight % e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为180的user有关的user的partner, 再给出和user有关系的partner",
        "output": "match(a:user where id = 180)-[e]-(b:user)-[e2:partner]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间分组,计算id对91取余的平均值",
        "output": "return AVG(a.id % 91) group by a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询190个名为XXRepo的点has的标签为user的节点,且节点age除42大于等于8430",
        "output": "match(a where a.name='XXRepo')-[e:has]->(b:user where b.age / 42 >= 8430) return b limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为赵宏的person,以及与其有关的person,并返回赵宏的id和这些person的name",
        "output": "match(a:person where name = '赵宏')-[e]-(b:person) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为34的forum contain的post, 并将post有关的user的height的最小值赋值给post的lang, 接着查询post的lang小于34的post has的tag",
        "output": "match(a:forum where a.id = 34)-[e:contain]->(b:post) let b.lang = MIN((b:post)-[e2]-(c:user) => c.height) match(b:post where b.lang < 34)-[e3:has]->(d:tag) return b.lang, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询user郑科 likes的repository,返回repository has的pullRequest的changeFileNumber除changeFileNumber的值",
        "output": "match(a:user where name = '郑科')-[e:likes]->(b:repository)-[e2:has]->(c:pullRequest) return c.changeFileNumber / c.changeFileNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回和作家赵思琪有author_knows_author关系的作家,以及和编辑何梅有publisher_publish_book关系的书,将它们都返回;2: 给出和reader黄伟有reader_likes_book关系的book,再给出以reader_likes_book关系关联了黄伟的book;3: 查找全部书以名字分组的名字, 根据名字降序排序;4: 返回作家何雪的伙伴,的源点id除源点id的值;5: 查找和author有关联的author节点,并根据其id,gender,name分组,返回id,gender,name,以及height减168的最大值;6: 找出与编辑杜思琪和张思思都存在publisher_publish_book关系的点;7: 返回编辑以名字,id分组的性别, 根据性别升序排序;8: 返回源点类型是author,目标点类型是book,类型是author_write_book的边;9: 请帮我查找名为何梅的点knows的author;",
        "output": "查询语句为:1: match(a:author where a.name = '赵思琪')-[e:author_knows_author]->(b:author),(c:publisher where c.name = '何梅')-[e2:publisher_publish_book]->(d:book)return a, b, c, d;2: match(a:reader where a.name = '黄伟')-[e:reader_likes_book]->(b:book),(a:reader where a.name = '黄伟')<-[e2:reader_likes_book]-(c:book)return a, b, c;3: match(a:book) return a.name group by a.name order by a.name desc;4: match(a:author where a.name= '何雪')-[e:partner]->(b) return e.srcId / e.srcId;5: match(a:author)-[e:author_knows_author]-(b:author) return b.id, b.gender, b.name, MAX(b.height - 168) group by b.id, b.gender, b.name;6: match(a:publisher where a.name='杜思琪')-[e:publisher_publish_book]->(b)<-[e2:publisher_publish_book]-(c:publisher where c.name='张思思') return b;7: match(a:publisher) return a.gender group by a.name, a.id order by a.gender asc;8: match(a:author)-[e:author_write_book]->(b:book) return e;9: match(a where a.name='何梅')-[e:author_knows_author]->(b:author) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询height为空的buyer consult的seller的名称,以及这些seller ask的buyer的名称",
        "output": "match(a:buyer where (a.height is null))-[e:consult]->(b:seller)-[e2:ask]->(c:buyer) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出190个价值不等于71的国家,根据价值从大到小排列",
        "output": "match(a:country where a.value <> 71) return a order by a.value desc limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与名为徐国强的人有朋友关系，或者有朋友的朋友关系的评论",
        "output": "match(a:person where n.name=徐国强)-[e:friend]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 给出label为person的所有点,并根据age升序排列;2: 查询身高的平均值小于等于4067的person喜欢的person的名称,以及这些person 喜欢的person的名称;3: 请帮我查找源点id小于等于49或名字等于马宏,且身高大于177,边标签等于person_pay_person,且满足条件目标点id大于等于139的边,返回这些边的目标点id对63取余减3的平均值;4: 请帮我查找从person马梅出发,经过标签为person_knows_person的边,走2度或3度到达的person点;5: 查询与person李思思有关系的person, 返回和这些person有关联的person的,薪资除薪资的平均值;6: 查询height的最小值除194的求和值小于等于8721的person knows的person的名称,以及这些person likes的person的名称;7: 查找名为赵伟的person,以及与其有关的person,并返回赵伟的性别和这些person的身高;8: 请帮我找出80个person何建聪和赵月,共同的friend;9: 返回所有和名为王建国的person有朋友关系,或有朋友的朋友关系的person;",
        "output": "查询语句为:1: match(a:person) return a order by a.age asc;2: match(a:person where AVG(a.height) <= 4067)-[e:person_likes_person]->(b:person)-[e2:person_likes_person]->(c:person) return b.name as b_name, c.name as c_name;3: match(a where (a.id <= 49 or a.name = '马宏') and a.height > 177)-[e:person_pay_person where e.targetId >= 139]->(b) return AVG(e.targetId % 63 - 3);4: match(a:person where a.name='马梅')-[e:person_knows_person]->{2,3}(b:person) return b;5: match(a:person where a.name= '李思思')-[e]-(b:person)-[e2]-(c:person) return AVG(c.salary / c.salary);6: match(a:person where SUM(MIN(a.height) / 194) <= 8721)-[e:person_knows_person]->(b:person)-[e2:person_likes_person]->(c:person) return b.name as b_name, c.name as c_name;7: match(a:person where name = '赵伟')-[e]-(b:person) return a.gender, b.height;8: match(a:person where a.name='何建聪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵月') return b limit 80;9: match(a:person where n.name=王建国)-[e:friend]->{1,2}(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表982, 以属性id作为相等条件,查找与person黄若涵和王科都存在person_knows_person关系的点",
        "output": "with p as (select * from (VALUES(982)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '黄若涵')) -[e:person_knows_person ]->(b) <-[e2:person_knows_person ]-(c:person WHERE c.name = '王科') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和medicine生理盐水有关的medicine,称为X,再查询和这个X有关联的其他medicine,以及和X有关联的medicine",
        "output": "match(a:medicine where a.name = '生理盐水')-[e]-(b:medicine), (b:medicine)-[e2]-(c:medicine),(b:medicine)-[e3]-(d:medicine) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询名为阿里的company;2: 给出全部和公司字节之间有company_belong_city关系的城市;3: 找出全部和名为武汉大学的大学有朋友关系,或有朋友的朋友关系的城市;4: 找出以合作关系关联了大学复旦大学的公司;5: 给出与大学南京大学和清华大学都存在university_cooperate_company关系的点;6: 给出前193个id为空的国家;7: 请帮我查找所有国家以面积,价值,人数分组的人数, 根据人数从小到大排序;8: 请帮我查找所有源点标签为大学,边标签为university_cooperate_company的边,返回这些边的目标点id乘目标点id的值,和权重除146.07的数量;9: 查找city的三角的环,边label为city_contain_university, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:company where a.name = '阿里') return a;2: match(a:company where a.name='字节')-[e:company_belong_city]->(b:city) return b;3: match(a:university where n.name=武汉大学)-[e:friend]->{1,2}(b:city) return b;4: match(a:university where a.name='复旦大学')<-[e:company_cooperate_university]-(b:company) return b;5: match(a:university where a.name='南京大学')-[e:university_cooperate_company]->(b)<-[e2:university_cooperate_company]-(c:university where c.name='清华大学') return b;6: match(a:country where (a.id is null)) return a limit 193;7: match(a:country) return a.peopleNumber group by a.area, a.value, a.peopleNumber order by a.peopleNumber asc;8: match(a:university)-[e:university_cooperate_company]->(b) return e.targetId * e.targetId, COUNT(e.weight / 146.07);9: match(a:city)-[e:city_contain_university]->(b)-[e2:city_contain_university]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有标签为人、名字叫徐建国的点，并返回它们的ID。",
        "output": "match(a:person where a.name = '徐建国') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person韩思琪关联的person节点认识的person",
        "output": "match(a:person where a.name = '韩思琪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和电影神探狄仁杰有3到5度关系的标签",
        "output": "match(a:film where a.name='神探狄仁杰')-[e]->{3,5}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出loan的三角的环,边标签等于loan_deposit_account, 并返回这些点的id",
        "output": "match(a:loan)-[e:loan_deposit_account]->(b)-[e2:loan_deposit_account]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王国强和赵强都存在家人关系的点",
        "output": "match(a:person where a.name='王国强')-[e:family]->(b)<-[e2:family]-(c:person where c.name='赵强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前191个满足条件薪资大于7798的用户",
        "output": "match(a:user where a.salary > 7798) return a limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与处方点相关的药品节点，按ID、权重和名称进行分组，并返回它们的ID、权重和名称。",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.id, b.weight, b.name group by b.id, b.weight, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有类型为贷款的点",
        "output": "match(a:loan) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出拥有'城市'标签且位于深圳或天津的两个点的所有共同朋友。",
        "output": "match(a:city where a.name='深圳')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='天津') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,age,id, 数据为('male',39,69),('male',41,83), 源点的id等于输入表id,请帮我查找和person杜红有关的person,再请帮我查找和杜红person_parent_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES('male',39,69),('male',41,83)) as t(gender,age,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '杜红')) -[e ]-(b:person) , (a:person) -[e2:person_parent_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和account Geaflow123有transfer关系的account,再请帮我查找以transfer关系关联了Geaflow123的account",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:transfer]->(b:account),(a:account where a.name = 'Geaflow123')<-[e2:transfer]-(c:account)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 计算所有person的年龄对30取余对7338取余的平均值;2: 请帮我查找从person周宏出发,经过label为person_parent_person的边,走3跳或4跳到达的person点;3: 请帮我找出与名为王梅和黄月的点共同认识的,类型为person的节点;4: 查找141个name不是周若涵的person,根据height降序排列;",
        "output": "查询语句为:1: match(a:person) return AVG(a.age % 30 % 7338);2: match(a:person where a.name='周宏')-[e:person_parent_person]->{3,4}(b:person) return b;3: match(a where a.name = '王梅')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '黄月') return b;4: match(a:person where a.name <> '周若涵') return a order by a.height desc limit 141;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与张伟和徐建聪都为朋友的人",
        "output": "match(a:person where a.name='张伟')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='徐建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回黄国强家人的父母。",
        "output": "match(a:person where a.name='黄国强')-[e:family]->(b)-[e2:family]->(c)-[e3:parent]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有神探狄仁杰的点和被发布的电影院",
        "output": "match(a where a.name = '神探狄仁杰')-[e:has]->(b:tag),(a where a.name = '神探狄仁杰')<-[e2:releases]-(c:cinema) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 找出university中国科技大学belong的city节点contain的company;2: 帮我查询被城市上海属于的国家;3: 返回id为197的国家有关的公司的相关者, 再返回和公司有关系的朋友;4: 找出大学浙江大学的全部朋友,的权重除权重的值;5: 返回所有源点标签为公司,目标点标签为城市,标签为company_belong_city的边;",
        "output": "查询语句为:1: match(a:university where a.name = '中国科技大学')-[e:university_belong_city]->(b:city)-[e2:city_contain_company]->(c:company) return c;2: match(a:country)<-[e:city_belong_country]-(b:city where b.name='上海') return a, b;3: match(a:country where id = '197')-[e]-(b:company)-[e2:relation]->(c), (b:company)-[e3:friend]->(d) return a, b, c, d;4: match(a:university where a.name= '浙江大学')-[e:friend]->(b) return e.weight / e.weight;5: match(a:company)-[e:company_belong_city]->(b:city) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点name不等于计算机体系结构,name的最大值为23,或courseHour在30到40之间,边类型是belong,且满足条件f0为空的边,返回这些边的weight除157.74的值",
        "output": "match(a where (a.name <> '计算机体系结构' and MAX(a.name) = 23) or (a.courseHour BETWEEN 30 AND 40))-[e:belong where (e.f0 is null)]->(b) return e.weight / 157.74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 查询和account BIN有account_repay_loan关系的loan,再查询以account_transfer_account关系关联了 BIN的account;2: 找出所有与account有关系的loan节点,且loan节点的id不为空,并返回这些点的weight的最大值对991取余的平均值,以及amount减3658.39的值;3: 帮我查询源点标签等于账号,目标点标签等于贷款,标签等于account_repay_loan的边;",
        "output": "查询语句为:1: match(a:account where a.name = 'BIN')-[e:account_repay_loan]->(b:loan),(a:account where a.name = 'BIN')<-[e2:account_transfer_account]-(c:account)return a, b, c;2: match(a:account)-[e]->(b:loan where (b.id is not null)) return AVG(MAX(b.weight) % 991), b.amount - 3658.39;3: match(a:account)-[e:account_repay_loan]->(b:loan) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出168个名为杜科的点关联的标签为person的节点,且其名字不等于韩思琪或身高为185",
        "output": "match(a where a.name='杜科')-[e:relates]->(b:person where b.name <> '韩思琪' or b.height = 185) return b limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,address,size分组,计算size对size取余的值",
        "output": "return a.size % a.size group by a.id, a.address, a.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为lang,openSource,stars, 数据为('rust',true,875),('c',true,740),('c',true,772),('c',false,753), 源点的openSource等于输入表openSource,查询person周若涵的所有类型是相关者的边,并根据权重降序排列,返回87个",
        "output": "with p as (select * from (VALUES('rust',true,875),('c',true,740),('c',true,772),('c',false,753)) as t(lang,openSource,stars))MATCH (a:person WHERE a.openSource = p.openSource AND (a.name = '周若涵')) -[e:relation ]->(b) RETURN b ORDER BY e.weight DESC LIMIT 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,gender,name, 数据为(2758,'famale','Alice')的子查询作为输入表, 源点的name等于输入表name,给出全部周思思的点relates的person,然后给出周思思被relates的person,一起返回",
        "output": "with p as (select * from (VALUES(2758,'famale','Alice')) as t(salary,gender,name))MATCH (a WHERE a.name = p.name AND (a.name = '周思思')) -[e:relates ]->(b:person) , (a WHERE a.name = '周思思') <-[e2:relates ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id对50取余的平均值",
        "output": "AVG(a.id / a.id % 50)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与周月存在发布关系的书,书与书存在引用关系的点,返回这些点的id",
        "output": "match(a where a.name = '周月')-[e:publish]->(b:book)-[e2:refers]->(c:book) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的数量除7对844.80取余的最小值",
        "output": "MIN(COUNT(a.id) / 7 % 844.80)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height除151的平均值",
        "output": "return AVG(a.height / 151) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以512作为请求点id, 源点的id等于输入表id,帮我查询id为71的点的createTime,id,name",
        "output": "with p as (select * from (VALUES(512)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '71')) RETURN a.createTime, a.id, a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person徐建聪的所有标签为lover的边,并根据f0从小到大排列,返回25个",
        "output": "match(a:person where a.name = '徐建聪')-[e:person_lover_person]->(b) return b order by e.f0 asc limit 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出薪资为空或性别不是famale的person认识的person的名称,以及这些person 认识的person的名称",
        "output": "match(a:person where (a.salary is null) or a.gender <> 'famale')-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为马梅和李雪的,label为person的点公共的partner节点的名单",
        "output": "match(a:person where a.name='马梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李雪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询全部与大学有关系的教师节点,且教师节点的性别不等于male,并返回这些点的年龄加49的值,以及age的最小值加37乘年龄减6901的值;2: 给出全部教师以id分组的名字, 根据名字升序排序;3: 帮我查询全部部门的相关者,或其相关者的相关者;",
        "output": "查询语句为:1: match(a:university)-[e]->(b:teacher where b.gender <> 'male') return b.age + 49, (MIN(b.age) + 37) * b.age - 6901;2: match(a:teacher) return a.name group by a.id order by a.name asc;3: match(a:department)-[e:relation]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与一个用户相关的所有其他用户，以及这些其他用户之间的相关关系。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与南京大学存在belong关系的city,city与university存在contain关系的点,返回这些点的id",
        "output": "match(a where a.name = '南京大学')-[e:belong]->(b:city)-[e2:contain]->(c:university) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与buyer周国强存在consult关系,且与goods椅子存在has关系的seller节点，返回这些seller的salary,id,及buyer周国强的name,及goods椅子的value",
        "output": "match(a:buyer where a.name='周国强')-[e:consult]->(b:seller)<-[e2:has]-(c:goods where c.name='椅子') return a.name,b.salary, b.id,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以879,500,243作为请求点id, 源点的id等于输入表id,请帮我查找以取消关系关联了订单Order_177的买家",
        "output": "with p as (select * from (VALUES(879),(500),(243)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_177')) <-[e:buyer_cancel_orders ]-(b:buyer) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为陈科和吴强的,标签为person的点公共的朋友节点的名单",
        "output": "match(a:person where a.name='陈科')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='吴强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出patient张思思accept的prescription, 令patient的height等于patient的gender, 返回patient的gender, prescription的id",
        "output": "match(a:patient where a.name='张思思')-[e:accept]->(b:prescription) let a.height = a.gender return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出王伟观看的电影。",
        "output": "match(a:film)<-[e:watch]-(b:person where b.name='王伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 给出32个名为孙若涵的点has的类型为goods的节点,且节点category为1325.89或category是水果;2: 查询所有名为陈建聪的点cancel的orders;3: 返回goods的1跳的环;4: 查询卖家的三角的环,边类型为seller_has_goods, 并返回这些点的id;5: 查询前38个满足条件id为空的卖家;6: 查询全部与goods有关系的goods节点,且goods节点的sellerNumber在890.07到902.51之间,并返回这些点的id乘24加6加823的最大值,以及value对125取余的值;",
        "output": "查询语句为:1: match(a where a.name='孙若涵')-[e:seller_has_goods]->(b:goods where b.category = 1325.89 or b.category = '水果') return b limit 32;2: match(a where a.name='陈建聪')-[e:buyer_cancel_orders]->(b:orders) return b;3: match(a:goods)->{0,0}(b)->(a) return a.id, b.id as b_id;4: match(a:seller)-[e:seller_has_goods]->(b)-[e2:seller_has_goods]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a:seller where (a.id is null)) return a limit 38;6: match(a:goods)-[e]->(b:goods where (b.sellerNumber BETWEEN 890.07 AND 902.51)) return MAX(b.id * 24 + 6 + 823), b.value % 125;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为杜雪的点创造的处方",
        "output": "match(a where a.name='杜雪')-[e:creates]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和帖子Post_271之间有拥有关系的标签",
        "output": "match(a:post where a.name='Post_271')-[e:has]->(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出182名身高在172到195之间或ID小于65的个人，按姓名升序排列。",
        "output": "match(a:person where a.id < 65 or (a.height BETWEEN 172 AND 195)) return a order by a.name asc limit 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与浙江大学和澳大利亚都有关联的城市节点",
        "output": "match(a:university where a.name='浙江大学')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='澳大利亚') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value分组,计算value加650减87减id的值",
        "output": "return a.value + 650 - 87 - a.id group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前99个满足条件age为空且gender等于famale的person",
        "output": "match(a:person where (a.age is null) and a.gender = 'famale') return a limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询赵宏取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='赵宏') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最大值对507取余的数量",
        "output": "COUNT(MAX(a.value) % 507)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前23个name不等于蚂蚁集团且scale为large的company",
        "output": "match(a:company where a.name <> '蚂蚁集团' and a.scale = 'large') return a limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有商品以名字,类别分组的名字, 根据名字升序排序",
        "output": "match(a:goods) return a.name group by a.name, a.category order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为医生的点,并根据名字从大到小排列",
        "output": "match(a:doctor) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是person,名为陈科的点,返回这些点的身高,年龄",
        "output": "match(a:person where a.name = '陈科') return a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为城市的点,并根据面积降序排列",
        "output": "match(a:city) return a order by a.area desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person关联数量大于43的person,记为relationCount,再查询这些person关联的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 43)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与person李思琪有关系的person的gender",
        "output": "match(a:person where a.name='李思琪')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为黄思思的点关联的person,并对这些person的薪资进行求和",
        "output": "match(a where a.name='黄思思')-[e:relates]->(b:person) return SUM(b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回读者韩强喜欢的书,以及撰写这些书的作家, 令读者的名字等于书的字数, 返回读者的名字,书的价格,作家的年龄",
        "output": "match(a:reader where name = '韩强')-[e:likes]->(b:book)<-[e2:write]-(c:author) let a.name = b.wordCount return a.name,b.price,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回所有源点名字不等于韩宏且性别不是male,名字的数量大于190,目标点名字为王建国,名字不是Jimmy,性别是famale,且类型为person_pay_person的边;2: 查找全部源点类型是person,边类型是person_likes_person的边,返回这些边的srcId对srcId取余的最小值,和srcId对198取余加145.99的最小值;3: 查找和person有关联的person节点,并根据其id,性别分组,返回id,性别,以及height的最大值乘176的值;4: 找出从person Jack出发,经过label为person_pay_person的边,走2到5度到达的person点;5: 查询和person张国强有person_likes_person关系的person,再查询以person_knows_person关系关联了张国强的person;6: 请帮我查找以支付关系关联了person徐梅的person;",
        "output": "查询语句为:1: match(a where a.name <> '韩宏' and a.gender <> 'male' and COUNT(a.name) > 190)-[e:person_pay_person]->(b where b.name = '王建国' and b.name <> 'Jimmy' and b.gender = 'famale') return e;2: match(a:person)-[e:person_likes_person]->(b) return MIN(e.srcId % e.srcId), MIN(e.srcId % 198 + 145.99);3: match(a:person)-[e:person_pay_person]-(b:person) return b.id, b.gender, MAX(b.height) * 176 group by b.id, b.gender;4: match(a:person where a.name='Jack')-[e:person_pay_person]->{2,5}(b:person) return b;5: match(a:person where a.name = '张国强')-[e:person_likes_person]->(b:person),(a:person where a.name = '张国强')<-[e2:person_knows_person]-(c:person)return a, b, c;6: match(a:person where a.name='徐梅')<-[e:person_pay_person]-(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为ISSUE-97的点的,权重对权重取余为76,权重不是932的相关者,返回这些相关者的语言,和边的源点id,权重,f0",
        "output": "match(a where a.name='ISSUE-97')-[e:relation]->(b where b.weight % b.weight = 76 and b.weight <> 932) return b.lang,e.srcId, e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出类型为person,名为何轩的点,返回这些点的年龄,id,性别;2: 请帮我找出被person郑月knows的person;3: 帮我查询49个person孙伟和徐国强,共同的friend;4: 查找person陈梅 belong的company,返回company employee的person的id减77的值 ;",
        "output": "查询语句为:1: match(a:person where a.name = '何轩') return a.age, a.id, a.gender;2: match(a:person)<-[e:person_knows_person]-(b:person where b.name='郑月') return a, b;3: match(a:person where a.name='孙伟')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='徐国强') return b limit 49;4: match(a:person where name = '陈梅')-[e:person_belong_company]->(b:company)-[e2:company_employee_person]->(c:person) return c.id - 77;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 找出全部源点类型为person,边类型为person_friend_person的边,返回这些边的f0对911取余的值,和f0除f0的值;2: 找出75个与徐建聪和马建聪都存在关系的person节点;3: 查询标签为person的点,返回25个;4: 请帮我查找id为154的点的id;",
        "output": "查询语句为:1: match(a:person)-[e:person_friend_person]->(b) return e.f0 % 911, e.f0 / e.f0;2: match(a where a.name='徐建聪')-[e]->(b:person)<-[e2]-(c where c.name='马建聪') return b limit 75;3: match(a:person) return a limit 25;4: match(a where a.id = '154') return a.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘72的个数",
        "output": "COUNT(a.id * 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与城市标签相关的公司，以及这些公司所属的城市和这些城市所属的国家。",
        "output": "match(a:city)-[e:contain]->(b:company)-[e2:belong]->(c:city)-[e3:belong]->(d:country) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,gender, 数据为('黄轩',94,'famale'),('张科',54,'famale'),('陈思琪',12,'male'),('韩轩',84,'male')的子查询作为输入表, 源点的gender等于输入表gender,给出软件使用的软件,返回其源点的id加82的值,以及目标点的星数减936的求和值",
        "output": "with p as (select * from (VALUES('黄轩',94,'famale'),('张科',54,'famale'),('陈思琪',12,'male'),('韩轩',84,'male')) as t(name,id,gender))MATCH (a:software WHERE a.gender = p.gender) -[e:software_uses_software ]->(b:software) RETURN a.id + 82, SUM(b.stars - 936) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询包含用户黄国强的论坛,和这些论坛包含的帖子",
        "output": "match(a:user where name = '黄国强')<-[e:contain]-(b:forum)-[e2:contain]->(c:post) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我查找源点名字为体育学院,边标签等于department_has_student,且权重大于163.51或f0不是689,且源点id小于等于54的边,返回这些边的目标点id乘60的平均值;2: 帮我查询和教师Jack有关的大学,称为X,再帮我查询和这个X有关联的其他学生,以及和X有关联的大学;3: 返回和名为李思琪的teacher有relation关系,或有relation的relation关系的course;4: 帮我查询以拥有关系关联了学生王宏的部门;5: 查询和university重庆大学有关的university,再查询和重庆大学university_has_department的其他department,返回它们;6: 找出前101个满足条件name不是黄宏或gender等于famale,且id大于等于47的student;",
        "output": "查询语句为:1: match(a where a.name = '体育学院')-[e:department_has_student where (e.weight > 163.51 or e.f0 <> 689) and e.srcId <= 54]->(b) return AVG(e.targetId * 60);2: match(a:teacher where a.name = 'Jack')-[e]-(b:university), (b:university)-[e2]-(c:student),(b:university)-[e3]-(d:university) return a, b, c, d;3: match(a:teacher where n.name=李思琪)-[e:relation]->{1,2}(b:course) return b;4: match(a:student where a.name='王宏')<-[e:department_has_student]-(b:department) return b;5: match(a:university where a.name = '重庆大学')-[e]-(b:university), (a:university)-[e2:university_has_department]->(c:department) return a, b, c;6: match(a:student where (a.name <> '黄宏' or a.gender = 'famale') and a.id >= 47) return a limit 101;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找3个person韩伟和杜轩,共同的partner",
        "output": "match(a:person where a.name='韩伟')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='杜轩') return b limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算面积加25256的数量",
        "output": "return COUNT(a.area + 25256) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person李雪关联的person节点关联的person",
        "output": "match(a:person where a.name = '李雪')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有源点满足条件身高不为空且薪资为3639,或名字为韩思琪,目标点满足条件性别为famale且名字等于Tom,或性别不是male,且类型为person_colleague_person的边",
        "output": "match(a where ((a.height is not null) and a.salary = 3639) or a.name = '韩思琪')-[e:person_colleague_person]->(b where (b.gender = 'famale' and b.name = 'Tom') or b.gender <> 'male') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与用户陈雪有喜欢关系的1度的环",
        "output": "match(a:user where name = '陈雪')-[e:likes]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和标签等于大学的点有拥有关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签为作家的点有撰写关系的书,且和这些书有引用关系的书,且和这些书有引用关系的书",
        "output": "match(a:author)-[e:write]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询156个编辑吴月和周月,共同的伙伴",
        "output": "match(a:publisher where a.name='吴月')-[e:partner]->(b)<-[e2:partner]-(c:publisher where c.name='周月') return b limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减97的值",
        "output": "a.id - 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点身高的最小值大于等于192且薪资在2412到4802之间,边标签为投资,且源点id小于等于24或源点id小于152或源点id加52的最小值大于33的边,返回这些边的目标点id减171的值",
        "output": "match(a where MIN(a.height) >= 192 and (a.salary BETWEEN 2412 AND 4802))-[e:invest where e.srcId <= 24 or e.srcId < 152 or MIN(e.srcId + 52) > 33]->(b) return e.targetId - 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到person节点孙建聪出发，通过朋友类型的边，走了两步到达的人节点。",
        "output": "match(a:person where a.name='孙建聪')-[e:friend]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 张强为好友或好友的好友的所有帖子。",
        "output": "match(a:user where n.name=张强)-[e:friend]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('B座','UME',42),('南区','人人影城',62)作为请求表数据,属性分别为address,name,id, 源点的name等于输入表name,给出满足条件value等于520,name为文艺,或name不是其他的节点",
        "output": "with p as (select * from (VALUES('B座','UME',42),('南区','人人影城',62)) as t(address,name,id))MATCH (a WHERE a.name = p.name AND (a.value = 520 AND a.name = '文艺' OR a.name <> '其他')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 给出country越南contain的city节点contain的university;2: 请帮我查找名为重庆和伦敦的,label为city的点公共的relation节点的名单;3: 给出和类型为city的点有city_contain_university关系的university,以及和这些university有university_belong_city关系的city,以及和这些city有city_belong_country关系的country;4: 查找源点满足条件value不是314,目标点满足条件peopleNumber大于等于8415,name不是深圳,或name大于等于3052,且类型为university_belong_city的边;",
        "output": "查询语句为:1: match(a:country where a.name = '越南')-[e:country_contain_city]->(b:city)-[e2:city_contain_university]->(c:university) return c;2: match(a:city where a.name='重庆')-[e:relation]->(b)<-[e2:relation]-(c:city where c.name='伦敦') return b.name;3: match(a:city)-[e:city_contain_university]->(b:university)-[e2:university_belong_city]->(c:city)-[e3:city_belong_country]->(d:country) return d;4: match(a where a.value <> 314)-[e:university_belong_city]->(b where (b.peopleNumber >= 8415 and b.name <> '深圳') or b.name >= 3052) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找全部user以age,gender分组的age, 根据age从小到大排序;2: 返回124个名为百度贴吧的点contain的label为post的节点,且其lang不是Chinese;3: 请帮我找出和user有关联的post节点,并根据其createTime分组,返回createTime,以及value乘531的值;4: 给出以likes关系关联了post Post_155的user;5: 请帮我查找标签以id,名字,价值分组的价值, 根据价值从小到大排序;6: 帮我查询和forum有关联的person节点,并根据其salary分组,返回salary,以及height对height取余的值;",
        "output": "查询语句为:1: match(a:user) return a.age group by a.age, a.gender order by a.age asc;2: match(a where a.name='百度贴吧')-[e:forum_contain_post]->(b:post where b.lang <> 'Chinese') return b limit 124;3: match(a:user)-[e:user_publish_post]-(b:post) return b.createTime, b.value * 531 group by b.createTime;4: match(a:post where a.name='Post_155')<-[e:user_likes_post]-(b:user) return b;5: match(a:tag) return a.value group by a.id, a.name, a.value order by a.value asc;6: match(a:forum)-[e:forum_contain_person]-(b:person) return b.salary, b.height % b.height group by b.salary;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与赵轩有关的人，包括他知道和他相关的人，并将他们一起返回。",
        "output": "match(a where a.name = '赵轩')-[e:knows]->(b:person),(a where a.name = '赵轩')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与吴强存在家人关系的person,person与person存在朋友关系的点,返回这些点的名字",
        "output": "match(a where a.name = '吴强')-[e:family]->(b:person)-[e2:friend]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Py'作为输入调用pageRank函数,返回id, value",
        "output": "Call PAGERANK('Py') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和标签等于person的点有colleague关系的person,并且和这些person有friend关系的person,并且和这些person有parent关系的person",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:friend]->(c:person)-[e3:parent]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找72个名为华为的点申请的类型是贷款的节点,且其金额乘1177.67的数量小于等于23",
        "output": "match(a where a.name='华为')-[e:apply]->(b:loan where COUNT(b.amount * 1177.67) <= 23) return b limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为软件的点,返回153个",
        "output": "match(a:software) return a limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 帮我查询全部和patient徐建国有2到4跳关系的department;2: 查找department传染部的全部标签为relation的边,并根据targetId升序排列,返回152个;3: 查询类型为doctor的点,返回98个;4: 找出全部和病人点有接受关系的处方节点,且边满足条件目标点id大于151,目标处方节点创建时间是2030年10月20日;5: 查找和patient有关联的prescription节点,并根据其id分组,返回id,以及weight对422取余的值;6: 帮我查询类型为department,名为皮肤科的点,返回这些点的id,weight;",
        "output": "查询语句为:1: match(a:patient where a.name='徐建国')-[e]->{2,4}(b:department) return b;2: match(a:department where a.name = '传染部')-[e:relation]->(b) return b order by e.targetId asc limit 152;3: match(a:doctor) return a limit 98;4: match(a:patient)-[e:patient_accept_prescription where e.targetId > 151]->(b:prescription where b.createTime = '2030-10-20') return b;5: match(a:patient)-[e:patient_accept_prescription]-(b:prescription) return b.id, b.weight % 422 group by b.id;6: match(a:department where a.name = '皮肤科') return a.id, a.weight;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出26个和类型为forum的点有contain关系的user,以及和这些user有publish关系的post",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:publish]->(c:post) return c limit 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person吴思琪有拥有关系的账号,再查找以投资关系关联了吴思琪的公司",
        "output": "match(a:person where a.name = '吴思琪')-[e:own]->(b:account),(a:person where a.name = '吴思琪')<-[e2:invest]-(c:company)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高对171取余的值",
        "output": "a.height % 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为微软的点creates的所有software,并对这些software的stars进行求和",
        "output": "match(a where a.name='微软')-[e:creates]->(b:software) return SUM(b.stars)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找到从软件Kafka出发，沿着被标记为'使用'的边，以2度或3度路径到达的软件点？",
        "output": "match(a:software where a.name='Kafka')-[e:uses]->{2,3}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,name,salary, 数据为(51,'郑轩',4575), 以属性salary作为相等条件,查找名为黄宏和杜强的,标签等于person的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES(51,'郑轩',4575)) as t(age,name,salary))MATCH (a:person WHERE a.salary = p.salary AND (a.name = '黄宏')) -[e:friend ]->(b) <-[e2:friend ]-(c:person WHERE c.name = '杜强') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person关联的person,返回其源点的薪资除7370的值,以及目标点的身高加153的平均值",
        "output": "match(a:person)-[e:relates]->(b:person) return a.salary / 7370, AVG(b.height + 153)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从department土木学院出发，通过标签为has的边，向前一步到达的学生点。",
        "output": "match(a:department where a.name='土木学院')-[e:has]->{1,1}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person马红喜欢的person",
        "output": "match(a:person)<-[e:likes]-(b:person where b.name='马红') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减44加72的值",
        "output": "a.id - 44 + 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以441,34,566,617作为请求点id, 以属性id作为相等条件,帮我查询名为郑梅和徐建国的,标签等于buyer的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES(441),(34),(566),(617)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '郑梅')) -[e:friend ]->(b) <-[e2:friend ]-(c:buyer WHERE c.name = '徐建国') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前123个满足条件value在478到538之间的country",
        "output": "match(a:country where (a.value BETWEEN 478 AND 538)) return a limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,年龄分组,计算年龄除65的值",
        "output": "return a.age / 65 group by a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与作家相关的书籍节点，按创建时间和ID分组，并返回创建时间和ID。",
        "output": "match(a:author)-[e:write]-(b:book) return b.createTime, b.id group by b.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表686,503,954,339, 源点的id等于输入表id,查询所有源点类型为user,边类型为user_creates_issue的边,返回这些边的srcId的个数加83减589的最大值,和srcId对srcId取余的个数",
        "output": "with p as (select * from (VALUES(686),(503),(954),(339)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_creates_issue ]->(b) RETURN MAX(COUNT(e.srcId) + 83 - 589), COUNT(e.srcId % e.srcId) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有作家的伙伴，或他们伙伴的伙伴。",
        "output": "match(a:author)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person吴红的全部标签为relation的边,并根据targetId从大到小排列,返回51个",
        "output": "match(a:person where a.name = '吴红')-[e:relation]->(b) return b order by e.targetId desc limit 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为李月和杜轩的点共同接受的,标签等于处方的节点",
        "output": "match(a where a.name = '李月')-[e:accept]->(b:prescription)<-[e2:accept]-(c where c.name = '杜轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询全部id为75的城市关联的公司,和以合作关系关联了这些公司的其他大学;2: 请帮我找出与city武汉有关系的company, 返回和这些company有关联的university的,level乘4的最大值;3: 查找和company有关联的university节点,并根据其level,id,value分组,返回level,id,value,以及id加id的求和值;",
        "output": "查询语句为:1: match(a:city where a.id = '75')-[e]-(b:company)<-[e2:university_cooperate_company]-(c:university) return b,c;2: match(a:city where a.name= '武汉')-[e]-(b:company)-[e2]-(c:university) return MAX(c.level * 4);3: match(a:company)-[e:company_cooperate_university]-(b:university) return b.level, b.id, b.value, SUM(b.id + b.id) group by b.level, b.id, b.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找用户张梅创造的事项, 令事项的性别等于用户的薪资,令事项的名字等于事项的创建时间的求和值,令事项的身高等于用户的身高除153, 返回用户的性别, 事项的id",
        "output": "match(a:user where a.name='张梅')-[e:creates]->(b:issue) let b.gender = a.salary,let b.name = SUM(b.createTime),let b.height = a.height / 153 return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以233作为请求点id, 以属性id作为相等条件,查询172个名为张建国的点likes的label为book的节点,且节点name等于计算机网络且name等于百年孤独",
        "output": "with p as (select * from (VALUES(233)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '张建国')) -[e:reader_likes_book ]->(b:book WHERE b.name = '计算机网络' AND b.name = '百年孤独') RETURN b LIMIT 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表366,44,812,644, 以属性id作为相等条件,请帮我找出所有与person有关系的person节点,且person节点的性别不是male,并返回这些点的id减53的最大值,以及身高乘166的值",
        "output": "with p as (select * from (VALUES(366),(44),(812),(644)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e ]->(b:person WHERE b.gender <> 'male') RETURN MAX(b.id - 53), b.height * 166 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 给出类型是goods的所有点,并根据value从大到小排列;2: 请帮我查找seller的三角的环,边标签为seller_has_goods, 并返回这些点的id;3: 请帮我找出buyer的1度的环;4: 帮我查询全部buyer以age,name,id分组的height, 根据height降序排序;",
        "output": "查询语句为:1: match(a:goods) return a order by a.value desc;2: match(a:seller)-[e:seller_has_goods]->(b)-[e2:seller_has_goods]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:buyer)->{0,0}(b)->(a) return a.id, b.id as b_id;4: match(a:buyer) return a.height group by a.age, a.name, a.id order by a.height desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为马克思原理的点属于的所有部门,并对这些部门的大小进行求和",
        "output": "match(a where a.name='马克思原理')-[e:belong]->(b:department) return SUM(b.size)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age乘89的值",
        "output": "a.age * 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和评论点有属于关系的电影节点,且边满足条件权重不等于165.30,目标电影节点满足条件价值乘695的最大值小于88",
        "output": "match(a:comment)-[e:belong where e.weight <> 165.30]->(b:film where MAX(b.value * 695) < 88) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为存款,以及满足条件源点id不为空或时间戳等于2009年05月14日,且f1不是true的边",
        "output": "match(a)-[e:deposit where ((e.srcId is not null) or e.timeStamp = '2009-05-14') and e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id除id的值",
        "output": "return a.id / a.id group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出位于美国的城市",
        "output": "match(a:city)<-[e:contain]-(b:country where b.name='美国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查询全部和person赵雪有关系的person节点,返回这些点的height,salary;2: 找出和person张红有关的person,再找出和张红person_likes_person的其他person,返回它们;3: 请帮我查找所有与person郑伟有关系的person的age;4: 请帮我查找和person孙国强有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person;5: 请帮我查找person的2度以内的环;6: 帮我查询名为Amily的person;7: 返回类型为person,名为赵梅的点,返回这些点的id,名字;8: 给出和label为person的点有person_pay_person关系的person,并且和这些person有person_likes_person关系的person,并且和这些person有person_pay_person关系的person;9: 返回所有person以名字,身高分组的id, 根据id从小到大排序;",
        "output": "查询语句为:1: match(a:person where a.name='赵雪')-[e]-(b:person) return b.height, b.salary;2: match(a:person where a.name = '张红')-[e]-(b:person), (a:person)-[e2:person_likes_person]->(c:person) return a, b, c;3: match(a:person where a.name='郑伟')-[e]-(b:person) return b.age;4: match(a:person where a.name = '孙国强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;5: match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id;6: match(a:person where a.name = 'Amily') return a;7: match(a:person where a.name = '赵梅') return a.id, a.name;8: match(a:person)-[e:person_pay_person]->(b:person)-[e2:person_likes_person]->(c:person)-[e3:person_pay_person]->(d:person) return d;9: match(a:person) return a.id group by a.name, a.height order by a.id asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找185个和标签等于seller的点有ask关系的buyer,以及和这些buyer有creates关系的orders",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取北区部门的医生姓名，以及他们创建的处方名称。",
        "output": "match(a:department where a.address = '北区')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表375,402,61,626,80, 源点的id等于输入表id,查找全部名为Bilibili的,语言不是java的朋友,返回这些朋友的价值,和边的权重",
        "output": "with p as (select * from (VALUES(375),(402),(61),(626),(80)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Bilibili')) -[e:friend ]->(b WHERE b.lang <> 'java') RETURN b.value, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以995,598,379,149作为请求点id, 源点的id等于输入表id,查找标签等于user的点,返回87个",
        "output": "with p as (select * from (VALUES(995),(598),(379),(149)) as t(id)) MATCH (a:user WHERE a.id = p.id) RETURN a LIMIT 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为赵红和韩国强的点共同撰写的,类型是书的节点",
        "output": "match(a where a.name = '赵红')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '韩国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表428,515,679,549, 以属性id作为相等条件,返回label为repository_has_issue,且满足条件f1大于等于60的边",
        "output": "with p as (select * from (VALUES(428),(515),(679),(549)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:repository_has_issue WHERE e.f1 >= 60 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 查询country的partner,或其partner的partner;2: 给出以包含关系关联了大学重庆大学的城市;3: 请帮我找出类型是city,名为天津的点,返回这些点的name,value,area;4: 请帮我找出类型为university的所有点,并根据level从大到小排列;5: 查找类型为country的全部点,并根据value从大到小排列;6: 请帮我找出全部和名为巴黎的城市有相关者关系,或有相关者的相关者关系的公司;7: 查找与城市东京有city_belong_country关系的3度以内的环;8: 返回源点area在18059到87357之间或peopleNumber大于8208或value大于432,边类型是city_belong_country,且srcId大于55且f1不是true,或weight不是121.33的边,返回这些边的weight减195.64的最小值;",
        "output": "查询语句为:1: match(a:country)-[e:partner]->{1,2}(b) return b;2: match(a:university where a.name='重庆大学')<-[e:city_contain_university]-(b:city) return b;3: match(a:city where a.name = '天津') return a.name, a.value, a.area;4: match(a:university) return a order by a.level desc;5: match(a:country) return a order by a.value desc;6: match(a:city where n.name=巴黎)-[e:relation]->{1,2}(b:company) return b;7: match(a:city where name = '东京')-[e:city_belong_country]->{0,2}(b)->(a) return a.id, b.id as b_id;8: match(a where (a.area BETWEEN 18059 AND 87357) or a.peopleNumber > 8208 or a.value > 432)-[e:city_belong_country where (e.srcId > 55 and e.f1 <> true) or e.weight <> 121.33]->(b) return MIN(e.weight - 195.64);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person吴若涵有关,且与person孙建聪有关系的person节点",
        "output": "match(a:person where a.name='吴若涵')-[e:knows]-(b:person)-[e2:knows]-(c:person where c.name='孙建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与孙雪存在likes关系的post,post与tag存在has关系的点,返回这些点的value",
        "output": "match(a where a.name = '孙雪')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找贷款loan_82存款的账号,被其他person拥有的数量",
        "output": "match(a:loan where a.name='loan_82')-[e:deposit]->(b:account)<-[e2:own]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person陈强的标签为伙伴的边,并根据时间戳升序排列,返回32个",
        "output": "match(a:person where a.name = '陈强')-[e:partner]->(b) return b order by e.timeStamp asc limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表594,482,787,795,643, 以属性id作为相等条件,查找33个名为周雪的点属于的类型是部门的节点,且节点地址不是西区",
        "output": "with p as (select * from (VALUES(594),(482),(787),(795),(643)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '周雪')) -[e:doctor_belong_department ]->(b:department WHERE b.address <> '西区') RETURN b LIMIT 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为145的点的人数,名字",
        "output": "match(a where a.id = 145) return a.peopleNumber, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为department，边标签为has的边。返回这些边的targetId对173取余的结果以及srcId除以105后的个数。",
        "output": "match(a:department)-[e:has]->(b) return e.targetId % 173, COUNT(e.srcId / 105)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person周轩有关系的person的年龄",
        "output": "match(a:person where a.name='周轩')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找所有和person点有属于关系的公司节点,且边满足条件源点id不是107,目标公司节点价值小于684;2: 返回和person有关联的软件节点,并根据其价值,名字分组,返回价值,名字,以及星数加335的最小值;3: 帮我查询software Flink的所有类型为friend的边,并根据targetId升序排列,返回47个;4: 查询和software有关联的software节点,并根据其name,openSource分组,返回name,openSource,以及value乘87的值;5: 查询所有源点label为person,目标点label为company,label为person_belong_company的边;6: 请帮我找出22个公司微软和字节,共同的朋友;",
        "output": "查询语句为:1: match(a:person)-[e:person_belong_company where e.srcId <> 107]->(b:company where b.value < 684) return b;2: match(a:person)-[e:person_commits_software]-(b:software) return b.value, b.name, MIN(b.stars + 335) group by b.value, b.name;3: match(a:software where a.name = 'Flink')-[e:friend]->(b) return b order by e.targetId asc limit 47;4: match(a:software)-[e:software_uses_software]-(b:software) return b.name, b.openSource, b.value * 87 group by b.name, b.openSource;5: match(a:person)-[e:person_belong_company]->(b:company) return e;6: match(a:company where a.name='微软')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='字节') return b limit 22;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出公司阿里 申请的贷款,返回贷款 存款的账号的价值减668乘77的最小值 ",
        "output": "match(a:company where name = '阿里')-[e:company_apply_loan]->(b:loan)-[e2:loan_deposit_account]->(c:account) return MIN((c.value - 668) * 77)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为赵月和周科的点共同发布的,label为帖子的节点",
        "output": "match(a where a.name = '赵月')-[e:publish]->(b:post)<-[e2:publish]-(c where c.name = '周科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表565,441, 源点的id等于输入表id,给出全部名为马轩的点提交的软件",
        "output": "with p as (select * from (VALUES(565),(441)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '马轩')) -[e:person_commits_software ]->(b:software) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与国家点相关的城市节点，并按名称分组返回。",
        "output": "match(a:country)-[e:contain]-(b:city) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和课程大学英语有关的教师,再给出和大学英语属于的其他部门,返回它们",
        "output": "match(a:course where a.name = '大学英语')-[e]-(b:teacher), (a:course)-[e2:belong]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person何雪关联的person,被其他person认识的数量",
        "output": "match(a:person where a.name='何雪')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为person的点,并根据身高升序排列",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为知乎的点包含的帖子",
        "output": "match(a where a.name='知乎')-[e:contain]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person孙轩有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '孙轩')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回与user黄科和陈思思都存在user_likes_repository关系的点",
        "output": "match(a:user where a.name='黄科')-[e:user_likes_repository]->(b)<-[e2:user_likes_repository]-(c:user where c.name='陈思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出seller以gender分组的salary, 根据salary升序排序",
        "output": "match(a:seller) return a.salary group by a.gender order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为何建聪的卖家,以及与其有关的卖家,并返回何建聪的名字和这些卖家的名字",
        "output": "match(a:seller where name = '何建聪')-[e]-(b:seller) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回复旦大学的部门以及这些部门的学生性别。",
        "output": "match(a:university where name = '复旦大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于person的点,返回181个",
        "output": "match(a:person) return a limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询拥有部门标签和教师标签的边。",
        "output": "match(a:department)-[e:has]->(b:teacher) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person陈梅支付的person,被其他person认识的数量",
        "output": "match(a:person where a.name='陈梅')-[e:pay]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出seller孙建聪 ask的buyer,返回buyer look的goods的sellerNumber加1045.69的值",
        "output": "match(a:seller where name = '孙建聪')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c.sellerNumber + 1045.69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找label为department的点,返回40个",
        "output": "match(a:department) return a limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value,name分组,计算value的平均值减643对1取余的求和值",
        "output": "return SUM(AVG(a.value) - 643 % 1) group by a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和部门生物学院有关的学生,再查询和生物学院拥有的其他教师,返回它们",
        "output": "match(a:department where a.name = '生物学院')-[e]-(b:student), (a:department)-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字分组,计算id对83取余的最大值",
        "output": "return MAX(a.id % 83) group by a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据销量,id,价值分组,计算价值除439的平均值",
        "output": "return AVG(a.value / 439) group by a.sellerNumber, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person马思思认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='马思思') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前25个满足条件人数在622到941之间或规格不是medium的公司",
        "output": "match(a:company where (a.peopleNumber BETWEEN 622 AND 941) or a.scale <> 'medium') return a limit 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和贷款loan_17有3跳关系的账号",
        "output": "match(a:loan where a.name='loan_17')-[e]->{3,3}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person郑科有关系的person的身高",
        "output": "match(a:person where a.name='郑科')-[e]-(b:person) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为郑思思和王思琪的,标签为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='郑思思')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='王思琪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与151个人物类型的点有喜欢关系的评论，并且这些评论与电影有关联。",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为推特的论坛,以及与其有关的帖子,并返回推特的名字和这些帖子的id",
        "output": "match(a:forum where name = '推特')-[e]-(b:post) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被公司申请数量大于11的贷款,记为relationCount,再查询这些贷款申请的公司",
        "output": "match(a:loan) let a.relationCount = MAX((a:loan)<-[e:apply]-(b:company) => b.id) match(a where a.relationCount > 11)-[e2:apply]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表659, 源点的id等于输入表id,查询全部名为吴国强的点的,价值不是563,价值小于966的伙伴,返回这些伙伴的id,和边的时间戳,f0,权重",
        "output": "with p as (select * from (VALUES(659)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴国强')) -[e:partner ]->(b WHERE b.value <> 563 AND b.value < 966) RETURN b.id, e.timeStamp, e.f0, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被医生属于数量大于39的部门,记为relationCount,再查询这些部门属于的部门",
        "output": "match(a:department) let a.relationCount = COUNT((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 39)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询reader为吴强的book节点，该book节点知道的其他book",
        "output": "match(a:reader where a.name = '吴强')-[e:likes]->(b:book)-[e2:knows]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为马宏的人有关，或者与他们相关的人有关的评论。",
        "output": "match(a:person where n.name=马宏)-[e:relation]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的friend,或其friend的friend",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与电影院横店影院有关系的评论的id",
        "output": "match(a:cinema where a.name='横店影院')-[e]-(b:comment) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有Flink的点has的issue,然后帮我查询Flink被belong的issue,一起返回",
        "output": "match(a where a.name = 'Flink')-[e:has]->(b:issue),(a where a.name = 'Flink')<-[e2:belong]-(c:issue) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 张若涵观看的电影和吴建国创建的评论",
        "output": "match(a:person where a.name = '张若涵')-[e:watch]->(b:film),(c:person where c.name = '吴建国')-[e2:creates]->(d:comment) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以55作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(55) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为韩思思的,价值为952且名字是星际穿越的伙伴,返回这些伙伴的名字,和边的权重,源点id",
        "output": "match(a where a.name='韩思思')-[e:partner]->(b where b.value = 952 and b.name = '星际穿越') return b.name,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出类型为company的点,并根据id升序排列",
        "output": "match(a:company) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,price,name分组,计算id除id的最小值",
        "output": "return MIN(a.id / a.id) group by a.id, a.price, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有标签为student或teacher的点",
        "output": "match(a:student | teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询与forum知网有forum_contain_person关系的2度以内的环",
        "output": "match(a:forum where name = '知网')-[e:forum_contain_person]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找194个department体育学院和计算机学院,共同的relation",
        "output": "match(a:department where a.name='体育学院')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='计算机学院') return b limit 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为software的点,返回52个",
        "output": "match(a:software) return a limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与老师有关系的身高小于等于154的学生节点，并计算这些节点的height除以height的值，以及height除以187乘48的最小值。",
        "output": "match(a:teacher)-[e]->(b:student where b.height <= 154) return b.height / b.height, MIN(b.height / 187 * 48)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找104个department外科和急诊部,共同的friend",
        "output": "match(a:department where a.name='外科')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='急诊部') return b limit 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出吴轩的parents,并返回他们之间的height差。",
        "output": "match(a where a.name = '吴轩')-[e:parent]->(b:person)-[e2:parent]->(c:person) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 找出183个类别为292的药品,根据权重升序排列;2: 查询前197个标签为prescription_contain_medicine的边;3: 请帮我查找被部门眼科拥有的医生;4: 给出doctor belong的department,返回其源点的height的平均值减196对79取余的值,以及目标点的weight减445的最小值;5: 找出标签等于doctor_creates_prescription,并且weight不为空或weight的最小值大于197,且f1不等于true的边;6: 请帮我查找被医生赵月创造的处方;7: 请帮我查找全部与doctor有关系的doctor节点,且doctor节点的age小于等于2,并返回这些点的id加99的平均值,以及salary乘7896加id的求和值;",
        "output": "查询语句为:1: match(a:medicine where a.category = 292) return a order by a.weight asc limit 183;2: match(a)-[e:prescription_contain_medicine]->(b) return e limit 197;3: match(a:doctor)<-[e:department_has_doctor]-(b:department where b.name='眼科') return a, b;4: match(a:doctor)-[e:doctor_belong_department]->(b:department) return AVG(a.height) - 196 % 79, MIN(b.weight - 445);5: match(a)-[e:doctor_creates_prescription where ((e.weight is not null) or MIN(e.weight) > 197) and e.f1 <> true]->(b) return e;6: match(a:prescription)<-[e:doctor_creates_prescription]-(b:doctor where b.name='赵月') return a, b;7: match(a:doctor)-[e]->(b:doctor where b.age <= 2) return AVG(b.id + 99), SUM(b.salary * 7896 + b.id);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 找出所有和account TheShy有关系的loan节点,返回这些点的id;2: 找出账号BIN转账的账号,被其他账号转账的数量;3: 查询公司华为的所有标签为相关者的边,并根据f1从大到小排列,返回59个;4: 请帮我查找所有loan以weight,id分组的id, 根据id升序排序;5: 请帮我查找与person陈伟和王建国都存在person_own_account关系的点;6: 查询和person有关联的loan节点,并根据其id分组,返回id,以及id加37的求和值;7: 查询label为person的点,返回124个;8: 计算所有company的peopleNumber加peopleNumber的最大值;",
        "output": "查询语句为:1: match(a:account where a.name='TheShy')-[e]-(b:loan) return b.id;2: match(a:account where a.name='BIN')-[e:account_transfer_account]->(b:account)<-[e2:account_transfer_account]-(c:account) return COUNT(c);3: match(a:company where a.name = '华为')-[e:relation]->(b) return b order by e.f1 desc limit 59;4: match(a:loan) return a.id group by a.weight, a.id order by a.id asc;5: match(a:person where a.name='陈伟')-[e:person_own_account]->(b)<-[e2:person_own_account]-(c:person where c.name='王建国') return b;6: match(a:person)-[e:person_apply_loan]-(b:loan) return b.id, SUM(b.id + 37) group by b.id;7: match(a:person) return a limit 124;8: match(a:company) return MAX(a.peopleNumber + a.peopleNumber);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部与person吴红有关系的person的salary",
        "output": "match(a:person where a.name='吴红')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为黄科的点buy的software",
        "output": "match(a where a.name='黄科')-[e:buy]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 给出32个id小于49且openSource不等于true的software,根据lang升序排列;2: 返回所有名为徐伟的点的,id在85到89之间的伙伴,返回这些伙伴的价值,和边的f1,f0;3: 请帮我找出39个id为空或身高为空或名字等于周轩的person,根据性别降序排列;4: 帮我查询100个与Kafka和Calcite都存在关系的company节点;5: 查询从person马轩出发,经过label为person_knows_person的边,走2度或3度到达的person点;6: 请帮我查找全部和person点有属于关系的公司节点,且边满足条件f1不是false,目标公司节点满足条件规格是medium;7: 查找全部与person徐建国有关系的software的id;",
        "output": "查询语句为:1: match(a:software where a.id < 49 and a.openSource <> true) return a order by a.lang asc limit 32;2: match(a where a.name='徐伟')-[e:partner]->(b where (b.id BETWEEN 85 AND 89)) return b.value,e.f1, e.f0;3: match(a:person where (a.id is null) or (a.height is null) or a.name = '周轩') return a order by a.gender desc limit 39;4: match(a where a.name='Kafka')-[e]->(b:company)<-[e2]-(c where c.name='Calcite') return b limit 100;5: match(a:person where a.name='马轩')-[e:person_knows_person]->{2,3}(b:person) return b;6: match(a:person)-[e:person_belong_company where e.f1 <> false]->(b:company where b.scale = 'medium') return b;7: match(a:person where a.name='徐建国')-[e]-(b:software) return b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 返回和学生有关联的课程节点,并根据其名字,id,课时分组,返回名字,id,课时,以及课时加32减67的值;2: 给出student以salary分组的id, 根据id降序排序;3: 返回所有源点标签为department,边标签为department_has_student,以及targetId为空,weight大于183.22的边;4: 查找和student赵雪有student_selects_course关系的course,再查找以student_selects_course关系关联了赵雪的course;5: 给出全部名为经管学院的点的,height为空或gender不是male的partner,返回这些partner的name,和边的weight,targetId,f1;6: 请帮我找出department以id,value分组的id, 根据id升序排序;7: 查找140个department土木学院和文学院,共同的friend;8: 请帮我查找department has的student,返回其源点的id乘96的值,以及目标点的id的平均值除30的值;9: 给出和学生Alice有关的教师,再给出和Alice student_selects_course的其他课程,返回它们;",
        "output": "查询语句为:1: match(a:student)-[e:student_selects_course]-(b:course) return b.name, b.id, b.courseHour, b.courseHour + 32 - 67 group by b.name, b.id, b.courseHour;2: match(a:student) return a.id group by a.salary order by a.id desc;3: match(a:department)-[e:department_has_student where (e.targetId is null) and e.weight > 183.22]->(b) return e;4: match(a:student where a.name = '赵雪')-[e:student_selects_course]->(b:course),(a:student where a.name = '赵雪')<-[e2:student_selects_course]-(c:course)return a, b, c;5: match(a where a.name='经管学院')-[e:partner]->(b where (b.height is null) or b.gender <> 'male') return b.name,e.weight, e.targetId, e.f1;6: match(a:department) return a.id group by a.id, a.value order by a.id asc;7: match(a:department where a.name='土木学院')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='文学院') return b limit 140;8: match(a:department)-[e:department_has_student]->(b:student) return a.id * 96, AVG(b.id) / 30;9: match(a:student where a.name = 'Alice')-[e]-(b:teacher), (a:student)-[e2:student_selects_course]->(c:course) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型为person,边类型为家人,以及源点id等于49或源点id小于等于190或f0在516到868之间的边",
        "output": "match(a:person)-[e:family where e.srcId = 49 or e.srcId <= 190 or (e.f0 BETWEEN 516 AND 868)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被loan loan_74 deposit的account",
        "output": "match(a:account)<-[e:deposit]-(b:loan where b.name='loan_74') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与周科有父母关系的人，以及这些人之间的朋友关系，然后返回这些人的年龄。",
        "output": "match(a where a.name = '周科')-[e:parent]->(b:person)-[e2:friend]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(3727,176,53)作为请求表数据,属性分别为salary,height,id, 源点的height等于输入表height,查找和person赵伟有person_parent_person关系的person,再查找以person_lover_person关系关联了赵伟的person",
        "output": "with p as (select * from (VALUES(3727,176,53)) as t(salary,height,id))MATCH (a:person WHERE a.height = p.height AND (a.name = '赵伟')) -[e:person_parent_person ]->(b:person) , (a:person WHERE a.name = '赵伟') <-[e2:person_lover_person ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询department的三角的环,边标签为department_has_student, 并返回这些点的id;2: 帮我查询和部门有关联的学生节点,并根据其名字,年龄,id分组,返回名字,年龄,id,以及salary的和减7918乘158的最大值;3: 找出全部名为生物学院的点的,height的最大值大于等于198且gender不是96的relation,返回这些relation的name,和边的f0,f1,srcId;4: 查找满足条件价值小于等于171或名字不等于数学学院,且价值为23的节点;5: 找出全部id为165的course关联的department,和以has关系关联了这些department的其他university;6: 帮我查询全部名为法学院的点has的student;7: 帮我查询和department物理学院有关的course,称为X,再帮我查询和这个X有关联的其他teacher,以及和X有关联的course;",
        "output": "查询语句为:1: match(a:department)-[e:department_has_student]->(b)-[e2:department_has_student]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:department)-[e:department_has_student]-(b:student) return b.name, b.age, b.id, MAX((SUM(b.salary) - 7918) * 158) group by b.name, b.age, b.id;3: match(a where a.name='生物学院')-[e:relation]->(b where MAX(b.height) >= 198 and b.gender <> 96) return b.name,e.f0, e.f1, e.srcId;4: match(a where (a.value <= 171 or a.name <> '数学学院') and a.value = 23) return a;5: match(a:course where a.id = '165')-[e]-(b:department)<-[e2:university_has_department]-(c:university) return b,c;6: match(a where a.name='法学院')-[e:department_has_student]->(b:student) return b;7: match(a:department where a.name = '物理学院')-[e]-(b:course), (b:course)-[e2]-(c:teacher),(b:course)-[e3]-(d:course) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于person的所有点,并根据性别从大到小排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person王强有关的person,再找出和王强friend的其他person,返回它们",
        "output": "match(a:person where a.name = '王强')-[e]-(b:person), (a:person)-[e2:friend]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回黄思琪创建的评论节点所属的电影",
        "output": "match(a:person where a.name = '黄思琪')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为109的person的朋友，以及这些朋友与该用户的关联伙伴。",
        "output": "match(a:person where id = '109')-[e]-(b:user)-[e2:friend]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 帮我查询和prescription Prescription_344有关的prescription,称为X,再帮我查询和这个X有关联的其他prescription,以及和X有关联的prescription;2: 查询user的partner,或其partner的partner;3: 查询与user陈月和徐建国都存在user_creates_issue关系的点;4: 查找处方以权重,id分组的创建时间, 根据创建时间升序排序;5: 给出label为user_likes_repository,且满足条件f0小于653或f0在817到879之间或f1为true的边;6: 请帮我查找全部源点类型为user,边类型为user_creates_issue的边,返回这些边的weight的数量加173.37的最小值,和weight的求和值乘131.74乘177.47的数量;",
        "output": "查询语句为:1: match(a:prescription where a.name = 'Prescription_344')-[e]-(b:prescription), (b:prescription)-[e2]-(c:prescription),(b:prescription)-[e3]-(d:prescription) return a, b, c, d;2: match(a:user)-[e:partner]->{1,2}(b) return b;3: match(a:user where a.name='陈月')-[e:user_creates_issue]->(b)<-[e2:user_creates_issue]-(c:user where c.name='徐建国') return b;4: match(a:prescription) return a.createTime group by a.weight, a.id order by a.createTime asc;5: match(a)-[e:user_likes_repository where e.f0 < 653 or (e.f0 BETWEEN 817 AND 879) or e.f1 = true]->(b) return e;6: match(a:user)-[e:user_creates_issue]->(b) return MIN(COUNT(e.weight) + 173.37), COUNT(SUM(e.weight) * 131.74 * 177.47);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出公司微软申请的贷款,以及还款这些贷款的账号",
        "output": "match(a:company where name = '微软')-[e:apply]->(b:loan)<-[e2:repay]-(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出33个名为PR-308的点belong的类型为repository的节点,且节点id在24到91之间且weight小于281",
        "output": "match(a where a.name='PR-308')-[e:belong]->(b:repository where (b.id BETWEEN 24 AND 91) and b.weight < 281) return b limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出名为腾讯的company,以及与其有关的company,并返回腾讯的peopleNumber和这些company的peopleNumber",
        "output": "match(a:company where name = '腾讯')-[e]-(b:company) return a.peopleNumber, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出与forum中国军事论坛和百度贴吧都存在forum_contain_post关系的点",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:forum_contain_post]->(b)<-[e2:forum_contain_post]-(c:forum where c.name='百度贴吧') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表876,531,887,678,772, 源点的id等于输入表id,给出编辑以性别,薪资分组的身高, 根据身高从小到大排序",
        "output": "with p as (select * from (VALUES(876),(531),(887),(678),(772)) as t(id)) MATCH (a:publisher WHERE a.id = p.id) RETURN a.height GROUP BY a.gender, a.salary ORDER BY a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询account XXD repay的loan,返回loan deposit的account的value对449取余的值",
        "output": "match(a:account where name = 'XXD')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.value % 449",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出全部源点类型为person,目标点类型为公司,类型为person_invest_company的边",
        "output": "match(a:person)-[e:person_invest_company]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与公司腾讯有关系的公司, 返回和这些公司有关联的公司的,价值加价值的值",
        "output": "match(a:company where a.name= '腾讯')-[e]-(b:company)-[e2]-(c:company) return c.value + c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person何建聪 喜欢的person,返回person 认识的person的年龄减77乘182的平均值",
        "output": "match(a:person where name = '何建聪')-[e:likes]->(b:person)-[e2:knows]->(c:person) return AVG((c.age - 77) * 182)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与华中科技大学相关的大学，以及华中科技大学拥有的其他部门。",
        "output": "match(a:university where a.name = '华中科技大学')-[e]-(b:university), (a:university)-[e2:has]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找全部与person周建聪有关系的person的age;2: 查询全部源点标签为person,目标点标签为person,标签为person_colleague_person的边;3: 请帮我找出person认识的person,返回其源点的id减id乘薪资的值,以及目标点的年龄减33对7取余的和;4: 帮我查询和person有关联的person节点,并根据其年龄,性别分组,返回年龄,性别,以及id加87的值;",
        "output": "查询语句为:1: match(a:person where a.name='周建聪')-[e]-(b:person) return b.age;2: match(a:person)-[e:person_colleague_person]->(b:person) return e;3: match(a:person)-[e:knows]->(b:person) return (a.id - a.id) * a.salary, SUM(b.age - 33 % 7);4: match(a:person)-[e:person_family_person]-(b:person) return b.age, b.gender, b.id + 87 group by b.age, b.gender;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找belong issue ISSUE-83 belong的repository,的pullRequest",
        "output": "match(a:issue where name = 'ISSUE-83')-[e:belong]->(b:repository)<-[e2:belong]-(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找韩国城市被其他国家包含的数量",
        "output": "match(a:country where a.name='韩国')-[e:contain]->(b:city)<-[e2:contain]-(c:country) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找电影院以id,大小分组的id, 根据id从小到大排序",
        "output": "match(a:cinema) return a.id group by a.id, a.size order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 请帮我找出源点满足条件id小于等于37,价值大于611且价值为空,目标点满足条件名字不是科幻,且标签等于film_has_tag的边;2: 找出所有film以name分组的category, 根据category从小到大排序;3: 查询从person马雪出发,经过类型是person_watch_film的边,走2到5度到达的电影点;4: 查找类型是cinema_releases_film,以及weight不为空的边;5: 找出和cinema人人影城有关的tag,称为X,再找出和这个X有关联的其他person,以及和X有关联的film;6: 请帮我找出171个与横店影院和UME都存在关系的标签节点;",
        "output": "查询语句为:1: match(a where a.id <= 37 and a.value > 611 and (a.value is null))-[e:film_has_tag]->(b where b.name <> '科幻') return e;2: match(a:film) return a.category group by a.name order by a.category asc;3: match(a:person where a.name='马雪')-[e:person_watch_film]->{2,5}(b:film) return b;4: match(a)-[e:cinema_releases_film where (e.weight is not null)]->(b) return e;5: match(a:cinema where a.name = '人人影城')-[e]-(b:tag), (b:tag)-[e2]-(c:person),(b:tag)-[e3]-(d:film) return a, b, c, d;6: match(a where a.name='横店影院')-[e]->(b:tag)<-[e2]-(c where c.name='UME') return b limit 171;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与company腾讯有关,且与account LX001有关系的loan节点",
        "output": "match(a:company where a.name='腾讯')-[e:apply]-(b:loan)-[e2:deposit]-(c:account where c.name='LX001') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为韩宏的,height为空的partner,返回这些partner的name,和边的targetId,weight,srcId",
        "output": "match(a where a.name='韩宏')-[e:partner]->(b where (b.height is null)) return b.name,e.targetId, e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person马国强invest的company,和马国强apply的loan",
        "output": "match(a:company)<-[e:invest]-(b:person where name = '马国强')-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为马若涵的节点关联的person",
        "output": "match(a where a.name='马若涵')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除78对83取余的值",
        "output": "a.age / 78 % 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其名字分组,返回名字,以及id对86取余的平均值",
        "output": "match(a:person)-[e:lover]-(b:person) return b.name, AVG(b.id % 86) group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为杜思琪和吴若涵的,类型为买家的点公共的朋友节点的名单",
        "output": "match(a:buyer where a.name='杜思琪')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='吴若涵') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回141个名为谷歌的点雇佣的类型为person的节点,且节点年龄小于等于7或名字等于马国强",
        "output": "match(a where a.name='谷歌')-[e:employee]->(b:person where b.age <= 7 or b.name = '马国强') return b limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有id为4的论坛关联的帖子,和以喜欢关系关联了这些帖子的其他用户",
        "output": "match(a:forum where a.id = 4)-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person杜建国有关系的person的id",
        "output": "match(a:person where a.name='杜建国')-[e]-(b:person) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出公司腾讯合作的大学节点属于的城市",
        "output": "match(a:company where a.name = '腾讯')-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为赵雪的点喜欢的所有帖子,并对这些帖子的名字进行求和",
        "output": "match(a where a.name='赵雪')-[e:likes]->(b:post) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person孙轩 喜欢的评论,返回评论 属于的电影的价值减380的值",
        "output": "match(a:person where name = '孙轩')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.value - 380",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person apply的loan,返回其源点的salary除6750对199取余的值,以及目标点的id加id除95的平均值",
        "output": "match(a:person)-[e:apply]->(b:loan) return a.salary / 6750 % 199, AVG((b.id + b.id) / 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与国家ID为152相关的公司的合作伙伴，然后获取与该公司相关的朋友。",
        "output": "match(a:country where id = '152')-[e]-(b:company)-[e2:partner]->(c), (b:company)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查找郑宏和吴宏的共同同事？",
        "output": "match(a:person where a.name='郑宏')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='吴宏') return b limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为郑雪的点的,课时在23到36之间或id乘21不等于673的伙伴,返回这些伙伴的id,和边的权重,f0,f1",
        "output": "match(a where a.name='郑雪')-[e:partner]->(b where (b.courseHour BETWEEN 23 AND 36) or b.id * 21 <> 673) return b.id,e.weight, e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为87的电影有关的电影的伙伴, 再查询和电影有关系的相关者",
        "output": "match(a:film where id = 87)-[e]-(b:film)-[e2:partner]->(c), (b:film)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被company apply数量大于2的loan,记为relationCount,再查询这些loan apply的loan",
        "output": "match(a:loan) let a.relationCount = MAX((a:loan)<-[e:apply]-(b:company) => b.id) match(a where a.relationCount > 2)-[e2:apply]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对59取余的值",
        "output": "a.id % 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和编辑李伟有3到6跳关系的编辑",
        "output": "match(a:publisher where a.name='李伟')-[e]->{3,6}(b:publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回label为apply,以及满足条件f1等于false,targetId为184,srcId小于183的边",
        "output": "match(a)-[e:apply where e.f1 = false and e.targetId = 184 and e.srcId < 183]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与韩梅有关联的处方，包括她开具的和她接受的。",
        "output": "match(a:patient where a.name = '韩梅')-[e:accept]->(b:prescription),(a:patient where a.name = '韩梅')<-[e2:accept]-(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与某个大学相关的所有课程，以及这些课程的其他授课教师。",
        "output": "match(a:university where a.id = '79')-[e]-(b:course)<-[e2:teach]-(c:teacher) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为24的课程属于的部门, 并将部门有关的教师的id的最小值赋值给部门的大小, 接着查询部门的大小小于24的部门拥有的教师",
        "output": "match(a:course where a.id = 24)-[e:belong]->(b:department) let b.size = MIN((b:department)-[e2]-(c:teacher) => c.id) match(b:department where b.size < 24)-[e3:has]->(d:teacher) return b.size, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是标签的点,返回165个",
        "output": "match(a:tag) return a limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有标签等于教师的点",
        "output": "match(a:teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为马建聪的点咨询的所有卖家,并对这些卖家的身高进行求和",
        "output": "match(a where a.name='马建聪')-[e:consult]->(b:seller) return SUM(b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和仓库XXRepo有关的仓库,称为X,再帮我查询和这个X有关联的其他事项,以及和X有关联的用户",
        "output": "match(a:repository where a.name = 'XXRepo')-[e]-(b:repository), (b:repository)-[e2]-(c:issue),(b:repository)-[e3]-(d:user) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表902, 源点的id等于输入表id,帮我查询前62个性别不等于male的学生",
        "output": "with p as (select * from (VALUES(902)) as t(id)) MATCH (a:student WHERE a.id = p.id AND (a.gender <> 'male')) RETURN a LIMIT 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我查找和标签等于author的点有author_knows_author关系的author,以及和这些author有author_write_book关系的book,以及和这些book有book_refers_book关系的book;2: 找出标签为作家的全部点,并根据id降序排列;3: 查找前120个label为publisher_publish_book的边;4: 帮我查询所有author的relation,或其relation的relation;5: 查询与publisher周伟和孙思思都存在publisher_publish_book关系的点;",
        "output": "查询语句为:1: match(a:author)-[e:author_knows_author]->(b:author)-[e2:author_write_book]->(c:book)-[e3:book_refers_book]->(d:book) return d;2: match(a:author) return a order by a.id desc;3: match(a)-[e:publisher_publish_book]->(b) return e limit 120;4: match(a:author)-[e:relation]->{1,2}(b) return b;5: match(a:publisher where a.name='周伟')-[e:publisher_publish_book]->(b)<-[e2:publisher_publish_book]-(c:publisher where c.name='孙思思') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出Post_479的点拥有的标签,然后请帮我找出Post_479被发布的用户,一起返回",
        "output": "match(a where a.name = 'Post_479')-[e:has]->(b:tag),(a where a.name = 'Post_479')<-[e2:publish]-(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找person节点所属belong边，并返回这些边中f0减去699的平均值和f0减去507的值。",
        "output": "match(a:person)-[e:belong]->(b) return AVG(e.f0 - 699), e.f0 - 507",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary除2017加2944的值",
        "output": "a.salary / 2017 + 2944",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value对value取余乘373的值",
        "output": "a.value % a.value * 373",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找42个名为何梅的点喜欢的类型是person的节点,且节点性别不等于famale",
        "output": "match(a where a.name='何梅')-[e:likes]->(b:person where b.gender <> 'famale') return b limit 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被公司合作数量大于69的大学,记为relationCount,再查询这些大学合作的公司",
        "output": "match(a:university) let a.relationCount = SUM((a:university)<-[e:cooperate]-(b:company) => b.id) match(a where a.relationCount > 69)-[e2:cooperate]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家查看的商品,返回其源点的身高对175取余的数量,以及目标点的价格加2003.01的值",
        "output": "match(a:buyer)-[e:look]->(b:goods) return COUNT(a.height % 175), b.price + 2003.01",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person点有拥有关系的账号节点,且边满足条件目标点id小于等于145.62,目标账号节点名字等于Geaflow123",
        "output": "match(a:person)-[e:own where e.targetId <= 145.62]->(b:account where b.name = 'Geaflow123') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与名为韩强和黄强的点共同watch的,标签为film的节点",
        "output": "match(a where a.name = '韩强')-[e:watch]->(b:film)<-[e2:watch]-(c where c.name = '黄强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找57个学院，按名称升序排序，其中57个学院中包括艺术和物理学院。",
        "output": "match(a:department where a.name = '艺术学院' or a.name = '物理学院') return a order by a.name asc limit 57",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减24乘身高的值",
        "output": "(a.age - 24) * a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和用户赵思琪之间有创造关系的合并请求",
        "output": "match(a:user where a.name='赵思琪')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我找出类型为teacher的全部点,并根据salary升序排列;2: 给出学生韩梅的所有朋友,的目标点id加35乘922的平均值;3: 请帮我找出全部course以value,courseHour分组的credit, 根据credit从小到大排序;4: 查找所有源点name不是物理学院或name不是体育学院,目标点salary在1226到1887之间或salary不为空,且name不等于陈雪,且标签等于department_has_teacher的边;5: 给出14个与徐思琪和王伟都存在关系的course节点;6: 请帮我查找以拥有关系关联了教师周红的部门;",
        "output": "查询语句为:1: match(a:teacher) return a order by a.salary asc;2: match(a:student where a.name= '韩梅')-[e:friend]->(b) return AVG((e.targetId + 35) * 922);3: match(a:course) return a.credit group by a.value, a.courseHour order by a.credit asc;4: match(a where a.name <> '物理学院' or a.name <> '体育学院')-[e:department_has_teacher]->(b where ((b.salary BETWEEN 1226 AND 1887) or (b.salary is not null)) and b.name <> '陈雪') return e;5: match(a where a.name='徐思琪')-[e]->(b:course)<-[e2]-(c where c.name='王伟') return b limit 14;6: match(a:teacher where a.name='周红')<-[e:department_has_teacher]-(b:department) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person张强认识的person, 令person(b)的薪资等于person(a)的id的最小值加76, 返回person(a)的名字, person(b)的id",
        "output": "match(a:person where a.name='张强')-[e:knows]->(b:person) let b.salary = MIN(a.id) + 76 return a.name,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出书呐喊的所有类型为引用的边,并根据f0从小到大排列,返回153个",
        "output": "match(a:book where a.name = '呐喊')-[e:book_refers_book]->(b) return b order by e.f0 asc limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出读者杜轩的所有label为朋友的边,并根据源点id从大到小排列,返回150个",
        "output": "match(a:reader where a.name = '杜轩')-[e:friend]->(b) return b order by e.srcId desc limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与黄红作家有合作关系，或者有合作伙伴关系的书籍。",
        "output": "match(a:author where n.name=黄红)-[e:partner]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person孙伟有关系的person, 返回和这些person有关联的person的,age乘76的值",
        "output": "match(a:person where a.name= '孙伟')-[e]-(b:person)-[e2]-(c:person) return c.age * 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点label为user,边label为user_likes_repository的边,返回这些边的f0对547取余的求和值,和targetId的和对27取余的数量",
        "output": "match(a:user)-[e:user_likes_repository]->(b) return SUM(e.f0 % 547), COUNT(SUM(e.targetId) % 27)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出王红老师的朋友的朋友",
        "output": "match(a:teacher where a.name='王红')-[e:relation]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签等于课程的点有属于关系的部门,并且和这些部门有拥有关系的教师,并且和这些教师有教关系的课程",
        "output": "match(a:course)-[e:belong]->(b:department)-[e2:has]->(c:teacher)-[e3:teach]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找认识person韩科的person,和这些person同事的person",
        "output": "match(a:person where name = '韩科')<-[e:knows]-(b:person)-[e2:colleague]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与少年闰土有关的书籍，并统计它们与其他书籍之间的关联数量。",
        "output": "match(a:book where a.name='少年闰土')-[e:relates]->(b:book)<-[e2:relates]-(c:book) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回张宏拥有且与贷款默认名称存在偿还关系的账户节点，包括账户ID、余额、上次登录时间和张宏的名称以及贷款默认名称的ID。",
        "output": "match(a:person where a.name='张宏')-[e:own]->(b:account)<-[e2:repay]-(c:loan where c.name='defaultName') return a.name,b.id, b.value, b.lastLoginTime,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person以身高,id分组的身高, 根据身高升序排序",
        "output": "match(a:person) return a.height group by a.height, a.id order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 给出id为117的点的创建时间;2: 查询和person有关联的贷款节点,并根据其金额,权重分组,返回金额,权重,以及id的最小值加id的值;3: 帮我查询118个与defaultName和defaultName1都存在关系的company节点;4: 给出前130个label为account_repay_loan的边;5: 帮我查询源点weight小于等于110,weight为974且amount在2029.31到2876.80之间,目标点createTime等于2033年05月06日或id等于8,且类型是loan_deposit_account的边;",
        "output": "查询语句为:1: match(a where a.id = '117') return a.createTime;2: match(a:person)-[e:person_apply_loan]-(b:loan) return b.amount, b.weight, MIN(b.id) + b.id group by b.amount, b.weight;3: match(a where a.name='defaultName')-[e]->(b:company)<-[e2]-(c where c.name='defaultName1') return b limit 118;4: match(a)-[e:account_repay_loan]->(b) return e limit 130;5: match(a where a.weight <= 110 and a.weight = 974 and (a.amount BETWEEN 2029.31 AND 2876.80))-[e:loan_deposit_account]->(b where b.createTime = '2033-05-06' or b.id = 8) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与电影院有关系的person节点,且person节点的id大于等于92,并返回这些person的salary的最大值乘5986减2507的最大值,以及person的身高乘身高的个数",
        "output": "match(a:cinema)-[e]->(b:person where b.id >= 92) return MAX(MAX(b.salary) * 5986 - 2507), COUNT(b.height * b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与李雪和马建国都有关系的所有 person 节点。",
        "output": "match(a where a.name='李雪')-[e]->(b:person)<-[e2]-(c where c.name='马建国') return b limit 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person点有knows关系的person节点,且边满足条件srcId为空,目标person节点height大于51",
        "output": "match(a:person)-[e:knows where (e.srcId is null)]->(b:person where b.height > 51) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下腾讯公司的peopleNumber在867到945之间的，value为空的81个人，按照peopleNumber从大到小排序。",
        "output": "match(a:company where (a.peopleNumber BETWEEN 867 AND 945) and a.name = '腾讯' and (a.value is null)) return a order by a.peopleNumber desc limit 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为李建聪的,字数在188到523之间的朋友,返回这些朋友的语言,和边的目标点id,权重",
        "output": "match(a where a.name='李建聪')-[e:friend]->(b where (b.wordCount BETWEEN 188 AND 523)) return b.lang,e.targetId, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我查找和标签为person的点有person_likes_person关系的person,且和这些person有person_likes_person关系的person,且和这些person有person_likes_person关系的person;2: 请帮我查找person孙伟的所有标签等于friend的边,并根据targetId升序排列,返回82个;3: 给出年龄大于67的person认识的person的名称,以及这些person 喜欢的person的名称;4: 查询和person张若涵有关的person,再查询和张若涵person_knows_person的其他person,返回它们;5: 给出所有源点标签为person,边标签为person_likes_person,并且满足条件targetId不是89的边;6: 返回person的三角的环,边类型是person_pay_person, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:person)-[e:person_likes_person]->(b:person)-[e2:person_likes_person]->(c:person)-[e3:person_likes_person]->(d:person) return d;2: match(a:person where a.name = '孙伟')-[e:friend]->(b) return b order by e.targetId asc limit 82;3: match(a:person where a.age > 67)-[e:person_knows_person]->(b:person)-[e2:person_likes_person]->(c:person) return b.name as b_name, c.name as c_name;4: match(a:person where a.name = '张若涵')-[e]-(b:person), (a:person)-[e2:person_knows_person]->(c:person) return a, b, c;5: match(a:person)-[e:person_likes_person where e.targetId <> 89]->(b) return e;6: match(a:person)-[e:person_pay_person]->(b)-[e2:person_pay_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与comment Comment_306有关系的tag的name",
        "output": "match(a:comment where a.name='Comment_306')-[e]-(b:tag) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有卖家的id减94的和",
        "output": "match(a:seller) return SUM(a.id - 94)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表327,921, 以属性id作为相等条件,查找以使用关系关联了软件Hadoop的软件",
        "output": "with p as (select * from (VALUES(327),(921)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.name = 'Hadoop')) <-[e:software_uses_software ]-(b:software) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找所有和department法学院有关系的student节点,返回这些点的name,height,gender;2: 返回类型为teacher_teach_course,以及满足条件权重在191.18到191.02之间或f0在737到887之间,且目标点id不等于47的边;3: 返回和university北京大学有university_has_department关系的department,以及和student杜建国有student_selects_course关系的course,将它们都返回;4: 返回学生何建聪选择的课程,被其他教师教的数量;5: 查找部门土木学院的全部相关者,的目标点id减45的最小值;6: 帮我查询91个university中国科技大学和四川大学,共同的relation;",
        "output": "查询语句为:1: match(a:department where a.name='法学院')-[e]-(b:student) return b.name, b.height, b.gender;2: match(a)-[e:teacher_teach_course where ((e.weight BETWEEN 191.18 AND 191.02) or (e.f0 BETWEEN 737 AND 887)) and e.targetId <> 47]->(b) return e;3: match(a:university where a.name = '北京大学')-[e:university_has_department]->(b:department),(c:student where c.name = '杜建国')-[e2:student_selects_course]->(d:course)return a, b, c, d;4: match(a:student where a.name='何建聪')-[e:student_selects_course]->(b:course)<-[e2:teacher_teach_course]-(c:teacher) return COUNT(c);5: match(a:department where a.name= '土木学院')-[e:relation]->(b) return MIN(e.targetId - 45);6: match(a:university where a.name='中国科技大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='四川大学') return b limit 91;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表820,811,803, 以属性id作为相等条件,查询所有与王红存在user_likes_post关系的post,post与tag存在post_has_tag关系的点,返回这些点的name",
        "output": "with p as (select * from (VALUES(820),(811),(803)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '王红')) -[e:user_likes_post ]->(b:post) -[e2:post_has_tag ]->(c:tag) RETURN c.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有卖家的id的最大值加id的值",
        "output": "match(a:seller) return MAX(a.id) + a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与王国强有密切关系的人。",
        "output": "match(a:person where a.name = '王国强')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从作家徐建国出发,经过类型是认识的边,走3度或4度到达的作家点",
        "output": "match(a:author where a.name='徐建国')-[e:knows]->{3,4}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型是account,边类型是transfer,以及srcId不为空且weight不是169,或f0小于等于851的边",
        "output": "match(a:account)-[e:transfer where ((e.srcId is not null) and e.weight <> 169) or e.f0 <= 851]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点类型是person,边类型是apply的边,返回这些边的f0乘f0的个数,和weight除155.70的最大值",
        "output": "match(a:person)-[e:apply]->(b) return COUNT(e.f0 * e.f0), MAX(e.weight / 155.70)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有person类型的源点，拥有边的关系。返回这些边的源点id对120取余的结果，以及f0乘以自身的最小值。",
        "output": "match(a:person)-[e:own]->(b) return e.srcId % 120, MIN(e.f0 * e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,salary分组,计算height对156取余的最小值",
        "output": "return MIN(a.height % 156) group by a.id, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与person韩强有关系的公司的价值",
        "output": "match(a:person where a.name='韩强')-[e]-(b:company) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出开具处方Prescription_226的医生，以及返回该处方中包含的其他药品。",
        "output": "match(a:prescription where a.name = 'Prescription_226')-[e]-(b:doctor), (a:prescription)-[e2:contain]->(c:medicine) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出在Forum知网和知乎都包含的共同点。",
        "output": "match(a:forum where a.name='知网')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='知乎') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找创造合并请求PR-432的用户,和这些用户喜欢的仓库",
        "output": "match(a:pullRequest where name = 'PR-432')<-[e:creates]-(b:user)-[e2:likes]->(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person有关联的评论节点,并根据其id,字数,创建时间分组,返回id,字数,创建时间,以及字数对907取余的个数",
        "output": "match(a:person)-[e:creates]-(b:comment) return b.id, b.wordCount, b.createTime, COUNT(b.wordCount % 907) group by b.id, b.wordCount, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 给出名为土木学院的点has的所有student,并对这些点的age进行求和;2: 找出id为139的学生关联的课程,和以选择关系关联了这些课程的其他学生;3: 查询全部与数学学院存在department_has_student关系的学生,学生与课程存在student_selects_course关系的点,返回这些点的id;4: 查找和student有关联的course节点,并根据其name,id,value分组,返回name,id,value,以及id对74取余乘20的值;5: 查询所有与university有关系的course节点,且course节点的name是20,并返回这些点的credit除3的个数,以及id对12取余的值;6: 返回标签为课程,名为马克思原理的点,返回这些点的学分;7: 返回名为孙建国的点教的课程,并对这些点的课时进行求和;8: 找出id为159的student有关的teacher的relation, 再找出和teacher有关系的relation;9: 请帮我查找全部label为学生的点;",
        "output": "查询语句为:1: match(a where a.name='土木学院')-[e:department_has_student]->(b:student) return SUM(b.age);2: match(a:student where a.id = '139')-[e]-(b:course)<-[e2:student_selects_course]-(c:student) return b,c;3: match(a where a.name = '数学学院')-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return c.id;4: match(a:student)-[e:student_selects_course]-(b:course) return b.name, b.id, b.value, b.id % 74 * 20 group by b.name, b.id, b.value;5: match(a:university)-[e]->(b:course where b.name = 20) return COUNT(b.credit / 3), b.id % 12;6: match(a:course where a.name = '马克思原理') return a.credit;7: match(a where a.name='孙建国')-[e:teacher_teach_course]->(b:course) return SUM(b.courseHour);8: match(a:student where id = '159')-[e]-(b:teacher)-[e2:relation]->(c), (b:teacher)-[e3:relation]->(d) return a, b, c, d;9: match(a:student) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "筛选出满足以下条件的公司：有28人，且这些人的人数大于等于550，或者公司的id不是82，或者公司的value在709到760之间。然后按照scale从小到大进行排序。",
        "output": "match(a:company where a.peopleNumber >= 550 or a.id <> 82 or (a.value BETWEEN 709 AND 760)) return a order by a.scale asc limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person孙若涵和person Alice都有关联的人，并返回他们的gender",
        "output": "match(a:person where a.name='孙若涵')-[e]->(b:person)<-[e2]-(c:person where c.name='Alice') return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数对153取余的最大值",
        "output": "MAX(a.wordCount % 153)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点身高大于等于196或性别不等于famale或id不为空,边标签等于发布,且f0大于等于719或目标点id除14大于等于721或目标点id大于等于73的边,返回这些边的权重乘192.53减源点id的个数",
        "output": "match(a where a.height >= 196 or a.gender <> 'famale' or (a.id is not null))-[e:publish where e.f0 >= 719 or e.targetId / 14 >= 721 or e.targetId >= 73]->(b) return COUNT(e.weight * 192.53 - e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点id大于等于32且价值不为空,或价值大于等于115,边类型是包含,且满足条件源点id小于等于192的边,返回这些边的f0除f0的和",
        "output": "match(a where (a.id >= 32 and (a.value is not null)) or a.value >= 115)-[e:contain where e.srcId <= 192]->(b) return SUM(e.f0 / e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于person的全部点,并根据年龄从大到小排列",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,权重,名字分组,计算id乘30的最小值",
        "output": "return MIN(a.id * 30) group by a.id, a.weight, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点gender不等于famale且salary小于4775,或gender为famale,边类型为likes,且满足条件srcId大于117或f1不等于true,且f0为空的边,返回这些边的f0减648的值",
        "output": "match(a where (a.gender <> 'famale' and a.salary < 4775) or a.gender = 'famale')-[e:likes where (e.srcId > 117 or e.f1 <> true) and (e.f0 is null)]->(b) return e.f0 - 648",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person有关联的person节点,并根据其名字,薪资分组,返回名字,薪资,以及身高减153减薪资的值",
        "output": "match(a:person)-[e:pay]-(b:person) return b.name, b.salary, b.height - 153 - b.salary group by b.name, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person韩月认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='韩月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为 person，目标点标签为 评论，且标签为 创造 的边。",
        "output": "match(a:person)-[e:creates]->(b:comment) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与杜月有联系的人",
        "output": "match(a:person where a.name='杜月')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,age,gender, 数据为(4128,34,'famale'),(5784,49,'famale'),(9377,37,'famale'),(4564,93,'famale')的子查询作为输入表, 以属性salary作为相等条件,请帮我查找全部标签为公司的点",
        "output": "with p as (select * from (VALUES(4128,34,'famale'),(5784,49,'famale'),(9377,37,'famale'),(4564,93,'famale')) as t(salary,age,gender))MATCH (a:company WHERE a.salary = p.salary) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与徐雪有关联的评论。",
        "output": "match(a:person where n.name=徐雪)-[e:relation]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表842,501,340, 源点的id等于输入表id,查询id为97的点的age,name,gender",
        "output": "with p as (select * from (VALUES(842),(501),(340)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '97')) RETURN a.age, a.name, a.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为82的点的名字",
        "output": "match(a where a.id = 82) return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id除47减163乘839的平均值",
        "output": "return AVG((a.id / 47 - 163) * 839) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据字数分组,计算字数乘742对757取余的最小值",
        "output": "return MIN(a.wordCount * 742 % 757) group by a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我找出与名为李强和周思思的点共同selects的,标签等于course的节点;2: 查找全部id为163的课程关联的学生,和以拥有关系关联了这些学生的其他部门;3: 找出所有和学生Alan有3跳或4跳关系的学生;4: 返回university北京大学的所有类型为friend的边,并根据weight从小到大排列,返回78个;5: 给出71个名为重庆大学的点拥有的label为部门的节点,且节点名字大于等于969或价值等于791;6: 找出与学生黄强和杜思琪都存在student_selects_course关系的点;",
        "output": "查询语句为:1: match(a where a.name = '李强')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c where c.name = '周思思') return b;2: match(a:course where a.id = '163')-[e]-(b:student)<-[e2:department_has_student]-(c:department) return b,c;3: match(a:student where a.name='Alan')-[e]->{3,4}(b:student) return b;4: match(a:university where a.name = '北京大学')-[e:friend]->(b) return b order by e.weight asc limit 78;5: match(a where a.name='重庆大学')-[e:university_has_department]->(b:department where b.name >= 969 or b.value = 791) return b limit 71;6: match(a:student where a.name='黄强')-[e:student_selects_course]->(b)<-[e2:student_selects_course]-(c:student where c.name='杜思琪') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 帮我查询全部源点满足条件height不等于197或name不是赵雪,且height小于等于171,目标点满足条件id为空,且标签为person_apply_loan的边;2: 查找58个名为黄若涵的点apply的类型为loan的节点,且节点id大于等于85;3: 请帮我找出和company阿里有关的loan,再请帮我找出和阿里company_apply_loan的其他loan,返回它们;",
        "output": "查询语句为:1: match(a where (a.height <> 197 or a.name <> '赵雪') and a.height <= 171)-[e:person_apply_loan]->(b where (b.id is null)) return e;2: match(a where a.name='黄若涵')-[e:person_apply_loan]->(b:loan where b.id >= 85) return b limit 58;3: match(a:company where a.name = '阿里')-[e]-(b:loan), (a:company)-[e2:company_apply_loan]->(c:loan) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找公司滴滴属于的城市,以及属于这些城市的大学, 令公司的人数等于城市的value的求和值加881加6435, 返回公司的名字,城市的人数,大学的价值",
        "output": "match(a:company where name = '滴滴')-[e:belong]->(b:city)<-[e2:belong]-(c:university) let a.peopleNumber = SUM(b.value) + 881 + 6435 return a.name,b.peopleNumber,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与账号有关联的所有非Kate person节点，并找出这些节点中身高减去174后的最小值，以及身高乘155减去7841的值。",
        "output": "match(a:account)-[e]->(b:person where b.name <> 'kate') return MIN(b.height - 174), b.height * 155 - 7841",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和forum百度贴吧有关的user,称为X,再返回和这个X有关联的其他forum,以及和X有关联的user",
        "output": "match(a:forum where a.name = '百度贴吧')-[e]-(b:user), (b:user)-[e2]-(c:forum),(b:user)-[e3]-(d:user) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找韩建聪的朋友的伙伴。",
        "output": "match(a:person where a.name='韩建聪')-[e:relation]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点类型是医生,边类型是创造,以及满足条件f0大于等于707,目标点id等于164,或f0减692小于等于57的边",
        "output": "match(a:doctor)-[e:creates where (e.f0 >= 707 and e.targetId = 164) or e.f0 - 692 <= 57]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与账号Light和贷款defaultName都有关联的公司节点及其规格和名称。",
        "output": "match(a:account where a.name='Light')-[e]->(b:company)<-[e2]-(c:loan where c.name='defaultName') return b.scale, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person黄科有关系的person, 返回和这些person有关联的person的,年龄减64的值",
        "output": "match(a:person where a.name= '黄科')-[e]-(b:person)-[e2]-(c:person) return c.age - 64",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,height,salary, 数据为('male',163,4279)的子查询作为输入表, 源点的salary等于输入表salary,请帮我查找被department体育学院has的student",
        "output": "with p as (select * from (VALUES('male',163,4279)) as t(gender,height,salary))MATCH (a:student WHERE a.salary = p.salary) <-[e:department_has_student ]-(b:department WHERE b.name = '体育学院') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与seller韩思思存在ask关系,且与orders Order_198存在cancel关系的buyer节点，返回这些buyer的age,id,name,及seller韩思思的age,及orders Order_198的price",
        "output": "match(a:seller where a.name='韩思思')-[e:ask]->(b:buyer)<-[e2:cancel]-(c:orders where c.name='Order_198') return a.age,b.age, b.id, b.name,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查询和书有关联的书节点,并根据其类别,名字,id分组,返回类别,名字,id,以及字数加字数的值;2: 查询和编辑何建国有publisher_publish_book关系的书,以及和编辑郑月有publisher_publish_book关系的书,将它们都返回;3: 请帮我查找全部label为读者的点;",
        "output": "查询语句为:1: match(a:book)-[e:book_refers_book]-(b:book) return b.category, b.name, b.id, b.wordCount + b.wordCount group by b.category, b.name, b.id;2: match(a:publisher where a.name = '何建国')-[e:publisher_publish_book]->(b:book),(c:publisher where c.name = '郑月')-[e2:publisher_publish_book]->(d:book)return a, b, c, d;3: match(a:reader) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表198,695,538,833, 以属性id作为相等条件,请帮我查找前36个类型是person_knows_person的边",
        "output": "with p as (select * from (VALUES(198),(695),(538),(833)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_knows_person ]->(b) RETURN e LIMIT 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表990, 以属性id作为相等条件,请帮我查找名为马红和Jack的,label为person的点公共的partner节点的名单",
        "output": "with p as (select * from (VALUES(990)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '马红')) -[e:partner ]->(b) <-[e2:partner ]-(c:person WHERE c.name = 'Jack') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出195个和类型为city的点有belong关系的country,且和这些country有contain关系的city",
        "output": "match(a:city)-[e:belong]->(b:country)-[e2:contain]->(c:city) return c limit 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与issue ISSUE-56有关系的repository的lang",
        "output": "match(a:issue where a.name='ISSUE-56')-[e]-(b:repository) return b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为Prescription_479的点contain的medicine",
        "output": "match(a where a.name='Prescription_479')-[e:contain]->(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与'person'类型节点有关联的'person'节点，并进一步查询这些节点之间的关联关系。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id除16的最小值大于等于4136,名字不是王国强的person认识的person的名称,以及这些person 关联的person的名称",
        "output": "match(a:person where MIN(a.id / 16) >= 4136 and a.name <> '王国强')-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与学生赵月有关系的教师, 返回和这些教师有关联的课程的,学分乘学分的值",
        "output": "match(a:student where a.name= '赵月')-[e]-(b:teacher)-[e2]-(c:course) return c.credit * c.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person黄思思有关系的person,返回这些点的性别,年龄",
        "output": "match(a:person where a.name='黄思思')-[e]-(b:person) return b.gender, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询31个和标签等于person的点有同事关系的person,且和这些person有同事关系的person",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:colleague]->(c:person) return c limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有从大学出发，到城市的边。",
        "output": "match(a:university)-[e:belong]->(b:city) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘70的最大值",
        "output": "MAX(a.id * 70)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为韩建聪的医生,以及与其有关的医生,并返回韩建聪的id和这些医生的年龄",
        "output": "match(a:doctor where name = '韩建聪')-[e]-(b:doctor) return a.id, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与Order_185和Order_307有关系的20个卖家节点。",
        "output": "match(a where a.name='Order_185')-[e]->(b:seller)<-[e2]-(c where c.name='Order_307') return b limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person赵轩有friend关系的3跳的环",
        "output": "match(a:person where name = '赵轩')-[e:friend]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,name,id, 数据为(177,'郑强',43),(183,'吴科',41), 源点的id等于输入表id,找出被person Amily支付的person",
        "output": "with p as (select * from (VALUES(177,'郑强',43),(183,'吴科',41)) as t(height,name,id))MATCH (a:person WHERE a.id = p.id) <-[e:person_pay_person ]-(b:person WHERE b.name = 'Amily') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出'department'节点下，'经管学院'的教师节点所教授的'course'课程？",
        "output": "match(a:department where a.name = '经管学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person韩建聪的所有朋友,的权重加157.43的值",
        "output": "match(a:person where a.name= '韩建聪')-[e:friend]->(b) return e.weight + 157.43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 给出全部和名为美团的company有friend关系,或有friend的friend关系的university;2: 帮我查询从城市巴黎出发,经过标签等于city_contain_company的边,走1到3度到达的公司点;3: 查询35个名为华为的点属于的类型是城市的节点,且其peopleNumber的求和值除8685小于等于416或面积不为空;4: 查询所有和名为微软的company有relation关系,或有relation的relation关系的city;5: 请帮我找出前21个id大于69或scale为small或id大于等于45的company;6: 返回84个name是清华大学的university,根据value降序排列;7: 找出类型是城市,名为纽约的点,返回这些点的人数,id,价值;",
        "output": "查询语句为:1: match(a:company where n.name=美团)-[e:friend]->{1,2}(b:university) return b;2: match(a:city where a.name='巴黎')-[e:city_contain_company]->{1,3}(b:company) return b;3: match(a where a.name='华为')-[e:company_belong_city]->(b:city where SUM(b.peopleNumber) / 8685 <= 416 or (b.area is not null)) return b limit 35;4: match(a:company where n.name=微软)-[e:relation]->{1,2}(b:city) return b;5: match(a:company where a.id > 69 or a.scale = 'small' or a.id >= 45) return a limit 21;6: match(a:university where a.name = '清华大学') return a order by a.value desc limit 84;7: match(a:city where a.name = '纽约') return a.peopleNumber, a.id, a.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,salary分组,计算height加height的值",
        "output": "return a.height + a.height group by a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person likes的person,返回其源点的height加184的值,以及目标点的height减162的值",
        "output": "match(a:person)-[e:likes]->(b:person) return a.height + 184, b.height - 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到被Jimmy喜欢的人，这些人又被某个人认识。",
        "output": "match(a:person where a.name = 'Jimmy')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有id为85的论坛关联的标签,和以拥有关系关联了这些标签的其他帖子",
        "output": "match(a:forum where a.id = 85)-[e]-(b:tag)<-[e2:has]-(c:post) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和买家徐轩有关的卖家,称为X,再查找和这个X有关联的其他卖家,以及和X有关联的商品",
        "output": "match(a:buyer where a.name = '徐轩')-[e]-(b:seller), (b:seller)-[e2]-(c:seller),(b:seller)-[e3]-(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为49的city belong的country, 并将country有关的company的peopleNumber的求和值赋值给country的peopleNumber, 接着查询country的peopleNumber小于49的country contain的city",
        "output": "match(a:city where a.id = 49)-[e:belong]->(b:country) let b.peopleNumber = SUM((b:country)-[e2]-(c:company) => c.peopleNumber) match(b:country where b.peopleNumber < 49)-[e3:contain]->(d:city) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age,height,id分组,计算age加age对175取余对180取余的值",
        "output": "return a.age + a.age % 175 % 180 group by a.age, a.height, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以640,909,99,380作为请求点id, 源点的id等于输入表id,查询源点满足条件age小于62,salary小于9155,目标点满足条件salary大于3204且height不是153且age为空,且标签等于person_friend_person的边",
        "output": "with p as (select * from (VALUES(640),(909),(99),(380)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.age < 62 AND a.salary < 9155)) -[e:person_friend_person ]->(b WHERE b.salary > 3204 AND b.height <> 153 AND b.age IS NULL) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(8,186,'感冒药')作为请求表数据,属性分别为id,price,category, 以属性category作为相等条件,请帮我查找与部门放射科和呼吸科都存在department_has_doctor关系的点",
        "output": "with p as (select * from (VALUES(8,186,'感冒药')) as t(id,price,category))MATCH (a:department WHERE a.category = p.category AND (a.name = '放射科')) -[e:department_has_doctor ]->(b) <-[e2:department_has_doctor ]-(c:department WHERE c.name = '呼吸科') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为韩思思和张伟的,标签为person的点公共的家人节点的名单",
        "output": "match(a:person where a.name='韩思思')-[e:family]->(b)<-[e2:family]-(c:person where c.name='张伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点类型是cinema,目标点类型是film,类型是comment或tag的边",
        "output": "match(a:cinema)-[e:comment | tag]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 返回label为标签的所有点,并根据id从大到小排列;2: 给出id为198的点的name;3: 请帮我查找155个类别等于悬疑,价值大于947,或id不是12的电影,根据价值从小到大排列;4: 请帮我找出与名为绿巨人和我不是药神的点共同has的,label为tag的节点;5: 给出和电影院大众影院有关的电影院,再给出和大众影院cinema_releases_film的其他电影,返回它们;6: 查询person赵梅watch的film,被其他person watch的数量;7: 查询11个person王红和郑月,共同的相关者;8: 帮我查询名为科幻的标签,以及与其有关的标签,并返回科幻的名字和这些标签的价值;",
        "output": "查询语句为:1: match(a:tag) return a order by a.id desc;2: match(a where a.id = '198') return a.name;3: match(a:film where (a.category = '悬疑' and a.value > 947) or a.id <> 12) return a order by a.value asc limit 155;4: match(a where a.name = '绿巨人')-[e:film_has_tag]->(b:tag)<-[e2:film_has_tag]-(c where c.name = '我不是药神') return b;5: match(a:cinema where a.name = '大众影院')-[e]-(b:cinema), (a:cinema)-[e2:cinema_releases_film]->(c:film) return a, b, c;6: match(a:person where a.name='赵梅')-[e:person_watch_film]->(b:film)<-[e2:person_watch_film]-(c:person) return COUNT(c);7: match(a:person where a.name='王红')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='郑月') return b limit 11;8: match(a:tag where name = '科幻')-[e]-(b:tag) return a.name, b.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出李建国观看的电影，返回该电影包含的标签的ID、名称和值。",
        "output": "match(a:person where name = '李建国')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.id, c.name, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从用户何宏出发,经过label为创造的边,走2到5度到达的合并请求点",
        "output": "match(a:user where a.name='何宏')-[e:creates]->{2,5}(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与company相关的country节点，其中country节点的id为空。然后计算这些节点的value对830取余的个数和value的平均值除以464的最小值。",
        "output": "match(a:company)-[e]->(b:country where (b.id is null)) return COUNT(b.value % 830), MIN(AVG(b.value) / 464)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与Calcite和Hive有关联的96个软件节点。",
        "output": "match(a where a.name='Calcite')-[e]->(b:software)<-[e2]-(c where c.name='Hive') return b limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与吴强存在认识关系的person,person与person存在支付关系的点,返回这些点的性别",
        "output": "match(a where a.name = '吴强')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出杜梅和赵建聪共同的朋友列表，这些朋友的label是person。",
        "output": "match(a:person where a.name='杜梅')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,gender,age, 数据为('赵轩','male',21),('李思琪','male',75),('Tom','male',53), 源点的gender等于输入表gender,查找100个名为内科的点拥有的类型是医生的节点,且其年龄小于等于73或身高的最小值大于等于3605",
        "output": "with p as (select * from (VALUES('赵轩','male',21),('李思琪','male',75),('Tom','male',53)) as t(name,gender,age))MATCH (a WHERE a.gender = p.gender AND (a.name = '内科')) -[e:department_has_doctor ]->(b:doctor WHERE b.age <= 73 OR MIN(b.height) >= 3605) RETURN b LIMIT 100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为马科的节点教的学生或大学或部门",
        "output": "match(a where a.name='马科')-[e:teach]->(b:student | university | department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为103的标签关联的帖子,和以包含关系关联了这些帖子的其他论坛",
        "output": "match(a:tag where a.id = 103)-[e]-(b:post)<-[e2:contain]-(c:forum) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出医生郑红创造的处方,被其他病人接受的数量",
        "output": "match(a:doctor where a.name='郑红')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出country为美国的所有city及其对应的university名称",
        "output": "match(a:country where a.name = '美国')-[e:contain]->(b:city)-[e2:contain]->(c:university) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找doctor creates的prescription, 令prescription的name的值等于createsprescription的doctor的gender的和, 再查找prescription contain的medicine",
        "output": "match(a:doctor)-[e:creates]->(b:prescription) let b.name = SUM((b:prescription)<-[e2:creates]-(c:doctor) => c.gender) match(b:prescription)-[e3:contain]->(d:medicine) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,性别分组,计算身高对156取余的值",
        "output": "return a.height % 156 group by a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person赵思琪支付的person,被其他person喜欢的数量",
        "output": "match(a:person where a.name='赵思琪')-[e:pay]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高除198对45取余的最大值",
        "output": "MAX(a.height / 198 % 45)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与电影功夫有发行关系的电影院。",
        "output": "match(a:film where a.name='功夫')<-[e:releases]-(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person韩轩有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '韩轩')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以863,961,625,412作为请求点id, 以属性id作为相等条件,查询person creates的comment,返回其源点的age对96取余的最大值,以及目标点的wordCount加622的最小值",
        "output": "with p as (select * from (VALUES(863),(961),(625),(412)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_creates_comment ]->(b:comment) RETURN MAX(a.age % 96), MIN(b.wordCount + 622) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Bilibili公司申请贷款节点存款的账号是什么？",
        "output": "match(a:company where a.name = 'Bilibili')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale',154,3175),('male',195,9179),('famale',193,8873),('famale',176,6294)作为请求表数据,属性分别为gender,height,salary, 以属性height作为相等条件,给出全部prescription以createTime分组的name, 根据name从大到小排序",
        "output": "with p as (select * from (VALUES('famale',154,3175),('male',195,9179),('famale',193,8873),('famale',176,6294)) as t(gender,height,salary))MATCH (a:prescription WHERE a.height = p.height) RETURN a.name GROUP BY a.createTime ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与ID为65的教师有关系的其他教师，然后再帮我查询与这些教师有关系的其他伙伴。",
        "output": "match(a:teacher where id = '65')-[e]-(b:teacher)-[e2:partner]->(c), (b:teacher)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出买家吴宏查看的商品,以及拥有这些商品的卖家, 令买家的类别等于商品的id减63,令买家的销量等于商品的价值减价值对658.74取余, 返回买家的性别,商品的价格,卖家的名字",
        "output": "match(a:buyer where name = '吴宏')-[e:look]->(b:goods)<-[e2:has]-(c:seller) let a.category = b.id - 63,let a.sellerNumber = b.value - b.value % 658.74 return a.gender,b.price,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回一个点（Post_471),标签为'帖子'，并返回该点的语言、ID和字数。",
        "output": "match(a:post where a.name = 'Post_471') return a.lang, a.id, a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为company的点,返回35个",
        "output": "match(a:company) return a limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部label为医生或部门或药品的点",
        "output": "match(a:doctor | department | medicine) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点类型为person,目标点类型为person,类型为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表377,208, 以属性id作为相等条件,给出与person周建聪有关系的cinema的address",
        "output": "with p as (select * from (VALUES(377),(208)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '周建聪')) -[e ]-(b:cinema) RETURN b.address ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表318,789,833,427,904, 以属性id作为相等条件,给出类型是person的点,返回78个",
        "output": "with p as (select * from (VALUES(318),(789),(833),(427),(904)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a LIMIT 78",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与author徐伟有knows关系的3度的环",
        "output": "match(a:author where name = '徐伟')-[e:knows]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与李思思有诊断关系的医生。",
        "output": "match(a:patient where a.name='李思思')<-[e:diagnose]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部Kafka的点uses的software,然后请帮我找出Kafka被commits的person,一起返回",
        "output": "match(a where a.name = 'Kafka')-[e:uses]->(b:software),(a where a.name = 'Kafka')<-[e2:commits]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person赵月创造的评论,被其他person创造的数量",
        "output": "match(a:person where a.name='赵月')-[e:creates]->(b:comment)<-[e2:creates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出编辑发布的书,返回其源点的age的和乘33的求和值,以及目标点的价格对47取余的最小值",
        "output": "match(a:publisher)-[e:publish]->(b:book) return SUM(SUM(a.age) * 33), MIN(b.price % 47)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和account BIN之间有repay关系的loan",
        "output": "match(a:account where a.name='BIN')-[e:repay]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(90,'喜剧',264),(6,'历史',128),(97,'其他',68), 以属性name作为相等条件,查找与论坛天涯论坛有forum_contain_person关系的1跳以内的环",
        "output": "with p as (select * from (VALUES(90,'喜剧',264),(6,'历史',128),(97,'其他',68)) as t(id,name,value))MATCH (a:forum WHERE a.name = p.name AND (name = '天涯论坛')) -[e:forum_contain_person ]->{0,0}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为标签的所有点,并根据名字从小到大排列",
        "output": "match(a:tag) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为4的person观看的电影, 并将电影有关的评论的id的平均值赋值给电影的价值, 接着查询电影的价值小于4的电影拥有的标签",
        "output": "match(a:person where a.id = 4)-[e:watch]->(b:film) let b.value = AVG((b:film)-[e2]-(c:comment) => c.id) match(b:film where b.value < 4)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与订单Order_411有关系的订单的价值",
        "output": "match(a:orders where a.name='Order_411')-[e]-(b:orders) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与用户陈红有关,且与标签悬疑有关系的帖子节点",
        "output": "match(a:user where a.name='陈红')-[e:likes]-(b:post)-[e2:has]-(c:tag where c.name='悬疑') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(324,'Post_445',2026-07-07),(91,'Post_347',2010-10-26),(498,'Post_108',2002-03-16),(820,'Post_479',1995-04-30)作为请求表数据,属性分别为wordCount,name,createTime, 以属性wordCount作为相等条件,给出以has关系关联了tag科幻的post",
        "output": "with p as (select * from (VALUES(324,'Post_445',2026-07-07),(91,'Post_347',2010-10-26),(498,'Post_108',2002-03-16),(820,'Post_479',1995-04-30)) as t(wordCount,name,createTime))MATCH (a:tag WHERE a.wordCount = p.wordCount AND (a.name = '科幻')) <-[e:post_has_tag ]-(b:post) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为李伟的点关联的person,并对这些person的名字进行求和",
        "output": "match(a where a.name='李伟')-[e:relates]->(b:person) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部id为101的公司关联的person,和以雇佣关系关联了这些person的其他公司",
        "output": "match(a:company where a.id = 101)-[e]-(b:person)<-[e2:employee]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高减181的值",
        "output": "a.height - 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表446, 源点的id等于输入表id,返回名为阿里的company",
        "output": "with p as (select * from (VALUES(446)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与贷款点相关的账户节点，并按创建时间对其进行分组。",
        "output": "match(a:loan)-[e:deposit]-(b:account) return b.createTime group by b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为马雪的人有伙伴关系，或者有伙伴关系的人。",
        "output": "match(a:person where n.name=马雪)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部course以name,id分组的courseHour, 根据courseHour升序排序",
        "output": "match(a:course) return a.courseHour group by a.name, a.id order by a.courseHour asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "列出所有与城市相关的公司，以及这些城市与其他公司的归属关系。",
        "output": "match(a:company where a.id = '16')-[e]-(b:city)<-[e2:belong]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为喜欢,以及满足条件目标点id大于45,f1是true且权重在129.94到130.43之间的边",
        "output": "match(a)-[e:likes where e.targetId > 45 and e.f1 = true and (e.weight BETWEEN 129.94 AND 130.43)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询软件Geaflow使用的软件,以及创造这些软件的公司, 令公司的名字等于软件的星数的个数, 返回软件(a)的价值,软件(b)的价值,公司(c)的id",
        "output": "match(a:software where name = 'Geaflow')-[e:uses]->(b:software)<-[e2:creates]-(c:company) let c.name = COUNT(a.stars) return a.value,b.value,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回与读者黄科有关,且与书悲惨世界有关系的书节点;2: 查询136个性别不等于famale,salary的最小值除6714的个数大于等于13,id小于等于76的编辑,根据年龄从大到小排列;3: 找出源点id为空,边label为author_write_book,且满足条件权重不为空且f1不等于true,或源点id在129到137之间的边,返回这些边的源点id除85的值;4: 返回author王思思 write的book,返回book knows的book的id对id取余的值 ;5: 查询所有编辑以薪资,身高分组的薪资, 根据薪资升序排序;6: 给出标签为编辑的全部点,并根据性别从小到大排列;7: 帮我查询和reader有关联的book节点,并根据其category分组,返回category,以及price对43取余的值;8: 帮我查询author Amily knows的author,返回author write的book的wordCount减wordCount的最小值 ;",
        "output": "查询语句为:1: match(a:reader where a.name='黄科')-[e:reader_likes_book]-(b:book)-[e2:book_refers_book]-(c:book where c.name='悲惨世界') return b;2: match(a:publisher where a.gender <> 'famale' and COUNT(MIN(a.salary) / 6714) >= 13 and a.id <= 76) return a order by a.age desc limit 136;3: match(a where (a.id is null))-[e:author_write_book where ((e.weight is not null) and e.f1 <> true) or (e.srcId BETWEEN 129 AND 137)]->(b) return e.srcId / 85;4: match(a:author where name = '王思思')-[e:author_write_book]->(b:book)-[e2:knows]->(c:book) return c.id % c.id;5: match(a:publisher) return a.salary group by a.salary, a.height order by a.salary asc;6: match(a:publisher) return a order by a.gender asc;7: match(a:reader)-[e:reader_likes_book]-(b:book) return b.category, b.price % 43 group by b.category;8: match(a:author where name = 'Amily')-[e:author_knows_author]->(b:author)-[e2:author_write_book]->(c:book) return MIN(c.wordCount - c.wordCount);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有包含商品且由Jack创建的订单的类别。",
        "output": "match(a where a.name = 'Jack')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与评论Comment_243有关系的评论的字数",
        "output": "match(a:comment where a.name='Comment_243')-[e]-(b:comment) return b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(true,176.77,161)作为请求表数据,属性分别为f1,weight,srcId, 以属性f1作为相等条件,请帮我找出所有类型为person的点",
        "output": "with p as (select * from (VALUES(true,176.77,161)) as t(f1,weight,srcId))MATCH (a:person WHERE a.f1 = p.f1) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出company以id分组的value, 根据value降序排序",
        "output": "match(a:company) return a.value group by a.id order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为peopleNumber,scale,id, 数据为(984,'medium',95),(836,'large',46), 以属性scale作为相等条件,查找和software Hadoop有software_uses_software关系的software,再查找以software_uses_software关系关联了 Hadoop的software",
        "output": "with p as (select * from (VALUES(984,'medium',95),(836,'large',46)) as t(peopleNumber,scale,id))MATCH (a:software WHERE a.scale = p.scale AND (a.name = 'Hadoop')) -[e:software_uses_software ]->(b:software) , (a:software WHERE a.name = 'Hadoop') <-[e2:software_uses_software ]-(c:software) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找帖子拥有的标签,返回其源点的字数对637取余的平均值,以及目标点的价值加761的最小值",
        "output": "match(a:post)-[e:has]->(b:tag) return AVG(a.wordCount % 637), MIN(b.value + 761)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签以名字分组的id, 根据id升序排序",
        "output": "match(a:tag) return a.id group by a.name order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回源点薪资的个数小于198且id不为空,边标签等于person_invest_company,且f1等于false或时间戳为2013年09月22日的边,返回这些边的权重除权重的值",
        "output": "match(a where COUNT(a.salary) < 198 and (a.id is not null))-[e:person_invest_company where e.f1 = false or e.timeStamp = '2013-09-22']->(b) return e.weight / e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为陈建国的person,以及与其有关的person,并返回陈建国的id和这些person的gender",
        "output": "match(a:person where name = '陈建国')-[e]-(b:person) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找赵科的伙伴的朋友",
        "output": "match(a:person where a.name='赵科')-[e:relation]->(b)-[e2:partner]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减19的平均值",
        "output": "AVG(a.value - 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为计算机学院的部门,以及与其有关的学生,并返回计算机学院的价值和这些学生的薪资",
        "output": "match(a:department where name = '计算机学院')-[e]-(b:student) return a.value, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是标签的点,返回67个",
        "output": "match(a:tag) return a limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为清华大学的点合作的公司",
        "output": "match(a where a.name='清华大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出共同拥有'大学'标签且名称包含'重庆大学'或'武汉大学'的节点列表。",
        "output": "match(a:university where a.name='重庆大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='武汉大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出大学中国科技大学合作的公司节点属于的城市",
        "output": "match(a:university where a.name = '中国科技大学')-[e:cooperate]->(b:company)-[e2:belong]->(c:city) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部医生以名字,id分组的年龄, 根据年龄从大到小排序",
        "output": "match(a:doctor) return a.age group by a.name, a.id order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,性别,名字分组,计算薪资乘1020的求和值",
        "output": "return SUM(a.salary * 1020) group by a.id, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为19的点的id,changeFileNumber,createTime",
        "output": "match(a where a.id = 19) return a.id, a.changeFileNumber, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和cinema UME有关的film,称为X,再找出和这个X有关联的其他comment,以及和X有关联的cinema",
        "output": "match(a:cinema where a.name = 'UME')-[e]-(b:film), (b:film)-[e2]-(c:comment),(b:film)-[e3]-(d:cinema) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与处方Prescription_457有关联，并且与用户杜思琪有关联的处方节点。并返回这些节点的创建时间和权重。",
        "output": "match(a:prescription where a.name='Prescription_457')-[e]->(b:prescription)<-[e2]-(c:user where c.name='杜思琪') return b.createTime, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 请帮我查找标签为贷款的所有点,并根据权重降序排列;2: 查询和account TheShy有account_transfer_account关系的account,再查询以account_repay_loan关系关联了 TheShy的loan;3: 帮我查询被person马思琪投资的公司;4: 给出company的1跳以内的环;5: 请帮我查找被person赵思思拥有的账号;6: 查询全部和company阿里之间有company_apply_loan关系的loan;7: 查找名为defaultName的点的,id小于等于94,id对23取余对75取余是28的relation,返回这些relation的isBlock,和边的targetId,f0,srcId;",
        "output": "查询语句为:1: match(a:loan) return a order by a.weight desc;2: match(a:account where a.name = 'TheShy')-[e:account_transfer_account]->(b:account),(a:account where a.name = 'TheShy')<-[e2:account_repay_loan]-(c:loan)return a, b, c;3: match(a:company)<-[e:person_invest_company]-(b:person where b.name='马思琪') return a, b;4: match(a:company)->{0,0}(b)->(a) return a.id, b.id as b_id;5: match(a:account)<-[e:person_own_account]-(b:person where b.name='赵思思') return a, b;6: match(a:company where a.name='阿里')-[e:company_apply_loan]->(b:loan) return b;7: match(a where a.name='defaultName')-[e:relation]->(b where b.id <= 94 and b.id % 23 % 75 = 28) return b.isBlock,e.targetId, e.f0, e.srcId;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为赵建聪的person,以及与其有关的person,并返回赵建聪的薪资和这些person的年龄",
        "output": "match(a:person where name = '赵建聪')-[e]-(b:person) return a.salary, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 搜索南京大学。",
        "output": "match(a:university where a.name = '南京大学') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询一个源点（label为帖子）,和一个目标点（label为标签）,以及它们之间拥有的边（label)。",
        "output": "match(a:post)-[e:has]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与软件Flink存在使用关系,且与软件SprintBoot存在使用关系的软件节点，返回这些软件的名字,语言,及软件Flink的名字,及软件SprintBoot的是否开源",
        "output": "match(a:software where a.name='Flink')-[e:uses]->(b:software)<-[e2:uses]-(c:software where c.name='SprintBoot') return a.name,b.name, b.lang,c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询薪资不为空,性别不等于famale的用户创造的合并请求的名称,以及这些合并请求 属于的仓库的名称",
        "output": "match(a:user where (a.salary is not null) and a.gender <> 'famale')-[e:creates]->(b:pullRequest)-[e2:belong]->(c:repository) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为Spark的软件,以及与其有关的公司,并返回Spark的价值和这些公司的id",
        "output": "match(a:software where name = 'Spark')-[e]-(b:company) return a.value, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与城市有关系的大学节点,且大学节点的id加7小于等于1,并返回这些大学的价值加16的最大值,以及大学的value的求和值加597乘94的个数",
        "output": "match(a:city)-[e]->(b:university where b.id + 7 <= 1) return MAX(b.value + 16), COUNT((SUM(b.value) + 597) * 94)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person吴若涵支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='吴若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与'黄科'有关的人的信息，包括他们的薪资、性别和年龄。",
        "output": "match(a:person where name = '黄科')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c.salary, c.gender, c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询145个与艺术学院和体育学院都存在关系的student或teacher节点",
        "output": "match(a where a.name='艺术学院')-[e]->(b:student | teacher)<-[e2]-(c where c.name='体育学院') return b limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和city纽约之间有belong关系的country",
        "output": "match(a:city where a.name='纽约')-[e:belong]->(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找用户名为杜月，且标签为动作的帖子节点。",
        "output": "match(a:user where a.name='杜月')-[e:likes]-(b:post)-[e2:has]-(c:tag where c.name='动作') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,createTime,name, 数据为(56,2028-11-06,'Comment_330'),(60,2026-02-01,'Comment_274'),(38,2017-10-05,'Comment_496'),(39,2017-03-15,'Comment_396'), 以属性createTime作为相等条件,找出id为162的点的字数",
        "output": "with p as (select * from (VALUES(56,2028-11-06,'Comment_330'),(60,2026-02-01,'Comment_274'),(38,2017-10-05,'Comment_496'),(39,2017-03-15,'Comment_396')) as t(id,createTime,name))MATCH (a WHERE a.createTime = p.createTime AND (a.id = '162')) RETURN a.wordCount ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询83个同时与张建聪和黄强有关系的个人节点。",
        "output": "match(a where a.name='张建聪')-[e]->(b:person)<-[e2]-(c where c.name='黄强') return b limit 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找149个名为杜建聪的点观看的标签等于电影的节点,且节点价值在497到893之间或id小于72",
        "output": "match(a where a.name='杜建聪')-[e:watch]->(b:film where (b.value BETWEEN 497 AND 893) or b.id < 72) return b limit 149",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与author孙宏存在knows关系,且与author吴国强存在knows关系的author节点，返回这些author的name,gender,id,及author孙宏的salary,及author吴国强的id",
        "output": "match(a:author where a.name='孙宏')-[e:knows]->(b:author)<-[e2:knows]-(c:author where c.name='吴国强') return a.salary,b.name, b.gender, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回部门的三角的环,边标签等于拥有, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和论坛天涯论坛有1到3度关系的论坛",
        "output": "match(a:forum where a.name='天涯论坛')-[e]->{1,3}(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出user马红喜欢的帖子，并返回这些帖子所包含的标签的名称和ID。",
        "output": "match(a:user where name = '马红')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.name, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为106的点的id,名字",
        "output": "match(a where a.id = 106) return a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于书的点,并根据字数从大到小排列",
        "output": "match(a:book) return a order by a.wordCount desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与用户何宏存在创造关系,且与仓库XXRepo存在属于关系的事项节点，返回这些事项的状态,创建时间,及用户何宏的身高,及仓库XXRepo的权重",
        "output": "match(a:user where a.name='何宏')-[e:creates]->(b:issue)<-[e2:belong]-(c:repository where c.name='XXRepo') return a.height,b.status, b.createTime,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出和country中国有关的company,再给出和中国country_contain_city的其他city,返回它们",
        "output": "match(a:country where a.name = '中国')-[e]-(b:company), (a:country)-[e2:country_contain_city]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款loan_86 存款的账号,返回账号 还款的贷款的id加56的数量",
        "output": "match(a:loan where name = 'loan_86')-[e:deposit]->(b:account)-[e2:repay]->(c:loan) return COUNT(c.id + 56)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出编辑发布的书,返回其源点的年龄除14对151取余的平均值,以及目标点的id对67取余的平均值",
        "output": "match(a:publisher)-[e:publish]->(b:book) return AVG(a.age / 14 % 151), AVG(b.id % 67)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person赵梅出发，通过观看行为连接，最多跳4步到达的电影点",
        "output": "match(a:person where a.name='赵梅')-[e:watch]->{1,4}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询卖家的三角的环,边标签等于回答, 并返回这些点的id",
        "output": "match(a:seller)-[e:ask]->(b)-[e2:ask]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为PR-273的事项或仓库,以及与其有关的用户,并返回PR-273的id和这些用户的性别",
        "output": "match(a:issue | repository where name = 'PR-273')-[e]-(b:user) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从账号LX001出发,经过标签为还款的边,走3到5跳到达的贷款点",
        "output": "match(a:account where a.name='LX001')-[e:repay]->{3,5}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回buyer creates的orders,返回其源点的height除159的数量,以及目标点的id对59取余加53的值",
        "output": "match(a:buyer)-[e:creates]->(b:orders) return COUNT(a.height / 159), b.id % 59 + 53",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签是公司，目标点标签是贷款和申请的边。",
        "output": "match(a:company)-[e:apply]->(b:loan) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 帮我查询与person张梅和陈国强都存在person_friend_person关系的点;2: 找出前179个标签等于person_family_person的边;3: 返回person王梅的全部类型为同事的边,并根据f1降序排列,返回130个;4: 请帮我查找144个名为杜轩的点knows的类型是person的节点,且其salary大于等于4736;",
        "output": "查询语句为:1: match(a:person where a.name='张梅')-[e:person_friend_person]->(b)<-[e2:person_friend_person]-(c:person where c.name='陈国强') return b;2: match(a)-[e:person_family_person]->(b) return e limit 179;3: match(a:person where a.name = '王梅')-[e:person_colleague_person]->(b) return b order by e.f1 desc limit 130;4: match(a where a.name='杜轩')-[e:knows]->(b:person where b.salary >= 4736) return b limit 144;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出账号TheShy转账的账号节点还款的贷款",
        "output": "match(a:account where a.name = 'TheShy')-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与 person 有关系的标签节点，且标签节点的值小于436,然后返回这些点的 ID 加 56 加 806 的值以及 ID 加 34 的值。",
        "output": "match(a:person)-[e]->(b:tag where b.value < 436) return b.id + 56 + 806, b.id + 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与prescription Prescription_242有关系的department, 返回和这些department有关联的prescription的,id的最大值乘id乘767的值",
        "output": "match(a:prescription where a.name= 'Prescription_242')-[e]-(b:department)-[e2]-(c:prescription) return MAX(c.id) * c.id * 767",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出评论Comment_298的朋友,的源点id乘15加118.03乘108的值",
        "output": "match(a:comment where a.name= 'Comment_298')-[e:friend]->(b) return (e.srcId * 15 + 118.03) * 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出源点salary大于等于6210,id小于22,或age对age取余大于194,边标签为person_friend_person,且满足条件weight为空的边,返回这些边的f0加969的最大值",
        "output": "match(a where (a.salary >= 6210 and a.id < 22) or a.age % a.age > 194)-[e:person_friend_person where (e.weight is null)]->(b) return MAX(e.f0 + 969)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与周强有写作关系的书籍，并返回这些书籍的作者。",
        "output": "match(a where a.name = '周强')-[e:write]->(b:book)-[e2:refers]->(c:book) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出176个名为Prescription_485的点contain的label为medicine的节点,且节点price小于等于193或name不是散利痛",
        "output": "match(a where a.name='Prescription_485')-[e:contain]->(b:medicine where b.price <= 193 or b.name <> '散利痛') return b limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为ISSUE-250的点属于的仓库,并对这些仓库的创建时间进行求和",
        "output": "match(a where a.name='ISSUE-250')-[e:belong]->(b:repository) return SUM(b.createTime)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询同时与郑月和张轩有喜欢关系的用户，返回这些用户的性别，姓名，郑月的年龄和张轩的年龄。",
        "output": "match(a:person where a.name='郑月')-[e:likes]->(b:person)<-[e2:likes]-(c:person where c.name='张轩') return a.age,b.gender, b.name,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为周若涵的,名字为杯子的伙伴,返回这些伙伴的名字,和边的f1,目标点id",
        "output": "match(a where a.name='周若涵')-[e:partner]->(b where b.name = '杯子') return b.name,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height,salary,gender分组,计算salary的最小值加9411的求和值",
        "output": "return SUM(MIN(a.salary) + 9411) group by a.height, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找与公司微软有关系的公司, 返回和这些公司有关联的person的,id的和乘99减179的值",
        "output": "match(a:company where a.name= '微软')-[e]-(b:company)-[e2]-(c:person) return SUM(c.id) * 99 - 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出115个名为韩国强的点认识的label为person的节点,且其名字等于吴梅或年龄大于等于63",
        "output": "match(a where a.name='韩国强')-[e:knows]->(b:person where b.name = '吴梅' or b.age >= 63) return b limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出王若涵和郑建聪共同的朋友列表。",
        "output": "match(a:user where a.name='王若涵')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='郑建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与孙思思购买的goods椅子相关的orders节点，并返回它们的价值、价格和名称。",
        "output": "match(a:goods where a.name='椅子')-[e]->(b:orders)<-[e2]-(c:buyer where c.name='孙思思') return b.value, b.price, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与course有关系的student节点,且student节点的age不为空,并返回这些student的height减192的值,以及student的id乘54乘183的平均值",
        "output": "match(a:course)-[e]->(b:student where (b.age is not null)) return b.height - 192, AVG(b.id * 54 * 183)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与病人张宏有关系的药品的价格",
        "output": "match(a:patient where a.name='张宏')-[e]-(b:medicine) return b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王宏有关系的person的名字",
        "output": "match(a:person where a.name='王宏')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出黄国强喜欢的帖子，并返回这些帖子拥有的标签的ID和名称。",
        "output": "match(a:user where name = '黄国强')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.id, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以636,678作为请求点id, 源点的id等于输入表id,请帮我找出所有公司的伙伴,或其伙伴的伙伴",
        "output": "with p as (select * from (VALUES(636),(678)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:partner ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与Zeus存在还款关系的贷款,贷款与账号存在存款关系的点,返回这些点的上次登录时间",
        "output": "match(a where a.name = 'Zeus')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询65个name是Post_197或createTime为2028年07月12日,且wordCount的最小值加972大于891的post,根据value升序排列",
        "output": "match(a:post where (a.name = 'Post_197' or a.createTime = '2028-07-12') and MIN(a.wordCount) + 972 > 891) return a order by a.value asc limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('韩科',97,8962),('孙思思',72,9477)作为请求表数据,属性分别为name,age,salary, 以属性name作为相等条件,请帮我找出113个person郑月和孙梅,共同的partner",
        "output": "with p as (select * from (VALUES('韩科',97,8962),('孙思思',72,9477)) as t(name,age,salary))MATCH (a:person WHERE a.name = p.name AND (a.name = '郑月')) -[e:partner ]->(b) <-[e2:partner ]-(c:person WHERE c.name = '孙梅') RETURN b LIMIT 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从Geaflow123repay账户中获取贷款并返回",
        "output": "match(a:loan)<-[e:repay]-(b:account where b.name='Geaflow123') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和名为PR-212的合并请求有朋友关系,或有朋友的朋友关系的仓库",
        "output": "match(a:pullRequest where n.name=PR-212)-[e:friend]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部公司以人数,价值,名字分组的id, 根据id降序排序",
        "output": "match(a:company) return a.id group by a.peopleNumber, a.value, a.name order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回浙江大学所有的部门，再返回每个部门的所有学生，最后返回这些学生的薪资。",
        "output": "match(a where a.name = '浙江大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有订单的价格减591.54的最小值",
        "output": "match(a:orders) return MIN(a.price - 591.54)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 返回全部源点标签为reader,目标点标签为book,标签为reader_likes_book的边;2: 给出和reader吴宏有关的author,再给出和吴宏reader_likes_book的其他book,返回它们;3: 查找和编辑李轩有关的书,称为X,再查找和这个X有关联的其他书,以及和X有关联的读者;4: 帮我查询95个book悲惨世界和罪与罚,共同的refers;5: 帮我查询151个与赵建聪和马科都存在关系的读者节点;6: 请帮我查找全部和reader郑思琪有3跳或4跳关系的publisher;7: 返回类型是book_refers_book,以及满足条件源点id大于119,f0为空的边;8: 找出标签等于读者的全部点,并根据id从小到大排列;9: 查询31个名为杜国强的点认识的标签等于作家的节点,且其身高小于等于156;",
        "output": "查询语句为:1: match(a:reader)-[e:reader_likes_book]->(b:book) return e;2: match(a:reader where a.name = '吴宏')-[e]-(b:author), (a:reader)-[e2:reader_likes_book]->(c:book) return a, b, c;3: match(a:publisher where a.name = '李轩')-[e]-(b:book), (b:book)-[e2]-(c:book),(b:book)-[e3]-(d:reader) return a, b, c, d;4: match(a:book where a.name='悲惨世界')-[e:book_refers_book]->(b)<-[e2:book_refers_book]-(c:book where c.name='罪与罚') return b limit 95;5: match(a where a.name='赵建聪')-[e]->(b:reader)<-[e2]-(c where c.name='马科') return b limit 151;6: match(a:reader where a.name='郑思琪')-[e]->{3,4}(b:publisher) return b;7: match(a)-[e:book_refers_book where e.srcId > 119 and (e.f0 is null)]->(b) return e;8: match(a:reader) return a order by a.id asc;9: match(a where a.name='杜国强')-[e:author_knows_author]->(b:author where b.height <= 156) return b limit 31;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查找与person李建国有关系的person, 返回和这些person有关联的person的,身高除195的值;2: 返回与person何若涵有关系的person的薪资;3: 帮我查询所有person以height,name,id分组的name, 根据name升序排序;4: 查找person张若涵认识的person,被其他person认识的数量;",
        "output": "查询语句为:1: match(a:person where a.name= '李建国')-[e]-(b:person)-[e2]-(c:person) return c.height / 195;2: match(a:person where a.name='何若涵')-[e]-(b:person) return b.salary;3: match(a:person) return a.name group by a.height, a.name, a.id order by a.name asc;4: match(a:person where a.name='张若涵')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为李宏的作家",
        "output": "match(a:author where a.name = '李宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找买家张伟和订单Order_198之间的关联订单，并返回它们的价格和ID。",
        "output": "match(a:buyer where a.name='张伟')-[e]->(b:orders)<-[e2]-(c:orders where c.name='Order_198') return b.price, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与forum有关系的user节点,且user节点的gender是male,并返回这些user的salary减2122的最大值,以及user的id对14取余的值",
        "output": "match(a:forum)-[e]->(b:user where b.gender = 'male') return MAX(b.salary - 2122), b.id % 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person张若涵有3跳关系的person",
        "output": "match(a:person where a.name='张若涵')-[e]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有person类型的数据，并按薪资从小到大的顺序排序。",
        "output": "match(a:person) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与reader韩梅有关系的reader的gender",
        "output": "match(a:reader where a.name='韩梅')-[e]-(b:reader) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出两个帖子Post_474和Post_112的共同相关者节点。",
        "output": "match(a:post where a.name='Post_474')-[e:relation]->(b)<-[e2:relation]-(c:post where c.name='Post_112') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为22的点的价值,学分",
        "output": "match(a where a.id = 22) return a.value, a.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和person点有创造关系的评论节点,且边满足条件f1不等于true,目标评论节点名字为Comment_493",
        "output": "match(a:person)-[e:creates where e.f1 <> true]->(b:comment where b.name = 'Comment_493') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 返回全部和名为Order_369的订单有伙伴关系,或有伙伴的伙伴关系的商品;2: 查询买家吴强的全部label为伙伴的边,并根据目标点id升序排列,返回134个;3: 查找所有和商品杯子有关系的商品节点,返回这些点的价值;4: 请帮我查找全部买家以id,年龄分组的薪资, 根据薪资降序排序;5: 帮我查询卖家陈月的全部类型是朋友的边,并根据目标点id从大到小排列,返回153个;6: 帮我查询被orders Order_434contain的goods;7: 找出名为徐轩的buyer,以及与其有关的seller,并返回徐轩的gender和这些seller的age;8: 查询id为137的订单有关的买家的朋友, 再查询和买家有关系的朋友;9: 查询和买家吴梅有buyer_look_goods关系的商品,以及和买家王思琪有buyer_consult_seller关系的卖家,将它们都返回;",
        "output": "查询语句为:1: match(a:orders where n.name=Order_369)-[e:partner]->{1,2}(b:goods) return b;2: match(a:buyer where a.name = '吴强')-[e:partner]->(b) return b order by e.targetId asc limit 134;3: match(a:goods where a.name='杯子')-[e]-(b:goods) return b.value;4: match(a:buyer) return a.salary group by a.id, a.age order by a.salary desc;5: match(a:seller where a.name = '陈月')-[e:friend]->(b) return b order by e.targetId desc limit 153;6: match(a:goods)<-[e:orders_contain_goods]-(b:orders where b.name='Order_434') return a, b;7: match(a:buyer where name = '徐轩')-[e]-(b:seller) return a.gender, b.age;8: match(a:orders where id = '137')-[e]-(b:buyer)-[e2:friend]->(c), (b:buyer)-[e3:friend]->(d) return a, b, c, d;9: match(a:buyer where a.name = '吴梅')-[e:buyer_look_goods]->(b:goods),(c:buyer where c.name = '王思琪')-[e2:buyer_consult_seller]->(d:seller)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出label为university的点;2: 帮我查询与公司Bilibili和腾讯都存在company_cooperate_university关系的点;3: 给出89个人数小于等于9971且价值在542到718之间的城市,根据人数从小到大排列;",
        "output": "查询语句为:1: match(a:university) return a;2: match(a:company where a.name='Bilibili')-[e:company_cooperate_university]->(b)<-[e2:company_cooperate_university]-(c:company where c.name='腾讯') return b;3: match(a:city where a.peopleNumber <= 9971 and (a.value BETWEEN 542 AND 718)) return a order by a.peopleNumber asc limit 89;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale',6824,74),('famale',7374,93)作为请求表数据,属性分别为gender,salary,id, 源点的id等于输入表id,给出height不为空或height为空,且id不为空的节点",
        "output": "with p as (select * from (VALUES('famale',6824,74),('famale',7374,93)) as t(gender,salary,id))MATCH (a WHERE a.id = p.id AND ((a.height IS NOT NULL OR a.height IS NULL) AND a.id IS NOT NULL)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和类型为user的点有creates关系的pullRequest,且和这些pullRequest有belong关系的repository,且和这些repository有has关系的user",
        "output": "match(a:user)-[e:creates]->(b:pullRequest)-[e2:belong]->(c:repository)-[e3:has]->(d:user) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与论坛推特有包含关系的3跳的环",
        "output": "match(a:forum where name = '推特')-[e:contain]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出孙思琪和陈轩之间共同拥有的人的关系节点，其中关系节点标签为'person'。",
        "output": "match(a:person where a.name='孙思琪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为部门,名为外科的点,返回这些点的名字,地址",
        "output": "match(a:department where a.name = '外科') return a.name, a.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有处方的权重除388的平均值",
        "output": "match(a:prescription) return AVG(a.weight / 388)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为102的点的id,name,value",
        "output": "match(a where a.id = 102) return a.id, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被用户孙思思创造的事项,和孙思思创造的事项",
        "output": "match(a:issue)<-[e:creates]-(b:user where name = '孙思思')-[e2:creates]->(c:issue) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件id不为空且name等于Order_226的节点",
        "output": "match(a where (a.id is not null) and a.name = 'Order_226') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出评论的三角的环,边类型为属于, 并返回这些点的id",
        "output": "match(a:comment)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 徐轩和赵轩是共同的朋友，有162个用户。",
        "output": "match(a:user where a.name='徐轩')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='赵轩') return b limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是事项的点,返回181个",
        "output": "match(a:issue) return a limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资减8357的值",
        "output": "a.salary - 8357",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与陈建国同事、与黄思思家人有关的个人节点，返回他们的身高、薪资、陈建国的性别和黄思思的性别。",
        "output": "match(a:person where a.name='陈建国')-[e:colleague]->(b:person)<-[e2:family]-(c:person where c.name='黄思思') return a.gender,b.height, b.salary,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,price,value分组,计算id的最大值对65取余的和",
        "output": "return SUM(MAX(a.id) % 65) group by a.name, a.price, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以129,108作为请求点id, 源点的id等于输入表id,请帮我查找源点名字为北京大学,边标签等于university_has_department,且源点id是86的边,返回这些边的源点id乘19的值",
        "output": "with p as (select * from (VALUES(129),(108)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '北京大学')) -[e:university_has_department WHERE e.srcId = 86 ]->(b) RETURN e.srcId * 19 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为190的医生创造的处方, 并将处方有关的药品的权重的最大值赋值给处方的名字, 接着查询处方的名字小于190的处方包含的药品",
        "output": "match(a:doctor where a.id = 190)-[e:creates]->(b:prescription) let b.name = MAX((b:prescription)-[e2]-(c:medicine) => c.weight) match(b:prescription where b.name < 190)-[e3:contain]->(d:medicine) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前31个类型为publish的边",
        "output": "match(a)-[e:publish]->(b) return e limit 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person王宏likes的person,以及likes这些person的person, 令person的salary等于person的gender的最大值,令person的id等于person的gender的平均值,令person(b)的height等于person(a)的gender, 返回person(a)的age,person(b)的name,person(c)的salary",
        "output": "match(a:person where name = '王宏')-[e:likes]->(b:person)<-[e2:likes]-(c:person) let c.salary = MAX(c.gender),let b.id = AVG(b.gender),let b.height = a.gender return a.age,b.name,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杜科和赵伟共同认识的人，类型为person节点。",
        "output": "match(a where a.name = '杜科')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '赵伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为film,名为我不是药神的点,返回这些点的name",
        "output": "match(a:film where a.name = '我不是药神') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和学生黄若涵有关的课程,称为X,再帮我查询和这个X有关联的其他部门,以及和X有关联的教师",
        "output": "match(a:student where a.name = '黄若涵')-[e]-(b:course), (b:course)-[e2]-(c:department),(b:course)-[e3]-(d:teacher) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和名为王强的学生有朋友关系,或有朋友的朋友关系的课程",
        "output": "match(a:student where n.name=王强)-[e:friend]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为喜欢,且目标点id是157或f1为false的边",
        "output": "match(a)-[e:likes where e.targetId = 157 or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与李思思和郑伟有共同认识的人节点",
        "output": "match(a where a.name = '李思思')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '郑伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与person有关系的person节点,且person节点的age在89到99之间,并返回这些person的id减74的平均值,以及person的salary的最大值乘9504的值",
        "output": "match(a:person)-[e]->(b:person where (b.age BETWEEN 89 AND 99)) return AVG(b.id - 74), MAX(b.salary) * 9504",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2029-03-07,71,299),(2032-08-01,81,454),(2006-11-13,44,419)作为请求表数据,属性分别为createTime,id,peopleNumber, 源点的peopleNumber等于输入表peopleNumber,查询源点id在27到41之间,名字是Post_297,或创建时间等于2013年06月16日,边类型为post_has_tag,且f1不等于true的边,返回这些边的权重乘161.69的值",
        "output": "with p as (select * from (VALUES(2029-03-07,71,299),(2032-08-01,81,454),(2006-11-13,44,419)) as t(createTime,id,peopleNumber))MATCH (a WHERE a.peopleNumber = p.peopleNumber AND (a.id BETWEEN ASYMMETRIC 27 AND 41 AND a.name = 'Post_297' OR a.createTime = '2013-06-16')) -[e:post_has_tag WHERE e.f1 <> TRUE ]->(b) RETURN e.weight * 161.69 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与武汉有包含关系且与微软有合作关系的大学，返回它们的价值、ID、武汉的名称和微软的价值。",
        "output": "match(a:city where a.name='武汉')-[e:contain]->(b:university)<-[e2:cooperate]-(c:company where c.name='微软') return a.name,b.value, b.id,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为历史的标签,以及与其有关的评论,并返回历史的名字和这些评论的创建时间",
        "output": "match(a:tag where name = '历史')-[e]-(b:comment) return a.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,gender,height, 数据为(67,'famale',176),(14,'male',157)的子查询作为输入表, 以属性height作为相等条件,请帮我找出名为张若涵的点relates的person",
        "output": "with p as (select * from (VALUES(67,'famale',176),(14,'male',157)) as t(id,gender,height))MATCH (a WHERE a.height = p.height AND (a.name = '张若涵')) -[e:relates ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与 person 节点关联的 person 节点，按 height、salary、name 分组，返回每个组的高度、薪资和名称。",
        "output": "match(a:person)-[e:friend]-(b:person) return b.height, b.salary, b.name group by b.height, b.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找大学物理课程的课时",
        "output": "match(a:course where a.name = '大学物理') return a.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与杜红存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的id",
        "output": "match(a where a.name = '杜红')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表90, 以属性id作为相等条件,找出源点名字为陈若涵或id在22到28之间,边标签为person_lover_person,且满足条件f1等于false或f1是false,且目标点id不为空的边,返回这些边的weight的求和值减权重的值",
        "output": "with p as (select * from (VALUES(90)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '陈若涵' OR a.id BETWEEN ASYMMETRIC 22 AND 28)) -[e:person_lover_person WHERE (e.f1 = FALSE OR e.f1 = FALSE) AND e.targetId IS NOT NULL ]->(b) RETURN SUM(e.weight) - e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点标签为公司,边标签为合作的边,返回这些边的目标点id加目标点id的值,和targetId的平均值减77的平均值",
        "output": "match(a:company)-[e:cooperate]->(b) return e.targetId + e.targetId, AVG(AVG(e.targetId) - 77)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 查找以creates关系关联了orders Order_414的buyer;2: 帮我查询全部源点id小于75,目标点name是香蕉,name等于杯子,且类型为orders_contain_goods的边;3: 请帮我查找buyer王雪的全部friend,的targetId减95的个数;4: 请帮我找出被买家陈雪取消的订单;5: 帮我查询以咨询关系关联了卖家张红的买家;6: 给出类型为buyer的所有点,并根据height从小到大排列;7: 请帮我找出所有卖家以id,年龄,性别分组的薪资, 根据薪资从大到小排序;",
        "output": "查询语句为:1: match(a:orders where a.name='Order_414')<-[e:buyer_creates_orders]-(b:buyer) return b;2: match(a where a.id < 75)-[e:orders_contain_goods]->(b where b.name = '香蕉' and b.name = '杯子') return e;3: match(a:buyer where a.name= '王雪')-[e:friend]->(b) return COUNT(e.targetId - 95);4: match(a:orders)<-[e:buyer_cancel_orders]-(b:buyer where b.name='陈雪') return a, b;5: match(a:seller where a.name='张红')<-[e:buyer_consult_seller]-(b:buyer) return b;6: match(a:buyer) return a order by a.height asc;7: match(a:seller) return a.salary group by a.id, a.age, a.gender order by a.salary desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person杜建国之间有喜欢关系的person",
        "output": "match(a:person where a.name='杜建国')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询publisher publish的book,返回其源点的height的和减198减70的求和值,以及目标点的id除7的值;2: 请帮我找出所有与作家王梅有关系的书的创建时间;3: 请帮我找出和作家Bob之间有author_write_book关系的书;4: 请帮我查找83个与悲惨世界和呐喊都存在关系的reader节点;5: 给出和读者赵科有关的作家,再给出和赵科reader_likes_book的其他书,返回它们;6: 请帮我找出标签为publisher_publish_book,并且满足条件srcId加srcId小于等于107.73的边;7: 给出前102个id小于9的书;",
        "output": "查询语句为:1: match(a:publisher)-[e:publisher_publish_book]->(b:book) return SUM(SUM(a.height) - 198 - 70), b.id / 7;2: match(a:author where a.name='王梅')-[e]-(b:book) return b.createTime;3: match(a:author where a.name='Bob')-[e:author_write_book]->(b:book) return b;4: match(a where a.name='悲惨世界')-[e]->(b:reader)<-[e2]-(c where c.name='呐喊') return b limit 83;5: match(a:reader where a.name = '赵科')-[e]-(b:author), (a:reader)-[e2:reader_likes_book]->(c:book) return a, b, c;6: match(a)-[e:publisher_publish_book where e.srcId + e.srcId <= 107.73]->(b) return e;7: match(a:book where a.id < 9) return a limit 102;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于雇佣,且f1不是true或权重是183的边",
        "output": "match(a)-[e:employee where e.f1 <> true or e.weight = 183]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点wordCount小于等于104,目标点wordCount大于11或createTime是2031年08月12日或id大于94,且类型是refers的边",
        "output": "match(a where a.wordCount <= 104)-[e:refers]->(b where b.wordCount > 11 or b.createTime = '2031-08-12' or b.id > 94) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,age, 数据为('famale',165,19),('male',167,71), 以属性height作为相等条件,请帮我找出前120个label为person_apply_loan的边",
        "output": "with p as (select * from (VALUES('famale',165,19),('male',167,71)) as t(gender,height,age))MATCH (a WHERE a.height = p.height) -[e:person_apply_loan ]->(b) RETURN e LIMIT 120",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与film有关联的名为周建聪的person节点，然后返回这些节点中height除以最大height后的结果，以及salary加上8483的总和。",
        "output": "match(a:film)-[e]->(b:person where b.name = '周建聪') return MAX(b.height / b.height), SUM(b.salary + 8483)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回71个名为王梅的点咨询的类型是卖家的节点,且其id为空",
        "output": "match(a where a.name='王梅')-[e:consult]->(b:seller where (b.id is null)) return b limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以属于关系关联了仓库Flink的合并请求",
        "output": "match(a:repository where a.name='Flink')<-[e:belong]-(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出拥有教师张思思的部门,和这些部门拥有的教师",
        "output": "match(a:teacher where name = '张思思')<-[e:has]-(b:department)-[e2:has]->(c:teacher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出支付person陈强的person,和这些person支付的person",
        "output": "match(a:person where name = '陈强')<-[e:pay]-(b:person)-[e2:pay]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和company谷歌之间有creates关系的software",
        "output": "match(a:company where a.name='谷歌')-[e:creates]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找杜国强和何思琪之间存在共同提交点的内容。",
        "output": "match(a:person where a.name='杜国强')-[e:commits]->(b)<-[e2:commits]-(c:person where c.name='何思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和department体育学院有关系的course或department或student,返回这些点的name,height,salary",
        "output": "match(a:department where a.name='体育学院')-[e]-(b:course | department | student) return b.name, b.height, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从医生徐若涵出发，经过属于类型的边，走1到3度到达部门点。",
        "output": "match(a:doctor where a.name='徐若涵')-[e:belong]->{1,3}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以763,762,894,613,994作为请求点id, 以属性id作为相等条件,帮我查询前174个满足条件年龄为空或薪资小于等于50或身高不为空的编辑",
        "output": "with p as (select * from (VALUES(763),(762),(894),(613),(994)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (a.age IS NULL OR a.salary <= 50 OR a.height IS NOT NULL)) RETURN a LIMIT 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person马伟认识的person,以及关联这些person的person",
        "output": "match(a:person where name = '马伟')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age减60的平均值",
        "output": "AVG(a.age - 60)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出澳大利亚这个国家所包含的城市节点",
        "output": "match(a:country where a.name = '澳大利亚')-[e:contain]->(b:city)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和author王若涵之间有write关系的book",
        "output": "match(a:author where a.name='王若涵')-[e:write]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和label为公司的点有属于关系的城市,以及和这些城市有包含关系的大学,以及和这些大学有合作关系的公司",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:university)-[e3:cooperate]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 找出所有医生的朋友,或其朋友的朋友;2: 查询所有id为177的药品关联的处方,和以创造关系关联了这些处方的其他医生;3: 给出doctor李科的所有类型为relation的边,并根据weight从大到小排列,返回31个;4: 帮我查询源点id在9到53之间,边标签等于patient_accept_prescription,且f1等于false或f1是false或targetId对199取余等于58的边,返回这些边的f0减555的值;5: 给出所有department以address分组的id, 根据id升序排序;6: 返回和patient赵国强有patient_accept_prescription关系的prescription,再返回以patient_accept_prescription关系关联了赵国强的prescription;7: 返回height在151到189之间或gender为male或name不是何建国的节点;8: 帮我查询名为Prescription_334的prescription;9: 查找187个名为耳鼻喉科的点拥有的label为医生的节点,且节点性别为male,身高在162到195之间;",
        "output": "查询语句为:1: match(a:doctor)-[e:friend]->{1,2}(b) return b;2: match(a:medicine where a.id = '177')-[e]-(b:prescription)<-[e2:doctor_creates_prescription]-(c:doctor) return b,c;3: match(a:doctor where a.name = '李科')-[e:relation]->(b) return b order by e.weight desc limit 31;4: match(a where (a.id BETWEEN 9 AND 53))-[e:patient_accept_prescription where e.f1 = false or e.f1 = false or e.targetId % 199 = 58]->(b) return e.f0 - 555;5: match(a:department) return a.id group by a.address order by a.id asc;6: match(a:patient where a.name = '赵国强')-[e:patient_accept_prescription]->(b:prescription),(a:patient where a.name = '赵国强')<-[e2:patient_accept_prescription]-(c:prescription)return a, b, c;7: match(a where (a.height BETWEEN 151 AND 189) or a.gender = 'male' or a.name <> '何建国') return a;8: match(a:prescription where a.name = 'Prescription_334') return a;9: match(a where a.name='耳鼻喉科')-[e:department_has_doctor]->(b:doctor where b.gender = 'male' and (b.height BETWEEN 162 AND 195)) return b limit 187;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点满足条件gender是male且age为空,或salary在1321到2299之间,目标点满足条件height在163到189之间且name等于马科,或height不为空,且类型为colleague的边",
        "output": "match(a where (a.gender = 'male' and (a.age is null)) or (a.salary BETWEEN 1321 AND 2299))-[e:colleague]->(b where ((b.height BETWEEN 163 AND 189) and b.name = '马科') or (b.height is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为推特的论坛,以及与其有关的论坛,并返回推特的创建时间和这些论坛的价值",
        "output": "match(a:forum where name = '推特')-[e]-(b:forum) return a.createTime, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person周宏有关，且与loan defaultName有关系的account节点。",
        "output": "match(a:person where a.name='周宏')-[e:own]-(b:account)-[e2:repay]-(c:loan where c.name='defaultName') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为person的点,并根据性别降序排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查询person的2跳以内的环;2: 帮我查询所有与person孙思琪有关系的person的name;3: 查找person马月的全部标签为伙伴的边,并根据源点id从大到小排列,返回22个;4: 返回184个与徐强和韩红都存在关系的person节点;5: 找出前164个label为person_pay_person的边;6: 帮我查询所有person的相关者,或其相关者的相关者;",
        "output": "查询语句为:1: match(a:person)->{0,1}(b)->(a) return a.id, b.id as b_id;2: match(a:person where a.name='孙思琪')-[e]-(b:person) return b.name;3: match(a:person where a.name = '马月')-[e:partner]->(b) return b order by e.srcId desc limit 22;4: match(a where a.name='徐强')-[e]->(b:person)<-[e2]-(c where c.name='韩红') return b limit 184;5: match(a)-[e:person_pay_person]->(b) return e limit 164;6: match(a:person)-[e:relation]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以529,767作为请求点id, 源点的id等于输入表id,找出与名为巴黎和北京的点共同包含的,类型是大学的节点",
        "output": "with p as (select * from (VALUES(529),(767)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '巴黎')) -[e:city_contain_university ]->(b:university) <-[e2:city_contain_university ]-(c WHERE c.name = '北京') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与纽约有关的公司和与澳大利亚有关的城市，并返回它们。",
        "output": "match(a:city where a.name = '纽约')-[e:contain]->(b:company),(c:country where c.name = '澳大利亚')-[e2:contain]->(d:city) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询company谷歌apply的loan, 令loan的scale等于company的value的和, 返回company的peopleNumber, loan的amount",
        "output": "match(a:company where a.name='谷歌')-[e:apply]->(b:loan) let b.scale = SUM(a.value) return a.peopleNumber,b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为内科的点的,薪资不为空的朋友,返回这些朋友的id,和边的目标点id,源点id",
        "output": "match(a where a.name='内科')-[e:friend]->(b where (b.salary is not null)) return b.id,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,age,gender, 数据为('何思思',38,'male'),('郑国强',84,'famale'),('周红',5,'famale')的子查询作为输入表, 源点的name等于输入表name,请帮我找出department文学院 has的student,返回student selects的course的value减968的值 ",
        "output": "with p as (select * from (VALUES('何思思',38,'male'),('郑国强',84,'famale'),('周红',5,'famale')) as t(name,age,gender))MATCH (a:department WHERE a.name = p.name AND (name = '文学院')) -[e:department_has_student ]->(b:student) -[e2:student_selects_course ]->(c:course) RETURN c.value - 968 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询'三体'这本书中，refers关系的partner。",
        "output": "match(a:book where a.name='三体')-[e:refers]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点label为person,边label为观看,并且f0在743到848之间的边",
        "output": "match(a:person)-[e:watch where (e.f0 BETWEEN 743 AND 848)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点标签为作家,边标签为认识,并且满足条件源点id大于135或源点id减158小于等于134,且权重大于196.94的边",
        "output": "match(a:author)-[e:knows where (e.srcId > 135 or e.srcId - 158 <= 134) and e.weight > 196.94]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为172的country有关的country的friend, 再请帮我找出和country有关系的partner",
        "output": "match(a:country where id = 172)-[e]-(b:country)-[e2:friend]->(c), (b:country)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出张强教授的课程，以及与张强有教关系的课程。",
        "output": "match(a:teacher where a.name = '张强')-[e:teach]->(b:course),(a:teacher where a.name = '张强')<-[e2:teach]-(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询张梅的朋友的朋友",
        "output": "match(a:person where a.name='张梅')-[e:friend]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询点标签为'person'，名称中包含'何红'的点的性别和名称。",
        "output": "match(a:person where a.name = '何红') return a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我按照大学ID、价值、名称进行分组，并以价值从大到小排序？",
        "output": "match(a:university) return a.value group by a.id, a.value, a.name order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person李轩和孙雪都存在watch关系的点",
        "output": "match(a:person where a.name='李轩')-[e:watch]->(b)<-[e2:watch]-(c:person where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型为部门、边类型为拥有的边，然后计算这些边的权重对198.14取余的和以及权重减去权重的平均值。",
        "output": "match(a:department)-[e:has]->(b) return SUM(e.weight % 198.14), AVG(e.weight - e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资除5092的最大值",
        "output": "MAX(a.salary / 5092)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询标签等于订单,名为Order_450的点,返回这些点的名字",
        "output": "match(a:orders where a.name = 'Order_450') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询北京大学的点属于的城市,然后查询北京大学被包含的城市,一起返回",
        "output": "match(a where a.name = '北京大学')-[e:belong]->(b:city),(a where a.name = '北京大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 返回源点类型是person,边类型是person_family_person,以及srcId在5到146之间的边;2: 返回person李思思的label为parent的边,并根据weight降序排列,返回157个;3: 给出和person有关联的person节点,并根据其名字分组,返回名字,以及age的平均值减66的值;",
        "output": "查询语句为:1: match(a:person)-[e:person_family_person where (e.srcId BETWEEN 5 AND 146)]->(b) return e;2: match(a:person where a.name = '李思思')-[e:person_parent_person]->(b) return b order by e.weight desc limit 157;3: match(a:person)-[e:person_parent_person]-(b:person) return b.name, AVG(b.age) - 66 group by b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 找出以包含关系关联了商品桌子的订单;2: 查询和买家李月有3度或4度关系的买家;3: 查找全部和buyer杜伟之间有buyer_consult_seller关系的seller;4: 查询类型为订单的点,返回48个;5: 找出以look关系关联了goods香蕉的buyer;6: 返回194个名为李梅的点取消的label为订单的节点,且其名字不等于Order_424,id不为空;7: 找出与买家张思琪和徐红都存在buyer_creates_orders关系的点;8: 查找label为orders的点,返回192个;",
        "output": "查询语句为:1: match(a:goods where a.name='桌子')<-[e:orders_contain_goods]-(b:orders) return b;2: match(a:buyer where a.name='李月')-[e]->{3,4}(b:buyer) return b;3: match(a:buyer where a.name='杜伟')-[e:buyer_consult_seller]->(b:seller) return b;4: match(a:orders) return a limit 48;5: match(a:goods where a.name='香蕉')<-[e:buyer_look_goods]-(b:buyer) return b;6: match(a where a.name='李梅')-[e:buyer_cancel_orders]->(b:orders where b.name <> 'Order_424' and (b.id is not null)) return b limit 194;7: match(a:buyer where a.name='张思琪')-[e:buyer_creates_orders]->(b)<-[e2:buyer_creates_orders]-(c:buyer where c.name='徐红') return b;8: match(a:orders) return a limit 192;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与用户'孙梅'有关，且包含标签'其他'的帖子节点。",
        "output": "match(a:user where a.name='孙梅')-[e:likes]-(b:post)-[e2:has]-(c:tag where c.name='其他') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "权重除599减982的最小值",
        "output": "MIN(a.weight / 599 - 982)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与doctor赵思琪有关系的doctor, 返回和这些doctor有关联的patient的,height乘height的个数",
        "output": "match(a:doctor where a.name= '赵思琪')-[e]-(b:doctor)-[e2]-(c:patient) return COUNT(c.height * c.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为王红的点publish的book",
        "output": "match(a where a.name='王红')-[e:publish]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出所有与李国强存在同事关系的 people,找出这些人中男性和女性同事的分布情况。",
        "output": "match(a where a.name = '李国强')-[e:colleague]->(b:person)-[e2:colleague]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为Geaflow123的点的,权重乘权重等于62,金额在2536.30到8732.43之间的相关者,返回这些相关者的id,和边的源点id,f1",
        "output": "match(a where a.name='Geaflow123')-[e:relation]->(b where b.weight * b.weight = 62 and (b.amount BETWEEN 2536.30 AND 8732.43)) return b.id,e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前55个满足条件price小于1390.93且value在594到940之间的orders",
        "output": "match(a:orders where a.price < 1390.93 and (a.value BETWEEN 594 AND 940)) return a limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height,gender,age分组,计算id减94的值",
        "output": "return a.id - 94 group by a.height, a.gender, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以991,956,680,54作为请求点id, 以属性id作为相等条件,给出评论Comment_100的所有label为伙伴的边,并根据目标点id升序排列,返回28个",
        "output": "with p as (select * from (VALUES(991),(956),(680),(54)) as t(id)) MATCH (a:comment WHERE a.id = p.id AND (a.name = 'Comment_100')) -[e:partner ]->(b) RETURN b ORDER BY e.targetId LIMIT 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person黄梅belong的company, 令person的id等于company的peopleNumber减869, 返回person的name, company的name",
        "output": "match(a:person where a.name='黄梅')-[e:belong]->(b:company) let a.id = b.peopleNumber - 869 return a.name,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 何科和徐国强认识吗？",
        "output": "match(a:person where a.name='何科')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='徐国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询46个创建时间不等于2025年11月22日,名字等于ISSUE-345,名字不是ISSUE-441的事项,根据id从小到大排列",
        "output": "match(a:issue where a.createTime <> '2025-11-22' and a.name = 'ISSUE-345' and a.name <> 'ISSUE-441') return a order by a.id asc limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与贷款loan_40有关系的贷款, 返回和这些贷款有关联的贷款的,权重加461的最小值",
        "output": "match(a:loan where a.name= 'loan_40')-[e]-(b:loan)-[e2]-(c:loan) return MIN(c.weight + 461)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找账号Faker还款的贷款,以及申请这些贷款的公司, 令账号的上次登录时间等于账号的名字的最小值,令公司的id等于贷款的id的最小值乘90除231, 返回账号的是否冻结,贷款的金额,公司的名字",
        "output": "match(a:account where name = 'Faker')-[e:repay]->(b:loan)<-[e2:apply]-(c:company) let a.lastLoginTime = MIN(a.name),let c.id = MIN(b.id) * 90 / 231 return a.isBlock,b.amount,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有与某人相关的贷款，以及这些贷款与哪些公司有关联。",
        "output": "match(a:person where a.id = '19')-[e]-(b:loan)<-[e2:apply]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 forum 关联的 post 节点，按照 id、lang、value 进行分组。",
        "output": "match(a:forum)-[e:contain]-(b:post) return b.id, b.lang, b.value group by b.id, b.lang, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找寻《少年足球》电影中伙伴的相关者。",
        "output": "match(a:film where a.name='少年足球')-[e:friend]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前158个age不等于70,name不是赵强,salary不为空的person",
        "output": "match(a:person where a.age <> 70 and a.name <> '赵强' and (a.salary is not null)) return a limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有由作家作为源点，认识作为边类型的边。然后返回这些边的权重之和、权重之积以及源点ID除以40的余数。",
        "output": "match(a:author)-[e:knows]->(b) return COUNT((e.weight + e.weight) * 14), e.srcId % 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为赵科的,身高不等于183的朋友,返回这些朋友的年龄,和边的权重",
        "output": "match(a where a.name='赵科')-[e:friend]->(b where b.height <> 183) return b.age,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询Comment_184所属的电影和创建它的个人，并将它们一起返回。",
        "output": "match(a where a.name = 'Comment_184')-[e:belong]->(b:film),(a where a.name = 'Comment_184')<-[e2:creates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与土木工程系有关的教师，以及与教师周宏有关的课程。",
        "output": "match(a:department where a.name = '土木学院')-[e:has]->(b:teacher),(c:teacher where c.name = '周宏')-[e2:teach]->(d:course) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被作家张宏认识的作家,和张宏认识的作家",
        "output": "match(a:author)<-[e:knows]-(b:author where name = '张宏')-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 找出全部和名为杜建国的person有朋友关系,或有朋友的朋友关系的person;2: 给出类型是person_likes_person,且f0小于等于736的边;3: 给出全部名为李强的,性别不是famale,id的平均值不是3185的相关者,返回这些相关者的名字,和边的目标点id,源点id;4: 帮我查询名为陈国强的点支付的person;",
        "output": "查询语句为:1: match(a:person where n.name=杜建国)-[e:friend]->{1,2}(b:person) return b;2: match(a)-[e:person_likes_person where e.f0 <= 736]->(b) return e;3: match(a where a.name='李强')-[e:relation]->(b where b.gender <> 'famale' and AVG(b.id) <> 3185) return b.name,e.targetId, e.srcId;4: match(a where a.name='陈国强')-[e:person_pay_person]->(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找所有从人源点指向人目标点且标签为'parent'的边。",
        "output": "match(a:person)-[e:parent]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为defaultName,且label为贷款的点，并返回它们的金额和权重。",
        "output": "match(a:loan where a.name = 'defaultName') return a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点id不等于17或salary为6736,且id小于88,边标签等于publish,且满足条件srcId大于等于35或f1不等于false的边,返回这些边的f0加965的最小值",
        "output": "match(a where (a.id <> 17 or a.salary = 6736) and a.id < 88)-[e:publish where e.srcId >= 35 or e.f1 <> false]->(b) return MIN(e.f0 + 965)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以relates关系关联了person周强的person",
        "output": "match(a:person where a.name='周强')<-[e:relates]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点类型是公司,目标点类型是person,类型是person或公司或软件的边",
        "output": "match(a:company)-[e:person | company | software]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从post Post_174出发,经过标签为has的边,走3度到达的tag点",
        "output": "match(a:post where a.name='Post_174')-[e:has]->{3,3}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回height大于180且height为39且gender不是male的节点",
        "output": "match(a where a.height > 180 and a.height = 39 and a.gender <> 'male') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查找与department放射科和呼吸科都存在department_has_doctor关系的点;2: 查询全部与prescription有关系的patient节点,且patient节点的name不是马建聪,并返回这些点的height的最大值除190的值,以及age的最小值减35的值;3: 帮我查询doctor的三角的环,边标签为doctor_belong_department, 并返回这些点的id;4: 请帮我找出和医生有关联的病人节点,并根据其id,身高,性别分组,返回id,身高,性别,以及薪资加薪资的求和值;5: 查询部门外科的标签为相关者的边,并根据源点id升序排列,返回154个;6: 查找与名为杜思琪和吴科的点共同belong的,类型为department的节点;7: 请帮我找出所有源点类型为病人,目标点类型为处方,类型为patient_accept_prescription的边;8: 返回所有源点标签为doctor,边标签为doctor_creates_prescription的边,返回这些边的targetId加43的数量,和f0乘959的值;",
        "output": "查询语句为:1: match(a:department where a.name='放射科')-[e:department_has_doctor]->(b)<-[e2:department_has_doctor]-(c:department where c.name='呼吸科') return b;2: match(a:prescription)-[e]->(b:patient where b.name <> '马建聪') return MAX(b.height) / 190, MIN(b.age) - 35;3: match(a:doctor)-[e:doctor_belong_department]->(b)-[e2:doctor_belong_department]-(c)->(a) return a,b.id as b_id,c.id as c_id;4: match(a:doctor)-[e:doctor_diagnose_patient]-(b:patient) return b.id, b.height, b.gender, SUM(b.salary + b.salary) group by b.id, b.height, b.gender;5: match(a:department where a.name = '外科')-[e:relation]->(b) return b order by e.srcId asc limit 154;6: match(a where a.name = '杜思琪')-[e:doctor_belong_department]->(b:department)<-[e2:doctor_belong_department]-(c where c.name = '吴科') return b;7: match(a:patient)-[e:patient_accept_prescription]->(b:prescription) return e;8: match(a:doctor)-[e:doctor_creates_prescription]->(b) return COUNT(e.targetId + 43), e.f0 * 959;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 计算所有帖子的字数乘字数的最大值;2: 找出前3个label为user_likes_post的边;3: 查找从post Post_372出发,经过label为post_has_tag的边,走2跳或3跳到达的tag点;4: 帮我查询id为167的forum关联的person,和以contain关系关联了这些person的其他forum;5: 请帮我找出和用户何月有1到3跳关系的用户;6: 请帮我找出95个名字不是科幻的标签,根据名字从大到小排列;7: 返回全部源点类型是论坛,目标点类型是person,类型是forum_contain_person的边;8: 查询类型是person的全部点,并根据salary升序排列;9: 返回63个id的最大值等于5150且性别不等于famale的person,根据薪资从大到小排列;",
        "output": "查询语句为:1: match(a:post) return MAX(a.wordCount * a.wordCount);2: match(a)-[e:user_likes_post]->(b) return e limit 3;3: match(a:post where a.name='Post_372')-[e:post_has_tag]->{2,3}(b:tag) return b;4: match(a:forum where a.id = '167')-[e]-(b:person)<-[e2:forum_contain_person]-(c:forum) return b,c;5: match(a:user where a.name='何月')-[e]->{1,3}(b:user) return b;6: match(a:tag where a.name <> '科幻') return a order by a.name desc limit 95;7: match(a:forum)-[e:forum_contain_person]->(b:person) return e;8: match(a:person) return a order by a.salary asc;9: match(a:person where MAX(a.id) = 5150 and a.gender <> 'famale') return a order by a.salary desc limit 63;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到45个杜宏和孙梅的共同作家朋友。",
        "output": "match(a:author where a.name='杜宏')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='孙梅') return b limit 45",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前20个标签为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与名为'defaultName'和'defaultName1'的节点共同存款的类型为'account'的节点。",
        "output": "match(a where a.name = 'defaultName')-[e:deposit]->(b:account)<-[e2:deposit]-(c where c.name = 'defaultName1') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出14个人，杜科和韩思思，他们共同拥有家庭。",
        "output": "match(a:person where a.name='杜科')-[e:family]->(b)<-[e2:family]-(c:person where c.name='韩思思') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询黄科和郑梅这两个用户，他们之间共同拥有的partner节点名单。",
        "output": "match(a:user where a.name='黄科')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='郑梅') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马若涵认识的人",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='马若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为韩科和张建聪的点共同关联的,标签为person的节点",
        "output": "match(a where a.name = '韩科')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '张建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有医生（type为doctor）中名为周思思的点的id、name和height。",
        "output": "match(a:doctor where a.name = '周思思') return a.id, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 'University of Tsinghua, in Beijing, contains a company.'",
        "output": "match(a:university where a.name = '清华大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与post Post_376有关系的tag的name",
        "output": "match(a:post where a.name='Post_376')-[e]-(b:tag) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出年龄小于48岁、薪资在4647到5579之间的医生所开的处方，并列出这些处方中包含的药品名称。",
        "output": "match(a:doctor where a.age < 48 and (a.salary BETWEEN 4647 AND 5579))-[e:creates]->(b:prescription)-[e2:contain]->(c:medicine) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问周若涵认识了多少个其他人士？",
        "output": "match(a:person where a.name='周若涵')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前144个满足条件上次登录时间不是2005年04月25日或是否冻结不等于false,且价值不是714的账号",
        "output": "match(a:account where (a.lastLoginTime <> '2005-04-25' or a.isBlock <> false) and a.value <> 714) return a limit 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与department外科有has关系且与department传染部有belong关系的医生节点的height,age,name,以及department外科的address和department传染部的name。",
        "output": "match(a:department where a.name='外科')-[e:has]->(b:doctor)<-[e2:belong]-(c:department where c.name='传染部') return a.address,b.height, b.age, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和论坛百度贴吧之间有包含关系的帖子",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除76的最大值",
        "output": "MAX(a.id / 76)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回student以id,salary,height分组的name, 根据name从大到小排序",
        "output": "match(a:student) return a.name group by a.id, a.salary, a.height order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部和大学华中科技大学之间有university_has_department关系的部门",
        "output": "match(a:university where a.name='华中科技大学')-[e:university_has_department]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有从买家源点到订单目标点，且类型为创建的边。",
        "output": "match(a:buyer)-[e:creates]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为lang,openSource,id, 数据为('java',true,27), 以属性lang作为相等条件,查询company的1度以内的环",
        "output": "with p as (select * from (VALUES('java',true,27)) as t(lang,openSource,id))MATCH (a:company WHERE a.lang = p.lang) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签等于处方的点,返回22个",
        "output": "match(a:prescription) return a limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找名为徐宏的person",
        "output": "match(a:person where a.name = '徐宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出city伦敦的类型是partner的边,并根据srcId从大到小排列,返回156个",
        "output": "match(a:city where a.name = '伦敦')-[e:partner]->(b) return b order by e.srcId desc limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点类型为user,边类型为user_creates_issue的边,返回这些边的f0的求和值减990减115乘68对129取余的值,和targetId乘196的值",
        "output": "match(a:user)-[e:user_creates_issue]->(b) return (SUM(e.f0) - 990 - 115) * 68 % 129, e.targetId * 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从郑轩开始，沿着家庭类型的边走1到3度，可以到达哪里？",
        "output": "match(a:person where a.name='郑轩')-[e:family]->{1,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 请帮我查找类型为forum_contain_person,并且满足条件f1等于true的边;2: 帮我查询和user马若涵之间有user_likes_post关系的post;3: 计算所有person的身高减身高的和;4: 查询名为Post_417的post,以及与其有关的post,并返回Post_417的createTime和这些post的createTime;",
        "output": "查询语句为:1: match(a)-[e:forum_contain_person where e.f1 = true]->(b) return e;2: match(a:user where a.name='马若涵')-[e:user_likes_post]->(b:post) return b;3: match(a:person) return SUM(a.height - a.height);4: match(a:post where name = 'Post_417')-[e]-(b:post) return a.createTime, b.createTime;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为腾讯的点合作的全部大学,并对这些大学的名字进行求和",
        "output": "match(a where a.name='腾讯')-[e:cooperate]->(b:university) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找作家何红撰写的书,以及喜欢这些书的读者",
        "output": "match(a:author where name = '何红')-[e:write]->(b:book)<-[e2:likes]-(c:reader) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回论坛的三角的环,边标签等于包含, 并返回这些点的id",
        "output": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 查找62个与韩雪和韩建国都存在关系的买家节点;2: 返回所有名为韩建国的,name等于电脑的friend,返回这些friend的value,和边的f1;3: 找出与名为赵月和陈红的点共同创造的,类型为订单的节点;4: 帮我查询名为徐建国的卖家;",
        "output": "查询语句为:1: match(a where a.name='韩雪')-[e]->(b:buyer)<-[e2]-(c where c.name='韩建国') return b limit 62;2: match(a where a.name='韩建国')-[e:friend]->(b where b.name = '电脑') return b.value,e.f1;3: match(a where a.name = '赵月')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c where c.name = '陈红') return b;4: match(a:seller where a.name = '徐建国') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找104个与ISSUE-483和ISSUE-224都存在关系的合并请求节点",
        "output": "match(a where a.name='ISSUE-483')-[e]->(b:pullRequest)<-[e2]-(c where c.name='ISSUE-224') return b limit 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为英国的点的,id大于等于11的相关者,返回这些相关者的id,和边的权重,f0",
        "output": "match(a where a.name='英国')-[e:relation]->(b where b.id >= 11) return b.id,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与ID为71的教师相关的教师，再返回这些教师的关系人。",
        "output": "match(a:teacher where id = '71')-[e]-(b:teacher)-[e2:relation]->(c), (b:teacher)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前140个年龄为空的person",
        "output": "match(a:person where (a.age is null)) return a limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找MySQL使用的软件。",
        "output": "match(a:software)<-[e:uses]-(b:software where b.name='Mysql') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与徐轩和黄建聪有关联的公司的节点，并返回它们的ID和人数。",
        "output": "match(a:person where a.name='徐轩')-[e]->(b:company)<-[e2]-(c:person where c.name='黄建聪') return b.id, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对id取余的值",
        "output": "a.id % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是买家的所有点,并根据薪资降序排列",
        "output": "match(a:buyer) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,gender,salary, 数据为(13,'male',4256),(69,'famale',2735),(0,'male',8787)的子查询作为输入表, 源点的salary等于输入表salary,帮我查询和person Amily有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person",
        "output": "with p as (select * from (VALUES(13,'male',4256),(69,'famale',2735),(0,'male',8787)) as t(id,gender,salary))MATCH (a:person WHERE a.salary = p.salary AND (a.name = 'Amily')) -[e ]-(b:person) , (b:person) -[e2 ]-(c:person) , (b:person) -[e3 ]-(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和部门传染部之间有拥有关系的医生",
        "output": "match(a:department where a.name='传染部')-[e:has]->(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,年龄分组,计算年龄对94取余的最小值",
        "output": "return MIN(a.age % 94) group by a.name, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "level对3取余的值",
        "output": "a.level % 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点类型为账号、边类型为还款的边，返回这些边的权重除以151.67的结果以及源点id与目标点id之差。",
        "output": "match(a:account)-[e:repay]->(b) return e.weight / 151.67, e.srcId - e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出华为创建的软件，以及华为所属的团队或个人，返回两者。",
        "output": "match(a where a.name = '华为')-[e:creates]->(b:software),(a where a.name = '华为')<-[e2:belong]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点年龄小于56,边标签等于发布,且f0是589,targetId的最大值减52的最小值小于176.82,或权重为空的边,返回这些边的权重对权重取余的平均值",
        "output": "match(a where a.age < 56)-[e:publish where (e.f0 = 589 and MIN(MAX(e.targetId) - 52) < 176.82) or (e.weight is null)]->(b) return AVG(e.weight % e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表378,624,794,612,532, 以属性id作为相等条件,查询全部源点类型为作家,边类型为author_knows_author的边,返回这些边的f0加f0的数量,和f0加f0的值",
        "output": "with p as (select * from (VALUES(378),(624),(794),(612),(532)) as t(id)) MATCH (a:author WHERE a.id = p.id) -[e:author_knows_author ]->(b) RETURN COUNT(e.f0 + e.f0), e.f0 + e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于publisher,边标签等于publish的边,返回这些边的srcId乘142的个数,和f0的最小值减564的平均值",
        "output": "match(a:publisher)-[e:publish]->(b) return COUNT(e.srcId * 142), AVG(MIN(e.f0) - 564)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与赵建聪相关的人员，以及赵建聪喜欢的其他人员，并将他们返回。",
        "output": "match(a:person where a.name = '赵建聪')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回publisher publish的book, 令book(b)的price的值等于knowsbook的book的id的平均值, 再查找book relates的book",
        "output": "match(a:publisher)-[e:publish]->(b:book) let b.price = AVG((b:book)<-[e2:knows]-(c:book) => c.id) match(b:book)-[e3:relates]->(d:book) return b.price, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下名叫周轩，标签是person的点，然后把它们的id和salary给我",
        "output": "match(a:person where a.name = '周轩') return a.id, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找name为PR-492且changeFileNumber的个数大于等于52的pullRequest belong的repository的名称,以及这些repository has的pullRequest的名称",
        "output": "match(a:pullRequest where a.name = 'PR-492' and COUNT(a.changeFileNumber) >= 52)-[e:belong]->(b:repository)-[e2:has]->(c:pullRequest) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为杜梅和徐伟的点共同喜欢的,类型为书的节点",
        "output": "match(a where a.name = '杜梅')-[e:likes]->(b:book)<-[e2:likes]-(c where c.name = '徐伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,area,peopleNumber, 数据为(26,56905,66730),(31,36470,92504),(6,78449,99134), 源点的area等于输入表area,查找被company Bilibili belong的city",
        "output": "with p as (select * from (VALUES(26,56905,66730),(31,36470,92504),(6,78449,99134)) as t(id,area,peopleNumber))MATCH (a:city WHERE a.area = p.area) <-[e:company_belong_city ]-(b:company WHERE b.name = 'Bilibili') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(155,51,5761),(190,48,9802)作为请求表数据,属性分别为height,age,salary, 源点的age等于输入表age,请帮我找出和person有关联的person节点,并根据其身高,薪资分组,返回身高,薪资,以及薪资对薪资取余对58取余减171的最小值",
        "output": "with p as (select * from (VALUES(155,51,5761),(190,48,9802)) as t(height,age,salary))MATCH (a:person WHERE a.age = p.age) -[e:person_friend_person ]-(b:person) RETURN b.height, b.salary, MIN(b.salary % b.salary % 58 - 171) GROUP BY b.height, b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找25个和类型为买家的点有buyer_cancel_orders关系的订单,以及和这些订单有orders_contain_goods关系的商品",
        "output": "match(a:buyer)-[e:buyer_cancel_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c limit 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找company Bilibili的所有relation,的f0对832取余的值",
        "output": "match(a:company where a.name= 'Bilibili')-[e:relation]->(b) return e.f0 % 832",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以拥有关系关联了医生张宏的部门",
        "output": "match(a:doctor where a.name='张宏')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查找forum知乎contain的person,被其他forum contain的数量;2: 返回从论坛中国诗词论坛出发,经过类型是forum_contain_post的边,走1到4度到达的帖子点;3: 给出43个用户孙轩和张建聪,共同的伙伴;4: 给出源点类型为post,边类型为post_has_tag的边,返回这些边的weight除155.63的值,和srcId减8的值;5: 查找182个名为Post_483的点拥有的label为标签的节点,且其价值不为空;6: 请帮我查找全部源点类型是帖子,目标点类型是标签,类型是post_has_tag的边;7: 查找用户徐红 喜欢的帖子,返回帖子 拥有的标签的价值对价值取余的最大值 ;8: 返回名为其他的标签,以及与其有关的标签,并返回其他的价值和这些标签的名字;",
        "output": "查询语句为:1: match(a:forum where a.name='知乎')-[e:forum_contain_person]->(b:person)<-[e2:forum_contain_person]-(c:forum) return COUNT(c);2: match(a:forum where a.name='中国诗词论坛')-[e:forum_contain_post]->{1,4}(b:post) return b;3: match(a:user where a.name='孙轩')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='张建聪') return b limit 43;4: match(a:post)-[e:post_has_tag]->(b) return e.weight / 155.63, e.srcId - 8;5: match(a where a.name='Post_483')-[e:post_has_tag]->(b:tag where (b.value is not null)) return b limit 182;6: match(a:post)-[e:post_has_tag]->(b:tag) return e;7: match(a:user where name = '徐红')-[e:user_likes_post]->(b:post)-[e2:post_has_tag]->(c:tag) return MAX(c.value % c.value);8: match(a:tag where name = '其他')-[e]-(b:tag) return a.value, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person的三角的环,边类型为属于, 并返回这些点的id",
        "output": "match(a:person)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与电影院横店影院有关系的电影的价值",
        "output": "match(a:cinema where a.name='横店影院')-[e]-(b:film) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 查询与电影院UME存在cinema_releases_film关系,且与标签科幻存在film_has_tag关系的电影节点，返回这些电影的名字,价值,及电影院UME的大小,及标签科幻的价值;2: 请帮我查找所有源点类型为电影,边类型为film_has_tag,且满足条件目标点id小于等于67或f0大于981或f0等于872的边;3: 查询标签等于person_likes_comment,且满足条件f0小于等于983的边;4: 查询以属于关系关联了电影少年足球的评论;5: 请帮我查找被person杜科creates的comment;6: 返回所有源点性别是male且性别不等于famale,目标点字数等于885,字数在410到694之间,名字不是Comment_359,且类型为person_likes_comment的边;7: 请帮我找出40个名为星际穿越的点has的标签等于tag的节点,且其id为空;8: 找出电影功夫的全部相关者,的f0除990的数量;",
        "output": "查询语句为:1: match(a:cinema where a.name='UME')-[e:cinema_releases_film]->(b:film)<-[e2:film_has_tag]-(c:tag where c.name='科幻') return a.size,b.name, b.value,c.value;2: match(a:film)-[e:film_has_tag where e.targetId <= 67 or e.f0 > 981 or e.f0 = 872]->(b) return e;3: match(a)-[e:person_likes_comment where e.f0 <= 983]->(b) return e;4: match(a:film where a.name='少年足球')<-[e:comment_belong_film]-(b:comment) return b;5: match(a:comment)<-[e:person_creates_comment]-(b:person where b.name='杜科') return a, b;6: match(a where a.gender = 'male' and a.gender <> 'famale')-[e:person_likes_comment]->(b where b.wordCount = 885 and (b.wordCount BETWEEN 410 AND 694) and b.name <> 'Comment_359') return e;7: match(a where a.name='星际穿越')-[e:film_has_tag]->(b:tag where (b.id is null)) return b limit 40;8: match(a:film where a.name= '功夫')-[e:relation]->(b) return COUNT(e.f0 / 990);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出name不等于黄轩且name等于韩月的buyer consult对应的seller的名称，以及这些seller所拥有的goods的名称。",
        "output": "match(a:buyer where a.name <> '黄轩' and a.name = '韩月')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person关联数量大于114的person,记为relationCount,再查询这些person认识的person",
        "output": "match(a:person) let a.relationCount = MAX((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 114)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 帮我查询全部和software点有uses关系的software节点,且边满足条件f0大于939,目标software节点value减572加id乘163为45;2: 给出与软件Zookeeper有关系的person, 返回和这些person有关联的公司的,id加63的最小值;3: 请帮我找出公司Bilibili创造的软件,被其他软件使用的数量;4: 请帮我找出全部和person王思思之间有person_commits_software关系的software;5: 找出以commits关系关联了software Hadoop的person;6: 查询person认识的person,返回其源点的薪资对9025取余乘87的值,以及目标点的salary的个数对7714取余的值;7: 给出全部和person陈建聪有3跳关系的company;8: 给出label为person的所有点,并根据薪资降序排列;",
        "output": "查询语句为:1: match(a:software)-[e:software_uses_software where e.f0 > 939]->(b:software where (b.value - 572 + b.id) * 163 = 45) return b;2: match(a:software where a.name= 'Zookeeper')-[e]-(b:person)-[e2]-(c:company) return MIN(c.id + 63);3: match(a:company where a.name='Bilibili')-[e:company_creates_software]->(b:software)<-[e2:software_uses_software]-(c:software) return COUNT(c);4: match(a:person where a.name='王思思')-[e:person_commits_software]->(b:software) return b;5: match(a:software where a.name='Hadoop')<-[e:person_commits_software]-(b:person) return b;6: match(a:person)-[e:person_knows_person]->(b:person) return a.salary % 9025 * 87, COUNT(b.salary) % 7714;7: match(a:person where a.name='陈建聪')-[e]->{3,3}(b:company) return b;8: match(a:person) return a order by a.salary desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前115个满足条件星数大于422,是否开源不是false的软件",
        "output": "match(a:software where a.stars > 422 and a.openSource <> false) return a limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点标签为seller,边标签为has的边,返回这些边的f0乘682的平均值,和weight的最大值除166.41除100.56的值",
        "output": "match(a:seller)-[e:has]->(b) return AVG(e.f0 * 682), MAX(e.weight) / 166.41 / 100.56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从蚂蚁集团出发，沿着申请类型的边走1到4步，到达贷款点。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:apply]->{1,4}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和医生Amily有关系的药品,返回这些点的价格,名字,权重",
        "output": "match(a:doctor where a.name='Amily')-[e]-(b:medicine) return b.price, b.name, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,年龄分组,计算id乘id的个数",
        "output": "return COUNT(a.id * a.id) group by a.salary, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,name,id, 数据为(87,'中国军事论坛',70), 源点的id等于输入表id,请帮我查找名为知网和天涯论坛的,label为forum的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES(87,'中国军事论坛',70)) as t(value,name,id))MATCH (a:forum WHERE a.id = p.id AND (a.name = '知网')) -[e:friend ]->(b) <-[e2:friend ]-(c:forum WHERE c.name = '天涯论坛') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和类型是person的点有knows关系的person,以及和这些person有knows关系的person,以及和这些person有knows关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为Comment_325的comment有friend关系,或有friend的friend关系的film",
        "output": "match(a:comment where n.name=Comment_325)-[e:friend]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和部门有关联的教师节点,并根据其薪资,性别,身高分组,返回薪资,性别,身高,以及薪资对4059取余的值",
        "output": "match(a:department)-[e:has]-(b:teacher) return b.salary, b.gender, b.height, b.salary % 4059 group by b.salary, b.gender, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('神探狄仁杰','历史',7),('泰坦尼克号','文艺',56),('功夫','文艺',71)作为请求表数据,属性分别为name,category,id, 以属性name作为相等条件,查询和person有关联的评论节点,并根据其名字分组,返回名字,以及id的最大值加44除109的值",
        "output": "with p as (select * from (VALUES('神探狄仁杰','历史',7),('泰坦尼克号','文艺',56),('功夫','文艺',71)) as t(name,category,id))MATCH (a:person WHERE a.name = p.name) -[e:person_likes_comment ]-(b:comment) RETURN b.name, (MAX(b.id) + 44) / 109 GROUP BY b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部类型是loan的点",
        "output": "match(a:loan) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点标签为'university'，边标签为'belong'的边。计算这些边的weight的平均值减去131.59，然后将结果与f0乘以520的平均值相加。",
        "output": "match(a:university)-[e:belong]->(b) return SUM(AVG(e.weight) - 131.59), AVG(e.f0 * 520)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找95个id小于等于49的评论,根据创建时间从小到大排列",
        "output": "match(a:comment where a.id <= 49) return a order by a.createTime asc limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为王梅且标签为person的人的年龄",
        "output": "match(a:person where a.name = '王梅') return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出所有和author赵若涵有关系的reader节点,返回这些点的height;2: 查找76个与周若涵和李建聪都存在关系的publisher节点;3: 查找所有书的引用,或其引用的引用;4: 给出label为author_knows_author,且weight为空或f1为true或f0不是886的边;5: 帮我查询与book百年孤独和罪与罚都存在book_refers_book关系的点;6: 请帮我找出和读者吴月之间有reader_likes_book关系的书;7: 给出label为作家的全部点,并根据身高降序排列;8: 返回与author韩月和张伟都存在author_write_book关系的点;",
        "output": "查询语句为:1: match(a:author where a.name='赵若涵')-[e]-(b:reader) return b.height;2: match(a where a.name='周若涵')-[e]->(b:publisher)<-[e2]-(c where c.name='李建聪') return b limit 76;3: match(a:book)-[e:book_refers_book]->{1,2}(b) return b;4: match(a)-[e:author_knows_author where (e.weight is null) or e.f1 = true or e.f0 <> 886]->(b) return e;5: match(a:book where a.name='百年孤独')-[e:book_refers_book]->(b)<-[e2:book_refers_book]-(c:book where c.name='罪与罚') return b;6: match(a:reader where a.name='吴月')-[e:reader_likes_book]->(b:book) return b;7: match(a:author) return a order by a.height desc;8: match(a:author where a.name='韩月')-[e:author_write_book]->(b)<-[e2:author_write_book]-(c:author where c.name='张伟') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person有关系的account节点,且account节点的isBlock不等于false,并返回这些account的id减id的值,以及account的id乘6的最小值",
        "output": "match(a:person)-[e]->(b:account where b.isBlock <> false) return b.id - b.id, MIN(b.id * 6)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到与周梅有关且与Kafka相关的节点。",
        "output": "match(a:person where a.name='周梅')-[e:knows]-(b:person)-[e2:buy]-(c:software where c.name='Kafka') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是has,以及weight大于等于161.85或srcId在131到133之间或weight为空的边",
        "output": "match(a)-[e:has where e.weight >= 161.85 or (e.srcId BETWEEN 131 AND 133) or (e.weight is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回医生类型且按照性别从小到大排序的所有点。",
        "output": "match(a:doctor) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出源点满足条件value不为空且peopleNumber不为空,或peopleNumber小于523,目标点满足条件age不是63或id在66到99之间,且salary对salary取余大于等于38,且标签为company_employee_person的边",
        "output": "match(a where ((a.value is not null) and (a.peopleNumber is not null)) or a.peopleNumber < 523)-[e:company_employee_person]->(b where (b.age <> 63 or (b.id BETWEEN 66 AND 99)) and b.salary % b.salary >= 38) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person黄科存在lover关系,且与person陈思思存在colleague关系的person节点，返回这些person的gender,name,及person黄科的gender,及person陈思思的height",
        "output": "match(a:person where a.name='黄科')-[e:lover]->(b:person)<-[e2:colleague]-(c:person where c.name='陈思思') return a.gender,b.gender, b.name,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签等于医生,目标点标签等于处方,标签等于部门或病人的边",
        "output": "match(a:doctor)-[e:department | patient]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为韩宏的person,并返回它们的age、height和name。",
        "output": "match(a:person where a.name = '韩宏') return a.age, a.height, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部卖家的相关者,或其相关者的相关者",
        "output": "match(a:seller)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回forum推特 contain的post,返回post has的tag的value乘417的求和值",
        "output": "match(a:forum where name = '推特')-[e:contain]->(b:post)-[e2:has]->(c:tag) return SUM(c.value * 417)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据类别,名字,价值分组,计算价格加价格的个数",
        "output": "return COUNT(a.price + a.price) group by a.category, a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找合作大学武汉大学的公司,和这些公司属于的城市",
        "output": "match(a:university where name = '武汉大学')<-[e:cooperate]-(b:company)-[e2:belong]->(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表317,24,793,342,839, 源点的id等于输入表id,给出名字大于等于903的大学属于的城市的名称,以及这些城市 包含的大学的名称",
        "output": "with p as (select * from (VALUES(317),(24),(793),(342),(839)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name >= 903)) -[e:university_belong_city ]->(b:city) -[e2:city_contain_university ]->(c:university) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与吴思思存在取消关系的订单,订单与商品存在包含关系的点,返回这些点的价值",
        "output": "match(a where a.name = '吴思思')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person孙梅存在拥有关系,且与账号XiaoHu存在转账关系的账号节点，返回这些账号的是否冻结,创建时间,上次登录时间,及person孙梅的名字,及账号XiaoHu的上次登录时间",
        "output": "match(a:person where a.name='孙梅')-[e:own]->(b:account)<-[e2:transfer]-(c:account where c.name='XiaoHu') return a.name,b.isBlock, b.createTime, b.lastLoginTime,c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与reader张国强有likes关系的3跳以内的环",
        "output": "match(a:reader where name = '张国强')-[e:likes]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person孙建聪和陈梅都存在认识关系的点",
        "output": "match(a:person where a.name='孙建聪')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='陈梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为47的person有关的person的相关者, 再返回和person有关系的伙伴",
        "output": "match(a:person where id = 47)-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与蚂蚁集团和字节跳动公司相关的城市节点。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:belong]-(b:city)-[e2:contain]-(c:company where c.name='字节') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出读者王建国的全部相关者,的源点id乘22的最大值",
        "output": "match(a:reader where a.name= '王建国')-[e:relation]->(b) return MAX(e.srcId * 22)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,salary,id, 数据为('何强',2985,93),('郑轩',3907,17),('马若涵',5590,72),('赵思思',1707,19)的子查询作为输入表, 源点的salary等于输入表salary,帮我查询源点名字不是吴伟且薪资在5572到9760之间,边标签等于person_knows_person,且满足条件权重为空,f0除505不等于199.79且目标点id小于等于199.51的边,返回这些边的f0除729的和",
        "output": "with p as (select * from (VALUES('何强',2985,93),('郑轩',3907,17),('马若涵',5590,72),('赵思思',1707,19)) as t(name,salary,id))MATCH (a WHERE a.salary = p.salary AND (a.name <> '吴伟' AND a.salary BETWEEN ASYMMETRIC 5572 AND 9760)) -[e:person_knows_person WHERE e.weight IS NULL AND e.f0 / 505 <> 199.79 AND e.targetId <= 199.51 ]->(b) RETURN SUM(e.f0 / 729) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出6个帖子，它们的最大值乘12除价值小于30,且名字不是Post_272或Post_426,然后按名字降序排列。",
        "output": "match(a:post where MAX(a.id) * 12 / a.value < 30 and a.name <> 'Post_272' and a.name <> 'Post_426') return a order by a.name desc limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找和university南京大学有关的country,再请帮我查找和南京大学university_cooperate_company的其他company,返回它们;2: 返回77个value大于392,value为空,或area小于10033的city,根据peopleNumber降序排列;3: 找出标签为university的所有点,并根据value从大到小排列;",
        "output": "查询语句为:1: match(a:university where a.name = '南京大学')-[e]-(b:country), (a:university)-[e2:university_cooperate_company]->(c:company) return a, b, c;2: match(a:city where (a.value > 392 and (a.value is null)) or a.area < 10033) return a order by a.peopleNumber desc limit 77;3: match(a:university) return a order by a.value desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 返回和person王思思有person_invest_company关系的company,再返回以person_own_account关系关联了王思思的account;2: 找出全部和account Zeus之间有account_repay_loan关系的loan;3: 帮我查询与person张若涵和孙建国都存在person_own_account关系的点;4: 请帮我查找与loan defaultName和defaultName1都存在loan_deposit_account关系的点;5: 返回所有和loan defaultName有1到3度关系的person;",
        "output": "查询语句为:1: match(a:person where a.name = '王思思')-[e:person_invest_company]->(b:company),(a:person where a.name = '王思思')<-[e2:person_own_account]-(c:account)return a, b, c;2: match(a:account where a.name='Zeus')-[e:account_repay_loan]->(b:loan) return b;3: match(a:person where a.name='张若涵')-[e:person_own_account]->(b)<-[e2:person_own_account]-(c:person where c.name='孙建国') return b;4: match(a:loan where a.name='defaultName')-[e:loan_deposit_account]->(b)<-[e2:loan_deposit_account]-(c:loan where c.name='defaultName1') return b;5: match(a:loan where a.name='defaultName')-[e]->{1,3}(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部标签为电影的点",
        "output": "match(a:film) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表619, 源点的id等于输入表id,给出和company有关联的loan节点,并根据其amount,weight分组,返回amount,weight,以及id除87的最大值",
        "output": "with p as (select * from (VALUES(619)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_apply_loan ]-(b:loan) RETURN b.amount, b.weight, MAX(b.id / 87) GROUP BY b.amount, b.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我找出和person黄思琪有关的person,再请帮我找出和黄思琪person_knows_person的其他person,返回它们;2: 帮我查询所有何建国的点pay的person,然后帮我查询何建国被knows的person,一起返回;3: 查找类型是person,名为郑红的点,返回这些点的salary;4: 查找183个名为陈红的点认识的标签等于person的节点,且节点名字是周轩或性别是famale;5: 请帮我找出所有和名为孙梅的person有friend关系,或有friend的friend关系的person;6: 查找id为149的点的height,name;",
        "output": "查询语句为:1: match(a:person where a.name = '黄思琪')-[e]-(b:person), (a:person)-[e2:person_knows_person]->(c:person) return a, b, c;2: match(a where a.name = '何建国')-[e:person_pay_person]->(b:person),(a where a.name = '何建国')<-[e2:person_knows_person]-(c:person) return a, b, c;3: match(a:person where a.name = '郑红') return a.salary;4: match(a where a.name='陈红')-[e:person_knows_person]->(b:person where b.name = '周轩' or b.gender = 'famale') return b limit 183;5: match(a:person where n.name=孙梅)-[e:friend]->{1,2}(b:person) return b;6: match(a where a.id = '149') return a.height, a.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有与计算机学院有关系的教师，以及这些教师所教授的课程，并返回这些课程的名称。",
        "output": "match(a where a.name = '计算机学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其身高分组,返回身高,以及年龄对3取余的最小值",
        "output": "match(a:person)-[e:knows]-(b:person) return b.height, MIN(b.age % 3) group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我找出所有person的lover,或其lover的lover;2: 给出满足条件名字是吴宏且薪资大于3586的节点;3: 找出166个id对5取余减1的平均值小于36,名字不等于吴红,身高减184大于等于75的person,根据id降序排列;4: 找出被person kate relates的person;5: 返回和person黄红有关的person,再返回和黄红person_family_person的其他person,返回它们;",
        "output": "查询语句为:1: match(a:person)-[e:person_lover_person]->{1,2}(b) return b;2: match(a where a.name = '吴宏' and a.salary > 3586) return a;3: match(a:person where AVG(a.id % 5 - 1) < 36 and a.name <> '吴红' and a.height - 184 >= 75) return a order by a.id desc limit 166;4: match(a:person)<-[e:relates]-(b:person where b.name='kate') return a, b;5: match(a:person where a.name = '黄红')-[e]-(b:person), (a:person)-[e2:person_family_person]->(c:person) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为王红和黄科的,类型是user的点公共的partner节点的名单",
        "output": "match(a:user where a.name='王红')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='黄科') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是city的所有点,并根据name从小到大排列",
        "output": "match(a:city) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出和韩雪有恋人关系的人以及和何思思有恋人关系的人，返回两者。",
        "output": "match(a:person where a.name = '韩雪')-[e:lover]->(b:person),(c:person where c.name = '何思思')-[e2:lover]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,area,value, 数据为(48,39945,570)的子查询作为输入表, 以属性value作为相等条件,给出与company阿里和滴滴都存在company_cooperate_university关系的点",
        "output": "with p as (select * from (VALUES(48,39945,570)) as t(id,area,value))MATCH (a:company WHERE a.value = p.value AND (a.name = '阿里')) -[e:company_cooperate_university ]->(b) <-[e2:company_cooperate_university ]-(c:company WHERE c.name = '滴滴') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回84个按性别降序排列且年龄大于41岁或小于6525的人的列表。",
        "output": "match(a:person where a.salary < 6525 or a.age > 41) return a order by a.gender desc limit 84",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 给出31个名为我不是药神的点拥有的标签等于标签的节点,且节点名字为历史或名字不等于喜剧;2: 找出名为赵伟的点喜欢的评论,并对这些点的id进行求和;3: 请帮我查找被person徐科likes的comment;4: 请帮我找出评论Comment_143 属于的电影,返回电影 拥有的标签的id减65的最大值 ;5: 请帮我找出源点薪资小于等于9963,边类型是person_watch_film,且满足条件f0大于等于986的边,返回这些边的目标点id减67的和;6: 给出cinema以name,id,size分组的size, 根据size降序排序;7: 请帮我找出与person孙伟有person_watch_film关系的2度以内的环;8: 找出以喜欢关系关联了评论Comment_177的person;9: 给出所有person的relation,或其relation的relation;",
        "output": "查询语句为:1: match(a where a.name='我不是药神')-[e:film_has_tag]->(b:tag where b.name = '历史' or b.name <> '喜剧') return b limit 31;2: match(a where a.name='赵伟')-[e:person_likes_comment]->(b:comment) return SUM(b.id);3: match(a:comment)<-[e:person_likes_comment]-(b:person where b.name='徐科') return a, b;4: match(a:comment where name = 'Comment_143')-[e:comment_belong_film]->(b:film)-[e2:film_has_tag]->(c:tag) return MAX(c.id - 65);5: match(a where a.salary <= 9963)-[e:person_watch_film where e.f0 >= 986]->(b) return SUM(e.targetId - 67);6: match(a:cinema) return a.size group by a.name, a.id, a.size order by a.size desc;7: match(a:person where name = '孙伟')-[e:person_watch_film]->{0,1}(b)->(a) return a.id, b.id as b_id;8: match(a:comment where a.name='Comment_177')<-[e:person_likes_comment]-(b:person) return b;9: match(a:person)-[e:relation]->{1,2}(b) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为147的论坛包含的用户, 并将用户有关的论坛的名字的最大值赋值给用户的薪资, 接着查询用户的薪资小于147的用户喜欢的帖子",
        "output": "match(a:forum where a.id = 147)-[e:contain]->(b:user) let b.salary = MAX((b:user)-[e2]-(c:forum) => c.name) match(b:user where b.salary < 147)-[e3:likes]->(d:post) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘60的值",
        "output": "a.id * 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签等于company,边标签等于belong,且满足条件srcId在20到62之间或f0小于等于869或srcId为空的边",
        "output": "match(a:company)-[e:belong where (e.srcId BETWEEN 20 AND 62) or e.f0 <= 869 or (e.srcId is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以创造关系关联了事项ISSUE-241的用户",
        "output": "match(a:issue where a.name='ISSUE-241')<-[e:creates]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为公司,名为谷歌的点,返回这些点的规格,价值",
        "output": "match(a:company where a.name = '谷歌') return a.scale, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和pullRequest PR-414有belong关系的repository,再查询以belong关系关联了PR-414的repository",
        "output": "match(a:pullRequest where a.name = 'PR-414')-[e:belong]->(b:repository),(a:pullRequest where a.name = 'PR-414')<-[e2:belong]-(c:repository)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,age, 数据为(6985,'韩强',77),(5986,'杜建国',57),(6341,'黄建聪',26), 以属性age作为相等条件,请帮我找出全部源点标签等于doctor,边标签等于doctor_creates_prescription,并且满足条件targetId不为空或f1不等于true的边",
        "output": "with p as (select * from (VALUES(6985,'韩强',77),(5986,'杜建国',57),(6341,'黄建聪',26)) as t(salary,name,age))MATCH (a:doctor WHERE a.age = p.age) -[e:doctor_creates_prescription WHERE e.targetId IS NOT NULL OR e.f1 <> TRUE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为孙建国的person,以及与其有关的标签,并返回孙建国的年龄和这些标签的id",
        "output": "match(a:person where name = '孙建国')-[e]-(b:tag) return a.age, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和公司美团有关的城市,再给出和美团属于的其他城市,返回它们",
        "output": "match(a:company where a.name = '美团')-[e]-(b:city), (a:company)-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有label为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出34个id小于等于83的读者,根据薪资升序排列",
        "output": "match(a:reader where a.id <= 83) return a order by a.salary asc limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与韩建国和孙建国有关的人，共有162个。",
        "output": "match(a where a.name='韩建国')-[e]->(b:person)<-[e2]-(c where c.name='孙建国') return b limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 查找名为Comment_330的comment,以及与其有关的comment,并返回Comment_330的createTime和这些comment的wordCount;2: 帮我查询与电影院横店影院有关,且与标签喜剧有关系的电影节点;3: 帮我查询类型是tag的所有点,并根据value升序排列;",
        "output": "查询语句为:1: match(a:comment where name = 'Comment_330')-[e]-(b:comment) return a.createTime, b.wordCount;2: match(a:cinema where a.name='横店影院')-[e:cinema_releases_film]-(b:film)-[e2:film_has_tag]-(c:tag where c.name='喜剧') return b;3: match(a:tag) return a order by a.value asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'uE'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('uE') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件价值小于等于818的节点",
        "output": "match(a where a.value <= 818) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出买家郑宏取消的订单和买家黄雪查看的货物，返回它们。",
        "output": "match(a:buyer where a.name = '郑宏')-[e:cancel]->(b:orders),(c:buyer where c.name = '黄雪')-[e2:look]->(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表414,75,877, 源点的id等于输入表id,请帮我找出author徐宏knows的author,被其他author knows的数量",
        "output": "with p as (select * from (VALUES(414),(75),(877)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.name = '徐宏')) -[e:author_knows_author ]->(b:author) <-[e2:author_knows_author ]-(c:author) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为周宏的读者,以及与其有关的作家,并返回周宏的身高和这些作家的性别",
        "output": "match(a:reader where name = '周宏')-[e]-(b:author) return a.height, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和university中国科技大学之间有cooperate关系的company",
        "output": "match(a:university where a.name='中国科技大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从上海出发，沿着属于边的方向走3-5度，可以到达哪个国家？",
        "output": "match(a:city where a.name='上海')-[e:belong]->{3,5}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找论坛包含的帖子,返回其源点的价值加936的最大值,以及目标点的id对id取余的值",
        "output": "match(a:forum)-[e:contain]->(b:post) return MAX(a.value + 936), b.id % b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与医生马建聪有关,且与医生张伟有关系的部门节点",
        "output": "match(a:doctor where a.name='马建聪')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='张伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 请帮我查找标签为商品的全部点,并根据类别从大到小排列;2: 请帮我查找193个名为kate的点consult的label为seller的节点,且其name为赵雪且gender是male;3: 找出buyer陈国强look的goods,被其他seller has的数量;4: 查询类型是卖家的点;5: 查询id为83的点的value;6: 返回和卖家杜若涵有关的商品,称为X,再返回和这个X有关联的其他买家,以及和X有关联的买家;7: 返回全部买家以性别,名字分组的身高, 根据身高升序排序;",
        "output": "查询语句为:1: match(a:goods) return a order by a.category desc;2: match(a where a.name='kate')-[e:buyer_consult_seller]->(b:seller where b.name = '赵雪' and b.gender = 'male') return b limit 193;3: match(a:buyer where a.name='陈国强')-[e:buyer_look_goods]->(b:goods)<-[e2:seller_has_goods]-(c:seller) return COUNT(c);4: match(a:seller) return a;5: match(a where a.id = '83') return a.value;6: match(a:seller where a.name = '杜若涵')-[e]-(b:goods), (b:goods)-[e2]-(c:buyer),(b:goods)-[e3]-(d:buyer) return a, b, c, d;7: match(a:buyer) return a.height group by a.gender, a.name order by a.height asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,id,height, 数据为(6627,91,184),(7410,13,179),(3526,91,193), 源点的salary等于输入表salary,查询和大学点有拥有关系的部门节点,且边满足条件f1不等于true,目标部门节点满足条件名字不等于物理学院",
        "output": "with p as (select * from (VALUES(6627,91,184),(7410,13,179),(3526,91,193)) as t(salary,id,height))MATCH (a:university WHERE a.salary = p.salary) -[e:university_has_department WHERE e.f1 <> TRUE ]->(b:department WHERE b.name <> '物理学院') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回评论Comment_176属于的电影,以及观看这些电影的person",
        "output": "match(a:comment where name = 'Comment_176')-[e:belong]->(b:film)<-[e2:watch]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查询147个salary小于6887或gender大于等于190,且id小于等于91的person,根据id从小到大排列;2: 给出和person有关联的person节点,并根据其salary,age分组,返回salary,age,以及height的平均值加161的个数;3: 请帮我查找和person有关联的person节点,并根据其height,age,gender分组,返回height,age,gender,以及age减88的值;4: 请帮我找出与person Amily有person_pay_person关系的1度的环;",
        "output": "查询语句为:1: match(a:person where (a.salary < 6887 or a.gender >= 190) and a.id <= 91) return a order by a.id asc limit 147;2: match(a:person)-[e:person_pay_person]-(b:person) return b.salary, b.age, COUNT(AVG(b.height) + 161) group by b.salary, b.age;3: match(a:person)-[e:person_knows_person]-(b:person) return b.height, b.age, b.gender, b.age - 88 group by b.height, b.age, b.gender;4: match(a:person where name = 'Amily')-[e:person_pay_person]->{0,0}(b)->(a) return a.id, b.id as b_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,height,id, 数据为(4008,155,61)的子查询作为输入表, 源点的id等于输入表id,请帮我找出所有和author陈强有3度关系的author",
        "output": "with p as (select * from (VALUES(4008,155,61)) as t(salary,height,id))MATCH (a:author WHERE a.id = p.id AND (a.name = '陈强')) -[e ]->{3,3}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是认识,以及f1为true的边",
        "output": "match(a)-[e:knows where e.f1 = true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找电影绿巨人拥有的标签, 令电影的价值等于标签的id, 返回电影的类别, 标签的价值",
        "output": "match(a:film where a.name='绿巨人')-[e:has]->(b:tag) let a.value = b.id return a.category,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以620,512作为请求点id, 以属性id作为相等条件,查询51个价格小于64或字数在350到656之间的书,根据类别升序排列",
        "output": "with p as (select * from (VALUES(620),(512)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.price < 64 OR a.wordCount BETWEEN ASYMMETRIC 350 AND 656)) RETURN a ORDER BY a.category LIMIT 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回张雪的点creates的issue,然后返回张雪被has的repository,一起返回",
        "output": "match(a where a.name = '张雪')-[e:creates]->(b:issue),(a where a.name = '张雪')<-[e2:has]-(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为郑月的person,以及与其有关的person,并返回郑月的id和这些person的年龄",
        "output": "match(a:person where name = '郑月')-[e]-(b:person) return a.id, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和论坛天涯论坛之间有包含关系的用户",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,height,name分组,计算salary减7890乘age乘199减7896的最大值",
        "output": "return MAX((a.salary - 7890) * a.age * 199 - 7896) group by a.salary, a.height, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有满足以下条件的病人：id大于1，id不为空，或者薪资的数量大于等于186。然后按照id进行升序排列，并返回88个结果。",
        "output": "match(a:patient where a.id > 1 or (a.id is not null) or COUNT(a.salary) >= 186) return a order by a.id asc limit 88",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与处方Prescription_355有关系的医生的身高",
        "output": "match(a:prescription where a.name='Prescription_355')-[e]-(b:doctor) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 帮我查询doctor Alan belong的department,被其他doctor belong的数量;2: 请帮我查找被doctor黄宏belong的department;3: 找出和医生有关联的病人节点,并根据其薪资,年龄,性别分组,返回薪资,年龄,性别,以及年龄乘20减24除94的最大值;4: 给出被处方Prescription_336包含的药品;5: 查找88个名为皮肤科的点has的类型是doctor的节点,且节点age大于等于175;",
        "output": "查询语句为:1: match(a:doctor where a.name='Alan')-[e:doctor_belong_department]->(b:department)<-[e2:doctor_belong_department]-(c:doctor) return COUNT(c);2: match(a:department)<-[e:doctor_belong_department]-(b:doctor where b.name='黄宏') return a, b;3: match(a:doctor)-[e:doctor_diagnose_patient]-(b:patient) return b.salary, b.age, b.gender, MAX((b.age * 20 - 24) / 94) group by b.salary, b.age, b.gender;4: match(a:medicine)<-[e:prescription_contain_medicine]-(b:prescription where b.name='Prescription_336') return a, b;5: match(a where a.name='皮肤科')-[e:department_has_doctor]->(b:doctor where b.age >= 175) return b limit 88;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询全部与company有关系的person节点,且person节点的id小于等于62,并返回这些点的id加69的值,以及height减height对id取余的数量;2: 给出名为Spark的软件,以及与其有关的公司,并返回Spark的名字和这些公司的规格;3: 查询满足条件规格不是large的节点;",
        "output": "查询语句为:1: match(a:company)-[e]->(b:person where b.id <= 62) return b.id + 69, COUNT(b.height - b.height % b.id);2: match(a:software where name = 'Spark')-[e]-(b:company) return a.name, b.scale;3: match(a where a.scale <> 'large') return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与事项ISSUE-496有关系的事项, 返回和这些事项有关联的合并请求的,id减id的数量",
        "output": "match(a:issue where a.name= 'ISSUE-496')-[e]-(b:issue)-[e2]-(c:pullRequest) return COUNT(c.id - c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和名为谷歌的company有friend关系,或有friend的friend关系的software",
        "output": "match(a:company where n.name=谷歌)-[e:friend]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与person节点关联的person节点，按age、id、height分组并返回。",
        "output": "match(a:person)-[e:colleague]-(b:person) return b.age, b.id, b.height group by b.age, b.id, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资减4681的值",
        "output": "a.salary - 4681",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出关联person周国强的person,和这些person朋友的person",
        "output": "match(a:person where name = '周国强')<-[e:relates]-(b:person)-[e2:friend]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与订单Order_146有关系的卖家, 返回和这些卖家有关联的卖家的,age的求和值对23取余的值",
        "output": "match(a:orders where a.name= 'Order_146')-[e]-(b:seller)-[e2]-(c:seller) return SUM(c.age) % 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从郑宏出发，经过观看类型的边缘，跳1到4次即可到达电影点。",
        "output": "match(a:person where a.name='郑宏')-[e:watch]->{1,4}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照名称降序排序所有以名称、重量和创建时间分组的处方。",
        "output": "match(a:prescription) return a.name group by a.name, a.weight, a.createTime order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算age的最大值对99取余的最大值",
        "output": "return MAX(MAX(a.age) % 99) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(348,'杭州',50)作为请求表数据,属性分别为value,name,id, 源点的id等于输入表id,返回与名为天津和北京的点共同contain的,类型是company的节点",
        "output": "with p as (select * from (VALUES(348,'杭州',50)) as t(value,name,id))MATCH (a WHERE a.id = p.id AND (a.name = '天津')) -[e:city_contain_company ]->(b:company) <-[e2:city_contain_company ]-(c WHERE c.name = '北京') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与Comment_457有belong关系的film，以及这些film与tag有has关系的所有点，并返回这些点的名字。",
        "output": "match(a where a.name = 'Comment_457')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出拥有部门土木学院的大学,和这些大学拥有的部门",
        "output": "match(a:department where name = '土木学院')<-[e:has]-(b:university)-[e2:has]->(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为46的账号有关的账号的相关者, 再查找和账号有关系的伙伴",
        "output": "match(a:account where id = 46)-[e]-(b:account)-[e2:relation]->(c), (b:account)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为药品的点,返回198个",
        "output": "match(a:medicine) return a limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出卖家何思琪回答的买家节点取消的订单",
        "output": "match(a:seller where a.name = '何思琪')-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边标签等于恋人, 并返回这些点的id",
        "output": "match(a:person)-[e:lover]->(b)-[e2:lover]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为陈红的点buy的software,并对这些software的lang进行求和",
        "output": "match(a where a.name='陈红')-[e:buy]->(b:software) return SUM(b.lang)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部医生的相关者,或其相关者的相关者",
        "output": "match(a:doctor)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为周若涵的点取消的订单,并对这些订单的价格进行求和",
        "output": "match(a where a.name='周若涵')-[e:cancel]->(b:orders) return SUM(b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创造person张宏喜欢的评论,的person",
        "output": "match(a:person where name = '张宏')-[e:likes]->(b:comment)<-[e2:creates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与教师点相关的课程节点，按其ID和课时分组，返回ID和课时。",
        "output": "match(a:teacher)-[e:teach]-(b:course) return b.id, b.courseHour group by b.id, b.courseHour",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表114,990, 源点的id等于输入表id,返回所有id为59的author关联的book,和以relates关系关联了这些book的其他book",
        "output": "with p as (select * from (VALUES(114),(990)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.id = '59')) -[e ]-(b:book) <-[e2:relates ]-(c:book) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "wordCount对418取余的数量",
        "output": "COUNT(a.wordCount % 418)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询33个名为建国大业的点拥有的label为标签的节点,且其id大于等于49,名字不等于古代",
        "output": "match(a where a.name='建国大业')-[e:has]->(b:tag where b.id >= 49 and b.name <> '古代') return b limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询王雪的喜欢对象，以及这些对象之间的朋友关系，并返回这些朋友的性别。",
        "output": "match(a where a.name = '王雪')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询与作家类型有关联的作家，以及这些作家所撰写的书籍和引用这些书籍的书籍。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:write]->(c:book)-[e3:refers]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前172个id是25或height大于164或salary小于9788的seller",
        "output": "match(a:seller where a.id = 25 or a.height > 164 or a.salary < 9788) return a limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person杜若涵有支付关系的person,再帮我查询以喜欢关系关联了杜若涵的person",
        "output": "match(a:person where a.name = '杜若涵')-[e:pay]->(b:person),(a:person where a.name = '杜若涵')<-[e2:likes]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和买家徐建国有3度关系的卖家",
        "output": "match(a:buyer where a.name='徐建国')-[e]->{3,3}(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表898, 源点的id等于输入表id,查询国家以人数分组的名字, 根据名字降序排序",
        "output": "with p as (select * from (VALUES(898)) as t(id)) MATCH (a:country WHERE a.id = p.id) RETURN a.name GROUP BY a.peopleNumber ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为103的person关联的person,和以关联关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 103)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找150个名为张雪的点knows的类型为person的节点,且其height大于等于166;2: 给出所有和software Redis有1到4跳关系的software;3: 帮我查询和person有关联的software节点,并根据其stars,lang,name分组,返回stars,lang,name,以及id对39取余的值;",
        "output": "查询语句为:1: match(a where a.name='张雪')-[e:person_knows_person]->(b:person where b.height >= 166) return b limit 150;2: match(a:software where a.name='Redis')-[e]->{1,4}(b:software) return b;3: match(a:person)-[e:person_commits_software]-(b:software) return b.stars, b.lang, b.name, b.id % 39 group by b.stars, b.lang, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司腾讯雇佣的person节点属于的公司",
        "output": "match(a:company where a.name = '腾讯')-[e:employee]->(b:person)-[e2:belong]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('small',201,99),('small',368,83),('medium',234,81)作为请求表数据,属性分别为scale,value,id, 以属性value作为相等条件,查询全部源点类型是company,边类型是company_belong_city,且满足条件srcId在49到58之间的边",
        "output": "with p as (select * from (VALUES('small',201,99),('small',368,83),('medium',234,81)) as t(scale,value,id))MATCH (a:company WHERE a.value = p.value) -[e:company_belong_city WHERE e.srcId BETWEEN ASYMMETRIC 49 AND 58 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person黄思思buy的software,以及buy这些software的person, 令person(a)的name等于person(c)的age的求和值,令software的openSource等于software的stars对615取余,令person(a)的id等于person(c)的id乘id, 返回person(a)的age,software(b)的lang,person(c)的salary",
        "output": "match(a:person where name = '黄思思')-[e:buy]->(b:software)<-[e2:buy]-(c:person) let a.name = SUM(c.age),let b.openSource = b.stars % 615,let a.id = c.id * c.id return a.age,b.lang,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与买家陈国强已取消的订单，以及与买家吴月有关联的商品，并将它们全部返回。",
        "output": "match(a:buyer where a.name = '陈国强')-[e:cancel]->(b:orders),(c:buyer where c.name = '吴月')-[e2:look]->(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person赵若涵购买的软件,和赵若涵提交的软件",
        "output": "match(a:software)<-[e:buy]-(b:person where name = '赵若涵')-[e2:commits]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与seller Bob和黄红都存在has关系的点",
        "output": "match(a:seller where a.name='Bob')-[e:has]->(b)<-[e2:has]-(c:seller where c.name='黄红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以47, 0作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(47, 0) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找city belong的country,返回其源点的peopleNumber除2655加value的平均值,以及目标点的peopleNumber减peopleNumber的平均值",
        "output": "match(a:city)-[e:belong]->(b:country) return AVG(a.peopleNumber / 2655 + a.value), AVG(b.peopleNumber - b.peopleNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回订单包含的商品,返回其源点的价格乘1639.33的数量,以及目标点的价值加586的值",
        "output": "match(a:orders)-[e:contain]->(b:goods) return COUNT(a.price * 1639.33), b.value + 586",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以574,15,831作为请求点id, 以属性id作为相等条件,查找8个与其他和动作都存在关系的论坛节点",
        "output": "with p as (select * from (VALUES(574),(15),(831)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '其他')) -[e ]->(b:forum) <-[e2 ]-(c WHERE c.name = '动作') RETURN b LIMIT 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为马思思的,name等于陈月的family,返回这些family的name,和边的f1",
        "output": "match(a where a.name='马思思')-[e:person_family_person]->(b where b.name = '陈月') return b.name,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是医生的点,返回58个",
        "output": "match(a:doctor) return a limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person Jimmy认识的person节点支付的person",
        "output": "match(a:person where a.name = 'Jimmy')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出源点name不是XiaoHu,边标签为account_repay_loan,且满足条件weight大于154.64的边,返回这些边的targetId加52除137的平均值;2: 帮我查询名为XiaoHu的点transfer的account,并对这些点的name进行求和;3: 请帮我查找与person孙建国和黄红都存在person_own_account关系的点;4: 查找标签等于person_invest_company,并且满足条件f0不为空且源点id为空的边;5: 查找所有源点类型是person,边类型是person_apply_loan,并且weight在103.94到133.76之间,targetId小于143且srcId小于70的边;6: 帮我查询id为127的点的人数,名字;",
        "output": "查询语句为:1: match(a where a.name <> 'XiaoHu')-[e:account_repay_loan where e.weight > 154.64]->(b) return AVG((e.targetId + 52) / 137);2: match(a where a.name='XiaoHu')-[e:account_transfer_account]->(b:account) return SUM(b.name);3: match(a:person where a.name='孙建国')-[e:person_own_account]->(b)<-[e2:person_own_account]-(c:person where c.name='黄红') return b;4: match(a)-[e:person_invest_company where (e.f0 is not null) and (e.srcId is null)]->(b) return e;5: match(a:person)-[e:person_apply_loan where (e.weight BETWEEN 103.94 AND 133.76) and e.targetId < 143 and e.srcId < 70]->(b) return e;6: match(a where a.id = '127') return a.peopleNumber, a.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 找出所有城市的伙伴,或其伙伴的伙伴;2: 找出从city天津出发,经过类型是city_contain_company的边,走3跳或4跳到达的company点;3: 查找名为电子科技大学的点合作的公司;4: 请帮我找出以属于关系关联了城市上海的公司;5: 查询和城市巴黎之间有city_contain_company关系的公司;6: 帮我查询area小于等于88199或name不等于俄罗斯的country contain的city的名称,以及这些city contain的university的名称;7: 给出和公司有关联的大学节点,并根据其id,名字分组,返回id,名字,以及价值对334取余的值;",
        "output": "查询语句为:1: match(a:city)-[e:partner]->{1,2}(b) return b;2: match(a:city where a.name='天津')-[e:city_contain_company]->{3,4}(b:company) return b;3: match(a where a.name='电子科技大学')-[e:university_cooperate_company]->(b:company) return b;4: match(a:city where a.name='上海')<-[e:company_belong_city]-(b:company) return b;5: match(a:city where a.name='巴黎')-[e:city_contain_company]->(b:company) return b;6: match(a:country where a.area <= 88199 or a.name <> '俄罗斯')-[e:country_contain_city]->(b:city)-[e2:city_contain_university]->(c:university) return b.name as b_name, c.name as c_name;7: match(a:company)-[e:company_cooperate_university]-(b:university) return b.id, b.name, b.value % 334 group by b.id, b.name;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我找找我有处方的朋友，或者朋友的朋友。",
        "output": "match(a:prescription)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和学生郑国强有关系的课程或部门,返回这些点的课时,名字,id",
        "output": "match(a:student where a.name='郑国强')-[e]-(b:course | department) return b.courseHour, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关系的评论节点,且评论节点的名字不是Comment_345,并返回这些评论的id对id取余的最大值,以及评论的id乘29的最大值",
        "output": "match(a:person)-[e]->(b:comment where b.name <> 'Comment_345') return MAX(b.id % b.id), MAX(b.id * 29)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算height除height的最大值",
        "output": "return MAX(a.height / a.height) group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问郑月喜欢哪本书？",
        "output": "match(a:reader where a.name = '郑月')-[e:likes]->(b:book)-[e2:knows]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与课程线性代数有关系的大学的id",
        "output": "match(a:course where a.name='线性代数')-[e]-(b:university) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person赵宏有关的电影,称为X,再给出和这个X有关联的其他标签,以及和X有关联的电影院",
        "output": "match(a:person where a.name = '赵宏')-[e]-(b:film), (b:film)-[e2]-(c:tag),(b:film)-[e3]-(d:cinema) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找id为14的tag有关的forum的relation, 再请帮我查找和forum有关系的friend",
        "output": "match(a:tag where id = '14')-[e]-(b:forum)-[e2:relation]->(c), (b:forum)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person张若涵有关系的person, 返回和这些person有关联的person的,id的平均值除75的值",
        "output": "match(a:person where a.name= '张若涵')-[e]-(b:person)-[e2]-(c:person) return AVG(c.id) / 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和名为孙思思的用户有伙伴关系,或有伙伴的伙伴关系的仓库",
        "output": "match(a:user where n.name=孙思思)-[e:partner]->{1,2}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与李伟和吴建国都相关的人。",
        "output": "match(a:person where a.name='李伟')-[e:pay]-(b:person)-[e2:likes]-(c:person where c.name='吴建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除51的最小值",
        "output": "MIN(a.id / 51)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与买家何月有关系的买家的性别",
        "output": "match(a:buyer where a.name='何月')-[e]-(b:buyer) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person赵建国有恋人关系的2跳的环",
        "output": "match(a:person where name = '赵建国')-[e:lover]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回韩国与武汉有关系的城市节点，并统计它们的人口和价值。",
        "output": "match(a:city where a.name='武汉')-[e]->(b:city)<-[e2]-(c:country where c.name='韩国') return b.peopleNumber, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是公司的点,返回58个",
        "output": "match(a:company) return a limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person黄红提交的软件节点使用的软件",
        "output": "match(a:person where a.name = '黄红')-[e:commits]->(b:software)-[e2:uses]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person马科的标签等于朋友的边,并根据目标点id升序排列,返回18个",
        "output": "match(a:person where a.name = '马科')-[e:friend]->(b) return b order by e.targetId asc limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,height,age分组,计算salary对2719取余的值",
        "output": "return a.salary % 2719 group by a.id, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Comment_260和Comment_378的,标签等于评论的点公共的朋友节点的名单",
        "output": "match(a:comment where a.name='Comment_260')-[e:friend]->(b)<-[e2:friend]-(c:comment where c.name='Comment_378') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 person 点关联的评论节点，并按 id 分组。",
        "output": "match(a:person)-[e:likes]-(b:comment) return b.id group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与黄伟有关的人。",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='黄伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与马红有关、且与Light账号相关的账号节点。",
        "output": "match(a:person where a.name='马红')-[e:own]-(b:account)-[e2:transfer]-(c:account where c.name='Light') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和label为department的点有has关系的doctor,并且和这些doctor有creates关系的prescription,并且和这些prescription有contain关系的medicine",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription)-[e3:contain]->(d:medicine) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与软件 SprintBoot有依赖关系的软件，以及与软件 SprintBoot有依赖关系的软件。",
        "output": "match(a:software where a.name = 'SprintBoot')-[e:uses]->(b:software),(a:software where a.name = 'SprintBoot')<-[e2:uses]-(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('杜强',33,179),('李梅',4,174),('赵若涵',23,175),('马若涵',47,161)作为请求表数据,属性分别为name,age,height, 源点的age等于输入表age,查找和person有关联的film节点,并根据其value,id,category分组,返回value,id,category,以及id对41取余的和",
        "output": "with p as (select * from (VALUES('杜强',33,179),('李梅',4,174),('赵若涵',23,175),('马若涵',47,161)) as t(name,age,height))MATCH (a:person WHERE a.age = p.age) -[e:person_watch_film ]-(b:film) RETURN b.value, b.id, b.category, SUM(b.id % 41) GROUP BY b.value, b.id, b.category ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为66的person认识的person, 并将person有关的person的年龄的最小值赋值给person(b)的年龄, 接着查询person(b)的年龄小于66的person支付的person",
        "output": "match(a:person where a.id = 66)-[e:knows]->(b:person) let b.age = MIN((b:person)-[e2]-(c:person) => c.age) match(b:person where b.age < 66)-[e3:pay]->(d:person) return b.age, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高从大到小排序，查询用户分组的身高信息。",
        "output": "match(a:user) return a.height group by a.height order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与吴轩和徐科都相关的作家。",
        "output": "match(a where a.name='吴轩')-[e]->(b:author)<-[e2]-(c where c.name='徐科') return b limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询合并请求属于的仓库,返回其源点的变更文件数除变更文件数的值,以及目标点的id乘71的最大值",
        "output": "match(a:pullRequest)-[e:belong]->(b:repository) return a.changeFileNumber / a.changeFileNumber, MAX(b.id * 71)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部comment的friend,或其friend的friend",
        "output": "match(a:comment)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与大学北京大学有关系的大学的价值",
        "output": "match(a:university where a.name='北京大学')-[e]-(b:university) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 找出全部名为赵建聪的点创造的处方;2: 查询所有和prescription Prescription_237有1到3跳关系的prescription;3: 返回label为医生的点,返回46个;4: 查询标签为doctor_diagnose_patient,以及f1不等于false,f1的最大值大于114的边;5: 请帮我查找与医生吴建聪和韩强都存在doctor_diagnose_patient关系的点;6: 请帮我查找所有和处方Prescription_160之间有prescription_contain_medicine关系的药品;",
        "output": "查询语句为:1: match(a where a.name='赵建聪')-[e:doctor_creates_prescription]->(b:prescription) return b;2: match(a:prescription where a.name='Prescription_237')-[e]->{1,3}(b:prescription) return b;3: match(a:doctor) return a limit 46;4: match(a)-[e:doctor_diagnose_patient where e.f1 <> false and MAX(e.f1) > 114]->(b) return e;5: match(a:doctor where a.name='吴建聪')-[e:doctor_diagnose_patient]->(b)<-[e2:doctor_diagnose_patient]-(c:doctor where c.name='韩强') return b;6: match(a:prescription where a.name='Prescription_160')-[e:prescription_contain_medicine]->(b:medicine) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找publisher为郑梅，且book为《罪与罚》的节点，返回它们的name和id。",
        "output": "match(a:publisher where a.name='郑梅')-[e]->(b:book)<-[e2]-(c:book where c.name='罪与罚') return b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与韩宏和陈强有关联的65个人。",
        "output": "match(a where a.name='韩宏')-[e]->(b:person)<-[e2]-(c where c.name='陈强') return b limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询146个名为吴强的点knows的类型是person的节点,且节点height大于等于162",
        "output": "match(a where a.name='吴强')-[e:knows]->(b:person where b.height >= 162) return b limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "这里有146个账户Light和BIN，它们之间存在关联。",
        "output": "match(a:account where a.name='Light')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='BIN') return b limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与名为Comment_449的评论有相关者关系或相关者相关者关系的所有电影。",
        "output": "match(a:comment where n.name=Comment_449)-[e:relation]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与论坛相关的标签，以及这些标签与其他帖子之间的'has'关系。",
        "output": "match(a:forum where a.id = '119')-[e]-(b:tag)<-[e2:has]-(c:post) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有拥有传染部的医生，并找出医生与处方之间的关联，然后返回这些关联的权重。",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 返回74个名为赵思思的点knows的label为person的节点,且其gender不是famale,salary小于5328;2: 查询和person徐月有关的person,再查询和徐月person_family_person的其他person,返回它们;3: 查找55个salary不为空且gender不是male且salary除9725为192的person,根据name升序排列;4: 帮我查询前101个满足条件身高在171到185之间的person;",
        "output": "查询语句为:1: match(a where a.name='赵思思')-[e:knows]->(b:person where b.gender <> 'famale' and b.salary < 5328) return b limit 74;2: match(a:person where a.name = '徐月')-[e]-(b:person), (a:person)-[e2:person_family_person]->(c:person) return a, b, c;3: match(a:person where (a.salary is not null) and a.gender <> 'male' and a.salary / 9725 = 192) return a order by a.name asc limit 55;4: match(a:person where (a.height BETWEEN 171 AND 185)) return a limit 101;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出以creates关系关联了comment Comment_343的person",
        "output": "match(a:comment where a.name='Comment_343')<-[e:person_creates_comment]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点age在9到12之间或salary不为空,且age小于等于92,目标点category为文学且createTime是2034年04月27日,createTime为2011年02月12日,且标签等于likes的边",
        "output": "match(a where ((a.age BETWEEN 9 AND 12) or (a.salary is not null)) and a.age <= 92)-[e:likes]->(b where b.category = '文学' and b.createTime = '2034-04-27' and b.createTime = '2011-02-12') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照价值降序排列，找出名字不等于喜剧的标签，共有69个，其中一些没有id。",
        "output": "match(a:tag where (a.id is not null) and (a.id is null) and a.name <> '喜剧') return a order by a.value desc limit 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找38个软件Redis和Spark,共同的朋友",
        "output": "match(a:software where a.name='Redis')-[e:friend]->(b)<-[e2:friend]-(c:software where c.name='Spark') return b limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为address,size,id, 数据为('南区',145,55),('西区',742,35),('B座',317,8), 源点的id等于输入表id,返回26个与历史和科幻都存在关系的电影院节点",
        "output": "with p as (select * from (VALUES('南区',145,55),('西区',742,35),('B座',317,8)) as t(address,size,id))MATCH (a WHERE a.id = p.id AND (a.name = '历史')) -[e ]->(b:cinema) <-[e2 ]-(c WHERE c.name = '科幻') RETURN b LIMIT 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高对身高取余的个数",
        "output": "COUNT(a.height % a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被account transfer数量大于98的account,记为relationCount,再查询这些account transfer的company",
        "output": "match(a:account) let a.relationCount = MIN((a:account)<-[e:transfer]-(b:account) => b.id) match(a where a.relationCount > 98)-[e2:transfer]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出身高超过182的人的姓名，以及他们所涉及的其他人。",
        "output": "match(a:person where a.height > 182)-[e:relates]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与帖子Post_109有关联的论坛",
        "output": "match(a:post where a.name='Post_109')<-[e:contain]-(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "stars的平均值减933的值",
        "output": "AVG(a.stars) - 933",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下郑思思点赞和被认识的所有人，一起返回",
        "output": "match(a where a.name = '郑思思')-[e:likes]->(b:person),(a where a.name = '郑思思')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与浙江大学有合作关系的所有公司，然后找出这些公司与城市之间的关联，最后计算这些点的总面积。",
        "output": "match(a where a.name = '浙江大学')-[e:cooperate]->(b:company)-[e2:belong]->(c:city) return c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person陈红之间有支付关系的person",
        "output": "match(a:person where a.name='陈红')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以属于关系关联了仓库Flink的合并请求",
        "output": "match(a:repository where a.name='Flink')<-[e:belong]-(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回认识person何轩关联的person,的person",
        "output": "match(a:person where name = '何轩')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person孙宏belong的company节点creates的software",
        "output": "match(a:person where a.name = '孙宏')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您需要我帮您找出复旦大学所属的城市，以及复旦大学包含的城市吗？然后把它们一起返回给我。",
        "output": "match(a where a.name = '复旦大学')-[e:belong]->(b:city),(a where a.name = '复旦大学')<-[e2:contain]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询身高为空或者年龄不为空的人认识的人的名字，以及这些人认识的人的名字。",
        "output": "match(a:person where (a.height is null) or (a.age is not null))-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出department has的student, 令student的height的值等于hasstudent的department的name的和, 再查找student selects的course",
        "output": "match(a:department)-[e:has]->(b:student) let b.height = SUM((b:student)<-[e2:has]-(c:department) => c.name) match(b:student)-[e3:selects]->(d:course) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点label为forum,边label为contain的边,返回这些边的weight减193.42的最小值,和weight加198.83的求和值",
        "output": "match(a:forum)-[e:contain]->(b) return MIN(e.weight - 193.42), SUM(e.weight + 198.83)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与账号BIN有关联的还款贷款，以及与人名赵国强有关联的账号。",
        "output": "match(a:account where a.name = 'BIN')-[e:repay]->(b:loan),(c:person where c.name = '赵国强')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,lastLoginTime分组,计算value的个数加value的值",
        "output": "return COUNT(a.value) + a.value group by a.name, a.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询107个名为Geaflow123的点还款的类型为贷款的节点,且其金额的个数小于等于1595.57,权重为空",
        "output": "match(a where a.name='Geaflow123')-[e:repay]->(b:loan where COUNT(b.amount) <= 1595.57 and (b.weight is null)) return b limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为处方的点,并根据id升序排列",
        "output": "match(a:prescription) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回191个与孙思思和王若涵都存在关系的订单或商品节点",
        "output": "match(a where a.name='孙思思')-[e]->(b:orders | goods)<-[e2]-(c where c.name='王若涵') return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签等于person,目标点标签等于person,标签等于person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为周红的点发布的所有帖子,并对这些帖子的创建时间进行求和",
        "output": "match(a where a.name='周红')-[e:publish]->(b:post) return SUM(b.createTime)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资减薪资的值",
        "output": "a.salary - a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person黄若涵创造的评论, 令评论的名字等于评论的字数除614,令评论的身高等于person的薪资,令评论的年龄等于person的年龄的最大值, 返回person的名字, 评论的名字",
        "output": "match(a:person where a.name='黄若涵')-[e:creates]->(b:comment) let b.name = b.wordCount / 614,let b.height = a.salary,let b.age = MAX(a.age) return a.name,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型为电影,边类型为拥有的边,返回这些边的目标点id减目标点id减权重的平均值,和权重乘125.47的最大值",
        "output": "match(a:film)-[e:has]->(b) return AVG(e.targetId - e.targetId - e.weight), MAX(e.weight * 125.47)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以存款关系关联了账号LX001的贷款",
        "output": "match(a:account where a.name='LX001')<-[e:deposit]-(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和贷款loan_58有关系的账号或person,返回这些点的上次登录时间",
        "output": "match(a:loan where a.name='loan_58')-[e]-(b:account | person) return b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出孙月的朋友的朋友的朋友",
        "output": "match(a:user where a.name='孙月')-[e:partner]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与周思思和李思思都有关联的171本书。",
        "output": "match(a where a.name='周思思')-[e]->(b:book)<-[e2]-(c where c.name='李思思') return b limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为徐若涵和陈若涵的点共同knows的,标签为person的节点",
        "output": "match(a where a.name = '徐若涵')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '陈若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从teacher郑建国出发,经过label为teach的边,走3到6跳到达的course点",
        "output": "match(a:teacher where a.name='郑建国')-[e:teach]->{3,6}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和订单Order_241之间有包含关系的商品",
        "output": "match(a:orders where a.name='Order_241')-[e:contain]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person张思琪存在申请关系,且与账号LX001存在存款关系的贷款节点，返回这些贷款的id,及person张思琪的薪资,及账号LX001的名字",
        "output": "match(a:person where a.name='张思琪')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='LX001') return a.salary,b.id,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出115个和类型是person的点有creates关系的comment,并且和这些comment有belong关系的film",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,name,id, 数据为(82,'马思思',98),(23,'黄思琪',10),(53,'李宏',6),(92,'杜强',75), 以属性id作为相等条件,找出89个与周轩和郑宏都存在关系的person节点",
        "output": "with p as (select * from (VALUES(82,'马思思',98),(23,'黄思琪',10),(53,'李宏',6),(92,'杜强',75)) as t(age,name,id))MATCH (a WHERE a.id = p.id AND (a.name = '周轩')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '郑宏') RETURN b LIMIT 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找前191个label为author_write_book的边;2: 请帮我找出以likes关系关联了book少年闰土的reader;3: 找出和publisher有关联的book节点,并根据其createTime,name,id分组,返回createTime,name,id,以及id乘20的求和值;4: 查询全部和book三体有1度关系的publisher;5: 查询和publisher有关联的book节点,并根据其id,wordCount分组,返回id,wordCount,以及price乘76的值;6: 请帮我查找全部标签为publisher的点;7: 找出被编辑王建聪发布的书;",
        "output": "查询语句为:1: match(a)-[e:author_write_book]->(b) return e limit 191;2: match(a:book where a.name='少年闰土')<-[e:reader_likes_book]-(b:reader) return b;3: match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.createTime, b.name, b.id, SUM(b.id * 20) group by b.createTime, b.name, b.id;4: match(a:book where a.name='三体')-[e]->{1,1}(b:publisher) return b;5: match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.id, b.wordCount, b.price * 76 group by b.id, b.wordCount;6: match(a:publisher) return a;7: match(a:book)<-[e:publisher_publish_book]-(b:publisher where b.name='王建聪') return a, b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值减价值的值",
        "output": "a.value - a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影院上映的电影,返回其源点的id对27取余的值,以及目标点的价值对992取余的值",
        "output": "match(a:cinema)-[e:releases]->(b:film) return a.id % 27, b.value % 992",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前37个满足条件薪资小于等于9593的读者",
        "output": "match(a:reader where a.salary <= 9593) return a limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部tag以id,name,value分组的name, 根据name降序排序",
        "output": "match(a:tag) return a.name group by a.id, a.name, a.value order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加87的数量",
        "output": "COUNT(a.id + 87)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为51的publisher关联的book,和以write关系关联了这些book的其他author",
        "output": "match(a:publisher where a.id = 51)-[e]-(b:book)<-[e2:write]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和person黄建国之间有恋人关系的person",
        "output": "match(a:person where a.name='黄建国')-[e:lover]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));找出和编辑有关联的书节点,并根据其价格分组,返回价格,以及字数除214的最大值",
        "output": "match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.price, MAX(b.wordCount / 214) group by b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出所有和名为华为的公司有朋友关系,或有朋友的朋友关系的大学;2: 请帮我查找所有id为25的大学关联的城市,和以属于关系关联了这些城市的其他公司;3: 返回university华中科技大学 cooperate的company,返回company belong的city的area的最小值除area的最大值 ;4: 给出城市杭州包含的大学,被其他城市包含的数量;5: 请帮我找出所有源点标签等于公司,目标点标签等于城市,标签等于company_belong_city的边;6: 查询名为广州的点contain的全部university,并对这些点的id进行求和;",
        "output": "查询语句为:1: match(a:company where n.name=华为)-[e:friend]->{1,2}(b:university) return b;2: match(a:university where a.id = '25')-[e]-(b:city)<-[e2:company_belong_city]-(c:company) return b,c;3: match(a:university where name = '华中科技大学')-[e:university_cooperate_company]->(b:company)-[e2:company_belong_city]->(c:city) return MAX(MIN(c.area) / c.area);4: match(a:city where a.name='杭州')-[e:city_contain_university]->(b:university)<-[e2:city_contain_university]-(c:city) return COUNT(c);5: match(a:company)-[e:company_belong_city]->(b:city) return e;6: match(a where a.name='广州')-[e:city_contain_university]->(b:university) return SUM(b.id);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型为person的点有创造关系的评论,并且和这些评论有属于关系的电影,并且和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表941,767,421, 源点的id等于输入表id,查询所有id为158的部门关联的教师,和以拥有关系关联了这些教师的其他部门",
        "output": "with p as (select * from (VALUES(941),(767),(421)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.id = '158')) -[e ]-(b:teacher) <-[e2:department_has_teacher ]-(c:department) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为Geaflow123和Faker的,类型为账号的点公共的伙伴节点的名单",
        "output": "match(a:account where a.name='Geaflow123')-[e:partner]->(b)<-[e2:partner]-(c:account where c.name='Faker') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表22,199,765,305,91, 源点的id等于输入表id,给出与名为杭州和巴黎的点共同属于的,类型为国家的节点",
        "output": "with p as (select * from (VALUES(22),(199),(765),(305),(91)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '杭州')) -[e:city_belong_country ]->(b:country) <-[e2:city_belong_country ]-(c WHERE c.name = '巴黎') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回包含论坛天涯论坛包含的用户,的论坛",
        "output": "match(a:forum where name = '天涯论坛')-[e:contain]->(b:user)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与cinema UME有关,且与tag古代有关系的film节点",
        "output": "match(a:cinema where a.name='UME')-[e:releases]-(b:film)-[e2:has]-(c:tag where c.name='古代') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为reader的点,并根据height降序排列",
        "output": "match(a:reader) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查找和person孙强之间有person_likes_person关系的person;2: 帮我查询和person张红有关的person,再帮我查询和张红person_likes_person的其他person,返回它们;3: 请帮我找出全部person以身高,id分组的身高, 根据身高升序排序;4: 帮我查询类型为person,名为张建国的点,返回这些点的性别,名字;5: 查询全部与黄建国存在person_pay_person关系的person,person与person存在person_likes_person关系的点,返回这些点的name;6: 请帮我查找与person孙思思存在person_likes_person关系,且与person孙国强存在person_pay_person关系的person节点，返回这些person的id,age,及person孙思思的height,及person孙国强的age;7: 帮我查询全部person以id,性别分组的性别, 根据性别降序排序;8: 返回与person杜思琪有person_likes_person关系的1度的环;9: 请帮我找出6个与孙若涵和Bob都存在关系的person节点;",
        "output": "查询语句为:1: match(a:person where a.name='孙强')-[e:person_likes_person]->(b:person) return b;2: match(a:person where a.name = '张红')-[e]-(b:person), (a:person)-[e2:person_likes_person]->(c:person) return a, b, c;3: match(a:person) return a.height group by a.height, a.id order by a.height asc;4: match(a:person where a.name = '张建国') return a.gender, a.name;5: match(a where a.name = '黄建国')-[e:person_pay_person]->(b:person)-[e2:person_likes_person]->(c:person) return c.name;6: match(a:person where a.name='孙思思')-[e:person_likes_person]->(b:person)<-[e2:person_pay_person]-(c:person where c.name='孙国强') return a.height,b.id, b.age,c.age;7: match(a:person) return a.gender group by a.id, a.gender order by a.gender desc;8: match(a:person where name = '杜思琪')-[e:person_likes_person]->{0,0}(b)->(a) return a.id, b.id as b_id;9: match(a where a.name='孙若涵')-[e]->(b:person)<-[e2]-(c where c.name='Bob') return b limit 6;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为150的医生属于的部门, 并将部门有关的医生的性别的平均值赋值给部门的地址, 接着查询部门的地址小于150的部门拥有的医生",
        "output": "match(a:doctor where a.id = 150)-[e:belong]->(b:department) let b.address = AVG((b:department)-[e2]-(c:doctor) => c.gender) match(b:department where b.address < 150)-[e3:has]->(d:doctor) return b.address, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王国强的点创造的合并请求,然后请帮我找出王国强被拥有的仓库,一起返回",
        "output": "match(a where a.name = '王国强')-[e:creates]->(b:pullRequest),(a where a.name = '王国强')<-[e2:has]-(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有医生源点之间、标签为'创造'的边，并返回这些边中源点ID除以178的最小值，以及边权重减去102.38的值。",
        "output": "match(a:doctor)-[e:creates]->(b) return MIN(e.srcId / 178), e.weight - 102.38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与名为华为和阿里的点共同creates的,类型是software的节点",
        "output": "match(a where a.name = '华为')-[e:creates]->(b:software)<-[e2:creates]-(c where c.name = '阿里') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时引用了书《呐喊》和《罪与罚》的书的节点，包括它们的名字、类别、ID、《呐喊》的页码以及《罪与罚》的名字。",
        "output": "match(a:book where a.name='呐喊')-[e:refers]->(b:book)<-[e2:refers]-(c:book where c.name='罪与罚') return a.wordCount,b.name, b.category, b.id,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 找出满足条件身高小于等于161的节点;2: 请帮我查找和forum知网有forum_contain_person关系的person,再请帮我查找以forum_contain_post关系关联了知网的post;3: 帮我查询全部person以id,age分组的name, 根据name降序排序;",
        "output": "查询语句为:1: match(a where a.height <= 161) return a;2: match(a:forum where a.name = '知网')-[e:forum_contain_person]->(b:person),(a:forum where a.name = '知网')<-[e2:forum_contain_post]-(c:post)return a, b, c;3: match(a:person) return a.name group by a.id, a.age order by a.name desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id分组,计算value的个数除345的值",
        "output": "return COUNT(a.value) / 345 group by a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person吴建聪关联的person节点认识的person",
        "output": "match(a:person where a.name = '吴建聪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以accept关系关联了prescription Prescription_470的patient",
        "output": "match(a:prescription where a.name='Prescription_470')<-[e:accept]-(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出帖子Post_401拥有的标签, 令标签的名字等于帖子的id乘24, 返回帖子的id, 标签的名字",
        "output": "match(a:post where a.name='Post_401')-[e:has]->(b:tag) let b.name = a.id * 24 return a.id,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查找名为黄若涵的点relates的全部person,并对这些点的age进行求和;2: 给出所有与徐科存在person_family_person关系的person,person与person存在person_lover_person关系的点,返回这些点的身高;3: 帮我查询前127个身高小于154,名字为孙建聪的person;4: 返回113个名为李若涵的点关联的类型为person的节点,且节点id大于等于27;5: 请帮我查找和person有关联的person节点,并根据其salary,id分组,返回salary,id,以及height对164取余的值;",
        "output": "查询语句为:1: match(a where a.name='黄若涵')-[e:relates]->(b:person) return SUM(b.age);2: match(a where a.name = '徐科')-[e:person_family_person]->(b:person)-[e2:person_lover_person]->(c:person) return c.height;3: match(a:person where a.height < 154 and a.name = '孙建聪') return a limit 127;4: match(a where a.name='李若涵')-[e:relates]->(b:person where b.id >= 27) return b limit 113;5: match(a:person)-[e:person_family_person]-(b:person) return b.salary, b.id, b.height % 164 group by b.salary, b.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找seller ask的buyer, 令buyer的height的值等于askbuyer的seller的salary的个数, 再查找buyer consult的seller",
        "output": "match(a:seller)-[e:ask]->(b:buyer) let b.height = COUNT((b:buyer)<-[e2:ask]-(c:seller) => c.salary) match(b:buyer)-[e3:consult]->(d:seller) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与XXD存在转账关系的所有账号，并查询这些账号之间的转账点，同时返回这些转账点是否冻结。",
        "output": "match(a where a.name = 'XXD')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与医生周思思有关,且与医生张思思有关系的部门节点",
        "output": "match(a:doctor where a.name='周思思')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='张思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查找 username 为 '吴伟' 的用户。",
        "output": "match(a:user where a.name = '吴伟') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询41个电影泰坦尼克号和变形金刚,共同的相关者",
        "output": "match(a:film where a.name='泰坦尼克号')-[e:relation]->(b)<-[e2:relation]-(c:film where c.name='变形金刚') return b limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和用户杜科有发布关系的帖子,再找出以喜欢关系关联了杜科的帖子",
        "output": "match(a:user where a.name = '杜科')-[e:publish]->(b:post),(a:user where a.name = '杜科')<-[e2:likes]-(c:post)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id乘14的最大值",
        "output": "return MAX(a.id * 14) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以63,476,593,205作为请求点id, 以属性id作为相等条件,计算所有软件的id除47的值",
        "output": "with p as (select * from (VALUES(63),(476),(593),(205)) as t(id)) MATCH (a:software WHERE a.id = p.id) RETURN a.id / 47 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 返回83个名为王建聪的点提交的类型为软件的节点,且其价值不等于923;2: 查找软件以id分组的价值, 根据价值从大到小排序;3: 帮我查询和person郑思思有person_belong_company关系的公司,以及和公司阿里有company_employee_person关系的person,将它们都返回;4: 查找person王若涵 认识的person,返回person 购买的软件的id减97的最大值 ;5: 给出全部company的partner,或其partner的partner;6: 查询名为华为的company,以及与其有关的software,并返回华为的name和这些software的stars;7: 请帮我找出software Hadoop的friend的friend的partner;8: 找出全部软件以价值分组的名字, 根据名字升序排序;9: 查询software SprintBoot uses的software,被其他company creates的数量;",
        "output": "查询语句为:1: match(a where a.name='王建聪')-[e:person_commits_software]->(b:software where b.value <> 923) return b limit 83;2: match(a:software) return a.value group by a.id order by a.value desc;3: match(a:person where a.name = '郑思思')-[e:person_belong_company]->(b:company),(c:company where c.name = '阿里')-[e2:company_employee_person]->(d:person)return a, b, c, d;4: match(a:person where name = '王若涵')-[e:person_knows_person]->(b:person)-[e2:person_buy_software]->(c:software) return MAX(c.id - 97);5: match(a:company)-[e:partner]->{1,2}(b) return b;6: match(a:company where name = '华为')-[e]-(b:software) return a.name, b.stars;7: match(a:software where a.name='Hadoop')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d;8: match(a:software) return a.name group by a.value order by a.name asc;9: match(a:software where a.name='SprintBoot')-[e:software_uses_software]->(b:software)<-[e2:company_creates_software]-(c:company) return COUNT(c);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被编辑发布数量大于175的书,记为relationCount,再查询这些书发布的编辑",
        "output": "match(a:book) let a.relationCount = SUM((a:book)<-[e:publish]-(b:publisher) => b.id) match(a where a.relationCount > 175)-[e2:publish]->(c:publisher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 回到韩国。",
        "output": "match(a:country where a.name = '韩国') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减54的值",
        "output": "a.age - 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 帮我查询标签为作家,名为韩伟的点,返回这些点的id,名字,年龄;2: 给出全部源点满足条件name是周梅且id为空且id大于10,目标点满足条件name是呐喊,且label为author_write_book的边;3: 查询前2个类型为publisher_publish_book的边;",
        "output": "查询语句为:1: match(a:author where a.name = '韩伟') return a.id, a.name, a.age;2: match(a where a.name = '周梅' and (a.id is null) and a.id > 10)-[e:author_write_book]->(b where b.name = '呐喊') return e;3: match(a)-[e:publisher_publish_book]->(b) return e limit 2;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询耳鼻喉科医生和部门之间的关系。",
        "output": "match(a:department where a.name='耳鼻喉科')<-[e:belong]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为software的所有点,并根据name升序排列",
        "output": "match(a:software) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找学生的三角的环,边类型为选择, 并返回这些点的id",
        "output": "match(a:student)-[e:selects]->(b)-[e2:selects]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回眼科部门中，与药品生理盐水有关系的节点，包括其名称、ID和地址。",
        "output": "match(a:medicine where a.name='生理盐水')-[e]->(b:department)<-[e2]-(c:department where c.name='眼科') return b.name, b.id, b.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,age分组,计算id减13乘62的值",
        "output": "return (a.id - 13) * 62 group by a.name, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询创造买家黄月取消的订单,的买家",
        "output": "match(a:buyer where name = '黄月')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有买家作为源点、取消作为边类型的边，返回这些边的权重乘以109.31和权重加上155.82后对权重取余的结果。",
        "output": "match(a:buyer)-[e:cancel]->(b) return e.weight * 109.31, e.weight + 155.82 % e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与马梅有关联的电影，以及与马梅有关联的电影。",
        "output": "match(a:person where a.name = '马梅')-[e:watch]->(b:film),(a:person where a.name = '马梅')<-[e2:watch]-(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点标签为用户,边标签为创造的边,返回这些边的权重加权重的值,和权重加124.86的值",
        "output": "match(a:user)-[e:creates]->(b) return e.weight + e.weight, e.weight + 124.86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询109个部门体育学院和计算机学院,共同的相关者",
        "output": "match(a:department where a.name='体育学院')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='计算机学院') return b limit 109",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与杜伟有关且与Redis相关的软件节点。",
        "output": "match(a:person where a.name='杜伟')-[e:buy]-(b:software)-[e2:uses]-(c:software where c.name='Redis') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表79,744,716,673,827, 源点的id等于输入表id,返回前42个身高减166的最小值大于3389的作家",
        "output": "with p as (select * from (VALUES(79),(744),(716),(673),(827)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (MIN(a.height - 166) > 3389)) RETURN a LIMIT 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与订单Order_446有包含关系的1度的环",
        "output": "match(a:orders where name = 'Order_446')-[e:contain]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询LX001的点还款的贷款,然后帮我查询LX001被存款的贷款,一起返回",
        "output": "match(a where a.name = 'LX001')-[e:repay]->(b:loan),(a where a.name = 'LX001')<-[e2:deposit]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找label为person的全部点,并根据性别从大到小排列",
        "output": "match(a:person) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与Bob和何轩有关联的人，返回他们的姓名和薪资。",
        "output": "match(a:person where a.name='Bob')-[e]->(b:person)<-[e2]-(c:person where c.name='何轩') return b.name, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照性别分组，找出所有出版物的年龄，然后按年龄从小到大排序。",
        "output": "match(a:publisher) return a.age group by a.gender order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出姓名为郑宏的人。",
        "output": "match(a:person where a.name = '郑宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person何若涵创造的评论,和何若涵创造的评论",
        "output": "match(a:comment)<-[e:creates]-(b:person where name = '何若涵')-[e2:creates]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "level减1的个数",
        "output": "COUNT(a.level - 1)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前33个满足条件name不是文艺的tag",
        "output": "match(a:tag where a.name <> '文艺') return a limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找doctor diagnose的patient, 令patient的height的值等于diagnosepatient的doctor的salary的和, 再查找patient accept的prescription",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) let b.height = SUM((b:patient)<-[e2:diagnose]-(c:doctor) => c.salary) match(b:patient)-[e3:accept]->(d:prescription) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有一个医生属于某个部门，而该部门下面有某个医生拥有诊断某种疾病的能力，能否帮我找出这些人和他们之间的关系？",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:diagnose]->(d:patient) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与作家韩思思有关系的读者的身高",
        "output": "match(a:author where a.name='韩思思')-[e]-(b:reader) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为王月和王梅的点共同认识的,label为person的节点",
        "output": "match(a where a.name = '王月')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '王梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和公司腾讯之间有合作关系的大学",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询马建国认识的人中，那些购买过软件的人，并返回这些人的购买记录。",
        "output": "match(a where a.name = '马建国')-[e:knows]->(b:person)-[e2:buy]->(c:software) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询标签为post,名为Post_293的点,返回这些点的lang,wordCount,value",
        "output": "match(a:post where a.name = 'Post_293') return a.lang, a.wordCount, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询病人周思思接受的处方,以及创造这些处方的医生",
        "output": "match(a:patient where name = '周思思')-[e:accept]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,height分组,计算salary乘9594除8的最大值",
        "output": "return MAX(a.salary * 9594 / 8) group by a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与label为person的点有likes关系，并且与这些人有pay关系的另外58个人。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person) return c limit 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和book罪与罚有关的author,再请帮我找出和罪与罚refers的其他book,返回它们",
        "output": "match(a:book where a.name = '罪与罚')-[e]-(b:author), (a:book)-[e2:refers]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为14的部门拥有的教师, 并将教师有关的学生的性别的最小值赋值给教师的名字, 接着查询教师的名字小于14的教师教的课程",
        "output": "match(a:department where a.id = 14)-[e:has]->(b:teacher) let b.name = MIN((b:teacher)-[e2]-(c:student) => c.gender) match(b:teacher where b.name < 14)-[e3:teach]->(d:course) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马强knows的person节点knows的person",
        "output": "match(a:person where a.name = '马强')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与用户'李科'有发表关系的帖子，以及与论坛'知乎'有关联的人，并返回它们。",
        "output": "match(a:user where a.name = '李科')-[e:publish]->(b:post),(c:forum where c.name = '知乎')-[e2:contain]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为作家的点,返回69个",
        "output": "match(a:author) return a limit 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person Amily有认识关系的person,再帮我查询以喜欢关系关联了Amily的person",
        "output": "match(a:person where a.name = 'Amily')-[e:knows]->(b:person),(a:person where a.name = 'Amily')<-[e2:likes]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与医生赵强有属于关系的2跳的环",
        "output": "match(a:doctor where name = '赵强')-[e:belong]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,name,height, 数据为(54,'郑轩',170),(49,'韩若涵',151)的子查询作为输入表, 以属性name作为相等条件,请帮我查找卖家郑宏拥有的商品,被其他买家查看的数量",
        "output": "with p as (select * from (VALUES(54,'郑轩',170),(49,'韩若涵',151)) as t(age,name,height))MATCH (a:seller WHERE a.name = p.name AND (a.name = '郑宏')) -[e:seller_has_goods ]->(b:goods) <-[e2:buyer_look_goods ]-(c:buyer) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 排列160个薪水高于2133,薪水高于5293的人的性别，从大到小。",
        "output": "match(a:person where a.salary > 2133 and a.salary > 5293) return a order by a.gender desc limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出185个和label为department的点有department_has_doctor关系的doctor,且和这些doctor有doctor_belong_department关系的department;2: 查询与医生黄科有关,且与处方Prescription_148有关系的病人节点;3: 找出全部皮肤科的点has的doctor,然后找出皮肤科被belong的doctor,一起返回;",
        "output": "查询语句为:1: match(a:department)-[e:department_has_doctor]->(b:doctor)-[e2:doctor_belong_department]->(c:department) return c limit 185;2: match(a:doctor where a.name='黄科')-[e:doctor_diagnose_patient]-(b:patient)-[e2:patient_accept_prescription]-(c:prescription where c.name='Prescription_148') return b;3: match(a where a.name = '皮肤科')-[e:department_has_doctor]->(b:doctor),(a where a.name = '皮肤科')<-[e2:doctor_belong_department]-(c:doctor) return a, b, c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前54个满足条件性别不是famale的作家",
        "output": "match(a:author where a.gender <> 'famale') return a limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出49个与数据结构和高等数学都存在关系的学生或教师节点",
        "output": "match(a where a.name='数据结构')-[e]->(b:student | teacher)<-[e2]-(c where c.name='高等数学') return b limit 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与person吴科有关系的person的性别",
        "output": "match(a:person where a.name='吴科')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与teacher有关系的course节点,且course节点的credit大于4,并返回这些course的credit除credit的最小值,以及course的value加813减31的值",
        "output": "match(a:teacher)-[e]->(b:course where b.credit > 4) return MIN(b.credit / b.credit), b.value + 813 - 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 有79个人与吴国强和马建聪有关联。",
        "output": "match(a where a.name='吴国强')-[e]->(b:person)<-[e2]-(c where c.name='马建聪') return b limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找48个价格不为空且名字不是鞋子的商品,根据销量从小到大排列",
        "output": "match(a:goods where (a.price is not null) and a.name <> '鞋子') return a order by a.sellerNumber asc limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary对3244取余的值",
        "output": "a.salary % 3244",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算id加id的最大值",
        "output": "return MAX(a.id + a.id) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "stars对223取余的最小值",
        "output": "MIN(a.stars % 223)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 帮我查询label为用户的全部点,并根据薪资升序排列;2: 返回103个wordCount不为空或value在136到997之间的post,根据wordCount降序排列;3: 查找标签为forum_contain_person,以及源点id减69除56除523的平均值小于等于853或f1是true或f1小于等于140.01的边;4: 请帮我找出27个论坛CSDN和推特,共同的相关者;5: 返回user的三角的环,边label为user_likes_post, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:user) return a order by a.salary asc;2: match(a:post where (a.wordCount is not null) or (a.value BETWEEN 136 AND 997)) return a order by a.wordCount desc limit 103;3: match(a)-[e:forum_contain_person where AVG((e.srcId - 69) / 56 / 523) <= 853 or e.f1 = true or e.f1 <= 140.01]->(b) return e;4: match(a:forum where a.name='CSDN')-[e:relation]->(b)<-[e2:relation]-(c:forum where c.name='推特') return b limit 27;5: match(a:user)-[e:user_likes_post]->(b)-[e2:user_likes_post]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找knows person郑伟的person,和这些person family的person",
        "output": "match(a:person where name = '郑伟')<-[e:knows]-(b:person)-[e2:family]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询buyer cancel的orders,返回其源点的age除43的值,以及目标点的value乘809的平均值",
        "output": "match(a:buyer)-[e:cancel]->(b:orders) return a.age / 43, AVG(b.value * 809)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为186的person有关的评论的朋友, 再返回和评论有关系的相关者",
        "output": "match(a:person where id = 186)-[e]-(b:comment)-[e2:friend]->(c), (b:comment)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以cooperate关系关联了university武汉大学的company",
        "output": "match(a:university where a.name='武汉大学')<-[e:cooperate]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回公司的朋友,或其朋友的朋友",
        "output": "match(a:company)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与公司腾讯存在合作关系,且与公司谷歌存在合作关系的大学节点，返回这些大学的等级,价值,id,及公司腾讯的名字,及公司谷歌的id",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company where c.name='谷歌') return a.name,b.level, b.value, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询何宏发布的帖子。",
        "output": "match(a:post)<-[e:publish]-(b:user where b.name='何宏') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被买家创造数量大于72的订单,记为relationCount,再查询这些订单创造的订单",
        "output": "match(a:orders) let a.relationCount = MIN((a:orders)<-[e:creates]-(b:buyer) => b.id) match(a where a.relationCount > 72)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对58取余加5097的值",
        "output": "a.id % 58 + 5097",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与标签为'person'的点有拥有关系的账号，找出这些账号的还款关系，找出这些还款关系的贷款，找出这些贷款的存款关系。",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,name, 数据为(19,159,'杜红'),(65,193,'黄宏')的子查询作为输入表, 源点的name等于输入表name,帮我查询所有源点类型为person,目标点类型为person,类型为person_pay_person的边",
        "output": "with p as (select * from (VALUES(19,159,'杜红'),(65,193,'黄宏')) as t(age,height,name))MATCH (a:person WHERE a.name = p.name) -[e:person_pay_person ]->(b:person) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于认识,并且f1为false的边",
        "output": "match(a)-[e:knows where e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 给出person周建聪的label为父母的边,并根据源点id降序排列,返回67个;2: 返回与person吴梅有关,且与person赵若涵有关系的person节点;3: 请帮我查找从person徐国强出发,经过标签为person_lover_person的边,走3跳到达的person点;4: 请帮我查找141个gender不等于male的person,根据salary升序排列;5: 查找和label为person的点有person_friend_person关系的person,并且和这些person有person_parent_person关系的person,并且和这些person有person_friend_person关系的person;",
        "output": "查询语句为:1: match(a:person where a.name = '周建聪')-[e:person_parent_person]->(b) return b order by e.srcId desc limit 67;2: match(a:person where a.name='吴梅')-[e:person_parent_person]-(b:person)-[e2:person_colleague_person]-(c:person where c.name='赵若涵') return b;3: match(a:person where a.name='徐国强')-[e:person_lover_person]->{3,3}(b:person) return b;4: match(a:person where a.gender <> 'male') return a order by a.salary asc limit 141;5: match(a:person)-[e:person_friend_person]->(b:person)-[e2:person_parent_person]->(c:person)-[e3:person_friend_person]->(d:person) return d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,gender, 数据为(174,90,'famale'),(195,9,'famale'),(174,89,'male')的子查询作为输入表, 源点的height等于输入表height,找出person马国强的relation的friend的partner",
        "output": "with p as (select * from (VALUES(174,90,'famale'),(195,9,'famale'),(174,89,'male')) as t(height,id,gender))MATCH (a:person WHERE a.height = p.height AND (a.name = '马国强')) -[e:relation ]->(b) -[e2:friend ]->(c) -[e3:partner ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表36,641,392, 以属性id作为相等条件,查找与公司华为和字节都存在company_cooperate_university关系的点",
        "output": "with p as (select * from (VALUES(36),(641),(392)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '华为')) -[e:company_cooperate_university ]->(b) <-[e2:company_cooperate_university ]-(c:company WHERE c.name = '字节') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为复仇者联盟和变形金刚的,标签为film的点公共的friend节点的名单",
        "output": "match(a:film where a.name='复仇者联盟')-[e:friend]->(b)<-[e2:friend]-(c:film where c.name='变形金刚') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为Prescription_352的,id为空或权重不为空的伙伴,返回这些伙伴的名字,和边的f1,f0,目标点id",
        "output": "match(a where a.name='Prescription_352')-[e:partner]->(b where (b.id is null) or (b.weight is not null)) return b.name,e.f1, e.f0, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前61个名字是BIN或价值大于等于548,且上次登录时间不是2004年04月28日的账号",
        "output": "match(a:account where (a.name = 'BIN' or a.value >= 548) and a.lastLoginTime <> '2004-04-28') return a limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部类型是person或公司的点",
        "output": "match(a:person | company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和person韩红有1跳或2跳关系的person",
        "output": "match(a:person where a.name='韩红')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回146个和label为person的点有family关系的person,并且和这些person有lover关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:lover]->(c:person) return c limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值除53加72的值",
        "output": "MAX(a.id) / 53 + 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家郑思琪 咨询的卖家,返回卖家 回答的买家的id加id乘91对14取余的数量",
        "output": "match(a:buyer where name = '郑思琪')-[e:consult]->(b:seller)-[e2:ask]->(c:buyer) return COUNT((c.id + c.id) * 91 % 14)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被student selects数量大于108的course,记为relationCount,再查询这些course selects的university",
        "output": "match(a:course) let a.relationCount = MIN((a:course)<-[e:selects]-(b:student) => b.id) match(a where a.relationCount > 108)-[e2:selects]->(c:university) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询university has的department,返回其源点的value加414的值,以及目标点的value减value的值",
        "output": "match(a:university)-[e:has]->(b:department) return a.value + 414, b.value - b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找读者王强喜欢的书, 令读者的价格等于书的创建时间, 返回读者的名字, 书的创建时间",
        "output": "match(a:reader where a.name='王强')-[e:likes]->(b:book) let a.price = b.createTime return a.name,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查找和student郑国强有关的university,称为X,再查找和这个X有关联的其他university,以及和X有关联的department;2: 请帮我找出标签为student_selects_course,且srcId不是178,weight小于等于785且targetId大于等于100的边;3: 帮我查询全部和课程大学物理有关系的课程节点,返回这些点的id;4: 查询111个名为生物学院的点拥有的类型为教师的节点,且其名字不等于陈科且年龄大于等于17;5: 给出学生孙思琪的label为伙伴的边,并根据f0升序排列,返回180个;6: 请帮我查找id为186的学生关联的课程,和以选择关系关联了这些课程的其他学生;7: 请帮我查找类型是teacher_teach_course,以及f1不等于false,f0大于970,或目标点id大于等于56的边;8: 查询和student王雪有student_selects_course关系的course,以及和department计算机学院有department_has_student关系的student,将它们都返回;",
        "output": "查询语句为:1: match(a:student where a.name = '郑国强')-[e]-(b:university), (b:university)-[e2]-(c:university),(b:university)-[e3]-(d:department) return a, b, c, d;2: match(a)-[e:student_selects_course where e.srcId <> 178 and e.weight <= 785 and e.targetId >= 100]->(b) return e;3: match(a:course where a.name='大学物理')-[e]-(b:course) return b.id;4: match(a where a.name='生物学院')-[e:department_has_teacher]->(b:teacher where b.name <> '陈科' and b.age >= 17) return b limit 111;5: match(a:student where a.name = '孙思琪')-[e:partner]->(b) return b order by e.f0 asc limit 180;6: match(a:student where a.id = '186')-[e]-(b:course)<-[e2:student_selects_course]-(c:student) return b,c;7: match(a)-[e:teacher_teach_course where (e.f1 <> false and e.f0 > 970) or e.targetId >= 56]->(b) return e;8: match(a:student where a.name = '王雪')-[e:student_selects_course]->(b:course),(c:department where c.name = '计算机学院')-[e2:department_has_student]->(d:student)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和处方Prescription_341之间有包含关系的药品",
        "output": "match(a:prescription where a.name='Prescription_341')-[e:contain]->(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价值分组,计算价值对818取余的值",
        "output": "return a.value % 818 group by a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和部门计算机学院有拥有关系的学生,再查找以拥有关系关联了计算机学院的学生",
        "output": "match(a:department where a.name = '计算机学院')-[e:has]->(b:student),(a:department where a.name = '计算机学院')<-[e2:has]-(c:student)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与教师何思思有关系的学生, 返回和这些学生有关联的教师的,id加85的值",
        "output": "match(a:teacher where a.name= '何思思')-[e]-(b:student)-[e2]-(c:teacher) return c.id + 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询18个名字是黄月的person,根据薪资升序排列",
        "output": "match(a:person where a.name = '黄月') return a order by a.salary asc limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签为教师的全部点,并根据薪资从小到大排列",
        "output": "match(a:teacher) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为孙建国的,薪资在3217到4906之间,身高小于等于192的伙伴,返回这些伙伴的id,和边的时间戳,f0",
        "output": "match(a where a.name='孙建国')-[e:partner]->(b where (b.salary BETWEEN 3217 AND 4906) and b.height <= 192) return b.id,e.timeStamp, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与卖家李若涵存在回答关系,且与商品桌子存在查看关系的买家节点，返回这些买家的名字,身高,年龄,及卖家李若涵的身高,及商品桌子的id",
        "output": "match(a:seller where a.name='李若涵')-[e:ask]->(b:buyer)<-[e2:look]-(c:goods where c.name='桌子') return a.height,b.name, b.height, b.age,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与韩红有恋人关系的对象，以及与韩红有亲属关系的人。",
        "output": "match(a:person where a.name = '韩红')-[e:lover]->(b:person),(a:person where a.name = '韩红')<-[e2:family]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 获取文学院和物理学院，类型为部门节点，共同拥有的'朋友'节点列表。",
        "output": "match(a:department where a.name='文学院')-[e:friend]->(b)<-[e2:friend]-(c:department where c.name='物理学院') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被帖子拥有数量大于49的标签,记为relationCount,再查询这些标签拥有的论坛",
        "output": "match(a:tag) let a.relationCount = SUM((a:tag)<-[e:has]-(b:post) => b.id) match(a where a.relationCount > 49)-[e2:has]->(c:forum) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与country英国有关系的country, 返回和这些country有关联的university的,id的求和值除95的值",
        "output": "match(a:country where a.name= '英国')-[e]-(b:country)-[e2]-(c:university) return SUM(c.id) / 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,id,年龄分组,计算年龄对8取余的值",
        "output": "return a.age % 8 group by a.name, a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回35岁以内性别为女或薪资为1089的女性，并且ID在13到79之间，按照年龄升序排列。",
        "output": "match(a:person where (a.gender <= 57 or a.salary = 1089) and (a.id BETWEEN 13 AND 79)) return a order by a.age asc limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部阿里的点creates的software,然后返回阿里被belong的person,一起返回",
        "output": "match(a where a.name = '阿里')-[e:creates]->(b:software),(a where a.name = '阿里')<-[e2:belong]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Qn', 'cT'作为输入调用triangleCount函数,返回运算结果",
        "output": "Call TRIANGLECOUNT('Qn', 'cT') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找论坛推特的伙伴,的源点id除109对源点id取余的求和值",
        "output": "match(a:forum where a.name= '推特')-[e:partner]->(b) return SUM(e.srcId / 109 % e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部少年闰土的点关联的书,然后返回少年闰土被发布的编辑,一起返回",
        "output": "match(a where a.name = '少年闰土')-[e:relates]->(b:book),(a where a.name = '少年闰土')<-[e2:publish]-(c:publisher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与韩科和绿巨人电影相关的评论节点",
        "output": "match(a:person where a.name='韩科')-[e:creates]-(b:comment)-[e2:belong]-(c:film where c.name='绿巨人') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有包含药品'孙红接受的药品'的处方，然后返回这些处方的权重。",
        "output": "match(a where a.name = '孙红')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询与person吴科有关系的person, 返回和这些person有关联的person的,height对166取余的最大值;2: 请帮我找出person徐若涵 认识的person,返回person 认识的person的id乘73的平均值 ;3: 帮我查询person以gender,height分组的salary, 根据salary降序排序;4: 请帮我找出与person杜科有关系的person, 返回和这些person有关联的person的,height的个数减183的最大值;5: 找出所有id为15的person关联的person,和以knows关系关联了这些person的其他person;6: 帮我查询person马科的全部partner,的srcId的个数加109加148.78的值;7: 找出和person何梅有1跳关系的person;",
        "output": "查询语句为:1: match(a:person where a.name= '吴科')-[e]-(b:person)-[e2]-(c:person) return MAX(c.height % 166);2: match(a:person where name = '徐若涵')-[e:person_knows_person]->(b:person)-[e2:person_knows_person]->(c:person) return AVG(c.id * 73);3: match(a:person) return a.salary group by a.gender, a.height order by a.salary desc;4: match(a:person where a.name= '杜科')-[e]-(b:person)-[e2]-(c:person) return MAX(COUNT(c.height) - 183);5: match(a:person where a.id = '15')-[e]-(b:person)<-[e2:person_knows_person]-(c:person) return b,c;6: match(a:person where a.name= '马科')-[e:partner]->(b) return COUNT(e.srcId) + 109 + 148.78;7: match(a:person where a.name='何梅')-[e]->{1,1}(b:person) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表82, 源点的id等于输入表id,帮我查询与person李强和kate都存在person_likes_person关系的点",
        "output": "with p as (select * from (VALUES(82)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李强')) -[e:person_likes_person ]->(b) <-[e2:person_likes_person ]-(c:person WHERE c.name = 'kate') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算value乘773的和",
        "output": "return SUM(a.value * 773) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出公司腾讯的全部类型为相关者的边,并根据f0升序排列,返回108个",
        "output": "match(a:company where a.name = '腾讯')-[e:relation]->(b) return b order by e.f0 asc limit 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person的partner,或其partner的partner",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与部门传染部存在拥有关系,且与处方Prescription_255存在创造关系的医生节点，返回这些医生的id,身高,薪资,及部门传染部的权重,及处方Prescription_255的创建时间",
        "output": "match(a:department where a.name='传染部')-[e:has]->(b:doctor)<-[e2:creates]-(c:prescription where c.name='Prescription_255') return a.weight,b.id, b.height, b.salary,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person李轩有家人关系的person,再请帮我找出以恋人关系关联了李轩的person",
        "output": "match(a:person where a.name = '李轩')-[e:family]->(b:person),(a:person where a.name = '李轩')<-[e2:lover]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 给出person李雪likes的person节点pay的person;2: 给出名为李梅的点knows的person,并对这些点的height进行求和;3: 请帮我查找标签为person的全部点,并根据gender从大到小排列;4: 帮我查询被person马月支付的person;5: 请帮我查找源点薪资大于9208,边标签为person_pay_person,且满足条件f0减594对178取余的个数大于等于162或f1不等于false,且目标点id大于52的边,返回这些边的f0除622的值;6: 给出id在11到16之间的节点;",
        "output": "查询语句为:1: match(a:person where a.name = '李雪')-[e:person_likes_person]->(b:person)-[e2:person_pay_person]->(c:person) return c;2: match(a where a.name='李梅')-[e:person_knows_person]->(b:person) return SUM(b.height);3: match(a:person) return a order by a.gender desc;4: match(a:person)<-[e:person_pay_person]-(b:person where b.name='马月') return a, b;5: match(a where a.salary > 9208)-[e:person_pay_person where (COUNT(e.f0 - 594 % 178) >= 162 or e.f1 <> false) and e.targetId > 52]->(b) return e.f0 / 622;6: match(a where (a.id BETWEEN 11 AND 16)) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与卖家（seller)相关的商品（goods)节点，按其价值（value)分组并返回。",
        "output": "match(a:seller)-[e:has]-(b:goods) return b.value group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,size,id, 数据为('横店影院',501,4)的子查询作为输入表, 源点的name等于输入表name,请帮我找出以观看关系关联了电影西虹市首富的person",
        "output": "with p as (select * from (VALUES('横店影院',501,4)) as t(name,size,id))MATCH (a:film WHERE a.name = p.name AND (a.name = '西虹市首富')) <-[e:person_watch_film ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据stars,value分组,计算id对id取余减79的和",
        "output": "return SUM(a.id % a.id - 79) group by a.stars, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回从person马建聪出发,经过label为person_likes_person的边,走1度或2度到达的person点;2: 返回所有和person杜思琪之间有person_likes_person关系的person;3: 找出所有源点标签为person,边标签为person_pay_person,并且srcId不为空的边;4: 返回102个名为周雪的点knows的类型是person的节点,且其id减65小于80或name不等于孙红;5: 查询151个名为马雪的点认识的label为person的节点,且节点性别不是male;6: 帮我查询和person陈国强有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person;7: 找出person何轩认识的person节点支付的person;8: 请帮我找出146个名为吴雪的点认识的标签等于person的节点,且节点名字不等于徐轩;",
        "output": "查询语句为:1: match(a:person where a.name='马建聪')-[e:person_likes_person]->{1,2}(b:person) return b;2: match(a:person where a.name='杜思琪')-[e:person_likes_person]->(b:person) return b;3: match(a:person)-[e:person_pay_person where (e.srcId is not null)]->(b) return e;4: match(a where a.name='周雪')-[e:person_knows_person]->(b:person where b.id - 65 < 80 or b.name <> '孙红') return b limit 102;5: match(a where a.name='马雪')-[e:person_knows_person]->(b:person where b.gender <> 'male') return b limit 151;6: match(a:person where a.name = '陈国强')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;7: match(a:person where a.name = '何轩')-[e:person_knows_person]->(b:person)-[e2:person_pay_person]->(c:person) return c;8: match(a where a.name='吴雪')-[e:person_knows_person]->(b:person where b.name <> '徐轩') return b limit 146;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我查找129个id是83的person,根据id从小到大排列;2: 返回与software SprintBoot有关系的company, 返回和这些company有关联的software的,id减77的最大值;3: 给出和company美团有company_creates_software关系的software,再给出以company_creates_software关系关联了美团的software;4: 找出被软件Geaflow使用的软件;5: 计算所有公司的人数减693的平均值;6: 给出148个与张宏和何若涵都存在关系的person节点;7: 找出名为徐宏和吴科的,类型是person的点公共的friend节点的名单;8: 找出所有公司以价值,人数分组的价值, 根据价值降序排序;",
        "output": "查询语句为:1: match(a:person where a.id = 83) return a order by a.id asc limit 129;2: match(a:software where a.name= 'SprintBoot')-[e]-(b:company)-[e2]-(c:software) return MAX(c.id - 77);3: match(a:company where a.name = '美团')-[e:company_creates_software]->(b:software),(a:company where a.name = '美团')<-[e2:company_creates_software]-(c:software)return a, b, c;4: match(a:software)<-[e:software_uses_software]-(b:software where b.name='Geaflow') return a, b;5: match(a:company) return AVG(a.peopleNumber - 693);6: match(a where a.name='张宏')-[e]->(b:person)<-[e2]-(c where c.name='何若涵') return b limit 148;7: match(a:person where a.name='徐宏')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='吴科') return b.name;8: match(a:company) return a.value group by a.value, a.peopleNumber order by a.value desc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出和医生有关联的病人节点,并根据其薪资,性别分组,返回薪资,性别,以及薪资除8618的最大值",
        "output": "match(a:doctor)-[e:doctor_diagnose_patient]-(b:patient) return b.salary, b.gender, MAX(b.salary / 8618) group by b.salary, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有名为'伦敦'且标签为'城市'的点，并返回它们的ID。",
        "output": "match(a:city where a.name = '伦敦') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与公司微软有关,且与国家越南有关系的城市节点",
        "output": "match(a:company where a.name='微软')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='越南') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找卖家吴若涵回答的买家节点创造的订单",
        "output": "match(a:seller where a.name = '吴若涵')-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与吴强和孙建聪有关联的人。",
        "output": "match(a:person where a.name='吴强')-[e:likes]-(b:person)-[e2:likes]-(c:person where c.name='孙建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照薪资分组查找买家姓名，并按照姓氏降序排序。",
        "output": "match(a:buyer) return a.name group by a.salary order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有性别不是女性或身高超过92厘米的男性编辑发布的书，以及这些书的认识书。",
        "output": "match(a:publisher where a.gender <> 'famale' or a.height / 175 > 92)-[e:publish]->(b:book)-[e2:knows]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部id为52的repository关联的repository,和以likes关系关联了这些repository的其他user",
        "output": "match(a:repository where a.id = 52)-[e]-(b:repository)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与账号XXD有转账关系的账号，以及与账号LX001有还款关系的贷款。",
        "output": "match(a:account where a.name = 'XXD')-[e:transfer]->(b:account),(c:account where c.name = 'LX001')-[e2:repay]->(d:loan) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以221,891,284,165,654作为请求点id, 源点的id等于输入表id,返回被patient陈建聪accept的prescription",
        "output": "with p as (select * from (VALUES(221),(891),(284),(165),(654)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) <-[e:patient_accept_prescription ]-(b:patient WHERE b.name = '陈建聪') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(85,189,66),(4,175,83),(86,198,37)作为请求表数据,属性分别为age,height,id, 源点的age等于输入表age,请帮我查找全部和药品枇杷糖浆有关系的病人节点,返回这些点的年龄,性别",
        "output": "with p as (select * from (VALUES(85,189,66),(4,175,83),(86,198,37)) as t(age,height,id))MATCH (a:medicine WHERE a.age = p.age AND (a.name = '枇杷糖浆')) -[e ]-(b:patient) RETURN b.age, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出公司申请的贷款,返回其源点的价值对价值取余的平均值,以及目标点的金额对6447.19取余除8097.26对金额取余减7630.34的最小值",
        "output": "match(a:company)-[e:apply]->(b:loan) return AVG(a.value % a.value), MIN(b.amount % 6447.19 / 8097.26 % b.amount - 7630.34)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回salary大于3957的person knows的person的名称,以及这些person relates的person的名称",
        "output": "match(a:person where a.salary > 3957)-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询38个同时与Comment_169和Comment_126有关系的标签节点。",
        "output": "match(a where a.name='Comment_169')-[e]->(b:tag)<-[e2]-(c where c.name='Comment_126') return b limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以681,831,289,391,300作为请求点id, 以属性id作为相等条件,查找所有数学学院的点拥有的学生,然后查找数学学院被拥有的大学,一起返回",
        "output": "with p as (select * from (VALUES(681),(831),(289),(391),(300)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '数学学院')) -[e:department_has_student ]->(b:student) , (a WHERE a.name = '数学学院') <-[e2:university_has_department ]-(c:university) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点标签等于person,边标签等于认识,以及满足条件源点id在71到104之间或f1大于等于886,且f0小于95的边",
        "output": "match(a:person)-[e:knows where ((e.srcId BETWEEN 71 AND 104) or e.f1 >= 886) and e.f0 < 95]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为郑宏的publisher,以及与其有关的reader,并返回郑宏的name和这些reader的gender",
        "output": "match(a:publisher where name = '郑宏')-[e]-(b:reader) return a.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与李国强有关的人，然后找出这些人的同事，最后返回这些人。",
        "output": "match(a:person where a.name = '李国强')-[e]-(b:person), (a:person)-[e2:colleague]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和标签等于buyer的点有consult关系的seller,且和这些seller有ask关系的buyer,且和这些buyer有look关系的goods",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:look]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签为论坛的点有包含关系的用户,且和这些用户有发布关系的帖子,且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:publish]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与person有关系的公司节点,且公司节点的规格为large,并返回这些公司的id减id的个数,以及公司的value的最大值乘829的平均值",
        "output": "match(a:person)-[e]->(b:company where b.scale = 'large') return COUNT(b.id - b.id), AVG(MAX(b.value) * 829)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为Kafka的,id不是81,开源不是false的相关者,返回这些相关者的开源,和边的权重,目标点id",
        "output": "match(a where a.name='Kafka')-[e:relation]->(b where b.id <> 81 and b.openSource <> false) return b.openSource,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为郑思琪和韩雪的,类型是用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='郑思琪')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='韩雪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与城市伦敦和广州都存在包含关系的点",
        "output": "match(a:city where a.name='伦敦')-[e:contain]->(b)<-[e2:contain]-(c:city where c.name='广州') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为94的公司有关的国家的朋友, 再给出和国家有关系的相关者",
        "output": "match(a:company where id = 94)-[e]-(b:country)-[e2:friend]->(c), (b:country)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 查询与account BIN存在account_transfer_account关系,且与loan defaultName存在account_repay_loan关系的account节点，返回这些account的isBlock,name,lastLoginTime,及account BIN的lastLoginTime,及loan defaultName的amount;2: 帮我查询名为张伟的,amount小于2042.99,id小于等于10的partner,返回这些partner的amount,和边的weight,srcId,f0;3: 请帮我找出和person马梅有person_own_account关系的账号,以及和账号TheShy有account_transfer_account关系的账号,将它们都返回;4: 帮我查询person以身高分组的名字, 根据名字降序排序;5: 请帮我找出176个person周强和郑思思,共同的伙伴;6: 帮我查询weight加281对71取余不是35或id小于47,且weight为空的节点;7: 请帮我找出与loan defaultName有关,且与loan defaultName有关系的account节点;8: 给出源点lastLoginTime不是2014年10月24日且name等于Faker,或name不等于Light,边类型为account_repay_loan,且满足条件timeStamp不等于1999年05月09日或weight小于等于182.89,且weight对160.11取余大于189的边,返回这些边的srcId除5的值;9: 给出类型是公司的所有点,并根据人数从小到大排列;",
        "output": "查询语句为:1: match(a:account where a.name='BIN')-[e:account_transfer_account]->(b:account)<-[e2:account_repay_loan]-(c:loan where c.name='defaultName') return a.lastLoginTime,b.isBlock, b.name, b.lastLoginTime,c.amount;2: match(a where a.name='张伟')-[e:partner]->(b where b.amount < 2042.99 and b.id <= 10) return b.amount,e.weight, e.srcId, e.f0;3: match(a:person where a.name = '马梅')-[e:person_own_account]->(b:account),(c:account where c.name = 'TheShy')-[e2:account_transfer_account]->(d:account)return a, b, c, d;4: match(a:person) return a.name group by a.height order by a.name desc;5: match(a:person where a.name='周强')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='郑思思') return b limit 176;6: match(a where (a.weight + 281 % 71 <> 35 or a.id < 47) and (a.weight is null)) return a;7: match(a:loan where a.name='defaultName')-[e:loan_deposit_account]-(b:account)-[e2:account_repay_loan]-(c:loan where c.name='defaultName') return b;8: match(a where (a.lastLoginTime <> '2014-10-24' and a.name = 'Faker') or a.name <> 'Light')-[e:account_repay_loan where (e.timeStamp <> '1999-05-09' or e.weight <= 182.89) and e.weight % 160.11 > 189]->(b) return e.srcId / 5;9: match(a:company) return a order by a.peopleNumber asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 查找所有源点类型为person,边类型为person_own_account,以及weight不等于159.90,f0大于730,srcId减62为122.83的边;2: 查询名为黄梅的点申请的贷款;3: 帮我查询所有company以value分组的value, 根据value从小到大排序;4: 请帮我找出id为42的点的身高,年龄,id;",
        "output": "查询语句为:1: match(a:person)-[e:person_own_account where e.weight <> 159.90 and e.f0 > 730 and e.srcId - 62 = 122.83]->(b) return e;2: match(a where a.name='黄梅')-[e:person_apply_loan]->(b:loan) return b;3: match(a:company) return a.value group by a.value order by a.value asc;4: match(a where a.id = '42') return a.height, a.age, a.id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与王月有has关系的department。",
        "output": "match(a:student where a.name='王月')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为陈建聪的点belong的department",
        "output": "match(a where a.name='陈建聪')-[e:belong]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回点名为Prescription_175的数据类型，并返回这些点的重量。",
        "output": "match(a:prescription where a.name = 'Prescription_175') return a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出43个医生何建国和杜思思,共同的伙伴",
        "output": "match(a:doctor where a.name='何建国')-[e:partner]->(b)<-[e2:partner]-(c:doctor where c.name='杜思思') return b limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出company Bilibili employee的person,返回person commits的software的value对801取余加96的值",
        "output": "match(a:company where name = 'Bilibili')-[e:employee]->(b:person)-[e2:commits]->(c:software) return c.value % 801 + 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(60,'其他',184),(58,'喜剧',59)作为请求表数据,属性分别为id,name,value, 以属性value作为相等条件,查找和forum有关联的post节点,并根据其value,name分组,返回value,name,以及wordCount对366取余的值",
        "output": "with p as (select * from (VALUES(60,'其他',184),(58,'喜剧',59)) as t(id,name,value))MATCH (a:forum WHERE a.value = p.value) -[e:forum_contain_post ]-(b:post) RETURN b.value, b.name, b.wordCount % 366 GROUP BY b.value, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出175个与Redis和SprintBoot都存在关系的person或公司或软件节点",
        "output": "match(a where a.name='Redis')-[e]->(b:person | company | software)<-[e2]-(c where c.name='SprintBoot') return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点label为仓库,目标点label为合并请求,label为合并请求或事项的边",
        "output": "match(a:repository)-[e:pullRequest | issue]->(b:pullRequest) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出99个销量不等于1565.77且名字等于手机的商品,根据id升序排列",
        "output": "match(a:goods where a.sellerNumber <> 1565.77 and a.name = '手机') return a order by a.id asc limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出person的friend,或其friend的friend",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从loan loan_22出发,经过label为deposit的边,走2度到达的account点",
        "output": "match(a:loan where a.name='loan_22')-[e:deposit]->{2,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有person的朋友,或其朋友的朋友",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值对184取余的平均值",
        "output": "AVG(a.value % 184)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person Jimmy relates的person, 令person的height等于person的id除94对30取余, 返回person(a)的name, person(b)的age",
        "output": "match(a:person where a.name='Jimmy')-[e:relates]->(b:person) let a.height = a.id / 94 % 30 return a.name,b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,id,name, 数据为('famale',10,'韩梅'),('famale',54,'孙若涵'),('male',59,'徐宏'), 以属性id作为相等条件,帮我查询前5个label为company_creates_software的边",
        "output": "with p as (select * from (VALUES('famale',10,'韩梅'),('famale',54,'孙若涵'),('male',59,'徐宏')) as t(gender,id,name))MATCH (a WHERE a.id = p.id) -[e:company_creates_software ]->(b) RETURN e LIMIT 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找名叫做郑梅，标签为teacher的点，返回它们的性别和身高。",
        "output": "match(a:teacher where a.name = '郑梅') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生属于的部门,返回其源点的薪资对2367取余的值,以及目标点的权重减702的值",
        "output": "match(a:doctor)-[e:belong]->(b:department) return a.salary % 2367, b.weight - 702",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询电影节点下，评论Comment_106所属的标签。",
        "output": "match(a:comment where a.name = 'Comment_106')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与电影《复仇者联盟》相关的标签，然后再返回与《复仇者联盟》有关联的标签。",
        "output": "match(a:film where a.name = '复仇者联盟')-[e:has]->(b:tag),(a:film where a.name = '复仇者联盟')<-[e2:has]-(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和课程线性代数有2到5跳关系的部门",
        "output": "match(a:course where a.name='线性代数')-[e]->{2,5}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出论坛包含的用户,返回其源点的人数加372除id的值,以及目标点的id的个数对54取余的平均值",
        "output": "match(a:forum)-[e:contain]->(b:user) return (a.peopleNumber + 372) / a.id, AVG(COUNT(b.id) % 54)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和名为徐科的买家有伙伴关系,或有伙伴的伙伴关系的卖家",
        "output": "match(a:buyer where n.name=徐科)-[e:partner]->{1,2}(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与部门传染部有关系的处方的权重",
        "output": "match(a:department where a.name='传染部')-[e]-(b:prescription) return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回陈科的朋友的朋友的朋友",
        "output": "match(a:person where a.name='陈科')-[e:friend]->(b)-[e2:colleague]->(c)-[e3:colleague]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以597,946,711作为请求点id, 源点的id等于输入表id,给出名为复旦大学的university,以及与其有关的course,并返回复旦大学的name和这些course的id",
        "output": "with p as (select * from (VALUES(597),(946),(711)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (name = '复旦大学')) -[e ]-(b:course) RETURN a.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查询名为周宏和郑梅的,label为user的点公共的friend节点的名单;2: 查找和user李思琪有关系的prescription节点,返回这些点的createTime,id,weight;3: 返回15个权重不是819或权重大于等于142,且id小于等于11的处方,根据创建时间从大到小排列;4: 给出标签为处方的所有点,并根据名字从小到大排列;",
        "output": "查询语句为:1: match(a:user where a.name='周宏')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='郑梅') return b.name;2: match(a:user where a.name='李思琪')-[e]-(b:prescription) return b.createTime, b.id, b.weight;3: match(a:prescription where (a.weight <> 819 or a.weight >= 142) and a.id <= 11) return a order by a.createTime desc limit 15;4: match(a:prescription) return a order by a.name asc;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出47个与国家有包含关系的城市，以及与这些城市有包含关系的公司。",
        "output": "match(a:country)-[e:contain]->(b:city)-[e2:contain]->(c:company) return c limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出清华大学的friend关系",
        "output": "match(a:university where a.name='清华大学')-[e:relation]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 给出名为defaultName的贷款;2: 请帮我查找所有源点是否冻结等于true或名字不等于BIN或价值小于等于484,目标点id为空,且label为account_repay_loan的边;3: 请帮我查找所有与公司华为有关系的person的性别;4: 返回person Alice的所有label为相关者的边,并根据目标点id从小到大排列,返回51个;5: 查询所有源点满足条件id小于34且name为腾讯,目标点满足条件amount等于5578.82,且类型是company_apply_loan的边;",
        "output": "查询语句为:1: match(a:loan where a.name = 'defaultName') return a;2: match(a where a.isBlock = true or a.name <> 'BIN' or a.value <= 484)-[e:account_repay_loan]->(b where (b.id is null)) return e;3: match(a:company where a.name='华为')-[e]-(b:person) return b.gender;4: match(a:person where a.name = 'Alice')-[e:relation]->(b) return b order by e.targetId asc limit 51;5: match(a where a.id < 34 and a.name = '腾讯')-[e:company_apply_loan]->(b where b.amount = 5578.82) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询共同认识周建国和马建聪的人，标签为'person'的节点。",
        "output": "match(a where a.name = '周建国')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '马建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出杜梅选择的课程和体育学院拥有的教师，返回它们。",
        "output": "match(a:student where a.name = '杜梅')-[e:selects]->(b:course),(c:department where c.name = '体育学院')-[e2:has]->(d:teacher) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,age, 数据为('黄宏',155,44), 源点的name等于输入表name,查询从post Post_173出发,经过类型为post_has_tag的边,走2跳到达的tag点",
        "output": "with p as (select * from (VALUES('黄宏',155,44)) as t(name,height,age))MATCH (a:post WHERE a.name = p.name AND (a.name = 'Post_173')) -[e:post_has_tag ]->{2,2}(b:tag) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有publisher为呐喊的book的价格差和价格除以74的结果",
        "output": "match(a:publisher)-[e]->(b:book where b.name = '呐喊') return b.price - b.price, b.price / 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以74,485,738,815作为请求点id, 源点的id等于输入表id,帮我查询全部和person吴建国有关系的账号节点,返回这些点的上次登录时间,是否冻结",
        "output": "with p as (select * from (VALUES(74),(485),(738),(815)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴建国')) -[e ]-(b:account) RETURN b.lastLoginTime, b.isBlock ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询黄思思和李轩共同喜欢的人的节点，类型为person。",
        "output": "match(a where a.name = '黄思思')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '李轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出forum知乎contain的post,以及likes这些post的user, 令forum的salary等于user的id减93乘id, 返回forum的createTime,post的lang,user的id",
        "output": "match(a:forum where name = '知乎')-[e:contain]->(b:post)<-[e2:likes]-(c:user) let a.salary = (c.id - 93) * c.id return a.createTime,b.lang,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 找出和person赵梅有person_likes_person关系的person,以及和person徐强有person_knows_person关系的person,将它们都返回;2: 找出person李红喜欢的person,被其他person认识的数量;3: 查找person李建国的所有类型是partner的边,并根据srcId从小到大排列,返回167个;4: 查找全部名为韩红的,age大于12且age为空的friend,返回这些friend的age,和边的weight,targetId;5: 请帮我查找名为孙建聪和孙科的,类型为person的点公共的partner节点的名单;6: 返回源点身高不等于165且薪资不为空,边label为person_pay_person,且f0小于等于995且f1是false,f1为false的边,返回这些边的权重对147.95取余的个数;7: 请帮我找出person张梅的标签等于相关者的边,并根据时间戳升序排列,返回172个;8: 返回标签为person_likes_person,且源点id不为空的边;9: 请帮我找出全部源点类型是person,目标点类型是person,类型是person_pay_person的边;",
        "output": "查询语句为:1: match(a:person where a.name = '赵梅')-[e:person_likes_person]->(b:person),(c:person where c.name = '徐强')-[e2:person_knows_person]->(d:person)return a, b, c, d;2: match(a:person where a.name='李红')-[e:person_likes_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);3: match(a:person where a.name = '李建国')-[e:partner]->(b) return b order by e.srcId asc limit 167;4: match(a where a.name='韩红')-[e:friend]->(b where b.age > 12 and (b.age is null)) return b.age,e.weight, e.targetId;5: match(a:person where a.name='孙建聪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='孙科') return b.name;6: match(a where a.height <> 165 and (a.salary is not null))-[e:person_pay_person where e.f0 <= 995 and e.f1 = false and e.f1 = false]->(b) return COUNT(e.weight % 147.95);7: match(a:person where a.name = '张梅')-[e:relation]->(b) return b order by e.timeStamp asc limit 172;8: match(a)-[e:person_likes_person where (e.srcId is not null)]->(b) return e;9: match(a:person)-[e:person_pay_person]->(b:person) return e;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person吴建聪apply的loan,和吴建聪own的account",
        "output": "match(a:loan)<-[e:apply]-(b:person where name = '吴建聪')-[e2:own]->(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表808, 源点的id等于输入表id,查找用户的2跳以内的环",
        "output": "with p as (select * from (VALUES(808)) as t(id)) MATCH (a:user WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回130个名为陈建国的点关联的标签为person的节点,且其年龄不为空",
        "output": "match(a where a.name='陈建国')-[e:relates]->(b:person where (b.age is not null)) return b limit 130",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算age加36的值",
        "output": "return a.age + 36 group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以638,299,448,950,301作为请求点id, 以属性id作为相等条件,请帮我查找和orders有关联的goods节点,并根据其name,sellerNumber,category分组,返回name,sellerNumber,category,以及sellerNumber除1906.94的最大值",
        "output": "with p as (select * from (VALUES(638),(299),(448),(950),(301)) as t(id)) MATCH (a:orders WHERE a.id = p.id) -[e:orders_contain_goods ]-(b:goods) RETURN b.name, b.sellerNumber, b.category, MAX(b.sellerNumber / 1906.94) GROUP BY b.name, b.sellerNumber, b.category ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与处方有关的患者节点，其中患者的身高大于等于169。然后返回这些患者节点的身高除以171取余的个数，以及他们的工资除以工资对178取余的值。",
        "output": "match(a:prescription)-[e]->(b:patient where b.height >= 169) return COUNT(b.height % 171), b.salary / b.salary % 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前140个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回李红所属的公司和谷歌创建的软件。",
        "output": "match(a:person where a.name = '李红')-[e:belong]->(b:company),(c:company where c.name = '谷歌')-[e2:creates]->(d:software) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找Tugraph的点拥有的合并请求,然后查找Tugraph被属于的合并请求,一起返回",
        "output": "match(a where a.name = 'Tugraph')-[e:has]->(b:pullRequest),(a where a.name = 'Tugraph')<-[e2:belong]-(c:pullRequest) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height对height取余的最大值",
        "output": "MAX(a.height % a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询仓库拥有的合并请求,返回其源点的weight的数量除694的最大值,以及目标点的id加35的值",
        "output": "match(a:repository)-[e:has]->(b:pullRequest) return MAX(COUNT(a.weight) / 694), b.id + 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表665,245, 源点的id等于输入表id,查询标签等于university_belong_city,且f0不等于589且权重不等于172.86且权重不等于183.83的边",
        "output": "with p as (select * from (VALUES(665),(245)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:university_belong_city WHERE e.f0 <> 589 AND e.weight <> 172.86 AND e.weight <> 183.83 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,lang,name, 数据为(632,'go','Geaflow'),(330,'java','Mysql'),(371,'python','Hadoop')的子查询作为输入表, 源点的name等于输入表name,返回和person黄建聪有person_knows_person关系的person,再返回以person_buy_software关系关联了黄建聪的software",
        "output": "with p as (select * from (VALUES(632,'go','Geaflow'),(330,'java','Mysql'),(371,'python','Hadoop')) as t(value,lang,name))MATCH (a:person WHERE a.name = p.name AND (a.name = '黄建聪')) -[e:person_knows_person ]->(b:person) , (a:person WHERE a.name = '黄建聪') <-[e2:person_buy_software ]-(c:software) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出169个与UME和横店影院都存在关系的电影院节点",
        "output": "match(a where a.name='UME')-[e]->(b:cinema)<-[e2]-(c where c.name='横店影院') return b limit 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,id, 数据为(44,171,37)的子查询作为输入表, 源点的id等于输入表id,返回63个seller孙梅和王科,共同的relation",
        "output": "with p as (select * from (VALUES(44,171,37)) as t(age,height,id))MATCH (a:seller WHERE a.id = p.id AND (a.name = '孙梅')) -[e:relation ]->(b) <-[e2:relation ]-(c:seller WHERE c.name = '王科') RETURN b LIMIT 63",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下名为李建聪、标签为读者的点，把它们的名字列出来",
        "output": "match(a:reader where a.name = '李建聪') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为patient，名字为Jack的所有点，并返回它们的gender和height信息。",
        "output": "match(a:patient where a.name = 'Jack') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出person源点类型为apply的边，返回targetId对29取余的值和srcId减126的值。",
        "output": "match(a:person)-[e:apply]->(b) return MIN(e.targetId) % 29, e.srcId - 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以630,945,145作为请求点id, 以属性id作为相等条件,给出和forum知网有forum_contain_post关系的post,以及和post Post_358有post_has_tag关系的tag,将它们都返回",
        "output": "with p as (select * from (VALUES(630),(945),(145)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '知网')) -[e:forum_contain_post ]->(b:post) , (c:post WHERE c.name = 'Post_358') -[e2:post_has_tag ]->(d:tag) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与杭州存在归属关系的国家，以及这些国家中包含杭州的城市，并返回这些城市的名称。",
        "output": "match(a where a.name = '杭州')-[e:belong]->(b:country)-[e2:contain]->(c:city) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和公司蚂蚁集团有3到6跳关系的软件",
        "output": "match(a:company where a.name='蚂蚁集团')-[e]->{3,6}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询seller孙梅的relation,的srcId的和对srcId取余的值",
        "output": "match(a:seller where a.name= '孙梅')-[e:relation]->(b) return SUM(e.srcId) % e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创建时间不是2008年01月02日且语言是python且名字是FSM的节点",
        "output": "match(a where a.createTime <> '2008-01-02' and a.lang = 'python' and a.name = 'FSM') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以194,9,478作为请求点id, 源点的id等于输入表id,找出person韩强的全部朋友,的目标点id除30的值",
        "output": "with p as (select * from (VALUES(194),(9),(478)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩强')) -[e:friend ]->(b) RETURN e.targetId / 30 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询黄强和赵强共同创造的点。",
        "output": "match(a:user where a.name='黄强')-[e:creates]->(b)<-[e2:creates]-(c:user where c.name='赵强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查询person王若涵的父母,的权重对127.26取余的最小值;2: 请帮我找出名为马科的person;3: 帮我查询id为88的person关联的person,和以关联关系关联了这些person的其他person;",
        "output": "查询语句为:1: match(a:person where a.name= '王若涵')-[e:person_parent_person]->(b) return MIN(e.weight % 127.26);2: match(a:person where a.name = '马科') return a;3: match(a:person where a.id = '88')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找满足条件价值为空或人数不是677或人数大于895的节点",
        "output": "match(a where (a.value is null) or a.peopleNumber <> 677 or a.peopleNumber > 895) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,createTime,id, 数据为('Comment_464',2013-12-21,54)的子查询作为输入表, 以属性name作为相等条件,查询与名为孙国强和Alan的点共同创造的,标签等于评论的节点",
        "output": "with p as (select * from (VALUES('Comment_464',2013-12-21,54)) as t(name,createTime,id))MATCH (a WHERE a.name = p.name AND (a.name = '孙国强')) -[e:person_creates_comment ]->(b:comment) <-[e2:person_creates_comment ]-(c WHERE c.name = 'Alan') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person孙思琪和黄若涵都存在认识关系的点",
        "output": "match(a:person where a.name='孙思琪')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='黄若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与部门相关的医生节点，并按性别进行分组，最后返回性别信息。",
        "output": "match(a:department)-[e:has]-(b:doctor) return b.gender group by b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有标记为'person'且与名为杜轩和韩强的节点有关系的节点。",
        "output": "match(a where a.name = '杜轩')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '韩强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为68的buyer consult的seller, 并将seller有关的orders的price的求和值赋值给seller的name, 接着查询seller的name小于68的seller has的goods",
        "output": "match(a:buyer where a.id = 68)-[e:consult]->(b:seller) let b.name = SUM((b:seller)-[e2]-(c:orders) => c.price) match(b:seller where b.name < 68)-[e3:has]->(d:goods) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回155个与Mybatis和Kafka都存在关系的repository或user节点",
        "output": "match(a where a.name='Mybatis')-[e]->(b:repository | user)<-[e2]-(c where c.name='Kafka') return b limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与合并请求PR-354有关系的合并请求的名字",
        "output": "match(a:pullRequest where a.name='PR-354')-[e]-(b:pullRequest) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有country的id加3的求和值",
        "output": "match(a:country) return SUM(a.id + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 返回所有和person吴若涵之间有person_colleague_person关系的person;2: 返回全部id为187的person关联的person,和以knows关系关联了这些person的其他person;3: 给出id为161的点的name;4: 帮我查询全部名为黄红的,salary为8619,height不是180的friend,返回这些friend的age,和边的f0,f1;",
        "output": "查询语句为:1: match(a:person where a.name='吴若涵')-[e:person_colleague_person]->(b:person) return b;2: match(a:person where a.id = '187')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c;3: match(a where a.id = '161') return a.name;4: match(a where a.name='黄红')-[e:person_friend_person]->(b where b.salary = 8619 and b.height <> 180) return b.age,e.f0, e.f1;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与买家或买家相关者有关的人。",
        "output": "match(a:buyer)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "level乘1的数量",
        "output": "COUNT(a.level * 1)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为12的department has的student, 并将student有关的university的value的平均值赋值给student的name, 接着查询student的name小于12的student selects的course",
        "output": "match(a:department where a.id = 12)-[e:has]->(b:student) let b.name = AVG((b:student)-[e2]-(c:university) => c.value) match(b:student where b.name < 12)-[e3:selects]->(d:course) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以contain关系关联了university北京大学的city",
        "output": "match(a:university where a.name='北京大学')<-[e:contain]-(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点语言不是687,边类型为拥有,且满足条件目标点id不为空且源点id大于20,或f1为true的边,返回这些边的目标点id除65的个数",
        "output": "match(a where a.lang <> 687)-[e:has where ((e.targetId is not null) and e.srcId > 20) or e.f1 = true]->(b) return COUNT(e.targetId / 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 取消与买家黄伟的关联订单，再返回已创建的与黄伟有关的订单。",
        "output": "match(a:buyer where a.name = '黄伟')-[e:creates]->(b:orders),(a:buyer where a.name = '黄伟')<-[e2:cancel]-(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以watch关系关联了film绿巨人的person",
        "output": "match(a:film where a.name='绿巨人')<-[e:watch]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出142个id为空的国家,根据id从大到小排列",
        "output": "match(a:country where (a.id is null)) return a order by a.id desc limit 142",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出还款贷款loan_11的账号,和这些账号转账的账号",
        "output": "match(a:loan where name = 'loan_11')<-[e:repay]-(b:account)-[e2:transfer]->(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与读者陈若涵有关系的作家的年龄",
        "output": "match(a:reader where a.name='陈若涵')-[e]-(b:author) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与杜建聪存在创造关系的评论,评论与电影存在属于关系的点,返回这些点的id",
        "output": "match(a where a.name = '杜建聪')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为125的点的身高,名字",
        "output": "match(a where a.id = 125) return a.height, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与book悲惨世界有关系的author, 返回和这些author有关联的author的,salary减8881的最小值",
        "output": "match(a:book where a.name= '悲惨世界')-[e]-(b:author)-[e2]-(c:author) return MIN(c.salary - 8881)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 返回所有名为杜国强的,id在16到74之间或value在182到280之间的relation,返回这些relation的id,和边的timeStamp;2: 请帮我查找名为Order_480的orders,以及与其有关的orders,并返回Order_480的value和这些orders的name;3: 查找110个与Order_454和Order_485都存在关系的buyer节点;4: 找出全部卖家以id,薪资,年龄分组的身高, 根据身高降序排序;5: 找出所有和buyer黄若涵之间有buyer_cancel_orders关系的orders;6: 给出所有名为郑梅的,名字是手机的相关者,返回这些相关者的价值,和边的目标点id,源点id,f1;",
        "output": "查询语句为:1: match(a where a.name='杜国强')-[e:relation]->(b where (b.id BETWEEN 16 AND 74) or (b.value BETWEEN 182 AND 280)) return b.id,e.timeStamp;2: match(a:orders where name = 'Order_480')-[e]-(b:orders) return a.value, b.name;3: match(a where a.name='Order_454')-[e]->(b:buyer)<-[e2]-(c where c.name='Order_485') return b limit 110;4: match(a:seller) return a.height group by a.id, a.salary, a.age order by a.height desc;5: match(a:buyer where a.name='黄若涵')-[e:buyer_cancel_orders]->(b:orders) return b;6: match(a where a.name='郑梅')-[e:relation]->(b where b.name = '手机') return b.value,e.targetId, e.srcId, e.f1;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为28的doctor belong的department, 并将department有关的patient的gender的最大值赋值给department的id, 接着查询department的id小于28的department has的doctor",
        "output": "match(a:doctor where a.id = 28)-[e:belong]->(b:department) let b.id = MAX((b:department)-[e2]-(c:patient) => c.gender) match(b:department where b.id < 28)-[e3:has]->(d:doctor) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询陈若涵和孙宏共同的朋友。",
        "output": "match(a:user where a.name='陈若涵')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='孙宏') return b limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和评论Comment_134之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_134')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "人数加人数的值",
        "output": "a.peopleNumber + a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边label为认识, 并返回这些点的id",
        "output": "match(a:person)-[e:knows]->(b)-[e2:knows]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我找出151个名为吴建聪的点creates的标签等于prescription的节点,且节点name是Prescription_325或name不是Prescription_326;2: 帮我查询处方以名字,权重分组的创建时间, 根据创建时间从小到大排序;3: 请帮我查找所有源点满足条件身高大于150或性别不是male,且名字不等于何建国,目标点满足条件地址不等于北区,且类型是doctor_belong_department的边;4: 请帮我查找所有名为Prescription_185的点的,category不是感冒药,price小于267的relation,返回这些relation的weight,和边的weight;5: 给出与doctor马强存在doctor_diagnose_patient关系,且与prescription Prescription_234存在patient_accept_prescription关系的patient节点，返回这些patient的salary,及doctor马强的height,及prescription Prescription_234的createTime;",
        "output": "查询语句为:1: match(a where a.name='吴建聪')-[e:doctor_creates_prescription]->(b:prescription where b.name = 'Prescription_325' or b.name <> 'Prescription_326') return b limit 151;2: match(a:prescription) return a.createTime group by a.name, a.weight order by a.createTime asc;3: match(a where (a.height > 150 or a.gender <> 'male') and a.name <> '何建国')-[e:doctor_belong_department]->(b where b.address <> '北区') return e;4: match(a where a.name='Prescription_185')-[e:relation]->(b where b.category <> '感冒药' and b.price < 267) return b.weight,e.weight;5: match(a:doctor where a.name='马强')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:patient_accept_prescription]-(c:prescription where c.name='Prescription_234') return a.height,b.salary,c.createTime;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 返回146个weight大于328或weight大于4220.66或weight小于等于638的loan,根据amount升序排列;2: 请帮我查找所有和person张红有3到6度关系的公司;3: 查询名为TheShy的点transfer的account;4: 查询90个名为张强的点invest的类型为company的节点,且节点scale不是medium;5: 查找源点类型是person,目标点类型是loan,类型是person_apply_loan的边;6: 请帮我查找id为107的点的weight,id;7: 查找id为31的company有关的account的friend, 再查找和account有关系的partner;",
        "output": "查询语句为:1: match(a:loan where a.weight > 328 or a.weight > 4220.66 or a.weight <= 638) return a order by a.amount asc limit 146;2: match(a:person where a.name='张红')-[e]->{3,6}(b:company) return b;3: match(a where a.name='TheShy')-[e:account_transfer_account]->(b:account) return b;4: match(a where a.name='张强')-[e:person_invest_company]->(b:company where b.scale <> 'medium') return b limit 90;5: match(a:person)-[e:person_apply_loan]->(b:loan) return e;6: match(a where a.id = '107') return a.weight, a.id;7: match(a:company where id = '31')-[e]-(b:account)-[e2:friend]->(c), (b:account)-[e3:partner]->(d) return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为f0,f1,srcId, 数据为(953,true,45)的子查询作为输入表, 源点的f0等于输入表f0,帮我查询所有id为103的medicine关联的patient,和以diagnose关系关联了这些patient的其他doctor",
        "output": "with p as (select * from (VALUES(953,true,45)) as t(f0,f1,srcId))MATCH (a:medicine WHERE a.f0 = p.f0 AND (a.id = '103')) -[e ]-(b:patient) <-[e2:doctor_diagnose_patient ]-(c:doctor) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找作家何梅的全部朋友,的f0乘f0的最小值",
        "output": "match(a:author where a.name= '何梅')-[e:friend]->(b) return MIN(e.f0 * e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定读者源点，喜欢边标签，返回目标点ID为1的边数以及目标点ID为51的边值。",
        "output": "match(a:reader)-[e:likes]->(b) return COUNT(e.targetId * 1), e.targetId * 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表82,733,588, 源点的id等于输入表id,查找全部和名为李月的seller有partner关系,或有partner的partner关系的goods",
        "output": "with p as (select * from (VALUES(82),(733),(588)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (n.name = 李月)) -[e:partner ]->{1,2}(b:goods) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与一个用户相关的所有其他用户，以及这些其他用户之间的相关关系。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和帖子Post_240有关系的帖子或用户或标签,返回这些点的身高,id,性别",
        "output": "match(a:post where a.name='Post_240')-[e]-(b:post | user | tag) return b.height, b.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Prescription_277且标签为处方的点，并返回它们的id和权重。",
        "output": "match(a:prescription where a.name = 'Prescription_277') return a.id, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件id小于等于65且名字不是赵科的节点",
        "output": "match(a where a.id <= 65 and a.name <> '赵科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与陈建国和何国强存在关系的189个学生节点。",
        "output": "match(a where a.name='陈建国')-[e]->(b:student)<-[e2]-(c where c.name='何国强') return b limit 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为古代的标签,以及与其有关的标签,并返回古代的id和这些标签的id",
        "output": "match(a:tag where name = '古代')-[e]-(b:tag) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点标签为部门,边标签为department_has_teacher,并且满足条件f0不为空或f0小于795,且f1等于false的边",
        "output": "match(a:department)-[e:department_has_teacher where ((e.f0 is not null) or e.f0 < 795) and e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签为person的点有own关系的account,且和这些account有repay关系的loan,且和这些loan有deposit关系的account",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前190个标签等于创造的边",
        "output": "match(a)-[e:creates]->(b) return e limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出前142个满足条件名字为王思思的病人",
        "output": "match(a:patient where a.name = '王思思') return a limit 142",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出张建聪和韩思琪这两位买家之间的关系。",
        "output": "match(a:buyer where a.name='张建聪')-[e:relation]->(b)<-[e2:relation]-(c:buyer where c.name='韩思琪') return b limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 查询所有名为周建国的点的,性别为famale的相关者,返回这些相关者的名字,和边的f1;2: 请帮我找出前42个gender不等于famale或salary大于等于2894,且name为何宏的seller;3: 查询买家郑建国创造的订单节点包含的商品;4: 返回buyer赵红的全部类型是partner的边,并根据weight从小到大排列,返回189个;5: 给出所有卖家以id,名字,薪资分组的身高, 根据身高从小到大排序;6: 给出id为76的orders有关的buyer的relation, 再给出和buyer有关系的friend;7: 请帮我找出标签为商品的点,并根据销量从大到小排列;8: 请帮我查找和卖家有关联的商品节点,并根据其价值,价格分组,返回价值,价格,以及价值除196的值;",
        "output": "查询语句为:1: match(a where a.name='周建国')-[e:relation]->(b where b.gender = 'famale') return b.name,e.f1;2: match(a:seller where (a.gender <> 'famale' or a.salary >= 2894) and a.name = '何宏') return a limit 42;3: match(a:buyer where a.name = '郑建国')-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c;4: match(a:buyer where a.name = '赵红')-[e:partner]->(b) return b order by e.weight asc limit 189;5: match(a:seller) return a.height group by a.id, a.name, a.salary order by a.height asc;6: match(a:orders where id = '76')-[e]-(b:buyer)-[e2:relation]->(c), (b:buyer)-[e3:friend]->(d) return a, b, c, d;7: match(a:goods) return a order by a.sellerNumber desc;8: match(a:seller)-[e:seller_has_goods]-(b:goods) return b.value, b.price, b.value / 196 group by b.value, b.price;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与person周轩有关系的person的id",
        "output": "match(a:person where a.name='周轩')-[e]-(b:person) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回包含纽约的城市公司，以及与纽约有关联的公司。",
        "output": "match(a:city where a.name = '纽约')-[e:contain]->(b:company),(a:city where a.name = '纽约')<-[e2:contain]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height分组,计算id的平均值乘id乘age的值",
        "output": "return AVG(a.id) * a.id * a.age group by a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询生物学院和土木学院之间拥有关系的部门。",
        "output": "match(a:department where a.name='生物学院')-[e:has]->(b)<-[e2:has]-(c:department where c.name='土木学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找68个与BIN和Geaflow123都存在关系的person节点",
        "output": "match(a where a.name='BIN')-[e]->(b:person)<-[e2]-(c where c.name='Geaflow123') return b limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据weight分组,计算id对78取余的最大值",
        "output": "return MAX(a.id % 78) group by a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为赵梅的节点属于的person",
        "output": "match(a where a.name='赵梅')-[e:belong]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出电影院的1跳以内的环",
        "output": "match(a:cinema)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与书和苹果都有关联的14个商品节点。",
        "output": "match(a where a.name='书')-[e]->(b:goods)<-[e2]-(c where c.name='苹果') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与读者韩科有关系的读者, 返回和这些读者有关联的读者的,salary的数量减9640的最小值",
        "output": "match(a:reader where a.name= '韩科')-[e]-(b:reader)-[e2]-(c:reader) return MIN(COUNT(c.salary) - 9640)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被user孙月publish的post",
        "output": "match(a:post)<-[e:publish]-(b:user where b.name='孙月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和买家郑科之间有取消关系的订单",
        "output": "match(a:buyer where a.name='郑科')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person孙伟之间有观看关系的电影",
        "output": "match(a:person where a.name='孙伟')-[e:watch]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与书《呐喊》有写作关系的作者。",
        "output": "match(a:book where a.name='呐喊')<-[e:write]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询38个user吴思思和吴国强,共同的partner",
        "output": "match(a:user where a.name='吴思思')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='吴国强') return b limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以806,582,444,705,911作为请求点id, 以属性id作为相等条件,找出label为书,名为罪与罚的点,返回这些点的id",
        "output": "with p as (select * from (VALUES(806),(582),(444),(705),(911)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.name = '罪与罚')) RETURN a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,age, 数据为(3517,21,79),(1169,8,48),(9453,35,81),(1998,34,73)的子查询作为输入表, 源点的id等于输入表id,给出类型为电影院的所有点,并根据名字降序排列",
        "output": "with p as (select * from (VALUES(3517,21,79),(1169,8,48),(9453,35,81),(1998,34,73)) as t(salary,id,age))MATCH (a:cinema WHERE a.id = p.id) RETURN a ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为Prescription_455的prescription,以及与其有关的prescription,并返回Prescription_455的name和这些prescription的name",
        "output": "match(a:prescription where name = 'Prescription_455')-[e]-(b:prescription) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与病人陈雪和张宏都存在接受关系的点",
        "output": "match(a:patient where a.name='陈雪')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='张宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,age, 数据为(9,5773,78),(22,8564,35),(85,1787,7),(83,5080,68)的子查询作为输入表, 源点的id等于输入表id,请帮我找出与课程操作系统有关系的部门, 返回和这些部门有关联的大学的,价值减价值对10取余的和",
        "output": "with p as (select * from (VALUES(9,5773,78),(22,8564,35),(85,1787,7),(83,5080,68)) as t(id,salary,age))MATCH (a:course WHERE a.id = p.id AND (a.name = '操作系统')) -[e ]-(b:department) -[e2 ]-(c:university) RETURN SUM(c.value - c.value % 10) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找李建国认识的人中，有谁支付了这个人。",
        "output": "match(a:person where a.name = '李建国')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出与周轩存在author_write_book关系的书,书与书存在book_refers_book关系的点,返回这些点的字数",
        "output": "match(a where a.name = '周轩')-[e:author_write_book]->(b:book)-[e2:book_refers_book]->(c:book) return c.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我找出171个名为黄强的点拥有的标签为账号的节点,且节点价值大于等于725;2: 查询全部与person有关系的person节点,且person节点的name不等于陈轩,并返回这些点的salary的个数加7318的值,以及height减166减salary的平均值;3: 找出141个名为王若涵的点own的类型是account的节点,且其createTime为2001年07月18日或isBlock等于false;4: 给出与账号Faker有关系的账号, 返回和这些账号有关联的公司的,人数对663取余对665取余的数量;5: 找出id为77的公司关联的贷款,和以还款关系关联了这些贷款的其他账号;",
        "output": "查询语句为:1: match(a where a.name='黄强')-[e:person_own_account]->(b:account where b.value >= 725) return b limit 171;2: match(a:person)-[e]->(b:person where b.name <> '陈轩') return COUNT(b.salary) + 7318, AVG(b.height - 166 - b.salary);3: match(a where a.name='王若涵')-[e:person_own_account]->(b:account where b.createTime = '2001-07-18' or b.isBlock = false) return b limit 141;4: match(a:account where a.name= 'Faker')-[e]-(b:account)-[e2]-(c:company) return COUNT(c.peopleNumber % 663 % 665);5: match(a:company where a.id = '77')-[e]-(b:loan)<-[e2:account_repay_loan]-(c:account) return b,c;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前67个类型为belong的边",
        "output": "match(a)-[e:belong]->(b) return e limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从'Faker'点获取账户，然后返回这些点是否是块。",
        "output": "match(a:account where a.name = 'Faker') return a.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 帮我查询与名为赵雪和徐思琪的点共同拥有的,label为商品的节点;2: 返回和buyer有关联的orders节点,并根据其price,id,name分组,返回price,id,name,以及id加44加value的最小值;3: 请帮我找出前66个类型为orders_contain_goods的边;4: 查找与买家有关系的买家节点,且买家节点的年龄在78到81之间,并返回这些点的身高减179对63取余的值,以及id的个数对91取余的平均值;",
        "output": "查询语句为:1: match(a where a.name = '赵雪')-[e:seller_has_goods]->(b:goods)<-[e2:seller_has_goods]-(c where c.name = '徐思琪') return b;2: match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.price, b.id, b.name, MIN(b.id + 44 + b.value) group by b.price, b.id, b.name;3: match(a)-[e:orders_contain_goods]->(b) return e limit 66;4: match(a:buyer)-[e]->(b:buyer where (b.age BETWEEN 78 AND 81)) return b.height - 179 % 63, AVG(COUNT(b.id) % 91);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 返回194个id小于52或性别不等于famale或身高为空的读者,根据年龄从小到大排列;2: 找出源点类型为book,边类型为book_refers_book的边,返回这些边的targetId的平均值乘129加141.11的值,和srcId对144取余的值;3: 查找所有标签等于编辑的点;",
        "output": "查询语句为:1: match(a:reader where a.id < 52 or a.gender <> 'famale' or (a.height is null)) return a order by a.age asc limit 194;2: match(a:book)-[e:book_refers_book]->(b) return AVG(e.targetId) * 129 + 141.11, e.srcId % 144;3: match(a:publisher) return a;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为周伟的,weight大于581的relation,返回这些relation的weight,和边的f1,targetId",
        "output": "match(a where a.name='周伟')-[e:relation]->(b where b.weight > 581) return b.weight,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部id为194的publisher关联的book,和以relates关系关联了这些book的其他book",
        "output": "match(a:publisher where a.id = 194)-[e]-(b:book)<-[e2:relates]-(c:book) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表572,737,631, 以属性id作为相等条件,查询和doctor赵强有doctor_diagnose_patient关系的patient,以及和doctor孙若涵有doctor_diagnose_patient关系的patient,将它们都返回",
        "output": "with p as (select * from (VALUES(572),(737),(631)) as t(id)) MATCH (a:doctor WHERE a.id = p.id AND (a.name = '赵强')) -[e:doctor_diagnose_patient ]->(b:patient) , (c:doctor WHERE c.name = '孙若涵') -[e2:doctor_diagnose_patient ]->(d:patient) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出电影院上映的电影,返回其源点的id乘3的值,以及目标点的value的个数乘654的值",
        "output": "match(a:cinema)-[e:releases]->(b:film) return a.id * 3, COUNT(b.value) * 654",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出forum中国诗词论坛contain的post,被其他user likes的数量",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与张国强和马建国有发布关系的所有书籍。",
        "output": "match(a:publisher where a.name = '张国强')-[e:publish]->(b:book),(c:publisher where c.name = '马建国')-[e2:publish]->(d:book) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为阿里和Bilibili的点共同属于的,类型是城市的节点",
        "output": "match(a where a.name = '阿里')-[e:belong]->(b:city)<-[e2:belong]-(c where c.name = 'Bilibili') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与'company'相关的公司信息，以及与'字节apply'相关的贷款信息，并将两者都返回。",
        "output": "match(a:company where a.name = '字节')-[e]-(b:company), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和书计算机网络有关的作家,再找出和计算机网络引用的其他书,返回它们",
        "output": "match(a:book where a.name = '计算机网络')-[e]-(b:author), (a:book)-[e2:refers]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和作家点有认识关系的作家节点,且边满足条件源点id等于7,目标作家节点满足条件薪资小于8751",
        "output": "match(a:author)-[e:knows where e.srcId = 7]->(b:author where b.salary < 8751) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被学生马伟选择的课程,和马伟选择的课程",
        "output": "match(a:course)<-[e:selects]-(b:student where name = '马伟')-[e2:selects]->(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找以likes关系关联了post Post_427的user;2: 请帮我查找forum知乎contain的post,被其他forum contain的数量;3: 请帮我找出和用户王科有user_publish_post关系的帖子,以及和论坛推特有forum_contain_post关系的帖子,将它们都返回;",
        "output": "查询语句为:1: match(a:post where a.name='Post_427')<-[e:user_likes_post]-(b:user) return b;2: match(a:forum where a.name='知乎')-[e:forum_contain_post]->(b:post)<-[e2:forum_contain_post]-(c:forum) return COUNT(c);3: match(a:user where a.name = '王科')-[e:user_publish_post]->(b:post),(c:forum where c.name = '推特')-[e2:forum_contain_post]->(d:post)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 找出和买家有关联的订单节点,并根据其价值,价格,id分组,返回价值,价格,id,以及value的数量加809的最大值;2: 帮我查询名为Bob的卖家;3: 给出和买家黄梅有buyer_cancel_orders关系的订单,以及和卖家徐国强有seller_has_goods关系的商品,将它们都返回;4: 找出和订单Order_189有orders_contain_goods关系的商品,以及和买家马宏有buyer_creates_orders关系的订单,将它们都返回;5: 查询与名为吴若涵和Jack的点共同查看的,类型是商品的节点;6: 请帮我查找从orders Order_401出发,经过类型是orders_contain_goods的边,走3度或4度到达的goods点;",
        "output": "查询语句为:1: match(a:buyer)-[e:buyer_creates_orders]-(b:orders) return b.value, b.price, b.id, MAX(COUNT(b.value) + 809) group by b.value, b.price, b.id;2: match(a:seller where a.name = 'Bob') return a;3: match(a:buyer where a.name = '黄梅')-[e:buyer_cancel_orders]->(b:orders),(c:seller where c.name = '徐国强')-[e2:seller_has_goods]->(d:goods)return a, b, c, d;4: match(a:orders where a.name = 'Order_189')-[e:orders_contain_goods]->(b:goods),(c:buyer where c.name = '马宏')-[e2:buyer_creates_orders]->(d:orders)return a, b, c, d;5: match(a where a.name = '吴若涵')-[e:buyer_look_goods]->(b:goods)<-[e2:buyer_look_goods]-(c where c.name = 'Jack') return b;6: match(a:orders where a.name='Order_401')-[e:orders_contain_goods]->{3,4}(b:goods) return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回所有software的relation,或其relation的relation;2: 找出person Jimmy的所有label为伙伴的边,并根据权重降序排列,返回124个;3: 请帮我找出和person有关联的person节点,并根据其age,name分组,返回age,name,以及age的最大值加43减height的值;4: 请帮我查找28个名为Bilibili的点creates的标签为software的节点,且其name等于SprintBoot,lang不是c;5: 请帮我找出全部名为杜宏的点buy的software;6: 帮我查询标签为person_buy_software,以及满足条件目标点id不为空的边;7: 计算所有person的id除id的数量;8: 帮我查询和person周建聪有person_commits_software关系的software,以及和person张梅有person_commits_software关系的software,将它们都返回;",
        "output": "查询语句为:1: match(a:software)-[e:relation]->{1,2}(b) return b;2: match(a:person where a.name = 'Jimmy')-[e:partner]->(b) return b order by e.weight desc limit 124;3: match(a:person)-[e:person_knows_person]-(b:person) return b.age, b.name, MAX(b.age) + 43 - b.height group by b.age, b.name;4: match(a where a.name='Bilibili')-[e:company_creates_software]->(b:software where b.name = 'SprintBoot' and b.lang <> 'c') return b limit 28;5: match(a where a.name='杜宏')-[e:person_buy_software]->(b:software) return b;6: match(a)-[e:person_buy_software where (e.targetId is not null)]->(b) return e;7: match(a:person) return COUNT(a.id / a.id);8: match(a:person where a.name = '周建聪')-[e:person_commits_software]->(b:software),(c:person where c.name = '张梅')-[e2:person_commits_software]->(d:software)return a, b, c, d;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和读者周月有关的读者,称为X,再返回和这个X有关联的其他编辑,以及和X有关联的书",
        "output": "match(a:reader where a.name = '周月')-[e]-(b:reader), (b:reader)-[e2]-(c:publisher),(b:reader)-[e3]-(d:book) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点创建时间不等于2031年11月09日,名字不是Light,边label为还款,且满足条件权重为空,源点id大于等于95且权重不为空的边,返回这些边的f0对617取余的值",
        "output": "match(a where a.createTime <> '2031-11-09' and a.name <> 'Light')-[e:repay where (e.weight is null) and e.srcId >= 95 and (e.weight is not null)]->(b) return e.f0 % 617",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回名为张轩的person,以及与其有关的person,并返回张轩的id和这些person的age;2: 返回所有和person王梅之间有person_likes_person关系的person;3: 请帮我找出源点类型是person,目标点类型是person,类型是person_pay_person的边;4: 找出person的三角的环,边类型是person_knows_person, 并返回这些点的id;5: 请帮我找出与person有关系的person节点,且person节点的name不等于王伟,并返回这些点的age对48取余的数量,以及salary对9202取余的值;",
        "output": "查询语句为:1: match(a:person where name = '张轩')-[e]-(b:person) return a.id, b.age;2: match(a:person where a.name='王梅')-[e:person_likes_person]->(b:person) return b;3: match(a:person)-[e:person_pay_person]->(b:person) return e;4: match(a:person)-[e:person_knows_person]->(b)-[e2:person_knows_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;5: match(a:person)-[e]->(b:person where b.name <> '王伟') return COUNT(b.age % 48), b.salary % 9202;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回病人韩若涵的所有伙伴,的目标点id除142减187.47的值",
        "output": "match(a:patient where a.name= '韩若涵')-[e:partner]->(b) return e.targetId / 142 - 187.47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和标签等于论坛的点有包含关系的用户,并且和这些用户有发布关系的帖子,并且和这些帖子有拥有关系的标签",
        "output": "match(a:forum)-[e:contain]->(b:user)-[e2:publish]->(c:post)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点label为城市,边label为包含的边,返回这些边的目标点id乘目标点id加173.04乘796的值,和f0减727的值",
        "output": "match(a:city)-[e:contain]->(b) return (e.targetId * e.targetId + 173.04) * 796, e.f0 - 727",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与公司美团有关,且与软件SprintBoot有关系的软件节点",
        "output": "match(a:company where a.name='美团')-[e:creates]-(b:software)-[e2:uses]-(c:software where c.name='SprintBoot') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 找出全部id为64的读者关联的书,和以发布关系关联了这些书的其他编辑;2: 查找所有名为黄雪的点likes的book;3: 找出id为99的书有关的作家的朋友, 再找出和作家有关系的伙伴;4: 给出满足条件height不为空或salary大于7816或age大于21的节点;5: 给出与publisher韩建国有publisher_publish_book关系的3跳以内的环;6: 找出和作家张若涵有关的读者,称为X,再找出和这个X有关联的其他作家,以及和X有关联的编辑;7: 给出id为29的点的价格;8: 请帮我找出编辑的三角的环,边label为publisher_publish_book, 并返回这些点的id;",
        "output": "查询语句为:1: match(a:reader where a.id = '64')-[e]-(b:book)<-[e2:publisher_publish_book]-(c:publisher) return b,c;2: match(a where a.name='黄雪')-[e:reader_likes_book]->(b:book) return b;3: match(a:book where id = '99')-[e]-(b:author)-[e2:friend]->(c), (b:author)-[e3:partner]->(d) return a, b, c, d;4: match(a where (a.height is not null) or a.salary > 7816 or a.age > 21) return a;5: match(a:publisher where name = '韩建国')-[e:publisher_publish_book]->{0,2}(b)->(a) return a.id, b.id as b_id;6: match(a:author where a.name = '张若涵')-[e]-(b:reader), (b:reader)-[e2]-(c:author),(b:reader)-[e3]-(d:publisher) return a, b, c, d;7: match(a where a.id = '29') return a.price;8: match(a:publisher)-[e:publisher_publish_book]->(b)-[e2:publisher_publish_book]-(c)->(a) return a,b.id as b_id,c.id as c_id;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与电影建国大业和少年足球都存在拥有关系的点",
        "output": "match(a:film where a.name='建国大业')-[e:has]->(b)<-[e2:has]-(c:film where c.name='少年足球') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我找出评论的三角的环,边类型为comment_belong_film, 并返回这些点的id;2: 查找和cinema UME之间有cinema_releases_film关系的film;3: 找出源点height大于等于4405且id在22到88之间且id小于44,边类型为person_watch_film,且满足条件weight不等于158.12的边,返回这些边的f0的和对915取余乘126.89的平均值;4: 返回与孙国强存在person_likes_comment关系的评论,评论与电影存在comment_belong_film关系的点,返回这些点的价值;",
        "output": "查询语句为:1: match(a:comment)-[e:comment_belong_film]->(b)-[e2:comment_belong_film]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:cinema where a.name='UME')-[e:cinema_releases_film]->(b:film) return b;3: match(a where a.height >= 4405 and (a.id BETWEEN 22 AND 88) and a.id < 44)-[e:person_watch_film where e.weight <> 158.12]->(b) return AVG(SUM(e.f0) % 915 * 126.89);4: match(a where a.name = '孙国强')-[e:person_likes_comment]->(b:comment)-[e2:comment_belong_film]->(c:film) return c.value;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person郑思琪有own关系的1度以内的环",
        "output": "match(a:person where name = '郑思琪')-[e:own]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person何思思的所有类型是伙伴的边,并根据f0从大到小排列,返回18个",
        "output": "match(a:person where a.name = '何思思')-[e:partner]->(b) return b order by e.f0 desc limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为韩红的节点购买的person",
        "output": "match(a where a.name='韩红')-[e:buy]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 请帮我查找标签为author_knows_author,以及f1不是false且f0大于942的边;2: 帮我查询作家马轩 认识的作家,返回作家 认识的作家的id减id的值 ;3: 查找被reader马建聪likes的book;4: 请帮我找出读者马强喜欢的书,被其他读者喜欢的数量;5: 给出80个与马思琪和王伟都存在关系的编辑节点;6: 给出标签等于book_refers_book,且f1是false或目标点id小于111,且权重在150.10到175.57之间的边;7: 返回164个与郑科和kate都存在关系的读者节点;",
        "output": "查询语句为:1: match(a)-[e:author_knows_author where e.f1 <> false and e.f0 > 942]->(b) return e;2: match(a:author where name = '马轩')-[e:author_knows_author]->(b:author)-[e2:author_knows_author]->(c:author) return c.id - c.id;3: match(a:book)<-[e:reader_likes_book]-(b:reader where b.name='马建聪') return a, b;4: match(a:reader where a.name='马强')-[e:reader_likes_book]->(b:book)<-[e2:reader_likes_book]-(c:reader) return COUNT(c);5: match(a where a.name='马思琪')-[e]->(b:publisher)<-[e2]-(c where c.name='王伟') return b limit 80;6: match(a)-[e:book_refers_book where (e.f1 = false or e.targetId < 111) and (e.weight BETWEEN 150.10 AND 175.57)]->(b) return e;7: match(a where a.name='郑科')-[e]->(b:reader)<-[e2]-(c where c.name='kate') return b limit 164;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找类型是帖子的全部点,并根据语言从小到大排列",
        "output": "match(a:post) return a order by a.lang asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和forum点有contain关系的post节点,且边满足条件srcId在94到164之间,目标post节点满足条件wordCount是515",
        "output": "match(a:forum)-[e:contain where (e.srcId BETWEEN 94 AND 164)]->(b:post where b.wordCount = 515) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和账号Geaflow123有还款关系的贷款,再给出以还款关系关联了Geaflow123的贷款",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:repay]->(b:loan),(a:account where a.name = 'Geaflow123')<-[e2:repay]-(c:loan)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与黄科有咨询关系的卖家，以及它们所拥有的商品，并返回这些点的ID。",
        "output": "match(a where a.name = '黄科')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,gender, 数据为(4131,'张梅','famale'),(5500,'郑建国','male'),(3265,'张宏','male'), 以属性salary作为相等条件,给出和person有关联的person节点,并根据其name,height分组,返回name,height,以及age对43取余的最大值",
        "output": "with p as (select * from (VALUES(4131,'张梅','famale'),(5500,'郑建国','male'),(3265,'张宏','male')) as t(salary,name,gender))MATCH (a:person WHERE a.salary = p.salary) -[e:person_family_person ]-(b:person) RETURN b.name, b.height, MAX(b.age % 43) GROUP BY b.name, b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和doctor郑科之间有diagnose关系的patient",
        "output": "match(a:doctor where a.name='郑科')-[e:diagnose]->(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生赵轩和医生杜强所在的部门",
        "output": "match(a:doctor where a.name = '赵轩')-[e:belong]->(b:department),(c:doctor where c.name = '杜强')-[e2:belong]->(d:department) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为李若涵的person,以及与其有关的person,并返回李若涵的性别和这些person的薪资",
        "output": "match(a:person where name = '李若涵')-[e]-(b:person) return a.gender, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回75个与徐月和李思琪都存在关系的卖家或买家节点",
        "output": "match(a where a.name='徐月')-[e]->(b:seller | buyer)<-[e2]-(c where c.name='李思琪') return b limit 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以596,472作为请求点id, 以属性id作为相等条件,帮我查询与名为吴建聪和李宏的点共同own的,标签等于account的节点",
        "output": "with p as (select * from (VALUES(596),(472)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴建聪')) -[e:person_own_account ]->(b:account) <-[e2:person_own_account ]-(c WHERE c.name = '李宏') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出课程的1跳以内的环",
        "output": "match(a:course)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型为person的点有喜欢关系的person,并且和这些person有支付关系的person,并且和这些person有认识关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我查找全部和person韩强有2到5跳关系的person;2: 返回全部person以name,gender分组的name, 根据name升序排序;3: 请帮我找出所有源点类型是person,目标点类型是person,类型是person_friend_person的边;4: 返回所有标签等于person的点;5: 请帮我查找person何国强的父母,的f0除551的值;",
        "output": "查询语句为:1: match(a:person where a.name='韩强')-[e]->{2,5}(b:person) return b;2: match(a:person) return a.name group by a.name, a.gender order by a.name asc;3: match(a:person)-[e:person_friend_person]->(b:person) return e;4: match(a:person) return a;5: match(a:person where a.name= '何国强')-[e:person_parent_person]->(b) return e.f0 / 551;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和person徐红有2度或3度关系的person",
        "output": "match(a:person where a.name='徐红')-[e]->{2,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 找出所有名为郑宏的点publish的post;2: 请帮我查找id为166的person有关的论坛的朋友, 再请帮我查找和论坛有关系的伙伴;3: 返回和user李伟有2到4跳关系的person;4: 查询论坛以创建时间分组的创建时间, 根据创建时间从小到大排序;5: 查询被forum CSDN contain的person;6: 给出38个名为Post_448的点has的类型为tag的节点,且节点id不为空,id大于71;",
        "output": "查询语句为:1: match(a where a.name='郑宏')-[e:user_publish_post]->(b:post) return b;2: match(a:person where id = '166')-[e]-(b:forum)-[e2:friend]->(c), (b:forum)-[e3:partner]->(d) return a, b, c, d;3: match(a:user where a.name='李伟')-[e]->{2,4}(b:person) return b;4: match(a:forum) return a.createTime group by a.createTime order by a.createTime asc;5: match(a:person)<-[e:forum_contain_person]-(b:forum where b.name='CSDN') return a, b;6: match(a where a.name='Post_448')-[e:post_has_tag]->(b:tag where (b.id is not null) and b.id > 71) return b limit 38;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为人人影城的点上映的所有电影,并对这些电影的价值进行求和",
        "output": "match(a where a.name='人人影城')-[e:releases]->(b:film) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Zookeeper的点使用的软件",
        "output": "match(a where a.name='Zookeeper')-[e:uses]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为孙思思的,name小于1439的partner,返回这些partner的gender,和边的f1,srcId",
        "output": "match(a where a.name='孙思思')-[e:partner]->(b where b.name < 1439) return b.gender,e.f1, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与赵思思和何若涵都认识的人，这些人被标记为'person'",
        "output": "match(a where a.name = '赵思思')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '何若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出department耳鼻喉科has的doctor节点creates的prescription",
        "output": "match(a:department where a.name = '耳鼻喉科')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回被doctor郑建国belong的department;2: 请帮我找出与名为Prescription_264和Prescription_475的点共同contain的,标签为medicine的节点;3: 查询和医生李梅有doctor_belong_department关系的部门,以及和病人韩若涵有patient_accept_prescription关系的处方,将它们都返回;4: 查找医生张思思 属于的部门,返回部门 拥有的医生的年龄减75的值 ;5: 帮我查询doctor以age分组的name, 根据name升序排序;6: 请帮我查找与名为周梅和韩思琪的点共同诊断的,类型是病人的节点;7: 请帮我查找名为阿莫新林的medicine;8: 帮我查询与名为杜轩和吴宏的点共同accept的,类型为prescription的节点;",
        "output": "查询语句为:1: match(a:department)<-[e:doctor_belong_department]-(b:doctor where b.name='郑建国') return a, b;2: match(a where a.name = 'Prescription_264')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c where c.name = 'Prescription_475') return b;3: match(a:doctor where a.name = '李梅')-[e:doctor_belong_department]->(b:department),(c:patient where c.name = '韩若涵')-[e2:patient_accept_prescription]->(d:prescription)return a, b, c, d;4: match(a:doctor where name = '张思思')-[e:doctor_belong_department]->(b:department)-[e2:department_has_doctor]->(c:doctor) return c.age - 75;5: match(a:doctor) return a.name group by a.age order by a.name asc;6: match(a where a.name = '周梅')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = '韩思琪') return b;7: match(a:medicine where a.name = '阿莫新林') return a;8: match(a where a.name = '杜轩')-[e:patient_accept_prescription]->(b:prescription)<-[e2:patient_accept_prescription]-(c where c.name = '吴宏') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出规格为small的节点",
        "output": "match(a where a.scale = 'small') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和orders Order_446有contain关系的goods,再查找以contain关系关联了Order_446的goods",
        "output": "match(a:orders where a.name = 'Order_446')-[e:contain]->(b:goods),(a:orders where a.name = 'Order_446')<-[e2:contain]-(c:goods)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询19个名为吴轩的点diagnose的类型为patient的节点,且节点name为吴轩",
        "output": "match(a where a.name='吴轩')-[e:diagnose]->(b:patient where b.name = '吴轩') return b limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与学生赵伟有选择关系的1度的环",
        "output": "match(a:student where name = '赵伟')-[e:selects]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 找出所有和公司阿里有关系的国家节点,返回这些点的id;2: 查询源点人数不为空且人数等于1758,名字是伦敦,边类型是city_contain_university,且f1等于true,源点id不是174.83,或f0为空的边,返回这些边的权重加104.13的数量;3: 查找和城市有关联的公司节点,并根据其规格,名字分组,返回规格,名字,以及价值加652的值;4: 找出与名为法国和中国的点共同contain的,标签为city的节点;",
        "output": "查询语句为:1: match(a:company where a.name='阿里')-[e]-(b:country) return b.id;2: match(a where (a.peopleNumber is not null) and a.peopleNumber = 1758 and a.name = '伦敦')-[e:city_contain_university where (e.f1 = true and e.srcId <> 174.83) or (e.f0 is null)]->(b) return COUNT(e.weight + 104.13);3: match(a:city)-[e:city_contain_company]-(b:company) return b.scale, b.name, b.value + 652 group by b.scale, b.name;4: match(a where a.name = '法国')-[e:country_contain_city]->(b:city)<-[e2:country_contain_city]-(c where c.name = '中国') return b;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和仓库Tugraph有关的仓库,称为X,再帮我查询和这个X有关联的其他合并请求,以及和X有关联的仓库",
        "output": "match(a:repository where a.name = 'Tugraph')-[e]-(b:repository), (b:repository)-[e2]-(c:pullRequest),(b:repository)-[e3]-(d:repository) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点身高是182,边标签为同事,且f1不是true,f0为空且目标点id小于等于6的边,返回这些边的权重对149.27取余的值",
        "output": "match(a where a.height = 182)-[e:colleague where e.f1 <> true and (e.f0 is null) and e.targetId <= 6]->(b) return e.weight % 149.27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有包含药品徐思琪接受过的处方，并返回这些处方的价格",
        "output": "match(a where a.name = '徐思琪')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有label为教师的点",
        "output": "match(a:teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以341,267,414,599作为请求点id, 源点的id等于输入表id,返回和teacher有关联的course节点,并根据其credit,name分组,返回credit,name,以及courseHour对45取余的平均值",
        "output": "with p as (select * from (VALUES(341),(267),(414),(599)) as t(id)) MATCH (a:teacher WHERE a.id = p.id) -[e:teacher_teach_course ]-(b:course) RETURN b.credit, b.name, AVG(b.courseHour % 45) GROUP BY b.credit, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表64,629,111,384,3, 源点的id等于输入表id,请帮我查找从author王雪出发,经过标签为author_knows_author的边,走3度或4度到达的author点",
        "output": "with p as (select * from (VALUES(64),(629),(111),(384),(3)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.name = '王雪')) -[e:author_knows_author ]->{3,4}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算等级减1的值",
        "output": "return a.level - 1 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与韩轩是同事的人，以及与韩轩是朋友的人。",
        "output": "match(a:person where a.name = '韩轩')-[e:colleague]->(b:person),(a:person where a.name = '韩轩')<-[e2:friend]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出陈建聪和李雪之间的46个关联。",
        "output": "match(a:doctor where a.name='陈建聪')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='李雪') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到位于越南的城市中的大学。",
        "output": "match(a:country where a.name = '越南')-[e:contain]->(b:city)-[e2:contain]->(c:university) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和doctor点有creates关系的prescription节点,且边满足条件f0不为空,目标prescription节点name不是Prescription_376",
        "output": "match(a:doctor)-[e:creates where (e.f0 is not null)]->(b:prescription where b.name <> 'Prescription_376') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为呼吸科的,id除14不等于87或身高为空的伙伴,返回这些伙伴的性别,和边的f0,源点id,目标点id",
        "output": "match(a where a.name='呼吸科')-[e:partner]->(b where b.id / 14 <> 87 or (b.height is null)) return b.gender,e.f0, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为周梅和赵建聪的,类型为person的点公共的friend节点的名单",
        "output": "match(a:person where a.name='周梅')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='赵建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出123个person赵思思和韩红,共同的parent",
        "output": "match(a:person where a.name='赵思思')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='韩红') return b limit 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找和person有关联的person节点,并根据其name,salary分组,返回name,salary,以及height乘160的值",
        "output": "match(a:person)-[e:person_family_person]-(b:person) return b.name, b.salary, b.height * 160 group by b.name, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person有关系的person节点,且person节点的薪资大于5840,并返回这些person的身高减198的值,以及person的薪资对4416取余的数量",
        "output": "match(a:person)-[e]->(b:person where b.salary > 5840) return b.height - 198, COUNT(b.salary % 4416)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被university浙江大学belong的city,和浙江大学belong的city",
        "output": "match(a:city)<-[e:belong]-(b:university where name = '浙江大学')-[e2:belong]->(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与用户相关的所有帖子节点，并按创建时间分组，返回每个帖子的创建时间。",
        "output": "match(a:user)-[e:publish]-(b:post) return b.createTime group by b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与张科和周强都有关联的帖子节点，返回它们的ID、创建时间和语言。",
        "output": "match(a:person where a.name='张科')-[e]->(b:post)<-[e2]-(c:user where c.name='周强') return b.id, b.createTime, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与部门文学院有拥有关系的3跳的环",
        "output": "match(a:department where name = '文学院')-[e:has]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和用户李建聪之间有发布关系的帖子",
        "output": "match(a:user where a.name='李建聪')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查询id为93的company有关的person的relation, 再查询和person有关系的relation;2: 请帮我查找84个lang不等于python,lang不等于java,或lang为go的software,根据lang升序排列;3: 请帮我找出全部名为美团的,身高小于等于153,年龄小于16的伙伴,返回这些伙伴的名字,和边的权重,f0,源点id;4: 帮我查询和公司有关联的软件节点,并根据其语言分组,返回语言,以及星数乘177的和;5: 找出所有源点标签等于公司,边标签等于company_employee_person的边,返回这些边的目标点id减目标点id加权重的最大值,和srcId的平均值对37取余对527取余的值;6: 请帮我找出38个名为Kafka的点uses的label为software的节点,且其id不为空或value小于等于310;",
        "output": "查询语句为:1: match(a:company where id = '93')-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d;2: match(a:software where (a.lang <> 'python' and a.lang <> 'java') or a.lang = 'go') return a order by a.lang asc limit 84;3: match(a where a.name='美团')-[e:partner]->(b where b.height <= 153 and b.age < 16) return b.name,e.weight, e.f0, e.srcId;4: match(a:company)-[e:company_creates_software]-(b:software) return b.lang, SUM(b.stars * 177) group by b.lang;5: match(a:company)-[e:company_employee_person]->(b) return MAX(e.targetId - e.targetId + e.weight), AVG(e.srcId) % 37 % 527;6: match(a where a.name='Kafka')-[e:software_uses_software]->(b:software where (b.id is not null) or b.value <= 310) return b limit 38;",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与中国诗词论坛有包含关系且与古代标签有has关系的帖子，并返回帖子的创建时间、语言、单词计数、中国诗词论坛的用户数量和古代标签的名称。",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e:contain]->(b:post)<-[e2:has]-(c:tag where c.name='古代') return a.peopleNumber,b.createTime, b.lang, b.wordCount,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于issue,名为ISSUE-284的点,返回这些点的createTime,id,status",
        "output": "match(a:issue where a.name = 'ISSUE-284') return a.createTime, a.id, a.status",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age,name,id分组,计算id减28减age的值",
        "output": "return a.id - 28 - a.age group by a.age, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,salary, 数据为('male',181,1569),('male',191,1324),('famale',161,7629), 源点的salary等于输入表salary,请帮我查找被author赵强knows的author",
        "output": "with p as (select * from (VALUES('male',181,1569),('male',191,1324),('famale',161,7629)) as t(gender,height,salary))MATCH (a:author WHERE a.salary = p.salary) <-[e:author_knows_author ]-(b:author WHERE b.name = '赵强') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除18减39的个数",
        "output": "COUNT(a.id / 18 - 39)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出买家李轩创造的订单,以及取消这些订单的买家, 令订单的价格等于订单的id的平均值, 返回买家(a)的薪资,订单(b)的名字,买家(c)的名字",
        "output": "match(a:buyer where name = '李轩')-[e:creates]->(b:orders)<-[e2:cancel]-(c:buyer) let b.price = AVG(b.id) return a.salary,b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person周若涵的全部父母,的源点id除101的值",
        "output": "match(a:person where a.name= '周若涵')-[e:parent]->(b) return e.srcId / 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person郑建国knows的person节点knows的person",
        "output": "match(a:person where a.name = '郑建国')-[e:person_knows_person]->(b:person)-[e2:person_knows_person]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 查询54个和label为用户的点有user_publish_post关系的帖子,并且和这些帖子有post_has_tag关系的标签;2: 查找id为26的person有关的帖子的相关者, 再查找和帖子有关系的朋友;3: 返回87个字数在319到764之间,语言不等于Japanese,或字数大于等于115的帖子,根据创建时间从小到大排列;4: 给出label为person的点,返回166个;5: 返回全部源点满足条件id在50到56之间,目标点满足条件gender不等于male或salary大于等于3087,且label为forum_contain_person的边;6: 请帮我找出和person黄若涵有关的person,称为X,再请帮我找出和这个X有关联的其他forum,以及和X有关联的post;7: 请帮我查找以拥有关系关联了标签动作的帖子;8: 请帮我查找论坛包含的person,返回其源点的id加57的和,以及目标点的salary的最大值乘1701的平均值;",
        "output": "查询语句为:1: match(a:user)-[e:user_publish_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c limit 54;2: match(a:person where id = '26')-[e]-(b:post)-[e2:relation]->(c), (b:post)-[e3:friend]->(d) return a, b, c, d;3: match(a:post where ((a.wordCount BETWEEN 319 AND 764) and a.lang <> 'Japanese') or a.wordCount >= 115) return a order by a.createTime asc limit 87;4: match(a:person) return a limit 166;5: match(a where (a.id BETWEEN 50 AND 56))-[e:forum_contain_person]->(b where b.gender <> 'male' or b.salary >= 3087) return e;6: match(a:person where a.name = '黄若涵')-[e]-(b:person), (b:person)-[e2]-(c:forum),(b:person)-[e3]-(d:post) return a, b, c, d;7: match(a:tag where a.name='动作')<-[e:post_has_tag]-(b:post) return b;8: match(a:forum)-[e:forum_contain_person]->(b:person) return SUM(a.id + 57), AVG(MAX(b.salary) * 1701);",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为中国军事论坛的,创建时间等于2010年07月05日的伙伴,返回这些伙伴的id,和边的目标点id",
        "output": "match(a where a.name='中国军事论坛')-[e:partner]->(b where b.createTime = '2010-07-05') return b.id,e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与北京存在包含关系的大学,大学与城市存在属于关系的点,返回这些点的名字",
        "output": "match(a where a.name = '北京')-[e:contain]->(b:university)-[e2:belong]->(c:city) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出马红和吴强，他们两个是用户标签相同相关者节点的人。",
        "output": "match(a:user where a.name='马红')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='吴强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表132,990,406,125,997, 以属性id作为相等条件,查询与company字节有关系的company, 返回和这些company有关联的software的,stars的平均值加stars加540的求和值",
        "output": "with p as (select * from (VALUES(132),(990),(406),(125),(997)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '字节')) -[e ]-(b:company) -[e2 ]-(c:software) RETURN SUM(AVG(c.stars) + c.stars + 540) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找学生赵建国的全部伙伴,的源点id除191的最大值",
        "output": "match(a:student where a.name= '赵建国')-[e:partner]->(b) return MAX(e.srcId / 191)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回三体这本书，你知道吗？",
        "output": "match(a:book where name = '三体')-[e:knows]->(b:book)-[e2:knows]->(c:book) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与阿里公司有关的账户，再查询阿里申请的其他贷款，返回它们。",
        "output": "match(a:company where a.name = '阿里')-[e]-(b:account), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(83,778,54)作为请求表数据,属性分别为id,value,size, 源点的value等于输入表value,给出和department有关联的teacher节点,并根据其gender分组,返回gender,以及id减86的最小值",
        "output": "with p as (select * from (VALUES(83,778,54)) as t(id,value,size))MATCH (a:department WHERE a.value = p.value) -[e:department_has_teacher ]-(b:teacher) RETURN b.gender, MIN(b.id - 86) GROUP BY b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与学生何雪和孙伟都存在选择关系的点",
        "output": "match(a:student where a.name='何雪')-[e:selects]->(b)<-[e2:selects]-(c:student where c.name='孙伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和帖子Post_391有2跳关系的帖子",
        "output": "match(a:post where a.name='Post_391')-[e]->{2,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点peopleNumber不是794或scale是small,边标签为cooperate,且满足条件targetId的平均值大于156且f0不为空,或srcId大于等于119的边,返回这些边的weight除162.92的值",
        "output": "match(a where a.peopleNumber <> 794 or a.scale = 'small')-[e:cooperate where (AVG(e.targetId) > 156 and (e.f0 is not null)) or e.srcId >= 119]->(b) return e.weight / 162.92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(9497,'famale',87),(9586,'famale',37)作为请求表数据,属性分别为salary,gender,age, 源点的gender等于输入表gender,找出id为163的卖家有关的买家的朋友, 再找出和买家有关系的朋友",
        "output": "with p as (select * from (VALUES(9497,'famale',87),(9586,'famale',37)) as t(salary,gender,age))MATCH (a:seller WHERE a.gender = p.gender AND (id = '163')) -[e ]-(b:buyer) -[e2:friend ]->(c) , (b:buyer) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型是医生的点有属于关系的部门,并且和这些部门有拥有关系的医生,并且和这些医生有属于关系的部门",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:belong]->(d:department) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与部门艺术学院和土木学院都存在拥有关系的点",
        "output": "match(a:department where a.name='艺术学院')-[e:has]->(b)<-[e2:has]-(c:department where c.name='土木学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前179个类型是包含的边",
        "output": "match(a)-[e:contain]->(b) return e limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找software Mysql uses的software,被其他person buy的数量",
        "output": "match(a:software where a.name='Mysql')-[e:uses]->(b:software)<-[e2:buy]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出label为family,且满足条件srcId不是194.40或srcId大于163或srcId不为空的边",
        "output": "match(a)-[e:family where e.srcId <> 194.40 or e.srcId > 163 or (e.srcId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以属于关系关联了部门外科的医生",
        "output": "match(a:department where a.name='外科')<-[e:belong]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出医生张雪的朋友,的f0除f0的值",
        "output": "match(a:doctor where a.name= '张雪')-[e:friend]->(b) return e.f0 / e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出doctor王轩的标签等于friend的边,并根据weight从小到大排列,返回14个",
        "output": "match(a:doctor where a.name = '王轩')-[e:friend]->(b) return b order by e.weight asc limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找医生王科开具的处方中，被其他患者接受的数量。",
        "output": "match(a:doctor where a.name='王科')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(40,'吴强','famale')作为请求表数据,属性分别为id,name,gender, 以属性id作为相等条件,给出118个与黄思思和郑宏都存在关系的person节点",
        "output": "with p as (select * from (VALUES(40,'吴强','famale')) as t(id,name,gender))MATCH (a WHERE a.id = p.id AND (a.name = '黄思思')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '郑宏') RETURN b LIMIT 118",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为181的编辑关联的作家,和以认识关系关联了这些作家的其他作家",
        "output": "match(a:publisher where a.id = 181)-[e]-(b:author)<-[e2:knows]-(c:author) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level分组,计算id的最大值减6的值",
        "output": "return MAX(a.id) - 6 group by a.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型是person,边类型是family,且满足条件srcId小于127.33的边",
        "output": "match(a:person)-[e:family where e.srcId < 127.33]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与英国有伙伴关系或互为伙伴关系的城市。",
        "output": "match(a:country where n.name=英国)-[e:partner]->{1,2}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出university的3跳的环",
        "output": "match(a:university)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person郑建聪喜欢的person, 令person的性别等于person的名字,令person的薪资等于person的薪资乘8549, 返回person(a)的薪资, person(b)的年龄",
        "output": "match(a:person where a.name='郑建聪')-[e:likes]->(b:person) let a.gender = a.name,let b.salary = b.salary * 8549 return a.salary,b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,value,name, 数据为(95,491,'土木学院'), 以属性id作为相等条件,查询被teacher黄雪teach的course",
        "output": "with p as (select * from (VALUES(95,491,'土木学院')) as t(id,value,name))MATCH (a:course WHERE a.id = p.id) <-[e:teacher_teach_course ]-(b:teacher WHERE b.name = '黄雪') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和类型是部门的点有拥有关系的医生,并且和这些医生有属于关系的部门,并且和这些部门有拥有关系的医生",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department)-[e3:has]->(d:doctor) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与teacher有关系的department节点，且department节点的id在3到91之间，并返回这些点的size的最小值对86取余的最大值，以及value对value取余的值。",
        "output": "match(a:teacher)-[e]->(b:department where (b.id BETWEEN 3 AND 91)) return MAX(MIN(b.size) % 86), b.value % b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回电影拥有的标签,返回其源点的价值对425取余的和,以及目标点的价值对556取余的值",
        "output": "match(a:film)-[e:has]->(b:tag) return SUM(a.value % 425), b.value % 556",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被帖子Post_477拥有的标签",
        "output": "match(a:tag)<-[e:has]-(b:post where b.name='Post_477') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以757,171,315,133作为请求点id, 以属性id作为相等条件,查询49个与郑红和黄国强都存在关系的person节点",
        "output": "with p as (select * from (VALUES(757),(171),(315),(133)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '郑红')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '黄国强') RETURN b LIMIT 49",
        "history": []
    }
]