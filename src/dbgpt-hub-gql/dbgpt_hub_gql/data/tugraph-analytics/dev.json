[
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表857,476,350, 以属性id作为相等条件,返回满足条件createTime不是2013年03月23日的节点",
        "output": "with p as (select * from (VALUES(857),(476),(350)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.createTime <> '2013-03-23')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和学生陈伟有1跳关系的学生",
        "output": "match(a:student where a.name='陈伟')-[e]->{1,1}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出电影我不是药神拥有的标签,以及拥有这些标签的电影",
        "output": "match(a:film where name = '我不是药神')-[e:has]->(b:tag)<-[e2:has]-(c:film) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有评论的id乘6的最大值",
        "output": "match(a:comment) return MAX(a.id * 6)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和类型是账号的点有转账关系的账号,以及和这些账号有转账关系的账号,以及和这些账号有还款关系的贷款",
        "output": "match(a:account)-[e:transfer]->(b:account)-[e2:transfer]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与person周伟有关系的person的性别",
        "output": "match(a:person where a.name='周伟')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id对18取余除id的值",
        "output": "return a.id % 18 / a.id group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person何雪有关系的account, 返回和这些account有关联的company的,value减158的值",
        "output": "match(a:person where a.name= '何雪')-[e]-(b:account)-[e2]-(c:company) return c.value - 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为99的reader关联的book,和以knows关系关联了这些book的其他book",
        "output": "match(a:reader where a.id = 99)-[e]-(b:book)<-[e2:knows]-(c:book) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被仓库Tugraph拥有的事项",
        "output": "match(a:issue)<-[e:has]-(b:repository where b.name='Tugraph') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为129的person关联的person, 并将person有关的person的名字的和赋值给person(b)的名字, 接着查询person(b)的名字小于129的person关联的person",
        "output": "match(a:person where a.id = 129)-[e:relates]->(b:person) let b.name = SUM((b:person)-[e2]-(c:person) => c.name) match(b:person where b.name < 129)-[e3:relates]->(d:person) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回和department有关联的teacher节点,并根据其gender,name分组,返回gender,name,以及salary减5179的最小值",
        "output": "match(a:department)-[e:department_has_teacher]-(b:teacher) return b.gender, b.name, MIN(b.salary - 5179) group by b.gender, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('悬疑',38,11),('历史',5,118)作为请求表数据,属性分别为category,id,value, 以属性value作为相等条件,找出cinema以id分组的address, 根据address升序排序",
        "output": "with p as (select * from (VALUES('悬疑',38,11),('历史',5,118)) as t(category,id,value))MATCH (a:cinema WHERE a.value = p.value) RETURN a.address GROUP BY a.id ORDER BY a.address ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为标签的所有点,并根据名字从小到大排列",
        "output": "match(a:tag) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表121,44,833,693,80, 以属性id作为相等条件,查询所有person以salary,age,id分组的salary, 根据salary降序排序",
        "output": "with p as (select * from (VALUES(121),(44),(833),(693),(80)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.salary GROUP BY a.salary, a.age, a.id ORDER BY a.salary DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与周建聪有申请关系，并与账号XXD有存款关系的贷款节点。返回这些贷款的ID、金额、权重，以及周建聪和账号XXD的最新信息。",
        "output": "match(a:person where a.name='周建聪')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='XXD') return a.id,b.id, b.amount, b.weight,c.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为马强的点接受的处方",
        "output": "match(a where a.name='马强')-[e:accept]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与软件有关系的person节点,且person节点的身高小于等于182,并返回这些person的id加47的平均值,以及person的age的平均值除年龄的最大值",
        "output": "match(a:software)-[e]->(b:person where b.height <= 182) return AVG(b.id + 47), MAX(AVG(b.age) / b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和company华为有3到5跳关系的person",
        "output": "match(a:company where a.name='华为')-[e]->{3,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询55个salary大于等于6138,id小于等于63,或id不是57的person,根据salary从大到小排列",
        "output": "match(a:person where (a.salary >= 6138 and a.id <= 63) or a.id <> 57) return a order by a.salary desc limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请问您能否提供一下腾讯公司的贷款节点存款账号？",
        "output": "match(a:company where a.name = '腾讯')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回按薪资和性别分组的学生的ID,并以降序排序。",
        "output": "match(a:student) return a.id group by a.salary, a.gender order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为呼吸科和急诊部的,类型为department的点公共的partner节点的名单",
        "output": "match(a:department where a.name='呼吸科')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='急诊部') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘44的最小值",
        "output": "MIN(a.id * 44)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表982,105,684,512,160, 以属性id作为相等条件,找出全部源点标签为person,边标签为person_commits_software的边,返回这些边的targetId的最大值乘24的值,和srcId乘srcId的值",
        "output": "with p as (select * from (VALUES(982),(105),(684),(512),(160)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_commits_software ]->(b) RETURN MAX(e.targetId) * 24, e.srcId * e.srcId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与评论相关的评论和以创建关系与这些评论相关的其他作者。",
        "output": "match(a:comment where a.id = '164')-[e]-(b:comment)<-[e2:creates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找teacher张雪teach的course,被其他student selects的数量",
        "output": "match(a:teacher where a.name='张雪')-[e:teach]->(b:course)<-[e2:selects]-(c:student) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与杜伟有关且与Redis相关的软件节点。",
        "output": "match(a:person where a.name='杜伟')-[e:buy]-(b:software)-[e2:uses]-(c:software where c.name='Redis') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出创建时间在2001年8月20日且名字不是Post_155的帖子，按价值从小到大地排列。",
        "output": "match(a:post where a.name <> 'Post_155' and a.createTime = '2001-08-20') return a order by a.value asc limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找名为何伟的标签为person的点，并返回这些点的薪资、年龄和性别。",
        "output": "match(a:person where a.name = '何伟') return a.salary, a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与Jimmy存在家人关系的person,person与person存在父母关系的点,返回这些点的id",
        "output": "match(a where a.name = 'Jimmy')-[e:family]->(b:person)-[e2:parent]->(c:person) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以168作为请求点id, 以属性id作为相等条件,请帮我找出公司谷歌 属于的城市,返回城市 包含的大学的id除94对id取余加4的值 ",
        "output": "with p as (select * from (VALUES(168)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (name = '谷歌')) -[e:company_belong_city ]->(b:city) -[e2:city_contain_university ]->(c:university) RETURN c.id / 94 % c.id + 4 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'iD', 'jN', 49作为输入,返回运算结果",
        "output": "Call PERSONALRANK('iD', 'jN', 49) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以下是经过简化的句子：'以上映关系与绿巨人的电影院有关联。'",
        "output": "match(a:film where a.name='绿巨人')<-[e:releases]-(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与类型为account的点有transfer关系的前160个account，以及这些account有transfer关系的所有account。",
        "output": "match(a:account)-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,weight,name, 数据为(7,669,'Prescription_106'),(77,876,'Prescription_445'),(68,112,'Prescription_474')的子查询作为输入表, 以属性name作为相等条件,给出源点类型为病人,目标点类型为处方,类型为patient_accept_prescription的边",
        "output": "with p as (select * from (VALUES(7,669,'Prescription_106'),(77,876,'Prescription_445'),(68,112,'Prescription_474')) as t(id,weight,name))MATCH (a:patient WHERE a.name = p.name) -[e:patient_accept_prescription ]->(b:prescription) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出film的三角的环,边类型是film_has_tag, 并返回这些点的id",
        "output": "match(a:film)-[e:film_has_tag]->(b)-[e2:film_has_tag]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被医生杜梅属于的部门,和杜梅创造的处方",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '杜梅')-[e2:creates]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前90个标签等于上映的边",
        "output": "match(a)-[e:releases]->(b) return e limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,name, 数据为(5499,35,'周雪'),(9134,54,'Alice'),(5767,65,'郑建聪')的子查询作为输入表, 以属性name作为相等条件,请帮我找出person孙雪的所有标签等于relation的边,并根据f1升序排列,返回148个",
        "output": "with p as (select * from (VALUES(5499,35,'周雪'),(9134,54,'Alice'),(5767,65,'郑建聪')) as t(salary,id,name))MATCH (a:person WHERE a.name = p.name AND (a.name = '孙雪')) -[e:relation ]->(b) RETURN b ORDER BY e.f1 LIMIT 148",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person赵月创造的评论,被其他person创造的数量",
        "output": "match(a:person where a.name='赵月')-[e:creates]->(b:comment)<-[e2:creates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出cinema横店影院和tag科幻相关的film节点",
        "output": "match(a:cinema where a.name='横店影院')-[e:releases]-(b:film)-[e2:has]-(c:tag where c.name='科幻') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与国家相关的公司，以及这些公司与其他城市的关联关系。",
        "output": "match(a:country where a.id = '66')-[e]-(b:company)<-[e2:contain]-(c:city) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与名为Comment_449的评论有相关者关系或相关者相关者关系的所有电影。",
        "output": "match(a:comment where n.name=Comment_449)-[e:relation]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'eq', 57作为输入,返回运算结果",
        "output": "Call PERSONALRANK('eq', 57) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为person，名字为韩红的所有点，并返回它们的性别和身高信息。",
        "output": "match(a:person where a.name = '韩红') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以871,507作为请求点id, 以属性id作为相等条件,给出账号以上次登录时间,名字分组的id, 根据id从小到大排序",
        "output": "with p as (select * from (VALUES(871),(507)) as t(id)) MATCH (a:account WHERE a.id = p.id) RETURN a.id GROUP BY a.lastLoginTime, a.name ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与王国强有密切关系的人。",
        "output": "match(a:person where a.name = '王国强')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询47个repository Flink和Kafka,共同的friend",
        "output": "match(a:repository where a.name='Flink')-[e:friend]->(b)<-[e2:friend]-(c:repository where c.name='Kafka') return b limit 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和编辑赵强有1到4度关系的书",
        "output": "match(a:publisher where a.name='赵强')-[e]->{1,4}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以126,842作为请求点id, 源点的id等于输入表id,找出和买家有关联的订单节点,并根据其id,价值分组,返回id,价值,以及id加26的数量",
        "output": "with p as (select * from (VALUES(126),(842)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_creates_orders ]-(b:orders) RETURN b.id, b.value, COUNT(b.id + 26) GROUP BY b.id, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用KHOP函数,以'jg', 14作为输入,返回运算结果",
        "output": "Call KHOP('jg', 14) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被用户马轩创造的合并请求",
        "output": "match(a:pullRequest)<-[e:creates]-(b:user where b.name='马轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为华为的点的,权重在6到29之间或权重不为空的朋友,返回这些朋友的权重,和边的f1,f0,源点id",
        "output": "match(a where a.name='华为')-[e:friend]->(b where (b.weight BETWEEN 6 AND 29) or (b.weight is not null)) return b.weight,e.f1, e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出买家何宏的全部伙伴,的f0对549取余的平均值",
        "output": "match(a:buyer where a.name= '何宏')-[e:partner]->(b) return AVG(e.f0 % 549)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为周若涵的点申请的所有贷款,并对这些贷款的金额进行求和",
        "output": "match(a where a.name='周若涵')-[e:apply]->(b:loan) return SUM(b.amount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询买家的2跳的环",
        "output": "match(a:buyer)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对id取余的值",
        "output": "a.id % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出同时与张红和王轩有关联的公司节点，并返回它们的ID。",
        "output": "match(a:person where a.name='张红')-[e]->(b:company)<-[e2]-(c:person where c.name='王轩') return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为148的点的id",
        "output": "match(a where a.id = 148) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出卖家吴思思回答的买家节点咨询的卖家",
        "output": "match(a:seller where a.name = '吴思思')-[e:ask]->(b:buyer)-[e2:consult]->(c:seller) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出132个person何轩和李梅,共同的伙伴",
        "output": "match(a:person where a.name='何轩')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李梅') return b limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为175的点的性别,薪资",
        "output": "match(a where a.id = 175) return a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表246,589,204,844, 源点的id等于输入表id,查询评论以名字,创建时间,字数分组的id, 根据id升序排序",
        "output": "with p as (select * from (VALUES(246),(589),(204),(844)) as t(id)) MATCH (a:comment WHERE a.id = p.id) RETURN a.id GROUP BY a.name, a.createTime, a.wordCount ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询155个和标签为仓库的点有拥有关系的用户,且和这些用户有创造关系的事项",
        "output": "match(a:repository)-[e:has]->(b:user)-[e2:creates]->(c:issue) return c limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为郑强的,性别等于famale或名字等于周雪的朋友,返回这些朋友的名字,和边的f0,f1,权重",
        "output": "match(a where a.name='郑强')-[e:friend]->(b where b.gender = 'famale' or b.name = '周雪') return b.name,e.f0, e.f1, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与电影相关的评论，以及这些评论所关联的其他电影。",
        "output": "match(a:film where a.id = '63')-[e]-(b:film)<-[e2:belong]-(c:comment) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,height,age, 数据为('famale',165,19),('male',167,71), 以属性height作为相等条件,请帮我找出前120个label为person_apply_loan的边",
        "output": "with p as (select * from (VALUES('famale',165,19),('male',167,71)) as t(gender,height,age))MATCH (a WHERE a.height = p.height) -[e:person_apply_loan ]->(b) RETURN e LIMIT 120",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id除id的值",
        "output": "return a.id / a.id group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前193个类型为朋友的边",
        "output": "match(a)-[e:friend]->(b) return e limit 193",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age减age的平均值",
        "output": "AVG(a.age - a.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名字的平均值大于14且名字等于外科的部门拥有的医生的名称,以及这些医生 诊断的病人的名称",
        "output": "match(a:department where AVG(a.name) > 14 and a.name = '外科')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点身高不等于178或名字等于张科,边标签为发布,且目标点id加目标点id乘113对656取余大于等于32或目标点id为空,且时间戳为2029年12月27日的边,返回这些边的权重对权重取余的值",
        "output": "match(a where a.height <> 178 or a.name = '张科')-[e:publish where ((e.targetId + e.targetId) * 113 % 656 >= 32 or (e.targetId is null)) and e.timeStamp = '2029-12-27']->(b) return e.weight % e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为101的person有关的person的恋人, 再帮我查询和person有关系的家人",
        "output": "match(a:person where id = 101)-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:family]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,gender, 数据为(2,1163,'famale'),(78,2986,'famale'),(44,4004,'famale'),(45,6904,'famale'), 以属性gender作为相等条件,请帮我查找person韩雪的所有类型是friend的边,并根据srcId从大到小排列,返回121个",
        "output": "with p as (select * from (VALUES(2,1163,'famale'),(78,2986,'famale'),(44,4004,'famale'),(45,6904,'famale')) as t(age,salary,gender))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '韩雪')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId DESC LIMIT 121",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与大学华中科技大学存在拥有关系,且与教师李建国存在拥有关系的部门节点，返回这些部门的id,名字,大小,及大学华中科技大学的名字,及教师李建国的id",
        "output": "match(a:university where a.name='华中科技大学')-[e:has]->(b:department)<-[e2:has]-(c:teacher where c.name='李建国') return a.name,b.id, b.name, b.size,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与用户王红有关系的标签, 返回和这些标签有关联的论坛的,人数加866的数量",
        "output": "match(a:user where a.name= '王红')-[e]-(b:tag)-[e2]-(c:forum) return COUNT(c.peopleNumber + 866)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与Prescription_469和Prescription_450都有关联的62个用户节点",
        "output": "match(a where a.name='Prescription_469')-[e]->(b:user)<-[e2]-(c where c.name='Prescription_450') return b limit 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,年龄,名字分组,计算身高乘身高对2157取余的值",
        "output": "return a.height * a.height % 2157 group by a.id, a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部id为73的城市关联的城市,和以属于关系关联了这些城市的其他公司",
        "output": "match(a:city where a.id = 73)-[e]-(b:city)<-[e2:belong]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找卖家王伟回答的买家,被其他卖家回答的数量",
        "output": "match(a:seller where a.name='王伟')-[e:ask]->(b:buyer)<-[e2:ask]-(c:seller) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为南京大学的国家或大学或城市,以及与其有关的大学,并返回南京大学的id和这些大学的价值",
        "output": "match(a:country | university | city where name = '南京大学')-[e]-(b:university) return a.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询标签等于标签的点,返回184个",
        "output": "match(a:tag) return a limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为赵建国和郑建聪的,类型是用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='赵建国')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='郑建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找作者源点类型为author,边类型为write的边，返回这些边中目标节点ID之和除以36的最大值，以及目标节点ID相乘的结果。",
        "output": "match(a:author)-[e:write]->(b) return MAX(SUM(e.targetId) / 36), e.targetId * e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找104个与ISSUE-483和ISSUE-224都存在关系的合并请求节点",
        "output": "match(a where a.name='ISSUE-483')-[e]->(b:pullRequest)<-[e2]-(c where c.name='ISSUE-224') return b limit 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄减74的值",
        "output": "a.age - 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为ISSUE-413的issue,以及与其有关的repository,并返回ISSUE-413的id和这些repository的id",
        "output": "match(a:issue where name = 'ISSUE-413')-[e]-(b:repository) return a.id, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 有79个人与吴国强和马建聪有关联。",
        "output": "match(a where a.name='吴国强')-[e]->(b:person)<-[e2]-(c where c.name='马建聪') return b limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的同事,或其同事的同事",
        "output": "match(a:person)-[e:colleague]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与王伟有关的人，再查询认识王伟的其他人，返回它们。",
        "output": "match(a:person where a.name = '王伟')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家张红取消的订单,以及取消这些订单的买家",
        "output": "match(a:buyer where name = '张红')-[e:cancel]->(b:orders)<-[e2:cancel]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以338作为请求点id, 源点的id等于输入表id,返回所有与论坛知网有关系的标签的价值",
        "output": "with p as (select * from (VALUES(338)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '知网')) -[e ]-(b:tag) RETURN b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与人有关的评论，这些评论与电影有关，电影又与某些标签有关。",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回读者韩思思喜欢的书,以及认识这些书的书, 令书的创建时间等于书的id对48取余加字数的平均值,令书的创建时间等于书的字数减636,令书的性别等于读者的薪资加2863, 返回读者(a)的id,书(b)的字数,书(c)的类别",
        "output": "match(a:reader where name = '韩思思')-[e:likes]->(b:book)<-[e2:knows]-(c:book) let b.createTime = AVG(b.id % 48 + b.wordCount),let b.createTime = b.wordCount - 636,let c.gender = a.salary + 2863 return a.id,b.wordCount,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为土木学院和数学学院的点共同拥有的,label为教师的节点",
        "output": "match(a where a.name = '土木学院')-[e:has]->(b:teacher)<-[e2:has]-(c where c.name = '数学学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询两个人的伴侣关系。",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除31的值",
        "output": "a.id / 31",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与陈宏存在喜欢关系的person,person与person存在支付关系的点,返回这些点的id",
        "output": "match(a where a.name = '陈宏')-[e:likes]->(b:person)-[e2:pay]->(c:person) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与孙雪存在likes关系的post,post与tag存在has关系的点,返回这些点的value",
        "output": "match(a where a.name = '孙雪')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询50个与吴月和韩强都存在关系的论坛或标签或用户节点",
        "output": "match(a where a.name='吴月')-[e]->(b:forum | tag | user)<-[e2]-(c where c.name='韩强') return b limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和company滴滴有关的person,再找出和滴滴employee的其他person,返回它们",
        "output": "match(a:company where a.name = '滴滴')-[e]-(b:person), (a:company)-[e2:employee]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与医生王红有关系的药品的价格",
        "output": "match(a:doctor where a.name='王红')-[e]-(b:medicine) return b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出吴若涵和黄红的共同朋友，他们都是医生。",
        "output": "match(a:doctor where a.name='吴若涵')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='黄红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出公司字节申请的贷款节点存款的账号",
        "output": "match(a:company where a.name = '字节')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找使用公司腾讯创造的软件,的软件",
        "output": "match(a:company where name = '腾讯')-[e:creates]->(b:software)<-[e2:uses]-(c:software) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有类型为帖子或论坛的点",
        "output": "match(a:post | forum) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight的最大值对39取余的数量",
        "output": "COUNT(MAX(a.weight) % 39)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与书悲惨世界和三体都存在引用关系的点",
        "output": "match(a:book where a.name='悲惨世界')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='三体') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为美国和澳大利亚的,标签为国家的点公共的朋友节点的名单",
        "output": "match(a:country where a.name='美国')-[e:friend]->(b)<-[e2:friend]-(c:country where c.name='澳大利亚') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person张建国提交的软件,和张建国属于的公司",
        "output": "match(a:software)<-[e:commits]-(b:person where name = '张建国')-[e2:belong]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person周雪的所有friend,的weight乘weight的值",
        "output": "match(a:person where a.name= '周雪')-[e:friend]->(b) return e.weight * e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下赵建聪取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='赵建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被学生选择数量大于118的课程,记为relationCount,再查询这些课程选择的学生",
        "output": "match(a:course) let a.relationCount = MAX((a:course)<-[e:selects]-(b:student) => b.id) match(a where a.relationCount > 118)-[e2:selects]->(c:student) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以224,620,4作为请求点id, 源点的id等于输入表id,给出author的1度的环",
        "output": "with p as (select * from (VALUES(224),(620),(4)) as t(id)) MATCH (a:author WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为CSDN的点的,创建时间不等于2034年12月01日的伙伴,返回这些伙伴的语言,和边的f0",
        "output": "match(a where a.name='CSDN')-[e:partner]->(b where b.createTime <> '2034-12-01') return b.lang,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表668,723, 以属性id作为相等条件,查找全部源点满足条件name等于滴滴且scale不是small,目标点满足条件age不是15且height小于等于187,且类型是company_employee_person的边",
        "output": "with p as (select * from (VALUES(668),(723)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '滴滴' AND a.scale <> 'small')) -[e:company_employee_person ]->(b WHERE b.age <> 15 AND b.height <= 187) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被读者郑月喜欢的书",
        "output": "match(a:book)<-[e:likes]-(b:reader where b.name='郑月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与名为徐强和杜轩的点共同认识的,标签为person的节点",
        "output": "match(a where a.name = '徐强')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '杜轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出伦敦包含的所有公司，再找出伦敦所在的国家，然后把它们一起返回。",
        "output": "match(a where a.name = '伦敦')-[e:contain]->(b:company),(a where a.name = '伦敦')<-[e2:contain]-(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person吴科有关的person,再帮我查询和吴科父母的其他person,返回它们",
        "output": "match(a:person where a.name = '吴科')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与贷款defaultName有关联的人的申请信息",
        "output": "match(a:loan where a.name='defaultName')<-[e:apply]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给我一本叫做计算机网络的书。",
        "output": "match(a:book where a.name = '计算机网络') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件等级减4乘275的平均值大于85的节点",
        "output": "match(a where AVG((a.level - 4) * 275) > 85) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点标签等于用户,目标点标签等于仓库,标签等于仓库或合并请求或事项的边",
        "output": "match(a:user)-[e:repository | pullRequest | issue]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找171个名为Post_370的点拥有的标签等于标签的节点,且其价值大于846或价值小于等于829",
        "output": "match(a where a.name='Post_370')-[e:has]->(b:tag where b.value > 846 or b.value <= 829) return b limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为person,边label为购买,且f1是false或目标点id不为空的边",
        "output": "match(a:person)-[e:buy where e.f1 = false or (e.targetId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,id分组,计算height乘160对163取余的个数",
        "output": "return COUNT(a.height * 160 % 163) group by a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person张国强有pay关系的1跳的环",
        "output": "match(a:person where name = '张国强')-[e:pay]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和forum CSDN有关系的forum或tag,返回这些点的id",
        "output": "match(a:forum where a.name='CSDN')-[e]-(b:forum | tag) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出身高小于169的人喜欢的人和这些人喜欢的人。",
        "output": "match(a:person where a.height < 169)-[e:likes]->(b:person)-[e2:likes]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'Zd'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('Zd') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,salary,name, 数据为(67,5703,'何轩'),(36,7540,'陈建国'),(36,1619,'马建聪'), 源点的salary等于输入表salary,返回id为55的点的年龄,身高",
        "output": "with p as (select * from (VALUES(67,5703,'何轩'),(36,7540,'陈建国'),(36,1619,'马建聪')) as t(age,salary,name))MATCH (a WHERE a.salary = p.salary AND (a.id = '55')) RETURN a.age, a.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与王伟和马宏都相关的账户节点，共113个。",
        "output": "match(a where a.name='王伟')-[e]->(b:account)<-[e2]-(c where c.name='马宏') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与城市伦敦有关系的城市的名字",
        "output": "match(a:city where a.name='伦敦')-[e]-(b:city) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有从大学出发，且边类型为'属于'的边。将这些边的权重加169.33，然后取最大值，并与目标节点ID相加，最后除以48。",
        "output": "match(a:university)-[e:belong]->(b) return MAX(e.weight + 169.33), SUM(e.targetId) / 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为赵科的点cancel的orders",
        "output": "match(a where a.name='赵科')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与南京大学存在belong关系的city,city与country存在belong关系的点,返回这些点的area",
        "output": "match(a where a.name = '南京大学')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前28个标签等于publish的边",
        "output": "match(a)-[e:publish]->(b) return e limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为英国的点的,id大于等于11的相关者,返回这些相关者的id,和边的权重,f0",
        "output": "match(a where a.name='英国')-[e:relation]->(b where b.id >= 11) return b.id,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person以薪资分组的id, 根据id从大到小排序",
        "output": "match(a:person) return a.id group by a.salary order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询电子科技大学位于哪个城市，并返回该城市的所属国家、地区以及面积。",
        "output": "match(a:university where name = '电子科技大学')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.value, c.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询153个和标签为编辑的点有发布关系的书,以及和这些书有引用关系的书",
        "output": "match(a:publisher)-[e:publish]->(b:book)-[e2:refers]->(c:book) return c limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与course有关系的course节点,且course节点的credit大于46,并返回这些course的id加71的最大值,以及course的courseHour对47取余加3的最大值",
        "output": "match(a:course)-[e]->(b:course where b.credit > 46) return MAX(b.id + 71), MAX(b.courseHour % 47 + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person pay的person,返回其源点的height除163减12的个数,以及目标点的salary减5285的值",
        "output": "match(a:person)-[e:pay]->(b:person) return COUNT(a.height / 163 - 12), b.salary - 5285",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,age,height, 数据为('male',5,198),('male',66,151),('male',1,168),('famale',24,156)的子查询作为输入表, 源点的age等于输入表age,查询111个和类型为person的点有person_parent_person关系的person,并且和这些person有person_family_person关系的person",
        "output": "with p as (select * from (VALUES('male',5,198),('male',66,151),('male',1,168),('famale',24,156)) as t(gender,age,height))MATCH (a:person WHERE a.age = p.age) -[e:person_parent_person ]->(b:person) -[e2:person_family_person ]->(c:person) RETURN c LIMIT 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点类型为买家,目标点类型为订单,类型为买家或商品的边",
        "output": "match(a:buyer)-[e:buyer | goods]->(b:orders) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型为订单的点,返回111个",
        "output": "match(a:orders) return a limit 111",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值减514的值",
        "output": "AVG(a.value) - 514",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person认识的person,返回其源点的身高减172的最大值,以及目标点的身高对174取余的值",
        "output": "match(a:person)-[e:knows]->(b:person) return MAX(a.height - 172), b.height % 174",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点类型是公司,目标点类型是person,类型是person或公司或软件的边",
        "output": "match(a:company)-[e:person | company | software]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('止痛药',882,77),('皮肤药',716,50),('感冒药',887,10)作为请求表数据,属性分别为category,weight,id, 源点的id等于输入表id,请帮我查找前189个类型是doctor_belong_department的边",
        "output": "with p as (select * from (VALUES('止痛药',882,77),('皮肤药',716,50),('感冒药',887,10)) as t(category,weight,id))MATCH (a WHERE a.id = p.id) -[e:doctor_belong_department ]->(b) RETURN e LIMIT 189",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的height乘165的个数",
        "output": "match(a:person) return COUNT(a.height * 165)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家的1度以内的环",
        "output": "match(a:buyer)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person徐伟关联的person,被其他person认识的数量",
        "output": "match(a:person where a.name='徐伟')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为138的标签有关的帖子的相关者, 再返回和帖子有关系的朋友",
        "output": "match(a:tag where id = 138)-[e]-(b:post)-[e2:relation]->(c), (b:post)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前162个标签为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,id,name, 数据为('famale',43,'李月')的子查询作为输入表, 源点的gender等于输入表gender,请帮我找出源点标签等于account,边标签等于account_repay_loan的边,返回这些边的weight的平均值除143.47的个数,和srcId乘172的平均值",
        "output": "with p as (select * from (VALUES('famale',43,'李月')) as t(gender,id,name))MATCH (a:account WHERE a.gender = p.gender) -[e:account_repay_loan ]->(b) RETURN COUNT(AVG(e.weight) / 143.47), AVG(e.srcId * 172) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于公司的所有点,并根据id从大到小排列",
        "output": "match(a:company) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为PR-88和PR-98的,类型是合并请求的点公共的朋友节点的名单",
        "output": "match(a:pullRequest where a.name='PR-88')-[e:friend]->(b)<-[e2:friend]-(c:pullRequest where c.name='PR-98') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找电影拥有的标签,返回其源点的id除id的值,以及目标点的id对70取余的平均值",
        "output": "match(a:film)-[e:has]->(b:tag) return a.id / a.id, AVG(b.id % 70)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person马宏creates的comment,和马宏likes的comment",
        "output": "match(a:comment)<-[e:creates]-(b:person where name = '马宏')-[e2:likes]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出与forum中国军事论坛和百度贴吧都存在forum_contain_post关系的点",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:forum_contain_post]->(b)<-[e2:forum_contain_post]-(c:forum where c.name='百度贴吧') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询7个大学清华大学和电子科技大学,共同的朋友",
        "output": "match(a:university where a.name='清华大学')-[e:friend]->(b)<-[e2:friend]-(c:university where c.name='电子科技大学') return b limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与作家王国强和陈若涵都存在撰写关系的点",
        "output": "match(a:author where a.name='王国强')-[e:write]->(b)<-[e2:write]-(c:author where c.name='陈若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表335,60, 以属性id作为相等条件,给出所有源点标签为person,边标签为person_belong_company,并且权重为空或目标点id为空的边",
        "output": "with p as (select * from (VALUES(335),(60)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_belong_company WHERE e.weight IS NULL OR e.targetId IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出还款贷款loan_11的账号,和这些账号转账的账号",
        "output": "match(a:loan where name = 'loan_11')<-[e:repay]-(b:account)-[e2:transfer]->(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为孙思琪的点的,weight大于652的relation,返回这些relation的weight,和边的f0",
        "output": "match(a where a.name='孙思琪')-[e:relation]->(b where b.weight > 652) return b.weight,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,isBlock,id, 数据为(807,false,62),(550,true,27), 源点的value等于输入表value,查找person的三角的环,边标签为person_apply_loan, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(807,false,62),(550,true,27)) as t(value,isBlock,id))MATCH (a:person WHERE a.value = p.value) -[e:person_apply_loan ]->(b) -[e2:person_apply_loan ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,name,salary, 数据为(10,'赵雪',6453), 源点的salary等于输入表salary,请帮我找出读者李宏喜欢的书,被其他书认识的数量",
        "output": "with p as (select * from (VALUES(10,'赵雪',6453)) as t(age,name,salary))MATCH (a:reader WHERE a.salary = p.salary AND (a.name = '李宏')) -[e:reader_likes_book ]->(b:book) <-[e2:knows ]-(c:book) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有类型为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生陈若涵属于的部门,以及属于这些部门的医生, 令医生(c)的性别等于医生(a)的名字,令医生(c)的性别等于医生(a)的性别,令医生的地址等于部门的weight的数量加341, 返回医生(a)的名字,部门(b)的名字,医生(c)的年龄",
        "output": "match(a:doctor where name = '陈若涵')-[e:belong]->(b:department)<-[e2:belong]-(c:doctor) let c.gender = a.name,let c.gender = a.gender,let a.address = COUNT(b.weight) + 341 return a.name,b.name,c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询论坛的相关者,或其相关者的相关者",
        "output": "match(a:forum)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找169个名为XXRepo的点拥有的类型为用户的节点,且其名字为吴若涵",
        "output": "match(a where a.name='XXRepo')-[e:has]->(b:user where b.name = '吴若涵') return b limit 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点名字不是周科或性别不是male,边标签为家人,且满足条件权重为175.02的边,返回这些边的源点id减源点id的最小值",
        "output": "match(a where a.name <> '周科' or a.gender <> 'male')-[e:family where e.weight = 175.02]->(b) return MIN(e.srcId - e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询澳大利亚所有包含城市的点，并返回这些点中包含的公司信息。",
        "output": "match(a where a.name = '澳大利亚')-[e:contain]->(b:city)-[e2:contain]->(c:company) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,category,name, 数据为(203,'喜剧','神探狄仁杰'),(210,'动作','功夫'),(415,'科幻','少年足球')的子查询作为输入表, 以属性value作为相等条件,帮我查询123个名为建国大业的点has的标签为tag的节点,且节点id大于499或name小于364",
        "output": "with p as (select * from (VALUES(203,'喜剧','神探狄仁杰'),(210,'动作','功夫'),(415,'科幻','少年足球')) as t(value,category,name))MATCH (a WHERE a.value = p.value AND (a.name = '建国大业')) -[e:film_has_tag ]->(b:tag WHERE b.id > 499 OR b.name < 364) RETURN b LIMIT 123",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出提交person孙建聪购买的软件,的person",
        "output": "match(a:person where name = '孙建聪')-[e:buy]->(b:software)<-[e2:commits]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,weight,address, 数据为(85,712,'北区'),(72,410,'南区'),(45,255,'B座'),(50,340,'西区'), 以属性weight作为相等条件,找出所有标签等于药品的点",
        "output": "with p as (select * from (VALUES(85,712,'北区'),(72,410,'南区'),(45,255,'B座'),(50,340,'西区')) as t(id,weight,address))MATCH (a:medicine WHERE a.weight = p.weight) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person杜月和孙科都存在提交关系的点",
        "output": "match(a:person where a.name='杜月')-[e:commits]->(b)<-[e2:commits]-(c:person where c.name='孙科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以'Dh', 93, 24作为输入,返回id, distance",
        "output": "Call SSSP('Dh', 93, 24) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我按ID分组并按照名字升序排列所有的医生名字",
        "output": "match(a:doctor) return a.name group by a.id order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为openSource,id,stars, 数据为(false,40,318),(false,49,438),(true,64,305), 源点的id等于输入表id,给出所有id为183的software关联的software,和以uses关系关联了这些software的其他software",
        "output": "with p as (select * from (VALUES(false,40,318),(false,49,438),(true,64,305)) as t(openSource,id,stars))MATCH (a:software WHERE a.id = p.id AND (a.id = '183')) -[e ]-(b:software) <-[e2:software_uses_software ]-(c:software) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和部门内科有department_has_doctor关系的医生,以及和医生王轩有doctor_creates_prescription关系的处方,将它们都返回",
        "output": "match(a:department where a.name = '内科')-[e:department_has_doctor]->(b:doctor),(c:doctor where c.name = '王轩')-[e2:doctor_creates_prescription]->(d:prescription)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回国家日本 包含的城市,返回城市 包含的公司的id除66的最大值",
        "output": "match(a:country where name = '日本')-[e:contain]->(b:city)-[e2:contain]->(c:company) return MAX(c.id / 66)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询部门传染部 拥有的医生,返回医生 诊断的病人的id除50的求和值",
        "output": "match(a:department where name = '传染部')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return SUM(c.id / 50)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被用户创造数量大于184的合并请求,记为relationCount,再查询这些合并请求创造的用户",
        "output": "match(a:pullRequest) let a.relationCount = MIN((a:pullRequest)<-[e:creates]-(b:user) => b.id) match(a where a.relationCount > 184)-[e2:creates]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出论坛中国军事论坛包含的帖子,被其他用户发布的数量",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:forum_contain_post]->(b:post)<-[e2:user_publish_post]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person黄雪的伙伴,的权重乘权重的平均值",
        "output": "match(a:person where a.name= '黄雪')-[e:partner]->(b) return AVG(e.weight * e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询作家马伟撰写的书,以及发布这些书的编辑, 令作家的类别等于书的字数,令书的创建时间等于书的类别,令作家的id等于编辑的身高加168, 返回作家的薪资,书的字数,编辑的性别",
        "output": "match(a:author where name = '马伟')-[e:write]->(b:book)<-[e2:publish]-(c:publisher) let a.category = b.wordCount,let b.createTime = b.category,let a.id = c.height + 168 return a.salary,b.wordCount,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以823,760,192,583,870作为请求点id, 以属性id作为相等条件,帮我查询账号TheShy还款的贷款节点存款的账号",
        "output": "with p as (select * from (VALUES(823),(760),(192),(583),(870)) as t(id)) MATCH (a:account WHERE a.id = p.id AND (a.name = 'TheShy')) -[e:account_repay_loan ]->(b:loan) -[e2:loan_deposit_account ]->(c:account) RETURN c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person knows的person,返回其源点的age加7除40的平均值,以及目标点的salary加8239对id取余的值",
        "output": "match(a:person)-[e:knows]->(b:person) return AVG((a.age + 7) / 40), b.salary + 8239 % b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为王建聪的节点发布的读者或编辑",
        "output": "match(a where a.name='王建聪')-[e:publish]->(b:reader | publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为郑宏的人有关联，或者与关联人有关联的人。",
        "output": "match(a:person where n.name=郑宏)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和类型为person的点有parent关系的person,以及和这些person有lover关系的person,以及和这些person有lover关系的person",
        "output": "match(a:person)-[e:parent]->(b:person)-[e2:lover]->(c:person)-[e3:lover]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person何伟存在knows关系,且与person赵强存在likes关系的person节点，返回这些person的name,gender,height,及person何伟的salary,及person赵强的gender",
        "output": "match(a:person where a.name='何伟')-[e:knows]->(b:person)<-[e2:likes]-(c:person where c.name='赵强') return a.salary,b.name, b.gender, b.height,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与大学南京大学有关系的学生的id",
        "output": "match(a:university where a.name='南京大学')-[e]-(b:student) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber分组,计算value乘112的值",
        "output": "return a.value * 112 group by a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,srcId,targetId, 数据为(179.88,67,63),(126.51,152,177),(166.09,85,123), 以属性targetId作为相等条件,返回全部源点类型是person,边类型是person_apply_loan,以及满足条件weight为空且f0等于632且f1是true的边",
        "output": "with p as (select * from (VALUES(179.88,67,63),(126.51,152,177),(166.09,85,123)) as t(weight,srcId,targetId))MATCH (a:person WHERE a.targetId = p.targetId) -[e:person_apply_loan WHERE e.weight IS NULL AND e.f0 = 632 AND e.f1 = TRUE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有person以salary分组的id, 根据id从大到小排序",
        "output": "match(a:person) return a.id group by a.salary order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有标签等于教师的点",
        "output": "match(a:teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与医生郑宏有诊断关系的2跳以内的环",
        "output": "match(a:doctor where name = '郑宏')-[e:diagnose]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询南京大学伙伴的相关伙伴",
        "output": "match(a:university where a.name='南京大学')-[e:partner]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为王思琪的节点selects的student或course或teacher",
        "output": "match(a where a.name='王思琪')-[e:selects]->(b:student | course | teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和issue ISSUE-287有关的issue,再帮我查询和ISSUE-287 belong的其他repository,返回它们",
        "output": "match(a:issue where a.name = 'ISSUE-287')-[e]-(b:issue), (a:issue)-[e2:belong]->(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为喜欢,且满足条件目标点id大于等于42或f1是false,且f0大于等于732的边",
        "output": "match(a)-[e:likes where (e.targetId >= 42 or e.f1 = false) and e.f0 >= 732]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含'东京'的公司，然后找出与这些公司有关联的其他公司。",
        "output": "match(a:city where a.name = '东京')-[e:contain]->(b:company),(a:city where a.name = '东京')<-[e2:contain]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出大学中拥有关系的部门、与这些部门有关系的学生，以及这些学生选择的课程。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到被Jimmy喜欢的人，这些人又被某个人认识。",
        "output": "match(a:person where a.name = 'Jimmy')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与forum有关系的user节点,且user节点的gender是male,并返回这些user的salary减2122的最大值,以及user的id对14取余的值",
        "output": "match(a:forum)-[e]->(b:user where b.gender = 'male') return MAX(b.salary - 2122), b.id % 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2413,94,160),(7225,1,179),(3434,54,190)作为请求表数据,属性分别为salary,age,height, 源点的salary等于输入表salary,帮我查询源点类型为编辑,边类型为publisher_publish_book,并且时间戳不是2017年05月16日或权重除155.46的平均值小于25的边",
        "output": "with p as (select * from (VALUES(2413,94,160),(7225,1,179),(3434,54,190)) as t(salary,age,height))MATCH (a:publisher WHERE a.salary = p.salary) -[e:publisher_publish_book WHERE e.timeStamp <> '2017-05-16' OR AVG(e.weight / 155.46) < 25 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为吴科和徐雪的点共同likes的,类型为person的节点",
        "output": "match(a where a.name = '吴科')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '徐雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以328,770作为请求点id, 以属性id作为相等条件,找出从person吴月出发,经过类型是person_own_account的边,走3到5度到达的account点",
        "output": "with p as (select * from (VALUES(328),(770)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '吴月')) -[e:person_own_account ]->{3,5}(b:account) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被医生李伟属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where b.name='李伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以463作为请求点id, 源点的id等于输入表id,查找源点标签为person,目标点标签为person,标签为person_knows_person的边",
        "output": "with p as (select * from (VALUES(463)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_knows_person ]->(b:person) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杜建国买家取消的订单，并返回订单中包含的商品。",
        "output": "match(a:buyer where name = '杜建国')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前89个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与user何轩有关系的repository的stars",
        "output": "match(a:user where a.name='何轩')-[e]-(b:repository) return b.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为department的点,返回90个",
        "output": "match(a:department) return a limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和person陈若涵之间有认识关系的person",
        "output": "match(a:person where a.name='陈若涵')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询account LX001transfer的account节点repay的loan",
        "output": "match(a:account where a.name = 'LX001')-[e:account_transfer_account]->(b:account)-[e2:account_repay_loan]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为loan_11的account,以及与其有关的loan,并返回loan_11的weight和这些loan的weight",
        "output": "match(a:account where name = 'loan_11')-[e]-(b:loan) return a.weight, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为tag的点,返回61个",
        "output": "match(a:tag) return a limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为黄思思和吴国强的点共同认识的,类型是person的节点",
        "output": "match(a where a.name = '黄思思')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '吴国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出pay person杜科的person,和这些person knows的person",
        "output": "match(a:person where name = '杜科')<-[e:pay]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出事项ISSUE-288属于的仓库节点拥有的合并请求",
        "output": "match(a:issue where a.name = 'ISSUE-288')-[e:belong]->(b:repository)-[e2:has]->(c:pullRequest) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为王国强的,id为空或课时在21到34之间的伙伴,返回这些伙伴的学分,和边的f1",
        "output": "match(a where a.name='王国强')-[e:partner]->(b where (b.id is null) or (b.courseHour BETWEEN 21 AND 34)) return b.credit,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Prescription_277且标签为处方的点，并返回它们的id和权重。",
        "output": "match(a:prescription where a.name = 'Prescription_277') return a.id, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找102个性别不等于male或薪资在3851到6948之间或性别为male的教师,根据名字升序排列",
        "output": "match(a:teacher where a.gender <> 'male' or (a.salary BETWEEN 3851 AND 6948) or a.gender = 'male') return a order by a.name asc limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有医生或他们伙伴的伙伴。",
        "output": "match(a:doctor)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(239,'medium',810),(791,'small',790),(81,'medium',567),(89,'small',526)作为请求表数据,属性分别为value,scale,peopleNumber, 以属性value作为相等条件,请帮我找出id为3的person关联的account,和以transfer关系关联了这些account的其他account",
        "output": "with p as (select * from (VALUES(239,'medium',810),(791,'small',790),(81,'medium',567),(89,'small',526)) as t(value,scale,peopleNumber))MATCH (a:person WHERE a.value = p.value AND (a.id = '3')) -[e ]-(b:account) <-[e2:account_transfer_account ]-(c:account) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名字是滴滴或人数在654到892之间的节点",
        "output": "match(a where a.name = '滴滴' or (a.peopleNumber BETWEEN 654 AND 892)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表194,986,521, 源点的id等于输入表id,查找person以salary,name分组的id, 根据id升序排序",
        "output": "with p as (select * from (VALUES(194),(986),(521)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.id GROUP BY a.salary, a.name ORDER BY a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id小于等于83的book relates的book的名称,以及这些book relates的book的名称",
        "output": "match(a:book where a.id <= 83)-[e:relates]->(b:book)-[e2:relates]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,id,salary, 数据为('male',51,9062),('male',98,6582)的子查询作为输入表, 以属性salary作为相等条件,请帮我查找名为郑红的person,以及与其有关的person,并返回郑红的id和这些person的名字",
        "output": "with p as (select * from (VALUES('male',51,9062),('male',98,6582)) as t(gender,id,salary))MATCH (a:person WHERE a.salary = p.salary AND (name = '郑红')) -[e ]-(b:person) RETURN a.id, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(7881,'male',3)作为请求表数据,属性分别为salary,gender,age, 源点的age等于输入表age,请帮我查找全部源点标签等于订单,边标签等于orders_contain_goods的边,返回这些边的目标点id减目标点id的最大值,和f0加839的最小值",
        "output": "with p as (select * from (VALUES(7881,'male',3)) as t(salary,gender,age))MATCH (a:orders WHERE a.age = p.age) -[e:orders_contain_goods ]->(b) RETURN MAX(e.targetId - e.targetId), MIN(e.f0 + 839) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和用户周建国之间有发布关系的帖子",
        "output": "match(a:user where a.name='周建国')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为Post_116的post,以及与其有关的user,并返回Post_116的name和这些user的height",
        "output": "match(a:post where name = 'Post_116')-[e]-(b:user) return a.name, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是标签的所有点,并根据价值升序排列",
        "output": "match(a:tag) return a order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询doctor马思琪 belong的department,返回department has的doctor的id加2对83取余的值",
        "output": "match(a:doctor where name = '马思琪')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.id + 2 % 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与徐梅有购买关系的软件和Zookeeper使用的软件，并返回它们。",
        "output": "match(a:person where a.name = '徐梅')-[e:buy]->(b:software),(c:software where c.name = 'Zookeeper')-[e2:uses]->(d:software) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表459,299,829,531, 以属性id作为相等条件,帮我查询全部和country俄罗斯有3度或4度关系的city",
        "output": "with p as (select * from (VALUES(459),(299),(829),(531)) as t(id)) MATCH (a:country WHERE a.id = p.id AND (a.name = '俄罗斯')) -[e ]->{3,4}(b:city) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出账号Faker转账的账号,以及存款这些账号的贷款, 令账号(a)的创建时间等于账号(b)的价值加176, 返回账号(a)的创建时间,账号(b)的价值,贷款(c)的权重",
        "output": "match(a:account where name = 'Faker')-[e:transfer]->(b:account)<-[e2:deposit]-(c:loan) let a.createTime = b.value + 176 return a.createTime,b.value,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person喜欢的person,返回其源点的身高对183取余的值,以及目标点的年龄加68的值",
        "output": "match(a:person)-[e:likes]->(b:person) return a.height % 183, b.age + 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id除96的个数",
        "output": "return COUNT(a.id / 96) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,gender, 数据为(16,150,'famale'),(16,156,'famale')的子查询作为输入表, 源点的age等于输入表age,请帮我查找与用户张红和黄梅都存在user_creates_issue关系的点",
        "output": "with p as (select * from (VALUES(16,150,'famale'),(16,156,'famale')) as t(age,height,gender))MATCH (a:user WHERE a.age = p.age AND (a.name = '张红')) -[e:user_creates_issue ]->(b) <-[e2:user_creates_issue ]-(c:user WHERE c.name = '黄梅') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与赵思琪和王建国都有关系的151个处方节点",
        "output": "match(a where a.name='赵思琪')-[e]->(b:prescription)<-[e2]-(c where c.name='王建国') return b limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为韩若涵的人",
        "output": "match(a:person where a.name = '韩若涵') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出Post_274的朋友的朋友的关系",
        "output": "match(a:post where a.name='Post_274')-[e:friend]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找99个与马梅和张思琪都存在关系的person节点",
        "output": "match(a where a.name='马梅')-[e]->(b:person)<-[e2]-(c where c.name='张思琪') return b limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为XiaoHu的账户有关联，或者与该账户关联的人有关联的所有贷款。",
        "output": "match(a:account where n.name=XiaoHu)-[e:relation]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表965,195,122,538, 以属性id作为相等条件,查询名为张思思的点publish的所有post,并对这些点的value进行求和",
        "output": "with p as (select * from (VALUES(965),(195),(122),(538)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '张思思')) -[e:user_publish_post ]->(b:post) RETURN SUM(b.value) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和部门数学学院有关系的教师或学生,返回这些点的学分,名字",
        "output": "match(a:department where a.name='数学学院')-[e]-(b:teacher | student) return b.credit, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与中国诗词论坛存在contain关系的post,post与tag存在has关系的点,返回这些点的name",
        "output": "match(a where a.name = '中国诗词论坛')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与被标记为'person'的节点有创建关系的评论，以及这些评论与之有关联的电影，并且这些电影又与某些标签有拥有关系。",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,weight,name, 数据为(19,551,'Prescription_257'), 源点的id等于输入表id,请帮我查找全部名为徐思思的点属于的部门",
        "output": "with p as (select * from (VALUES(19,551,'Prescription_257')) as t(id,weight,name))MATCH (a WHERE a.id = p.id AND (a.name = '徐思思')) -[e:doctor_belong_department ]->(b:department) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和user陈雪有2度关系的user",
        "output": "match(a:user where a.name='陈雪')-[e]->{2,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与用户有关系的用户节点,且用户节点的id不为空,并返回这些用户的height的最小值加身高的最大值,以及用户的身高加156减5乘身高的值",
        "output": "match(a:user)-[e]->(b:user where (b.id is not null)) return MAX(MIN(b.height) + b.height), (b.height + 156 - 5) * b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到耳鼻喉科医生，属于department耳鼻喉科。",
        "output": "match(a:doctor)<-[e:has]-(b:department where b.name='耳鼻喉科') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为147的点的身高,性别",
        "output": "match(a where a.id = 147) return a.height, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询107个名为Geaflow123的点还款的类型为贷款的节点,且其金额的个数小于等于1595.57,权重为空",
        "output": "match(a where a.name='Geaflow123')-[e:repay]->(b:loan where COUNT(b.amount) <= 1595.57 and (b.weight is null)) return b limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑科喜欢的评论,被其他person喜欢的数量",
        "output": "match(a:person where a.name='郑科')-[e:likes]->(b:comment)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询prescription contain的medicine,返回其源点的id的最小值除id的个数,以及目标点的id加72的值",
        "output": "match(a:prescription)-[e:contain]->(b:medicine) return COUNT(MIN(a.id) / a.id), b.id + 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为film且属于Comment_137和Comment_461两点的所有节点",
        "output": "match(a where a.name = 'Comment_137')-[e:belong]->(b:film)<-[e2:belong]-(c where c.name = 'Comment_461') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司的伙伴,或其伙伴的伙伴",
        "output": "match(a:company)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部orders以name分组的name, 根据name从小到大排序",
        "output": "match(a:orders) return a.name group by a.name order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出创造买家张雪创造的订单,的买家",
        "output": "match(a:buyer where name = '张雪')-[e:creates]->(b:orders)<-[e2:creates]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找一本少年闰土喜欢并且其他读者也喜欢的书",
        "output": "match(a:book where a.name='少年闰土')-[e:knows]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为徐梅的节点属于的医生或部门",
        "output": "match(a where a.name='徐梅')-[e:belong]->(b:doctor | department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出71个薪资大于等于5099,年龄为空,或年龄大于等于27的person,根据性别升序排列",
        "output": "match(a:person where (a.salary >= 5099 and (a.age is null)) or a.age >= 27) return a order by a.gender asc limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点类型为学生,边类型为选择的边,返回这些边的源点id除143乘890的平均值,和f0加952除843的值",
        "output": "match(a:student)-[e:selects]->(b) return AVG(e.srcId / 143 * 890), (e.f0 + 952) / 843",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询张梅的朋友的朋友",
        "output": "match(a:person where a.name='张梅')-[e:friend]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为徐强和王轩的,类型为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='徐强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='王轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Redis的person或公司或软件,以及与其有关的公司,并返回Redis的id和这些公司的价值",
        "output": "match(a:person | company | software where name = 'Redis')-[e]-(b:company) return a.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和post Post_258有3度关系的forum",
        "output": "match(a:post where a.name='Post_258')-[e]->{3,3}(b:forum) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询company谷歌apply的loan, 令loan的scale等于company的value的和, 返回company的peopleNumber, loan的amount",
        "output": "match(a:company where a.name='谷歌')-[e:apply]->(b:loan) let b.scale = SUM(a.value) return a.peopleNumber,b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与账户有关系的非大型公司节点，返回它们的ID乘以48,以及Value除以222取余并除以47的值。",
        "output": "match(a:account)-[e]->(b:company where b.scale <> 'large') return b.id * 48, b.value % 222 / 47",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为孙强的点的,category大于等于386且name为建国大业的relation,返回这些relation的id,和边的f0,srcId",
        "output": "match(a where a.name='孙强')-[e:relation]->(b where b.category >= 386 and b.name = '建国大业') return b.id,e.f0, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age除1的值",
        "output": "a.age / 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person杜伟相关的person节点所知道的人",
        "output": "match(a:person where a.name = '杜伟')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回105个名为杜科的点knows的类型是person的节点,且其height为空或id小于等于70",
        "output": "match(a where a.name='杜科')-[e:knows]->(b:person where (b.height is null) or b.id <= 70) return b limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与何轩有关联的账户，以及查询何轩的贷款申请记录。",
        "output": "match(a:person where a.name = '何轩')-[e:own]->(b:account),(a:person where a.name = '何轩')<-[e2:apply]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到24个与标签为'买家'的卖家有咨询关系，并且这些卖家拥有与商品相关的信息的商品。",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有person以id,身高分组的id, 根据id从大到小排序",
        "output": "match(a:person) return a.id group by a.id, a.height order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person周月有关系的person,返回这些点的名字",
        "output": "match(a:person where a.name='周月')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出122个名字不是Mysql且是否开源等于true,或id小于等于9的软件,根据星数从大到小排列",
        "output": "match(a:software where (a.name <> 'Mysql' and a.openSource = true) or a.id <= 9) return a order by a.stars desc limit 122",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与user相关的post，以及这些post所包含的所有其他forum。",
        "output": "match(a:user where a.id = '141')-[e]-(b:post)<-[e2:contain]-(c:forum) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为郑雪的点支付的person",
        "output": "match(a where a.name='郑雪')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出国家的1跳的环",
        "output": "match(a:country)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出大学电子科技大学 拥有的部门,返回部门 拥有的教师的id的最小值乘30加177对身高取余的值",
        "output": "match(a:university where name = '电子科技大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return MIN(c.id) * 30 + 177 % c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person韩若涵 拥有的账号,返回账号 转账的账号的id的最大值加58的平均值",
        "output": "match(a:person where name = '韩若涵')-[e:own]->(b:account)-[e2:transfer]->(c:account) return AVG(MAX(c.id) + 58)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找从loan loan_22出发,经过label为deposit的边,走2度到达的account点",
        "output": "match(a:loan where a.name='loan_22')-[e:deposit]->{2,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与澳大利亚存在包含关系的城市,城市与大学存在包含关系的点,返回这些点的名字",
        "output": "match(a where a.name = '澳大利亚')-[e:contain]->(b:city)-[e2:contain]->(c:university) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和电影院大众影院有3跳关系的person",
        "output": "match(a:cinema where a.name='大众影院')-[e]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出195个帖子Post_363和Post_271,共同的朋友",
        "output": "match(a:post where a.name='Post_363')-[e:friend]->(b)<-[e2:friend]-(c:post where c.name='Post_271') return b limit 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为17的点的价值",
        "output": "match(a where a.id = 17) return a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为XXRepo的用户或事项,以及与其有关的仓库,并返回XXRepo的权重和这些仓库的id",
        "output": "match(a:user | issue where name = 'XXRepo')-[e]-(b:repository) return a.weight, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为何伟和杜若涵的点共同喜欢的,类型是帖子的节点",
        "output": "match(a where a.name = '何伟')-[e:likes]->(b:post)<-[e2:likes]-(c where c.name = '杜若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部读者以年龄,性别,薪资分组的id, 根据id从小到大排序",
        "output": "match(a:reader) return a.id group by a.age, a.gender, a.salary order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person吴宏的所有标签为lover的边,并根据f0降序排列,返回96个",
        "output": "match(a:person where a.name = '吴宏')-[e:lover]->(b) return b order by e.f0 desc limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person的所有关系，或者这些关系的关系。",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找地址不等于A座且id是81的部门拥有的医生的名称,以及这些医生 属于的部门的名称",
        "output": "match(a:department where a.address <> 'A座' and a.id = 81)-[e:has]->(b:doctor)-[e2:belong]->(c:department) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有小说类别的书节点，计算它们的价格乘以85后的结果，并返回其中价格最大和id最小的两个节点。",
        "output": "match(a:book)-[e]->(b:book where b.category = '小说') return b.price * 85, MAX(MAX(b.id) - 91 - b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查询publisher以name,height分组的salary, 根据salary升序排序",
        "output": "match(a:publisher) return a.salary group by a.name, a.height order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person王科创造的评论",
        "output": "match(a:comment)<-[e:creates]-(b:person where b.name='王科') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为96的点的薪资",
        "output": "match(a where a.id = 96) return a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person周科之间有认识关系的person",
        "output": "match(a:person where a.name='周科')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前6个label为own的边",
        "output": "match(a)-[e:own]->(b) return e limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找和账号Zeus有关的公司,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的账号",
        "output": "match(a:account where a.name = 'Zeus')-[e]-(b:company), (b:company)-[e2]-(c:person),(b:company)-[e3]-(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表887,768,669, 以属性id作为相等条件,查找类型是person的点",
        "output": "with p as (select * from (VALUES(887),(768),(669)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person杜宏有关系的person或标签或评论,返回这些点的创建时间",
        "output": "match(a:person where a.name='杜宏')-[e]-(b:person | tag | comment) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person马国强的所有朋友,的目标点id加目标点id的最小值",
        "output": "match(a:person where a.name= '马国强')-[e:friend]->(b) return MIN(e.targetId + e.targetId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据规格分组,计算价值除300对698取余的最小值",
        "output": "return MIN(a.value / 300 % 698) group by a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部美国的点包含的城市,然后找出美国被属于的城市,一起返回",
        "output": "match(a where a.name = '美国')-[e:country_contain_city]->(b:city),(a where a.name = '美国')<-[e2:city_belong_country]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与用户何轩有'喜欢'关系，同时与标签'其他'有'拥有'关系的帖子，并返回这些帖子的值（post.value, post.createTime, post.name),以及用户何轩的年龄和标签'其他'的ID。",
        "output": "match(a:user where a.name='何轩')-[e:likes]->(b:post)<-[e2:has]-(c:tag where c.name='其他') return a.age,b.value, b.createTime, b.name,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件name不是郑建国且salary不为空的节点",
        "output": "match(a where a.name <> '郑建国' and (a.salary is not null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与吴月和赵科都有关联的爱人节点。",
        "output": "match(a:person where a.name='吴月')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询166个和标签等于教师的点有教关系的课程,并且和这些课程有属于关系的部门",
        "output": "match(a:teacher)-[e:teach]->(b:course)-[e2:belong]->(c:department) return c limit 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与Kafka存在拥有关系的用户,用户与合并请求存在创造关系的点,返回这些点的变更文件数",
        "output": "match(a where a.name = 'Kafka')-[e:has]->(b:user)-[e2:creates]->(c:pullRequest) return c.changeFileNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与蚂蚁集团和B站有合作关系的大学，返回这些大学的级别、ID、价值、蚂蚁集团的人员数量和B站的值。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:cooperate]->(b:university)<-[e2:cooperate]-(c:company where c.name='Bilibili') return a.peopleNumber,b.level, b.id, b.value,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表244,497,885, 源点的id等于输入表id,帮我查询和病人张月有关的药品,再帮我查询和张月patient_accept_prescription的其他处方,返回它们",
        "output": "with p as (select * from (VALUES(244),(497),(885)) as t(id)) MATCH (a:patient WHERE a.id = p.id AND (a.name = '张月')) -[e ]-(b:medicine) , (a:patient) -[e2:patient_accept_prescription ]->(c:prescription) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高加177的值",
        "output": "a.height + 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签等于买家的点有咨询关系的卖家,且和这些卖家有回答关系的买家,且和这些买家有创造关系的订单",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:creates]->(d:orders) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从部门眼科出发,经过类型是拥有的边,走3度或4度到达的医生点",
        "output": "match(a:department where a.name='眼科')-[e:has]->{3,4}(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 所有订单包含商品。",
        "output": "match(a:orders)-[e:contain]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算level的求和值除level的最大值",
        "output": "return MAX(SUM(a.level) / a.level) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出95个名为郑思琪的点发布的label为帖子的节点,且节点字数大于383,字数大于156",
        "output": "match(a where a.name='郑思琪')-[e:publish]->(b:post where b.wordCount > 383 and b.wordCount > 156) return b limit 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为50的user关联的issue,和以has关系关联了这些issue的其他repository",
        "output": "match(a:user where a.id = 50)-[e]-(b:issue)<-[e2:has]-(c:repository) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与孤城存在引用关系的所有书籍中，所有书籍之间引用关系中的点，并返回这些点的创建时间。",
        "output": "match(a where a.name = '孤城')-[e:refers]->(b:book)-[e2:refers]->(c:book) return c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为68的编辑有关的作家的相关者, 再返回和作家有关系的伙伴",
        "output": "match(a:publisher where id = 68)-[e]-(b:author)-[e2:relation]->(c), (b:author)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person吴雪出发，通过朋友关系，走过3跳或者4跳可以到达的人",
        "output": "match(a:person where a.name='吴雪')-[e:friend]->{3,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到徐国强支付的人，这个人知道的人",
        "output": "match(a:person where a.name = '徐国强')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person投资的公司,返回其源点的年龄减年龄的数量,以及目标点的价值对价值取余的个数",
        "output": "match(a:person)-[e:invest]->(b:company) return COUNT(a.age - a.age), COUNT(b.value % b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与公司华为有关系的公司, 返回和这些公司有关联的公司的,id的最大值加id的平均值",
        "output": "match(a:company where a.name= '华为')-[e]-(b:company)-[e2]-(c:company) return AVG(MAX(c.id) + c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型为学生的点有选择关系的课程,且和这些课程有属于关系的部门,且和这些部门有拥有关系的学生",
        "output": "match(a:student)-[e:selects]->(b:course)-[e2:belong]->(c:department)-[e3:has]->(d:student) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,权重,创建时间分组,计算id加67乘791对权重取余的最大值",
        "output": "return MAX((a.id + 67) * 791 % a.weight) group by a.id, a.weight, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询生物学院和土木学院之间拥有关系的部门。",
        "output": "match(a:department where a.name='生物学院')-[e:has]->(b)<-[e2:has]-(c:department where c.name='土木学院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回salary大于3957的person knows的person的名称,以及这些person relates的person的名称",
        "output": "match(a:person where a.salary > 3957)-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person杜轩关联的person节点认识的person",
        "output": "match(a:person where a.name = '杜轩')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找与谷歌有合作，或与合作伙伴有合作关系的个人。",
        "output": "match(a:company where n.name=谷歌)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询35个和label为仓库的点有拥有关系的事项,并且和这些事项有属于关系的仓库",
        "output": "match(a:repository)-[e:has]->(b:issue)-[e2:belong]->(c:repository) return c limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与药品散利痛有关系的部门的地址",
        "output": "match(a:medicine where a.name='散利痛')-[e]-(b:department) return b.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型为person或company或software的点",
        "output": "match(a:person | company | software) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签等于大学,名为复旦大学的点,返回这些点的名字",
        "output": "match(a:university where a.name = '复旦大学') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和编辑有关联的书节点,并根据其id分组,返回id,以及id对77取余的平均值",
        "output": "match(a:publisher)-[e:publish]-(b:book) return b.id, AVG(b.id % 77) group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与帖子相关的帖子，以及这些帖子的喜欢者。",
        "output": "match(a:post where a.id = '64')-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为孙国强的节点关联的person",
        "output": "match(a where a.name='孙国强')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与四川大学和浙江大学都有关联的34所大学。",
        "output": "match(a where a.name='四川大学')-[e]->(b:university)<-[e2]-(c where c.name='浙江大学') return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与course有关系的student节点,且student节点的age不为空,并返回这些student的height减192的值,以及student的id乘54乘183的平均值",
        "output": "match(a:course)-[e]->(b:student where (b.age is not null)) return b.height - 192, AVG(b.id * 54 * 183)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出company的2度的环",
        "output": "match(a:company)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为形势与政策的课程有相关者关系,或有相关者的相关者关系的部门",
        "output": "match(a:course where n.name=形势与政策)-[e:relation]->{1,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与大学复旦大学有关,且与教师吴国强有关系的部门节点",
        "output": "match(a:university where a.name='复旦大学')-[e:has]-(b:department)-[e2:has]-(c:teacher where c.name='吴国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有id为164的person关联的person,和以认识关系关联了这些person的其他person",
        "output": "match(a:person where a.id = '164')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2014-12-27,370,255),(1999-11-18,715,63)作为请求表数据,属性分别为createTime,value,peopleNumber, 源点的createTime等于输入表createTime,请帮我找出label为post_has_tag,并且f0加774大于13或f1是false,且源点id不为空的边",
        "output": "with p as (select * from (VALUES(2014-12-27,370,255),(1999-11-18,715,63)) as t(createTime,value,peopleNumber))MATCH (a WHERE a.createTime = p.createTime) -[e:post_has_tag WHERE (e.f0 + 774 > 13 OR e.f1 = FALSE) AND e.srcId IS NOT NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为person,名为李强的点,返回这些点的身高",
        "output": "match(a:person where a.name = '李强') return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询28个和类型为user的点有publish关系的post,以及和这些post有has关系的tag",
        "output": "match(a:user)-[e:publish]->(b:post)-[e2:has]->(c:tag) return c limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和软件Hadoop有1度关系的软件",
        "output": "match(a:software where a.name='Hadoop')-[e]->{1,1}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user韩红之间有publish关系的post",
        "output": "match(a:user where a.name='韩红')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与作家李梅存在认识关系,且与作家马强存在认识关系的作家节点，返回这些作家的身高,及作家李梅的年龄,及作家马强的名字",
        "output": "match(a:author where a.name='李梅')-[e:knows]->(b:author)<-[e2:knows]-(c:author where c.name='马强') return a.age,b.height,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与滴滴公司和东京市有联系的公司节点，并返回它们的规格信息。",
        "output": "match(a:company where a.name='滴滴')-[e]->(b:company)<-[e2]-(c:city where c.name='东京') return b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找喜欢person李宏的person,和这些person认识的person",
        "output": "match(a:person where name = '李宏')<-[e:likes]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回浙江大学所有的部门，再返回每个部门的所有学生，最后返回这些学生的薪资。",
        "output": "match(a where a.name = '浙江大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表312,374,734, 以属性id作为相等条件,找出所有名为赵建聪的,性别不等于male的父母,返回这些父母的名字,和边的f1,权重,目标点id",
        "output": "with p as (select * from (VALUES(312),(374),(734)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '赵建聪')) -[e:person_parent_person ]->(b WHERE b.gender <> 'male') RETURN b.name, e.f1, e.weight, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找176个人数不等于860或规格为large的公司,根据人数从大到小排列",
        "output": "match(a:company where a.peopleNumber <> 860 or a.scale = 'large') return a order by a.peopleNumber desc limit 176",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下person吴月申请的loan节点对应的deposit账户",
        "output": "match(a:person where a.name = '吴月')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为徐建国的节点knows的person",
        "output": "match(a where a.name='徐建国')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点salary大于等于1682,边类型为person_creates_comment,且weight为空且timeStamp不是1997年07月23日的边,返回这些边的targetId的最小值除171的值",
        "output": "match(a where a.salary >= 1682)-[e:person_creates_comment where (e.weight is null) and e.timeStamp <> '1997-07-23']->(b) return MIN(e.targetId) / 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为俄罗斯的国家,以及与其有关的城市,并返回俄罗斯的人数和这些城市的人数",
        "output": "match(a:country where name = '俄罗斯')-[e]-(b:city) return a.peopleNumber, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询电影节点下，评论Comment_106所属的标签。",
        "output": "match(a:comment where a.name = 'Comment_106')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被company apply数量大于49的loan,记为relationCount,再查询这些loan apply的person",
        "output": "match(a:loan) let a.relationCount = SUM((a:loan)<-[e:apply]-(b:company) => b.id) match(a where a.relationCount > 49)-[e2:apply]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有id为168的teacher关联的course,和以teach关系关联了这些course的其他teacher",
        "output": "match(a:teacher where a.id = 168)-[e]-(b:course)<-[e2:teach]-(c:teacher) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为188的点的年龄",
        "output": "match(a where a.id = 188) return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一门叫'大学物理'的课程。",
        "output": "match(a:course where a.name = '大学物理') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与ID为145的人相关的帖子，再查询与这些帖子相关的参与者。",
        "output": "match(a:person where id = '145')-[e]-(b:post)-[e2:partner]->(c), (b:post)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点性别是famale且id除id不是7554,目标点价格大于4981.53,且类型为取消的边",
        "output": "match(a where a.gender = 'famale' and a.id / a.id <> 7554)-[e:cancel]->(b where b.price > 4981.53) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询buyer何宏look的goods, 令goods的name等于buyer的id除16的最大值, 返回buyer的name, goods的value",
        "output": "match(a:buyer where a.name='何宏')-[e:look]->(b:goods) let b.name = MAX(a.id / 16) return a.name,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person knows的person,返回其源点的id对id取余的和,以及目标点的id乘55的值",
        "output": "match(a:person)-[e:knows]->(b:person) return SUM(a.id % a.id), b.id * 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与ID为34的人有关的人（如配偶）,再查找与这些人有关的任何关系（如婚姻关系）。",
        "output": "match(a:person where id = '34')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算height加height加34的值",
        "output": "return a.height + a.height + 34 group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出包含论坛推特包含的用户,的论坛",
        "output": "match(a:forum where name = '推特')-[e:contain]->(b:user)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出包含帖子Post_283的论坛,和这些论坛包含的用户",
        "output": "match(a:post where name = 'Post_283')<-[e:contain]-(b:forum)-[e2:contain]->(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为何科和周国强的,标签等于用户的点公共的朋友节点的名单",
        "output": "match(a:user where a.name='何科')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='周国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person赵科创造的评论节点属于的电影",
        "output": "match(a:person where a.name = '赵科')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定一个人作为源点，软件作为目标点，以及一个提交的边。",
        "output": "match(a:person)-[e:commits]->(b:software) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为software的所有点,并根据name升序排列",
        "output": "match(a:software) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与部门内科有关联，并对病人王国强进行过诊断的医生信息。包括医生的名字、ID、部门内科的ID以及病人王国强的性别。",
        "output": "match(a:department where a.name='内科')-[e:has]->(b:doctor)<-[e2:diagnose]-(c:patient where c.name='王国强') return a.id,b.name, b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找性别大于192或id为77的person购买的软件的名称,以及这些软件 使用的软件的名称",
        "output": "match(a:person where a.gender > 192 or a.id = 77)-[e:buy]->(b:software)-[e2:uses]->(c:software) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有病人的家属或家属的家属",
        "output": "match(a:patient)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家杜思思的所有label为伙伴的边,并根据目标点id从大到小排列,返回15个",
        "output": "match(a:buyer where a.name = '杜思思')-[e:partner]->(b) return b order by e.targetId desc limit 15",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点满足条件名字不等于复仇者联盟,目标点满足条件id大于38或名字为古代或名字小于82,且类型是拥有的边",
        "output": "match(a where a.name <> '复仇者联盟')-[e:has]->(b where b.id > 38 or b.name = '古代' or b.name < 82) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家陈伟查看的商品, 令商品的性别等于买家的年龄的最小值, 返回买家的性别, 商品的id",
        "output": "match(a:buyer where a.name='陈伟')-[e:look]->(b:goods) let b.gender = MIN(a.age) return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出从大学中国科技大学出发,经过标签等于university_has_department的边,走2度到达的部门点",
        "output": "match(a:university where a.name='中国科技大学')-[e:university_has_department]->{2,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询全部源点类型是user,边类型是user_likes_post的边,返回这些边的f0减947的值,和f0乘533的值",
        "output": "match(a:user)-[e:user_likes_post]->(b) return e.f0 - 947, e.f0 * 533",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杜科和赵伟共同认识的人，类型为person节点。",
        "output": "match(a where a.name = '杜科')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '赵伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点label为合并请求,边label为属于,且满足条件权重小于146的边",
        "output": "match(a:pullRequest)-[e:belong where e.weight < 146]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询177个与马红和杜科都存在关系的学生节点",
        "output": "match(a where a.name='马红')-[e]->(b:student)<-[e2]-(c where c.name='杜科') return b limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点标签等于person,边标签等于属于的边,返回这些边的源点id对157取余的最小值,和源点id减156的值",
        "output": "match(a:person)-[e:belong]->(b) return MIN(e.srcId % 157), e.srcId - 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,薪资,名字分组,计算薪资加8431的值",
        "output": "return a.salary + 8431 group by a.height, a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型为person或公司或软件的点",
        "output": "match(a:person | company | software) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以620,512作为请求点id, 以属性id作为相等条件,查询51个价格小于64或字数在350到656之间的书,根据类别升序排列",
        "output": "with p as (select * from (VALUES(620),(512)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.price < 64 OR a.wordCount BETWEEN ASYMMETRIC 350 AND 656)) RETURN a ORDER BY a.category LIMIT 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与马宏有好友关系，与王轩有恋人关系的节点，返回这些节点的名字，马宏的名字和王轩的身高。",
        "output": "match(a:person where a.name='马宏')-[e:friend]->(b:person)<-[e2:lover]-(c:person where c.name='王轩') return a.name,b.name,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从Department of Art College出发，沿着has标签的边走1到3步，到达teacher节点。",
        "output": "match(a:department where a.name='艺术学院')-[e:has]->{1,3}(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找145个salary不是8370的person,根据age从小到大排列",
        "output": "match(a:person where a.salary <> 8370) return a order by a.age asc limit 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为马若涵和陈伟的,类型为person的点公共的朋友节点的名单",
        "output": "match(a:person where a.name='马若涵')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='陈伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有公司按名称、ID和人数分组后的价值，并以价值降序排序。",
        "output": "match(a:company) return a.value group by a.name, a.id, a.peopleNumber order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点name是吴思思,gender是male,目标点age在82到96之间,salary不是1535,且类型为consult的边",
        "output": "match(a where a.name = '吴思思' and a.gender = 'male')-[e:consult]->(b where (b.age BETWEEN 82 AND 96) and b.salary <> 1535) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被person关联数量大于164的person,记为relationCount,再查询这些person关联的person",
        "output": "match(a:person) let a.relationCount = AVG((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 164)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被person购买数量大于106的软件,记为relationCount,再查询这些软件购买的软件",
        "output": "match(a:software) let a.relationCount = AVG((a:software)<-[e:buy]-(b:person) => b.id) match(a where a.relationCount > 106)-[e2:buy]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person赵若涵购买的软件,和赵若涵提交的软件",
        "output": "match(a:software)<-[e:buy]-(b:person where name = '赵若涵')-[e2:commits]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型是department,名为皮肤科的点,返回这些点的address,name",
        "output": "match(a:department where a.name = '皮肤科') return a.address, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(89,'famale',198),(69,'famale',180),(21,'male',168)作为请求表数据,属性分别为id,gender,height, 以属性gender作为相等条件,找出全部person的朋友,或其朋友的朋友",
        "output": "with p as (select * from (VALUES(89,'famale',198),(69,'famale',180),(21,'male',168)) as t(id,gender,height))MATCH (a:person WHERE a.gender = p.gender) -[e:friend ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和software Zookeeper有uses关系的software,再查找以uses关系关联了Zookeeper的software",
        "output": "match(a:software where a.name = 'Zookeeper')-[e:uses]->(b:software),(a:software where a.name = 'Zookeeper')<-[e2:uses]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与defaultName1有存款关系的账户，然后查询这些账户与defaultName1之间的存款关系。",
        "output": "match(a:loan where a.name = 'defaultName1')-[e:deposit]->(b:account),(a:loan where a.name = 'defaultName1')<-[e2:deposit]-(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出全部源点价值的最小值不是229,目标点语言不等于Chinese,且标签为forum_contain_post的边",
        "output": "match(a where MIN(a.value) <> 229)-[e:forum_contain_post]->(b where b.lang <> 'Chinese') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询label为person,名为徐建国的点,返回这些点的身高",
        "output": "match(a:person where a.name = '徐建国') return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person buy的software,返回其源点的id对87取余的值,以及目标点的value减375的数量",
        "output": "match(a:person)-[e:buy]->(b:software) return a.id % 87, COUNT(b.value - 375)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和买家何强之间有查看关系的商品",
        "output": "match(a:buyer where a.name='何强')-[e:look]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询country澳大利亚contain的city节点belong的country",
        "output": "match(a:country where a.name = '澳大利亚')-[e:contain]->(b:city)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出与名为Prescription_250和Prescription_217的点共同包含的,类型是药品的节点",
        "output": "match(a where a.name = 'Prescription_250')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c where c.name = 'Prescription_217') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杭州这座城市。",
        "output": "match(a:city where a.name = '杭州') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对38取余的值",
        "output": "a.id % 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和学生郑国强有关系的课程或部门,返回这些点的课时,名字,id",
        "output": "match(a:student where a.name='郑国强')-[e]-(b:course | department) return b.courseHour, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与issue ISSUE-410存在belong关系,且与user李思琪存在has关系的repository节点，返回这些repository的createTime,name,及issue ISSUE-410的weight,及user李思琪的gender",
        "output": "match(a:issue where a.name='ISSUE-410')-[e:belong]->(b:repository)<-[e2:has]-(c:user where c.name='李思琪') return a.weight,b.createTime, b.name,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部类型为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person有关联的person节点,并根据其性别,名字分组,返回性别,名字,以及身高减身高的值",
        "output": "match(a:person)-[e:lover]-(b:person) return b.gender, b.name, b.height - b.height group by b.gender, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为吴建国的点的,权重不是582或名字为放射科的相关者,返回这些相关者的id,和边的权重,源点id,目标点id",
        "output": "match(a where a.name='吴建国')-[e:relation]->(b where b.weight <> 582 or b.name = '放射科') return b.id,e.weight, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与'person'节点有关联的'person'节点，并按其'salary'属性分组，返回结果。",
        "output": "match(a:person)-[e:pay]-(b:person) return b.salary group by b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点满足条件性别不等于famale,目标点满足条件名字不是何月,且标签为支付的边",
        "output": "match(a where a.gender <> 'famale')-[e:pay]->(b where b.name <> '何月') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为190的仓库拥有的事项, 并将事项有关的合并请求的id的求和值赋值给事项的权重, 接着查询事项的权重小于190的事项属于的仓库",
        "output": "match(a:repository where a.id = 190)-[e:has]->(b:issue) let b.weight = SUM((b:issue)-[e2]-(c:pullRequest) => c.id) match(b:issue where b.weight < 190)-[e3:belong]->(d:repository) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user韩轩有likes关系的post,再查询以publish关系关联了韩轩的post",
        "output": "match(a:user where a.name = '韩轩')-[e:likes]->(b:post),(a:user where a.name = '韩轩')<-[e2:publish]-(c:post)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询22个名为赵伟的点发布的标签等于书的节点,且其字数大于586或创建时间是2028年03月12日",
        "output": "match(a where a.name='赵伟')-[e:publish]->(b:book where b.wordCount > 586 or b.createTime = '2028-03-12') return b limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回编辑发布的书,返回其源点的年龄对10取余的求和值,以及目标点的id的和加37的最大值",
        "output": "match(a:publisher)-[e:publish]->(b:book) return SUM(a.age % 10), MAX(SUM(b.id) + 37)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与周强是同事的人，然后找出与周强有家庭关系的人。",
        "output": "match(a:person where a.name = '周强')-[e:colleague]->(b:person),(a:person where a.name = '周强')<-[e2:family]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从黄强出发，经过投资类型的边，走3或4度到达的公司点是什么？",
        "output": "match(a:person where a.name='黄强')-[e:invest]->{3,4}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与医生马建聪有关,且与医生张伟有关系的部门节点",
        "output": "match(a:doctor where a.name='马建聪')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='张伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找郑轩的病人记录中接受的处方中包含的药物。",
        "output": "match(a:patient where a.name = '郑轩')-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出75个用户喜欢（likes)的与类型为user的点有关系的帖子，以及与这些帖子有包含（has)关系的标签。",
        "output": "match(a:user)-[e:likes]->(b:post)-[e2:has]->(c:tag) return c limit 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和类型为医生的点有属于关系的部门,且和这些部门有拥有关系的医生,且和这些医生有创造关系的处方",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:creates]->(d:prescription) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,name, 数据为(19,159,'杜红'),(65,193,'黄宏')的子查询作为输入表, 源点的name等于输入表name,帮我查询所有源点类型为person,目标点类型为person,类型为person_pay_person的边",
        "output": "with p as (select * from (VALUES(19,159,'杜红'),(65,193,'黄宏')) as t(age,height,name))MATCH (a:person WHERE a.name = p.name) -[e:person_pay_person ]->(b:person) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为李月和杜轩的点共同接受的,标签等于处方的节点",
        "output": "match(a where a.name = '李月')-[e:accept]->(b:prescription)<-[e2:accept]-(c where c.name = '杜轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为address,name,size, 数据为('北区','大众影院',537),('西区','UME',958),('C栋','人人影城',567),('南区','人人影城',238), 源点的address等于输入表address,找出标签等于标签的点,返回187个",
        "output": "with p as (select * from (VALUES('北区','大众影院',537),('西区','UME',958),('C栋','人人影城',567),('南区','人人影城',238)) as t(address,name,size))MATCH (a:tag WHERE a.address = p.address) RETURN a LIMIT 187",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询苹果产品",
        "output": "match(a:goods where a.name = '苹果') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找account repay的loan,返回其源点的value除323的求和值,以及目标点的weight除467加3976.81的值",
        "output": "match(a:account)-[e:repay]->(b:loan) return SUM(a.value / 323), b.weight / 467 + 3976.81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从编辑马思思出发,经过标签为发布的边,走2跳或3跳到达的书点",
        "output": "match(a:publisher where a.name='马思思')-[e:publish]->{2,3}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为何宏的节点watch的cinema",
        "output": "match(a where a.name='何宏')-[e:watch]->(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与病人有关系的药品节点,且药品节点的价格不为空,并返回这些药品的价格加269的值,以及药品的id乘82的值",
        "output": "match(a:patient)-[e]->(b:medicine where (b.price is not null)) return b.price + 269, b.id * 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和用户周轩之间有发布关系的帖子",
        "output": "match(a:user where a.name='周轩')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有id为85的论坛关联的标签,和以拥有关系关联了这些标签的其他帖子",
        "output": "match(a:forum where a.id = 85)-[e]-(b:tag)<-[e2:has]-(c:post) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出185个名为周思琪的点喜欢的标签等于书的节点,且节点字数在691到850之间",
        "output": "match(a where a.name='周思琪')-[e:likes]->(b:book where (b.wordCount BETWEEN 691 AND 850)) return b limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与电子科技大学和武汉大学两点都相邻，且类型的节点是城市。",
        "output": "match(a where a.name = '电子科技大学')-[e:belong]->(b:city)<-[e2:belong]-(c where c.name = '武汉大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(43,'数据结构',1),(36,'操作系统',4)作为请求表数据,属性分别为courseHour,name,credit, 以属性name作为相等条件,请帮我查找所有id为23的student关联的course,和以selects关系关联了这些course的其他student",
        "output": "with p as (select * from (VALUES(43,'数据结构',1),(36,'操作系统',4)) as t(courseHour,name,credit))MATCH (a:student WHERE a.name = p.name AND (a.id = '23')) -[e ]-(b:course) <-[e2:student_selects_course ]-(c:student) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为赵思思的节点选择的课程",
        "output": "match(a where a.name='赵思思')-[e:selects]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从student杜建国出发，通过label为selects的边，走两步到达的course节点。",
        "output": "match(a:student where a.name='杜建国')-[e:selects]->{2,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从吴建国读者开始，经过喜欢（likes)类型的边，跳了两下后到达的书籍位置在哪里？",
        "output": "match(a:reader where a.name='吴建国')-[e:likes]->{2,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以697作为请求点id, 以属性id作为相等条件,请帮我查找满足条件薪资不为空的节点",
        "output": "with p as (select * from (VALUES(697)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.salary IS NOT NULL)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找买家黄思琪创造的订单节点包含的商品",
        "output": "match(a:buyer where a.name = '黄思琪')-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为陈若涵的点relates的person",
        "output": "match(a where a.name='陈若涵')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和repository Kafka之间有has关系的pullRequest",
        "output": "match(a:repository where a.name='Kafka')-[e:has]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找34个名为深圳的点belong的标签为country的节点,且节点area小于等于84053",
        "output": "match(a where a.name='深圳')-[e:belong]->(b:country where b.area <= 84053) return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询李思思拥有的所有账户，以及与这些账户有申请贷款关系的账户。",
        "output": "match(a:person where a.name = '李思思')-[e:own]->(b:account),(a:person where a.name = '李思思')<-[e2:apply]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age的求和值减83的值",
        "output": "SUM(a.age) - 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有从大学（source label）到城市（target label）且标签为belong的边。",
        "output": "match(a:university)-[e:belong]->(b:city) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和部门外科有关系的部门或处方,返回这些点的id,名字,类别",
        "output": "match(a:department where a.name='外科')-[e]-(b:department | prescription) return b.id, b.name, b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据地址,权重,名字分组,计算weight的个数除权重的值",
        "output": "return COUNT(a.weight) / a.weight group by a.address, a.weight, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前114个等级大于1或名字等于清华大学或价值除704大于等于24的大学",
        "output": "match(a:university where a.level > 1 or a.name = '清华大学' or a.value / 704 >= 24) return a limit 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与账号Light有关,且与账号XXD有关系的贷款节点",
        "output": "match(a:account where a.name='Light')-[e:repay]-(b:loan)-[e2:deposit]-(c:account where c.name='XXD') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber,id,value分组,计算id的最小值减69的数量",
        "output": "return COUNT(MIN(a.id) - 69) group by a.peopleNumber, a.id, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询仓库拥有的事项, 令事项的状态的值等于创造事项的用户的薪资的最大值, 再查找事项属于的仓库",
        "output": "match(a:repository)-[e:has]->(b:issue) let b.status = MAX((b:issue)<-[e2:creates]-(c:user) => c.salary) match(b:issue)-[e3:belong]->(d:repository) return b.status, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出id为102的大学有关的城市的相关者, 再给出和城市有关系的相关者",
        "output": "match(a:university where id = '102')-[e]-(b:city)-[e2:relation]->(c), (b:city)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的1度的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为吴梅的部门,以及与其有关的医生,并返回吴梅的薪资和这些医生的身高",
        "output": "match(a:department where name = '吴梅')-[e]-(b:doctor) return a.salary, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值分组,计算value的平均值除922的值",
        "output": "return AVG(a.value) / 922 group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与ID为170的标签相关的评论的关联，再给出与评论有关系的合作伙伴。",
        "output": "match(a:tag where id = '170')-[e]-(b:comment)-[e2:relation]->(c), (b:comment)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与何建国和孙雪都有关的人节点",
        "output": "match(a:person where a.name='何建国')-[e:friend]-(b:person)-[e2:friend]-(c:person where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表227,484, 源点的id等于输入表id,找出类型为公司,名为华为的点,返回这些点的名字,价值",
        "output": "with p as (select * from (VALUES(227),(484)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '华为')) RETURN a.name, a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出合并请求以变更文件数分组的id, 根据id降序排序",
        "output": "match(a:pullRequest) return a.id group by a.changeFileNumber order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有与medicine关联的doctor，以及这些doctor所关联的其他部门。",
        "output": "match(a:medicine where a.id = '107')-[e]-(b:doctor)<-[e2:has]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前43个名字不是西虹市首富或价值在319到374之间的电影",
        "output": "match(a:film where a.name <> '西虹市首富' or (a.value BETWEEN 319 AND 374)) return a limit 43",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出拥有'城市'标签且位于深圳或天津的两个点的所有共同朋友。",
        "output": "match(a:city where a.name='深圳')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='天津') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为何科的person有relation关系,或有relation的relation关系的person",
        "output": "match(a:person where n.name=何科)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与公司相关的贷款节点，按照它们的ID和权重进行分组，并返回ID和权重。",
        "output": "match(a:company)-[e:apply]-(b:loan) return b.id, b.weight group by b.id, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询同时包含'person'标签且与另一个'person'标签的点，并且这些点之间存在'likes'关系，共62个。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person) return c limit 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算id对61取余的值",
        "output": "return a.id % 61 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部person的partner,或其partner的partner",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与处方Prescription_412相关的处方，并返回它们所列出的所有药品。",
        "output": "match(a:prescription where a.name = 'Prescription_412')-[e]-(b:prescription), (a:prescription)-[e2:contain]->(c:medicine) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出电影院人人影城的所有类型为相关者的边,并根据源点id从小到大排列,返回9个",
        "output": "match(a:cinema where a.name = '人人影城')-[e:relation]->(b) return b order by e.srcId asc limit 9",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点类型为书,边类型为引用的边,返回这些边的目标点id乘81的值,和f0对896取余的最小值",
        "output": "match(a:book)-[e:refers]->(b) return e.targetId * 81, MIN(e.f0 % 896)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,age, 数据为(6985,'韩强',77),(5986,'杜建国',57),(6341,'黄建聪',26), 以属性age作为相等条件,请帮我找出全部源点标签等于doctor,边标签等于doctor_creates_prescription,并且满足条件targetId不为空或f1不等于true的边",
        "output": "with p as (select * from (VALUES(6985,'韩强',77),(5986,'杜建国',57),(6341,'黄建聪',26)) as t(salary,name,age))MATCH (a:doctor WHERE a.age = p.age) -[e:doctor_creates_prescription WHERE e.targetId IS NOT NULL OR e.f1 <> TRUE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和公司蚂蚁集团有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的贷款",
        "output": "match(a:company where a.name = '蚂蚁集团')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:loan) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找卖家杜月 回答的买家,返回买家 查看的商品的sellerNumber的个数乘249.36的值",
        "output": "match(a:seller where name = '杜月')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return COUNT(c.sellerNumber) * 249.36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person有关联的账号节点,并根据其id,是否冻结分组,返回id,是否冻结,以及价值加150的值",
        "output": "match(a:person)-[e:own]-(b:account) return b.id, b.isBlock, b.value + 150 group by b.id, b.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与PR-81存在属于关系的仓库,仓库与用户存在拥有关系的点,返回这些点的id",
        "output": "match(a where a.name = 'PR-81')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找169个person Sam和韩科,共同的family",
        "output": "match(a:person where a.name='Sam')-[e:person_family_person]->(b)<-[e2:person_family_person]-(c:person where c.name='韩科') return b limit 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被账号BIN还款的贷款,和BIN还款的贷款",
        "output": "match(a:loan)<-[e:repay]-(b:account where name = 'BIN')-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与一个用户相关的所有其他用户，以及这些其他用户之间的相关关系。",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出comment Comment_460 belong的film,以及belong这些film的comment",
        "output": "match(a:comment where name = 'Comment_460')-[e:belong]->(b:film)<-[e2:belong]-(c:comment) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询仓库拥有的事项,返回其源点的星数对335取余的值,以及目标点的id乘id的值",
        "output": "match(a:repository)-[e:has]->(b:issue) return a.stars % 335, b.id * b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有商品点，按照销量排序",
        "output": "match(a:goods) return a order by a.sellerNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点id不为空且身高大于161,id在21到54之间,边类型是提交,且f1为false且源点id小于等于168的边,返回这些边的f0除f0的值",
        "output": "match(a where (a.id is not null) and a.height > 161 and (a.id BETWEEN 21 AND 54))-[e:commits where e.f1 = false and e.srcId <= 168]->(b) return e.f0 / e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以980,234,907,2,294作为请求点id, 以属性id作为相等条件,查询所有comment以createTime分组的wordCount, 根据wordCount从大到小排序",
        "output": "with p as (select * from (VALUES(980),(234),(907),(2),(294)) as t(id)) MATCH (a:comment WHERE a.id = p.id) RETURN a.wordCount GROUP BY a.createTime ORDER BY a.wordCount DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为108的forum contain的post, 并将post有关的user的height的最小值赋值给post的value, 接着查询post的value小于108的post has的tag",
        "output": "match(a:forum where a.id = 108)-[e:contain]->(b:post) let b.value = MIN((b:post)-[e2]-(c:user) => c.height) match(b:post where b.value < 108)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person李月有关系的贷款, 返回和这些贷款有关联的账号的,价值除790的求和值",
        "output": "match(a:person where a.name= '李月')-[e]-(b:loan)-[e2]-(c:account) return SUM(c.value / 790)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,id,salary, 数据为('famale',31,4820),('famale',76,2854),('male',31,6990),('male',73,5938), 源点的salary等于输入表salary,找出与作家周伟有关系的作家的年龄",
        "output": "with p as (select * from (VALUES('famale',31,4820),('famale',76,2854),('male',31,6990),('male',73,5938)) as t(gender,id,salary))MATCH (a:author WHERE a.salary = p.salary AND (a.name = '周伟')) -[e ]-(b:author) RETURN b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马宏的类型为partner的边,并根据targetId从大到小排列,返回93个",
        "output": "match(a:person where a.name = '马宏')-[e:partner]->(b) return b order by e.targetId desc limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签等于company,边标签等于belong,且满足条件srcId在20到62之间或f0小于等于869或srcId为空的边",
        "output": "match(a:company)-[e:belong where (e.srcId BETWEEN 20 AND 62) or e.f0 <= 869 or (e.srcId is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找16个名为LX001的点转账的类型是账号的节点,且节点创建时间不等于2006年07月14日且价值大于等于141",
        "output": "match(a where a.name='LX001')-[e:transfer]->(b:account where b.createTime <> '2006-07-14' and b.value >= 141) return b limit 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点标签等于用户,目标点标签等于帖子,标签等于标签的边",
        "output": "match(a:user)-[e:tag]->(b:post) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问您需要查询的是所有reader之间的关系，还是reader和其关系之间的关系？",
        "output": "match(a:reader)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "人数乘556的值",
        "output": "a.peopleNumber * 556",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出吴强和何伟的共同朋友，他们各有65位。",
        "output": "match(a:user where a.name='吴强')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='何伟') return b limit 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除65的求和值",
        "output": "SUM(a.id / 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找吴建聪的点认识的person,然后查找吴建聪被支付的person,一起返回",
        "output": "match(a where a.name = '吴建聪')-[e:knows]->(b:person),(a where a.name = '吴建聪')<-[e2:pay]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找帖子Post_259拥有的标签,被其他帖子拥有的数量",
        "output": "match(a:post where a.name='Post_259')-[e:has]->(b:tag)<-[e2:has]-(c:post) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与城市相关的国家节点，按ID分组，并返回这些ID。",
        "output": "match(a:city)-[e:belong]-(b:country) return b.id group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出身高不是171且年龄大于2336的节点",
        "output": "match(a where a.height <> 171 and a.age > 2336) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "年龄对年龄取余的值",
        "output": "a.age % a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点名字等于张若涵,目标点性别不是male或年龄小于26,且标签为认识的边",
        "output": "match(a where a.name = '张若涵')-[e:knows]->(b where b.gender <> 'male' or b.age < 26) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有郑思琪的点喜欢的person,然后帮我查询郑思琪被认识的person,一起返回",
        "output": "match(a where a.name = '郑思琪')-[e:likes]->(b:person),(a where a.name = '郑思琪')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为郑宏和何思思的用户共同关注的商品节点",
        "output": "match(a where a.name = '郑宏')-[e:look]->(b:goods)<-[e2:look]-(c where c.name = '何思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和医生有关联的处方节点,并根据其创建时间分组,返回创建时间,以及权重对220取余的个数",
        "output": "match(a:doctor)-[e:creates]-(b:prescription) return b.createTime, COUNT(b.weight % 220) group by b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签为公司的点有合作关系的大学,且和这些大学有属于关系的城市,且和这些城市有包含关系的大学",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:belong]->(c:city)-[e3:contain]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为Kafka的点的,id乘21等于205,id在12到31之间的伙伴,返回这些伙伴的状态,和边的f0,f1",
        "output": "match(a where a.name='Kafka')-[e:partner]->(b where b.id * 21 = 205 and (b.id BETWEEN 12 AND 31)) return b.status,e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找48个价格不为空且名字不是鞋子的商品,根据销量从小到大排列",
        "output": "match(a:goods where (a.price is not null) and a.name <> '鞋子') return a order by a.sellerNumber asc limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减32的平均值",
        "output": "AVG(a.value - 32)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有起点和终点都是人，且标签为家庭的边。",
        "output": "match(a:person)-[e:family]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点age不是17或height大于等于157或gender是male,边label为likes,且srcId小于26或srcId为135,且f1不等于false的边,返回这些边的targetId的求和值乘126的值",
        "output": "match(a where a.age <> 17 or a.height >= 157 or a.gender = 'male')-[e:likes where (e.srcId < 26 or e.srcId = 135) and e.f1 <> false]->(b) return SUM(e.targetId) * 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询急诊部的医生属于哪个部门。",
        "output": "match(a:department where a.name = '急诊部')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,wordCount, 数据为(38,'Comment_381',890),(2,'Comment_440',795),(47,'Comment_365',772),(12,'Comment_130',750), 源点的id等于输入表id,请帮我找出126个film泰坦尼克号和神探狄仁杰,共同的friend",
        "output": "with p as (select * from (VALUES(38,'Comment_381',890),(2,'Comment_440',795),(47,'Comment_365',772),(12,'Comment_130',750)) as t(id,name,wordCount))MATCH (a:film WHERE a.id = p.id AND (a.name = '泰坦尼克号')) -[e:friend ]->(b) <-[e2:friend ]-(c:film WHERE c.name = '神探狄仁杰') RETURN b LIMIT 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,gender, 数据为(12,48,'famale'),(52,20,'famale')的子查询作为输入表, 以属性gender作为相等条件,给出与prescription Prescription_459有关系的user, 返回和这些user有关联的user的,id的和减31减6的数量",
        "output": "with p as (select * from (VALUES(12,48,'famale'),(52,20,'famale')) as t(age,id,gender))MATCH (a:prescription WHERE a.gender = p.gender AND (a.name = 'Prescription_459')) -[e ]-(b:user) -[e2 ]-(c:user) RETURN COUNT(SUM(c.id) - 31 - 6) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回用户喜欢的仓库, 令仓库的权重的值等于喜欢仓库的用户的id的和, 再查找仓库拥有的用户",
        "output": "match(a:user)-[e:likes]->(b:repository) let b.weight = SUM((b:repository)<-[e2:likes]-(c:user) => c.id) match(b:repository)-[e3:has]->(d:user) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为doctor的点,并根据salary从大到小排列",
        "output": "match(a:doctor) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'书'且名称为'百年孤独'的点，并返回它们的ID、创建时间和名称。",
        "output": "match(a:book where a.name = '百年孤独') return a.id, a.createTime, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被用户发布数量大于85的帖子,记为relationCount,再查询这些帖子发布的标签",
        "output": "match(a:post) let a.relationCount = MIN((a:post)<-[e:publish]-(b:user) => b.id) match(a where a.relationCount > 85)-[e2:publish]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找182个名为外科的点拥有的类型为医生的节点,且节点薪资减薪资等于175,名字不是韩强",
        "output": "match(a where a.name='外科')-[e:has]->(b:doctor where b.salary - b.salary = 175 and b.name <> '韩强') return b limit 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,身高分组,计算age的最大值减59的数量",
        "output": "return COUNT(MAX(a.age) - 59) group by a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名字为'王伟'的所有person节点，计算它们的id加上83和身高除以191后的余数。",
        "output": "match(a:person)-[e]->(b:person where b.name = '王伟') return b.id + 83, b.height % 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为loan或company或person的点",
        "output": "match(a:loan | company | person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为杜梅和李建国的,类型是编辑的点公共的伙伴节点的名单",
        "output": "match(a:publisher where a.name='杜梅')-[e:partner]->(b)<-[e2:partner]-(c:publisher where c.name='李建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为person的元素，它们有creates关系评论，并且这些评论属于belong关系的电影，并且这些电影有has关系标签。",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找源点标签等于person,目标点标签等于person,标签等于person_knows_person的边",
        "output": "match(a:person)-[e:person_knows_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表961,163,521,627, 源点的id等于输入表id,请帮我找出191个与陈伟和王思思都存在关系的person节点",
        "output": "with p as (select * from (VALUES(961),(163),(521),(627)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '陈伟')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '王思思') RETURN b LIMIT 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为117的作家认识的作家, 并将作家有关的作家的年龄的平均值赋值给作家(b)的id, 接着查询作家(b)的id小于117的作家撰写的书",
        "output": "match(a:author where a.id = 117)-[e:knows]->(b:author) let b.id = AVG((b:author)-[e2]-(c:author) => c.age) match(b:author where b.id < 117)-[e3:write]->(d:book) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除194的值",
        "output": "a.height / 194",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询158个和标签等于合并请求的点有属于关系的仓库,以及和这些仓库有拥有关系的合并请求",
        "output": "match(a:pullRequest)-[e:belong]->(b:repository)-[e2:has]->(c:pullRequest) return c limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与处方Prescription_264相关的病人，并获取Prescription_264中包含的所有其他药品。",
        "output": "match(a:prescription where a.name = 'Prescription_264')-[e]-(b:patient), (a:prescription)-[e2:contain]->(c:medicine) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为黄建国和李轩的点共同creates的,label为pullRequest的节点",
        "output": "match(a where a.name = '黄建国')-[e:creates]->(b:pullRequest)<-[e2:creates]-(c where c.name = '李轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出label为person_buy_software,并且满足条件srcId不为空或targetId不是192的边",
        "output": "match(a)-[e:person_buy_software where (e.srcId is not null) or e.targetId <> 192]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询likes comment Comment_388的person,和这些person likes的comment",
        "output": "match(a:comment where name = 'Comment_388')<-[e:likes]-(b:person)-[e2:likes]->(c:comment) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,name,gender, 数据为(9322,'张伟','famale'),(9646,'徐梅','male')的子查询作为输入表, 以属性salary作为相等条件,返回类型为评论,名为Comment_262的点,返回这些点的id,创建时间",
        "output": "with p as (select * from (VALUES(9322,'张伟','famale'),(9646,'徐梅','male')) as t(salary,name,gender))MATCH (a:comment WHERE a.salary = p.salary AND (a.name = 'Comment_262')) RETURN a.id, a.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与publisher有关系的非男性reader节点，并计算他们的salary乘salary的和，以及salary乘9870的值。",
        "output": "match(a:publisher)-[e]->(b:reader where b.gender <> 'famale') return SUM(b.salary * b.salary), b.salary * 9870",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找198个人，按年龄升序排列，其中身高为空。",
        "output": "match(a:person where (a.height is null)) return a order by a.age asc limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和标签为account的点有transfer关系的account,以及和这些account有transfer关系的account,以及和这些account有transfer关系的account",
        "output": "match(a:account)-[e:transfer]->(b:account)-[e2:transfer]->(c:account)-[e3:transfer]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person郑科有person_pay_person关系的person,再给出以person_knows_person关系关联了郑科的person",
        "output": "match(a:person where a.name = '郑科')-[e:person_pay_person]->(b:person),(a:person where a.name = '郑科')<-[e2:person_knows_person]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,gender,height, 数据为(97,'male',165),(93,'male',187),(61,'male',175), 以属性height作为相等条件,返回101个name不是吴梅的reader,根据height降序排列",
        "output": "with p as (select * from (VALUES(97,'male',165),(93,'male',187),(61,'male',175)) as t(age,gender,height))MATCH (a:reader WHERE a.height = p.height AND (a.name <> '吴梅')) RETURN a ORDER BY a.height DESC LIMIT 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以640,874,1,214作为请求点id, 以属性id作为相等条件,请帮我找出与名为计算机网络和三体的点共同认识的,标签等于书的节点",
        "output": "with p as (select * from (VALUES(640),(874),(1),(214)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '计算机网络')) -[e:knows ]->(b:book) <-[e2:knows ]-(c WHERE c.name = '三体') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与author李宏有关系的author的name",
        "output": "match(a:author where a.name='李宏')-[e]-(b:author) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与电影泰坦尼克号有关系的person的年龄",
        "output": "match(a:film where a.name='泰坦尼克号')-[e]-(b:person) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person张雪的类型为相关者的边,并根据f0降序排列,返回27个",
        "output": "match(a:person where a.name = '张雪')-[e:relation]->(b) return b order by e.f0 desc limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为180的software关联的software,和以buy关系关联了这些software的其他person",
        "output": "match(a:software where a.id = 180)-[e]-(b:software)<-[e2:buy]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person徐雪有3度或4度关系的person",
        "output": "match(a:person where a.name='徐雪')-[e]->{3,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被公司申请数量大于190的贷款,记为relationCount,再查询这些贷款申请的person",
        "output": "match(a:loan) let a.relationCount = AVG((a:loan)<-[e:apply]-(b:company) => b.id) match(a where a.relationCount > 190)-[e2:apply]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与大学中国科技大学有关系的城市的面积",
        "output": "match(a:university where a.name='中国科技大学')-[e]-(b:city) return b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘id减93的最小值",
        "output": "MIN(a.id * a.id - 93)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以562,289,362,135,91作为请求点id, 源点的id等于输入表id,给出与部门土木学院有department_has_student关系的2度以内的环",
        "output": "with p as (select * from (VALUES(562),(289),(362),(135),(91)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (name = '土木学院')) -[e:department_has_student ]->{0,1}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点类型为买家,边类型为咨询的边,返回这些边的源点id减52的值,和srcId的最大值除192的值",
        "output": "match(a:buyer)-[e:consult]->(b) return e.srcId - 52, MAX(e.srcId) / 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为Prescription_222的节点contain的prescription或doctor",
        "output": "match(a where a.name='Prescription_222')-[e:contain]->(b:prescription | doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出读者喜欢的书,返回其源点的id乘11乘4073的值,以及目标点的价格除37的求和值",
        "output": "match(a:reader)-[e:likes]->(b:book) return a.id * 11 * 4073, SUM(b.price / 37)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于大学,名为电子科技大学的点,返回这些点的名字",
        "output": "match(a:university where a.name = '电子科技大学') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生孙建聪属于的部门,和孙建聪诊断的病人",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '孙建聪')-[e2:diagnose]->(c:patient) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和名为韩轩的person有相关者关系,或有相关者的相关者关系的公司",
        "output": "match(a:person where n.name=韩轩)-[e:relation]->{1,2}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age乘89的值",
        "output": "a.age * 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,salary分组,计算height乘156的求和值",
        "output": "return SUM(a.height * 156) group by a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询56个名为周雪的点has的类型为goods的节点,且节点sellerNumber大于25或price不为空",
        "output": "match(a where a.name='周雪')-[e:has]->(b:goods where b.sellerNumber > 25 or (b.price is not null)) return b limit 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是读者,名为赵轩的点,返回这些点的名字,薪资",
        "output": "match(a:reader where a.name = '赵轩') return a.name, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,gender,name, 数据为(94,'famale','吴红'),(6,'famale','张雪'), 以属性gender作为相等条件,找出与person王建聪有关系的person, 返回和这些person有关联的person的,salary加4923的平均值",
        "output": "with p as (select * from (VALUES(94,'famale','吴红'),(6,'famale','张雪')) as t(id,gender,name))MATCH (a:person WHERE a.gender = p.gender AND (a.name = '王建聪')) -[e ]-(b:person) -[e2 ]-(c:person) RETURN AVG(c.salary + 4923) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询认识person王国强认识的person,的person",
        "output": "match(a:person where name = '王国强')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找name为PR-492且changeFileNumber的个数大于等于52的pullRequest belong的repository的名称,以及这些repository has的pullRequest的名称",
        "output": "match(a:pullRequest where a.name = 'PR-492' and COUNT(a.changeFileNumber) >= 52)-[e:belong]->(b:repository)-[e2:has]->(c:pullRequest) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person认识的person,返回其源点的年龄减年龄的最小值,以及目标点的薪资减4920的值",
        "output": "match(a:person)-[e:knows]->(b:person) return MIN(a.age - a.age), b.salary - 4920",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回和person有关联的person节点,并根据其salary,name分组,返回salary,name,以及height对176取余加156的值",
        "output": "match(a:person)-[e:person_pay_person]-(b:person) return b.salary, b.name, b.height % 176 + 156 group by b.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于publisher,边标签等于publish的边,返回这些边的srcId乘142的个数,和f0的最小值减564的平均值",
        "output": "match(a:publisher)-[e:publish]->(b) return COUNT(e.srcId * 142), AVG(MIN(e.f0) - 564)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从病人周思琪出发，经过接受类型的边，走2到4步到达的处方点。",
        "output": "match(a:patient where a.name='周思琪')-[e:accept]->{2,4}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出watch film神探狄仁杰的person,和这些person watch的film",
        "output": "match(a:film where name = '神探狄仁杰')<-[e:watch]-(b:person)-[e2:watch]->(c:film) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签等于publisher的点,并根据gender从大到小排列",
        "output": "match(a:publisher) return a order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据面积,人数分组,计算id对97取余的值",
        "output": "return a.id % 97 group by a.area, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person郑宏 创造的评论,返回评论 属于的电影的id加id的值",
        "output": "match(a:person where name = '郑宏')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c.id + c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与UME存在上映关系且拥有标签的电影的ID。",
        "output": "match(a where a.name = 'UME')-[e:releases]->(b:film)-[e2:has]->(c:tag) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为字节的点belong的全部city,并对这些city的name进行求和",
        "output": "match(a where a.name='字节')-[e:belong]->(b:city) return SUM(b.name)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,scale分组,计算value加314对36取余的值",
        "output": "return a.value + 314 % 36 group by a.name, a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询软件Geaflow使用的软件,以及创造这些软件的公司, 令公司的名字等于软件的星数的个数, 返回软件(a)的价值,软件(b)的价值,公司(c)的id",
        "output": "match(a:software where name = 'Geaflow')-[e:uses]->(b:software)<-[e2:creates]-(c:company) let c.name = COUNT(a.stars) return a.value,b.value,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,name分组,计算id减58的求和值",
        "output": "return SUM(a.id - 58) group by a.level, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person周科观看的电影,被其他评论属于的数量",
        "output": "match(a:person where a.name='周科')-[e:watch]->(b:film)<-[e2:belong]-(c:comment) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person黄红提交的软件节点使用的软件",
        "output": "match(a:person where a.name = '黄红')-[e:commits]->(b:software)-[e2:uses]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与名为吴伟和赵伟的点共同ask的,标签等于buyer的节点",
        "output": "match(a where a.name = '吴伟')-[e:ask]->(b:buyer)<-[e2:ask]-(c where c.name = '赵伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询黄国强认识的人，并返回这些人的姓名。",
        "output": "match(a where a.name = '黄国强')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘id的平均值",
        "output": "AVG(a.id * a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与郑强存在cancel关系的orders,orders与goods存在contain关系的点,返回这些点的price",
        "output": "match(a where a.name = '郑强')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被user孙月publish的post",
        "output": "match(a:post)<-[e:publish]-(b:user where b.name='孙月') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询76个gender等于3且name不等于杜思琪,或height不等于150的buyer,根据id降序排列",
        "output": "match(a:buyer where (a.gender = 3 and a.name <> '杜思琪') or a.height <> 150) return a order by a.id desc limit 76",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,name, 数据为(172,80,'马轩')的子查询作为输入表, 以属性id作为相等条件,找出名为defaultName的loan,以及与其有关的company,并返回defaultName的amount和这些company的peopleNumber",
        "output": "with p as (select * from (VALUES(172,80,'马轩')) as t(height,id,name))MATCH (a:loan WHERE a.id = p.id AND (name = 'defaultName')) -[e ]-(b:company) RETURN a.amount, b.peopleNumber ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(196,8591,'吴月')作为请求表数据,属性分别为height,salary,name, 源点的salary等于输入表salary,返回所有名为韩思琪的,价值不为空,语言不是go的朋友,返回这些朋友的开源,和边的f1",
        "output": "with p as (select * from (VALUES(196,8591,'吴月')) as t(height,salary,name))MATCH (a WHERE a.salary = p.salary AND (a.name = '韩思琪')) -[e:friend ]->(b WHERE b.value IS NOT NULL AND b.lang <> 'go') RETURN b.openSource, e.f1 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和标签为person的点有own关系的account,且和这些account有repay关系的loan,且和这些loan有deposit关系的account",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有id为37的病人关联的处方,和以接受关系关联了这些处方的其他病人",
        "output": "match(a:patient where a.id = 37)-[e]-(b:prescription)<-[e2:accept]-(c:patient) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找pay person孙梅knows的person,的person",
        "output": "match(a:person where name = '孙梅')-[e:knows]->(b:person)<-[e2:pay]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "韩红的伙伴的朋友的朋友",
        "output": "match(a:person where a.name='韩红')-[e:partner]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以465,727,611,357作为请求点id, 源点的id等于输入表id,帮我查询全部名为马建国的点创造的处方",
        "output": "with p as (select * from (VALUES(465),(727),(611),(357)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '马建国')) -[e:doctor_creates_prescription ]->(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点标签为买家,边标签为取消的边,返回这些边的权重对164.81取余乘849的最小值,和权重除183.43乘132除550的最小值",
        "output": "match(a:buyer)-[e:cancel]->(b) return MIN(e.weight % 164.81 * 849), MIN(e.weight / 183.43 * 132 / 550)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有id为4的论坛关联的帖子,和以喜欢关系关联了这些帖子的其他用户",
        "output": "match(a:forum where a.id = 4)-[e]-(b:post)<-[e2:likes]-(c:user) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以认识关系关联了作家赵国强的作家",
        "output": "match(a:author where a.name='赵国强')<-[e:knows]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件价值是138的节点",
        "output": "match(a where a.value = 138) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person何国强有关系的person, 返回和这些person有关联的person的,salary的最小值减5112的值",
        "output": "match(a:person where a.name= '何国强')-[e]-(b:person)-[e2]-(c:person) return MIN(c.salary) - 5112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person陈强支付的person,被其他person支付的数量",
        "output": "match(a:person where a.name='陈强')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出医生徐强的伙伴的朋友的伙伴",
        "output": "match(a:doctor where a.name='徐强')-[e:partner]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以629,894,873作为请求点id, 以属性id作为相等条件,找出源点age为空,边label为author_knows_author,且满足条件f0大于等于611的边,返回这些边的weight除195.16的平均值",
        "output": "with p as (select * from (VALUES(629),(894),(873)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.age IS NULL)) -[e:author_knows_author WHERE e.f0 >= 611 ]->(b) RETURN AVG(e.weight / 195.16) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,id,name, 数据为(839,33,'四川大学'),(600,40,'北京大学'),(963,36,'复旦大学'),(729,0,'重庆大学'), 以属性id作为相等条件,帮我查询与名为谷歌和华为的点共同属于的,类型为城市的节点",
        "output": "with p as (select * from (VALUES(839,33,'四川大学'),(600,40,'北京大学'),(963,36,'复旦大学'),(729,0,'重庆大学')) as t(value,id,name))MATCH (a WHERE a.id = p.id AND (a.name = '谷歌')) -[e:company_belong_city ]->(b:city) <-[e2:company_belong_city ]-(c WHERE c.name = '华为') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找电影院UME的全部类型是伙伴的边,并根据f0降序排列,返回70个",
        "output": "match(a:cinema where a.name = 'UME')-[e:partner]->(b) return b order by e.f0 desc limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为person的点有家人关系的person,以及和这些person有恋人关系的person,以及和这些person有家人关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:lover]->(c:person)-[e3:family]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部person的partner,或其partner的partner",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被doctor韩强belong的department,和韩强creates的prescription",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '韩强')-[e2:creates]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size除54的最大值",
        "output": "MAX(a.size / 54)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person creates的comment,返回其源点的height的平均值除156的个数,以及目标点的wordCount除333的数量",
        "output": "match(a:person)-[e:creates]->(b:comment) return COUNT(AVG(a.height) / 156), COUNT(b.wordCount / 333)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型为person,边类型为家人,以及源点id等于49或源点id小于等于190或f0在516到868之间的边",
        "output": "match(a:person)-[e:family where e.srcId = 49 or e.srcId <= 190 or (e.f0 BETWEEN 516 AND 868)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为韩科的节点关联的person",
        "output": "match(a where a.name='韩科')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点身高在162到199之间,边label为支付,且满足条件权重等于179.15且目标点id的求和值是114且时间戳不是1997年07月29日的边,返回这些边的源点id除58的最大值",
        "output": "match(a where (a.height BETWEEN 162 AND 199))-[e:pay where e.weight = 179.15 and SUM(e.targetId) = 114 and e.timeStamp <> '1997-07-29']->(b) return MAX(e.srcId / 58)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出陈雪和周建国之间存在支付关系的事项。",
        "output": "match(a:person where a.name='陈雪')-[e:pay]->(b)<-[e2:pay]-(c:person where c.name='周建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,salary,id, 数据为('male',9574,44),('famale',9423,60)的子查询作为输入表, 源点的salary等于输入表salary,请帮我查找184个名为张宏的点咨询的类型为卖家的节点,且其身高除168大于70,年龄小于等于1152",
        "output": "with p as (select * from (VALUES('male',9574,44),('famale',9423,60)) as t(gender,salary,id))MATCH (a WHERE a.salary = p.salary AND (a.name = '张宏')) -[e:buyer_consult_seller ]->(b:seller WHERE b.height / 168 > 70 AND b.age <= 1152) RETURN b LIMIT 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是person,名为何红的点,返回这些点的id,age",
        "output": "match(a:person where a.name = '何红') return a.id, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询医生节点且边类型为属于的边，返回这些边中weight最小值加151.09的最大值，以及目标点ID对145取余的结果。",
        "output": "match(a:doctor)-[e:belong]->(b) return MAX(MIN(e.weight) + 151.09), e.targetId % 145",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询商品的1跳以内的环",
        "output": "match(a:goods)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为2的点的id,level",
        "output": "match(a where a.id = 2) return a.id, a.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点类型为公司,目标点类型为城市,类型为城市或大学或国家的边",
        "output": "match(a:company)-[e:city | university | country]->(b:city) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为73的doctor及其partner，再帮我查询与doctor相关的relation",
        "output": "match(a:doctor where id = '73')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询171个名为吴国强的点belong的类型为department的节点,且其address不等于东区,id为空",
        "output": "match(a where a.name='吴国强')-[e:belong]->(b:department where b.address <> '东区' and (b.id is null)) return b limit 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和公司华为之间有属于关系的城市",
        "output": "match(a:company where a.name='华为')-[e:belong]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出源点性别不是male或id小于等于21或id为空,目标点薪资不为空且薪资不为空,且标签为person_knows_person的边",
        "output": "match(a where a.gender <> 'male' or a.id <= 21 or (a.id is null))-[e:person_knows_person]->(b where (b.salary is not null) and (b.salary is not null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照创建时间升序排序所有以id、创建时间和名字为组别的处方。",
        "output": "match(a:prescription) return a.createTime group by a.id, a.createTime, a.name order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,scale,name, 数据为(11,'medium','谷歌'),(32,'large','蚂蚁集团'),(11,'large','腾讯'),(92,'medium','蚂蚁集团')的子查询作为输入表, 源点的id等于输入表id,请帮我找出117个名为武汉的点包含的label为大学的节点,且节点名字等于四川大学,等级的个数是477",
        "output": "with p as (select * from (VALUES(11,'medium','谷歌'),(32,'large','蚂蚁集团'),(11,'large','腾讯'),(92,'medium','蚂蚁集团')) as t(id,scale,name))MATCH (a WHERE a.id = p.id AND (a.name = '武汉')) -[e:city_contain_university ]->(b:university WHERE b.name = '四川大学' AND COUNT(b.level) = 477) RETURN b LIMIT 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找叫韩建国、类型是person的点，然后把他们的身高、薪资和性别给我",
        "output": "match(a:person where a.name = '韩建国') return a.height, a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与杜强和张红都有联系的person节点。",
        "output": "match(a where a.name='杜强')-[e]->(b:person)<-[e2]-(c where c.name='张红') return b limit 136",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前132个标签为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和person有关联的person节点,并根据其gender,age,height分组,返回gender,age,height,以及height的最大值对196取余的最大值",
        "output": "match(a:person)-[e:person_pay_person]-(b:person) return b.gender, b.age, b.height, MAX(MAX(b.height) % 196) group by b.gender, b.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出81个与标签为'person'的点有'watch'关系的电影，并且这些电影与'has'关系的标签相关。",
        "output": "match(a:person)-[e:watch]->(b:film)-[e2:has]->(c:tag) return c limit 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点标签为部门,边标签为department_has_teacher,并且满足条件f0不为空或f0小于795,且f1等于false的边",
        "output": "match(a:department)-[e:department_has_teacher where ((e.f0 is not null) or e.f0 < 795) and e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Comment_246和Comment_447都有关系的147个标签节点",
        "output": "match(a where a.name='Comment_246')-[e]->(b:tag)<-[e2]-(c where c.name='Comment_447') return b limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和评论Comment_382之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_382')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以725,293,113,957作为请求点id, 源点的id等于输入表id,查找类型为person的点,并根据id降序排列",
        "output": "with p as (select * from (VALUES(725),(293),(113),(957)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以813,727作为请求点id, 以属性id作为相等条件,请帮我找出被订单Order_211包含的商品",
        "output": "with p as (select * from (VALUES(813),(727)) as t(id)) MATCH (a:goods WHERE a.id = p.id) <-[e:orders_contain_goods ]-(b:orders WHERE b.name = 'Order_211') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与软件Kafka有关系的公司, 返回和这些公司有关联的软件的,价值乘308的最小值",
        "output": "match(a:software where a.name= 'Kafka')-[e]-(b:company)-[e2]-(c:software) return MIN(c.value * 308)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,peopleNumber,name, 数据为(871,704,'推特')的子查询作为输入表, 以属性name作为相等条件,请帮我找出和user有关联的post节点,并根据其lang分组,返回lang,以及wordCount的最小值乘585对id取余的值",
        "output": "with p as (select * from (VALUES(871,704,'推特')) as t(value,peopleNumber,name))MATCH (a:user WHERE a.name = p.name) -[e:user_likes_post ]-(b:post) RETURN b.lang, MIN(b.wordCount) * 585 % b.id GROUP BY b.lang ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签为doctor,边标签为diagnose的边,返回这些边的srcId的个数除146的值,和srcId除183的和",
        "output": "match(a:doctor)-[e:diagnose]->(b) return COUNT(e.srcId) / 146, SUM(e.srcId / 183)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标记为人的人工制品，并按照身高从矮到高进行排序。",
        "output": "match(a:person) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有相关者，包括公司本身和相关者的相关者。",
        "output": "match(a:company)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被user likes数量大于100的post,记为relationCount,再查询这些post likes的user",
        "output": "match(a:post) let a.relationCount = MIN((a:post)<-[e:likes]-(b:user) => b.id) match(a where a.relationCount > 100)-[e2:likes]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以941,608,741作为请求点id, 源点的id等于输入表id,帮我查询标签等于prescription_contain_medicine,且满足条件f0大于等于141的边",
        "output": "with p as (select * from (VALUES(941),(608),(741)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:prescription_contain_medicine WHERE e.f0 >= 141 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表580,28,922, 以属性id作为相等条件,帮我查询源点id大于17或address为东区或size大于976,边label为cinema_releases_film,且targetId为空的边,返回这些边的weight除109.54的值",
        "output": "with p as (select * from (VALUES(580),(28),(922)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id > 17 OR a.address = '东区' OR a.size > 976)) -[e:cinema_releases_film WHERE e.targetId IS NULL ]->(b) RETURN e.weight / 109.54 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出大小小于89的部门拥有的教师的名称,以及这些教师 教的课程的名称",
        "output": "match(a:department where a.size < 89)-[e:has]->(b:teacher)-[e2:teach]->(c:course) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person的三角的环,边类型为pay, 并返回这些点的id",
        "output": "match(a:person)-[e:pay]->(b)-[e2:pay]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找103个和label为person的点有likes关系的person,并且和这些person有knows关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:knows]->(c:person) return c limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找源点id小于13或年龄大于等于6,边类型是person_likes_person,且目标点id不为空的边,返回这些边的weight的平均值对权重取余的值",
        "output": "match(a where a.id < 13 or a.age >= 6)-[e:person_likes_person where (e.targetId is not null)]->(b) return AVG(e.weight) % e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为loan_75的点存款的账号",
        "output": "match(a where a.name='loan_75')-[e:deposit]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(378,2013-04-01,2),(532,2014-03-01,218)作为请求表数据,属性分别为value,createTime,peopleNumber, 以属性value作为相等条件,给出前46个满足条件salary大于等于3691且salary不等于1349的person",
        "output": "with p as (select * from (VALUES(378,2013-04-01,2),(532,2014-03-01,218)) as t(value,createTime,peopleNumber))MATCH (a:person WHERE a.value = p.value AND (a.salary >= 3691 AND a.salary <> 1349)) RETURN a LIMIT 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与赵建聪存在回答关系的买家,买家与商品存在查看关系的点,返回这些点的价格",
        "output": "match(a where a.name = '赵建聪')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从person李月出发，通过喜欢的关系，走过1度或者2度的person节点",
        "output": "match(a:person where a.name='李月')-[e:likes]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为黄思琪和王红的点共同提交的,类型是软件的节点",
        "output": "match(a where a.name = '黄思琪')-[e:commits]->(b:software)<-[e2:commits]-(c where c.name = '王红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的价值减796的平均值",
        "output": "match(a:company) return AVG(a.value - 796)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与课程马克思原理和数据结构都存在属于关系的点",
        "output": "match(a:course where a.name='马克思原理')-[e:belong]->(b)<-[e2:belong]-(c:course where c.name='数据结构') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和评论Comment_360之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_360')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其身高分组,返回身高,以及年龄对3取余的最小值",
        "output": "match(a:person)-[e:knows]-(b:person) return b.height, MIN(b.age % 3) group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回18个与郑宏和李建聪都存在关系的person节点",
        "output": "match(a where a.name='郑宏')-[e]->(b:person)<-[e2]-(c where c.name='李建聪') return b limit 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与微软公司有隶属关系的城市，再返回与微软公司具有隶属关系的城市。",
        "output": "match(a:company where a.name = '微软')-[e:belong]->(b:city),(a:company where a.name = '微软')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询仓库JavaGuid拥有的用户,被其他仓库拥有的数量",
        "output": "match(a:repository where a.name='JavaGuid')-[e:has]->(b:user)<-[e2:has]-(c:repository) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和学生陈国强有关的大学,称为X,再查找和这个X有关联的其他大学,以及和X有关联的部门",
        "output": "match(a:student where a.name = '陈国强')-[e]-(b:university), (b:university)-[e2]-(c:university),(b:university)-[e3]-(d:department) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部id为80的prescription关联的department,和以belong关系关联了这些department的其他doctor",
        "output": "match(a:prescription where a.id = 80)-[e]-(b:department)<-[e2:belong]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关系的软件节点,且软件节点的价值小于27,并返回这些软件的星数加47的值,以及软件的价值减价值对37取余的最小值",
        "output": "match(a:person)-[e]->(b:software where b.value < 27) return b.stars + 47, MIN(b.value - b.value % 37)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询comment的三角的环,边类型是belong, 并返回这些点的id",
        "output": "match(a:comment)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('计算机体系结构',113,53),('数据结构',485,71)作为请求表数据,属性分别为name,value,id, 源点的name等于输入表name,查找全部名为马强的点selects的course",
        "output": "with p as (select * from (VALUES('计算机体系结构',113,53),('数据结构',485,71)) as t(name,value,id))MATCH (a WHERE a.name = p.name AND (a.name = '马强')) -[e:student_selects_course ]->(b:course) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为马伟的,name不等于计算机网络且id大于等于17的relation,返回这些relation的createTime,和边的weight,targetId",
        "output": "match(a where a.name='马伟')-[e:relation]->(b where b.name <> '计算机网络' and b.id >= 17) return b.createTime,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为82的点的名字",
        "output": "match(a where a.id = 82) return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为forum,边标签为contain的边,返回这些边的targetId对73取余的求和值,和weight的个数乘108.38的最小值",
        "output": "match(a:forum)-[e:contain]->(b) return SUM(e.targetId % 73), MIN(COUNT(e.weight) * 108.38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出韩红和陈国强中，职业为医生的亲属关系。",
        "output": "match(a:doctor where a.name='韩红')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='陈国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高对171取余的值",
        "output": "a.height % 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和用户有关联的合并请求节点,并根据其id,名字分组,返回id,名字,以及id除16的值",
        "output": "match(a:user)-[e:creates]-(b:pullRequest) return b.id, b.name, b.id / 16 group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和作家韩科有关的读者,再帮我查询和韩科认识的其他作家,返回它们",
        "output": "match(a:author where a.name = '韩科')-[e]-(b:reader), (a:author)-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为PR-347和PR-269的点共同belong的,类型为repository的节点",
        "output": "match(a where a.name = 'PR-347')-[e:belong]->(b:repository)<-[e2:belong]-(c where c.name = 'PR-269') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和医生徐思琪有关系的医生或处方,返回这些点的名字,地址,权重",
        "output": "match(a:doctor where a.name='徐思琪')-[e]-(b:doctor | prescription) return b.name, b.address, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与电影相关的标签节点，按其ID、名称、值分组，返回ID、名称、值。",
        "output": "match(a:film)-[e:has]-(b:tag) return b.id, b.name, b.value group by b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点身高为空,边类型为喜欢,且f1为true且源点id不为空,或源点id大于68的边,返回这些边的f0加f0的最小值",
        "output": "match(a where (a.height is null))-[e:likes where (e.f1 = true and (e.srcId is not null)) or e.srcId > 68]->(b) return MIN(e.f0 + e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部软件以价值,名字分组的名字, 根据名字从小到大排序",
        "output": "match(a:software) return a.name group by a.value, a.name order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为78的软件有关的公司的朋友, 再返回和公司有关系的朋友",
        "output": "match(a:software where id = 78)-[e]-(b:company)-[e2:friend]->(c), (b:company)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和电影西虹市首富有关的评论,称为X,再帮我查询和这个X有关联的其他标签,以及和X有关联的电影院",
        "output": "match(a:film where a.name = '西虹市首富')-[e]-(b:comment), (b:comment)-[e2]-(c:tag),(b:comment)-[e3]-(d:cinema) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person的三角的环,边label为喜欢, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为190的医生创造的处方, 并将处方有关的药品的权重的最大值赋值给处方的名字, 接着查询处方的名字小于190的处方包含的药品",
        "output": "match(a:doctor where a.id = 190)-[e:creates]->(b:prescription) let b.name = MAX((b:prescription)-[e2]-(c:medicine) => c.weight) match(b:prescription where b.name < 190)-[e3:contain]->(d:medicine) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和标签为person的点有creates关系的comment,以及和这些comment有belong关系的film,以及和这些film有has关系的tag",
        "output": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和城市伦敦有包含关系的公司,再查询以包含关系关联了伦敦的公司",
        "output": "match(a:city where a.name = '伦敦')-[e:contain]->(b:company),(a:city where a.name = '伦敦')<-[e2:contain]-(c:company)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为'字节'的公司有关，或者与该公司关联的人所在的城市。",
        "output": "match(a:company where n.name=字节)-[e:relation]->{1,2}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,salary,name, 数据为(171,8531,'周思琪'),(186,3144,'黄若涵'),(178,8486,'赵梅')的子查询作为输入表, 以属性salary作为相等条件,查询名为郑建聪的person",
        "output": "with p as (select * from (VALUES(171,8531,'周思琪'),(186,3144,'黄若涵'),(178,8486,'赵梅')) as t(height,salary,name))MATCH (a:person WHERE a.salary = p.salary AND (a.name = '郑建聪')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件名字是古代或价值在220到760之间的节点",
        "output": "match(a where a.name = '古代' or (a.value BETWEEN 220 AND 760)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门的三角的环,边类型是拥有, 并返回这些点的id",
        "output": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询与forum知网有forum_contain_person关系的2度以内的环",
        "output": "match(a:forum where name = '知网')-[e:forum_contain_person]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表343,283, 源点的id等于输入表id,请帮我查找和book有关联的book节点,并根据其wordCount,price,createTime分组,返回wordCount,price,createTime,以及id的求和值除94的值",
        "output": "with p as (select * from (VALUES(343),(283)) as t(id)) MATCH (a:book WHERE a.id = p.id) -[e:book_refers_book ]-(b:book) RETURN b.wordCount, b.price, b.createTime, SUM(b.id) / 94 GROUP BY b.wordCount, b.price, b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为购买,并且源点id在48到186之间或目标点id大于等于120,且f1不等于false的边",
        "output": "match(a)-[e:buy where ((e.srcId BETWEEN 48 AND 186) or e.targetId >= 120) and e.f1 <> false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有源点标签为university,边标签为belong的边，并返回这些边的srcId除以srcId乘f0除以569的和，以及f0乘以953的值。",
        "output": "match(a:university)-[e:belong]->(b) return SUM(e.srcId / e.srcId * e.f0 / 569), e.f0 * 953",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('徐月',4,'famale'),('韩雪',82,'famale'),('陈月',30,'male'),('李科',24,'famale')作为请求表数据,属性分别为name,id,gender, 以属性name作为相等条件,给出前42个标签等于department_has_teacher的边",
        "output": "with p as (select * from (VALUES('徐月',4,'famale'),('韩雪',82,'famale'),('陈月',30,'male'),('李科',24,'famale')) as t(name,id,gender))MATCH (a WHERE a.name = p.name) -[e:department_has_teacher ]->(b) RETURN e LIMIT 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,薪资,身高分组,计算身高乘157除4除77的和",
        "output": "return SUM(a.height * 157 / 4 / 77) group by a.name, a.salary, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,lastLoginTime分组,计算value的个数加value的值",
        "output": "return COUNT(a.value) + a.value group by a.name, a.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和药品散利痛有关的医生,称为X,再请帮我找出和这个X有关联的其他药品,以及和X有关联的病人",
        "output": "match(a:medicine where a.name = '散利痛')-[e]-(b:doctor), (b:doctor)-[e2]-(c:medicine),(b:doctor)-[e3]-(d:patient) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与买家相关的人，或者相关者的相关者。",
        "output": "match(a:buyer)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为吴国强的点咨询的卖家",
        "output": "match(a where a.name='吴国强')-[e:buyer_consult_seller]->(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以751,349,680作为请求点id, 源点的id等于输入表id,请帮我查找名为杜轩的user,以及与其有关的user,并返回杜轩的name和这些user的id",
        "output": "with p as (select * from (VALUES(751),(349),(680)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (name = '杜轩')) -[e ]-(b:user) RETURN a.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询电影泰坦尼克号的所有伙伴,的权重减146.36的数量",
        "output": "match(a:film where a.name= '泰坦尼克号')-[e:partner]->(b) return COUNT(e.weight - 146.36)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照部门标签为'department'的点，按照地址降序排序。",
        "output": "match(a:department) return a order by a.address desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回university四川大学cooperate的company,被其他city contain的数量",
        "output": "match(a:university where a.name='四川大学')-[e:cooperate]->(b:company)<-[e2:contain]-(c:city) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和公司Bilibili有2到4跳关系的person",
        "output": "match(a:company where a.name='Bilibili')-[e]->{2,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以employee关系关联了person孙思琪的company",
        "output": "match(a:person where a.name='孙思琪')<-[e:company_employee_person]-(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找city巴黎belong的country,以及belong这些country的city, 令city的area等于country的area除86606, 返回city(a)的area,country(b)的name,city(c)的value",
        "output": "match(a:city where name = '巴黎')-[e:belong]->(b:country)<-[e2:belong]-(c:city) let c.area = b.area / 86606 return a.area,b.name,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以150,483,277,255作为请求点id, 源点的id等于输入表id,找出person郑科 knows的person,返回person relates的person的height除height的值 ",
        "output": "with p as (select * from (VALUES(150),(483),(277),(255)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '郑科')) -[e:knows ]->(b:person) -[e2:relates ]->(c:person) RETURN c.height / c.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'jL', 'Df', 'ov'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('jL', 'Df', 'ov') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person吴建国存在lover关系,且与person张国强存在parent关系的person节点，返回这些person的age,及person吴建国的name,及person张国强的height",
        "output": "match(a:person where a.name='吴建国')-[e:lover]->(b:person)<-[e2:parent]-(c:person where c.name='张国强') return a.name,b.age,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 comment 节点关联的 film 节点，并根据 category、name、id 分组，返回 category、name、id。",
        "output": "match(a:comment)-[e:belong]-(b:film) return b.category, b.name, b.id group by b.category, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与郑建聪存在belong关系的company,company与software存在creates关系的点,返回这些点的lang",
        "output": "match(a where a.name = '郑建聪')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight加940的平均值",
        "output": "AVG(a.weight + 940)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和issue ISSUE-322有关系的issue或repository或user,返回这些点的changeFileNumber,id",
        "output": "match(a:issue where a.name='ISSUE-322')-[e]-(b:issue | repository | user) return b.changeFileNumber, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表718,259,483,832, 源点的id等于输入表id,查找源点权重是188或权重在95到128之间,边标签等于loan_deposit_account,且满足条件目标点id不为空或f0大于926或时间戳不是2000年06月23日的边,返回这些边的f0除940的最大值",
        "output": "with p as (select * from (VALUES(718),(259),(483),(832)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.weight = 188 OR a.weight BETWEEN ASYMMETRIC 95 AND 128)) -[e:loan_deposit_account WHERE e.targetId IS NOT NULL OR e.f0 > 926 OR e.timeStamp <> '2000-06-23' ]->(b) RETURN MAX(e.f0 / 940) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型是学生,边类型是选择,且f0小于等于622,f1的平均值小于等于15的边",
        "output": "match(a:student)-[e:selects where e.f0 <= 622 and AVG(e.f1) <= 15]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和卖家赵宏之间有拥有关系的商品",
        "output": "match(a:seller where a.name='赵宏')-[e:has]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的三角的环,边标签为likes, 并返回这些点的id",
        "output": "match(a:person)-[e:likes]->(b)-[e2:likes]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和university中国科技大学之间有cooperate关系的company",
        "output": "match(a:university where a.name='中国科技大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询city contain的university,返回其源点的id减23的值,以及目标点的value减342减406的最小值",
        "output": "match(a:city)-[e:contain]->(b:university) return a.id - 23, MIN(b.value - 342 - 406)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出同时属于Bilibili和蚂蚁集团的点",
        "output": "match(a:company where a.name='Bilibili')-[e:belong]->(b)<-[e2:belong]-(c:company where c.name='蚂蚁集团') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询167个reader杜轩和郑思琪,共同的partner",
        "output": "match(a:reader where a.name='杜轩')-[e:partner]->(b)<-[e2:partner]-(c:reader where c.name='郑思琪') return b limit 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为10的商品有关的卖家的伙伴, 再查找和卖家有关系的朋友",
        "output": "match(a:goods where id = 10)-[e]-(b:seller)-[e2:partner]->(c), (b:seller)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被department经管学院has的teacher,和经管学院has的student",
        "output": "match(a:teacher)<-[e:has]-(b:department where name = '经管学院')-[e2:has]->(c:student) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于卖家的全部点,并根据薪资升序排列",
        "output": "match(a:seller) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为孙建国的,薪资在3217到4906之间,身高小于等于192的伙伴,返回这些伙伴的id,和边的时间戳,f0",
        "output": "match(a where a.name='孙建国')-[e:partner]->(b where (b.salary BETWEEN 3217 AND 4906) and b.height <= 192) return b.id,e.timeStamp, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为publisher且name为陈月的点，并返回它们的gender属性。",
        "output": "match(a:publisher where a.name = '陈月') return a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找书java程序设计 认识的书,返回书 认识的书的id的最小值减16加id的数量",
        "output": "match(a:book where name = 'java程序设计')-[e:knows]->(b:book)-[e2:knows]->(c:book) return COUNT(MIN(c.id) - 16 + c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height对height取余的最大值",
        "output": "MAX(a.height % a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找周建国认识的人和周思思喜欢的人，返回两者。",
        "output": "match(a:person where a.name = '周建国')-[e:knows]->(b:person),(c:person where c.name = '周思思')-[e2:likes]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找满足条件价值为空或人数不是677或人数大于895的节点",
        "output": "match(a where (a.value is null) or a.peopleNumber <> 677 or a.peopleNumber > 895) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与buyer Tom有关系的seller的gender",
        "output": "match(a:buyer where a.name='Tom')-[e]-(b:seller) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为李若涵的person,以及与其有关的person,并返回李若涵的性别和这些person的薪资",
        "output": "match(a:person where name = '李若涵')-[e]-(b:person) return a.gender, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被user徐雪likes的post,和徐雪publish的post",
        "output": "match(a:post)<-[e:likes]-(b:user where name = '徐雪')-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以939,213,445,399,193作为请求点id, 以属性id作为相等条件,给出名为吴思思的点的,创建时间不等于1996年12月12日或创建时间等于2009年12月31日的相关者,返回这些相关者的名字,和边的权重,时间戳",
        "output": "with p as (select * from (VALUES(939),(213),(445),(399),(193)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴思思')) -[e:relation ]->(b WHERE b.createTime <> '1996-12-12' OR b.createTime = '2009-12-31') RETURN b.name, e.weight, e.timeStamp ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为马强的合并请求,以及与其有关的仓库,并返回马强的身高和这些仓库的语言",
        "output": "match(a:pullRequest where name = '马强')-[e]-(b:repository) return a.height, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为26的点的value,id",
        "output": "match(a where a.id = 26) return a.value, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为user,名为孙强的点,返回这些点的name,id",
        "output": "match(a:user where a.name = '孙强') return a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出赵强的点belong的department,然后找出赵强被has的department,一起返回",
        "output": "match(a where a.name = '赵强')-[e:belong]->(b:department),(a where a.name = '赵强')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为weight,createTime,id, 数据为(772,2026-10-18,78),(828,2011-04-18,26),(216,2026-03-14,17),(681,2029-12-26,15)的子查询作为输入表, 以属性createTime作为相等条件,计算所有user的id对id取余的值",
        "output": "with p as (select * from (VALUES(772,2026-10-18,78),(828,2011-04-18,26),(216,2026-03-14,17),(681,2029-12-26,15)) as t(weight,createTime,id))MATCH (a:user WHERE a.createTime = p.createTime) RETURN a.id % a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以15,314,952作为请求点id, 源点的id等于输入表id,查询name不等于何科的buyer cancel的orders的名称,以及这些orders contain的goods的名称",
        "output": "with p as (select * from (VALUES(15),(314),(952)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name <> '何科')) -[e:buyer_cancel_orders ]->(b:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN b.name AS b_name, c.name AS c_name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出patient孙强accept的prescription,被其他doctor creates的数量",
        "output": "match(a:patient where a.name='孙强')-[e:accept]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回包含公司阿里属于的城市,的国家",
        "output": "match(a:company where name = '阿里')-[e:belong]->(b:city)<-[e2:contain]-(c:country) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出身高小于190且年龄是2的教师教的课程的名称,以及这些课程 属于的部门的名称",
        "output": "match(a:teacher where a.height < 190 and a.age = 2)-[e:teach]->(b:course)-[e2:belong]->(c:department) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和作家张建国有认识关系的作家,再给出以撰写关系关联了张建国的书",
        "output": "match(a:author where a.name = '张建国')-[e:knows]->(b:author),(a:author where a.name = '张建国')<-[e2:write]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出编辑杜思琪发布的书,被其他读者喜欢的数量",
        "output": "match(a:publisher where a.name='杜思琪')-[e:publish]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与部门急诊部有拥有关系的2跳以内的环",
        "output": "match(a:department where name = '急诊部')-[e:has]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,height,gender, 数据为(33,186,'male'), 源点的gender等于输入表gender,请帮我查找前115个满足条件height小于193,height小于等于155的publisher",
        "output": "with p as (select * from (VALUES(33,186,'male')) as t(id,height,gender))MATCH (a:publisher WHERE a.gender = p.gender AND (a.height < 193 AND a.height <= 155)) RETURN a LIMIT 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 排列160个薪水高于2133,薪水高于5293的人的性别，从大到小。",
        "output": "match(a:person where a.salary > 2133 and a.salary > 5293) return a order by a.gender desc limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点标签为forum，边标签为contain的边，并返回这些边的targetId除以targetId的结果以及f0除以f0的结果。",
        "output": "match(a:forum)-[e:contain]->(b) return e.targetId % e.targetId, e.f0 % e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与seller吴若涵有关系的goods, 返回和这些goods有关联的seller的,age除74除5487的数量",
        "output": "match(a:seller where a.name= '吴若涵')-[e]-(b:goods)-[e2]-(c:seller) return COUNT(c.age / 74 / 5487)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部与author有关系的reader节点,且reader节点的age是27,并返回这些点的age对48取余的值,以及id乘52的值",
        "output": "match(a:author)-[e]->(b:reader where b.age = 27) return b.age % 48, b.id * 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与赵思思和何若涵都认识的人，这些人被标记为'person'",
        "output": "match(a where a.name = '赵思思')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '何若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有教师以身高,性别,年龄分组的名字, 根据名字从小到大排序",
        "output": "match(a:teacher) return a.name group by a.height, a.gender, a.age order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出和医生有关联的病人节点,并根据其薪资,性别分组,返回薪资,性别,以及薪资除8618的最大值",
        "output": "match(a:doctor)-[e:doctor_diagnose_patient]-(b:patient) return b.salary, b.gender, MAX(b.salary / 8618) group by b.salary, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值减83的数量",
        "output": "COUNT(AVG(a.id) - 83)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为陈宏和张红的,标签为医生的点公共的朋友节点的名单",
        "output": "match(a:doctor where a.name='陈宏')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='张红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与处方ID为38的用户相关的所有人员，包括用户和与用户有关的人员。",
        "output": "match(a:prescription where id = '38')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person徐红创造的评论,以及喜欢这些评论的person, 令评论的薪资等于person的id,令person的字数等于评论的id乘27对字数取余,令评论的字数等于评论的id, 返回person(a)的名字,评论(b)的字数,person(c)的薪资",
        "output": "match(a:person where name = '徐红')-[e:creates]->(b:comment)<-[e2:likes]-(c:person) let b.salary = a.id,let a.wordCount = b.id * 27 % b.wordCount,let b.wordCount = b.id return a.name,b.wordCount,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出评论的三角的环,边类型为属于, 并返回这些点的id",
        "output": "match(a:comment)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表781, 源点的id等于输入表id,查找被医生杜轩属于的部门",
        "output": "with p as (select * from (VALUES(781)) as t(id)) MATCH (a:department WHERE a.id = p.id) <-[e:doctor_belong_department ]-(b:doctor WHERE b.name = '杜轩') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person周若涵的全部父母,的源点id除101的值",
        "output": "match(a:person where a.name= '周若涵')-[e:parent]->(b) return e.srcId / 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出学生的1跳的环",
        "output": "match(a:student)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以129,108作为请求点id, 源点的id等于输入表id,请帮我查找源点名字为北京大学,边标签等于university_has_department,且源点id是86的边,返回这些边的源点id乘19的值",
        "output": "with p as (select * from (VALUES(129),(108)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '北京大学')) -[e:university_has_department WHERE e.srcId = 86 ]->(b) RETURN e.srcId * 19 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person以id分组的年龄, 根据年龄从小到大排序",
        "output": "match(a:person) return a.age group by a.id order by a.age asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出合并请求的三角的环,边类型是属于, 并返回这些点的id",
        "output": "match(a:pullRequest)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以597,946,711作为请求点id, 源点的id等于输入表id,给出名为复旦大学的university,以及与其有关的course,并返回复旦大学的name和这些course的id",
        "output": "with p as (select * from (VALUES(597),(946),(711)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (name = '复旦大学')) -[e ]-(b:course) RETURN a.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以12作为输入,返回id, value",
        "output": "Call PAGERANK(12) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与特定账户关联的所有贷款，包括那些与该账户存在存款关系的贷款，以及那些与该账户存在还款关系的贷款。",
        "output": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询赵强喜欢的帖子。",
        "output": "match(a:post)<-[e:likes]-(b:user where b.name='赵强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找徐建聪和黄伟都喜欢的帖子",
        "output": "match(a where a.name = '徐建聪')-[e:likes]->(b:post)<-[e2:likes]-(c where c.name = '黄伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,gender, 数据为(4131,'张梅','famale'),(5500,'郑建国','male'),(3265,'张宏','male'), 以属性salary作为相等条件,给出和person有关联的person节点,并根据其name,height分组,返回name,height,以及age对43取余的最大值",
        "output": "with p as (select * from (VALUES(4131,'张梅','famale'),(5500,'郑建国','male'),(3265,'张宏','male')) as t(salary,name,gender))MATCH (a:person WHERE a.salary = p.salary) -[e:person_family_person ]-(b:person) RETURN b.name, b.height, MAX(b.age % 43) GROUP BY b.name, b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为95的合并请求属于的仓库, 并将仓库有关的用户的性别的最小值赋值给仓库的名字, 接着查询仓库的名字小于95的仓库拥有的事项",
        "output": "match(a:pullRequest where a.id = 95)-[e:belong]->(b:repository) let b.name = MIN((b:repository)-[e2]-(c:user) => c.gender) match(b:repository where b.name < 95)-[e3:has]->(d:issue) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与城市天津有关,且与城市深圳有关系的公司节点",
        "output": "match(a:city where a.name='天津')-[e:contain]-(b:company)-[e2:belong]-(c:city where c.name='深圳') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出book三体的所有label为refers的边,并根据f1从大到小排列,返回1个",
        "output": "match(a:book where a.name = '三体')-[e:refers]->(b) return b order by e.f1 desc limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与person点有关联的贷款节点，按其ID和金额分组，返回ID和金额。",
        "output": "match(a:person)-[e:apply]-(b:loan) return b.id, b.amount group by b.id, b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回朋友的朋友，或朋友的朋友的朋友",
        "output": "match(a:company)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点标签为person,目标点标签为person,标签为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为87的商品关联的订单,和以取消关系关联了这些订单的其他买家",
        "output": "match(a:goods where a.id = 87)-[e]-(b:orders)<-[e2:cancel]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与用户何梅有发表关系的帖子，然后找出这些帖子中与何梅有关联喜欢关系的帖子。",
        "output": "match(a:user where a.name = '何梅')-[e:publish]->(b:post),(a:user where a.name = '何梅')<-[e2:likes]-(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找172个名为黄强的点回答的标签为买家的节点,且节点id等于198且薪资小于4312",
        "output": "match(a where a.name='黄强')-[e:ask]->(b:buyer where b.id = 198 and b.salary < 4312) return b limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找和person有关联的person节点,并根据其name,salary分组,返回name,salary,以及height乘160的值",
        "output": "match(a:person)-[e:person_family_person]-(b:person) return b.name, b.salary, b.height * 160 group by b.name, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找与处方Prescription_122有prescription_contain_medicine关系的2度的环",
        "output": "match(a:prescription where name = 'Prescription_122')-[e:prescription_contain_medicine]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以933,155作为请求点id, 以属性id作为相等条件,查询全部名为吴月的点的,名字是黄国强,薪资为空的恋人,返回这些恋人的身高,和边的权重,目标点id",
        "output": "with p as (select * from (VALUES(933),(155)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴月')) -[e:person_lover_person ]->(b WHERE b.name = '黄国强' AND b.salary IS NULL) RETURN b.height, e.weight, e.targetId ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与seller Alice有关联的商品，然后再找出这些商品中与Alice有关联的商品。",
        "output": "match(a:seller where a.name = 'Alice')-[e:has]->(b:goods),(a:seller where a.name = 'Alice')<-[e2:has]-(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id不等于80,权重在118到767之间的贷款存款的账号的名称,以及这些账号 还款的贷款的名称",
        "output": "match(a:loan where a.id <> 80 and (a.weight BETWEEN 118 AND 767))-[e:deposit]->(b:account)-[e2:repay]->(c:loan) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部用户以年龄,id分组的性别, 根据性别降序排序",
        "output": "match(a:user) return a.gender group by a.age, a.id order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表161,69,207,96, 以属性id作为相等条件,请帮我找出与country法国和俄罗斯都存在country_contain_city关系的点",
        "output": "with p as (select * from (VALUES(161),(69),(207),(96)) as t(id)) MATCH (a:country WHERE a.id = p.id AND (a.name = '法国')) -[e:country_contain_city ]->(b) <-[e2:country_contain_city ]-(c:country WHERE c.name = '俄罗斯') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person何月存在apply关系,且与account LX001存在deposit关系的loan节点，返回这些loan的amount,id,及person何月的gender,及account LX001的createTime",
        "output": "match(a:person where a.name='何月')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='LX001') return a.gender,b.amount, b.id,c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,id,salary, 数据为(27,82,2051),(41,43,4156),(23,72,5350), 以属性salary作为相等条件,查询与publisher有关系的reader节点,且reader节点的age小于73,并返回这些点的height对157取余的最大值,以及age除97的值",
        "output": "with p as (select * from (VALUES(27,82,2051),(41,43,4156),(23,72,5350)) as t(age,id,salary))MATCH (a:publisher WHERE a.salary = p.salary) -[e ]->(b:reader WHERE b.age < 73) RETURN MAX(b.height % 157), b.age / 97 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点满足条件性别是famale,目标点满足条件名字不是Comment_167,且标签为喜欢的边",
        "output": "match(a where a.gender = 'famale')-[e:likes]->(b where b.name <> 'Comment_167') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为字节的,name是广州的partner,返回这些partner的area,和边的f1",
        "output": "match(a where a.name='字节')-[e:partner]->(b where b.name = '广州') return b.area,e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和用户有关联的合并请求节点,并根据其变更文件数,名字,id分组,返回变更文件数,名字,id,以及变更文件数减变更文件数的值",
        "output": "match(a:user)-[e:creates]-(b:pullRequest) return b.changeFileNumber, b.name, b.id, b.changeFileNumber - b.changeFileNumber group by b.changeFileNumber, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型是回答,以及满足条件源点id大于等于749的边",
        "output": "match(a)-[e:ask where e.srcId >= 749]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找163个名为人人影城的点上映的类型为电影的节点,且节点类别为喜剧且类别不等于历史",
        "output": "match(a where a.name='人人影城')-[e:releases]->(b:film where b.category = '喜剧' and b.category <> '历史') return b limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和reader韩建聪有likes关系的book,再给出以likes关系关联了韩建聪的book",
        "output": "match(a:reader where a.name = '韩建聪')-[e:likes]->(b:book),(a:reader where a.name = '韩建聪')<-[e2:likes]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点为人、目标点也为人的认识关系",
        "output": "match(a:person)-[e:knows]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询comment Comment_186的所有friend,的f0的数量减829的值",
        "output": "match(a:comment where a.name= 'Comment_186')-[e:friend]->(b) return COUNT(e.f0) - 829",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出68个名为徐红的点喜欢的类型是person的节点,且其薪资大于等于9981或名字等于张宏",
        "output": "match(a where a.name='徐红')-[e:likes]->(b:person where b.salary >= 9981 or b.name = '张宏') return b limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,薪资,id分组,计算年龄加42的值",
        "output": "return a.age + 42 group by a.name, a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 谷歌和美团共同的朋友是72家公司。",
        "output": "match(a:company where a.name='谷歌')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='美团') return b limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为'人人影城'且类型为'cinema'的点，然后返回这些点的大小、ID和地址。",
        "output": "match(a:cinema where a.name = '人人影城') return a.size, a.id, a.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和名为周建国的buyer有relation关系,或有relation的relation关系的orders",
        "output": "match(a:buyer where n.name=周建国)-[e:relation]->{1,2}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点id为空,星数小于等于664,或权重不为空,边标签等于拥有,且目标点id大于19的边,返回这些边的f0的最大值乘972的个数",
        "output": "match(a where ((a.id is null) and a.stars <= 664) or (a.weight is not null))-[e:has where e.targetId > 19]->(b) return COUNT(MAX(e.f0) * 972)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person韩建聪有knows关系的person,再找出以knows关系关联了韩建聪的person",
        "output": "match(a:person where a.name = '韩建聪')-[e:knows]->(b:person),(a:person where a.name = '韩建聪')<-[e2:knows]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找191个卖家何科和黄红,共同的伙伴",
        "output": "match(a:seller where a.name='何科')-[e:partner]->(b)<-[e2:partner]-(c:seller where c.name='黄红') return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为周雪和何伟的点共同knows的,label为person的节点",
        "output": "match(a where a.name = '周雪')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '何伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为10的点的id",
        "output": "match(a where a.id = 10) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为武汉大学的点合作的全部公司,并对这些公司的价值进行求和",
        "output": "match(a where a.name='武汉大学')-[e:cooperate]->(b:company) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找author陈国强write的book,以及relates这些book的book",
        "output": "match(a:author where name = '陈国强')-[e:write]->(b:book)<-[e2:relates]-(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和patient点有accept关系的prescription节点,且边满足条件f0大于689,目标prescription节点weight大于等于429",
        "output": "match(a:patient)-[e:accept where e.f0 > 689]->(b:prescription where b.weight >= 429) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算value对845取余的平均值",
        "output": "return AVG(a.value % 845) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与徐强有关的作者，再查询徐强喜欢的其他书籍，返回它们。",
        "output": "match(a:reader where a.name = '徐强')-[e]-(b:author), (a:reader)-[e2:likes]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找电影绿巨人拥有的标签, 令电影的价值等于标签的id, 返回电影的类别, 标签的价值",
        "output": "match(a:film where a.name='绿巨人')-[e:has]->(b:tag) let a.value = b.id return a.category,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与电影院横店影院有关系的电影的id",
        "output": "match(a:cinema where a.name='横店影院')-[e]-(b:film) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从Zeus账户出发，通过转账类型的边，进行一次跳跃后到达的账户点。",
        "output": "match(a:account where a.name='Zeus')-[e:transfer]->{1,1}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与Order_179和Order_463都有关联的点",
        "output": "match(a:orders where a.name='Order_179')-[e:contain]->(b)<-[e2:contain]-(c:orders where c.name='Order_463') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有满足以下条件的orders：id大于等于46且price小于等于4549.70，或者name不等于'Order_241'。然后按照name字段进行降序排序，并返回前90条数据。",
        "output": "match(a:orders where (a.id >= 46 and a.price <= 4549.70) or a.name <> 'Order_241') return a order by a.name desc limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的数量乘9除579的最大值",
        "output": "MAX(COUNT(a.id) * 9 / 579)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表686,503,954,339, 源点的id等于输入表id,查询所有源点类型为user,边类型为user_creates_issue的边,返回这些边的srcId的个数加83减589的最大值,和srcId对srcId取余的个数",
        "output": "with p as (select * from (VALUES(686),(503),(954),(339)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_creates_issue ]->(b) RETURN MAX(COUNT(e.srcId) + 83 - 589), COUNT(e.srcId % e.srcId) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为13的编辑有关的书的引用, 再找出和书有关系的引用",
        "output": "match(a:publisher where id = 13)-[e]-(b:book)-[e2:refers]->(c), (b:book)-[e3:refers]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回publisher节点中，与book呐喊存在关系且与杜建国存在关系的publisher的id、name和gender。",
        "output": "match(a:book where a.name='呐喊')-[e]->(b:publisher)<-[e2]-(c:publisher where c.name='杜建国') return b.id, b.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('澳大利亚',31,721),('越南',38,262),('中国',19,122),('澳大利亚',88,68)作为请求表数据,属性分别为name,id,value, 源点的id等于输入表id,找出标签为大学的全部点,并根据名字从小到大排列",
        "output": "with p as (select * from (VALUES('澳大利亚',31,721),('越南',38,262),('中国',19,122),('澳大利亚',88,68)) as t(name,id,value))MATCH (a:university WHERE a.id = p.id) RETURN a ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和person郑国强之间有支付关系的person",
        "output": "match(a:person where a.name='郑国强')-[e:pay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出用户李雪 创造的合并请求,返回合并请求 属于的仓库的权重减权重的求和值",
        "output": "match(a:user where name = '李雪')-[e:creates]->(b:pullRequest)-[e2:belong]->(c:repository) return SUM(c.weight - c.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找四川大学的部门数量，以及这些部门被其他大学拥有的数量。",
        "output": "match(a:university where a.name='四川大学')-[e:has]->(b:department)<-[e2:has]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "stars的最小值减星数的求和值",
        "output": "SUM(MIN(a.stars) - a.stars)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加71的平均值",
        "output": "AVG(a.id + 71)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出买家周思思的伙伴,的目标点id乘22的值",
        "output": "match(a:buyer where a.name= '周思思')-[e:partner]->(b) return e.targetId * 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person郑红有关的软件,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的软件",
        "output": "match(a:person where a.name = '郑红')-[e]-(b:software), (b:software)-[e2]-(c:person),(b:software)-[e3]-(d:software) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加75减9267的平均值",
        "output": "AVG(a.id + 75 - 9267)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与贷款有关系的公司节点,且公司节点的名字不是微软,并返回这些公司的id除98除id的个数,以及公司的价值加710的数量",
        "output": "match(a:loan)-[e]->(b:company where b.name <> '微软') return COUNT(b.id / 98 / b.id), COUNT(b.value + 710)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为category,id,name, 数据为('传记',51,'呐喊'),('文学',18,'呐喊'), 以属性name作为相等条件,请帮我查找名为杜梅的读者",
        "output": "with p as (select * from (VALUES('传记',51,'呐喊'),('文学',18,'呐喊')) as t(category,id,name))MATCH (a:reader WHERE a.name = p.name AND (a.name = '杜梅')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前55个label为朋友的边",
        "output": "match(a)-[e:friend]->(b) return e limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "将评论作为起点，电影作为终点，类型为归属的边",
        "output": "match(a:comment)-[e:belong]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与buyer孙建国和孙雪都存在creates关系的点",
        "output": "match(a:buyer where a.name='孙建国')-[e:creates]->(b)<-[e2:creates]-(c:buyer where c.name='孙雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询张轩和李伟的person节点中，共同的父亲节点。",
        "output": "match(a:person where a.name='张轩')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='李伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点和目标点都是person，且类型为family的边。",
        "output": "match(a:person)-[e:family]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与马思思和韩若涵都有关联的49个人。",
        "output": "match(a where a.name='马思思')-[e]->(b:person)<-[e2]-(c where c.name='韩若涵') return b limit 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有department节点，过滤掉眼科，并计算这些节点的weight除以580,以及weight的最小值除以218并取id的最小值。",
        "output": "match(a:department)-[e]->(b:department where b.name <> '眼科') return b.weight / 580, MIN(MIN(b.weight) / 218 * b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部和person点有knows关系的person节点,且边满足条件f0的最小值不等于121,目标person节点满足条件height不为空",
        "output": "match(a:person)-[e:knows where MIN(e.f0) <> 121]->(b:person where (b.height is not null)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和person赵国强之间有apply关系的loan",
        "output": "match(a:person where a.name='赵国强')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person黄建聪有关的person,再查询和黄建聪认识的其他person,返回它们",
        "output": "match(a:person where a.name = '黄建聪')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找类型是买家的所有点,并根据薪资降序排列",
        "output": "match(a:buyer) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回50个person杜宏和周思琪,共同的parent",
        "output": "match(a:person where a.name='杜宏')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='周思琪') return b limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点name不等于张梅或gender为famale,边标签为pay,且满足条件srcId小于132或f0大于等于761,且weight小于168.33的边,返回这些边的weight除weight的值",
        "output": "match(a where a.name <> '张梅' or a.gender = 'famale')-[e:pay where (e.srcId < 132 or e.f0 >= 761) and e.weight < 168.33]->(b) return e.weight / e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询关联person韩梅关联的person,的person",
        "output": "match(a:person where name = '韩梅')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与黄伟有关的人。",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='黄伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为Comment_325的comment有friend关系,或有friend的friend关系的film",
        "output": "match(a:comment where n.name=Comment_325)-[e:friend]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有和forum知乎之间有forum_contain_person关系的person",
        "output": "match(a:forum where a.name='知乎')-[e:forum_contain_person]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到一个与陈建聪和孙红都有联系的人。",
        "output": "match(a where a.name='陈建聪')-[e]->(b:person)<-[e2]-(c where c.name='孙红') return b limit 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person何红有关系的person,返回这些点的薪资,年龄,性别",
        "output": "match(a:person where a.name='何红')-[e]-(b:person) return b.salary, b.age, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为何建聪和赵科的点共同支付的,标签等于person的节点",
        "output": "match(a where a.name = '何建聪')-[e:pay]->(b:person)<-[e2:pay]-(c where c.name = '赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和医生韩建国之间有创造关系的处方",
        "output": "match(a:doctor where a.name='韩建国')-[e:creates]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询买家马国强咨询的卖家, 令卖家的身高等于卖家的薪资,令买家的薪资等于买家的名字, 返回买家的身高, 卖家的名字",
        "output": "match(a:buyer where a.name='马国强')-[e:consult]->(b:seller) let b.height = b.salary,let a.salary = a.name return a.height,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以认识关系关联了person周建国的person",
        "output": "match(a:person where a.name='周建国')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找一家叫做滴滴的公司。",
        "output": "match(a:company where a.name = '滴滴') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与谷歌公司有关的人，再返回谷歌公司申请的其他贷款。",
        "output": "match(a:company where a.name = '谷歌')-[e]-(b:person), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与课程线性代数有关系的大学的id",
        "output": "match(a:course where a.name='线性代数')-[e]-(b:university) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前156个类型是拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从医生赵科出发，经过标签为诊断的边，跳1下到达病人点。",
        "output": "match(a:doctor where a.name='赵科')-[e:diagnose]->{1,1}(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被seller李宏ask的buyer",
        "output": "match(a:buyer)<-[e:ask]-(b:seller where b.name='李宏') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,gender,height, 数据为(82,'male',171),(90,'famale',179),(41,'male',156),(88,'male',177), 源点的id等于输入表id,请帮我查找教师的2跳以内的环",
        "output": "with p as (select * from (VALUES(82,'male',171),(90,'famale',179),(41,'male',156),(88,'male',177)) as t(id,gender,height))MATCH (a:teacher WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表450, 以属性id作为相等条件,给出和university浙江大学有关的department,称为X,再给出和这个X有关联的其他student,以及和X有关联的department",
        "output": "with p as (select * from (VALUES(450)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (a.name = '浙江大学')) -[e ]-(b:department) , (b:department) -[e2 ]-(c:student) , (b:department) -[e3 ]-(d:department) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询卖家的三角的环,边标签等于回答, 并返回这些点的id",
        "output": "match(a:seller)-[e:ask]->(b)-[e2:ask]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 哪些大学与蚂蚁集团有合作？",
        "output": "match(a:university)<-[e:cooperate]-(b:company where b.name='蚂蚁集团') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询36个买家杜建聪和韩伟,共同的朋友",
        "output": "match(a:buyer where a.name='杜建聪')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='韩伟') return b limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为徐建国的点的,height为空的partner,返回这些partner的gender,和边的targetId,f1",
        "output": "match(a where a.name='徐建国')-[e:partner]->(b where (b.height is null)) return b.gender,e.targetId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与账号Zeus有转账关系的账号。",
        "output": "match(a:account where a.name='Zeus')<-[e:transfer]-(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与编辑张伟有关系的读者的id",
        "output": "match(a:publisher where a.name='张伟')-[e]-(b:reader) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与桌子和书都有关联的seller节点，数量为196。",
        "output": "match(a where a.name='桌子')-[e]->(b:seller)<-[e2]-(c where c.name='书') return b limit 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部与teacher周红有关系的teacher的salary",
        "output": "match(a:teacher where a.name='周红')-[e]-(b:teacher) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height,age,id分组,计算height乘153的最小值",
        "output": "return MIN(a.height * 153) group by a.height, a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 从医生徐若涵出发，经过属于类型的边，走1到3度到达部门点。",
        "output": "match(a:doctor where a.name='徐若涵')-[e:belong]->{1,3}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary除2017加2944的值",
        "output": "a.salary / 2017 + 2944",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部源点满足条件gender不等于famale,gender为famale,目标点满足条件id在15到61之间或name不是Post_335,且label为user_likes_post的边",
        "output": "match(a where a.gender <> 'famale' and a.gender = 'famale')-[e:user_likes_post]->(b where (b.id BETWEEN 15 AND 61) or b.name <> 'Post_335') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出帖子Post_342的全部标签等于相关者的边,并根据f1从小到大排列,返回90个",
        "output": "match(a:post where a.name = 'Post_342')-[e:relation]->(b) return b order by e.f1 asc limit 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照处方创建时间从大到小排列，筛选出36个不符合条件的处方，其中不包括名字为Prescription_171的处方。",
        "output": "match(a:prescription where a.createTime <> '2010-12-20' or a.createTime <> '2005-10-02' or a.name <> 'Prescription_171') return a order by a.weight desc limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马轩knows的person,以及knows这些person的person, 令person的age等于person的salary加1555的个数, 返回person(a)的age,person(b)的salary,person(c)的salary",
        "output": "match(a:person where name = '马轩')-[e:knows]->(b:person)<-[e2:knows]-(c:person) let c.age = COUNT(c.salary + 1555) return a.age,b.salary,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person吴科存在喜欢关系,且与person张若涵存在支付关系的person节点，返回这些person的身高,及person吴科的名字,及person张若涵的名字",
        "output": "match(a:person where a.name='吴科')-[e:likes]->(b:person)<-[e2:pay]-(c:person where c.name='张若涵') return a.name,b.height,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点性别等于male,性别不是famale,边类型为属于,且f1不是36的边,返回这些边的f0除872减847的最小值",
        "output": "match(a where a.gender = 'male' and a.gender <> 'famale')-[e:belong where e.f1 <> 36]->(b) return MIN(e.f0 / 872 - 847)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询20个学分为空,价值小于15,id加86加2乘17不是37的课程,根据名字从小到大排列",
        "output": "match(a:course where (a.credit is null) and a.value < 15 and (a.id + 86 + 2) * 17 <> 37) return a order by a.name asc limit 20",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查一下这个账号关联的公司，以及与这些公司有投资关系的其他个人",
        "output": "match(a:account where a.id = '76')-[e]-(b:company)<-[e2:invest]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和名为王强的学生有朋友关系,或有朋友的朋友关系的课程",
        "output": "match(a:student where n.name=王强)-[e:friend]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为马宏的person,以及与其有关的贷款,并返回马宏的id和这些贷款的金额",
        "output": "match(a:person where name = '马宏')-[e]-(b:loan) return a.id, b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门急诊部 拥有的医生,返回医生 诊断的病人的薪资除7423的值",
        "output": "match(a:department where name = '急诊部')-[e:has]->(b:doctor)-[e2:diagnose]->(c:patient) return c.salary / 7423",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询67个名为清华大学的点belong的标签等于city的节点,且其peopleNumber为空或name为广州",
        "output": "match(a where a.name='清华大学')-[e:belong]->(b:city where (b.peopleNumber is null) or b.name = '广州') return b limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被doctor赵建聪creates的prescription",
        "output": "match(a:prescription)<-[e:creates]-(b:doctor where b.name='赵建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,category,price, 数据为('999感冒灵','止痛药',151),('散利痛','感冒药',83), 源点的price等于输入表price,找出id为28的doctor有关的patient的relation, 再找出和patient有关系的friend",
        "output": "with p as (select * from (VALUES('999感冒灵','止痛药',151),('散利痛','感冒药',83)) as t(name,category,price))MATCH (a:doctor WHERE a.price = p.price AND (id = '28')) -[e ]-(b:patient) -[e2:relation ]->(c) , (b:patient) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找包含论坛中国军事论坛包含的帖子,的论坛",
        "output": "match(a:forum where name = '中国军事论坛')-[e:contain]->(b:post)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为192的点的height",
        "output": "match(a where a.id = 192) return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person Amily和孙月都存在提交关系的点",
        "output": "match(a:person where a.name='Amily')-[e:commits]->(b)<-[e2:commits]-(c:person where c.name='孙月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有标签为账号的点",
        "output": "match(a:account) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被买家何思思取消的订单,和何思思咨询的卖家",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where name = '何思思')-[e2:consult]->(c:seller) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点id在20到38之间或id不为空,且大小在52到81之间,边类型是拥有,且权重小于等于193.92的边,返回这些边的f0加524的值",
        "output": "match(a where ((a.id BETWEEN 20 AND 38) or (a.id is not null)) and (a.size BETWEEN 52 AND 81))-[e:has where e.weight <= 193.92]->(b) return e.f0 + 524",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为area,name,peopleNumber, 数据为(71095,'重庆',3406),(56590,'深圳',9293), 源点的area等于输入表area,请帮我查找以属于关系关联了国家美国的城市",
        "output": "with p as (select * from (VALUES(71095,'重庆',3406),(56590,'深圳',9293)) as t(area,name,peopleNumber))MATCH (a:country WHERE a.area = p.area AND (a.name = '美国')) <-[e:city_belong_country ]-(b:city) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与孙思思同事且与黄梅是朋友的所有人。",
        "output": "match(a:person where a.name = '孙思思')-[e:colleague]->(b:person),(c:person where c.name = '黄梅')-[e2:friend]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表244,3,569, 以属性id作为相等条件,请帮我找出全部软件以星数,语言分组的语言, 根据语言降序排序",
        "output": "with p as (select * from (VALUES(244),(3),(569)) as t(id)) MATCH (a:software WHERE a.id = p.id) RETURN a.lang GROUP BY a.stars, a.lang ORDER BY a.lang DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person属于的公司,返回其源点的薪资除2471的和,以及目标点的人数加692的个数",
        "output": "match(a:person)-[e:belong]->(b:company) return SUM(a.salary / 2471), COUNT(b.peopleNumber + 692)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与黄宏有顾问关系的卖家，然后查找与黄宏的订单有创建关系的卖家。",
        "output": "match(a:buyer where a.name = '黄宏')-[e:consult]->(b:seller),(a:buyer where a.name = '黄宏')<-[e2:creates]-(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与美团有投资关系的个人。",
        "output": "match(a:company where a.name='美团')<-[e:invest]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有标签为人、名字叫徐建国的点，并返回它们的ID。",
        "output": "match(a:person where a.name = '徐建国') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与处方点相关的药品节点，按名称分组，并返回这些名称。",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签等于course,边标签等于belong的边,返回这些边的srcId减167乘514除174.81的值,和targetId的数量加106的值",
        "output": "match(a:course)-[e:belong]->(b) return (e.srcId - 167) * 514 / 174.81, COUNT(e.targetId) + 106",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为39的repository有关的pullRequest的partner, 再请帮我找出和pullRequest有关系的partner",
        "output": "match(a:repository where id = 39)-[e]-(b:pullRequest)-[e2:partner]->(c), (b:pullRequest)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与浙江大学和澳大利亚都有关联的城市节点",
        "output": "match(a:university where a.name='浙江大学')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='澳大利亚') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于大学,名为浙江大学的点,返回这些点的名字,等级,id",
        "output": "match(a:university where a.name = '浙江大学') return a.name, a.level, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回名为变形金刚的电影中的点，并返回它们的类别和价值。",
        "output": "match(a:film where a.name = '变形金刚') return a.category, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为黄梅的author,以及与其有关的author,并返回黄梅的age和这些author的age",
        "output": "match(a:author where name = '黄梅')-[e]-(b:author) return a.age, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为196的university有关的university的relation, 再给出和university有关系的relation",
        "output": "match(a:university where id = 196)-[e]-(b:university)-[e2:relation]->(c), (b:university)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找，从马若涵出发，沿着认识的边走1到4步，能到哪儿",
        "output": "match(a:person where a.name='马若涵')-[e:knows]->{1,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为杜雪的点创造的处方",
        "output": "match(a where a.name='杜雪')-[e:creates]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为王国强的点的,id不为空的friend,返回这些friend的id,和边的f0",
        "output": "match(a where a.name='王国强')-[e:friend]->(b where (b.id is not null)) return b.id,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为吴伟的点喜欢的全部仓库,并对这些仓库的星数进行求和",
        "output": "match(a where a.name='吴伟')-[e:likes]->(b:repository) return SUM(b.stars)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的个数对626取余的值",
        "output": "COUNT(a.value) % 626",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与类型为'人'的实体建立支付和喜欢关系的另外97个人。",
        "output": "match(a:person)-[e:pay]->(b:person)-[e2:likes]->(c:person) return c limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关联的人节点，这些人节点的年龄总和加上72必须大于或等于193。然后，请返回这些节点的salary除以2260的余数，以及salary中最小值除以6577的余数。",
        "output": "match(a:person)-[e]->(b:person where SUM(b.age) + 72 >= 193) return b.salary % 2260, MIN(b.salary) % 6577",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回68个id为空或value小于等于384,且value是363的tag,根据value降序排列",
        "output": "match(a:tag where ((a.id is null) or a.value <= 384) and a.value = 363) return a order by a.value desc limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 孙雪创建的订单节点包含的商品",
        "output": "match(a:buyer where a.name = '孙雪')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表823,287, 源点的id等于输入表id,请帮我找出与名为Prescription_360和Prescription_163的点共同包含的,类型是药品的节点",
        "output": "with p as (select * from (VALUES(823),(287)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Prescription_360')) -[e:prescription_contain_medicine ]->(b:medicine) <-[e2:prescription_contain_medicine ]-(c WHERE c.name = 'Prescription_163') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为140的点的gender,salary",
        "output": "match(a where a.id = 140) return a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person黄建国之间有喜欢关系的person",
        "output": "match(a:person where a.name='黄建国')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表562, 以属性id作为相等条件,找出和person有关联的company节点,并根据其peopleNumber,name分组,返回peopleNumber,name,以及id加id的值",
        "output": "with p as (select * from (VALUES(562)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_belong_company ]-(b:company) RETURN b.peopleNumber, b.name, b.id + b.id GROUP BY b.peopleNumber, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回少年足球所属的标签和评论。",
        "output": "match(a where a.name = '少年足球')-[e:has]->(b:tag),(a where a.name = '少年足球')<-[e2:belong]-(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与电影《泰坦尼克号》和人人影城电影院有关联的标签节点，并返回它们的ID、名称和价值。",
        "output": "match(a:film where a.name='泰坦尼克号')-[e]->(b:tag)<-[e2]-(c:cinema where c.name='人人影城') return b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表131,655,13,949,343, 源点的id等于输入表id,找出96个person王雪和周国强,共同的friend",
        "output": "with p as (select * from (VALUES(131),(655),(13),(949),(343)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '王雪')) -[e:person_friend_person ]->(b) <-[e2:person_friend_person ]-(c:person WHERE c.name = '周国强') RETURN b LIMIT 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出买家孙思琪取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='孙思琪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与卖家郑伟存在回答关系,且与订单Order_394存在取消关系的买家节点，返回这些买家的年龄,性别,及卖家郑伟的身高,及订单Order_394的价值",
        "output": "match(a:seller where a.name='郑伟')-[e:ask]->(b:buyer)<-[e2:cancel]-(c:orders where c.name='Order_394') return a.height,b.age, b.gender,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出天涯论坛和中国军事论坛都包含的共同点。",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='中国军事论坛') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询编辑徐建聪发布的书,以及关联这些书的书, 令书的id等于书的创建时间, 返回编辑(a)的名字,书(b)的id,书(c)的id",
        "output": "match(a:publisher where name = '徐建聪')-[e:publish]->(b:book)<-[e2:relates]-(c:book) let b.id = b.createTime return a.name,b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前172个id大于等于32,id的数量大于等于9150,或id为空的学生",
        "output": "match(a:student where (a.id >= 32 and COUNT(a.id) >= 9150) or (a.id is null)) return a limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与user孙思思有likes关系的3跳的环",
        "output": "match(a:user where name = '孙思思')-[e:likes]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出loan_1的点deposit的account,然后给出loan_1被apply的company,一起返回",
        "output": "match(a where a.name = 'loan_1')-[e:deposit]->(b:account),(a where a.name = 'loan_1')<-[e2:apply]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为呼吸科的,id除14不等于87或身高为空的伙伴,返回这些伙伴的性别,和边的f0,源点id,目标点id",
        "output": "match(a where a.name='呼吸科')-[e:partner]->(b where b.id / 14 <> 87 or (b.height is null)) return b.gender,e.f0, e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找年龄小于4,性别是famale且名字是吴月的节点",
        "output": "match(a where a.age < 4 and a.gender = 'famale' and a.name = '吴月') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person马梅有关的person,再帮我查询和马梅likes的其他person,返回它们",
        "output": "match(a:person where a.name = '马梅')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前132个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 132",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询Comment_184所属的电影和创建它的个人，并将它们一起返回。",
        "output": "match(a where a.name = 'Comment_184')-[e:belong]->(b:film),(a where a.name = 'Comment_184')<-[e2:creates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与孙建聪存在创造关系的订单,订单与商品存在包含关系的点,返回这些点的名字",
        "output": "match(a where a.name = '孙建聪')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部名为马国强的节点likes的forum或user或tag",
        "output": "match(a where a.name='马国强')-[e:likes]->(b:forum | user | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "陈强和郑建聪是51个用户的共同伙伴。",
        "output": "match(a:user where a.name='陈强')-[e:partner]->(b)<-[e2:partner]-(c:user where c.name='郑建聪') return b limit 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询36个和标签为university的点有belong关系的city,以及和这些city有contain关系的university",
        "output": "match(a:university)-[e:belong]->(b:city)-[e2:contain]->(c:university) return c limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名字小于54128的国家包含的城市的名称,以及这些城市 属于的国家的名称",
        "output": "match(a:country where a.name < 54128)-[e:contain]->(b:city)-[e2:belong]->(c:country) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为撰写,以及目标点id不为空的边",
        "output": "match(a)-[e:write where (e.targetId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询同时与处方Prescription_196和Prescription_230有关系的处方节点，并返回它们的创建时间和ID。",
        "output": "match(a:prescription where a.name='Prescription_196')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_230') return b.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和订单Order_370有关的买家,再返回和Order_370包含的其他商品,返回它们",
        "output": "match(a:orders where a.name = 'Order_370')-[e]-(b:buyer), (a:orders)-[e2:contain]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点id不为空且类别不是动作,目标点名字不等于其他或id大于等于0,且名字不等于文艺,且类型为拥有的边",
        "output": "match(a where (a.id is not null) and a.category <> '动作')-[e:has]->(b where (b.name <> '其他' or b.id >= 0) and b.name <> '文艺') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找117个名为张思琪的点支付的标签为person的节点,且其id不为空",
        "output": "match(a where a.name='张思琪')-[e:pay]->(b:person where (b.id is not null)) return b limit 117",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为136的点的性别,id",
        "output": "match(a where a.id = 136) return a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为peopleNumber,scale,id, 数据为(984,'medium',95),(836,'large',46), 以属性scale作为相等条件,查找和software Hadoop有software_uses_software关系的software,再查找以software_uses_software关系关联了 Hadoop的software",
        "output": "with p as (select * from (VALUES(984,'medium',95),(836,'large',46)) as t(peopleNumber,scale,id))MATCH (a:software WHERE a.scale = p.scale AND (a.name = 'Hadoop')) -[e:software_uses_software ]->(b:software) , (a:software WHERE a.name = 'Hadoop') <-[e2:software_uses_software ]-(c:software) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点标签为department,边标签为has,以及f0大于等于691或srcId在34到192之间,且targetId为空的边",
        "output": "match(a:department)-[e:has where (e.f0 >= 691 or (e.srcId BETWEEN 34 AND 192)) and (e.targetId is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为64的教师的朋友，以及与该部门相关的伙伴。",
        "output": "match(a:teacher where id = '64')-[e]-(b:department)-[e2:friend]->(c), (b:department)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找大学重庆大学的全部标签为朋友的边,并根据源点id从小到大排列,返回186个",
        "output": "match(a:university where a.name = '重庆大学')-[e:friend]->(b) return b order by e.srcId asc limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person郑思思有认识关系的person,再查询以提交关系关联了郑思思的软件",
        "output": "match(a:person where a.name = '郑思思')-[e:knows]->(b:person),(a:person where a.name = '郑思思')<-[e2:commits]-(c:software)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为25的论坛包含的帖子, 并将帖子有关的帖子的id的最大值赋值给帖子(b)的id, 接着查询帖子(b)的id小于25的帖子拥有的标签",
        "output": "match(a:forum where a.id = 25)-[e:contain]->(b:post) let b.id = MAX((b:post)-[e2]-(c:post) => c.id) match(b:post where b.id < 25)-[e3:has]->(d:tag) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和评论Comment_138之间有属于关系的电影",
        "output": "match(a:comment where a.name='Comment_138')-[e:belong]->(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与公司相关的城市节点，按其value、name、area分组，返回它们的value、name和area。",
        "output": "match(a:company)-[e:belong]-(b:city) return b.value, b.name, b.area group by b.value, b.name, b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出学生赵思琪选择的课程,被其他教师教的数量",
        "output": "match(a:student where a.name='赵思琪')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和帖子Post_240有关系的帖子或用户或标签,返回这些点的身高,id,性别",
        "output": "match(a:post where a.name='Post_240')-[e]-(b:post | user | tag) return b.height, b.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为徐若涵和陈若涵的点共同knows的,标签为person的节点",
        "output": "match(a where a.name = '徐若涵')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '陈若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减463的值",
        "output": "a.value - 463",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与seller Tom有关,且与orders Order_484有关系的buyer节点",
        "output": "match(a:seller where a.name='Tom')-[e:ask]-(b:buyer)-[e2:cancel]-(c:orders where c.name='Order_484') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,名字分组,计算id加id的值",
        "output": "return a.id + a.id group by a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与ID为33的大学的合作伙伴，以及与大学有关的合作伙伴。",
        "output": "match(a:university where id = '33')-[e]-(b:university)-[e2:partner]->(c), (b:university)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与公司美团有关,且与软件SprintBoot有关系的软件节点",
        "output": "match(a:company where a.name='美团')-[e:creates]-(b:software)-[e2:uses]-(c:software where c.name='SprintBoot') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,height,salary, 数据为('张梅',181,5556),('周月',154,3069)的子查询作为输入表, 源点的salary等于输入表salary,查找编辑周建国的所有伙伴,的源点id除162的个数",
        "output": "with p as (select * from (VALUES('张梅',181,5556),('周月',154,3069)) as t(name,height,salary))MATCH (a:publisher WHERE a.salary = p.salary AND (a.name = '周建国')) -[e:partner ]->(b) RETURN COUNT(e.srcId / 162) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价值,类别分组,计算value的和加价值减id的值",
        "output": "return SUM(a.value) + a.value - a.id group by a.name, a.value, a.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与用户Jimmy有关,且与仓库Mybatis有关系的合并请求节点",
        "output": "match(a:user where a.name='Jimmy')-[e:creates]-(b:pullRequest)-[e2:belong]-(c:repository where c.name='Mybatis') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名字不是吴强的卖家回答的买家的名称,以及这些买家 查看的商品的名称",
        "output": "match(a:seller where a.name <> '吴强')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出28个与黄轩和张月都存在关系的person或公司或软件节点",
        "output": "match(a where a.name='黄轩')-[e]->(b:person | company | software)<-[e2]-(c where c.name='张月') return b limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于国家,名为越南的点,返回这些点的价值,名字,id",
        "output": "match(a:country where a.name = '越南') return a.value, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和部门土木学院之间有拥有关系的教师",
        "output": "match(a:department where a.name='土木学院')-[e:has]->(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找部门呼吸科的所有伙伴,的weight的最大值减128.45除640的平均值",
        "output": "match(a:department where a.name= '呼吸科')-[e:partner]->(b) return AVG((MAX(e.weight) - 128.45) / 640)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与city武汉有关系的city的area",
        "output": "match(a:city where a.name='武汉')-[e]-(b:city) return b.area",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询所有源点标签为'person'，边标签为'creates'的边，并返回这些边的目标节点ID加上135的值以及源节点ID除以75的值。",
        "output": "match(a:person)-[e:creates]->(b) return e.targetId + 135, SUM(e.srcId / 75)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影院UME 上映的电影,返回电影 拥有的标签的价值加823的值",
        "output": "match(a:cinema where name = 'UME')-[e:releases]->(b:film)-[e2:has]->(c:tag) return c.value + 823",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为土木学院的,age在36到93之间的partner,返回这些partner的height,和边的weight",
        "output": "match(a where a.name='土木学院')-[e:partner]->(b where (b.age BETWEEN 36 AND 93)) return b.height,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回点名为何轩的person标签的height和salary。",
        "output": "match(a:person where a.name = '何轩') return a.height, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为142的城市属于的国家, 并将国家有关的公司的人数的平均值赋值给国家的面积, 接着查询国家的面积小于142的国家包含的城市",
        "output": "match(a:city where a.id = 142)-[e:belong]->(b:country) let b.area = AVG((b:country)-[e2]-(c:company) => c.peopleNumber) match(b:country where b.area < 142)-[e3:contain]->(d:city) return b.area, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和医生徐月之间有创造关系的处方",
        "output": "match(a:doctor where a.name='徐月')-[e:creates]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出140个与王强和陈伟有关系的人。",
        "output": "match(a where a.name='王强')-[e]->(b:person)<-[e2]-(c where c.name='陈伟') return b limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有起点为orders,终点为contain的边，并返回这些边的数量，以及它们的weight对151.79取余的值和f0对613取余的值。",
        "output": "match(a:orders)-[e:contain]->(b) return COUNT(e.weight % 151.79), e.f0 % 613",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与读者周梅相关的编辑，然后查询周梅喜欢的其他书籍，并列出结果。",
        "output": "match(a:reader where a.name = '周梅')-[e]-(b:publisher), (a:reader)-[e2:likes]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'uu', 'ls'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('uu', 'ls') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表935,894,317, 源点的id等于输入表id,给出与person杜月和周梅都存在person_pay_person关系的点",
        "output": "with p as (select * from (VALUES(935),(894),(317)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '杜月')) -[e:person_pay_person ]->(b) <-[e2:person_pay_person ]-(c:person WHERE c.name = '周梅') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与赵宏有家人关系的person，以及这些人与其他人存在朋友关系的点。返回这些点的身高信息。",
        "output": "match(a where a.name = '赵宏')-[e:family]->(b:person)-[e2:friend]->(c:person) return c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与郑强存在apply关系的loan,loan与account存在deposit关系的点,返回这些点的name",
        "output": "match(a where a.name = '郑强')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的3度以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点标签为author,目标点标签为book,标签为author的边",
        "output": "match(a:author)-[e:author]->(b:book) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询40个和标签为person的点有认识关系的person,且和这些person有喜欢关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:likes]->(c:person) return c limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,name,id, 数据为(48,'Order_408',58)的子查询作为输入表, 以属性value作为相等条件,请帮我找出与订单Order_485和Order_299都存在orders_contain_goods关系的点",
        "output": "with p as (select * from (VALUES(48,'Order_408',58)) as t(value,name,id))MATCH (a:orders WHERE a.value = p.value AND (a.name = 'Order_485')) -[e:orders_contain_goods ]->(b) <-[e2:orders_contain_goods ]-(c:orders WHERE c.name = 'Order_299') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与订单相关的卖家节点，过滤掉名字为190的节点，并计算这些节点的身高总和，然后将其除以5175取余数，再减去薪资，最后将年龄乘以41再加上152,返回结果。",
        "output": "match(a:orders)-[e]->(b:seller where b.name <> 190) return AVG(b.height + b.height % 5175 - b.salary), SUM(b.age * 41 + 152)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person杜强 pay的person,返回person knows的person的age加63的平均值",
        "output": "match(a:person where name = '杜强')-[e:pay]->(b:person)-[e2:knows]->(c:person) return AVG(c.age + 63)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与《呐喊》有关系的作者",
        "output": "match(a:book where a.name='呐喊')<-[e:write]-(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出徐宏卖家所有的商品，以及他拥有的其他商品。",
        "output": "match(a:seller where a.name = '徐宏')-[e]-(b:goods), (a:seller)-[e2:has]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与合并请求有关系的事项节点,且事项节点的状态等于Closed,并返回这些事项的权重除879加375的值,以及事项的id乘8减109的平均值",
        "output": "match(a:pullRequest)-[e]->(b:issue where b.status = 'Closed') return b.weight / 879 + 375, AVG(b.id * 8 - 109)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为XXRepo的点拥有的事项",
        "output": "match(a where a.name='XXRepo')-[e:has]->(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,credit,id, 数据为('线性代数',4,14),('大学物理',2,98), 以属性credit作为相等条件,给出和部门土木学院有关的学生,称为X,再给出和这个X有关联的其他课程,以及和X有关联的课程",
        "output": "with p as (select * from (VALUES('线性代数',4,14),('大学物理',2,98)) as t(name,credit,id))MATCH (a:department WHERE a.credit = p.credit AND (a.name = '土木学院')) -[e ]-(b:student) , (b:student) -[e2 ]-(c:course) , (b:student) -[e3 ]-(d:course) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从中国军事论坛出发，通过含有某内容的边，向前跳一步可以到达的帖子。",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:contain]->{1,1}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找185个和标签等于seller的点有ask关系的buyer,以及和这些buyer有creates关系的orders",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:creates]->(c:orders) return c limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Prescription_314和Prescription_112都有关联的处方节点，并返回它们的ID。",
        "output": "match(a:prescription where a.name='Prescription_314')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_112') return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出同时与孙科和杜梅有关联的人。",
        "output": "match(a:person where a.name='孙科')-[e:colleague]-(b:person)-[e2:parent]-(c:person where c.name='杜梅') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(39,331,4),(80,131,2),(90,805,1)作为请求表数据,属性分别为id,value,level, 以属性value作为相等条件,帮我查询城市的三角的环,边类型为city_contain_university, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(39,331,4),(80,131,2),(90,805,1)) as t(id,value,level))MATCH (a:city WHERE a.value = p.value) -[e:city_contain_university ]->(b) -[e2:city_contain_university ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person创造的评论,返回其源点的id对21取余减4498的值,以及目标点的id的个数对43取余的最小值",
        "output": "match(a:person)-[e:creates]->(b:comment) return a.id % 21 - 4498, MIN(COUNT(b.id) % 43)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和仓库XXRepo之间有拥有关系的事项",
        "output": "match(a:repository where a.name='XXRepo')-[e:has]->(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和处方Prescription_278之间有包含关系的药品",
        "output": "match(a:prescription where a.name='Prescription_278')-[e:contain]->(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部person的partner,或其partner的partner",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出113个与中国诗词论坛和知乎都存在关系的用户节点",
        "output": "match(a where a.name='中国诗词论坛')-[e]->(b:user)<-[e2]-(c where c.name='知乎') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找名为广州的点的,peopleNumber为75001的relation,返回这些relation的id,和边的srcId,f0,targetId",
        "output": "match(a where a.name='广州')-[e:relation]->(b where b.peopleNumber = 75001) return b.id,e.srcId, e.f0, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被作家郑强认识的作家,和郑强撰写的书",
        "output": "match(a:author)<-[e:knows]-(b:author where name = '郑强')-[e2:write]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前170个类型为knows的边",
        "output": "match(a)-[e:knows]->(b) return e limit 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和书呐喊有关的读者,再帮我查询和呐喊引用的其他书,返回它们",
        "output": "match(a:book where a.name = '呐喊')-[e]-(b:reader), (a:book)-[e2:refers]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以600,516作为请求点id, 以属性id作为相等条件,请帮我找出和电影院人人影城之间有cinema_releases_film关系的电影",
        "output": "with p as (select * from (VALUES(600),(516)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.name = '人人影城')) -[e:cinema_releases_film ]->(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出 Forum 到 Person 之间，类型为 Contain 的边？",
        "output": "match(a:forum)-[e:contain]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数除164的最大值",
        "output": "MAX(a.wordCount / 164)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和买家张伟有查看关系的商品,再请帮我查找以咨询关系关联了张伟的卖家",
        "output": "match(a:buyer where a.name = '张伟')-[e:look]->(b:goods),(a:buyer where a.name = '张伟')<-[e2:consult]-(c:seller)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与10个类型为person的节点有恋爱关系的person，以及与这些person有朋友关系的person。",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person) return c limit 10",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为张建聪和徐红的,label为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='张建聪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='徐红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出与周轩存在author_write_book关系的书,书与书存在book_refers_book关系的点,返回这些点的字数",
        "output": "match(a where a.name = '周轩')-[e:author_write_book]->(b:book)-[e2:book_refers_book]->(c:book) return c.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与university四川大学有关,且与country美国有关系的city节点",
        "output": "match(a:university where a.name='四川大学')-[e:belong]-(b:city)-[e2:belong]-(c:country where c.name='美国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和orders Order_446有contain关系的goods,再查找以contain关系关联了Order_446的goods",
        "output": "match(a:orders where a.name = 'Order_446')-[e:contain]->(b:goods),(a:orders where a.name = 'Order_446')<-[e2:contain]-(c:goods)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有id为50的医生关联的药品,和以包含关系关联了这些药品的其他处方",
        "output": "match(a:doctor where a.id = 50)-[e]-(b:medicine)<-[e2:contain]-(c:prescription) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询183个金额在2395.04到7810.16之间或id为2的贷款,根据权重从小到大排列",
        "output": "match(a:loan where (a.amount BETWEEN 2395.04 AND 7810.16) or a.id = 2) return a order by a.weight asc limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与'TheShy'账户有关联，或者与该账户的伙伴有关联的贷款。",
        "output": "match(a:account where n.name=TheShy)-[e:partner]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person吴宏的label为同事的边,并根据源点id降序排列,返回10个",
        "output": "match(a:person where a.name = '吴宏')-[e:colleague]->(b) return b order by e.srcId desc limit 10",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出大学关联的公司节点，价值小于等于553,并返回这些点的人数减531的平均值，以及价值减379的和。",
        "output": "match(a:university)-[e]->(b:company where b.value <= 553) return AVG(b.peopleNumber - 531), SUM(b.value - 379)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 南京大学和电子科技大学都隶属于哪个大学体系？",
        "output": "match(a:university where a.name='南京大学')-[e:belong]->(b)<-[e2:belong]-(c:university where c.name='电子科技大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与买家或买家相关者有关的人。",
        "output": "match(a:buyer)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找医生黄科的全部伙伴,的目标点id乘78乘170的值",
        "output": "match(a:doctor where a.name= '黄科')-[e:partner]->(b) return e.targetId * 78 * 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age乘age的数量",
        "output": "COUNT(a.age * a.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出reader的1度的环",
        "output": "match(a:reader)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出周雪和张梅共同的朋友列表。",
        "output": "match(a:person where a.name='周雪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='张梅') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型为部门,边类型为拥有的边,返回这些边的目标点id对34取余对196.64取余的值,和目标点id对38取余对138.56取余的平均值",
        "output": "match(a:department)-[e:has]->(b) return e.targetId % 34 % 196.64, AVG(e.targetId % 38 % 138.56)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age减60的平均值",
        "output": "AVG(a.age - 60)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为徐轩的点的,类别是书籍,名字等于矿泉水的伙伴,返回这些伙伴的销量,和边的源点id",
        "output": "match(a where a.name='徐轩')-[e:partner]->(b where b.category = '书籍' and b.name = '矿泉水') return b.sellerNumber,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为历史的标签,以及与其有关的评论,并返回历史的名字和这些评论的创建时间",
        "output": "match(a:tag where name = '历史')-[e]-(b:comment) return a.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与person孙国强有关系的software的id",
        "output": "match(a:person where a.name='孙国强')-[e]-(b:software) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person Bob的所有伙伴,的权重除187.54的值",
        "output": "match(a:person where a.name= 'Bob')-[e:partner]->(b) return e.weight / 187.54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询和publisher吴伟有publisher_publish_book关系的book,以及和author陈雪有author_write_book关系的book,将它们都返回",
        "output": "match(a:publisher where a.name = '吴伟')-[e:publisher_publish_book]->(b:book),(c:author where c.name = '陈雪')-[e2:author_write_book]->(d:book)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为65的forum有关的forum的partner, 再返回和forum有关系的relation",
        "output": "match(a:forum where id = 65)-[e]-(b:forum)-[e2:partner]->(c), (b:forum)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为area,value,peopleNumber, 数据为(90803,37,3891),(25797,501,2547), 以属性area作为相等条件,请帮我查找和company有关联的city节点,并根据其id,area分组,返回id,area,以及area对78654取余的值",
        "output": "with p as (select * from (VALUES(90803,37,3891),(25797,501,2547)) as t(area,value,peopleNumber))MATCH (a:company WHERE a.area = p.area) -[e:company_belong_city ]-(b:city) RETURN b.id, b.area, b.area % 78654 GROUP BY b.id, b.area ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找医生何红创造的处方,被其他病人接受的数量",
        "output": "match(a:doctor where a.name='何红')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为账号的全部点,并根据是否冻结升序排列",
        "output": "match(a:account) return a order by a.isBlock asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回赵科患者和Prescription_338处方中存在的药品节点，并返回它们的重量、价格和名称。",
        "output": "match(a:patient where a.name='赵科')-[e]->(b:medicine)<-[e2]-(c:prescription where c.name='Prescription_338') return b.weight, b.price, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王国强和person陈思思都有关联的person节点，然后返回他们的身高和姓名。",
        "output": "match(a:person where a.name='王国强')-[e]->(b:person)<-[e2]-(c:person where c.name='陈思思') return b.height, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出61个价值不为空且价值大于等于657,或名字不等于杯子的商品,根据价格从小到大排列",
        "output": "match(a:goods where ((a.value is not null) and a.value >= 657) or a.name <> '杯子') return a order by a.price asc limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和person李宏有1跳或2跳关系的person",
        "output": "match(a:person where a.name='李宏')-[e]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表994,758,445,388,877, 以属性id作为相等条件,请帮我查找与company微软有关系的person, 返回和这些person有关联的company的,id加id的值",
        "output": "with p as (select * from (VALUES(994),(758),(445),(388),(877)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '微软')) -[e ]-(b:person) -[e2 ]-(c:company) RETURN c.id + c.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 Cinema 大众影院有 releases 关系的电影和与李建聪有 watch 关系的电影。",
        "output": "match(a:cinema where a.name = '大众影院')-[e:releases]->(b:film),(c:person where c.name = '李建聪')-[e2:watch]->(d:film) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点名字不等于吴建聪且薪资不是6756,年龄在55到67之间,边label为家人,且源点id大于168,f0不为空且f1不等于false的边,返回这些边的f0加744的平均值",
        "output": "match(a where a.name <> '吴建聪' and a.salary <> 6756 and (a.age BETWEEN 55 AND 67))-[e:family where e.srcId > 168 and (e.f0 is not null) and e.f1 <> false]->(b) return AVG(e.f0 + 744)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(165,57,'famale')作为请求表数据,属性分别为height,id,gender, 源点的id等于输入表id,查找38个名为张月的点knows的类型是person的节点,且节点gender不是male",
        "output": "with p as (select * from (VALUES(165,57,'famale')) as t(height,id,gender))MATCH (a WHERE a.id = p.id AND (a.name = '张月')) -[e:knows ]->(b:person WHERE b.gender <> 'male') RETURN b LIMIT 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部名为徐月的节点knows的person或company",
        "output": "match(a where a.name='徐月')-[e:knows]->(b:person | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出184个company Bilibili和蚂蚁集团,共同的friend",
        "output": "match(a:company where a.name='Bilibili')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='蚂蚁集团') return b limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和读者周国强有关的作家,称为X,再给出和这个X有关联的其他读者,以及和X有关联的作家",
        "output": "match(a:reader where a.name = '周国强')-[e]-(b:author), (b:author)-[e2]-(c:reader),(b:author)-[e3]-(d:author) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与医生李思思相关的处方，然后找到她诊断过的其他病人，并将它们返回。",
        "output": "match(a:doctor where a.name = '李思思')-[e]-(b:prescription), (a:doctor)-[e2:diagnose]->(c:patient) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 徐科购买的软件被其他软件使用的数量。",
        "output": "match(a:person where a.name='徐科')-[e:buy]->(b:software)<-[e2:uses]-(c:software) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与cinema节点有关系的节点，且节点ID不等于66,并返回这些节点的ID对55取余的值和ID乘40的值。",
        "output": "match(a:cinema)-[e]->(b:cinema where b.id <> 66) return b.id % 55, b.id * 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与土木学院有has关系的大学",
        "output": "match(a:department where a.name='土木学院')<-[e:has]-(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出类型为用户的全部点,并根据年龄降序排列",
        "output": "match(a:user) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点标签为company,目标点标签为person,标签为company_employee_person的边",
        "output": "match(a:company)-[e:company_employee_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person郑强 认识的person,返回person 喜欢的person的年龄除年龄的值",
        "output": "match(a:person where name = '郑强')-[e:knows]->(b:person)-[e2:likes]->(c:person) return c.age / c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(0,'美团',84),(92,'字节',621),(64,'Bilibili',341), 源点的value等于输入表value,找出名为Mysql和Kafka的,标签为software的点公共的friend节点的名单",
        "output": "with p as (select * from (VALUES(0,'美团',84),(92,'字节',621),(64,'Bilibili',341)) as t(id,name,value))MATCH (a:software WHERE a.value = p.value AND (a.name = 'Mysql')) -[e:friend ]->(b) <-[e2:friend ]-(c:software WHERE c.name = 'Kafka') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创造person张宏喜欢的评论,的person",
        "output": "match(a:person where name = '张宏')-[e:likes]->(b:comment)<-[e2:creates]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询Light的所有点转移账户，以及Light的拥有者，然后把它们一起返回。",
        "output": "match(a where a.name = 'Light')-[e:transfer]->(b:account),(a where a.name = 'Light')<-[e2:own]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定department艺术学院中的teacher,返回其教授的course的名称和value。",
        "output": "match(a:department where name = '艺术学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person有关联的person节点,并根据其薪资,年龄分组,返回薪资,年龄,以及身高乘身高的最大值",
        "output": "match(a:person)-[e:lover]-(b:person) return b.salary, b.age, MAX(b.height * b.height) group by b.salary, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家马雪创建的订单中，被其他买家创建的数量",
        "output": "match(a:buyer where a.name='马雪')-[e:creates]->(b:orders)<-[e2:creates]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和国家澳大利亚有关系的城市或国家或公司,返回这些点的等级",
        "output": "match(a:country where a.name='澳大利亚')-[e]-(b:city | country | company) return b.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,salary,id, 数据为('何强',2985,93),('郑轩',3907,17),('马若涵',5590,72),('赵思思',1707,19)的子查询作为输入表, 源点的salary等于输入表salary,帮我查询源点名字不是吴伟且薪资在5572到9760之间,边标签等于person_knows_person,且满足条件权重为空,f0除505不等于199.79且目标点id小于等于199.51的边,返回这些边的f0除729的和",
        "output": "with p as (select * from (VALUES('何强',2985,93),('郑轩',3907,17),('马若涵',5590,72),('赵思思',1707,19)) as t(name,salary,id))MATCH (a WHERE a.salary = p.salary AND (a.name <> '吴伟' AND a.salary BETWEEN ASYMMETRIC 5572 AND 9760)) -[e:person_knows_person WHERE e.weight IS NULL AND e.f0 / 505 <> 199.79 AND e.targetId <= 199.51 ]->(b) RETURN SUM(e.f0 / 729) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前161个label为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 161",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,createTime,name, 数据为(5,2000-02-12,'呐喊'),(90,2000-11-10,'三体')的子查询作为输入表, 以属性name作为相等条件,请帮我查找80个名为赵伟的点publish的标签等于book的节点,且节点wordCount小于等于767",
        "output": "with p as (select * from (VALUES(5,2000-02-12,'呐喊'),(90,2000-11-10,'三体')) as t(id,createTime,name))MATCH (a WHERE a.name = p.name AND (a.name = '赵伟')) -[e:publisher_publish_book ]->(b:book WHERE b.wordCount <= 767) RETURN b LIMIT 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与'doctor'类型的点存在'belong'关系的'department'，以及这些'department'存在'has'关系的'doctor'，以及这些'doctor'存在'belong'关系的'department'。",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:belong]->(d:department) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出user publish的post, 令post的lang的值等于containpost的forum的createTime的最小值, 再查找post has的tag",
        "output": "match(a:user)-[e:publish]->(b:post) let b.lang = MIN((b:post)<-[e2:contain]-(c:forum) => c.createTime) match(b:post)-[e3:has]->(d:tag) return b.lang, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person张雪 认识的person,返回person 购买的软件的id加90的求和值",
        "output": "match(a:person where name = '张雪')-[e:knows]->(b:person)-[e2:buy]->(c:software) return SUM(c.id + 90)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以947,393作为请求点id, 源点的id等于输入表id,找出全部源点类型是公司,目标点类型是贷款,类型是company_apply_loan的边",
        "output": "with p as (select * from (VALUES(947),(393)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_apply_loan ]->(b:loan) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找美团创建的软件的节点所使用的软件。",
        "output": "match(a:company where a.name = '美团')-[e:creates]->(b:software)-[e2:uses]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与城市有关的公司节点，这些节点的id在0到62之间。然后返回以下结果：这些节点的人数总和乘以776再加上996，以及value的最大值乘以value的值。",
        "output": "match(a:city)-[e]->(b:company where (b.id BETWEEN 0 AND 62)) return SUM(b.peopleNumber) * 776 + 996, MAX(b.value) * b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和城市东京有包含关系的大学,再请帮我查找以包含关系关联了东京的大学",
        "output": "match(a:city where a.name = '东京')-[e:contain]->(b:university),(a:city where a.name = '东京')<-[e2:contain]-(c:university)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找同时与赵轩和TheShy有关联的账户节点。",
        "output": "match(a:person where a.name='赵轩')-[e:own]-(b:account)-[e2:transfer]-(c:account where c.name='TheShy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和国家澳大利亚之间有包含关系的城市",
        "output": "match(a:country where a.name='澳大利亚')-[e:contain]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与TheShy和Zeus有关的账户节点。",
        "output": "match(a:account where a.name='TheShy')-[e:transfer]-(b:account)-[e2:transfer]-(c:account where c.name='Zeus') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person孙强投资的公司节点申请的贷款",
        "output": "match(a:person where a.name = '孙强')-[e:invest]->(b:company)-[e2:apply]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除155的值",
        "output": "a.height / 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以取消关系关联了订单Order_159的买家",
        "output": "match(a:orders where a.name='Order_159')<-[e:cancel]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为中国军事论坛的帖子,以及与其有关的用户,并返回中国军事论坛的id和这些用户的性别",
        "output": "match(a:post where name = '中国军事论坛')-[e]-(b:user) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被公司属于数量大于23的城市,记为relationCount,再查询这些城市属于的公司",
        "output": "match(a:city) let a.relationCount = MAX((a:city)<-[e:belong]-(b:company) => b.id) match(a where a.relationCount > 23)-[e2:belong]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从王月卖家出发，沿着拥有类型的边界走2到5度，可以到达哪个商品点？",
        "output": "match(a:seller where a.name='王月')-[e:has]->{2,5}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与person马思思有关系的贷款的id",
        "output": "match(a:person where a.name='马思思')-[e]-(b:loan) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以968作为请求点id, 源点的id等于输入表id,返回类型为person,名为韩建国的点,返回这些点的性别,id",
        "output": "with p as (select * from (VALUES(968)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩建国')) RETURN a.gender, a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,薪资分组,计算id对80取余的最小值",
        "output": "return MIN(a.id % 80) group by a.height, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点gender等于famale,salary大于等于4417,name不等于李建聪,边类型为creates,且f1为false的边,返回这些边的targetId的平均值乘13的和",
        "output": "match(a where a.gender = 'famale' and a.salary >= 4417 and a.name <> '李建聪')-[e:creates where e.f1 = false]->(b) return SUM(AVG(e.targetId) * 13)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被城市武汉包含的大学,和武汉属于的国家",
        "output": "match(a:university)<-[e:contain]-(b:city where name = '武汉')-[e2:belong]->(c:country) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前158个名字为韩科的person",
        "output": "match(a:person where a.name = '韩科') return a limit 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与何梅和何思琪有关的人，共有184个。",
        "output": "match(a where a.name='何梅')-[e]->(b:person)<-[e2]-(c where c.name='何思琪') return b limit 184",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询和标签等于同时满足以下条件的贷款和账号：贷款有存款关系，账号有还款关系。",
        "output": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id乘14的最大值",
        "output": "return MAX(a.id * 14) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出46个名为韩月的点selects的类型是course的节点,且其name为高等数学或name等于程序设计",
        "output": "match(a where a.name='韩月')-[e:selects]->(b:course where b.name = '高等数学' or b.name = '程序设计') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 物理学院的学生被department。",
        "output": "match(a:student)<-[e:has]-(b:department where b.name='物理学院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被部门经管学院拥有的学生,和经管学院拥有的学生",
        "output": "match(a:student)<-[e:has]-(b:department where name = '经管学院')-[e2:has]->(c:student) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出王伟的合作伙伴的合作伙伴。",
        "output": "match(a:author where a.name='王伟')-[e:partner]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出140个名为徐建聪的点likes的类型是comment的节点,且其createTime为2012年11月10日且createTime等于2007年04月11日",
        "output": "match(a where a.name='徐建聪')-[e:likes]->(b:comment where b.createTime = '2012-11-10' and b.createTime = '2007-04-11') return b limit 140",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被大学北京大学属于的城市",
        "output": "match(a:city)<-[e:belong]-(b:university where b.name='北京大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从买家吴梅出发,经过标签等于取消的边,走3度或4度到达的订单点",
        "output": "match(a:buyer where a.name='吴梅')-[e:cancel]->{3,4}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下叫吴红的人",
        "output": "match(a:person where a.name = '吴红') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有与名为《少年闰土》的书有引用关系的书。",
        "output": "match(a:book where n.name=少年闰土)-[e:refers]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为陈雪的点的,id不是40且wordCount为空的partner,返回这些partner的id,和边的f0,srcId,f1",
        "output": "match(a where a.name='陈雪')-[e:partner]->(b where b.id <> 40 and (b.wordCount is null)) return b.id,e.f0, e.srcId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary的最小值加4127的平均值",
        "output": "return AVG(MIN(a.salary) + 4127) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为1的medicine有关的doctor的partner, 再查找和doctor有关系的relation",
        "output": "match(a:medicine where id = 1)-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出buyer李月的全部标签为friend的边,并根据f0从大到小排列,返回23个",
        "output": "match(a:buyer where a.name = '李月')-[e:friend]->(b) return b order by e.f0 desc limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和标签为buyer的点有consult关系的seller,以及和这些seller有ask关系的buyer,以及和这些buyer有look关系的goods",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:look]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id小于等于90且name等于张宏的author write的book的名称,以及这些book relates的book的名称",
        "output": "match(a:author where a.id <= 90 and a.name = '张宏')-[e:write]->(b:book)-[e2:relates]->(c:book) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,height,salary, 数据为('male',163,4279)的子查询作为输入表, 源点的salary等于输入表salary,请帮我查找被department体育学院has的student",
        "output": "with p as (select * from (VALUES('male',163,4279)) as t(gender,height,salary))MATCH (a:student WHERE a.salary = p.salary) <-[e:department_has_student ]-(b:department WHERE b.name = '体育学院') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到名为张轩且标签为人的人的年龄和薪水。",
        "output": "match(a:person where a.name = '张轩') return a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary对3244取余的值",
        "output": "a.salary % 3244",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出城市的3度以内的环",
        "output": "match(a:city)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询周思琪的处方记录。",
        "output": "match(a:prescription)<-[e:accept]-(b:patient where b.name='周思琪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回满足条件创建时间大于62或id在44到59之间的节点",
        "output": "match(a where a.createTime > 62 or (a.id BETWEEN 44 AND 59)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询XiaoHu相关的公司，然后查询XiaoHu偿还的其他贷款，并返回这些信息。",
        "output": "match(a:account where a.name = 'XiaoHu')-[e]-(b:company), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马若涵认识的人",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='马若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表941,767,421, 源点的id等于输入表id,查询所有id为158的部门关联的教师,和以拥有关系关联了这些教师的其他部门",
        "output": "with p as (select * from (VALUES(941),(767),(421)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.id = '158')) -[e ]-(b:teacher) <-[e2:department_has_teacher ]-(c:department) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与医生徐红存在诊断关系,且与处方Prescription_296存在接受关系的病人节点，返回这些病人的名字,及医生徐红的名字,及处方Prescription_296的权重",
        "output": "match(a:doctor where a.name='徐红')-[e:diagnose]->(b:patient)<-[e2:accept]-(c:prescription where c.name='Prescription_296') return a.name,b.name,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight加739的最小值",
        "output": "MIN(a.weight + 739)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与prescription Prescription_358和Prescription_292都有关联的user节点，返回这些节点的salary和name。",
        "output": "match(a:prescription where a.name='Prescription_358')-[e]->(b:user)<-[e2]-(c:prescription where c.name='Prescription_292') return b.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为20的点的字数,id",
        "output": "match(a where a.id = 20) return a.wordCount, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询120个loan loan_63和loan_0,共同的friend",
        "output": "match(a:loan where a.name='loan_63')-[e:friend]->(b)<-[e2:friend]-(c:loan where c.name='loan_0') return b limit 120",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询拥有部门外科拥有的医生,的部门",
        "output": "match(a:department where name = '外科')-[e:has]->(b:doctor)<-[e2:has]-(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表663,969,927, 源点的id等于输入表id,请帮我查找112个和label为person的点有person_parent_person关系的person,以及和这些person有person_family_person关系的person",
        "output": "with p as (select * from (VALUES(663),(969),(927)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_parent_person ]->(b:person) -[e2:person_family_person ]->(c:person) RETURN c LIMIT 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数减715的值",
        "output": "a.wordCount - 715",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出199个名为吴国强的点教的label为课程的节点,且其id在19到26之间,价值为空",
        "output": "match(a where a.name='吴国强')-[e:teacher_teach_course]->(b:course where (b.id BETWEEN 19 AND 26) and (b.value is null)) return b limit 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与孙思琪和陈红都有关联的101个comment节点",
        "output": "match(a where a.name='孙思琪')-[e]->(b:comment)<-[e2]-(c where c.name='陈红') return b limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出书呐喊认识的书,以及喜欢这些书的读者",
        "output": "match(a:book where name = '呐喊')-[e:knows]->(b:book)<-[e2:likes]-(c:reader) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被公司微软雇佣的person",
        "output": "match(a:person)<-[e:employee]-(b:company where b.name='微软') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从Order_169订单出发，通过包含类型的边走了3到5步到达的商品节点。",
        "output": "match(a:orders where a.name='Order_169')-[e:contain]->{3,5}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与吴建聪和赵国强有关联的人。",
        "output": "match(a:person where a.name='吴建聪')-[e:knows]-(b:person)-[e2:pay]-(c:person where c.name='赵国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询person的1度的环",
        "output": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出25个与标签为作家的点有认识关系的作家，以及这些作家认识的关系作家。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author) return c limit 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与张强是朋友、与吴建国是同事的人。这些人包括他们的姓名、年龄和薪水，以及张强的年龄和吴建国的身高。",
        "output": "match(a:person where a.name='张强')-[e:friend]->(b:person)<-[e2:colleague]-(c:person where c.name='吴建国') return a.age,b.name, b.age, b.salary,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部comment的friend,或其friend的friend",
        "output": "match(a:comment)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和person马红之间有家人关系的person",
        "output": "match(a:person where a.name='马红')-[e:family]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与repository XXRepo有has关系的3跳以内的环",
        "output": "match(a:repository where name = 'XXRepo')-[e:has]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的id的求和值加24的值",
        "output": "match(a:user) return SUM(a.id) + 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回26个和类型是医生的点有诊断关系的病人,并且和这些病人有接受关系的处方",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person杜思琪的相关者,的目标点id对48取余的平均值",
        "output": "match(a:person where a.name= '杜思琪')-[e:relation]->(b) return AVG(e.targetId % 48)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以917,241,305,911作为请求点id, 源点的id等于输入表id,帮我查询53个名为天涯论坛的点包含的类型是person的节点,且节点薪资小于6122",
        "output": "with p as (select * from (VALUES(917),(241),(305),(911)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '天涯论坛')) -[e:forum_contain_person ]->(b:person WHERE b.salary < 6122) RETURN b LIMIT 53",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有可能找到纽约和广州的共同合作伙伴，一共是127个城市？",
        "output": "match(a:city where a.name='纽约')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='广州') return b limit 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为马宏的点认识的全部person,并对这些person的年龄进行求和",
        "output": "match(a where a.name='马宏')-[e:knows]->(b:person) return SUM(b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和publisher黄若涵有关的author,再给出和黄若涵publish的其他book,返回它们",
        "output": "match(a:publisher where a.name = '黄若涵')-[e]-(b:author), (a:publisher)-[e2:publish]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为24的goods相关的seller及其伙伴，再查找与seller有关的伙伴",
        "output": "match(a:goods where id = '24')-[e]-(b:seller)-[e2:partner]->(c), (b:seller)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被买家创造数量大于72的订单,记为relationCount,再查询这些订单创造的订单",
        "output": "match(a:orders) let a.relationCount = MIN((a:orders)<-[e:creates]-(b:buyer) => b.id) match(a where a.relationCount > 72)-[e2:creates]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,age,gender, 数据为(11,89,'famale'),(93,39,'famale'),(49,30,'famale'), 以属性gender作为相等条件,请帮我找出与person吴月有person_own_account关系的2跳的环",
        "output": "with p as (select * from (VALUES(11,89,'famale'),(93,39,'famale'),(49,30,'famale')) as t(id,age,gender))MATCH (a:person WHERE a.gender = p.gender AND (name = '吴月')) -[e:person_own_account ]->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为level,name,value, 数据为(2,'武汉大学',123),(3,'重庆大学',480),(4,'重庆大学',526),(1,'复旦大学',409), 以属性value作为相等条件,请帮我找出country contain的city,返回其源点的peopleNumber除40546的平均值,以及目标点的peopleNumber减2230的数量",
        "output": "with p as (select * from (VALUES(2,'武汉大学',123),(3,'重庆大学',480),(4,'重庆大学',526),(1,'复旦大学',409)) as t(level,name,value))MATCH (a:country WHERE a.value = p.value) -[e:country_contain_city ]->(b:city) RETURN AVG(a.peopleNumber / 40546), COUNT(b.peopleNumber - 2230) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表562,883,534, 源点的id等于输入表id,返回类型是person的点",
        "output": "with p as (select * from (VALUES(562),(883),(534)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按照level和name对university进行分组，然后按level升序排序。",
        "output": "match(a:university) return a.level group by a.level, a.name order by a.level asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与person ID为183相关的forum的关系，然后获取与该forum相关的partner。",
        "output": "match(a:person where id = '183')-[e]-(b:forum)-[e2:relation]->(c), (b:forum)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为课程的点,返回82个",
        "output": "match(a:course) return a limit 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为person的点,返回79个",
        "output": "match(a:person) return a limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与论坛有关系的身高小于156的用户节点，并返回这些节点中salary的最小值对3777取余的值，以及id加79的平均值。",
        "output": "match(a:forum)-[e]->(b:user where b.height < 156) return MIN(b.salary) % 3777, AVG(b.id + 79)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点id小于等于14,边label为has,且targetId除176等于936且srcId为空的边,返回这些边的srcId的平均值减195减38的求和值",
        "output": "match(a where a.id <= 14)-[e:has where e.targetId / 176 = 936 and (e.srcId is null)]->(b) return SUM(AVG(e.srcId) - 195 - 38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找city为北京的朋友的朋友的伴侣",
        "output": "match(a:city where a.name='北京')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为192的person关联的person,和以relates关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 192)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回label为person的点,并根据id从小到大排列",
        "output": "match(a:person) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表980,888, 以属性id作为相等条件,查询从patient何强出发,经过标签为patient_accept_prescription的边,走2到5度到达的prescription点",
        "output": "with p as (select * from (VALUES(980),(888)) as t(id)) MATCH (a:patient WHERE a.id = p.id AND (a.name = '何强')) -[e:patient_accept_prescription ]->{2,5}(b:prescription) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为172的country有关的country的friend, 再请帮我找出和country有关系的partner",
        "output": "match(a:country where id = 172)-[e]-(b:country)-[e2:friend]->(c), (b:country)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与seller有关联的buyer节点，这些节点的高度至少为15，并返回以下信息：这些节点年龄的平均值减去98和22的差值的数量，以及它们薪水的平均值减去5867。",
        "output": "match(a:seller)-[e]->(b:buyer where b.height >= 15) return COUNT(AVG(b.age) - 98 - 22), AVG(b.salary - 5867)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部和部门眼科有3度关系的病人",
        "output": "match(a:department where a.name='眼科')-[e]->{3,3}(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为吴轩和马建国的点共同关联的人类节点",
        "output": "match(a where a.name = '吴轩')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '马建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与吴强存在家人关系的person,person与person存在朋友关系的点,返回这些点的名字",
        "output": "match(a where a.name = '吴强')-[e:family]->(b:person)-[e2:friend]->(c:person) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询医生张建国创造的处方,被其他医生创造的数量",
        "output": "match(a:doctor where a.name='张建国')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的求和值加13的数量",
        "output": "COUNT(SUM(a.id) + 13)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与company滴滴有belong关系的2度以内的环",
        "output": "match(a:company where name = '滴滴')-[e:belong]->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于订单,名为Order_435的点,返回这些点的id",
        "output": "match(a:orders where a.name = 'Order_435') return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字,身高分组,计算身高除154减年龄乘9952加96的值",
        "output": "return (a.height / 154 - a.age) * 9952 + 96 group by a.id, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找论坛包含的帖子,返回其源点的价值加936的最大值,以及目标点的id对id取余的值",
        "output": "match(a:forum)-[e:contain]->(b:post) return MAX(a.value + 936), b.id % b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表756,406,971,288, 源点的id等于输入表id,给出和person有关联的person节点,并根据其salary,gender分组,返回salary,gender,以及salary加6098的最大值",
        "output": "with p as (select * from (VALUES(756),(406),(971),(288)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_likes_person ]-(b:person) RETURN b.salary, b.gender, MAX(b.salary + 6098) GROUP BY b.salary, b.gender ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company谷歌之间有employee关系的person",
        "output": "match(a:company where a.name='谷歌')-[e:employee]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(8,88,6285),(98,86,3205),(24,24,1931),(14,26,1230)作为请求表数据,属性分别为age,id,salary, 源点的salary等于输入表salary,帮我查询用户何思琪的朋友,的f0减717的求和值",
        "output": "with p as (select * from (VALUES(8,88,6285),(98,86,3205),(24,24,1931),(14,26,1230)) as t(age,id,salary))MATCH (a:user WHERE a.salary = p.salary AND (a.name = '何思琪')) -[e:friend ]->(b) RETURN SUM(e.f0 - 717) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与读者陈若涵有关系的作家的年龄",
        "output": "match(a:reader where a.name='陈若涵')-[e]-(b:author) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回user赵月publish的post, 令post的createTime等于post的id加80,令post的age等于user的age的求和值,令post的name等于user的name, 返回user的age, post的wordCount",
        "output": "match(a:user where a.name='赵月')-[e:publish]->(b:post) let b.createTime = b.id + 80,let b.age = SUM(a.age),let b.name = a.name return a.age,b.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以406,387,336,822,451作为请求点id, 以属性id作为相等条件,返回与person李宏有关系的person, 返回和这些person有关联的person的,年龄减82加189的最小值",
        "output": "with p as (select * from (VALUES(406),(387),(336),(822),(451)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李宏')) -[e ]-(b:person) -[e2 ]-(c:person) RETURN MIN(c.age - 82 + 189) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和买家杜科有关系的卖家,返回这些点的id,价值",
        "output": "match(a:buyer where a.name='杜科')-[e]-(b:seller) return b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点label为作家,边label为撰写,且时间戳不是2007年10月25日,f0大于988,或源点id大于等于85的边",
        "output": "match(a:author)-[e:write where (e.timeStamp <> '2007-10-25' and e.f0 > 988) or e.srcId >= 85]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回course程序设计中属于department经管学院的teacher节点的name、age和height。",
        "output": "match(a:course where a.name='程序设计')-[e]->(b:teacher)<-[e2]-(c:department where c.name='经管学院') return b.name, b.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出company滴滴的所有标签等于partner的边,并根据srcId从小到大排列,返回150个",
        "output": "match(a:company where a.name = '滴滴')-[e:partner]->(b) return b order by e.srcId asc limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "筛选出满足以下条件的公司：有28人，且这些人的人数大于等于550，或者公司的id不是82，或者公司的value在709到760之间。然后按照scale从小到大进行排序。",
        "output": "match(a:company where a.peopleNumber >= 550 or a.id <> 82 or (a.value BETWEEN 709 AND 760)) return a order by a.scale asc limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询属于电影Comment_244的评论。",
        "output": "match(a:film)<-[e:belong]-(b:comment where b.name='Comment_244') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出172个名为华为的点属于的类型是城市的节点,且其人数不为空或名字不是天津",
        "output": "match(a where a.name='华为')-[e:belong]->(b:city where (b.peopleNumber is not null) or b.name <> '天津') return b limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查询以提交关系关联了软件Zookeeper的person",
        "output": "match(a:software where a.name='Zookeeper')<-[e:person_commits_software]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回大学拥有的部门,返回其源点的id除10的最小值,以及目标点的id减2的数量",
        "output": "match(a:university)-[e:has]->(b:department) return MIN(a.id / 10), COUNT(b.id - 2)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被医生创造数量大于4的处方,记为relationCount,再查询这些处方创造的药品",
        "output": "match(a:prescription) let a.relationCount = MAX((a:prescription)<-[e:creates]-(b:doctor) => b.id) match(a where a.relationCount > 4)-[e2:creates]->(c:medicine) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找创建时间不是1999年03月20日或字数为空的节点",
        "output": "match(a where a.createTime <> '1999-03-20' or (a.wordCount is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询creates doctor徐思思creates的prescription,的doctor",
        "output": "match(a:doctor where name = '徐思思')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为f1,f0,targetId, 数据为(false,875,30),(true,752,124), 源点的f0等于输入表f0,给出名字不是赵科的节点",
        "output": "with p as (select * from (VALUES(false,875,30),(true,752,124)) as t(f1,f0,targetId))MATCH (a WHERE a.f0 = p.f0 AND (a.name <> '赵科')) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询仓库XXRepo的全部相关者,的源点id除源点id的值",
        "output": "match(a:repository where a.name= 'XXRepo')-[e:relation]->(b) return e.srcId / e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有用户创建的边，并返回这些边权重加上179.09的平均值，以及目标点ID除以18的值。",
        "output": "match(a:user)-[e:creates]->(b) return AVG(e.weight + 179.09), e.targetId / 18",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以947,285,49,36作为请求点id, 以属性id作为相等条件,查找名为陈梅的person,以及与其有关的forum,并返回陈梅的age和这些forum的createTime",
        "output": "with p as (select * from (VALUES(947),(285),(49),(36)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '陈梅')) -[e ]-(b:forum) RETURN a.age, b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与ID为114的城市相关的大学伙伴，再帮我查找与大学有关的朋友。",
        "output": "match(a:city where id = '114')-[e]-(b:university)-[e2:partner]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点类型是person,边类型是family,且满足条件srcId小于127.33的边",
        "output": "match(a:person)-[e:family where e.srcId < 127.33]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的三角的环,边标签等于apply, 并返回这些点的id",
        "output": "match(a:person)-[e:apply]->(b)-[e2:apply]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找48个name等于Order_155的orders,根据price从大到小排列",
        "output": "match(a:orders where a.name = 'Order_155') return a order by a.price desc limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回41个person杜国强和张梅,共同的朋友",
        "output": "match(a:person where a.name='杜国强')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='张梅') return b limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为黄轩的person有lover关系,或有lover的lover关系的person",
        "output": "match(a:person where n.name=黄轩)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为杜思琪的节点关联的person",
        "output": "match(a where a.name='杜思琪')-[e:relates]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value分组,计算value减value的最小值",
        "output": "return MIN(a.value - a.value) group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和person赵月有2到5跳关系的公司",
        "output": "match(a:person where a.name='赵月')-[e]->{2,5}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和patient点有accept关系的prescription节点,且边满足条件f1为true,目标prescription节点createTime不等于2016年10月26日",
        "output": "match(a:patient)-[e:accept where e.f1 = true]->(b:prescription where b.createTime <> '2016-10-26') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回114个salary的最大值大于等于62的seller,根据gender从小到大排列",
        "output": "match(a:seller where MAX(a.salary) >= 62) return a order by a.gender asc limit 114",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为黄思琪的节点认识的person",
        "output": "match(a where a.name='黄思琪')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以85,957,986,430,55作为请求点id, 源点的id等于输入表id,帮我查询全部和department经管学院之间有department_has_student关系的student",
        "output": "with p as (select * from (VALUES(85),(957),(986),(430),(55)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '经管学院')) -[e:department_has_student ]->(b:student) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person黄建国和赵若涵都存在父母关系的点",
        "output": "match(a:person where a.name='黄建国')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='赵若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为广州的节点属于的城市或公司或大学",
        "output": "match(a where a.name='广州')-[e:belong]->(b:city | company | university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person投资的公司,返回其源点的身高除165的最小值,以及目标点的peopleNumber的平均值乘734的值",
        "output": "match(a:person)-[e:invest]->(b:company) return MIN(a.height / 165), AVG(b.peopleNumber) * 734",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出李思琪的点拥有的商品,然后请帮我找出李思琪被咨询的买家,一起返回",
        "output": "match(a where a.name = '李思琪')-[e:has]->(b:goods),(a where a.name = '李思琪')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出用户的1跳的环",
        "output": "match(a:user)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与teacher韩红有teach关系的2度的环",
        "output": "match(a:teacher where name = '韩红')-[e:teach]->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和user黄建聪有creates关系的pullRequest,再查询以creates关系关联了黄建聪的issue",
        "output": "match(a:user where a.name = '黄建聪')-[e:creates]->(b:pullRequest),(a:user where a.name = '黄建聪')<-[e2:creates]-(c:issue)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以787作为请求点id, 源点的id等于输入表id,返回和person黄科有关系的person节点,返回这些点的名字,id",
        "output": "with p as (select * from (VALUES(787)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '黄科')) -[e ]-(b:person) RETURN b.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person王轩关联的person, 令person(b)的名字等于person(a)的名字,令person的年龄等于person的身高乘身高,令person(a)的年龄等于person(b)的名字, 返回person(a)的id, person(b)的性别",
        "output": "match(a:person where a.name='王轩')-[e:relates]->(b:person) let b.name = a.name,let b.age = b.height * b.height,let a.age = b.name return a.id,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age,name分组,计算age对73取余的数量",
        "output": "return COUNT(a.age % 73) group by a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和课程大学物理有属于关系的部门,再帮我查询以属于关系关联了大学物理的部门",
        "output": "match(a:course where a.name = '大学物理')-[e:belong]->(b:department),(a:course where a.name = '大学物理')<-[e2:belong]-(c:department)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为XXRepo的点has的issue",
        "output": "match(a where a.name='XXRepo')-[e:has]->(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出帖子的1度的环",
        "output": "match(a:post)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前55个满足条件价值对410取余除2为124或学分不是2,且学分小于4的课程",
        "output": "match(a:course where (a.value % 410 / 2 = 124 or a.credit <> 2) and a.credit < 4) return a limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与帖子相关的标签节点，但不包括名为'科幻'的标签。然后返回这些节点ID的数量除以40再除以它们的价值，以及价值加599的最小值。",
        "output": "match(a:post)-[e]->(b:tag where b.name <> '科幻') return COUNT(b.id) / 40 / b.value, MIN(b.value + 599)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和编辑点有发布关系的书节点,且边满足条件源点id为空,目标书节点满足条件id不是14",
        "output": "match(a:publisher)-[e:publish where (e.srcId is null)]->(b:book where b.id <> 14) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(90,736,'体育学院')作为请求表数据,属性分别为size,value,name, 以属性size作为相等条件,查找全部源点标签等于部门,边标签等于department_has_teacher的边,返回这些边的源点id乘183的和,和源点id减64的值",
        "output": "with p as (select * from (VALUES(90,736,'体育学院')) as t(size,value,name))MATCH (a:department WHERE a.size = p.size) -[e:department_has_teacher ]->(b) RETURN SUM(e.srcId * 183), e.srcId - 64 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从合并请求PR-326出发,经过标签等于属于的边,走3到6度到达的仓库点",
        "output": "match(a:pullRequest where a.name='PR-326')-[e:belong]->{3,6}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前199个满足条件身高大于151且性别不是male的医生",
        "output": "match(a:doctor where a.height > 151 and a.gender <> 'male') return a limit 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与读者有关系的作家节点,且作家节点的性别为famale,并返回这些作家的id乘97的最大值,以及作家的薪资乘薪资除171的值",
        "output": "match(a:reader)-[e]->(b:author where b.gender = 'famale') return MAX(b.id * 97), b.salary * b.salary / 171",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的薪资除7198乘184的个数",
        "output": "match(a:user) return COUNT(a.salary / 7198 * 184)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'Py'作为输入调用pageRank函数,返回id, value",
        "output": "Call PAGERANK('Py') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为南京大学的大学,以及与其有关的公司,并返回南京大学的等级和这些公司的规格",
        "output": "match(a:university where name = '南京大学')-[e]-(b:company) return a.level, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出城市广州包含的大学,以及包含这些大学的城市",
        "output": "match(a:city where name = '广州')-[e:contain]->(b:university)<-[e2:contain]-(c:city) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与作家何伟有认识关系，并且撰写了书《Java程序设计》的作家节点。返回这些作家的性别以及作家何伟和这本书的名字。",
        "output": "match(a:author where a.name='何伟')-[e:knows]->(b:author)<-[e2:write]-(c:book where c.name='java程序设计') return a.gender,b.gender,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回读者喜欢的书, 令书的字数的值等于撰写书的作家的薪资的个数, 再查找书认识的书",
        "output": "match(a:reader)-[e:likes]->(b:book) let b.wordCount = COUNT((b:book)<-[e2:write]-(c:author) => c.salary) match(b:book)-[e3:knows]->(d:book) return b.wordCount, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和读者有关联的书节点,并根据其创建时间,字数,类别分组,返回创建时间,字数,类别,以及价格对49取余乘36减33的值",
        "output": "match(a:reader)-[e:likes]-(b:book) return b.createTime, b.wordCount, b.category, b.price % 49 * 36 - 33 group by b.createTime, b.wordCount, b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和公司滴滴之间有合作关系的大学",
        "output": "match(a:company where a.name='滴滴')-[e:cooperate]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,gender, 数据为(83,'赵国强','male'),(8,'李建国','male')的子查询作为输入表, 源点的name等于输入表name,找出所有源点满足条件name不是Alice或age小于等于96,目标点满足条件gender是male且salary在2556到9092之间,id不等于85,且类型是person_lover_person的边",
        "output": "with p as (select * from (VALUES(83,'赵国强','male'),(8,'李建国','male')) as t(id,name,gender))MATCH (a WHERE a.name = p.name AND (a.name <> 'Alice' OR a.age <= 96)) -[e:person_lover_person ]->(b WHERE b.gender = 'male' AND b.salary BETWEEN ASYMMETRIC 2556 AND 9092 AND b.id <> 85) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出37个部门物理学院和生物学院,共同的伙伴",
        "output": "match(a:department where a.name='物理学院')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='生物学院') return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问文学院有多少学生被其他部门所拥有？",
        "output": "match(a:department where a.name='文学院')-[e:has]->(b:student)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和person点有认识关系的person节点,且边满足条件f0在737到769之间,目标person节点满足条件名字不等于陈月",
        "output": "match(a:person)-[e:knows where (e.f0 BETWEEN 737 AND 769)]->(b:person where b.name <> '陈月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询马伟和王科共有的parent，数量为37。",
        "output": "match(a:person where a.name='马伟')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='王科') return b limit 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出27个有ID的处方，按ID降序排列。",
        "output": "match(a:prescription where (a.id is not null)) return a order by a.id desc limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有与user有关联的tag节点，其id为1。然后返回这些节点的id减去36的值的平均值，以及它们的value对608取余的结果的平均值。",
        "output": "match(a:user)-[e]->(b:tag where b.id = 1) return b.id - 36, AVG(b.value % 608)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找薪资为空或名字不是马思琪的person认识的person的名称,以及这些person 认识的person的名称",
        "output": "match(a:person where (a.salary is null) or a.name <> '马思琪')-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与学生杜若涵有关系的教师, 返回和这些教师有关联的课程的,价值加价值除21的最小值",
        "output": "match(a:student where a.name= '杜若涵')-[e]-(b:teacher)-[e2]-(c:course) return MIN((c.value + c.value) / 21)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Kafka的点的,变更文件数小于34或id大于等于5的朋友,返回这些朋友的变更文件数,和边的权重",
        "output": "match(a where a.name='Kafka')-[e:friend]->(b where b.changeFileNumber < 34 or b.id >= 5) return b.changeFileNumber,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为账号的点,返回28个",
        "output": "match(a:account) return a limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出seller以height,name,salary分组的gender, 根据gender升序排序",
        "output": "match(a:seller) return a.gender group by a.height, a.name, a.salary order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "归还由Light账户偿还的贷款",
        "output": "match(a:loan)<-[e:repay]-(b:account where b.name='Light') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为loan_40的贷款,以及与其有关的公司,并返回loan_40的id和这些公司的规格",
        "output": "match(a:loan where name = 'loan_40')-[e]-(b:company) return a.id, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点id大于4,名字是韩红且身高为空,边类型是回答,且满足条件f0不等于754,f0为空,或f1不是false的边,返回这些边的f0除990的求和值",
        "output": "match(a where a.id > 4 and a.name = '韩红' and (a.height is null))-[e:ask where (e.f0 <> 754 and (e.f0 is null)) or e.f1 <> false]->(b) return SUM(e.f0 / 990)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与八个被标记为城市节点的点存在包含关系的公司，以及与这些公司合作的大学。",
        "output": "match(a:city)-[e:contain]->(b:company)-[e2:cooperate]->(c:university) return c limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与论坛中国诗词论坛有关系的用户的性别",
        "output": "match(a:forum where a.name='中国诗词论坛')-[e]-(b:user) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,height,gender, 数据为(79,162,'famale'),(40,154,'famale'),(7,173,'famale'),(9,187,'famale')的子查询作为输入表, 以属性gender作为相等条件,返回全部和名为Bob的person有朋友关系,或有朋友的朋友关系的person",
        "output": "with p as (select * from (VALUES(79,162,'famale'),(40,154,'famale'),(7,173,'famale'),(9,187,'famale')) as t(age,height,gender))MATCH (a:person WHERE a.gender = p.gender AND (n.name = Bob)) -[e:friend ]->{1,2}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点满足条件名字是艺术学院,目标点满足条件性别等于famale且名字不等于孙红,或性别是famale,且类型是拥有的边",
        "output": "match(a where a.name = '艺术学院')-[e:has]->(b where (b.gender = 'famale' and b.name <> '孙红') or b.gender = 'famale') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与黄强有家人关系的所有人，再查询这些人中同时与这些人存在同事关系的点，最后返回这些点的年龄。",
        "output": "match(a where a.name = '黄强')-[e:family]->(b:person)-[e2:colleague]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询109个id为60或地址是C栋或名字不是UME的电影院,根据大小降序排列",
        "output": "match(a:cinema where a.id = 60 or a.address = 'C栋' or a.name <> 'UME') return a order by a.size desc limit 109",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以22作为输入调用SSSP函数,返回id, distance",
        "output": "Call SSSP(22) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为事项,目标点label为仓库,label为仓库或用户或合并请求的边",
        "output": "match(a:issue)-[e:repository | user | pullRequest]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表562,619,368, 以属性id作为相等条件,请帮我查找名为复旦大学的大学,以及与其有关的教师,并返回复旦大学的等级和这些教师的年龄",
        "output": "with p as (select * from (VALUES(562),(619),(368)) as t(id)) MATCH (a:university WHERE a.id = p.id AND (name = '复旦大学')) -[e ]-(b:teacher) RETURN a.level, b.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部标签为person的点",
        "output": "match(a:person) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否请你帮我找到名为Prescription_390的处方？",
        "output": "match(a:prescription where a.name = 'Prescription_390') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person的3跳以内的环",
        "output": "match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出陈伟的点认识的person,然后找出陈伟被关联的person,一起返回",
        "output": "match(a where a.name = '陈伟')-[e:knows]->(b:person),(a where a.name = '陈伟')<-[e2:relates]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点label为person,边label为支付的边,返回这些边的源点id加115的最小值,和权重减111.33减109加160.80除权重的最大值",
        "output": "match(a:person)-[e:pay]->(b) return MIN(e.srcId + 115), MAX((e.weight - 111.33 - 109 + 160.80) / e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与公司谷歌有关系的person的身高",
        "output": "match(a:company where a.name='谷歌')-[e]-(b:person) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与company有关系的person节点,且person节点的age在2到78之间,并返回这些person的id加47对156取余除2049减84的最小值,以及person的salary加6727的值",
        "output": "match(a:company)-[e]->(b:person where (b.age BETWEEN 2 AND 78)) return MIN(b.id + 47 % 156 / 2049 - 84), b.salary + 6727",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出大众影院上映的电影，返回电影标签和名称。",
        "output": "match(a:cinema where name = '大众影院')-[e:releases]->(b:film)-[e2:has]->(c:tag) return c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与马建国有关的人，并找出与马建国有关的所有公司。",
        "output": "match(a:person where a.name = '马建国')-[e]-(b:person), (a:person)-[e2:belong]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person支付的person, 令person(b)的身高的值等于喜欢person的person的id的求和值, 再查找person认识的person",
        "output": "match(a:person)-[e:pay]->(b:person) let b.height = SUM((b:person)<-[e2:likes]-(c:person) => c.id) match(b:person)-[e3:knows]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出与病人张科有关系的药品的权重",
        "output": "match(a:patient where a.name='张科')-[e]-(b:medicine) return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person周伟属于的公司节点雇佣的person",
        "output": "match(a:person where a.name = '周伟')-[e:belong]->(b:company)-[e2:employee]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,id,height, 数据为('male',13,167),('famale',56,190), 源点的height等于输入表height,查找与账号有关系的账号节点,且账号节点的是否冻结大于999,并返回这些点的id除74的值,以及价值减26的值",
        "output": "with p as (select * from (VALUES('male',13,167),('famale',56,190)) as t(gender,id,height))MATCH (a:account WHERE a.height = p.height) -[e ]->(b:account WHERE b.isBlock > 999) RETURN b.id / 74, b.value - 26 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以661,298,141,577,123作为请求点id, 源点的id等于输入表id,查找名为计算机网络和罪与罚的,label为书的点公共的引用节点的名单",
        "output": "with p as (select * from (VALUES(661),(298),(141),(577),(123)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.name = '计算机网络')) -[e:book_refers_book ]->(b) <-[e2:book_refers_book ]-(c:book WHERE c.name = '罪与罚') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出这个人所有的朋友，以及他们朋友的朋友。",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型是doctor的点有belong关系的department,且和这些department有has关系的doctor,且和这些doctor有diagnose关系的patient",
        "output": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:diagnose]->(d:patient) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出同时期在好视影院和大众影院上映的电影？",
        "output": "match(a where a.name = '好视影院')-[e:releases]->(b:film)<-[e2:releases]-(c where c.name = '大众影院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被论坛包含数量大于158的用户,记为relationCount,再查询这些用户包含的用户",
        "output": "match(a:user) let a.relationCount = SUM((a:user)<-[e:contain]-(b:forum) => b.id) match(a where a.relationCount > 158)-[e2:contain]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出153个名为中国科技大学的点has的类型为department的节点,且节点size为空",
        "output": "match(a where a.name='中国科技大学')-[e:has]->(b:department where (b.size is null)) return b limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与作者张梅有写作关系的书籍，以及与张梅有关联的作者。",
        "output": "match(a:author where a.name = '张梅')-[e:write]->(b:book),(a:author where a.name = '张梅')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询137个与王伟和吴若涵都存在关系的编辑节点",
        "output": "match(a where a.name='王伟')-[e]->(b:publisher)<-[e2]-(c where c.name='吴若涵') return b limit 137",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出同时与孙月和郑建国有关联的人名。",
        "output": "match(a:person where a.name='孙月')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='郑建国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点label为部门,目标点label为医生,label为部门或处方或病人的边",
        "output": "match(a:department)-[e:department | prescription | patient]->(b:doctor) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询34个名为字节的点cooperate的类型为university的节点,且节点value是673或id小于37",
        "output": "match(a where a.name='字节')-[e:cooperate]->(b:university where b.value = 673 or b.id < 37) return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与person张梅和person王雪有关联的人，并返回这些人的性别，身高和姓名。",
        "output": "match(a:person where a.name='张梅')-[e]->(b:person)<-[e2]-(c:person where c.name='王雪') return b.gender, b.height, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "size对size取余的值",
        "output": "a.size % a.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于person的点,返回175个",
        "output": "match(a:person) return a limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(48,197,81),(85,190,86),(60,156,27)作为请求表数据,属性分别为age,height,id, 源点的age等于输入表age,返回全部源点类型为student,边类型为student_selects_course,以及f0不是648或srcId大于等于127的边",
        "output": "with p as (select * from (VALUES(48,197,81),(85,190,86),(60,156,27)) as t(age,height,id))MATCH (a:student WHERE a.age = p.age) -[e:student_selects_course WHERE e.f0 <> 648 OR e.srcId >= 127 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有与买家或买家相关者有关的人。",
        "output": "match(a:buyer)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为深圳的点的,id大于等于97的friend,返回这些friend的peopleNumber,和边的targetId,f0,weight",
        "output": "match(a where a.name='深圳')-[e:friend]->(b where b.id >= 97) return b.peopleNumber,e.targetId, e.f0, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和cinema人人影城有关系的film或comment或cinema,返回这些点的name,value",
        "output": "match(a:cinema where a.name='人人影城')-[e]-(b:film | comment | cinema) return b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值除价值的值",
        "output": "a.value / a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与买家相关的订单节点，按价格和名称分组，并返回价格和名称。",
        "output": "match(a:buyer)-[e:creates]-(b:orders) return b.price, b.name group by b.price, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被订单Order_320包含的商品,和Order_320包含的商品",
        "output": "match(a:goods)<-[e:contain]-(b:orders where name = 'Order_320')-[e2:contain]->(c:goods) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询满足条件scale为medium或peopleNumber在850到951之间的节点",
        "output": "match(a where a.scale = 'medium' or (a.peopleNumber BETWEEN 850 AND 951)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和医生有关联的病人节点,并根据其身高,年龄分组,返回身高,年龄,以及id除15的值",
        "output": "match(a:doctor)-[e:diagnose]-(b:patient) return b.height, b.age, b.id / 15 group by b.height, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值乘id的值",
        "output": "MIN(a.id) * a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找knows person周梅relates的person,的person",
        "output": "match(a:person where name = '周梅')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和作家王梅有1度关系的书",
        "output": "match(a:author where a.name='王梅')-[e]->{1,1}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点salary不为空或height小于192或age不为空,边标签等于consult,且f1是true,f0小于803,weight不是111.42的边,返回这些边的weight减106.32对985取余的最小值",
        "output": "match(a where (a.salary is not null) or a.height < 192 or (a.age is not null))-[e:consult where e.f1 = true and e.f0 < 803 and e.weight <> 111.42]->(b) return MIN(e.weight - 106.32 % 985)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person张科有关系的person, 返回和这些person有关联的person的,年龄乘72的值",
        "output": "match(a:person where a.name= '张科')-[e]-(b:person)-[e2]-(c:person) return c.age * 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person认识的person, 令person(b)的薪资的值等于关联person的person的id的数量, 再查找person关联的person",
        "output": "match(a:person)-[e:knows]->(b:person) let b.salary = COUNT((b:person)<-[e2:relates]-(c:person) => c.id) match(b:person)-[e3:relates]->(d:person) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询在横店影院上映的电影",
        "output": "match(a:film)<-[e:releases]-(b:cinema where b.name='横店影院') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询198个和类型为读者的点有喜欢关系的书,以及和这些书有引用关系的书",
        "output": "match(a:reader)-[e:likes]->(b:book)-[e2:refers]->(c:book) return c limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和person陈国强之间有父母关系的person",
        "output": "match(a:person where a.name='陈国强')-[e:parent]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与post Post_451有关系的user的gender",
        "output": "match(a:post where a.name='Post_451')-[e]-(b:user) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与周若涵和周红都有关联的同事",
        "output": "match(a:person where a.name='周若涵')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='周红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高升序排列，买家类型查询。",
        "output": "match(a:buyer) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为北京大学的节点合作的城市或国家",
        "output": "match(a where a.name='北京大学')-[e:cooperate]->(b:city | country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与阿里巴巴有关系，并且位于杭州的城市节点，返回这些城市的人员数量、面积和价值。",
        "output": "match(a:company where a.name='阿里')-[e]->(b:city)<-[e2]-(c:city where c.name='杭州') return b.peopleNumber, b.area, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与吴科有联系的人。",
        "output": "match(a:person where a.name='吴科')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以76作为输入,返回id, distance",
        "output": "Call SSSP(76) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id的最大值减44的值",
        "output": "return MAX(a.id) - 44 group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为81的买家有关的卖家的伙伴, 再查找和卖家有关系的朋友",
        "output": "match(a:buyer where id = 81)-[e]-(b:seller)-[e2:partner]->(c), (b:seller)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person吴思琪之间有knows关系的person",
        "output": "match(a:person where a.name='吴思琪')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点名字为美团或价值小于703,且价值不为空,边类型为申请,且f0不为空或f0为591或f0加919的求和值小于等于192.73的边,返回这些边的目标点id除127的值",
        "output": "match(a where (a.name = '美团' or a.value < 703) and (a.value is not null))-[e:apply where (e.f0 is not null) or e.f0 = 591 or SUM(e.f0 + 919) <= 192.73]->(b) return e.targetId / 127",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表316,217,973,99,903, 以属性id作为相等条件,请帮我找出标签为post_has_tag,且源点id的最小值不是155的边",
        "output": "with p as (select * from (VALUES(316),(217),(973),(99),(903)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:post_has_tag WHERE MIN(e.srcId) <> 155 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person Tom的类型为伙伴的边,并根据f1升序排列,返回160个",
        "output": "match(a:person where a.name = 'Tom')-[e:partner]->(b) return b order by e.f1 asc limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 让郑伟喜欢的评论是什么？",
        "output": "match(a:comment)<-[e:likes]-(b:person where b.name='郑伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person黄雪有关,且与person郑国强有关系的person节点",
        "output": "match(a:person where a.name='黄雪')-[e:colleague]-(b:person)-[e2:parent]-(c:person where c.name='郑国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询与Alice认识的人有关联的其他人的数量。",
        "output": "match(a:person where a.name='Alice')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签等于处方的点,返回22个",
        "output": "match(a:prescription) return a limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为郑梅的,身高小于等于170或id的和大于等于196的朋友,返回这些朋友的id,和边的权重,源点id",
        "output": "match(a where a.name='郑梅')-[e:friend]->(b where b.height <= 170 or SUM(b.id) >= 196) return b.id,e.weight, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为清华大学的点合作的公司",
        "output": "match(a where a.name='清华大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与名为郑建聪和孙轩的点共同喜欢的,标签为person的节点",
        "output": "match(a where a.name = '郑建聪')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '孙轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前25个满足条件人数在622到941之间或规格不是medium的公司",
        "output": "match(a:company where (a.peopleNumber BETWEEN 622 AND 941) or a.scale <> 'medium') return a limit 25",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是读者的点,返回61个",
        "output": "match(a:reader) return a limit 61",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询电影建国大业的全部朋友,的权重乘113.83减134的最小值",
        "output": "match(a:film where a.name= '建国大业')-[e:friend]->(b) return MIN(e.weight * 113.83 - 134)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(3,3983,'李建聪')作为请求表数据,属性分别为id,salary,name, 以属性id作为相等条件,请帮我查找person何科 pay的person,返回person knows的person的id减57的值 ",
        "output": "with p as (select * from (VALUES(3,3983,'李建聪')) as t(id,salary,name))MATCH (a:person WHERE a.id = p.id AND (name = '何科')) -[e:person_pay_person ]->(b:person) -[e2:person_knows_person ]->(c:person) RETURN c.id - 57 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person韩月有关,且与person孙思思有关系的person节点",
        "output": "match(a:person where a.name='韩月')-[e:knows]-(b:person)-[e2:knows]-(c:person where c.name='孙思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部经管学院的点has的teacher,然后找出经管学院被has的university,一起返回",
        "output": "match(a where a.name = '经管学院')-[e:has]->(b:teacher),(a where a.name = '经管学院')<-[e2:has]-(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为孙轩的点认识的person",
        "output": "match(a where a.name='孙轩')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有拥有传染部的医生，并找出医生与处方之间的关联，然后返回这些关联的权重。",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和商品短袖有关的订单,称为X,再请帮我找出和这个X有关联的其他订单,以及和X有关联的商品",
        "output": "match(a:goods where a.name = '短袖')-[e]-(b:orders), (b:orders)-[e2]-(c:orders),(b:orders)-[e3]-(d:goods) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回id为11的点的名字,性别",
        "output": "match(a where a.id = '11') return a.name, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(4181,153,38),(6678,193,57),(3220,166,54),(4721,161,92)作为请求表数据,属性分别为salary,height,id, 以属性id作为相等条件,找出和person杜思琪有关的person,再找出和杜思琪person_likes_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(4181,153,38),(6678,193,57),(3220,166,54),(4721,161,92)) as t(salary,height,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '杜思琪')) -[e ]-(b:person) , (a:person) -[e2:person_likes_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为中国科技大学和复旦大学的,标签为university的点公共的relation节点的名单",
        "output": "match(a:university where a.name='中国科技大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='复旦大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为韩雪的,salary在5217到6933之间的partner,返回这些partner的height,和边的srcId,f0",
        "output": "match(a where a.name='韩雪')-[e:partner]->(b where (b.salary BETWEEN 5217 AND 6933)) return b.height,e.srcId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,peopleNumber,scale分组,计算peopleNumber乘670的个数",
        "output": "return COUNT(a.peopleNumber * 670) group by a.id, a.peopleNumber, a.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person likes的person,返回其源点的age除3的值,以及目标点的height减181的最大值",
        "output": "match(a:person)-[e:likes]->(b:person) return a.age / 3, MAX(b.height - 181)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出4个和类型是person的点有lover关系的person,以及和这些person有friend关系的person",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person) return c limit 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有医生节点，并找到它们的所有属于边，然后计算所有目标节点ID的总和并取最小值，最后计算源节点ID除以156取余的值。",
        "output": "match(a:doctor)-[e:belong]->(b) return MIN(SUM(e.targetId) / e.targetId), e.srcId % 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为杜红和吴强的,类型是读者的点公共的相关者节点的名单",
        "output": "match(a:reader where a.name='杜红')-[e:relation]->(b)<-[e2:relation]-(c:reader where c.name='吴强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我找出李国强医生所在的部门。",
        "output": "match(a:department)<-[e:belong]-(b:doctor where b.name='李国强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的平均值加8423的平均值",
        "output": "AVG(AVG(a.salary) + 8423)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有商品的价格对1828.89取余的值",
        "output": "match(a:goods) return a.price % 1828.89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person周雪认识的person, 令person的名字等于person的身高减160,令person(a)的年龄等于person(b)的年龄的最大值, 返回person(a)的性别, person(b)的年龄",
        "output": "match(a:person where a.name='周雪')-[e:knows]->(b:person) let b.name = b.height - 160,let a.age = MAX(b.age) return a.gender,b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出和公司标签为'company'的点有创建关系的软件，以及这些软件使用的其他软件，以及这些软件使用的其他软件。",
        "output": "match(a:company)-[e:creates]->(b:software)-[e2:uses]->(c:software)-[e3:uses]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点label为person,目标点label为person,label为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person孙思琪关联的person,和孙思琪认识的person",
        "output": "match(a:person)<-[e:relates]-(b:person where name = '孙思琪')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以196作为请求点id, 以属性id作为相等条件,返回与名为微软和阿里的点共同cooperate的,标签等于university的节点",
        "output": "with p as (select * from (VALUES(196)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '微软')) -[e:company_cooperate_university ]->(b:university) <-[e2:company_cooperate_university ]-(c WHERE c.name = '阿里') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为黄宏的点selects的所有course,并对这些course的value进行求和",
        "output": "match(a where a.name='黄宏')-[e:selects]->(b:course) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出137个病人点的处方，并找出包含这些药品的处方。",
        "output": "match(a:patient)-[e:accept]->(b:prescription)-[e2:contain]->(c:medicine) return c limit 137",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是has,以及weight大于等于161.85或srcId在131到133之间或weight为空的边",
        "output": "match(a)-[e:has where e.weight >= 161.85 or (e.srcId BETWEEN 131 AND 133) or (e.weight is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点满足条件gender不是male或age大于83,目标点满足条件value大于568,lang是Japanese,且类型是publish的边",
        "output": "match(a where a.gender <> 'male' or a.age > 83)-[e:publish]->(b where b.value > 568 and b.lang = 'Japanese') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为91的学生有关的课程的相关者, 再请帮我查找和课程有关系的相关者",
        "output": "match(a:student where id = 91)-[e]-(b:course)-[e2:relation]->(c), (b:course)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找120个repository Tugraph和XXRepo,共同的partner",
        "output": "match(a:repository where a.name='Tugraph')-[e:partner]->(b)<-[e2:partner]-(c:repository where c.name='XXRepo') return b limit 120",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找63个星数大于等于22或id为空的仓库,根据创建时间从大到小排列",
        "output": "match(a:repository where a.stars >= 22 or (a.id is null)) return a order by a.createTime desc limit 63",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为147的点的id",
        "output": "match(a where a.id = 147) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生孙思琪的标签等于朋友的边,并根据f0降序排列,返回162个",
        "output": "match(a:doctor where a.name = '孙思琪')-[e:friend]->(b) return b order by e.f0 desc limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找用户的朋友,或其朋友的朋友",
        "output": "match(a:user)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和buyer周红有2度关系的seller",
        "output": "match(a:buyer where a.name='周红')-[e]->{2,2}(b:seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是person的点,返回151个",
        "output": "match(a:person) return a limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找论坛包含的用户,返回其源点的价值加892的数量,以及目标点的薪资对1973取余的值",
        "output": "match(a:forum)-[e:contain]->(b:user) return COUNT(a.value + 892), b.salary % 1973",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与department内科存在has关系,且与department眼科存在belong关系的doctor节点，返回这些doctor的id,及department内科的weight,及department眼科的weight",
        "output": "match(a:department where a.name='内科')-[e:has]->(b:doctor)<-[e2:belong]-(c:department where c.name='眼科') return a.weight,b.id,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出163个订单Order_108和Order_212,共同的相关者",
        "output": "match(a:orders where a.name='Order_108')-[e:relation]->(b)<-[e2:relation]-(c:orders where c.name='Order_212') return b limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有和城市点有属于关系的国家节点,且边满足条件权重大于等于103.36,目标国家节点满足条件面积的数量小于等于875",
        "output": "match(a:city)-[e:city_belong_country where e.weight >= 103.36]->(b:country where COUNT(b.area) <= 875) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈梅买了其他公司创建的软件的数量。",
        "output": "match(a:person where a.name='陈梅')-[e:buy]->(b:software)<-[e2:creates]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和公司蚂蚁集团有3到6跳关系的软件",
        "output": "match(a:company where a.name='蚂蚁集团')-[e]->{3,6}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'RI', 34, 'By'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('RI', 34, 'By') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点年龄的和是23或id小于等于51或名字不等于李思思,边标签为认识,且满足条件目标点id小于等于164的边,返回这些边的f0的最小值减862乘50除545减507的值",
        "output": "match(a where SUM(a.age) = 23 or a.id <= 51 or a.name <> '李思思')-[e:knows where e.targetId <= 164]->(b) return (MIN(e.f0) - 862) * 50 / 545 - 507",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为徐月的病人信息",
        "output": "match(a:patient where a.name = '徐月') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为137的软件有关的公司的伙伴, 再返回和公司有关系的相关者",
        "output": "match(a:software where id = 137)-[e]-(b:company)-[e2:partner]->(c), (b:company)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型是帖子,目标点类型是标签,类型是用户或论坛的边",
        "output": "match(a:post)-[e:user | forum]->(b:tag) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询从浙江大学出发，沿着标签为拥有的边走1到3度，到达哪个部门点。",
        "output": "match(a:university where a.name='浙江大学')-[e:has]->{1,3}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找类型为buyer_look_goods,以及权重不为空且f0不等于139且目标点id在108到145之间的边",
        "output": "match(a)-[e:buyer_look_goods where (e.weight is not null) and e.f0 <> 139 and (e.targetId BETWEEN 108 AND 145)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和标签等于company的点有belong关系的city,且和这些city有contain关系的university,且和这些university有cooperate关系的company",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:university)-[e3:cooperate]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有名为loan_18的节点deposit的loan或account或person",
        "output": "match(a where a.name='loan_18')-[e:deposit]->(b:loan | account | person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和account XiaoHu之间有repay关系的loan",
        "output": "match(a:account where a.name='XiaoHu')-[e:repay]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点标签等于doctor,边标签等于creates,且srcId大于等于23或f1小于等于99的边",
        "output": "match(a:doctor)-[e:creates where e.srcId >= 23 or e.f1 <= 99]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有film的friend，或者它们的朋友",
        "output": "match(a:film)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与仓库FSM和JavaGuid都存在拥有关系的点",
        "output": "match(a:repository where a.name='FSM')-[e:has]->(b)<-[e2:has]-(c:repository where c.name='JavaGuid') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出急诊部门拥有的医生数量，与其他部门拥有的医生数量进行比较。",
        "output": "match(a:department where a.name='急诊部')-[e:has]->(b:doctor)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(6844,73,'famale'),(9336,59,'famale')作为请求表数据,属性分别为salary,id,gender, 以属性gender作为相等条件,找出所有和course程序设计有关系的course节点,返回这些点的value,name,courseHour",
        "output": "with p as (select * from (VALUES(6844,73,'famale'),(9336,59,'famale')) as t(salary,id,gender))MATCH (a:course WHERE a.gender = p.gender AND (a.name = '程序设计')) -[e ]-(b:course) RETURN b.value, b.name, b.courseHour ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与论坛相关的人，或者找到他们相关的人的联系方式。",
        "output": "match(a:forum)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除65的值",
        "output": "a.id / 65",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出和company有关联的software节点,并根据其value,openSource分组,返回value,openSource,以及stars除779的值",
        "output": "match(a:company)-[e:company_creates_software]-(b:software) return b.value, b.openSource, b.stars / 779 group by b.value, b.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出读者周月喜欢的书,被其他读者喜欢的数量",
        "output": "match(a:reader where a.name='周月')-[e:likes]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "age加58的值",
        "output": "a.age + 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查询从深圳出发，经过边的标签包含，且跳数在2到5之间的公司点",
        "output": "match(a:city where a.name='深圳')-[e:contain]->{2,5}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找knows person郑伟的person,和这些person family的person",
        "output": "match(a:person where name = '郑伟')<-[e:knows]-(b:person)-[e2:family]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询前191个类型是person_family_person的边",
        "output": "match(a)-[e:person_family_person]->(b) return e limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与韩梅有关联的处方，包括她开具的和她接受的。",
        "output": "match(a:patient where a.name = '韩梅')-[e:accept]->(b:prescription),(a:patient where a.name = '韩梅')<-[e2:accept]-(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型是仓库的点,并根据权重从大到小排列",
        "output": "match(a:repository) return a order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为阿里的点的,id不等于47或金额小于3360.17的相关者,返回这些相关者的id,和边的源点id,目标点id",
        "output": "match(a where a.name='阿里')-[e:relation]->(b where b.id <> 47 or b.amount < 3360.17) return b.id,e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点createTime不是2029年02月18日且createTime不是2003年03月08日,或id不等于50,边类型为contain,且满足条件weight不等于198.80,targetId的最大值等于739,srcId在114到131之间的边,返回这些边的srcId减69的最大值",
        "output": "match(a where (a.createTime <> '2029-02-18' and a.createTime <> '2003-03-08') or a.id <> 50)-[e:contain where e.weight <> 198.80 and MAX(e.targetId) = 739 and (e.srcId BETWEEN 114 AND 131)]->(b) return MAX(e.srcId - 69)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询赵建聪点支付的人和喜欢赵建聪的人，返回两个人。",
        "output": "match(a where a.name = '赵建聪')-[e:pay]->(b:person),(a where a.name = '赵建聪')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表560,883,420,465,258, 以属性id作为相等条件,找出所有id为70的goods关联的goods,和以has关系关联了这些goods的其他seller",
        "output": "with p as (select * from (VALUES(560),(883),(420),(465),(258)) as t(id)) MATCH (a:goods WHERE a.id = p.id AND (a.id = '70')) -[e ]-(b:goods) <-[e2:seller_has_goods ]-(c:seller) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为赵月的用户,以及与其有关的person,并返回赵月的性别和这些person的id",
        "output": "match(a:user where name = '赵月')-[e]-(b:person) return a.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从公司Bilibili出发,经过标签等于雇佣的边,走3跳到达的person点",
        "output": "match(a:company where a.name='Bilibili')-[e:employee]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,age,height, 数据为('孙伟',36,189),('吴红',70,171),('张强',13,161)的子查询作为输入表, 以属性name作为相等条件,返回178个与张科和陈轩都存在关系的部门节点",
        "output": "with p as (select * from (VALUES('孙伟',36,189),('吴红',70,171),('张强',13,161)) as t(name,age,height))MATCH (a WHERE a.name = p.name AND (a.name = '张科')) -[e ]->(b:department) <-[e2 ]-(c WHERE c.name = '陈轩') RETURN b LIMIT 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被书认识数量大于17的书,记为relationCount,再查询这些书关联的作家",
        "output": "match(a:book) let a.relationCount = MIN((a:book)<-[e:knows]-(b:book) => b.id) match(a where a.relationCount > 17)-[e2:relates]->(c:author) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前144个满足条件size小于等于471的cinema",
        "output": "match(a:cinema where a.size <= 471) return a limit 144",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与王强和张建聪有关联的人，并标注为'person'标签。",
        "output": "match(a:person where a.name='王强')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='张建聪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和公司点有申请关系的贷款节点,且边满足条件f0为空,目标贷款节点满足条件权重大于等于414",
        "output": "match(a:company)-[e:apply where (e.f0 is null)]->(b:loan where b.weight >= 414) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('male',1045,'陈宏'),('male',6384,'王月'),('famale',6712,'徐建聪')作为请求表数据,属性分别为gender,salary,name, 源点的salary等于输入表salary,帮我查询与medicine999感冒灵有关系的doctor, 返回和这些doctor有关联的medicine的,id减id的最大值",
        "output": "with p as (select * from (VALUES('male',1045,'陈宏'),('male',6384,'王月'),('famale',6712,'徐建聪')) as t(gender,salary,name))MATCH (a:medicine WHERE a.salary = p.salary AND (a.name = '999感冒灵')) -[e ]-(b:doctor) -[e2 ]-(c:medicine) RETURN MAX(c.id - c.id) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有与李红存在person_likes_comment关系的comment,comment与film存在comment_belong_film关系的点,返回这些点的name",
        "output": "match(a where a.name = '李红')-[e:person_likes_comment]->(b:comment)-[e2:comment_belong_film]->(c:film) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和名为杜若涵的patient有friend关系,或有friend的friend关系的prescription",
        "output": "match(a:patient where n.name=杜若涵)-[e:friend]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为loan_38的账号或贷款,以及与其有关的公司,并返回loan_38的id和这些公司的规格",
        "output": "match(a:account | loan where name = 'loan_38')-[e]-(b:company) return a.id, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询标签为贷款的全部点,并根据金额降序排列",
        "output": "match(a:loan) return a order by a.amount desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与seller有关系的orders节点,且orders节点的id小于16,并返回这些orders的price对2522.56取余的数量,以及orders的value的最大值减916减3932.94的值",
        "output": "match(a:seller)-[e]->(b:orders where b.id < 16) return COUNT(b.price % 2522.56), MAX(b.value) - 916 - 3932.94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 杜伟和何若涵共同创建了评论节点。",
        "output": "match(a where a.name = '杜伟')-[e:creates]->(b:comment)<-[e2:creates]-(c where c.name = '何若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和university浙江大学有关的country,再帮我查询和浙江大学cooperate的其他company,返回它们",
        "output": "match(a:university where a.name = '浙江大学')-[e]-(b:country), (a:university)-[e2:cooperate]->(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary的平均值除3563的数量",
        "output": "COUNT(AVG(a.salary) / 3563)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表363, 源点的id等于输入表id,请帮我找出从订单Order_345出发,经过类型是orders_contain_goods的边,走3跳到达的商品点",
        "output": "with p as (select * from (VALUES(363)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_345')) -[e:orders_contain_goods ]->{3,3}(b:goods) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查找由周雪医生诊治过的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='周雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点价值大于等于317,边类型是拥有,且源点id大于170或源点id大于等于125,且f1为true的边,返回这些边的源点id除93的求和值",
        "output": "match(a where a.value >= 317)-[e:has where (e.srcId > 170 or e.srcId >= 125) and e.f1 = true]->(b) return SUM(e.srcId / 93)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person郑建国有person_colleague_person关系的person,再请帮我找出以person_colleague_person关系关联了郑建国的person",
        "output": "match(a:person where a.name = '郑建国')-[e:person_colleague_person]->(b:person),(a:person where a.name = '郑建国')<-[e2:person_colleague_person]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,name,gender, 数据为(2476,'孙若涵','famale'), 源点的salary等于输入表salary,返回id为151的publisher有关的book的refers, 再返回和book有关系的refers",
        "output": "with p as (select * from (VALUES(2476,'孙若涵','famale')) as t(salary,name,gender))MATCH (a:publisher WHERE a.salary = p.salary AND (id = '151')) -[e ]-(b:book) -[e2:book_refers_book ]->(c) , (b:book) -[e3:book_refers_book ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点gender不等于male且height大于195,目标点gender等于male且id不是6518,age为空,且label为knows的边",
        "output": "match(a where a.gender <> 'male' and a.height > 195)-[e:knows]->(b where b.gender = 'male' and b.id <> 6518 and (b.age is null)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有person的朋友,或其朋友的朋友",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与贷款loan_96有关,且与账号Faker有关系的账号节点",
        "output": "match(a:loan where a.name='loan_96')-[e:deposit]-(b:account)-[e2:transfer]-(c:account where c.name='Faker') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和软件Mysql有关系的软件,返回这些点的年龄",
        "output": "match(a:software where a.name='Mysql')-[e]-(b:software) return b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出中国军事论坛。",
        "output": "match(a:forum where a.name = '中国军事论坛') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按价值从小到大，返回所有根据账号和id分组后的价值。",
        "output": "match(a:account) return a.value group by a.value, a.id order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,身高,性别分组,计算薪资加8856的最小值",
        "output": "return MIN(a.salary + 8856) group by a.id, a.height, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出订单包含的商品,返回其源点的价格对1609.48取余的值,以及目标点的sellerNumber的数量加688.54的最大值",
        "output": "match(a:orders)-[e:contain]->(b:goods) return a.price % 1609.48, MAX(COUNT(b.sellerNumber) + 688.54)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表606,790, 源点的id等于输入表id,查询源点name是天津或id的最小值乘24小于等于28,且id不为空,边类型为city_contain_university,且满足条件targetId大于等于45或f0大于20,且f1等于true的边,返回这些边的weight除143.84的值",
        "output": "with p as (select * from (VALUES(606),(790)) as t(id)) MATCH (a WHERE a.id = p.id AND ((a.name = '天津' OR MIN(a.id) * 24 <= 28) AND a.id IS NOT NULL)) -[e:city_contain_university WHERE (e.targetId >= 45 OR e.f0 > 20) AND e.f1 = TRUE ]->(b) RETURN e.weight / 143.84 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有公司的相关者,或其相关者的相关者",
        "output": "match(a:company)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,address,weight, 数据为(79,'C栋',267)的子查询作为输入表, 以属性address作为相等条件,请帮我找出label为department的点,并根据name升序排列",
        "output": "with p as (select * from (VALUES(79,'C栋',267)) as t(id,address,weight))MATCH (a:department WHERE a.address = p.address) RETURN a ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回70个名为北京的点包含的标签等于公司的节点,且其规格不等于medium或规格不是large",
        "output": "match(a where a.name='北京')-[e:contain]->(b:company where b.scale <> 'medium' or b.scale <> 'large') return b limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person王雪knows的person,以及knows这些person的person",
        "output": "match(a:person where name = '王雪')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有标签为repository或issue或pullRequest的点",
        "output": "match(a:repository | issue | pullRequest) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表923,592,929, 以属性id作为相等条件,给出doctor赵强creates的prescription,被其他doctor creates的数量",
        "output": "with p as (select * from (VALUES(923),(592),(929)) as t(id)) MATCH (a:doctor WHERE a.id = p.id AND (a.name = '赵强')) -[e:doctor_creates_prescription ]->(b:prescription) <-[e2:doctor_creates_prescription ]-(c:doctor) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回gender为male或gender大于47的person relates的person的名称,以及这些person knows的person的名称",
        "output": "match(a:person where a.gender = 'male' or a.gender > 47)-[e:relates]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前179个满足条件名字不等于Bilibili,规格不等于medium的公司",
        "output": "match(a:company where a.name <> 'Bilibili' and a.scale <> 'medium') return a limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询author的三角的环,边label为write, 并返回这些点的id",
        "output": "match(a:author)-[e:write]->(b)-[e2:write]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询张梅和韩若涵的公共相关者节点，标签为'person'。",
        "output": "match(a:person where a.name='张梅')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='韩若涵') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与买家黄轩存在取消关系，且商品短袖包含的订单，返回订单价值、名称、买家黄轩ID和商品短袖价值。",
        "output": "match(a:buyer where a.name='黄轩')-[e:cancel]->(b:orders)<-[e2:contain]-(c:goods where c.name='短袖') return a.id,b.value, b.name,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以78,294,678作为请求点id, 以属性id作为相等条件,给出全部和person韩思琪有关系的person节点,返回这些点的id,name",
        "output": "with p as (select * from (VALUES(78),(294),(678)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩思琪')) -[e ]-(b:person) RETURN b.id, b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签为buyer的点有consult关系的seller,并且和这些seller有ask关系的buyer,并且和这些buyer有look关系的goods",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:look]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与谷歌有合作关系的大学，再找出与这些大学有合作关系或位于这些大学附近的城市。",
        "output": "match(a:company where a.name = '谷歌')-[e:cooperate]->(b:university),(a:company where a.name = '谷歌')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为software的点,返回52个",
        "output": "match(a:software) return a limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,名字分组,计算id除62的最小值",
        "output": "return MIN(a.id / 62) group by a.age, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是课程的点有属于关系的部门,并且和这些部门有拥有关系的学生,并且和这些学生有选择关系的课程",
        "output": "match(a:course)-[e:belong]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以18作为请求点id, 源点的id等于输入表id,帮我查询和电影星际穿越有关的标签,再帮我查询和星际穿越film_has_tag的其他标签,返回它们",
        "output": "with p as (select * from (VALUES(18)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '星际穿越')) -[e ]-(b:tag) , (a:film) -[e2:film_has_tag ]->(c:tag) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person拥有的账号,返回其源点的id加10加91除年龄加6061的和,以及目标点的id对31取余除427的值",
        "output": "match(a:person)-[e:own]->(b:account) return SUM((a.id + 10 + 91) / a.age + 6061), b.id % 31 / 427",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找同时与Post_361和Post_321有has关系的点。",
        "output": "match(a:post where a.name='Post_361')-[e:has]->(b)<-[e2:has]-(c:post where c.name='Post_321') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找读者王强喜欢的书, 令读者的价格等于书的创建时间, 返回读者的名字, 书的创建时间",
        "output": "match(a:reader where a.name='王强')-[e:likes]->(b:book) let a.price = b.createTime return a.name,b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出孙建聪的朋友们的朋友",
        "output": "match(a:patient where a.name='孙建聪')-[e:relation]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出陈伟的关联人，再找出陈伟父母的其他关联人。",
        "output": "match(a:person where a.name = '陈伟')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与部门急诊部有关系的部门的id",
        "output": "match(a:department where a.name='急诊部')-[e]-(b:department) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以53, 'Tt', 29作为输入调用pageRank函数,返回运算结果",
        "output": "Call PAGERANK(53, 'Tt', 29) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为李宏的作家",
        "output": "match(a:author where a.name = '李宏') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询类型为部门的所有点,并根据名字降序排列",
        "output": "match(a:department) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点类型为person、边类型为pay的边，返回这些边的srcId乘以80再加上115.08再加上srcId的总和，以及targetId的最小值加上targetId的值。",
        "output": "match(a:person)-[e:pay]->(b) return SUM(e.srcId * 80 + 115.08 + e.srcId), MIN(e.targetId) + e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于药品,名为阿司匹林的点,返回这些点的id,权重",
        "output": "match(a:medicine where a.name = '阿司匹林') return a.id, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点label为病人,边label为接受的边,返回这些边的源点id除8的值,和targetId的最大值减2的值",
        "output": "match(a:patient)-[e:accept]->(b) return e.srcId / 8, MAX(e.targetId) - 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "将公司作为源点，大学作为目标点，并且类型为合作的边。",
        "output": "match(a:company)-[e:cooperate]->(b:university) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为93的医生诊断的病人, 并将病人有关的处方的名字的数量赋值给病人的身高, 接着查询病人的身高小于93的病人接受的处方",
        "output": "match(a:doctor where a.id = 93)-[e:diagnose]->(b:patient) let b.height = COUNT((b:patient)-[e2]-(c:prescription) => c.name) match(b:patient where b.height < 93)-[e3:accept]->(d:prescription) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出has issue ISSUE-390的repository,和这些repository has的pullRequest",
        "output": "match(a:issue where name = 'ISSUE-390')<-[e:has]-(b:repository)-[e2:has]->(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为张若涵和韩红的,标签等于买家的点公共的伙伴节点的名单",
        "output": "match(a:buyer where a.name='张若涵')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='韩红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person杜梅有关的cinema,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的tag",
        "output": "match(a:person where a.name = '杜梅')-[e]-(b:cinema), (b:cinema)-[e2]-(c:person),(b:cinema)-[e3]-(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出韩国合作伙伴的朋友关系",
        "output": "match(a:country where a.name='韩国')-[e:partner]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为Mysql和Geaflow的点共同uses的,标签为software的节点",
        "output": "match(a where a.name = 'Mysql')-[e:uses]->(b:software)<-[e2:uses]-(c where c.name = 'Geaflow') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前183个满足条件创建时间不等于2001年03月26日或名字为PR-379或id为空的合并请求",
        "output": "match(a:pullRequest where a.createTime <> '2001-03-26' or a.name = 'PR-379' or (a.id is null)) return a limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为162的点的身高",
        "output": "match(a where a.id = 162) return a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level,name分组,计算id加56的求和值",
        "output": "return SUM(a.id + 56) group by a.level, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与'呐喊'和'孤城'相关的，且标签为'book'的节点",
        "output": "match(a where a.name = '呐喊')-[e:relates]->(b:book)<-[e2:relates]-(c where c.name = '孤城') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找标签为person,名为孙雪的点,返回这些点的薪资,身高",
        "output": "match(a:person where a.name = '孙雪') return a.salary, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表264,913,891, 以属性id作为相等条件,找出源点name是何思思,边label为person_own_account,且满足条件targetId不是134且f1为true,f0等于60的边,返回这些边的f0加f0的个数",
        "output": "with p as (select * from (VALUES(264),(913),(891)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '何思思')) -[e:person_own_account WHERE e.targetId <> 134 AND e.f1 = TRUE AND e.f0 = 60 ]->(b) RETURN COUNT(e.f0 + e.f0) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点满足条件stars大于879,目标点满足条件id在28到98之间且stars不是671,且类型为uses的边",
        "output": "match(a where a.stars > 879)-[e:uses]->(b where (b.id BETWEEN 28 AND 98) and b.stars <> 671) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出同时是'王建国'和'张雪'朋友的人名列表。",
        "output": "match(a:person where a.name='王建国')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='张雪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,size,id, 数据为('横店影院',501,4)的子查询作为输入表, 源点的name等于输入表name,请帮我找出以观看关系关联了电影西虹市首富的person",
        "output": "with p as (select * from (VALUES('横店影院',501,4)) as t(name,size,id))MATCH (a:film WHERE a.name = p.name AND (a.name = '西虹市首富')) <-[e:person_watch_film ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出投资了Bilibili公司的人。",
        "output": "match(a:company where a.name='Bilibili')<-[e:invest]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到标签为'orders'的所有点，然后按值从小到大地排序。",
        "output": "match(a:orders) return a order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为179的person的恋人，再帮我找出与该person相关的同事。",
        "output": "match(a:person where id = '179')-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:colleague]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和label为公司的点有属于关系的城市,以及和这些城市有包含关系的大学,以及和这些大学有合作关系的公司",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:university)-[e3:cooperate]->(d:company) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有名为马国强的点selects的course",
        "output": "match(a where a.name='马国强')-[e:student_selects_course]->(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和label为person的点有喜欢关系的评论,且和这些评论有属于关系的电影,且和这些电影有拥有关系的标签",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(2059,16,'吴建聪'),(9498,37,'徐雪')作为请求表数据,属性分别为salary,age,name, 源点的name等于输入表name,帮我查询标签为person的所有点,并根据id从大到小排列",
        "output": "with p as (select * from (VALUES(2059,16,'吴建聪'),(9498,37,'徐雪')) as t(salary,age,name))MATCH (a:person WHERE a.name = p.name) RETURN a ORDER BY a.id DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为微软的公司,以及与其有关的贷款,并返回微软的规格和这些贷款的id",
        "output": "match(a:company where name = '微软')-[e]-(b:loan) return a.scale, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出与person张雪存在person_knows_person关系,且与person周梅存在person_likes_person关系的person节点，返回这些person的id,年龄,性别,及person张雪的身高,及person周梅的身高",
        "output": "match(a:person where a.name='张雪')-[e:person_knows_person]->(b:person)<-[e2:person_likes_person]-(c:person where c.name='周梅') return a.height,b.id, b.age, b.gender,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被用户杜伟发布的帖子,和杜伟喜欢的帖子",
        "output": "match(a:post)<-[e:publish]-(b:user where name = '杜伟')-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出三个属于公司的城市，以及包含这些城市的公司。",
        "output": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:company) return c limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的身高乘身高的平均值",
        "output": "match(a:user) return AVG(a.height * a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部id为98的person关联的person,和以relates关系关联了这些person的其他person",
        "output": "match(a:person where a.id = '98')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与seller郑雪有关系的goods的sellerNumber",
        "output": "match(a:seller where a.name='郑雪')-[e]-(b:goods) return b.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为93的film相关的person的朋友，再找出这些朋友中与person有关系的人。",
        "output": "match(a:film where id = '93')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关系的评论节点,且评论节点的名字不是Comment_345,并返回这些评论的id对id取余的最大值,以及评论的id乘29的最大值",
        "output": "match(a:person)-[e]->(b:comment where b.name <> 'Comment_345') return MAX(b.id % b.id), MAX(b.id * 29)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前113个标签等于creates的边",
        "output": "match(a)-[e:creates]->(b) return e limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为生物学院的节点拥有的部门",
        "output": "match(a where a.name='生物学院')-[e:has]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Tugraph的仓库,以及与其有关的仓库,并返回Tugraph的创建时间和这些仓库的名字",
        "output": "match(a:repository where name = 'Tugraph')-[e]-(b:repository) return a.createTime, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找周轩节点下的pay person。",
        "output": "match(a:person where a.name = '周轩')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为蚂蚁集团的点belong的city,并对这些点的value进行求和",
        "output": "match(a where a.name='蚂蚁集团')-[e:company_belong_city]->(b:city) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找满足条件id大于等于66或名字不等于PR-284或创建时间不等于2016年07月04日的节点",
        "output": "match(a where a.id >= 66 or a.name <> 'PR-284' or a.createTime <> '2016-07-04') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为110的大学属于的城市, 并将城市有关的公司的规格的最小值赋值给城市的名字, 接着查询城市的名字小于110的城市包含的大学",
        "output": "match(a:university where a.id = 110)-[e:belong]->(b:city) let b.name = MIN((b:city)-[e2]-(c:company) => c.scale) match(b:city where b.name < 110)-[e3:contain]->(d:university) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person郑红关联的person,以及关联这些person的person, 令person(c)的id等于person(a)的薪资加2969乘3273,令person(b)的性别等于person(a)的身高的平均值,令person(b)的身高等于person(c)的id, 返回person(a)的薪资,person(b)的名字,person(c)的名字",
        "output": "match(a:person where name = '郑红')-[e:relates]->(b:person)<-[e2:relates]-(c:person) let c.id = (a.salary + 2969) * 3273,let b.gender = AVG(a.height),let b.height = c.id return a.salary,b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为杜梅的person,以及与其有关的film,并返回杜梅的gender和这些film的id",
        "output": "match(a:person where name = '杜梅')-[e]-(b:film) return a.gender, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是person,名为陈科的点,返回这些点的身高,年龄",
        "output": "match(a:person where a.name = '陈科') return a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有国家的id乘69的值",
        "output": "match(a:country) return a.id * 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person杜月认识的person节点购买的软件",
        "output": "match(a:person where a.name = '杜月')-[e:knows]->(b:person)-[e2:buy]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为喜欢,且f1等于false或权重为空的边",
        "output": "match(a)-[e:likes where e.f1 = false or (e.weight is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值对184取余的平均值",
        "output": "AVG(a.value % 184)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询185个名为张雪的点喜欢的类型为评论的节点,且节点创建时间不是2019年12月04日",
        "output": "match(a where a.name='张雪')-[e:person_likes_comment]->(b:comment where b.createTime <> '2019-12-04') return b limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,价值,人数分组,计算peopleNumber的个数除人数的最大值",
        "output": "return MAX(COUNT(a.peopleNumber) / a.peopleNumber) group by a.name, a.value, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询蚂蚁集团申请的贷款中，被其他人申请的数量。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:apply]->(b:loan)<-[e2:apply]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与person节点有关联的person节点，并返回这些节点中salary不为空的人的数量，再将这些数量相乘，最后将结果除以37取整，再加上36。",
        "output": "match(a:person)-[e]->(b:person where (b.salary is not null)) return SUM(COUNT(b.id) * 35 / 37), b.id + 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为115的城市属于的国家, 并将国家有关的城市的人数的平均值赋值给国家的价值, 接着查询国家的价值小于115的国家包含的城市",
        "output": "match(a:city where a.id = 115)-[e:belong]->(b:country) let b.value = AVG((b:country)-[e2]-(c:city) => c.peopleNumber) match(b:country where b.value < 115)-[e3:contain]->(d:city) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为173的doctor有关的doctor的relation, 再查询和doctor有关系的partner",
        "output": "match(a:doctor where id = 173)-[e]-(b:doctor)-[e2:relation]->(c), (b:doctor)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈强知道陈强所知的软件节点所提交的软件。",
        "output": "match(a:person where a.name = '陈强')-[e:knows]->(b:person)-[e2:commits]->(c:software) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以546,186作为请求点id, 以属性id作为相等条件,找出前168个类型为account_repay_loan的边",
        "output": "with p as (select * from (VALUES(546),(186)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:account_repay_loan ]->(b) RETURN e LIMIT 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与公司字节有合作关系的3跳以内的环",
        "output": "match(a:company where name = '字节')-[e:cooperate]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与大学复旦大学和武汉大学都存在合作关系的点",
        "output": "match(a:university where a.name='复旦大学')-[e:cooperate]->(b)<-[e2:cooperate]-(c:university where c.name='武汉大学') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找153个person张思思和马若涵,共同的朋友",
        "output": "match(a:person where a.name='张思思')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='马若涵') return b limit 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表915,738, 源点的id等于输入表id,找出教师吴建国教的课程,被其他学生选择的数量",
        "output": "with p as (select * from (VALUES(915),(738)) as t(id)) MATCH (a:teacher WHERE a.id = p.id AND (a.name = '吴建国')) -[e:teacher_teach_course ]->(b:course) <-[e2:student_selects_course ]-(c:student) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有用户的朋友，或者他们朋友的朋友。",
        "output": "match(a:user)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary乘4739的个数",
        "output": "COUNT(a.salary * 4739)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与计算机学院有has-关系，且教授马克思原理的teacher节点，返回这些teacher的age,以及计算机学院的id,以及马克思原理的课程的value。",
        "output": "match(a:department where a.name='计算机学院')-[e:has]->(b:teacher)<-[e2:teach]-(c:course where c.name='马克思原理') return a.id,b.age,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为王宏的,lang为German,name是Post_245的partner,返回这些partner的createTime,和边的f0",
        "output": "match(a where a.name='王宏')-[e:partner]->(b where b.lang = 'German' and b.name = 'Post_245') return b.createTime,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找王雪创建的订单中，其他买家取消的数量。",
        "output": "match(a:buyer where a.name='王雪')-[e:creates]->(b:orders)<-[e2:cancel]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出181个名为何国强的点属于的类型是公司的节点,且其人数不是755或人数为空",
        "output": "match(a where a.name='何国强')-[e:belong]->(b:company where b.peopleNumber <> 755 or (b.peopleNumber is null)) return b limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有公司的朋友,或其朋友的朋友",
        "output": "match(a:company)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和事项ISSUE-425有关系的用户,返回这些点的身高",
        "output": "match(a:issue where a.name='ISSUE-425')-[e]-(b:user) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找周伟喜欢过的书，并告诉我它们的价格。",
        "output": "match(a:reader where name = '周伟')-[e:likes]->(b:book)-[e2:relates]->(c:book) return c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为92的点的名字,年龄",
        "output": "match(a where a.id = 92) return a.name, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签等于书的点,并根据字数从大到小排列",
        "output": "match(a:book) return a order by a.wordCount desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出99个销量不等于1565.77且名字等于手机的商品,根据id升序排列",
        "output": "match(a:goods where a.sellerNumber <> 1565.77 and a.name = '手机') return a order by a.id asc limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为Prescription_116的处方,以及与其有关的处方,并返回Prescription_116的创建时间和这些处方的id",
        "output": "match(a:prescription where name = 'Prescription_116')-[e]-(b:prescription) return a.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字分组,计算id的最小值除12的值",
        "output": "return MIN(a.id) / 12 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出company谷歌的所有relation,的weight的最小值乘190.58的值",
        "output": "match(a:company where a.name= '谷歌')-[e:relation]->(b) return MIN(e.weight) * 190.58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询标签等于software,名为Hadoop的点,返回这些点的lang",
        "output": "match(a:software where a.name = 'Hadoop') return a.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为赵宏的person,以及与其有关的person,并返回赵宏的id和这些person的name",
        "output": "match(a:person where name = '赵宏')-[e]-(b:person) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为26的person关联的software,和以commits关系关联了这些software的其他person",
        "output": "match(a:person where a.id = 26)-[e]-(b:software)<-[e2:commits]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person孙雪pay的person, 令person(a)的salary等于person(b)的salary,令person的age等于person的id加42的和,令person的age等于person的gender, 返回person(a)的age, person(b)的height",
        "output": "match(a:person where a.name='孙雪')-[e:pay]->(b:person) let a.salary = b.salary,let a.age = SUM(a.id + 42),let b.age = b.gender return a.age,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出Order_268和Order_176的共同元素。",
        "output": "match(a:orders where a.name='Order_268')-[e:contain]->(b)<-[e2:contain]-(c:orders where c.name='Order_176') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价格减价格的平均值",
        "output": "AVG(a.price - a.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询卖家赵建国 回答的买家,返回买家 查看的商品的销量减销量的值",
        "output": "match(a:seller where name = '赵建国')-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c.sellerNumber - c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与city有关系的city节点,且city节点的peopleNumber是9353,并返回这些city的area对37824取余的值,以及city的id乘57的和",
        "output": "match(a:city)-[e]->(b:city where b.peopleNumber = 9353) return b.area % 37824, SUM(b.id * 57)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "字数对153取余的最大值",
        "output": "MAX(a.wordCount % 153)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与医生周红和何若涵都存在属于关系的点",
        "output": "match(a:doctor where a.name='周红')-[e:belong]->(b)<-[e2:belong]-(c:doctor where c.name='何若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询拥有部门标签和教师标签的边。",
        "output": "match(a:department)-[e:has]->(b:teacher) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到与《白夜行》有联系的书籍。",
        "output": "match(a:book where a.name='白夜行')<-[e:knows]-(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出前66个标签等于department_has_teacher的边",
        "output": "match(a)-[e:department_has_teacher]->(b) return e limit 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为weight,id,category, 数据为(953,98,'皮肤药'),(421,73,'皮肤药'),(109,90,'止痛药'),(346,97,'其他'), 以属性weight作为相等条件,查找和医生孙思思有关的部门,再查找和孙思思doctor_diagnose_patient的其他病人,返回它们",
        "output": "with p as (select * from (VALUES(953,98,'皮肤药'),(421,73,'皮肤药'),(109,90,'止痛药'),(346,97,'其他')) as t(weight,id,category))MATCH (a:doctor WHERE a.weight = p.weight AND (a.name = '孙思思')) -[e ]-(b:department) , (a:doctor) -[e2:doctor_diagnose_patient ]->(c:patient) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出被部门放射科拥有的医生",
        "output": "match(a:doctor)<-[e:department_has_doctor]-(b:department where b.name='放射科') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部美团的点创造的软件,然后帮我查询美团被属于的person,一起返回",
        "output": "match(a where a.name = '美团')-[e:creates]->(b:software),(a where a.name = '美团')<-[e2:belong]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找124个价值大于180的软件,根据语言升序排列",
        "output": "match(a:software where a.value > 180) return a order by a.lang asc limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有类型是评论的点",
        "output": "match(a:comment) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出name不等于黄轩且name等于韩月的buyer consult对应的seller的名称，以及这些seller所拥有的goods的名称。",
        "output": "match(a:buyer where a.name <> '黄轩' and a.name = '韩月')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找180个账号LX001和Geaflow123,共同的朋友",
        "output": "match(a:account where a.name='LX001')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Geaflow123') return b limit 180",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,height分组,计算height加161的数量",
        "output": "return COUNT(a.height + 161) group by a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person张科认识的person,以及喜欢这些person的person, 令person(b)的年龄等于person(a)的性别, 返回person(a)的年龄,person(b)的身高,person(c)的性别",
        "output": "match(a:person where name = '张科')-[e:knows]->(b:person)<-[e2:likes]-(c:person) let b.age = a.gender return a.age,b.height,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为Comment_478的,id在82到89之间,价值大于等于669的朋友,返回这些朋友的id,和边的目标点id,f0,f1",
        "output": "match(a where a.name='Comment_478')-[e:friend]->(b where (b.id BETWEEN 82 AND 89) and b.value >= 669) return b.id,e.targetId, e.f0, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询学生选择的课程,返回其源点的身高减189的最小值,以及目标点的价值加价值的值",
        "output": "match(a:student)-[e:selects]->(b:course) return MIN(a.height - 189), b.value + b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person王强有关,且与person郑思琪有关系的person节点",
        "output": "match(a:person where a.name='王强')-[e:family]-(b:person)-[e2:lover]-(c:person where c.name='郑思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 与赵轩有关的电子科技大学部门",
        "output": "match(a:university where a.name='电子科技大学')-[e:has]-(b:department)-[e2:has]-(c:student where c.name='赵轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出所有病人类型的点，按照名字进行降序排序。",
        "output": "match(a:patient) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前50个标签为拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为徐轩的用户或仓库,以及与其有关的用户,并返回徐轩的身高和这些用户的性别",
        "output": "match(a:user | repository where name = '徐轩')-[e]-(b:user) return a.height, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询186个和标签等于城市的点有city_belong_country关系的国家,以及和这些国家有country_contain_city关系的城市",
        "output": "match(a:city)-[e:city_belong_country]->(b:country)-[e2:country_contain_city]->(c:city) return c limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与滴滴有合作关系的大学和与北京大学有隶属关系的城市。",
        "output": "match(a:company where a.name = '滴滴')-[e:cooperate]->(b:university),(c:university where c.name = '北京大学')-[e2:belong]->(d:city) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与吴建聪存在belong关系的department,department与doctor存在has关系的点,返回这些点的gender",
        "output": "match(a where a.name = '吴建聪')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与label为city的点有belong关系的19个国家，以及这些国家所包含的城市。",
        "output": "match(a:city)-[e:belong]->(b:country)-[e2:contain]->(c:city) return c limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与卖家孙科存在回答关系,且与商品鞋子存在查看关系的买家节点，返回这些买家的身高,薪资,及卖家孙科的年龄,及商品鞋子的价格",
        "output": "match(a:seller where a.name='孙科')-[e:ask]->(b:buyer)<-[e2:look]-(c:goods where c.name='鞋子') return a.age,b.height, b.salary,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为徐月的person",
        "output": "match(a:person where a.name = '徐月') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出黄轩的点认识的person,然后找出黄轩被认识的person,一起返回",
        "output": "match(a where a.name = '黄轩')-[e:knows]->(b:person),(a where a.name = '黄轩')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和读者韩伟有关的读者,称为X,再找出和这个X有关联的其他读者,以及和X有关联的作家",
        "output": "match(a:reader where a.name = '韩伟')-[e]-(b:reader), (b:reader)-[e2]-(c:reader),(b:reader)-[e3]-(d:author) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回按照name升序排列的，1999年07月29日创建或者重量在163到316之间的，数量为143的prescription。",
        "output": "match(a:prescription where a.createTime = '1999-07-29' or (a.weight BETWEEN 163 AND 316)) return a order by a.name asc limit 143",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与用户名为Amily的所有用户节点，并返回这些节点中年龄加26后的最大值和薪资加1396后的最大值。",
        "output": "match(a:user)-[e]->(b:user where b.name = 'Amily') return b.age + 26, MAX(b.salary + 1396)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与medicine枇杷糖浆有关系的department, 返回和这些department有关联的medicine的,price减price的和",
        "output": "match(a:medicine where a.name= '枇杷糖浆')-[e]-(b:department)-[e2]-(c:medicine) return SUM(c.price - c.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和卖家张宏之间有回答关系的买家",
        "output": "match(a:seller where a.name='张宏')-[e:ask]->(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为杜思思的person,以及与其有关的person,并返回杜思思的name和这些person的gender",
        "output": "match(a:person where name = '杜思思')-[e]-(b:person) return a.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据名字,人数分组,计算人数加808的和",
        "output": "return SUM(a.peopleNumber + 808) group by a.name, a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和名为张国强的作家有相关者关系,或有相关者的相关者关系的作家",
        "output": "match(a:author where n.name=张国强)-[e:relation]->{1,2}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有郑梅的点accept的prescription,然后查找郑梅被diagnose的doctor,一起返回",
        "output": "match(a where a.name = '郑梅')-[e:accept]->(b:prescription),(a where a.name = '郑梅')<-[e2:diagnose]-(c:doctor) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表659, 源点的id等于输入表id,查询全部名为吴国强的点的,价值不是563,价值小于966的伙伴,返回这些伙伴的id,和边的时间戳,f0,权重",
        "output": "with p as (select * from (VALUES(659)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '吴国强')) -[e:partner ]->(b WHERE b.value <> 563 AND b.value < 966) RETURN b.id, e.timeStamp, e.f0, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询部门急诊部拥有的医生节点属于的部门",
        "output": "match(a:department where a.name = '急诊部')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person陈轩认识的person,被其他person关联的数量",
        "output": "match(a:person where a.name='陈轩')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与pullRequest PR-481有关系的repository, 返回和这些repository有关联的repository的,stars加100的值",
        "output": "match(a:pullRequest where a.name= 'PR-481')-[e]-(b:repository)-[e2]-(c:repository) return c.stars + 100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person陈雪的label为家人的边,并根据f1从小到大排列,返回129个",
        "output": "match(a:person where a.name = '陈雪')-[e:family]->(b) return b order by e.f1 asc limit 129",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,id,age, 数据为(184,53,91),(157,44,21),(155,65,24),(173,86,65)的子查询作为输入表, 以属性id作为相等条件,查找所有Sam的点创造的处方,然后查找Sam被拥有的部门,一起返回",
        "output": "with p as (select * from (VALUES(184,53,91),(157,44,21),(155,65,24),(173,86,65)) as t(height,id,age))MATCH (a WHERE a.id = p.id AND (a.name = 'Sam')) -[e:doctor_creates_prescription ]->(b:prescription) , (a WHERE a.name = 'Sam') <-[e2:department_has_doctor ]-(c:department) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找user黄轩publish的post,以及likes这些post的user",
        "output": "match(a:user where name = '黄轩')-[e:publish]->(b:post)<-[e2:likes]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,名字,id分组,计算年龄加6的平均值",
        "output": "return AVG(a.age + 6) group by a.height, a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签等于person,边标签等于提交,以及f1小于11,目标点id小于873的边",
        "output": "match(a:person)-[e:commits where e.f1 < 11 and e.targetId < 873]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家创造的订单,返回其源点的薪资除5500的值,以及目标点的id对60取余的值",
        "output": "match(a:buyer)-[e:creates]->(b:orders) return a.salary / 5500, b.id % 60",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和doctor有关联的department节点,并根据其name,id分组,返回name,id,以及id乘20的平均值",
        "output": "match(a:doctor)-[e:belong]-(b:department) return b.name, b.id, AVG(b.id * 20) group by b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以779,228,520,324作为请求点id, 以属性id作为相等条件,帮我查询book以id,category分组的name, 根据name从大到小排序",
        "output": "with p as (select * from (VALUES(779),(228),(520),(324)) as t(id)) MATCH (a:book WHERE a.id = p.id) RETURN a.name GROUP BY a.id, a.category ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person杜雪有关联，同时又与company字节有关联的company节点，并返回它们的id、peopleNumber和value。",
        "output": "match(a:person where a.name='杜雪')-[e]->(b:company)<-[e2]-(c:company where c.name='字节') return b.id, b.peopleNumber, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和account Light有关系的company或account,返回这些点的id,gender,height",
        "output": "match(a:account where a.name='Light')-[e]-(b:company | account) return b.id, b.gender, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回84个按性别降序排列且年龄大于41岁或小于6525的人的列表。",
        "output": "match(a:person where a.salary < 6525 or a.age > 41) return a order by a.gender desc limit 84",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照名字对标签进行分组，然后按照ID降序排序。",
        "output": "match(a:tag) return a.id group by a.name, a.id order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找user吴科likes的post,以及likes这些post的user",
        "output": "match(a:user where name = '吴科')-[e:likes]->(b:post)<-[e2:likes]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回账号Geaflow123的朋友,的f0的求和值对850取余对目标点id取余的平均值",
        "output": "match(a:account where a.name= 'Geaflow123')-[e:friend]->(b) return AVG(SUM(e.f0) % 850 % e.targetId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部源点类型为company,边类型为company_employee_person,以及f1小于99且f0小于882,或f1为false的边",
        "output": "match(a:company)-[e:company_employee_person where (e.f1 < 99 and e.f0 < 882) or e.f1 = false]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,id, 数据为('王思思',179,96),('郑轩',192,11),('陈建国',192,56), 以属性id作为相等条件,返回person李红的所有类型是朋友的边,并根据权重降序排列,返回54个",
        "output": "with p as (select * from (VALUES('王思思',179,96),('郑轩',192,11),('陈建国',192,56)) as t(name,height,id))MATCH (a:person WHERE a.id = p.id AND (a.name = '李红')) -[e:person_friend_person ]->(b) RETURN b ORDER BY e.weight DESC LIMIT 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于作家的点",
        "output": "match(a:author) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从医生李若涵出发,经过标签为属于的边,走1度或2度到达的部门点",
        "output": "match(a:doctor where a.name='李若涵')-[e:belong]->{1,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑思思 knows的person,返回person knows的person的age加age的数量",
        "output": "match(a:person where name = '郑思思')-[e:knows]->(b:person)-[e2:knows]->(c:person) return COUNT(c.age + c.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与公司字节有关系的贷款的id",
        "output": "match(a:company where a.name='字节')-[e]-(b:loan) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和国家美国之间有包含关系的城市",
        "output": "match(a:country where a.name='美国')-[e:contain]->(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘46的最小值",
        "output": "MIN(a.id * 46)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与武汉大学有关的城市，然后列出这些城市与武汉大学的关系。",
        "output": "match(a:university where a.name = '武汉大学')-[e:belong]->(b:city),(a:university where a.name = '武汉大学')<-[e2:belong]-(c:city) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表317,81,242,251,331, 以属性id作为相等条件,帮我查询全部id为10的标签关联的person,和以包含关系关联了这些person的其他论坛",
        "output": "with p as (select * from (VALUES(317),(81),(242),(251),(331)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.id = '10')) -[e ]-(b:person) <-[e2:forum_contain_person ]-(c:forum) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 马轩和何国强没有共同的relation。",
        "output": "match(a:person where a.name='马轩')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='何国强') return b limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为156的person提交的软件, 并将软件有关的公司的价值的最大值赋值给软件的价值, 接着查询软件的价值小于156的软件使用的软件",
        "output": "match(a:person where a.id = 156)-[e:commits]->(b:software) let b.value = MAX((b:software)-[e2]-(c:company) => c.value) match(b:software where b.value < 156)-[e3:uses]->(d:software) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与周月存在发布关系的书,书与书存在引用关系的点,返回这些点的id",
        "output": "match(a where a.name = '周月')-[e:publish]->(b:book)-[e2:refers]->(c:book) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与名为孙梅和张国强的点共同查看的,标签等于商品的节点",
        "output": "match(a where a.name = '孙梅')-[e:look]->(b:goods)<-[e2:look]-(c where c.name = '张国强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表621,59,198,82,884, 以属性id作为相等条件,查询处方的2跳的环",
        "output": "with p as (select * from (VALUES(621),(59),(198),(82),(884)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有买家的伙伴,或其伙伴的伙伴",
        "output": "match(a:buyer)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高从大到小排列，找出23个薪水为4491的买家。",
        "output": "match(a:buyer where a.salary = 4491) return a order by a.height desc limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出121个doctor周建聪和王思思,共同的relation",
        "output": "match(a:doctor where a.name='周建聪')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='王思思') return b limit 121",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出diagnose patient吴建国的doctor,和这些doctor creates的prescription",
        "output": "match(a:patient where name = '吴建国')<-[e:diagnose]-(b:doctor)-[e2:creates]->(c:prescription) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与seller有关系的goods节点,且goods节点的category是衣服,并返回这些goods的sellerNumber减455.94的值,以及goods的price加3430.50的值",
        "output": "match(a:seller)-[e]->(b:goods where b.category = '衣服') return b.sellerNumber - 455.94, b.price + 3430.50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id的平均值",
        "output": "AVG(a.id / a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为周思思的点创造的评论",
        "output": "match(a where a.name='周思思')-[e:creates]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,创建时间分组,计算权重减权重减40加914的最小值",
        "output": "return MIN(a.weight - a.weight - 40 + 914) group by a.weight, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为推特的点的,语言大于等于625的朋友,返回这些朋友的创建时间,和边的源点id,目标点id",
        "output": "match(a where a.name='推特')-[e:friend]->(b where b.lang >= 625) return b.createTime,e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(4347.25,'Order_244',4)作为请求表数据,属性分别为price,name,id, 源点的id等于输入表id,返回和buyer有关联的seller节点,并根据其salary,age,height分组,返回salary,age,height,以及salary加3196的求和值",
        "output": "with p as (select * from (VALUES(4347.25,'Order_244',4)) as t(price,name,id))MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_consult_seller ]-(b:seller) RETURN b.salary, b.age, b.height, SUM(b.salary + 3196) GROUP BY b.salary, b.age, b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回耳鼻喉科医生数量，其他部门也有拥有。",
        "output": "match(a:department where a.name='耳鼻喉科')-[e:has]->(b:doctor)<-[e2:has]-(c:department) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(86,'周国强',156),(19,'王建国',177)作为请求表数据,属性分别为age,name,height, 源点的age等于输入表age,返回person以id,salary,age分组的salary, 根据salary升序排序",
        "output": "with p as (select * from (VALUES(86,'周国强',156),(19,'王建国',177)) as t(age,name,height))MATCH (a:person WHERE a.age = p.age) RETURN a.salary GROUP BY a.id, a.salary, a.age ORDER BY a.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与蚂蚁集团和字节跳动公司相关的城市节点。",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:belong]-(b:city)-[e2:contain]-(c:company where c.name='字节') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取赵梅的关系关系关系",
        "output": "match(a:person where a.name='赵梅')-[e:relation]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,gender,salary, 数据为(96,'famale',8066)的子查询作为输入表, 源点的gender等于输入表gender,找出和person有关联的person节点,并根据其age,salary,id分组,返回age,salary,id,以及height减150加35的平均值",
        "output": "with p as (select * from (VALUES(96,'famale',8066)) as t(age,gender,salary))MATCH (a:person WHERE a.gender = p.gender) -[e:person_knows_person ]-(b:person) RETURN b.age, b.salary, b.id, AVG(b.height - 150 + 35) GROUP BY b.age, b.salary, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为韩轩的person,以及与其有关的person,并返回韩轩的名字和这些person的id",
        "output": "match(a:person where name = '韩轩')-[e]-(b:person) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('male',21,5573),('male',38,9510)作为请求表数据,属性分别为gender,age,salary, 以属性gender作为相等条件,给出和订单Order_459有关的卖家,再给出和Order_459orders_contain_goods的其他商品,返回它们",
        "output": "with p as (select * from (VALUES('male',21,5573),('male',38,9510)) as t(gender,age,salary))MATCH (a:orders WHERE a.gender = p.gender AND (a.name = 'Order_459')) -[e ]-(b:seller) , (a:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(4665.27,556,53)作为请求表数据,属性分别为price,value,id, 以属性value作为相等条件,查找前27个满足条件id不为空的orders",
        "output": "with p as (select * from (VALUES(4665.27,556,53)) as t(price,value,id))MATCH (a:orders WHERE a.value = p.value AND (a.id IS NOT NULL)) RETURN a LIMIT 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出喜欢person郑梅认识的person,的person",
        "output": "match(a:person where name = '郑梅')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与TheShy和Geaflow123都有关联的79个loan节点。",
        "output": "match(a where a.name='TheShy')-[e]->(b:loan)<-[e2]-(c where c.name='Geaflow123') return b limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询68个名为Geaflow的点使用的label为软件的节点,且节点是否开源等于true且语言不是go",
        "output": "match(a where a.name='Geaflow')-[e:uses]->(b:software where b.openSource = true and b.lang <> 'go') return b limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下叫郑科的人",
        "output": "match(a:person where a.name = '郑科') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询film has的tag,返回其源点的id减id的平均值,以及目标点的value对727取余的值",
        "output": "match(a:film)-[e:film_has_tag]->(b:tag) return AVG(a.id - a.id), b.value % 727",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我按buyer的id、性别和身高分组，然后按照salary降序排列所有的buyer信息",
        "output": "match(a:buyer) return a.salary group by a.id, a.gender, a.height order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点id大于等于42且面积小于等于50285且价值小于484,边label为属于,且满足条件源点id等于61或目标点id不是8的边,返回这些边的源点id除116的数量",
        "output": "match(a where a.id >= 42 and a.area <= 50285 and a.value < 484)-[e:belong where e.srcId = 61 or e.targetId <> 8]->(b) return COUNT(e.srcId / 116)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点label为评论,目标点label为电影,label为评论或标签或person的边",
        "output": "match(a:comment)-[e:comment | tag | person]->(b:film) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以486作为请求点id, 源点的id等于输入表id,查找id为61的用户有关的用户的相关者, 再查找和用户有关系的朋友",
        "output": "with p as (select * from (VALUES(486)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (id = '61')) -[e ]-(b:user) -[e2:relation ]->(c) , (b:user) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出买家杜月发出的订单，这些订单经过标记为取消的边，并且可以通过3度或4度路径到达。",
        "output": "match(a:buyer where a.name='杜月')-[e:cancel]->{3,4}(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是person的点有认识关系的person,且和这些person有提交关系的软件,且和这些软件有使用关系的软件",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:commits]->(c:software)-[e3:uses]->(d:software) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询全部与film有关系的comment节点,且comment节点的id为空,并返回这些点的wordCount除130的最小值,以及id的数量减id的求和值",
        "output": "match(a:film)-[e]->(b:comment where (b.id is null)) return MIN(b.wordCount / 130), SUM(COUNT(b.id) - b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出用户关联的标签，以及与这些标签有has关系的其他帖子。",
        "output": "match(a:user where a.id = '61')-[e]-(b:tag)<-[e2:has]-(c:post) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找公司谷歌 雇佣的person,返回person 购买的软件的id的求和值乘18的数量 ",
        "output": "match(a:company where name = '谷歌')-[e:company_employee_person]->(b:person)-[e2:person_buy_software]->(c:software) return COUNT(SUM(c.id) * 18)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为郑若涵的,id小于等于29的相关者,返回这些相关者的薪资,和边的源点id",
        "output": "match(a where a.name='郑若涵')-[e:relation]->(b where b.id <= 29) return b.salary,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出年龄不为空的用户喜欢的帖子的名称，以及这些帖子拥有的标签的名称。",
        "output": "match(a:user where (a.age is not null))-[e:likes]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与教师有关系的大学节点，限制条件是大学节点的价值小于等于258,然后计算这些节点中每个节点的ID的平均值，并将这些ID值相乘，最后返回这些节点的ID平均值乘以ID和的余数，即价值对741取余的值。",
        "output": "match(a:teacher)-[e]->(b:university where b.value <= 258) return SUM(AVG(b.id) * b.id), b.value % 741",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以981,413,325,980作为请求点id, 以属性id作为相等条件,找出goods的1度以内的环",
        "output": "with p as (select * from (VALUES(981),(413),(325),(980)) as t(id)) MATCH (a:goods WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和patient郑思琪之间有accept关系的prescription",
        "output": "match(a:patient where a.name='郑思琪')-[e:accept]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询author李国强knows的author节点write的book",
        "output": "match(a:author where a.name = '李国强')-[e:knows]->(b:author)-[e2:write]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person有关系的账号节点,且账号节点的id小于59,并返回这些账号的id的求和值乘48的最小值,以及账号的id减48加价值的值",
        "output": "match(a:person)-[e]->(b:account where b.id < 59) return MIN(SUM(b.id) * 48), b.id - 48 + b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和Comment_263有关联的电影，以及和Comment_263有评论关系的电影。",
        "output": "match(a:comment where a.name = 'Comment_263')-[e:belong]->(b:film),(a:comment where a.name = 'Comment_263')<-[e2:belong]-(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加7加3887的值",
        "output": "a.id + 7 + 3887",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出贷款defaultName对应的存款账号，以及转账到该账号的创建时间",
        "output": "match(a:loan where name = 'defaultName')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return c.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用personalRank函数,以'vm', 15, 'vN'作为输入,返回运算结果",
        "output": "Call PERSONALRANK('vm', 15, 'vN') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询64个用户孙伟和张强,共同的相关者",
        "output": "match(a:user where a.name='孙伟')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b limit 64",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以992,537作为请求点id, 以属性id作为相等条件,查找person的三角的环,边label为person_buy_software, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(992),(537)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]->(b) -[e2:person_buy_software ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,name,value, 数据为(74,'文学院',770)的子查询作为输入表, 源点的name等于输入表name,查找153个名字不是王强或薪资为空或身高大于等于171的学生,根据身高从大到小排列",
        "output": "with p as (select * from (VALUES(74,'文学院',770)) as t(id,name,value))MATCH (a:student WHERE a.name = p.name AND (a.name <> '王强' OR a.salary IS NULL OR a.height >= 171)) RETURN a ORDER BY a.height DESC LIMIT 153",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有id为29的person关联的person,和以认识关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 29)-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出6个帖子，它们的最大值乘12除价值小于30,且名字不是Post_272或Post_426,然后按名字降序排列。",
        "output": "match(a:post where MAX(a.id) * 12 / a.value < 30 and a.name <> 'Post_272' and a.name <> 'Post_426') return a order by a.name desc limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为微软的点creates的所有software,并对这些software的stars进行求和",
        "output": "match(a where a.name='微软')-[e:creates]->(b:software) return SUM(b.stars)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与person何强有关系的软件的名字",
        "output": "match(a:person where a.name='何强')-[e]-(b:software) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找徐伟所属的公司，并返回该公司开发的开源软件的名称。",
        "output": "match(a:person where name = '徐伟')-[e:belong]->(b:company)-[e2:creates]->(c:software) return c.name, c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与buyer有关的orders，以及这些orders中被取消的其他buyer。",
        "output": "match(a:buyer where a.id = '138')-[e]-(b:orders)<-[e2:cancel]-(c:buyer) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person杜建国喜欢的person, 令person的名字等于person的id,令person(a)的名字等于person(b)的身高的最大值, 返回person(a)的身高, person(b)的性别",
        "output": "match(a:person where a.name='杜建国')-[e:likes]->(b:person) let a.name = a.id,let a.name = MAX(b.height) return a.height,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出价值为空或是否冻结是false的账号转账的账号的名称,以及这些账号 还款的贷款的名称",
        "output": "match(a:account where (a.value is null) or a.isBlock = false)-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与读者Alice有关系的作家的性别",
        "output": "match(a:reader where a.name='Alice')-[e]-(b:author) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与ID为44的人有关的朋友，以及与该人相关联的伙伴。",
        "output": "match(a:person where id = '44')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,amount,weight分组,计算amount减8686.72的值",
        "output": "return a.amount - 8686.72 group by a.id, a.amount, a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询165个名为吴雪的点关联的标签为person的节点,且节点身高大于160",
        "output": "match(a where a.name='吴雪')-[e:relates]->(b:person where b.height > 160) return b limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为日本的大学或城市,以及与其有关的城市,并返回日本的id和这些城市的价值",
        "output": "match(a:university | city where name = '日本')-[e]-(b:city) return a.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找ISSUE-404的点belong的repository,然后请帮我查找ISSUE-404被has的repository,一起返回",
        "output": "match(a where a.name = 'ISSUE-404')-[e:belong]->(b:repository),(a where a.name = 'ISSUE-404')<-[e2:has]-(c:repository) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为account的点,返回35个",
        "output": "match(a:account) return a limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找国家法国包含的城市,被其他大学属于的数量",
        "output": "match(a:country where a.name='法国')-[e:contain]->(b:city)<-[e2:belong]-(c:university) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为何月的点own的account",
        "output": "match(a where a.name='何月')-[e:own]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先查找与书籍ID为74的作者的关联，再查找该作者的朋友。",
        "output": "match(a:book where id = '74')-[e]-(b:author)-[e2:relation]->(c), (b:author)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有药品的id减38的最小值",
        "output": "match(a:medicine) return MIN(a.id - 38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以999作为请求点id, 以属性id作为相等条件,给出和person周红有person_watch_film关系的film,以及和cinema人人影城有cinema_releases_film关系的film,将它们都返回",
        "output": "with p as (select * from (VALUES(999)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '周红')) -[e:person_watch_film ]->(b:film) , (c:cinema WHERE c.name = '人人影城') -[e2:cinema_releases_film ]->(d:film) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询175个名为kate的点apply的标签等于loan的节点,且节点id大于等于51",
        "output": "match(a where a.name='kate')-[e:apply]->(b:loan where b.id >= 51) return b limit 175",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部city以id,name,value分组的name, 根据name从大到小排序",
        "output": "match(a:city) return a.name group by a.id, a.name, a.value order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,性别,id分组,计算年龄减68的和",
        "output": "return SUM(a.age - 68) group by a.age, a.gender, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询韩伟支付的人的薪资和性别。",
        "output": "match(a:person where name = '韩伟')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c.salary, c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找72个名为华为的点申请的类型是贷款的节点,且其金额乘1177.67的数量小于等于23",
        "output": "match(a where a.name='华为')-[e:apply]->(b:loan where COUNT(b.amount * 1177.67) <= 23) return b limit 72",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回公司源点标签为company,标签为apply的边，然后计算这些边的weight除以178.56的平均值，再加上f0的最小值对f0取余的和。",
        "output": "match(a:company)-[e:apply]->(b) return AVG(e.weight / 178.56), SUM(MIN(e.f0) % e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询106个读者马轩和Tom,共同的伙伴",
        "output": "match(a:reader where a.name='马轩')-[e:partner]->(b)<-[e2:partner]-(c:reader where c.name='Tom') return b limit 106",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和国家澳大利亚有关的城市,称为X,再请帮我查找和这个X有关联的其他大学,以及和X有关联的大学",
        "output": "match(a:country where a.name = '澳大利亚')-[e]-(b:city), (b:city)-[e2]-(c:university),(b:city)-[e3]-(d:university) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询105个名为韩思思的点喜欢的标签等于书的节点,且节点创建时间不等于2029年04月13日",
        "output": "match(a where a.name='韩思思')-[e:likes]->(b:book where b.createTime <> '2029-04-13') return b limit 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出谷歌和美团两家公司的共同点。",
        "output": "match(a:company where a.name='谷歌')-[e:apply]->(b)<-[e2:apply]-(c:company where c.name='美团') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表157,97,369, 以属性id作为相等条件,帮我查询与名为徐强和孙国强的点共同creates的,标签等于prescription的节点",
        "output": "with p as (select * from (VALUES(157),(97),(369)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐强')) -[e:doctor_creates_prescription ]->(b:prescription) <-[e2:doctor_creates_prescription ]-(c WHERE c.name = '孙国强') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和大学中国科技大学有1到4跳关系的公司",
        "output": "match(a:university where a.name='中国科技大学')-[e]->{1,4}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与仓库Mybatis有关,且与合并请求PR-237有关系的用户节点",
        "output": "match(a:repository where a.name='Mybatis')-[e:has]-(b:user)-[e2:creates]-(c:pullRequest where c.name='PR-237') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询以accept关系关联了prescription Prescription_470的patient",
        "output": "match(a:prescription where a.name='Prescription_470')<-[e:accept]-(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型为person,边类型为knows,以及满足条件f0的最大值等于777,targetId大于53且f0大于等于908的边",
        "output": "match(a:person)-[e:knows where MAX(e.f0) = 777 and e.targetId > 53 and e.f0 >= 908]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询吴强的点认识的person,然后帮我查询吴强被认识的person,一起返回",
        "output": "match(a where a.name = '吴强')-[e:knows]->(b:person),(a where a.name = '吴强')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出166个名为法学院的点拥有的类型为学生的节点,且其名字是马国强或年龄大于等于98",
        "output": "match(a where a.name='法学院')-[e:has]->(b:student where b.name = '马国强' or b.age >= 98) return b limit 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找149个价格在44到208之间的药品,根据id从大到小排列",
        "output": "match(a:medicine where (a.price BETWEEN 44 AND 208)) return a order by a.id desc limit 149",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与卖家马红有关系的买家, 返回和这些买家有关联的商品的,价格减312.58的值",
        "output": "match(a:seller where a.name= '马红')-[e]-(b:buyer)-[e2]-(c:goods) return c.price - 312.58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询与person周建聪有关系的贷款, 返回和这些贷款有关联的公司的,价值加价值的最大值",
        "output": "match(a:person where a.name= '周建聪')-[e]-(b:loan)-[e2]-(c:company) return MAX(c.value + c.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司滴滴有关的账号,再找出和滴滴申请的其他贷款,返回它们",
        "output": "match(a:company where a.name = '滴滴')-[e]-(b:account), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表820,811,803, 以属性id作为相等条件,查询所有与王红存在user_likes_post关系的post,post与tag存在post_has_tag关系的点,返回这些点的name",
        "output": "with p as (select * from (VALUES(820),(811),(803)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '王红')) -[e:user_likes_post ]->(b:post) -[e2:post_has_tag ]->(c:tag) RETURN c.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回gender不是female且height是182的相关人员的名称，以及他们认识的人的名称。",
        "output": "match(a:person where a.gender <> 'famale' and a.height = 182)-[e:relates]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询Amily pay的同事，返回他们喜欢的同事的ID和工资。",
        "output": "match(a:person where name = 'Amily')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c.id, c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出124个salary小于8091或age不为空的reader,根据gender从小到大排列",
        "output": "match(a:reader where a.salary < 8091 or (a.age is not null)) return a order by a.gender asc limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出creates software Calcite的company,和这些company employee的person",
        "output": "match(a:software where name = 'Calcite')<-[e:creates]-(b:company)-[e2:employee]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部标签为电影的点",
        "output": "match(a:film) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与post Post_376有关系的tag的name",
        "output": "match(a:post where a.name='Post_376')-[e]-(b:tag) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找源点name不等于杜梅且height除height为27,或height小于195,边类型为pay,且f0不为空或f0大于679的边,返回这些边的srcId减133的值",
        "output": "match(a where (a.name <> '杜梅' and a.height / a.height = 27) or a.height < 195)-[e:pay where (e.f0 is not null) or e.f0 > 679]->(b) return e.srcId - 133",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,salary,name, 数据为('male',6562,'郑伟')的子查询作为输入表, 以属性name作为相等条件,请帮我查找名为吴建聪和马强的,类型是user的点公共的partner节点的名单",
        "output": "with p as (select * from (VALUES('male',6562,'郑伟')) as t(gender,salary,name))MATCH (a:user WHERE a.name = p.name AND (a.name = '吴建聪')) -[e:partner ]->(b) <-[e2:partner ]-(c:user WHERE c.name = '马强') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与马国强相关的人的朋友的朋友",
        "output": "match(a:person where a.name='马国强')-[e:relation]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询大学四川大学 拥有的部门,返回部门 拥有的教师的薪资加薪资加79的最小值",
        "output": "match(a:university where name = '四川大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return MIN(c.salary + c.salary + 79)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为郑思琪的点申请的贷款",
        "output": "match(a where a.name='郑思琪')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为age,id,gender, 数据为(46,92,'male'),(54,13,'famale'),(43,90,'male'),(32,16,'male')的子查询作为输入表, 源点的id等于输入表id,请帮我找出id为7的person关联的公司,和以属于关系关联了这些公司的其他person",
        "output": "with p as (select * from (VALUES(46,92,'male'),(54,13,'famale'),(43,90,'male'),(32,16,'male')) as t(age,id,gender))MATCH (a:person WHERE a.id = p.id AND (a.id = '7')) -[e ]-(b:company) <-[e2:person_belong_company ]-(c:person) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为赵建国和郑宏的,类型为person的点公共的家人节点的名单",
        "output": "match(a:person where a.name='赵建国')-[e:family]->(b)<-[e2:family]-(c:person where c.name='郑宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点标签为作家,边标签为认识,并且满足条件源点id大于135或源点id减158小于等于134,且权重大于196.94的边",
        "output": "match(a:author)-[e:knows where (e.srcId > 135 or e.srcId - 158 <= 134) and e.weight > 196.94]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与publisher李轩有关系的book的createTime",
        "output": "match(a:publisher where a.name='李轩')-[e]-(b:book) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出何科朋友的朋友的相关信息",
        "output": "match(a:user where a.name='何科')-[e:friend]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询用户的相关者,或其相关者的相关者",
        "output": "match(a:user)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person有关系的person节点,且person节点的薪资除8548小于61,并返回这些person的年龄对33取余对173取余的平均值,以及person的身高对160取余的值",
        "output": "match(a:person)-[e]->(b:person where b.salary / 8548 < 61) return AVG(b.age % 33 % 173), b.height % 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点salary等于7404,边标签等于ask,且满足条件f1不是true,targetId大于150且f1不是true的边,返回这些边的f0乘532的最小值",
        "output": "match(a where a.salary = 7404)-[e:ask where e.f1 <> true and e.targetId > 150 and e.f1 <> true]->(b) return MIN(e.f0 * 532)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person孙思思有关系的person的薪资",
        "output": "match(a:person where a.name='孙思思')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以341,413作为请求点id, 源点的id等于输入表id,计算所有电影院的id除40加24的平均值",
        "output": "with p as (select * from (VALUES(341),(413)) as t(id)) MATCH (a:cinema WHERE a.id = p.id) RETURN AVG(a.id / 40 + 24) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出27个person郑雪和韩月,共同的relation",
        "output": "match(a:person where a.name='郑雪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='韩月') return b limit 27",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询拥有用户黄伟的仓库,和这些仓库拥有的合并请求",
        "output": "match(a:user where name = '黄伟')<-[e:has]-(b:repository)-[e2:has]->(c:pullRequest) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询belong course形势与政策belong的department,的course",
        "output": "match(a:course where name = '形势与政策')-[e:belong]->(b:department)<-[e2:belong]-(c:course) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为东京的节点belong的university或city或company",
        "output": "match(a where a.name='东京')-[e:belong]->(b:university | city | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,lastLoginTime,isBlock, 数据为(87,2020-08-26,false),(85,2020-12-25,true),(33,2032-12-22,true)的子查询作为输入表, 以属性isBlock作为相等条件,请帮我查找106个和标签等于账号的点有account_transfer_account关系的账号,以及和这些账号有account_transfer_account关系的账号",
        "output": "with p as (select * from (VALUES(87,2020-08-26,false),(85,2020-12-25,true),(33,2032-12-22,true)) as t(id,lastLoginTime,isBlock))MATCH (a:account WHERE a.isBlock = p.isBlock) -[e:account_transfer_account ]->(b:account) -[e2:account_transfer_account ]->(c:account) RETURN c LIMIT 106",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与course大学物理有关,且与student杜思琪有关系的department节点",
        "output": "match(a:course where a.name='大学物理')-[e:belong]-(b:department)-[e2:has]-(c:student where c.name='杜思琪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和标签等于buyer的点有consult关系的seller,且和这些seller有ask关系的buyer,且和这些buyer有look关系的goods",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:ask]->(c:buyer)-[e3:look]->(d:goods) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与person节点关联的account节点的name、createTime和lastLoginTime,并按组分组。",
        "output": "match(a:person)-[e:own]-(b:account) return b.name, b.createTime, b.lastLoginTime group by b.name, b.createTime, b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询包含用户杜红喜欢的帖子,的论坛",
        "output": "match(a:user where name = '杜红')-[e:likes]->(b:post)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为goods的点,并根据sellerNumber从小到大排列",
        "output": "match(a:goods) return a order by a.sellerNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与华中科技大学相关的大学，以及华中科技大学拥有的其他部门。",
        "output": "match(a:university where a.name = '华中科技大学')-[e]-(b:university), (a:university)-[e2:has]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前73个age为21的person",
        "output": "match(a:person where a.age = 21) return a limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与韩建国和孙建国有关的人，共有162个。",
        "output": "match(a where a.name='韩建国')-[e]->(b:person)<-[e2]-(c where c.name='孙建国') return b limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的价值减433的平均值",
        "output": "match(a:company) return AVG(a.value - 433)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person李思思提交的软件,以及使用这些软件的软件",
        "output": "match(a:person where name = '李思思')-[e:commits]->(b:software)<-[e2:uses]-(c:software) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和类型是person的点有喜欢关系的person,以及和这些person有认识关系的person,以及和这些person有支付关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:knows]->(c:person)-[e3:pay]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person belong数量大于165的company,记为relationCount,再查询这些company belong的person",
        "output": "match(a:company) let a.relationCount = MIN((a:company)<-[e:belong]-(b:person) => b.id) match(a where a.relationCount > 165)-[e2:belong]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据价值,销量,类别分组,计算价格减4595.84的值",
        "output": "return a.price - 4595.84 group by a.value, a.sellerNumber, a.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为华中科技大学的点合作的公司",
        "output": "match(a where a.name='华中科技大学')-[e:cooperate]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person徐梅和赵雪都存在喜欢关系的点",
        "output": "match(a:person where a.name='徐梅')-[e:likes]->(b)<-[e2:likes]-(c:person where c.name='赵雪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "寻找与复旦大学朋友的伙伴相关的人。",
        "output": "match(a:university where a.name='复旦大学')-[e:friend]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为郑国强的点发布的书",
        "output": "match(a where a.name='郑国强')-[e:publish]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有部门的相关者,或其相关者的相关者",
        "output": "match(a:department)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回77个名为数学学院的点拥有的类型是学生的节点,且节点名字不是王科或性别不是famale",
        "output": "match(a where a.name='数学学院')-[e:has]->(b:student where b.name <> '王科' or b.gender <> 'famale') return b limit 77",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用SSSP函数,以'gy', 41, 51作为输入,返回id, distance",
        "output": "Call SSSP('gy', 41, 51) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回以喜欢关系关联了帖子Post_171的用户",
        "output": "match(a:post where a.name='Post_171')<-[e:likes]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出大学属于的城市, 令城市的人数的值等于包含城市的国家的id的求和值, 再查找城市属于的国家",
        "output": "match(a:university)-[e:belong]->(b:city) let b.peopleNumber = SUM((b:city)<-[e2:contain]-(c:country) => c.id) match(b:city)-[e3:belong]->(d:country) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找马月和韩红医生的朋友节点名单。",
        "output": "match(a:doctor where a.name='马月')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='韩红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('male','吴轩',7),('male','徐宏',74),('famale','徐强',87)作为请求表数据,属性分别为gender,name,id, 以属性name作为相等条件,查找全部源点标签等于person,目标点标签等于person,标签等于person_pay_person的边",
        "output": "with p as (select * from (VALUES('male','吴轩',7),('male','徐宏',74),('famale','徐强',87)) as t(gender,name,id))MATCH (a:person WHERE a.name = p.name) -[e:person_pay_person ]->(b:person) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和合并请求PR-79之间有属于关系的仓库",
        "output": "match(a:pullRequest where a.name='PR-79')-[e:belong]->(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回film的1度的环",
        "output": "match(a:film)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出取消了马梅或孙强订单的点",
        "output": "match(a:buyer where a.name='马梅')-[e:cancel]->(b)<-[e2:cancel]-(c:buyer where c.name='孙强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与书孤城有引用关系的1跳的环",
        "output": "match(a:book where name = '孤城')-[e:refers]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有从大学到公司的、合作关系标签为cooperate的边。",
        "output": "match(a:university)-[e:cooperate]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "学分减4加1的最大值",
        "output": "MAX(a.credit - 4 + 1)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(21,'Comment_484',1999-04-17),(473,'Comment_213',2013-08-02),(531,'Comment_397',2033-11-06),(302,'Comment_317',2024-04-22)作为请求表数据,属性分别为wordCount,name,createTime, 以属性wordCount作为相等条件,查找和电影有关联的标签节点,并根据其id,名字,价值分组,返回id,名字,价值,以及价值减价值的值",
        "output": "with p as (select * from (VALUES(21,'Comment_484',1999-04-17),(473,'Comment_213',2013-08-02),(531,'Comment_397',2033-11-06),(302,'Comment_317',2024-04-22)) as t(wordCount,name,createTime))MATCH (a:film WHERE a.wordCount = p.wordCount) -[e:film_has_tag ]-(b:tag) RETURN b.id, b.name, b.value, b.value - b.value GROUP BY b.id, b.name, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为11的医生有关的医生的朋友, 再请帮我找出和医生有关系的朋友",
        "output": "match(a:doctor where id = 11)-[e]-(b:doctor)-[e2:friend]->(c), (b:doctor)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点id不为空,边label为创造,且满足条件时间戳不是2010年11月01日或f0为空或目标点id为空的边,返回这些边的源点id对51取余的求和值",
        "output": "match(a where (a.id is not null))-[e:creates where e.timeStamp <> '2010-11-01' or (e.f0 is null) or (e.targetId is null)]->(b) return SUM(e.srcId % 51)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签为存款,以及源点id不为空或f1为true,且目标点id在68到167之间的边",
        "output": "match(a)-[e:deposit where ((e.srcId is not null) or e.f1 = true) and (e.targetId BETWEEN 68 AND 167)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前178个满足条件name是枇杷糖浆且id为93的medicine",
        "output": "match(a:medicine where a.name = '枇杷糖浆' and a.id = 93) return a limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person李科购买的软件,以及使用这些软件的软件, 令软件(b)的名字等于软件(c)的价值除650,令软件(b)的价值等于软件(c)的星数对星数取余, 返回person(a)的名字,软件(b)的星数,软件(c)的id",
        "output": "match(a:person where name = '李科')-[e:buy]->(b:software)<-[e2:uses]-(c:software) let b.name = c.value / 650,let b.value = c.stars % c.stars return a.name,b.stars,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 先查找与部门ID为190的学生有关的伙伴，再查找这些学生伙伴的伙伴。",
        "output": "match(a:department where id = '190')-[e]-(b:student)-[e2:partner]->(c), (b:student)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和account Faker有1到3度关系的account",
        "output": "match(a:account where a.name='Faker')-[e]->{1,3}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出城市的三角的环,边标签为属于, 并返回这些点的id",
        "output": "match(a:city)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出权重大于395的94个处方，按照id从大到小排序",
        "output": "match(a:prescription where a.weight > 395) return a order by a.id desc limit 94",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找172个名为周思思的点喜欢的标签等于仓库的节点,且节点语言为c,名字是Flink",
        "output": "match(a where a.name='周思思')-[e:likes]->(b:repository where b.lang = 'c' and b.name = 'Flink') return b limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出同时在滴滴和微软申请过职位的人。",
        "output": "match(a:company where a.name='滴滴')-[e:apply]->(b)<-[e2:apply]-(c:company where c.name='微软') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的薪资除8096的值",
        "output": "match(a:person) return a.salary / 8096",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 孙雪写的书回来了。",
        "output": "match(a:book)<-[e:write]-(b:author where b.name='孙雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点label为buyer,边label为cancel,且targetId等于191或targetId大于115,且timeStamp为1999年06月05日的边",
        "output": "match(a:buyer)-[e:cancel where (e.targetId = 191 or e.targetId > 115) and e.timeStamp = '1999-06-05']->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最小值对82取余乘42除820的和",
        "output": "SUM(MIN(a.id) % 82 * 42 / 820)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出person陈强申请的贷款,被其他公司申请的数量",
        "output": "match(a:person where a.name='陈强')-[e:person_apply_loan]->(b:loan)<-[e2:company_apply_loan]-(c:company) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(183,'何国强','famale'),(181,'何建国','male'),(195,'韩思思','male'),(188,'吴伟','male')作为请求表数据,属性分别为height,name,gender, 以属性gender作为相等条件,找出所有和person点有认识关系的person节点,且边满足条件f1为true,目标person节点满足条件薪资大于等于1462",
        "output": "with p as (select * from (VALUES(183,'何国强','famale'),(181,'何建国','male'),(195,'韩思思','male'),(188,'吴伟','male')) as t(height,name,gender))MATCH (a:person WHERE a.gender = p.gender) -[e:person_knows_person WHERE e.f1 = TRUE ]->(b:person WHERE b.salary >= 1462) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出公司字节属于的城市节点属于的国家",
        "output": "match(a:company where a.name = '字节')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,height, 数据为(33,'陈思思',195),(80,'张思思',187), 以属性height作为相等条件,找出满足条件height不为空的节点",
        "output": "with p as (select * from (VALUES(33,'陈思思',195),(80,'张思思',187)) as t(id,name,height))MATCH (a WHERE a.height = p.height AND (a.height IS NOT NULL)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为张月的 person 有直接或间接父母关系的所有 person",
        "output": "match(a:person where n.name=张月)-[e:parent]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有贷款以id,金额,权重分组的id, 根据id从大到小排序",
        "output": "match(a:loan) return a.id group by a.id, a.amount, a.weight order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Prescription_170和Prescription_338的,标签为处方的点公共的相关者节点的名单",
        "output": "match(a:prescription where a.name='Prescription_170')-[e:relation]->(b)<-[e2:relation]-(c:prescription where c.name='Prescription_338') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高减身高的值",
        "output": "a.height - a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出书认识的书,返回其源点的价格减价格的值,以及目标点的id乘id的值",
        "output": "match(a:book)-[e:knows]->(b:book) return a.price - a.price, b.id * b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以793,462,782,867,349作为请求点id, 以属性id作为相等条件,请帮我找出公司合作的大学,返回其源点的id除id的最大值,以及目标点的等级减等级除3除978的和",
        "output": "with p as (select * from (VALUES(793),(462),(782),(867),(349)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_cooperate_university ]->(b:university) RETURN MAX(a.id / a.id), SUM((b.level - b.level) / 3 / 978) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有类型为账号或公司的点",
        "output": "match(a:account | company) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回王宏的伙伴的伙伴的伙伴。",
        "output": "match(a:user where a.name='王宏')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为李建国的点认识的person",
        "output": "match(a where a.name='李建国')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询账号还款的贷款,返回其源点的价值乘819对72取余的值,以及目标点的金额减金额的和",
        "output": "match(a:account)-[e:repay]->(b:loan) return a.value * 819 % 72, SUM(b.amount - b.amount)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为吴月的person,以及与其有关的person,并返回吴月的年龄和这些person的身高",
        "output": "match(a:person where name = '吴月')-[e]-(b:person) return a.age, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有卖家以年龄分组的id, 根据id降序排序",
        "output": "match(a:seller) return a.id group by a.age order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为周若涵的点取消的订单,并对这些订单的价格进行求和",
        "output": "match(a where a.name='周若涵')-[e:cancel]->(b:orders) return SUM(b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和forum点有contain关系的post节点,且边满足条件targetId在164到194之间,目标post节点lang为Chinese",
        "output": "match(a:forum)-[e:contain where (e.targetId BETWEEN 164 AND 194)]->(b:post where b.lang = 'Chinese') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前42个名字是Order_494的订单",
        "output": "match(a:orders where a.name = 'Order_494') return a limit 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与标签其他有关系的标签的id",
        "output": "match(a:tag where a.name='其他')-[e]-(b:tag) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点label为person,目标点label为person,label为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,age,name, 数据为('famale',99,'赵思琪')的子查询作为输入表, 源点的age等于输入表age,找出名为杜梅的,name等于Prescription_465,createTime不是1995年12月12日的partner,返回这些partner的weight,和边的weight,f1",
        "output": "with p as (select * from (VALUES('famale',99,'赵思琪')) as t(gender,age,name))MATCH (a WHERE a.age = p.age AND (a.name = '杜梅')) -[e:partner ]->(b WHERE b.name = 'Prescription_465' AND b.createTime <> '1995-12-12') RETURN b.weight, e.weight, e.f1 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询公司腾讯的全部标签为伙伴的边,并根据f0降序排列,返回73个",
        "output": "match(a:company where a.name = '腾讯')-[e:partner]->(b) return b order by e.f0 desc limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和帖子有关联的标签节点,并根据其id,名字,价值分组,返回id,名字,价值,以及value的最小值对价值取余的和",
        "output": "match(a:post)-[e:has]-(b:tag) return b.id, b.name, b.value, SUM(MIN(b.value) % b.value) group by b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部film以id,category分组的name, 根据name从大到小排序",
        "output": "match(a:film) return a.name group by a.id, a.category order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出value大于等于567且value大于877的节点",
        "output": "match(a where a.value >= 567 and a.value > 877) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和病人郑若涵有关的处方,再找出和郑若涵接受的其他处方,返回它们",
        "output": "match(a:patient where a.name = '郑若涵')-[e]-(b:prescription), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value减19的平均值",
        "output": "AVG(a.value - 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为何月和周轩的,标签为person的点公共的同事节点的名单",
        "output": "match(a:person where a.name='何月')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='周轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person赵伟有关系的loan的weight",
        "output": "match(a:person where a.name='赵伟')-[e]-(b:loan) return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与医生马科有关系的部门, 返回和这些部门有关联的部门的,权重对763取余的最大值",
        "output": "match(a:doctor where a.name= '马科')-[e]-(b:department)-[e2]-(c:department) return MAX(c.weight % 763)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id除id减97的平均值",
        "output": "return AVG(a.id / a.id - 97) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和person Amily有认识关系的person,再帮我查询以喜欢关系关联了Amily的person",
        "output": "match(a:person where a.name = 'Amily')-[e:knows]->(b:person),(a:person where a.name = 'Amily')<-[e2:likes]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出salary从高到低的所有name为杜思琪的person。",
        "output": "match(a:person where a.name = '杜思琪') return a order by a.salary desc limit 49",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问，从《罪与罚》出发，经过'引用'标签的边，然后走2度或3度到达哪本书？",
        "output": "match(a:book where a.name='罪与罚')-[e:refers]->{2,3}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找46个与喜剧和其他都存在关系的帖子节点",
        "output": "match(a where a.name='喜剧')-[e]->(b:post)<-[e2]-(c where c.name='其他') return b limit 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为标签,名为其他的点,返回这些点的id,名字",
        "output": "match(a:tag where a.name = '其他') return a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被person吴建聪apply的loan,和吴建聪own的account",
        "output": "match(a:loan)<-[e:apply]-(b:person where name = '吴建聪')-[e2:own]->(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询标签等于拥有,以及满足条件权重不为空或源点id为空或f0大于等于813的边",
        "output": "match(a)-[e:has where (e.weight is not null) or (e.srcId is null) or e.f0 >= 813]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找申请账号LX001还款的贷款,的公司",
        "output": "match(a:account where name = 'LX001')-[e:repay]->(b:loan)<-[e2:apply]-(c:company) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person的三角的环,边label为family, 并返回这些点的id",
        "output": "match(a:person)-[e:family]->(b)-[e2:family]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person张强认识的person",
        "output": "match(a:person)<-[e:knows]-(b:person where b.name='张强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为苹果的goods,以及与其有关的orders,并返回苹果的name和这些orders的id",
        "output": "match(a:goods where name = '苹果')-[e]-(b:orders) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为has,且满足条件weight不为空或f1等于true或srcId大于592的边",
        "output": "match(a)-[e:has where (e.weight is not null) or e.f1 = true or e.srcId > 592]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出医生杜伟属于的部门,以及属于这些部门的医生, 令部门的id等于医生的id的最大值除id对年龄取余,令医生的id等于部门的id的最大值除49除847加84, 返回医生(a)的id,部门(b)的权重,医生(c)的名字",
        "output": "match(a:doctor where name = '杜伟')-[e:belong]->(b:department)<-[e2:belong]-(c:doctor) let b.id = MAX(a.id) / a.id % a.age,let a.id = MAX(b.id) / 49 / 847 + 84 return a.id,b.weight,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为黄梅的,年龄不是68或年龄为空的相关者,返回这些相关者的名字,和边的目标点id,f0",
        "output": "match(a where a.name='黄梅')-[e:relation]->(b where b.age <> 68 or (b.age is null)) return b.name,e.targetId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出位于重庆的公司，获取这些公司的合作大学的名称、ID和级别。",
        "output": "match(a:city where name = '重庆')-[e:contain]->(b:company)-[e2:cooperate]->(c:university) return c.name, c.id, c.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按性别和身高对教师的年龄进行分组，并按照年龄从大到小排序",
        "output": "match(a:teacher) return a.age group by a.gender, a.height order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以24, 'ZC'作为输入,返回运算结果",
        "output": "Call PAGERANK(24, 'ZC') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "按身高从高到低，列出每个人所属的身高组。",
        "output": "match(a:person) return a.height group by a.height order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询投资公司微软的person,和这些person拥有的账号",
        "output": "match(a:company where name = '微软')<-[e:invest]-(b:person)-[e2:own]->(c:account) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person周强喜欢的评论, 令评论的名字等于person的薪资的最大值,令评论的字数等于评论的id对7取余减41, 返回person的性别, 评论的id",
        "output": "match(a:person where a.name='周强')-[e:likes]->(b:comment) let b.name = MAX(a.salary),let b.wordCount = b.id % 7 - 41 return a.gender,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为越南和中国的,类型为country的点公共的friend节点的名单",
        "output": "match(a:country where a.name='越南')-[e:friend]->(b)<-[e2:friend]-(c:country where c.name='中国') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被作家王轩撰写的书,和王轩认识的作家",
        "output": "match(a:book)<-[e:write]-(b:author where name = '王轩')-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有来自作者，目标为书籍，类型为写作的边。",
        "output": "match(a:author)-[e:write]->(b:book) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与用户吴科和赵强都存在喜欢关系的点",
        "output": "match(a:user where a.name='吴科')-[e:likes]->(b)<-[e2:likes]-(c:user where c.name='赵强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person杜建国pay的person,以及knows这些person的person, 令person(c)的age等于person(a)的height, 返回person(a)的height,person(b)的name,person(c)的id",
        "output": "match(a:person where name = '杜建国')-[e:pay]->(b:person)<-[e2:knows]-(c:person) let c.age = a.height return a.height,b.name,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以认识关系关联了person黄月的person",
        "output": "match(a:person where a.name='黄月')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为人人影城的,类别是科幻的伙伴,返回这些伙伴的名字,和边的权重",
        "output": "match(a where a.name='人人影城')-[e:partner]->(b where b.category = '科幻') return b.name,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和seller点有has关系的goods节点,且边满足条件f0等于713,目标goods节点满足条件name等于矿泉水",
        "output": "match(a:seller)-[e:has where e.f0 = 713]->(b:goods where b.name = '矿泉水') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前115个满足条件星数大于422,是否开源不是false的软件",
        "output": "match(a:software where a.stars > 422 and a.openSource <> false) return a limit 115",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出用户徐月发布的帖子，并返回这些帖子所包含的标签的值和名称。",
        "output": "match(a:user where name = '徐月')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person韩强pay的person节点likes的person",
        "output": "match(a:person where a.name = '韩强')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前33个满足条件name不是文艺的tag",
        "output": "match(a:tag where a.name <> '文艺') return a limit 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与151个人物类型的点有喜欢关系的评论，并且这些评论与电影有关联。",
        "output": "match(a:person)-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c limit 151",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和person杜梅有关系的评论或person,返回这些点的名字,创建时间",
        "output": "match(a:person where a.name='杜梅')-[e]-(b:comment | person) return b.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出作家黄若涵撰写的书, 令作家的id等于书的id的最小值减31,令书的薪资等于作家的身高对身高取余, 返回作家的性别, 书的价格",
        "output": "match(a:author where a.name='黄若涵')-[e:write]->(b:book) let a.id = MIN(b.id) - 31,let b.salary = a.height % a.height return a.gender,b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找buyer郑国强的类型为partner的边,并根据f0从小到大排列,返回85个",
        "output": "match(a:buyer where a.name = '郑国强')-[e:partner]->(b) return b order by e.f0 asc limit 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签等于软件,边标签等于使用,以及满足条件源点id对源点id取余加f0小于等于119或f0大于等于824,且f0不为空的边",
        "output": "match(a:software)-[e:uses where (e.srcId % e.srcId + e.f0 <= 119 or e.f0 >= 824) and (e.f0 is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询病人韩思琪的标签为朋友的边,并根据权重降序排列,返回68个",
        "output": "match(a:patient where a.name = '韩思琪')-[e:friend]->(b) return b order by e.weight desc limit 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 陈若涵的点creates prescription,同时她也有department。",
        "output": "match(a where a.name = '陈若涵')-[e:creates]->(b:prescription),(a where a.name = '陈若涵')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生张建聪诊断的病人, 令病人的性别等于医生的性别,令病人的id等于医生的性别,令病人的身高等于病人的id的最大值减id, 返回医生的性别, 病人的身高",
        "output": "match(a:doctor where a.name='张建聪')-[e:diagnose]->(b:patient) let b.gender = a.gender,let b.id = a.gender,let b.height = MAX(b.id) - b.id return a.gender,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是person的点,并根据id从小到大排列",
        "output": "match(a:person) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和名为Hive的software有partner关系,或有partner的partner关系的software",
        "output": "match(a:software where n.name=Hive)-[e:partner]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被仓库拥有数量大于40的用户,记为relationCount,再查询这些用户拥有的用户",
        "output": "match(a:user) let a.relationCount = AVG((a:user)<-[e:has]-(b:repository) => b.id) match(a where a.relationCount > 40)-[e2:has]->(c:user) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点id大于45或薪资不为空,且性别为famale,边标签等于创造,且满足条件时间戳大于等于105,f0小于等于877的边,返回这些边的f0除864的值",
        "output": "match(a where (a.id > 45 or (a.salary is not null)) and a.gender = 'famale')-[e:creates where e.timeStamp >= 105 and e.f0 <= 877]->(b) return e.f0 / 864",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从Post_198出发，沿着has类型的边走2到5度，可以到达哪个Tag点？",
        "output": "match(a:post where a.name='Post_198')-[e:has]->{2,5}(b:tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,id,height, 数据为(6627,91,184),(7410,13,179),(3526,91,193), 源点的salary等于输入表salary,查询和大学点有拥有关系的部门节点,且边满足条件f1不等于true,目标部门节点满足条件名字不等于物理学院",
        "output": "with p as (select * from (VALUES(6627,91,184),(7410,13,179),(3526,91,193)) as t(salary,id,height))MATCH (a:university WHERE a.salary = p.salary) -[e:university_has_department WHERE e.f1 <> TRUE ]->(b:department WHERE b.name <> '物理学院') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询名为王建聪的卖家,以及与其有关的买家,并返回王建聪的名字和这些买家的名字",
        "output": "match(a:seller where name = '王建聪')-[e]-(b:buyer) return a.name, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与issue ISSUE-255和ISSUE-478都存在belong关系的点",
        "output": "match(a:issue where a.name='ISSUE-255')-[e:belong]->(b)<-[e2:belong]-(c:issue where c.name='ISSUE-478') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有经管学院的点拥有的学生,然后返回经管学院被属于的课程,一起返回",
        "output": "match(a where a.name = '经管学院')-[e:has]->(b:student),(a where a.name = '经管学院')<-[e2:belong]-(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为Prescription_352的,id为空或权重不为空的伙伴,返回这些伙伴的名字,和边的f1,f0,目标点id",
        "output": "match(a where a.name='Prescription_352')-[e:partner]->(b where (b.id is null) or (b.weight is not null)) return b.name,e.f1, e.f0, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与book悲惨世界有关系的author的gender",
        "output": "match(a:book where a.name='悲惨世界')-[e]-(b:author) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为Light和BIN的点共同还款的,类型为贷款的节点",
        "output": "match(a where a.name = 'Light')-[e:repay]->(b:loan)<-[e2:repay]-(c where c.name = 'BIN') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出马建国所有的货物，然后和一个买家一起回来，这是马建国被咨询的内容。",
        "output": "match(a where a.name = '马建国')-[e:has]->(b:goods),(a where a.name = '马建国')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生属于的部门,返回其源点的身高减身高的值,以及目标点的id除85的值",
        "output": "match(a:doctor)-[e:belong]->(b:department) return a.height - a.height, b.id / 85",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表865,733,616,308, 源点的id等于输入表id,请帮我查找所有id为51的person关联的person,和以likes关系关联了这些person的其他person",
        "output": "with p as (select * from (VALUES(865),(733),(616),(308)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.id = '51')) -[e ]-(b:person) <-[e2:person_likes_person ]-(c:person) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出接受名为韩强和马思思的点共同批准的处方类型的节点",
        "output": "match(a where a.name = '韩强')-[e:accept]->(b:prescription)<-[e2:accept]-(c where c.name = '马思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出年龄降序的人。",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表963,946, 源点的id等于输入表id,请帮我找出和用户Jack有user_likes_post关系的帖子,以及和论坛中国军事论坛有forum_contain_person关系的person,将它们都返回",
        "output": "with p as (select * from (VALUES(963),(946)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = 'Jack')) -[e:user_likes_post ]->(b:post) , (c:forum WHERE c.name = '中国军事论坛') -[e2:forum_contain_person ]->(d:person) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为郑雪的点relates的所有person,并对这些person的salary进行求和",
        "output": "match(a where a.name='郑雪')-[e:relates]->(b:person) return SUM(b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出以拥有关系关联了学生徐强的部门",
        "output": "match(a:student where a.name='徐强')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被买家kate查看的商品",
        "output": "match(a:goods)<-[e:look]-(b:buyer where b.name='kate') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与大学有关系的公司节点,且公司节点的价值大于等于738,并返回这些公司的id的求和值对93取余的最大值,以及公司的人数乘659的值",
        "output": "match(a:university)-[e]->(b:company where b.value >= 738) return MAX(SUM(b.id) % 93), b.peopleNumber * 659",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我按名字和性别分组，然后按照性别降序排序买家列表。",
        "output": "match(a:buyer) return a.gender group by a.name, a.gender order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减id的平均值",
        "output": "AVG(a.id - a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查找郑宏和吴宏的共同同事？",
        "output": "match(a:person where a.name='郑宏')-[e:colleague]->(b)<-[e2:colleague]-(c:person where c.name='吴宏') return b limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与孙月有关的人，然后获取这些人的同事，并返回所有结果。",
        "output": "match(a:person where a.name = '孙月')-[e]-(b:person), (a:person)-[e2:colleague]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点类型为电影,边类型为拥有的边,返回这些边的目标点id减目标点id减权重的平均值,和权重乘125.47的最大值",
        "output": "match(a:film)-[e:has]->(b) return AVG(e.targetId - e.targetId - e.weight), MAX(e.weight * 125.47)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询全部名为韩若涵的,名字为腾讯的伙伴,返回这些伙伴的名字,和边的时间戳",
        "output": "match(a where a.name='韩若涵')-[e:partner]->(b where b.name = '腾讯') return b.name,e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找性别为famale,id不为空,名字小于等于3787的节点",
        "output": "match(a where a.gender = 'famale' and (a.id is not null) and a.name <= 3787) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出评论Comment_298的朋友,的源点id乘15加118.03乘108的值",
        "output": "match(a:comment where a.name= 'Comment_298')-[e:friend]->(b) return (e.srcId * 15 + 118.03) * 108",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部software以value,id分组的id, 根据id升序排序",
        "output": "match(a:software) return a.id group by a.value, a.id order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出一个拥有大学和大学部门、教师和课程的拥有/教关系图。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:teacher)-[e3:teach]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表644,628, 源点的id等于输入表id,找出全部id为192的买家关联的商品,和以包含关系关联了这些商品的其他订单",
        "output": "with p as (select * from (VALUES(644),(628)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.id = '192')) -[e ]-(b:goods) <-[e2:orders_contain_goods ]-(c:orders) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询所有源点类型是person,边类型是person_apply_loan的边,返回这些边的f0乘824的最大值,和f0对876取余的平均值",
        "output": "match(a:person)-[e:person_apply_loan]->(b) return MAX(e.f0 * 824), AVG(e.f0 % 876)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找叫吴若涵的人，他们有哪些信息，比如薪水、身高和年龄。",
        "output": "match(a:person where a.name = '吴若涵') return a.salary, a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有起点和终点都是人，且标签为'lover'的边。",
        "output": "match(a:person)-[e:lover]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回药品名大于85的id,并按名称从大到小排序。",
        "output": "match(a:medicine where a.id > 85) return a order by a.name desc limit 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与person节点相关的person节点，并按其height进行分组，然后返回这些节点的高度。",
        "output": "match(a:person)-[e:pay]-(b:person) return b.height group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找编辑杜宏的相关者,的权重除162.44的平均值",
        "output": "match(a:publisher where a.name= '杜宏')-[e:relation]->(b) return AVG(e.weight / 162.44)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为university的所有点,并根据value从小到大排列",
        "output": "match(a:university) return a order by a.value asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回XiaoHu的转账账号和被存款的贷款信息",
        "output": "match(a where a.name = 'XiaoHu')-[e:transfer]->(b:account),(a where a.name = 'XiaoHu')<-[e2:deposit]-(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为company的所有点,并根据value降序排列",
        "output": "match(a:company) return a order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和名为Alice的person有朋友关系,或有朋友的朋友关系的评论",
        "output": "match(a:person where n.name=Alice)-[e:friend]->{1,2}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person赵若涵认识的person,以及认识这些person的person",
        "output": "match(a:person where name = '赵若涵')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回包含纽约的城市公司，以及与纽约有关联的公司。",
        "output": "match(a:city where a.name = '纽约')-[e:contain]->(b:company),(a:city where a.name = '纽约')<-[e2:contain]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为size,value,id, 数据为(61,845,68),(83,139,92),(59,120,14),(78,461,8), 源点的value等于输入表value,请帮我找出所有名为徐建聪的,课时为43的朋友,返回这些朋友的id,和边的目标点id,f0",
        "output": "with p as (select * from (VALUES(61,845,68),(83,139,92),(59,120,14),(78,461,8)) as t(size,value,id))MATCH (a WHERE a.value = p.value AND (a.name = '徐建聪')) -[e:friend ]->(b WHERE b.courseHour = 43) RETURN b.id, e.targetId, e.f0 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出赵建国和韩建国之间共同拥有的关系，特别是涉及金钱方面的。",
        "output": "match(a:person where a.name='赵建国')-[e:pay]->(b)<-[e2:pay]-(c:person where c.name='韩建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));给出和编辑有关联的书节点,并根据其字数,价格分组,返回字数,价格,以及价格加68的求和值",
        "output": "match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.wordCount, b.price, SUM(b.price + 68) group by b.wordCount, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person马建国认识的person,被其他person支付的数量",
        "output": "match(a:person where a.name='马建国')-[e:knows]->(b:person)<-[e2:pay]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与名为吴强的人有关联的人员，包括其伙伴或者伙伴的伙伴。",
        "output": "match(a:person where n.name=吴强)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除82的值",
        "output": "a.id / 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从仓库FSM出发,经过类型为拥有的边,走1跳到达的合并请求点",
        "output": "match(a:repository where a.name='FSM')-[e:has]->{1,1}(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为操作系统和高等数学的,标签等于课程的点公共的相关者节点的名单",
        "output": "match(a:course where a.name='操作系统')-[e:relation]->(b)<-[e2:relation]-(c:course where c.name='高等数学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和教师陈建国有关的学生,再帮我查询和陈建国教的其他课程,返回它们",
        "output": "match(a:teacher where a.name = '陈建国')-[e]-(b:student), (a:teacher)-[e2:teach]->(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为createTime,id,lang, 数据为(2002-10-17,77,'Japanese'),(2022-08-18,73,'French'), 源点的id等于输入表id,请帮我找出147个名字不等于Post_305的帖子,根据语言升序排列",
        "output": "with p as (select * from (VALUES(2002-10-17,77,'Japanese'),(2022-08-18,73,'French')) as t(createTime,id,lang))MATCH (a:post WHERE a.id = p.id AND (a.name <> 'Post_305')) RETURN a ORDER BY a.lang LIMIT 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于reader,名为赵科的点,返回这些点的age",
        "output": "match(a:reader where a.name = '赵科') return a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前87个标签为creates的边",
        "output": "match(a)-[e:creates]->(b) return e limit 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "列出四川大学的所有部门",
        "output": "match(a:department)<-[e:has]-(b:university where b.name='四川大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询评论属于的电影, 令电影的价值的值等于属于电影的评论的创建时间的数量, 再查找电影拥有的标签",
        "output": "match(a:comment)-[e:belong]->(b:film) let b.value = COUNT((b:film)<-[e2:belong]-(c:comment) => c.createTime) match(b:film)-[e3:has]->(d:tag) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'person'的所有点，按身高从高到低排序。",
        "output": "match(a:person) return a order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表757,2,222,678,152, 以属性id作为相等条件,帮我查询全部id为15的company关联的university,和以cooperate关系关联了这些university的其他company",
        "output": "with p as (select * from (VALUES(757),(2),(222),(678),(152)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.id = '15')) -[e ]-(b:university) <-[e2:company_cooperate_university ]-(c:company) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出account的1跳的环",
        "output": "match(a:account)->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height乘193的最小值",
        "output": "MIN(a.height * 193)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出创建时间为2031年07月09日的节点",
        "output": "match(a where a.createTime = '2031-07-09') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表690,546,268, 以属性id作为相等条件,请帮我找出person李梅的relation的friend的friend",
        "output": "with p as (select * from (VALUES(690),(546),(268)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李梅')) -[e:relation ]->(b) -[e2:friend ]->(c) -[e3:friend ]->(d) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从大学清华大学出发,经过标签为拥有的边,走2度到达的部门点",
        "output": "match(a:university where a.name='清华大学')-[e:has]->{2,2}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出性别为famale的节点",
        "output": "match(a where a.gender = 'famale') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表196,809,578,963, 源点的id等于输入表id,给出所有与account有关系的company节点,且company节点的peopleNumber大于等于907,并返回这些点的id除75除927的和,以及peopleNumber的最大值乘972的最小值",
        "output": "with p as (select * from (VALUES(196),(809),(578),(963)) as t(id)) MATCH (a:account WHERE a.id = p.id) -[e ]->(b:company WHERE b.peopleNumber >= 907) RETURN SUM(b.id / 75 / 927), MIN(MAX(b.peopleNumber) * 972) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为耳鼻喉科的,salary大于等于1690且name等于李红的relation,返回这些relation的id,和边的targetId,srcId",
        "output": "match(a where a.name='耳鼻喉科')-[e:relation]->(b where b.salary >= 1690 and b.name = '李红') return b.id,e.targetId, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找贷款loan_48存款的账号, 令贷款的创建时间等于账号的id,令账号的id等于贷款的金额除7104.95, 返回贷款的id, 账号的id",
        "output": "match(a:loan where a.name='loan_48')-[e:deposit]->(b:account) let a.createTime = b.id,let b.id = a.amount / 7104.95 return a.id,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有与person赵国强有关系的person的gender",
        "output": "match(a:person where a.name='赵国强')-[e]-(b:person) return b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以287作为请求点id, 以属性id作为相等条件,请帮我查找前68个类型为user_likes_post的边",
        "output": "with p as (select * from (VALUES(287)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:user_likes_post ]->(b) RETURN e LIMIT 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找公司蚂蚁集团属于的城市,以及属于这些城市的大学",
        "output": "match(a:company where name = '蚂蚁集团')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有以name、weight、address分组的department,并按name从小到大的顺序排序。",
        "output": "match(a:department) return a.name group by a.name, a.weight, a.address order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和company华为有employee关系的person,再返回以employee关系关联了华为的person",
        "output": "match(a:company where a.name = '华为')-[e:employee]->(b:person),(a:company where a.name = '华为')<-[e2:employee]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回195个salary不为空或gender不是male的person,根据age降序排列",
        "output": "match(a:person where (a.salary is not null) or a.gender <> 'male') return a order by a.age desc limit 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司的3跳的环",
        "output": "match(a:company)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于朋友,以及满足条件权重是29的边",
        "output": "match(a)-[e:friend where e.weight = 29]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为阿里和蚂蚁集团的,label为company的点公共的friend节点的名单",
        "output": "match(a:company where a.name='阿里')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='蚂蚁集团') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找和买家有关联的订单节点,并根据其价值分组,返回价值,以及价值乘268的最小值",
        "output": "match(a:buyer)-[e:buyer_cancel_orders]-(b:orders) return b.value, MIN(b.value * 268) group by b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据level分组,计算id除22的值",
        "output": "return a.id / 22 group by a.level",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为16的tag有关的forum的friend, 再请帮我找出和forum有关系的friend",
        "output": "match(a:tag where id = 16)-[e]-(b:forum)-[e2:friend]->(c), (b:forum)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回账号还款的贷款,返回其源点的id乘74的值,以及目标点的id加5的值",
        "output": "match(a:account)-[e:repay]->(b:loan) return a.id * 74, b.id + 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前172个id是25或height大于164或salary小于9788的seller",
        "output": "match(a:seller where a.id = 25 or a.height > 164 or a.salary < 9788) return a limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出198个名为徐梅的点查看的标签为商品的节点,且其价格大于114.18",
        "output": "match(a where a.name='徐梅')-[e:look]->(b:goods where b.price > 114.18) return b limit 198",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回类型是发布,以及满足条件f1是false,时间戳是2024年05月28日,f1不是true的边",
        "output": "match(a)-[e:publish where e.f1 = false and e.timeStamp = '2024-05-28' and e.f1 <> true]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person郑若涵认识的person,和郑若涵购买的软件",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '郑若涵')-[e2:buy]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有被名为赵月和赵科的点都喜欢的、label为person的节点",
        "output": "match(a where a.name = '赵月')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '赵科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和company华为有关的company,再给出和华为employee的其他person,返回它们",
        "output": "match(a:company where a.name = '华为')-[e]-(b:company), (a:company)-[e2:employee]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出city武汉的所有类型是partner的边,并根据weight降序排列,返回54个",
        "output": "match(a:city where a.name = '武汉')-[e:partner]->(b) return b order by e.weight desc limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person马建国有恋人关系的person,再给出以同事关系关联了马建国的person",
        "output": "match(a:person where a.name = '马建国')-[e:lover]->(b:person),(a:person where a.name = '马建国')<-[e2:colleague]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与订单相关的非男性买家，并计算他们的薪资除以4191的数量，以及年龄对年龄取余的求和。",
        "output": "match(a:orders)-[e]->(b:buyer where b.gender <> 'famale') return COUNT(b.salary / 4191), SUM(b.age % b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的和乘61的平均值",
        "output": "AVG(SUM(a.id) * 61)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为publisher的点,返回134个",
        "output": "match(a:publisher) return a limit 134",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与郑强有关联的诊断医生",
        "output": "match(a:patient where a.name='郑强')<-[e:diagnose]-(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出buyer类型的源点和creates类型的边，然后将这些边的weight除以193.48，并将结果与srcId相乘23。",
        "output": "match(a:buyer)-[e:creates]->(b) return e.weight / 193.48, e.srcId * 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和医生杜梅之间有诊断关系的病人",
        "output": "match(a:doctor where a.name='杜梅')-[e:diagnose]->(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和贷款loan_84之间有存款关系的账号",
        "output": "match(a:loan where a.name='loan_84')-[e:deposit]->(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出买家陈梅的全部label为相关者的边,并根据目标点id降序排列,返回173个",
        "output": "match(a:buyer where a.name = '陈梅')-[e:relation]->(b) return b order by e.targetId desc limit 173",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出54个与李宏和黄思思都存在关系的编辑或读者或作家节点",
        "output": "match(a where a.name='李宏')-[e]->(b:publisher | reader | author)<-[e2]-(c where c.name='黄思思') return b limit 54",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为清华大学和武汉大学的,标签等于university的点公共的partner节点的名单",
        "output": "match(a:university where a.name='清华大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='武汉大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出源点类型为forum,目标点类型为person,类型为forum_contain_person的边",
        "output": "match(a:forum)-[e:forum_contain_person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高减181的值",
        "output": "a.height - 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和部门皮肤科之间有拥有关系的医生",
        "output": "match(a:department where a.name='皮肤科')-[e:has]->(b:doctor) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person周宏relates的person, 令person(b)的height等于person(a)的id,令person(a)的name等于person(b)的salary的最大值,令person(b)的id等于person(a)的height减179, 返回person(a)的height, person(b)的height",
        "output": "match(a:person where a.name='周宏')-[e:relates]->(b:person) let b.height = a.id,let a.name = MAX(b.salary),let b.id = a.height - 179 return a.height,b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'uE'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('uE') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资分组,计算年龄对5取余的值",
        "output": "return a.age % 5 group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出person源点类型为apply的边，返回targetId对29取余的值和srcId减126的值。",
        "output": "match(a:person)-[e:apply]->(b) return MIN(e.targetId) % 29, e.srcId - 126",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person李思思有关系的person的薪资",
        "output": "match(a:person where a.name='李思思')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点权重为空,权重小于等于511,或权重小于等于665,目标点id在80到93之间,且标签为包含的边",
        "output": "match(a where ((a.weight is null) and a.weight <= 511) or a.weight <= 665)-[e:contain]->(b where (b.id BETWEEN 80 AND 93)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出卖家的三角的环,边标签等于拥有, 并返回这些点的id",
        "output": "match(a:seller)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找找Post_107这个帖子",
        "output": "match(a:post where a.name = 'Post_107') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id小于等于1的节点",
        "output": "match(a where a.id <= 1) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表682, 源点的id等于输入表id,返回标签为person的点,并根据salary降序排列",
        "output": "with p as (select * from (VALUES(682)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a ORDER BY a.salary DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回从company微软出发,经过类型是company_belong_city的边,走2到5度到达的city点",
        "output": "match(a:company where a.name='微软')-[e:company_belong_city]->{2,5}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找标签等于university的全部点,并根据id升序排列",
        "output": "match(a:university) return a order by a.id asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询被处方Prescription_179包含的药品",
        "output": "match(a:medicine)<-[e:prescription_contain_medicine]-(b:prescription where b.name='Prescription_179') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表554, 源点的id等于输入表id,返回从部门法学院出发,经过标签等于department_has_teacher的边,走1到3度到达的教师点",
        "output": "with p as (select * from (VALUES(554)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '法学院')) -[e:department_has_teacher ]->{1,3}(b:teacher) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与名为陈月和周伟的点共同喜欢的,标签为书的节点",
        "output": "match(a where a.name = '陈月')-[e:likes]->(b:book)<-[e2:likes]-(c where c.name = '周伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回131个名为Comment_281的点belong的标签等于film的节点,且节点value大于576",
        "output": "match(a where a.name='Comment_281')-[e:belong]->(b:film where b.value > 576) return b limit 131",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,wordCount,id, 数据为(913,330,68),(319,758,65),(128,819,12),(35,277,28), 源点的wordCount等于输入表wordCount,查询被帖子Post_411拥有的标签",
        "output": "with p as (select * from (VALUES(913,330,68),(319,758,65),(128,819,12),(35,277,28)) as t(value,wordCount,id))MATCH (a:tag WHERE a.wordCount = p.wordCount) <-[e:post_has_tag ]-(b:post WHERE b.name = 'Post_411') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为张科和马强的,label为学生的点公共的相关者节点的名单",
        "output": "match(a:student where a.name='张科')-[e:relation]->(b)<-[e2:relation]-(c:student where c.name='马强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与person何若涵有关系的person, 返回和这些person有关联的person的,height乘173的数量",
        "output": "match(a:person where a.name= '何若涵')-[e]-(b:person)-[e2]-(c:person) return COUNT(c.height * 173)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找包含药品生理盐水的处方。",
        "output": "match(a:medicine where a.name='生理盐水')<-[e:contain]-(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为Comment_260和Comment_378的,标签等于评论的点公共的朋友节点的名单",
        "output": "match(a:comment where a.name='Comment_260')-[e:friend]->(b)<-[e2:friend]-(c:comment where c.name='Comment_378') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除56对4193取余的和",
        "output": "SUM(a.id / 56 % 4193)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以657,897作为请求点id, 以属性id作为相等条件,请帮我找出155个类别不等于动作的电影,根据id升序排列",
        "output": "with p as (select * from (VALUES(657),(897)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.category <> '动作')) RETURN a ORDER BY a.id LIMIT 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为40的买家咨询的卖家, 并将卖家有关的订单的名字的和赋值给卖家的薪资, 接着查询卖家的薪资小于40的卖家回答的买家",
        "output": "match(a:buyer where a.id = 40)-[e:consult]->(b:seller) let b.salary = SUM((b:seller)-[e2]-(c:orders) => c.name) match(b:seller where b.salary < 40)-[e3:ask]->(d:buyer) return b.salary, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与人型点有喜欢关系的人，这些人又与我有支付关系，并且这些人又与我有认识关系。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高对187取余除89的最大值",
        "output": "MAX(a.height % 187 / 89)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与user相关的post节点，按lang进行分组，并返回结果。",
        "output": "match(a:user)-[e:publish]-(b:post) return b.lang group by b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从部门法学院出发,经过类型是拥有的边,走1到4跳到达的学生点",
        "output": "match(a:department where a.name='法学院')-[e:has]->{1,4}(b:student) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有类型为prescription或medicine的点",
        "output": "match(a:prescription | medicine) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为48的医生有关的部门的朋友, 再帮我查询和部门有关系的伙伴",
        "output": "match(a:doctor where id = 48)-[e]-(b:department)-[e2:friend]->(c), (b:department)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为1的reader likes的book, 并将book有关的publisher的gender的最大值赋值给book的category, 接着查询book的category小于1的book relates的book",
        "output": "match(a:reader where a.id = 1)-[e:likes]->(b:book) let b.category = MAX((b:book)-[e2]-(c:publisher) => c.gender) match(b:book where b.category < 1)-[e3:relates]->(d:book) return b.category, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和course大学英语有关的course,称为X,再返回和这个X有关联的其他university,以及和X有关联的student",
        "output": "match(a:course where a.name = '大学英语')-[e]-(b:course), (b:course)-[e2]-(c:university),(b:course)-[e3]-(d:student) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为周建国的人有朋友关系，或者有朋友的朋友关系的人。",
        "output": "match(a:person where n.name=周建国)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表902,197,630, 源点的id等于输入表id,请帮我查找和prescription Prescription_445有关的prescription,称为X,再请帮我查找和这个X有关联的其他prescription,以及和X有关联的prescription",
        "output": "with p as (select * from (VALUES(902),(197),(630)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_445')) -[e ]-(b:prescription) , (b:prescription) -[e2 ]-(c:prescription) , (b:prescription) -[e3 ]-(d:prescription) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为Redis的软件。",
        "output": "match(a:software where a.name = 'Redis') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部person的父母,或其父母的父母",
        "output": "match(a:person)-[e:parent]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与病人赵轩有关,且与药品布洛芬有关系的处方节点",
        "output": "match(a:patient where a.name='赵轩')-[e:accept]-(b:prescription)-[e2:contain]-(c:medicine where c.name='布洛芬') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部订单以价值分组的价格, 根据价格从大到小排序",
        "output": "match(a:orders) return a.price group by a.value order by a.price desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出拥有课程程序设计属于的部门,的大学",
        "output": "match(a:course where name = '程序设计')-[e:belong]->(b:department)<-[e2:has]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被医生赵强诊断的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='赵强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出张轩喜欢的评论，以及哪些评论被张轩喜欢",
        "output": "match(a:person where a.name = '张轩')-[e:likes]->(b:comment),(a:person where a.name = '张轩')<-[e2:likes]-(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出人数在331到546之间的节点",
        "output": "match(a where (a.peopleNumber BETWEEN 331 AND 546)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我按创建时间从大到小，将所有帖子按照创建时间分组",
        "output": "match(a:post) return a.createTime group by a.createTime order by a.createTime desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出repository Tugraph的所有label为friend的边,并根据f0升序排列,返回102个",
        "output": "match(a:repository where a.name = 'Tugraph')-[e:friend]->(b) return b order by e.f0 asc limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和company微软有关的person,再找出和微软apply的其他loan,返回它们",
        "output": "match(a:company where a.name = '微软')-[e]-(b:person), (a:company)-[e2:apply]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据身高,年龄分组,计算id对id取余对9取余的数量",
        "output": "return COUNT(a.id % a.id % 9) group by a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点name为TheShy或id对71取余大于884,边类型为repay,且f1不等于true或srcId小于等于103的边,返回这些边的srcId加40对686取余的个数",
        "output": "match(a where a.name = 'TheShy' or a.id % 71 > 884)-[e:repay where e.f1 <> true or e.srcId <= 103]->(b) return COUNT(e.srcId + 40 % 686)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(18,551,'Chinese'),(48,465,'Chinese')作为请求表数据,属性分别为id,wordCount,lang, 以属性id作为相等条件,帮我查询和user王红有关的user,再帮我查询和王红user_likes_post的其他post,返回它们",
        "output": "with p as (select * from (VALUES(18,551,'Chinese'),(48,465,'Chinese')) as t(id,wordCount,lang))MATCH (a:user WHERE a.id = p.id AND (a.name = '王红')) -[e ]-(b:user) , (a:user) -[e2:user_likes_post ]->(c:post) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回复旦大学和北京大学共同的朋友节点，类型为university。",
        "output": "match(a:university where a.name='复旦大学')-[e:friend]->(b)<-[e2:friend]-(c:university where c.name='北京大学') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和病人何红有关的病人,再查询和何红接受的其他处方,返回它们",
        "output": "match(a:patient where a.name = '何红')-[e]-(b:patient), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('散利痛',185,13)作为请求表数据,属性分别为name,price,id, 以属性name作为相等条件,请帮我查找和doctor有关联的patient节点,并根据其name分组,返回name,以及id加id的值",
        "output": "with p as (select * from (VALUES('散利痛',185,13)) as t(name,price,id))MATCH (a:doctor WHERE a.name = p.name) -[e:doctor_diagnose_patient ]-(b:patient) RETURN b.name, b.id + b.id GROUP BY b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被seller李思思has的goods",
        "output": "match(a:goods)<-[e:has]-(b:seller where b.name='李思思') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以638,299,448,950,301作为请求点id, 以属性id作为相等条件,请帮我查找和orders有关联的goods节点,并根据其name,sellerNumber,category分组,返回name,sellerNumber,category,以及sellerNumber除1906.94的最大值",
        "output": "with p as (select * from (VALUES(638),(299),(448),(950),(301)) as t(id)) MATCH (a:orders WHERE a.id = p.id) -[e:orders_contain_goods ]-(b:goods) RETURN b.name, b.sellerNumber, b.category, MAX(b.sellerNumber / 1906.94) GROUP BY b.name, b.sellerNumber, b.category ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出buyer cancel的orders, 令orders的name的值等于createsorders的buyer的height的最大值, 再查找orders contain的goods",
        "output": "match(a:buyer)-[e:cancel]->(b:orders) let b.name = MAX((b:orders)<-[e2:creates]-(c:buyer) => c.height) match(b:orders)-[e3:contain]->(d:goods) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为何思琪的点喜欢的帖子",
        "output": "match(a where a.name='何思琪')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出中国诗词论坛中包含知乎用户的帖子，以及知乎用户中包含中国诗词论坛用户的person,返回它们。",
        "output": "match(a:forum where a.name = '中国诗词论坛')-[e:contain]->(b:post),(c:forum where c.name = '知乎')-[e2:contain]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找author吴科 knows的author,返回author write的book的id乘15的最小值",
        "output": "match(a:author where name = '吴科')-[e:knows]->(b:author)-[e2:write]->(c:book) return MIN(c.id * 15)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询名为周宏和黄红的,label为buyer的点公共的friend节点的名单",
        "output": "match(a:buyer where a.name='周宏')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='黄红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有源点标签为pullRequest,目标点标签为repository,标签为user或issue的边",
        "output": "match(a:pullRequest)-[e:user | issue]->(b:repository) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与university复旦大学有关系的course, 返回和这些course有关联的university的,id除76加289的求和值",
        "output": "match(a:university where a.name= '复旦大学')-[e]-(b:course)-[e2]-(c:university) return SUM(c.id / 76 + 289)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与被标记为医生的点有诊断关系的病人，以及这些病人接受过的处方，并且这些处方包含的药品。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription)-[e3:contain]->(d:medicine) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找30个课时对36取余小于94的课程,根据课时从小到大排列",
        "output": "match(a:course where a.courseHour % 36 < 94) return a order by a.courseHour asc limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减84的最小值",
        "output": "MIN(a.id - 84)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和用户周国强之间有创造关系的合并请求",
        "output": "match(a:user where a.name='周国强')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询190个名字是赵梅或id大于等于20或性别是male的学生,根据id从大到小排列",
        "output": "match(a:student where a.name = '赵梅' or a.id >= 20 or a.gender = 'male') return a order by a.id desc limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和大学电子科技大学之间有university_has_department关系的部门",
        "output": "match(a:university where a.name='电子科技大学')-[e:university_has_department]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出用户喜欢的仓库,返回其源点的薪资除2189的值,以及目标点的星数加765的个数",
        "output": "match(a:user)-[e:likes]->(b:repository) return a.salary / 2189, COUNT(b.stars + 765)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为89的点的createTime,wordCount",
        "output": "match(a where a.id = 89) return a.createTime, a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有源点标签等于学生,边标签等于选择,以及权重小于958或权重除149.71不是607,且目标点id小于等于114的边",
        "output": "match(a:student)-[e:selects where (e.weight < 958 or e.weight / 149.71 <> 607) and e.targetId <= 114]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和student杜思思有关系的course,返回这些点的height,age",
        "output": "match(a:student where a.name='杜思思')-[e]-(b:course) return b.height, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询事项ISSUE-192属于的仓库,以及属于这些仓库的事项",
        "output": "match(a:issue where name = 'ISSUE-192')-[e:belong]->(b:repository)<-[e2:belong]-(c:issue) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回等级为空,id大于等于1的大学拥有的部门的名称,以及这些部门 拥有的学生的名称",
        "output": "match(a:university where (a.level is null) and a.id >= 1)-[e:has]->(b:department)-[e2:has]->(c:student) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回155个和标签为医生的点有诊断关系的病人,且和这些病人有接受关系的处方",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被买家张建聪取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='张建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表13,309,304,791, 源点的id等于输入表id,找出city武汉 belong的country,返回country contain的city的area减43337对88298取余的平均值 ",
        "output": "with p as (select * from (VALUES(13),(309),(304),(791)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (name = '武汉')) -[e:city_belong_country ]->(b:country) -[e2:country_contain_city ]->(c:city) RETURN AVG(c.area - 43337 % 88298) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请提供与买家陈轩有关的创建订单，以及与买家何红有关的取消订单。",
        "output": "match(a:buyer where a.name = '陈轩')-[e:creates]->(b:orders),(c:buyer where c.name = '何红')-[e2:cancel]->(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找24个id为76或年龄小于等于74的作家,根据年龄从大到小排列",
        "output": "match(a:author where a.id = 76 or a.age <= 74) return a order by a.age desc limit 24",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找22个名为形势与政策的点属于的标签等于部门的节点,且其id为空或id大于13",
        "output": "match(a where a.name='形势与政策')-[e:belong]->(b:department where (b.id is null) or b.id > 13) return b limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签为film的点,并根据id从大到小排列",
        "output": "match(a:film) return a order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找郑雪担任授课教师的课程，以及与郑雪有教关系的课程。",
        "output": "match(a:teacher where a.name = '郑雪')-[e:teach]->(b:course),(a:teacher where a.name = '郑雪')<-[e2:teach]-(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找student selects的course,返回其源点的salary的最小值除5329的值,以及目标点的courseHour除23的值",
        "output": "match(a:student)-[e:selects]->(b:course) return MIN(a.salary) / 5329, b.courseHour / 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找50个名为黄建国的点creates的标签等于comment的节点,且节点name等于Comment_332",
        "output": "match(a where a.name='黄建国')-[e:person_creates_comment]->(b:comment where b.name = 'Comment_332') return b limit 50",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与何梅有关的评论，以及她喜欢的其他评论，并将结果返回。",
        "output": "match(a:person where a.name = '何梅')-[e]-(b:comment), (a:person)-[e2:likes]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询Faker转账给哪个账户了。",
        "output": "match(a:account where a.name = 'Faker')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person李建国认识的person, 令person的性别等于person的年龄的最小值,令person(a)的性别等于person(b)的身高除身高除14,令person的年龄等于person的年龄, 返回person(a)的年龄, person(b)的年龄",
        "output": "match(a:person where a.name='李建国')-[e:knows]->(b:person) let a.gender = MIN(a.age),let a.gender = b.height / b.height / 14,let b.age = b.age return a.age,b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出李梅喜欢的人，并返回他的/她的薪资、年龄和 ID。",
        "output": "match(a:person where name = '李梅')-[e:likes]->(b:person)-[e2:pay]->(c:person) return c.salary, c.age, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询论坛包含的用户,返回其源点的id乘57的值,以及目标点的年龄乘45加86的最小值",
        "output": "match(a:forum)-[e:contain]->(b:user) return a.id * 57, MIN(b.age * 45 + 86)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以48,947,811作为请求点id, 以属性id作为相等条件,查找所有medicine以weight,price,id分组的name, 根据name升序排序",
        "output": "with p as (select * from (VALUES(48),(947),(811)) as t(id)) MATCH (a:medicine WHERE a.id = p.id) RETURN a.name GROUP BY a.weight, a.price, a.id ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找出与'film建国大业'和'少年足球'都有关联的点",
        "output": "match(a:film where a.name='建国大业')-[e:has]->(b)<-[e2:has]-(c:film where c.name='少年足球') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与Google公司有关联的申请贷款，以及与贷款违约名称有关联的账户。",
        "output": "match(a:company where a.name = '谷歌')-[e:apply]->(b:loan),(c:loan where c.name = 'defaultName')-[e2:deposit]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为李梅的节点接受的病人或药品",
        "output": "match(a where a.name='李梅')-[e:accept]->(b:patient | medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有prescription的weight乘585的平均值",
        "output": "match(a:prescription) return AVG(a.weight * 585)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以855,566,958作为请求点id, 源点的id等于输入表id,找出与person何思思和周雪都存在person_own_account关系的点",
        "output": "with p as (select * from (VALUES(855),(566),(958)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '何思思')) -[e:person_own_account ]->(b) <-[e2:person_own_account ]-(c:person WHERE c.name = '周雪') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与person节点相关的person节点，按其高度进行分组，并返回结果。",
        "output": "match(a:person)-[e:likes]-(b:person) return b.height group by b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person黄思琪有关系的person,返回这些点的薪资,年龄,id",
        "output": "match(a:person where a.name='黄思琪')-[e]-(b:person) return b.salary, b.age, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和标签等于user的点有creates关系的pullRequest,并且和这些pullRequest有belong关系的repository,并且和这些repository有has关系的user",
        "output": "match(a:user)-[e:creates]->(b:pullRequest)-[e2:belong]->(c:repository)-[e3:has]->(d:user) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询183个身高小于161或性别不等于male或薪资小于2228的person,根据薪资从小到大排列",
        "output": "match(a:person where a.height < 161 or a.gender <> 'male' or a.salary < 2228) return a order by a.salary asc limit 183",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回法学院拥有的老师名单，包括他们所授课程的学分、价值和名称。",
        "output": "match(a:department where name = '法学院')-[e:has]->(b:teacher)-[e2:teach]->(c:course) return c.credit, c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出年龄等于158的节点",
        "output": "match(a where a.age = 158) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与162个人有likes关系的人，这些人又与其他人有pay关系。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person) return c limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其名字,薪资,身高分组,返回名字,薪资,身高,以及身高加180的值",
        "output": "match(a:person)-[e:pay]-(b:person) return b.name, b.salary, b.height, b.height + 180 group by b.name, b.salary, b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被城市广州属于的国家",
        "output": "match(a:country)<-[e:belong]-(b:city where b.name='广州') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有和名为Kafka的repository有relation关系,或有relation的relation关系的user",
        "output": "match(a:repository where n.name=Kafka)-[e:relation]->{1,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签等于person,目标点标签等于person,标签等于软件的边",
        "output": "match(a:person)-[e:software]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出赵国强和徐轩共同出版的书籍。",
        "output": "match(a where a.name = '赵国强')-[e:publish]->(b:book)<-[e2:publish]-(c where c.name = '徐轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与孙伟存在pay关系的person,person与person存在pay关系的点,返回这些点的gender",
        "output": "match(a where a.name = '孙伟')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和person有关联的person节点,并根据其年龄,薪资分组,返回年龄,薪资,以及年龄除94的值",
        "output": "match(a:person)-[e:family]-(b:person) return b.age, b.salary, b.age / 94 group by b.age, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被卖家回答数量大于140的买家,记为relationCount,再查询这些买家回答的订单",
        "output": "match(a:buyer) let a.relationCount = MAX((a:buyer)<-[e:ask]-(b:seller) => b.id) match(a where a.relationCount > 140)-[e2:ask]->(c:orders) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找所有person的朋友，或者朋友的朋友。",
        "output": "match(a:person)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据value分组,计算id的最小值加id的值",
        "output": "return MIN(a.id) + a.id group by a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与李若涵有likes关系的人，以及与李若涵有likes关系的其他人。",
        "output": "match(a:person where a.name = '李若涵')-[e:likes]->(b:person),(a:person where a.name = '李若涵')<-[e2:likes]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与卖家点相关的商品节点，并按名称、价值和类别分组，返回名称、价值和类别。",
        "output": "match(a:seller)-[e:has]-(b:goods) return b.name, b.value, b.category group by b.name, b.value, b.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询书的三角的环,边类型为引用, 并返回这些点的id",
        "output": "match(a:book)-[e:refers]->(b)-[e2:refers]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出体育学院的学生，找出他们选择的课程，并返回这些课程的学分。",
        "output": "match(a where a.name = '体育学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询company美团 belong的city,返回city belong的country的peopleNumber乘30436除68的值",
        "output": "match(a:company where name = '美团')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.peopleNumber * 30436 / 68",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前196个类型为支付的边",
        "output": "match(a)-[e:pay]->(b) return e limit 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被医生郑建国属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where b.name='郑建国') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person韩若涵存在喜欢关系,且与电影西虹市首富存在属于关系的评论节点，返回这些评论的id,创建时间,及person韩若涵的id,及电影西虹市首富的价值",
        "output": "match(a:person where a.name='韩若涵')-[e:likes]->(b:comment)<-[e2:belong]-(c:film where c.name='西虹市首富') return a.id,b.id, b.createTime,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为104的person有关的person的partner, 再帮我查询和person有关系的partner",
        "output": "match(a:person where id = 104)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与马月有关的人，并找出与马月有共同喜好的人，返回这些人。",
        "output": "match(a:person where a.name = '马月')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点创建时间不等于2010年10月20日,语言不等于c,边标签为拥有,且满足条件f0的最小值除787小于182.96或f1不等于true或f1等于true的边,返回这些边的源点id加153乘147的值",
        "output": "match(a where a.createTime <> '2010-10-20' and a.lang <> 'c')-[e:has where MIN(e.f0) / 787 < 182.96 or e.f1 <> true or e.f1 = true]->(b) return (e.srcId + 153) * 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与杜科存在喜欢关系的评论，找出评论中属于电影的点，并返回这些点的名字。",
        "output": "match(a where a.name = '杜科')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 列出孙思琪和陈轩之间共同拥有的人的关系节点，其中关系节点标签为'person'。",
        "output": "match(a:person where a.name='孙思琪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和medicine阿司匹林有关的patient,称为X,再帮我查询和这个X有关联的其他doctor,以及和X有关联的medicine",
        "output": "match(a:medicine where a.name = '阿司匹林')-[e]-(b:patient), (b:patient)-[e2]-(c:doctor),(b:patient)-[e3]-(d:medicine) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'It', 24, 90作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP('It', 24, 90) yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和账号有关联的账号节点,并根据其上次登录时间分组,返回上次登录时间,以及value的数量减336的最小值",
        "output": "match(a:account)-[e:transfer]-(b:account) return b.lastLoginTime, MIN(COUNT(b.value) - 336) group by b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询书三体关联的书, 令书的id等于书的字数,令书的价格等于书的id的平均值对id取余, 返回书(a)的字数, 书(b)的价格",
        "output": "match(a:book where a.name='三体')-[e:relates]->(b:book) let b.id = b.wordCount,let a.price = AVG(a.id) % a.id return a.wordCount,b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和名为微软的公司有朋友关系,或有朋友的朋友关系的大学",
        "output": "match(a:company where n.name=微软)-[e:friend]->{1,2}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与person有关系的person节点,且person节点的年龄的求和值大于等于25,并返回这些person的salary的和对1005取余的和,以及person的id的求和值乘27的最小值",
        "output": "match(a:person)-[e]->(b:person where SUM(b.age) >= 25) return SUM(SUM(b.salary) % 1005), MIN(SUM(b.id) * 27)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对59取余的值",
        "output": "a.id % 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));给出16个与Comment_408和Comment_294都存在关系的person节点",
        "output": "match(a where a.name='Comment_408')-[e]->(b:person)<-[e2]-(c where c.name='Comment_294') return b limit 16",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出身高在153到188之间且id为空的person申请的贷款的名称,以及这些贷款 存款的账号的名称",
        "output": "match(a:person where (a.height BETWEEN 153 AND 188) and (a.id is null))-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出前82个标签为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,age分组,计算height加181的个数",
        "output": "return COUNT(a.height + 181) group by a.gender, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person马宏支付的person,和马宏认识的person",
        "output": "match(a:person)<-[e:pay]-(b:person where name = '马宏')-[e2:knows]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为杜思思的person,以及与其有关的person,并返回杜思思的身高和这些person的id",
        "output": "match(a:person where name = '杜思思')-[e]-(b:person) return a.height, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person马雪和person陈若涵都有关系的所有person节点",
        "output": "match(a:person where a.name='马雪')-[e:knows]-(b:person)-[e2:likes]-(c:person where c.name='陈若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部和名为吴雪的person有relation关系,或有relation的relation关系的person",
        "output": "match(a:person where n.name=吴雪)-[e:relation]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从教师韩若涵出发，经过标签为'教'的边，走1跳或2跳可以到达哪个课程点？",
        "output": "match(a:teacher where a.name='韩若涵')-[e:teach]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(91,'large','美团'),(97,'large','Bilibili')作为请求表数据,属性分别为id,scale,name, 源点的scale等于输入表scale,返回company腾讯的类型是friend的边,并根据weight从大到小排列,返回105个",
        "output": "with p as (select * from (VALUES(91,'large','美团'),(97,'large','Bilibili')) as t(id,scale,name))MATCH (a:company WHERE a.scale = p.scale AND (a.name = '腾讯')) -[e:friend ]->(b) RETURN b ORDER BY e.weight DESC LIMIT 105",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与散利痛和枇杷糖浆都有关的110个处方药节点",
        "output": "match(a where a.name='散利痛')-[e]->(b:prescription)<-[e2]-(c where c.name='枇杷糖浆') return b limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算value减value的平均值",
        "output": "return AVG(a.value - a.value) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被买家韩若涵创造的订单,和韩若涵创造的订单",
        "output": "match(a:orders)<-[e:creates]-(b:buyer where name = '韩若涵')-[e2:creates]->(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出TheShy还的贷款。",
        "output": "match(a:loan)<-[e:repay]-(b:account where b.name='TheShy') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为JavaGuid的repository,以及与其有关的pullRequest,并返回JavaGuid的id和这些pullRequest的name",
        "output": "match(a:repository where name = 'JavaGuid')-[e]-(b:pullRequest) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以787,165,811,406,615作为请求点id, 源点的id等于输入表id,找出所有country以peopleNumber,area分组的peopleNumber, 根据peopleNumber降序排序",
        "output": "with p as (select * from (VALUES(787),(165),(811),(406),(615)) as t(id)) MATCH (a:country WHERE a.id = p.id) RETURN a.peopleNumber GROUP BY a.peopleNumber, a.area ORDER BY a.peopleNumber DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为功夫的,价值为742的朋友,返回这些朋友的价值,和边的权重,f0",
        "output": "match(a where a.name='功夫')-[e:friend]->(b where b.value = 742) return b.value,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找prescription的2跳的环",
        "output": "match(a:prescription)->{1,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部卖家的相关者,或其相关者的相关者",
        "output": "match(a:seller)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为category,value,name, 数据为('家具',476,'桌子')的子查询作为输入表, 源点的value等于输入表value,找出与buyer韩轩和王建聪都存在buyer_cancel_orders关系的点",
        "output": "with p as (select * from (VALUES('家具',476,'桌子')) as t(category,value,name))MATCH (a:buyer WHERE a.value = p.value AND (a.name = '韩轩')) -[e:buyer_cancel_orders ]->(b) <-[e2:buyer_cancel_orders ]-(c:buyer WHERE c.name = '王建聪') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和用户周宏有关的合并请求,称为X,再给出和这个X有关联的其他事项,以及和X有关联的用户",
        "output": "match(a:user where a.name = '周宏')-[e]-(b:pullRequest), (b:pullRequest)-[e2]-(c:issue),(b:pullRequest)-[e3]-(d:user) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和电影建国大业有关的电影,称为X,再请帮我找出和这个X有关联的其他电影,以及和X有关联的电影院",
        "output": "match(a:film where a.name = '建国大业')-[e]-(b:film), (b:film)-[e2]-(c:film),(b:film)-[e3]-(d:cinema) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person以id,gender,age分组的name, 根据name从小到大排序",
        "output": "match(a:person) return a.name group by a.id, a.gender, a.age order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以194,9,478作为请求点id, 源点的id等于输入表id,找出person韩强的全部朋友,的目标点id除30的值",
        "output": "with p as (select * from (VALUES(194),(9),(478)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '韩强')) -[e:friend ]->(b) RETURN e.targetId / 30 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为东京的城市或国家,以及与其有关的公司,并返回东京的人数和这些公司的名字",
        "output": "match(a:city | country where name = '东京')-[e]-(b:company) return a.peopleNumber, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点类型是person,边类型是apply的边,返回这些边的f0乘f0的个数,和weight除155.70的最大值",
        "output": "match(a:person)-[e:apply]->(b) return COUNT(e.f0 * e.f0), MAX(e.weight / 155.70)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找所有从人源点指向人目标点且标签为'parent'的边。",
        "output": "match(a:person)-[e:parent]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找所有Post_116的点拥有的标签,然后查找Post_116被发布的用户,一起返回",
        "output": "match(a where a.name = 'Post_116')-[e:post_has_tag]->(b:tag),(a where a.name = 'Post_116')<-[e2:user_publish_post]-(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出读者郑思琪 喜欢的书,返回书 认识的书的id减id的个数",
        "output": "match(a:reader where name = '郑思琪')-[e:likes]->(b:book)-[e2:knows]->(c:book) return COUNT(c.id - c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点label为person,边label为person_watch_film,并且满足条件weight小于127.67的边",
        "output": "match(a:person)-[e:person_watch_film where e.weight < 127.67]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有以'value'为标签的项，并按ID从大到小排序。",
        "output": "match(a:tag) return a.id group by a.value order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person有关联的person节点,并根据其性别,年龄,薪资分组,返回性别,年龄,薪资,以及id的求和值除id的值",
        "output": "match(a:person)-[e:knows]-(b:person) return b.gender, b.age, b.salary, SUM(b.id) / b.id group by b.gender, b.age, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出160个peopleNumber小于607的company,根据peopleNumber升序排列",
        "output": "match(a:company where a.peopleNumber < 607) return a order by a.peopleNumber asc limit 160",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和名为马轩的person有伙伴关系,或有伙伴的伙伴关系的person",
        "output": "match(a:person where n.name=马轩)-[e:partner]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person韩轩存在申请关系,且与账号BIN存在存款关系的贷款节点，返回这些贷款的权重,id,及person韩轩的年龄,及账号BIN的是否冻结",
        "output": "match(a:person where a.name='韩轩')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='BIN') return a.age,b.weight, b.id,c.isBlock",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和用户赵科之间有喜欢关系的帖子",
        "output": "match(a:user where a.name='赵科')-[e:likes]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person吴宏的全部伙伴,的权重加167.79的值",
        "output": "match(a:person where a.name= '吴宏')-[e:partner]->(b) return e.weight + 167.79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出103个身高为191cm，性别为male，并按照id从大到小排序的person。",
        "output": "match(a:person where a.gender = 'male' and a.id = 45 and a.height = 191) return a order by a.id desc limit 103",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询6个名字不等于吴轩的person,根据身高降序排列",
        "output": "match(a:person where a.name <> '吴轩') return a order by a.height desc limit 6",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表47,485,957,797, 以属性id作为相等条件,计算所有person的salary除salary的值",
        "output": "with p as (select * from (VALUES(47),(485),(957),(797)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.salary / a.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和person点有喜欢关系的person节点,且边满足条件f0不等于816,目标person节点名字不是Tom",
        "output": "match(a:person)-[e:likes where e.f0 <> 816]->(b:person where b.name <> 'Tom') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name,id分组,计算id对60取余的数量",
        "output": "return COUNT(a.id % 60) group by a.name, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有源点类型为部门,边类型为department_has_student,且目标点id大于等于188或目标点id减14对16取余的平均值大于160.38的边",
        "output": "match(a:department)-[e:department_has_student where e.targetId >= 188 or AVG(e.targetId - 14 % 16) > 160.38]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与吴强和孙建聪有关联的人。",
        "output": "match(a:person where a.name='吴强')-[e:likes]-(b:person)-[e2:likes]-(c:person where c.name='孙建聪') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签等于person,名为李红的点,返回这些点的薪资,名字,年龄",
        "output": "match(a:person where a.name = '李红') return a.salary, a.name, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询共同存款的节点，类型为账户，名称为defaultName和defaultName1。",
        "output": "match(a where a.name = 'defaultName')-[e:deposit]->(b:account)<-[e2:deposit]-(c where c.name = 'defaultName1') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找person认识的person, 令person(b)的身高的值等于喜欢person的person的年龄的平均值, 再查找person支付的person",
        "output": "match(a:person)-[e:knows]->(b:person) let b.height = AVG((b:person)<-[e2:likes]-(c:person) => c.age) match(b:person)-[e3:pay]->(d:person) return b.height, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找电影院人人影城上映的电影, 令电影的名字等于电影院的大小除756的求和值,令电影的价值等于电影的价值减690的和, 返回电影院的大小, 电影的名字",
        "output": "match(a:cinema where a.name='人人影城')-[e:releases]->(b:film) let b.name = SUM(a.size / 756),let b.value = SUM(b.value - 690) return a.size,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为42的person invest的company, 并将company有关的person的name的平均值赋值给company的id, 接着查询company的id小于42的company apply的loan",
        "output": "match(a:person where a.id = 42)-[e:invest]->(b:company) let b.id = AVG((b:company)-[e2]-(c:person) => c.name) match(b:company where b.id < 42)-[e3:apply]->(d:loan) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找user杜梅publish的post节点has的tag",
        "output": "match(a:user where a.name = '杜梅')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 阿里是一家公司。",
        "output": "match(a:company where a.name = '阿里') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与论坛推特有关系的论坛, 返回和这些论坛有关联的帖子的,id的最大值除4的值",
        "output": "match(a:forum where a.name= '推特')-[e]-(b:forum)-[e2]-(c:post) return MAX(c.id) / 4",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出公司字节的相关者,的f0加808的最小值",
        "output": "match(a:company where a.name= '字节')-[e:relation]->(b) return MIN(e.f0 + 808)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部名为孙红的点申请的贷款",
        "output": "match(a where a.name='孙红')-[e:apply]->(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与买家周梅有关系的订单的名字",
        "output": "match(a:buyer where a.name='周梅')-[e]-(b:orders) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和评论Comment_233有关系的评论或标签或电影,返回这些点的价值",
        "output": "match(a:comment where a.name='Comment_233')-[e]-(b:comment | tag | film) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与国家韩国有包含关系的1跳以内的环",
        "output": "match(a:country where name = '韩国')-[e:contain]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回申请贷款loan_56的公司,和这些公司申请的贷款",
        "output": "match(a:loan where name = 'loan_56')<-[e:apply]-(b:company)-[e2:apply]->(c:loan) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回买家的三角的环,边label为咨询, 并返回这些点的id",
        "output": "match(a:buyer)-[e:consult]->(b)-[e2:consult]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出创建时间不是2008年01月02日且语言是python且名字是FSM的节点",
        "output": "match(a where a.createTime <> '2008-01-02' and a.lang = 'python' and a.name = 'FSM') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与部门有关系的大学节点,且大学节点的id大于等于76,并返回这些大学的level的个数加2的值,以及大学的id加13的求和值",
        "output": "match(a:department)-[e]->(b:university where b.id >= 76) return COUNT(b.level) + 2, SUM(b.id + 13)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为赵国强的person,以及与其有关的person,并返回赵国强的名字和这些person的年龄",
        "output": "match(a:person where name = '赵国强')-[e]-(b:person) return a.name, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点name等于横店影院或size为空,且id大于12,目标点value为411,且类型为releases的边",
        "output": "match(a where (a.name = '横店影院' or (a.size is null)) and a.id > 12)-[e:releases]->(b where b.value = 411) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出标签为'department'的节点，与名为Jack和陈强的点共同属于。",
        "output": "match(a where a.name = 'Jack')-[e:belong]->(b:department)<-[e2:belong]-(c where c.name = '陈强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为韩国的国家,以及与其有关的公司,并返回韩国的id和这些公司的规格",
        "output": "match(a:country where name = '韩国')-[e]-(b:company) return a.id, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询马建聪认识的人中，再查询这些人中认识马建聪的人。",
        "output": "match(a:person where a.name = '马建聪')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除46的值",
        "output": "a.id / 46",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person周梅有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '周梅')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以支付关系关联了person郑建聪的person",
        "output": "match(a:person where a.name='郑建聪')<-[e:pay]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与杜轩有关且与人人影城有关的标签节点，并返回它们的值。",
        "output": "match(a:person where a.name='杜轩')-[e]->(b:tag)<-[e2]-(c:cinema where c.name='人人影城') return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型是事项的点,返回178个",
        "output": "match(a:issue) return a limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被buyer Tom creates的orders,和Tom creates的orders",
        "output": "match(a:orders)<-[e:creates]-(b:buyer where name = 'Tom')-[e2:creates]->(c:orders) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与 author 节点关联的 author 节点，按其 salary、gender、age 分组，并返回这些信息。",
        "output": "match(a:author)-[e:knows]-(b:author) return b.salary, b.gender, b.age group by b.salary, b.gender, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找喜欢person何若涵喜欢的评论,的person",
        "output": "match(a:person where name = '何若涵')-[e:likes]->(b:comment)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点性别是famale或薪资在4491到8385之间,且薪资不是12,边类型为购买,且满足条件目标点id不为空且源点id不为空的边,返回这些边的权重对131.95取余加权重的最大值",
        "output": "match(a where (a.gender = 'famale' or (a.salary BETWEEN 4491 AND 8385)) and a.salary <> 12)-[e:buy where (e.targetId is not null) and (e.srcId is not null)]->(b) return MAX(e.weight % 131.95 + e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找账号Geaflow123的全部类型为伙伴的边,并根据源点id从小到大排列,返回168个",
        "output": "match(a:account where a.name = 'Geaflow123')-[e:partner]->(b) return b order by e.srcId asc limit 168",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person赵科有申请关系的贷款,再查询以拥有关系关联了赵科的账号",
        "output": "match(a:person where a.name = '赵科')-[e:apply]->(b:loan),(a:person where a.name = '赵科')<-[e2:own]-(c:account)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以344作为请求点id, 源点的id等于输入表id,请帮我查找所有源点身高为空,薪资小于等于4555,或身高大于等于171,目标点身高减171减id的求和值大于97,且类型是person_family_person的边",
        "output": "with p as (select * from (VALUES(344)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.height IS NULL AND a.salary <= 4555 OR a.height >= 171)) -[e:person_family_person ]->(b WHERE SUM(b.height - 171 - b.id) > 97) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下周建国的朋友的朋友的关系",
        "output": "match(a:buyer where a.name='周建国')-[e:friend]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有类型为goods的点",
        "output": "match(a:goods) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出与user赵思思有user_publish_post关系的1跳以内的环",
        "output": "match(a:user where name = '赵思思')-[e:user_publish_post]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与作者类型的节点有knows关系的作者，以及这些作者有knows关系的作者，以及这些作者有write关系的书。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author)-[e3:write]->(d:book) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前67个标签等于pay的边",
        "output": "match(a)-[e:pay]->(b) return e limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找面积大于等于34322且名字不是24,面积不为空的节点",
        "output": "match(a where a.area >= 34322 and a.name <> 24 and (a.area is not null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为createTime,id,name, 数据为(1995-08-24,43,'Post_497'),(2019-02-05,49,'Post_195'),(2019-09-18,74,'Post_108')的子查询作为输入表, 源点的createTime等于输入表createTime,返回以contain关系关联了person Tom的forum",
        "output": "with p as (select * from (VALUES(1995-08-24,43,'Post_497'),(2019-02-05,49,'Post_195'),(2019-09-18,74,'Post_108')) as t(createTime,id,name))MATCH (a:person WHERE a.createTime = p.createTime AND (a.name = 'Tom')) <-[e:forum_contain_person ]-(b:forum) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部与country中国有关系的university的id",
        "output": "match(a:country where a.name='中国')-[e]-(b:university) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找名为马宏和郑轩的人共同撰写且标签为书的节点。",
        "output": "match(a where a.name = '马宏')-[e:write]->(b:book)<-[e2:write]-(c where c.name = '郑轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以894,880作为请求点id, 以属性id作为相等条件,返回前185个满足条件name为Prescription_355的prescription",
        "output": "with p as (select * from (VALUES(894),(880)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_355')) RETURN a LIMIT 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部与编辑有关系的书节点,且书节点的id不是83,并返回这些书的字数乘字数的值,以及书的id除66的值",
        "output": "match(a:publisher)-[e]->(b:book where b.id <> 83) return b.wordCount * b.wordCount, b.id / 66",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,年龄分组,计算年龄乘87减身高的值",
        "output": "return a.age * 87 - a.height group by a.salary, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出person王月关联的person,被其他person认识的数量",
        "output": "match(a:person where a.name='王月')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出id为87的book有关的book的refers, 再请帮我找出和book有关系的refers",
        "output": "match(a:book where id = '87')-[e]-(b:book)-[e2:book_refers_book]->(c), (b:book)-[e3:book_refers_book]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person周若涵的类型为朋友的边,并根据f0从大到小排列,返回75个",
        "output": "match(a:person where a.name = '周若涵')-[e:friend]->(b) return b order by e.f0 desc limit 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问郑梅和李若涵是否有共同的合作伙伴？",
        "output": "match(a:person where a.name='郑梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李若涵') return b limit 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和名为Order_192的orders有partner关系,或有partner的partner关系的goods",
        "output": "match(a:orders where n.name=Order_192)-[e:partner]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表391, 以属性id作为相等条件,返回和处方Prescription_130有关的处方,称为X,再返回和这个X有关联的其他药品,以及和X有关联的处方",
        "output": "with p as (select * from (VALUES(391)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_130')) -[e ]-(b:prescription) , (b:prescription) -[e2 ]-(c:medicine) , (b:prescription) -[e3 ]-(d:prescription) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与李思思和郑伟有共同认识的人节点",
        "output": "match(a where a.name = '李思思')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '郑伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部名为天涯论坛的节点contain的user或forum或tag",
        "output": "match(a where a.name='天涯论坛')-[e:contain]->(b:user | forum | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点标签为论坛,边标签为包含,并且满足条件目标点id是18的边",
        "output": "match(a:forum)-[e:contain where e.targetId = 18]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person王建聪的label为朋友的边,并根据f1从小到大排列,返回120个",
        "output": "match(a:person where a.name = '王建聪')-[e:friend]->(b) return b order by e.f1 asc limit 120",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找教学生郑建国选择的课程,的教师",
        "output": "match(a:student where name = '郑建国')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前124个星数在377到594之间,id在24到97之间,或语言为python的仓库",
        "output": "match(a:repository where ((a.stars BETWEEN 377 AND 594) and (a.id BETWEEN 24 AND 97)) or a.lang = 'python') return a limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "salary乘1933的个数",
        "output": "COUNT(a.salary * 1933)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王伟的点的,价值不是352的相关者,返回这些相关者的语言,和边的权重,f0",
        "output": "match(a where a.name='王伟')-[e:relation]->(b where b.value <> 352) return b.lang,e.weight, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(54289,5,92290),(31990,31,65326)作为请求表数据,属性分别为area,id,peopleNumber, 源点的id等于输入表id,查询和国家法国有关系的大学节点,返回这些点的id",
        "output": "with p as (select * from (VALUES(54289,5,92290),(31990,31,65326)) as t(area,id,peopleNumber))MATCH (a:country WHERE a.id = p.id AND (a.name = '法国')) -[e ]-(b:university) RETURN b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与公司有关联的大学节点，这些节点的价值为0。然后将它们的价值增加199，并计算这些节点的ID的平均值加上31后的最小值。",
        "output": "match(a:company)-[e]->(b:university where (b.value is null)) return SUM(b.value + 199), MIN(AVG(b.id) + 31)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与goods矿泉水有关系的goods, 返回和这些goods有关联的orders的,id对88取余的最小值",
        "output": "match(a:goods where a.name= '矿泉水')-[e]-(b:goods)-[e2]-(c:orders) return MIN(c.id % 88)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与贷款有关系的person节点,且person节点的年龄小于等于77,并返回这些person的薪资加7239的值,以及person的年龄对年龄取余对年龄取余乘2的值",
        "output": "match(a:loan)-[e]->(b:person where b.age <= 77) return b.salary + 7239, b.age % b.age % b.age * 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以47, 0作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(47, 0) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点scale不等于medium,value除860乘value不是439且value在411到839之间,边类型是belong,且满足条件srcId的平均值对127取余大于等于173的边,返回这些边的f0的和除516的平均值",
        "output": "match(a where a.scale <> 'medium' and a.value / 860 * a.value <> 439 and (a.value BETWEEN 411 AND 839))-[e:belong where AVG(e.srcId) % 127 >= 173]->(b) return AVG(SUM(e.f0) / 516)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为95的部门关联的教师,和以拥有关系关联了这些教师的其他部门",
        "output": "match(a:department where a.id = 95)-[e]-(b:teacher)<-[e2:has]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出14个人，杜科和韩思思，他们共同拥有家庭。",
        "output": "match(a:person where a.name='杜科')-[e:family]->(b)<-[e2:family]-(c:person where c.name='韩思思') return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与城市东京有关系的城市, 返回和这些城市有关联的国家的,面积减78001的最小值",
        "output": "match(a:city where a.name= '东京')-[e]-(b:city)-[e2]-(c:country) return MIN(c.area - 78001)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回仓库FSM 拥有的用户,返回用户 喜欢的仓库的星数乘515的个数",
        "output": "match(a:repository where name = 'FSM')-[e:has]->(b:user)-[e2:likes]->(c:repository) return COUNT(c.stars * 515)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为salary,age,gender, 数据为(7159,6,'male'),(9344,56,'famale'),(1919,7,'famale'), 以属性salary作为相等条件,查询全部源点类型是person,边类型是person_friend_person,且目标点id在50到140之间或目标点id不是107的边",
        "output": "with p as (select * from (VALUES(7159,6,'male'),(9344,56,'famale'),(1919,7,'famale')) as t(salary,age,gender))MATCH (a:person WHERE a.salary = p.salary) -[e:person_friend_person WHERE e.targetId BETWEEN ASYMMETRIC 50 AND 140 OR e.targetId <> 107 ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有172本少年闰土和悲惨世界的共同引用？",
        "output": "match(a:book where a.name='少年闰土')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='悲惨世界') return b limit 172",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有label为book的点，并按照createTime进行升序排序。",
        "output": "match(a:book) return a order by a.createTime asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为182的reader关联的book,和以knows关系关联了这些book的其他book",
        "output": "match(a:reader where a.id = 182)-[e]-(b:book)<-[e2:knows]-(c:book) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与账号有关系的公司节点,且公司节点的人数不为空,并返回这些公司的价值乘378的值,以及公司的价值除399对id取余的值",
        "output": "match(a:account)-[e]->(b:company where (b.peopleNumber is not null)) return b.value * 378, b.value / 399 % b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(382,2032-11-18,95),(332,2034-07-19,826),(534,2018-11-03,787)作为请求表数据,属性分别为peopleNumber,createTime,value, 以属性peopleNumber作为相等条件,请帮我找出和forum中国诗词论坛之间有forum_contain_post关系的post",
        "output": "with p as (select * from (VALUES(382,2032-11-18,95),(332,2034-07-19,826),(534,2018-11-03,787)) as t(peopleNumber,createTime,value))MATCH (a:forum WHERE a.peopleNumber = p.peopleNumber AND (a.name = '中国诗词论坛')) -[e:forum_contain_post ]->(b:post) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(308,81,'物理学院'),(816,69,'体育学院'),(840,93,'体育学院'),(822,89,'物理学院')作为请求表数据,属性分别为value,size,name, 以属性name作为相等条件,查找和department有关联的student节点,并根据其name,salary,height分组,返回name,salary,height,以及height除178的平均值",
        "output": "with p as (select * from (VALUES(308,81,'物理学院'),(816,69,'体育学院'),(840,93,'体育学院'),(822,89,'物理学院')) as t(value,size,name))MATCH (a:department WHERE a.name = p.name) -[e:department_has_student ]-(b:student) RETURN b.name, b.salary, b.height, AVG(b.height / 178) GROUP BY b.name, b.salary, b.height ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出被论坛中国诗词论坛包含的帖子,和中国诗词论坛包含的用户",
        "output": "match(a:post)<-[e:contain]-(b:forum where name = '中国诗词论坛')-[e2:contain]->(c:user) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与传染部存在拥有关系的医生,医生与处方存在创造关系的点,返回这些点的名字",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为has,以及f0大于等于937的边",
        "output": "match(a)-[e:has where e.f0 >= 937]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为Comment_304和Comment_380的,label为评论的点公共的伙伴节点的名单",
        "output": "match(a:comment where a.name='Comment_304')-[e:partner]->(b)<-[e2:partner]-(c:comment where c.name='Comment_380') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表187,834,298,765, 源点的id等于输入表id,请帮我找出和film绿巨人有film_has_tag关系的tag,再请帮我找出以film_has_tag关系关联了绿巨人的tag",
        "output": "with p as (select * from (VALUES(187),(834),(298),(765)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '绿巨人')) -[e:film_has_tag ]->(b:tag) , (a:film WHERE a.name = '绿巨人') <-[e2:film_has_tag ]-(c:tag) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和事项ISSUE-477有关系的事项或仓库或合并请求,返回这些点的创建时间,id,变更文件数",
        "output": "match(a:issue where a.name='ISSUE-477')-[e]-(b:issue | repository | pullRequest) return b.createTime, b.id, b.changeFileNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部和名为杜国强的person有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:person where n.name=杜国强)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person郑伟和韩宏都存在认识关系的点",
        "output": "match(a:person where a.name='郑伟')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='韩宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有person之间的关联关系，包括直接和间接的pay关系。",
        "output": "match(a:person where a.id = '198')-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询医生吴轩所在的部门中，其他医生的人数。",
        "output": "match(a:doctor where a.name='吴轩')-[e:belong]->(b:department)<-[e2:belong]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和类型为person的点有家人关系的person,以及和这些person有父母关系的person,以及和这些person有父母关系的person",
        "output": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person)-[e3:parent]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与阿里和腾讯都有关联的城市节点。",
        "output": "match(a:company where a.name='阿里')-[e:belong]-(b:city)-[e2:contain]-(c:company where c.name='腾讯') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与用户何雪有关系的帖子的创建时间",
        "output": "match(a:user where a.name='何雪')-[e]-(b:post) return b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表681,576,287,724, 以属性id作为相等条件,帮我查询所有patient的relation,或其relation的relation",
        "output": "with p as (select * from (VALUES(681),(576),(287),(724)) as t(id)) MATCH (a:patient WHERE a.id = p.id) -[e:relation ]->{1,2}(b) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与orders Order_340有关系的orders的name",
        "output": "match(a:orders where a.name='Order_340')-[e]-(b:orders) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照分类升序排列，返回前三个wordCount小于等于830的书。",
        "output": "match(a:book where a.wordCount <= 830) return a order by a.category asc limit 3",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出论坛CSDN的伙伴,的srcId的个数除37减f0的值",
        "output": "match(a:forum where a.name= 'CSDN')-[e:partner]->(b) return COUNT(e.srcId) / 37 - e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id除47减163乘839的平均值",
        "output": "return AVG((a.id / 47 - 163) * 839) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找书关联的书,返回其源点的字数除787的值,以及目标点的字数乘215的最大值",
        "output": "match(a:book)-[e:relates]->(b:book) return a.wordCount / 787, MAX(b.wordCount * 215)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回account的2跳以内的环",
        "output": "match(a:account)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与论坛有关系的标签节点,且标签节点的名字为其他,并返回这些标签的价值对价值取余的值,以及标签的价值减302的值",
        "output": "match(a:forum)-[e]->(b:tag where b.name = '其他') return b.value % b.value, b.value - 302",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为138的点的createTime",
        "output": "match(a where a.id = 138) return a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和person郑月有关系的company或account,返回这些点的name,height,id",
        "output": "match(a:person where a.name='郑月')-[e]-(b:company | account) return b.name, b.height, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和person张若涵有3跳关系的person",
        "output": "match(a:person where a.name='张若涵')-[e]->{3,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到用户创建的边，将这些边的权重减去166.99并求和，然后除以880得到平均值。",
        "output": "match(a:user)-[e:creates]->(b) return SUM(e.weight - 166.99), AVG(e.f0 / 880)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(172,77,'male'),(192,6,'male'),(189,73,'male'),(154,54,'male')作为请求表数据,属性分别为height,id,gender, 以属性height作为相等条件,返回77个id在43到84之间且名字不是周建国的编辑,根据名字从大到小排列",
        "output": "with p as (select * from (VALUES(172,77,'male'),(192,6,'male'),(189,73,'male'),(154,54,'male')) as t(height,id,gender))MATCH (a:publisher WHERE a.height = p.height AND (a.id BETWEEN ASYMMETRIC 43 AND 84 AND a.name <> '周建国')) RETURN a ORDER BY a.name DESC LIMIT 77",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以73,356作为请求点id, 以属性id作为相等条件,请帮我找出id为147的person关联的person,和以包含关系关联了这些person的其他论坛",
        "output": "with p as (select * from (VALUES(73),(356)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.id = '147')) -[e ]-(b:person) <-[e2:forum_contain_person ]-(c:forum) RETURN b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有与订单Order_243有关系的卖家的名字",
        "output": "match(a:orders where a.name='Order_243')-[e]-(b:seller) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,性别分组,计算身高对156取余的值",
        "output": "return a.height % 156 group by a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与电影院大众影院有关系的标签, 返回和这些标签有关联的电影的,value的最小值对400取余的值",
        "output": "match(a:cinema where a.name= '大众影院')-[e]-(b:tag)-[e2]-(c:film) return MIN(c.value) % 400",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和部门生物学院有关的学生,再查询和生物学院拥有的其他教师,返回它们",
        "output": "match(a:department where a.name = '生物学院')-[e]-(b:student), (a:department)-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有标签为'软件'的元素，然后按语言从小到大的顺序进行排序。",
        "output": "match(a:software) return a order by a.lang asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出作家Bob撰写的书,以及撰写这些书的作家, 令作家的字数等于书的创建时间,令作家的薪资等于作家的薪资减8190, 返回作家(a)的id,书(b)的id,作家(c)的性别",
        "output": "match(a:author where name = 'Bob')-[e:write]->(b:book)<-[e2:write]-(c:author) let c.wordCount = b.createTime,let a.salary = a.salary - 8190 return a.id,b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person有关系的公司节点,且公司节点的名字为阿里,并返回这些公司的人数减994加747减795的求和值,以及公司的人数加718的值",
        "output": "match(a:person)-[e]->(b:company where b.name = '阿里') return SUM(b.peopleNumber - 994 + 747 - 795), b.peopleNumber + 718",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和公司谷歌有关的城市,再找出和谷歌合作的其他大学,返回它们",
        "output": "match(a:company where a.name = '谷歌')-[e]-(b:city), (a:company)-[e2:cooperate]->(c:university) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找论坛知乎包含的帖子,被其他用户发布的数量",
        "output": "match(a:forum where a.name='知乎')-[e:contain]->(b:post)<-[e2:publish]-(c:user) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为城市的点,并根据面积降序排列",
        "output": "match(a:city) return a order by a.area desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与8位医生有诊断关系的病人，以及这些病人接收过的处方。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出99个身高大于等于198的person,根据年龄从大到小排列",
        "output": "match(a:person where a.height >= 198) return a order by a.age desc limit 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出作家的2度以内的环",
        "output": "match(a:author)->{0,1}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出以releases关系关联了film星际穿越的cinema",
        "output": "match(a:film where a.name='星际穿越')<-[e:releases]-(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,gender,salary, 数据为('韩建国','male',2685),('李伟','famale',8419),('吴强','male',8726),('李梅','famale',5007), 以属性name作为相等条件,找出全部publisher以name分组的name, 根据name升序排序",
        "output": "with p as (select * from (VALUES('韩建国','male',2685),('李伟','famale',8419),('吴强','male',8726),('李梅','famale',5007)) as t(name,gender,salary))MATCH (a:publisher WHERE a.name = p.name) RETURN a.name GROUP BY a.name ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'WH'作为输入调用personalRank函数,返回运算结果",
        "output": "Call PERSONALRANK('WH') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(39,2761,'徐月')作为请求表数据,属性分别为age,salary,name, 源点的age等于输入表age,请帮我找出与订单Order_389有关系的卖家的名字",
        "output": "with p as (select * from (VALUES(39,2761,'徐月')) as t(age,salary,name))MATCH (a:orders WHERE a.age = p.age AND (a.name = 'Order_389')) -[e ]-(b:seller) RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "薪资乘8452的值",
        "output": "a.salary * 8452",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为电脑的商品,以及与其有关的订单,并返回电脑的价值和这些订单的名字",
        "output": "match(a:goods where name = '电脑')-[e]-(b:orders) return a.value, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与person有关系的person节点,且person节点的salary为空,并返回这些person的id加25的值,以及person的height加188的值",
        "output": "match(a:person)-[e]->(b:person where (b.salary is null)) return b.id + 25, b.height + 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary分组,计算id加id的最大值",
        "output": "return MAX(a.id + a.id) group by a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为69的用户关联的帖子,和以包含关系关联了这些帖子的其他论坛",
        "output": "match(a:user where a.id = 69)-[e]-(b:post)<-[e2:contain]-(c:forum) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为105的person有关的person的伙伴, 再返回和person有关系的相关者",
        "output": "match(a:person where id = 105)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为黄月的节点watch的cinema或comment",
        "output": "match(a where a.name='黄月')-[e:watch]->(b:cinema | comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为天涯论坛的点包含的全部帖子,并对这些帖子的语言进行求和",
        "output": "match(a where a.name='天涯论坛')-[e:contain]->(b:post) return SUM(b.lang)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被person吴思琪关联的person",
        "output": "match(a:person)<-[e:relates]-(b:person where b.name='吴思琪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有与电影院好视影院有关系的标签的名字",
        "output": "match(a:cinema where a.name='好视影院')-[e]-(b:tag) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找36个名为Prescription_201的点包含的标签等于药品的节点,且其类别不等于安眠药或id在27到67之间",
        "output": "match(a where a.name='Prescription_201')-[e:contain]->(b:medicine where b.category <> '安眠药' or (b.id BETWEEN 27 AND 67)) return b limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有与标签为'author'的点有'knows'关系的作者，并且这些作者还与某个书有'write'关系。",
        "output": "match(a:author)-[e:knows]->(b:author)-[e2:write]->(c:book) return c limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与ID为25的出版社有关的书籍的引用，然后再帮我找出与书籍有关的引用。",
        "output": "match(a:publisher where id = '25')-[e]-(b:book)-[e2:refers]->(c), (b:book)-[e3:refers]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与book白夜行和book百年孤独都存在refers关系的book节点，并返回这些book的createTime、name以及book白夜行的category和book百年孤独的名字。",
        "output": "match(a:book where a.name='白夜行')-[e:refers]->(b:book)<-[e2:refers]-(c:book where c.name='百年孤独') return a.category,b.createTime, b.name,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与名为赵轩的卖家存在关联，或者与其关联人存在关联的商品。",
        "output": "match(a:seller where n.name=赵轩)-[e:relation]->{1,2}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和账号点有还款关系的贷款节点,且边满足条件权重的最小值小于138.77,目标贷款节点满足条件金额在6584.22到7134.58之间",
        "output": "match(a:account)-[e:repay where MIN(e.weight) < 138.77]->(b:loan where (b.amount BETWEEN 6584.22 AND 7134.58)) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部源点金额为空或id为空,且金额大于等于9341.18,目标点名字等于Zeus,是否冻结为false,或名字不是BIN,且标签等于存款的边",
        "output": "match(a where ((a.amount is null) or (a.id is null)) and a.amount >= 9341.18)-[e:deposit]->(b where (b.name = 'Zeus' and b.isBlock = false) or b.name <> 'BIN') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与杜梅存在朋友关系的person,person与person存在同事关系的点,返回这些点的性别",
        "output": "match(a where a.name = '杜梅')-[e:friend]->(b:person)-[e2:colleague]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和seller郑若涵之间有ask关系的buyer",
        "output": "match(a:seller where a.name='郑若涵')-[e:ask]->(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,name,id, 数据为('famale','王轩',62),('male','马科',18), 源点的id等于输入表id,请帮我找出person的三角的环,边label为person_colleague_person, 并返回这些点的id",
        "output": "with p as (select * from (VALUES('famale','王轩',62),('male','马科',18)) as t(gender,name,id))MATCH (a:person WHERE a.id = p.id) -[e:person_colleague_person ]->(b) -[e2:person_colleague_person ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有卖家的id减94的和",
        "output": "match(a:seller) return SUM(a.id - 94)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询92个person陈红和陈伟,共同的相关者",
        "output": "match(a:person where a.name='陈红')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈伟') return b limit 92",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person有关系的person节点,且person节点的身高大于等于174,并返回这些person的id乘id除68的最小值,以及person的salary的最小值减5444对薪资取余的求和值",
        "output": "match(a:person)-[e]->(b:person where b.height >= 174) return MIN(b.id * b.id / 68), SUM(MIN(b.salary) - 5444 % b.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查找源点标签为person,边标签为person_own_account,以及权重为空且权重小于等于176.95的边",
        "output": "match(a:person)-[e:person_own_account where (e.weight is null) and e.weight <= 176.95]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出李梅和徐宏的共同父节点。",
        "output": "match(a:person where a.name='李梅')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='徐宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为person的全部点,并根据名字从大到小排列",
        "output": "match(a:person) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与部门相关的医生节点，并按性别进行分组，最后返回性别信息。",
        "output": "match(a:department)-[e:has]-(b:doctor) return b.gender group by b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询前81个id大于17且价格大于等于55,或价格不是30的书",
        "output": "match(a:book where (a.id > 17 and a.price >= 55) or a.price <> 30) return a limit 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到一个叫周强的人",
        "output": "match(a:person where a.name = '周强') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person徐月的所有标签为family的边,并根据weight升序排列,返回89个",
        "output": "match(a:person where a.name = '徐月')-[e:family]->(b) return b order by e.weight asc limit 89",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照等级、价值和ID分组大学，然后按价值从高到低排序。",
        "output": "match(a:university) return a.value group by a.level, a.value, a.id order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与马思思有亲属关系的人，并找出这些人之间的关联关系，最后返回这些关联关系的性别。",
        "output": "match(a where a.name = '马思思')-[e:family]->(b:person)-[e2:family]->(c:person) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点age等于99,height小于等于165,或id不为空,目标点name不等于18或salary在4211到8662之间,且标签等于friend的边",
        "output": "match(a where (a.age = 99 and a.height <= 165) or (a.id is not null))-[e:friend]->(b where b.name <> 18 or (b.salary BETWEEN 4211 AND 8662)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找address不等于C栋且name是横店影院的cinema releases的film的名称,以及这些film has的tag的名称",
        "output": "match(a:cinema where a.address <> 'C栋' and a.name = '横店影院')-[e:releases]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与Faker账号相关的贷款，并查找与Faker还款相关的其他贷款，然后将它们返回。",
        "output": "match(a:account where a.name = 'Faker')-[e]-(b:loan), (a:account)-[e2:repay]->(c:loan) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为四川大学的点拥有的部门",
        "output": "match(a where a.name='四川大学')-[e:has]->(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以594,448,520,319作为请求点id, 源点的id等于输入表id,查询药品以类别,价格分组的名字, 根据名字从小到大排序",
        "output": "with p as (select * from (VALUES(594),(448),(520),(319)) as t(id)) MATCH (a:medicine WHERE a.id = p.id) RETURN a.name GROUP BY a.category, a.price ORDER BY a.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找论坛百度贴吧 包含的帖子,返回帖子 拥有的标签的id除87对55取余的值",
        "output": "match(a:forum where name = '百度贴吧')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c.id / 87 % 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,age,gender, 数据为(183,72,'male')的子查询作为输入表, 源点的gender等于输入表gender,查找2个名为杜若涵的点取消的类型是订单的节点,且节点名字是Order_227或价格不为空",
        "output": "with p as (select * from (VALUES(183,72,'male')) as t(height,age,gender))MATCH (a WHERE a.gender = p.gender AND (a.name = '杜若涵')) -[e:buyer_cancel_orders ]->(b:orders WHERE b.name = 'Order_227' OR b.price IS NOT NULL) RETURN b LIMIT 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询177个和类型是person的点有watch关系的film,且和这些film有has关系的tag",
        "output": "match(a:person)-[e:watch]->(b:film)-[e2:has]->(c:tag) return c limit 177",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和名为腾讯的公司有朋友关系,或有朋友的朋友关系的person",
        "output": "match(a:company where n.name=腾讯)-[e:friend]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点createTime不等于2014年02月17日且createTime不等于2024年10月15日,或id小于等于90,边label为has,且srcId在55到139之间或f1不等于true或f0在834到998之间的边,返回这些边的targetId加targetId的值",
        "output": "match(a where (a.createTime <> '2014-02-17' and a.createTime <> '2024-10-15') or a.id <= 90)-[e:has where (e.srcId BETWEEN 55 AND 139) or e.f1 <> true or (e.f0 BETWEEN 834 AND 998)]->(b) return e.targetId + e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回滴滴公司。",
        "output": "match(a:company where a.name = '滴滴') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,name,sellerNumber, 数据为(782,'香蕉',1379.66),(426,'键盘',1820.32)的子查询作为输入表, 源点的sellerNumber等于输入表sellerNumber,找出订单Order_243的全部label为伙伴的边,并根据f1从小到大排列,返回99个",
        "output": "with p as (select * from (VALUES(782,'香蕉',1379.66),(426,'键盘',1820.32)) as t(value,name,sellerNumber))MATCH (a:orders WHERE a.sellerNumber = p.sellerNumber AND (a.name = 'Order_243')) -[e:partner ]->(b) RETURN b ORDER BY e.f1 LIMIT 99",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以454,901,636,549,67作为请求点id, 以属性id作为相等条件,请帮我查找与person吴强有person_apply_loan关系的3度的环",
        "output": "with p as (select * from (VALUES(454),(901),(636),(549),(67)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '吴强')) -[e:person_apply_loan ]->{2,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部label为医生或部门或药品的点",
        "output": "match(a:doctor | department | medicine) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找teacher韩国强的全部label为friend的边,并根据srcId降序排列,返回57个",
        "output": "match(a:teacher where a.name = '韩国强')-[e:friend]->(b) return b order by e.srcId desc limit 57",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查询69个薪资在2426到7309之间的person,根据id升序排列",
        "output": "match(a:person where (a.salary BETWEEN 2426 AND 7309)) return a order by a.id asc limit 69",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为杜思思的,名字不是Geaflow123的相关者,返回这些相关者的价值,和边的源点id",
        "output": "match(a where a.name='杜思思')-[e:relation]->(b where b.name <> 'Geaflow123') return b.value,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重分组,计算权重减89的最小值",
        "output": "return MIN(a.weight - 89) group by a.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和patient黄科有关的doctor,再查找和黄科accept的其他prescription,返回它们",
        "output": "match(a:patient where a.name = '黄科')-[e]-(b:doctor), (a:patient)-[e2:accept]->(c:prescription) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与person张建聪有关系的person的salary",
        "output": "match(a:person where a.name='张建聪')-[e]-(b:person) return b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为loan_90的点的,名字不等于Light或上次登录时间是2032年01月21日的朋友,返回这些朋友的id,和边的时间戳",
        "output": "match(a where a.name='loan_90')-[e:friend]->(b where b.name <> 'Light' or b.lastLoginTime = '2032-01-21') return b.id,e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为19的点的id,changeFileNumber,createTime",
        "output": "match(a where a.id = 19) return a.id, a.changeFileNumber, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出author王思琪 knows的author,返回author knows的author的age的最小值对14取余的最大值",
        "output": "match(a:author where name = '王思琪')-[e:knows]->(b:author)-[e2:knows]->(c:author) return MAX(MIN(c.age) % 14)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与赵强有关的人，再查询赵强喜欢的其他帖子，返回它们。",
        "output": "match(a:user where a.name = '赵强')-[e]-(b:person), (a:user)-[e2:likes]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出74个名为何科的点发布的类型为帖子的节点,且节点字数为空或语言是Japanese",
        "output": "match(a where a.name='何科')-[e:user_publish_post]->(b:post where (b.wordCount is null) or b.lang = 'Japanese') return b limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为26的点的id,权重,地址",
        "output": "match(a where a.id = 26) return a.id, a.weight, a.address",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型为部门、边类型为拥有的边，然后计算这些边的权重对198.14取余的和以及权重减去权重的平均值。",
        "output": "match(a:department)-[e:has]->(b) return SUM(e.weight % 198.14), AVG(e.weight - e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和论坛百度贴吧有包含关系的用户,再帮我查询以包含关系关联了百度贴吧的用户",
        "output": "match(a:forum where a.name = '百度贴吧')-[e:contain]->(b:user),(a:forum where a.name = '百度贴吧')<-[e2:contain]-(c:user)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有person的relation,或其relation的relation",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与黄科有咨询关系的卖家，以及它们所拥有的商品，并返回这些点的ID。",
        "output": "match(a where a.name = '黄科')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生杜雪朋友的朋友",
        "output": "match(a:doctor where a.name='杜雪')-[e:partner]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和课程大学英语有关的教师,再给出和大学英语属于的其他部门,返回它们",
        "output": "match(a:course where a.name = '大学英语')-[e]-(b:teacher), (a:course)-[e2:belong]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为电脑的buyer,以及与其有关的orders,并返回电脑的id和这些orders的price",
        "output": "match(a:buyer where name = '电脑')-[e]-(b:orders) return a.id, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王梅有关,且与贷款loan_70有关系的公司节点",
        "output": "match(a:person where a.name='王梅')-[e:invest]-(b:company)-[e2:apply]-(c:loan where c.name='loan_70') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为赵轩的点的,wordCount不为空或lang为Chinese的partner,返回这些partner的lang,和边的f1,timeStamp,srcId",
        "output": "match(a where a.name='赵轩')-[e:partner]->(b where (b.wordCount is not null) or b.lang = 'Chinese') return b.lang,e.f1, e.timeStamp, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为salary,id,age, 数据为(2279,98,76)的子查询作为输入表, 以属性salary作为相等条件,查找所有名为百年孤独的,名字等于呐喊,字数大于等于795的引用,返回这些引用的创建时间,和边的f1",
        "output": "with p as (select * from (VALUES(2279,98,76)) as t(salary,id,age))MATCH (a WHERE a.salary = p.salary AND (a.name = '百年孤独')) -[e:book_refers_book ]->(b WHERE b.name = '呐喊' AND b.wordCount >= 795) RETURN b.createTime, e.f1 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部源点满足条件权重的个数大于等于61,目标点满足条件上次登录时间不是2012年05月21日或id的个数乘id不等于67,且标签为存款的边",
        "output": "match(a where COUNT(a.weight) >= 61)-[e:deposit]->(b where b.lastLoginTime <> '2012-05-21' or COUNT(b.id) * b.id <> 67) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有person的family，或者这些person的family的family",
        "output": "match(a:person)-[e:family]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找书百年孤独认识的书,以及关联这些书的书, 令书(c)的id等于书(a)的价格,令书(b)的id等于书(c)的创建时间, 返回书(a)的创建时间,书(b)的名字,书(c)的id",
        "output": "match(a:book where name = '百年孤独')-[e:knows]->(b:book)<-[e2:relates]-(c:book) let c.id = a.price,let b.id = c.createTime return a.createTime,b.name,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找帖子Post_104的所有相关者,的weight的个数除权重的最大值",
        "output": "match(a:post where a.name= 'Post_104')-[e:relation]->(b) return MAX(COUNT(e.weight) / e.weight)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前40个label为选择的边",
        "output": "match(a)-[e:selects]->(b) return e limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和周思琪有关的人，以及与这些人有关联的人，并返回它们。",
        "output": "match(a:person where a.name = '周思琪')-[e]-(b:person), (a:person)-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询喜欢书百年孤独的读者,和这些读者喜欢的书",
        "output": "match(a:book where name = '百年孤独')<-[e:likes]-(b:reader)-[e2:likes]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出44个用户赵月和何轩,共同的相关者",
        "output": "match(a:user where a.name='赵月')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='何轩') return b limit 44",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有按性别、身高和 ID 分组的人的性别，并按从大到小排序。",
        "output": "match(a:person) return a.gender group by a.gender, a.height, a.id order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有作家的伙伴,或其伙伴的伙伴",
        "output": "match(a:author)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 在CSDN论坛中搜索包含特定关键词的人。",
        "output": "match(a:person)<-[e:contain]-(b:forum where b.name='CSDN') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询用户的三角的环,边标签为创造, 并返回这些点的id",
        "output": "match(a:user)-[e:creates]->(b)-[e2:creates]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘21减77的值",
        "output": "a.id * 21 - 77",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出王强和杜红之间的101个关联，他们都是医生。",
        "output": "match(a:doctor where a.name='王国强')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='杜红') return b limit 101",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与seller韩强有关的goods，以及与buyer徐红有关的orders，并返回它们。",
        "output": "match(a:seller where a.name = '韩强')-[e:has]->(b:goods),(c:buyer where c.name = '徐红')-[e2:creates]->(d:orders) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据age,salary分组,计算height除height的最小值",
        "output": "return MIN(a.height / a.height) group by a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回loan loan_53 deposit的account,以及deposit这些account的loan, 令account的lastLoginTime等于account的isBlock的数量,令account的weight等于loan的amount, 返回loan(a)的amount,account(b)的lastLoginTime,loan(c)的id",
        "output": "match(a:loan where name = 'loan_53')-[e:deposit]->(b:account)<-[e2:deposit]-(c:loan) let b.lastLoginTime = COUNT(b.isBlock),let b.weight = a.amount return a.amount,b.lastLoginTime,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马若涵和吴轩作为用户拥有的共同朋友列表。",
        "output": "match(a:user where a.name='马若涵')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='吴轩') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询has user张若涵的repository,和这些repository has的issue",
        "output": "match(a:user where name = '张若涵')<-[e:has]-(b:repository)-[e2:has]->(c:issue) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为185的软件有关的公司的朋友, 再帮我查询和公司有关系的相关者",
        "output": "match(a:software where id = 185)-[e]-(b:company)-[e2:friend]->(c), (b:company)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与 person 节点关联的 person 节点，然后根据它们的 gender、height 和 name 分组，并返回这些属性。",
        "output": "match(a:person)-[e:lover]-(b:person) return b.gender, b.height, b.name group by b.gender, b.height, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点类型是person,目标点类型是公司,类型是person或公司或软件的边",
        "output": "match(a:person)-[e:person | company | software]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与doctor黄思琪有belong关系的1度以内的环",
        "output": "match(a:doctor where name = '黄思琪')-[e:belong]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出源点薪资在2013到7750之间且年龄不是86,名字不等于黄科,边类型为教,且满足条件f0为855的边,返回这些边的目标点id除72的最大值",
        "output": "match(a where (a.salary BETWEEN 2013 AND 7750) and a.age <> 86 and a.name <> '黄科')-[e:teach where e.f0 = 855]->(b) return MAX(e.targetId / 72)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点id不等于99,目标点peopleNumber为空且id大于80,peopleNumber的平均值加8521的最大值为95647,且标签为belong的边",
        "output": "match(a where a.id <> 99)-[e:belong]->(b where (b.peopleNumber is null) and b.id > 80 and MAX(AVG(b.peopleNumber) + 8521) = 95647) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部与王月存在回答关系的买家,买家与卖家存在咨询关系的点,返回这些点的性别",
        "output": "match(a where a.name = '王月')-[e:ask]->(b:buyer)-[e2:consult]->(c:seller) return c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和名为陈雪的person有friend关系,或有friend的friend关系的company",
        "output": "match(a:person where n.name=陈雪)-[e:friend]->{1,2}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有名为张国强的点的,age为空或height小于等于157的colleague,返回这些colleague的height,和边的weight",
        "output": "match(a where a.name='张国强')-[e:colleague]->(b where (b.age is null) or b.height <= 157) return b.height,e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为56的comment对应的person的partner信息，以及这个person相关的friend信息。",
        "output": "match(a:comment where id = '56')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有处方的id减86的值",
        "output": "match(a:prescription) return a.id - 86",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 美团和字节两家公司共有的公司关系节点列表。",
        "output": "match(a:company where a.name='美团')-[e:relation]->(b)<-[e2:relation]-(c:company where c.name='字节') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的年龄减32乘年龄对164取余的值",
        "output": "match(a:person) return (a.age - 32) * a.age % 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回company的3跳以内的环",
        "output": "match(a:company)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从公司蚂蚁集团出发,经过标签等于属于的边,走3度或4度到达的城市点",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:belong]->{3,4}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从department文学院出发，通过has类型的边，经过1或2次跳跃后到达的teacher节点。",
        "output": "match(a:department where a.name='文学院')-[e:has]->{1,2}(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与处方点相关的药品节点，按ID、权重和名称进行分组，并返回它们的ID、权重和名称。",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.id, b.weight, b.name group by b.id, b.weight, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person apply的loan,返回其源点的salary除6750对199取余的值,以及目标点的id加id除95的平均值",
        "output": "match(a:person)-[e:apply]->(b:loan) return a.salary / 6750 % 199, AVG((b.id + b.id) / 95)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为23的person关联的person,和以认识关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 23)-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与帖子有关系的论坛节点,且论坛节点的创建时间等于2014年12月23日,并返回这些论坛的peopleNumber的平均值乘846的数量,以及论坛的价值加608对95取余的值",
        "output": "match(a:post)-[e]->(b:forum where b.createTime = '2014-12-23') return COUNT(AVG(b.peopleNumber) * 846), b.value + 608 % 95",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据大小,价值分组,计算大小乘大小的值",
        "output": "return a.size * a.size group by a.size, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与商品杯子和卖家赵轩都存在关系的商品节点及其价值。",
        "output": "match(a:goods where a.name='杯子')-[e]->(b:goods)<-[e2]-(c:seller where c.name='赵轩') return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部医生的伙伴,或其伙伴的伙伴",
        "output": "match(a:doctor)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给定一个类型为teacher,名为王月的点，返回该点的性别、年龄和薪水。",
        "output": "match(a:teacher where a.name = '王月') return a.gender, a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回26个price小于等于597.49的orders,根据value升序排列",
        "output": "match(a:orders where a.price <= 597.49) return a order by a.value asc limit 26",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "从用户王科出发，沿着标签为'publish'的边走2到4步，到达post节点。",
        "output": "match(a:user where a.name='王科')-[e:publish]->{2,4}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回被person韩宏pay的person",
        "output": "match(a:person)<-[e:person_pay_person]-(b:person where b.name='韩宏') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为马梅和李雪的,label为person的点公共的partner节点的名单",
        "output": "match(a:person where a.name='马梅')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='李雪') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person马建聪喜欢的person节点认识的person",
        "output": "match(a:person where a.name = '马建聪')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出性别不是女性且年龄不是11岁的person观看的电影的名称，以及这些电影拥有的标签的名称",
        "output": "match(a:person where a.gender <> 'famale' and a.age <> 11)-[e:watch]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下从王轩这个病人出发，通过accept标签的边，走1到3步可以达到的处方点",
        "output": "match(a:patient where a.name='王轩')-[e:accept]->{1,3}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被读者陈雪喜欢的书",
        "output": "match(a:book)<-[e:likes]-(b:reader where b.name='陈雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件id不为空且name等于Order_226的节点",
        "output": "match(a where (a.id is not null) and a.name = 'Order_226') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为Zookeeper的software,以及与其有关的company,并返回Zookeeper的value和这些company的scale",
        "output": "match(a:software where name = 'Zookeeper')-[e]-(b:company) return a.value, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出所有department的朋友，或者朋友的朋友。",
        "output": "match(a:department)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为美团的点雇佣的person",
        "output": "match(a where a.name='美团')-[e:employee]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与用户马建聪有关系的仓库的名字",
        "output": "match(a:user where a.name='马建聪')-[e]-(b:repository) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询全部和名为TheShy的账号有相关者关系,或有相关者的相关者关系的贷款",
        "output": "match(a:account where n.name=TheShy)-[e:relation]->{1,2}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为历史的标签,以及与其有关的论坛,并返回历史的名字和这些论坛的人数",
        "output": "match(a:tag where name = '历史')-[e]-(b:forum) return a.name, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为孙若涵和王国强的,label为person的点公共的colleague节点的名单",
        "output": "match(a:person where a.name='孙若涵')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='王国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有源点标签等于person,边标签等于认识,以及满足条件源点id在71到104之间或f1大于等于886,且f0小于95的边",
        "output": "match(a:person)-[e:knows where ((e.srcId BETWEEN 71 AND 104) or e.f1 >= 886) and e.f0 < 95]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表799,959,163,885,129, 源点的id等于输入表id,找出和电影院UME有3度关系的person",
        "output": "with p as (select * from (VALUES(799),(959),(163),(885),(129)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.name = 'UME')) -[e ]->{3,3}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以334作为请求点id, 以属性id作为相等条件,请帮我找出类型为post的所有点,并根据createTime降序排列",
        "output": "with p as (select * from (VALUES(334)) as t(id)) MATCH (a:post WHERE a.id = p.id) RETURN a ORDER BY a.createTime DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和编辑孙若涵有关的读者,称为X,再请帮我找出和这个X有关联的其他编辑,以及和X有关联的书",
        "output": "match(a:publisher where a.name = '孙若涵')-[e]-(b:reader), (b:reader)-[e2]-(c:publisher),(b:reader)-[e3]-(d:book) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,value, 数据为(73,'动作',854), 源点的id等于输入表id,帮我查询id为79的标签有关的person的相关者, 再帮我查询和person有关系的伙伴",
        "output": "with p as (select * from (VALUES(73,'动作',854)) as t(id,name,value))MATCH (a:tag WHERE a.id = p.id AND (id = '79')) -[e ]-(b:person) -[e2:relation ]->(c) , (b:person) -[e3:partner ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为loan_66的loan,以及与其有关的account,并返回loan_66的id和这些account的value",
        "output": "match(a:loan where name = 'loan_66')-[e]-(b:account) return a.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('何思琪',5,153)作为请求表数据,属性分别为name,age,height, 以属性age作为相等条件,给出前1个满足条件scale是large且value为空,id等于76的company",
        "output": "with p as (select * from (VALUES('何思琪',5,153)) as t(name,age,height))MATCH (a:company WHERE a.age = p.age AND (a.scale = 'large' AND a.value IS NULL AND a.id = 76)) RETURN a LIMIT 1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回forum或relation的relationship。",
        "output": "match(a:forum)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和读者马梅有关的读者,称为X,再请帮我找出和这个X有关联的其他书,以及和X有关联的读者",
        "output": "match(a:reader where a.name = '马梅')-[e]-(b:reader), (b:reader)-[e2]-(c:book),(b:reader)-[e3]-(d:reader) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出prescription Prescription_456的标签等于relation的边,并根据srcId升序排列,返回156个",
        "output": "match(a:prescription where a.name = 'Prescription_456')-[e:relation]->(b) return b order by e.srcId asc limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问吴强作家写了哪些被其他书引用的书籍？",
        "output": "match(a:author where a.name='吴强')-[e:write]->(b:book)<-[e2:knows]-(c:book) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以850作为请求点id, 以属性id作为相等条件,请帮我找出id为56的person有关的评论的伙伴, 再请帮我找出和评论有关系的朋友",
        "output": "with p as (select * from (VALUES(850)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (id = '56')) -[e ]-(b:comment) -[e2:partner ]->(c) , (b:comment) -[e3:friend ]->(d) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回事项ISSUE-117属于的仓库,被其他事项属于的数量",
        "output": "match(a:issue where a.name='ISSUE-117')-[e:belong]->(b:repository)<-[e2:belong]-(c:issue) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与陈建国同事、与黄思思家人有关的个人节点，返回他们的身高、薪资、陈建国的性别和黄思思的性别。",
        "output": "match(a:person where a.name='陈建国')-[e:colleague]->(b:person)<-[e2:family]-(c:person where c.name='黄思思') return a.gender,b.height, b.salary,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出同时被标记为'卖家'且名字分别为Jack和周国强的共同联系人列表。",
        "output": "match(a:seller where a.name='Jack')-[e:relation]->(b)<-[e2:relation]-(c:seller where c.name='周国强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为郑月的点喜欢的评论",
        "output": "match(a where a.name='郑月')-[e:likes]->(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与人类型的人有恋爱关系的人，以及他们有朋友关系的人。",
        "output": "match(a:person)-[e:lover]->(b:person)-[e2:friend]->(c:person)-[e3:friend]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为滴滴的点创造的软件",
        "output": "match(a where a.name='滴滴')-[e:creates]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找属于公司蚂蚁集团属于的城市,的大学",
        "output": "match(a:company where name = '蚂蚁集团')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与杭州或与杭州有关系的城市或国家。",
        "output": "match(a:city where n.name=杭州)-[e:relation]->{1,2}(b:country) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为129的点的id",
        "output": "match(a where a.id = 129) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找由医生赵科诊断过的病人",
        "output": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='赵科') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为李思琪和陈强的,标签等于teacher的点公共的friend节点的名单",
        "output": "match(a:teacher where a.name='李思琪')-[e:friend]->(b)<-[e2:friend]-(c:teacher where c.name='陈强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找城市的朋友,或其朋友的朋友",
        "output": "match(a:city)-[e:friend]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回forum中国诗词论坛 contain的user,返回user likes的post的value的最小值乘243的个数",
        "output": "match(a:forum where name = '中国诗词论坛')-[e:contain]->(b:user)-[e2:likes]->(c:post) return COUNT(MIN(c.value) * 243)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与黄思思和陈强都认识的人。这些人必须是person类型的节点。",
        "output": "match(a where a.name = '黄思思')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '陈强') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以80, 68作为输入调用triangleCount函数,返回number",
        "output": "Call TRIANGLECOUNT(80, 68) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询teacher以age分组的gender, 根据gender升序排序",
        "output": "match(a:teacher) return a.gender group by a.age order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有和cinema大众影院有关系的film或tag,返回这些点的id,height,salary",
        "output": "match(a:cinema where a.name='大众影院')-[e]-(b:film | tag) return b.id, b.height, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询课程属于的部门,返回其源点的价值加604的值,以及目标点的id的求和值乘id的和",
        "output": "match(a:course)-[e:belong]->(b:department) return a.value + 604, SUM(SUM(b.id) * b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询买家以身高,性别分组的薪资, 根据薪资从小到大排序",
        "output": "match(a:buyer) return a.salary group by a.height, a.gender order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与王雪和马科都有关系的处方，并返回它们的权重。",
        "output": "match(a:user where a.name='王雪')-[e]->(b:prescription)<-[e2]-(c:user where c.name='马科') return b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点类型为person,边类型为投资,以及目标点id等于130且权重大于等于137.24,权重为空的边",
        "output": "match(a:person)-[e:invest where e.targetId = 130 and e.weight >= 137.24 and (e.weight is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回51个与韩轩和陈科都存在关系的医生节点",
        "output": "match(a where a.name='韩轩')-[e]->(b:doctor)<-[e2]-(c where c.name='陈科') return b limit 51",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点value小于等于881,边标签等于has,且满足条件targetId小于等于55且weight是177.80的边,返回这些边的srcId乘srcId加srcId除166的值",
        "output": "match(a where a.value <= 881)-[e:has where e.targetId <= 55 and e.weight = 177.80]->(b) return (e.srcId * e.srcId + e.srcId) / 166",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person马国强之间有属于关系的公司",
        "output": "match(a:person where a.name='马国强')-[e:belong]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以184,634,587,465,36作为请求点id, 源点的id等于输入表id,给出城市深圳的所有类型为朋友的边,并根据f1升序排列,返回195个",
        "output": "with p as (select * from (VALUES(184),(634),(587),(465),(36)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (a.name = '深圳')) -[e:friend ]->(b) RETURN b ORDER BY e.f1 LIMIT 195",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与标签其他有关系的标签的价值",
        "output": "match(a:tag where a.name='其他')-[e]-(b:tag) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有与医学相关的部门，以及隶属于这些部门的其他医生。",
        "output": "match(a:medicine where a.id = '128')-[e]-(b:department)<-[e2:belong]-(c:doctor) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为f1,srcId,f0, 数据为(true,138,534),(true,57,633),(false,85,891),(false,78,591)的子查询作为输入表, 源点的srcId等于输入表srcId,查询person吴若涵 belong的company,返回company creates的software的value对328取余的平均值 ",
        "output": "with p as (select * from (VALUES(true,138,534),(true,57,633),(false,85,891),(false,78,591)) as t(f1,srcId,f0))MATCH (a:person WHERE a.srcId = p.srcId AND (name = '吴若涵')) -[e:person_belong_company ]->(b:company) -[e2:company_creates_software ]->(c:software) RETURN AVG(c.value % 328) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和公司腾讯之间有合作关系的大学",
        "output": "match(a:company where a.name='腾讯')-[e:cooperate]->(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与徐国强和Sam都存在同事关系的人，返回他们的性别、徐国强的身高和Sam的薪水。",
        "output": "match(a:person where a.name='徐国强')-[e:colleague]->(b:person)<-[e2:colleague]-(c:person where c.name='Sam') return a.height,b.gender,c.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签为用户,名为张若涵的点,返回这些点的名字,薪资,id",
        "output": "match(a:user where a.name = '张若涵') return a.name, a.salary, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,amount,weight, 数据为(93,5298.63,483),(9,4156.75,769),(23,3826.52,353),(77,3531.56,589), 以属性weight作为相等条件,查找和名为赵月的person有伙伴关系,或有伙伴的伙伴关系的公司",
        "output": "with p as (select * from (VALUES(93,5298.63,483),(9,4156.75,769),(23,3826.52,353),(77,3531.56,589)) as t(id,amount,weight))MATCH (a:person WHERE a.weight = p.weight AND (n.name = 赵月)) -[e:partner ]->{1,2}(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为吴轩的点creates的pullRequest",
        "output": "match(a where a.name='吴轩')-[e:creates]->(b:pullRequest) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与'我不是药神'电影有关的标签，以及与'好视影院'电影院发行的电影，并返回它们。",
        "output": "match(a:film where a.name = '我不是药神')-[e:has]->(b:tag),(c:cinema where c.name = '好视影院')-[e2:releases]->(d:film) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以13, 'QU'作为输入调用KHOP函数,返回id, kValue",
        "output": "Call KHOP(13, 'QU') yield (id, kValue) return id, kValue",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找被作家认识数量大于106的作家,记为relationCount,再查询这些作家认识的编辑",
        "output": "match(a:author) let a.relationCount = MIN((a:author)<-[e:knows]-(b:author) => b.id) match(a where a.relationCount > 106)-[e2:knows]->(c:publisher) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘65的最小值",
        "output": "MIN(a.id * 65)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以345,503,221,909,266作为请求点id, 源点的id等于输入表id,找出person的三角的环,边类型是person_buy_software, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(345),(503),(221),(909),(266)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]->(b) -[e2:person_buy_software ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "选择生物学院的学生可以选修哪些课程",
        "output": "match(a:department where a.name = '生物学院')-[e:has]->(b:student)-[e2:selects]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回医生何思琪创造的处方,被其他医生创造的数量",
        "output": "match(a:doctor where a.name='何思琪')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与52个电影院标签相关的上映电影，以及这些电影所关联的所有标签",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出doctor徐科的所有friend,的targetId加80的最大值",
        "output": "match(a:doctor where a.name= '徐科')-[e:friend]->(b) return MAX(e.targetId + 80)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回city的3跳以内的环",
        "output": "match(a:city)->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从person孙科出发,经过label为喜欢的边,走2到5度到达的person点",
        "output": "match(a:person where a.name='孙科')-[e:likes]->{2,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person buy的software, 令software的value的值等于buysoftware的person的gender的平均值, 再查找software uses的software",
        "output": "match(a:person)-[e:buy]->(b:software) let b.value = AVG((b:software)<-[e2:buy]-(c:person) => c.gender) match(b:software)-[e3:uses]->(d:software) return b.value, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据年龄,薪资分组,计算年龄减74的最小值",
        "output": "return MIN(a.age - 74) group by a.age, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person周建国存在parent关系,且与person韩科存在colleague关系的person节点，返回这些person的id,及person周建国的age,及person韩科的name",
        "output": "match(a:person where a.name='周建国')-[e:parent]->(b:person)<-[e2:colleague]-(c:person where c.name='韩科') return a.age,b.id,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回从university南京大学出发,经过label为has的边,走3到6度到达的department点",
        "output": "match(a:university where a.name='南京大学')-[e:has]->{3,6}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据salary,gender分组,计算height的平均值对181取余的值",
        "output": "return AVG(a.height) % 181 group by a.salary, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与某个person有关联的其他person，以及这些person之间通过knows关系相互关联的情况。",
        "output": "match(a:person where a.id = '45')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和名为马若涵的病人有朋友关系,或有朋友的朋友关系的处方",
        "output": "match(a:patient where n.name=马若涵)-[e:friend]->{1,2}(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与person有关联的person节点，这些节点的名字不叫赵思琪。然后计算这些节点的salary除以salary的余数的平均值，以及age减去35的最小值。",
        "output": "match(a:person)-[e]->(b:person where b.name <> '赵思琪') return AVG(b.salary % b.salary), MIN(b.age - 35)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person何梅有关的person,再给出和何梅own的其他account,返回它们",
        "output": "match(a:person where a.name = '何梅')-[e]-(b:person), (a:person)-[e2:own]->(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询162个名为李思思的点提交的类型为软件的节点,且节点名字等于Kafka,价值不为空",
        "output": "match(a where a.name='李思思')-[e:commits]->(b:software where b.name = 'Kafka' and (b.value is not null)) return b limit 162",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person认识的person,返回其源点的salary的求和值减8436的值,以及目标点的height的个数加163的平均值",
        "output": "match(a:person)-[e:knows]->(b:person) return SUM(a.salary) - 8436, AVG(COUNT(b.height) + 163)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出全部源点类型为person,目标点类型为公司,类型为person_invest_company的边",
        "output": "match(a:person)-[e:person_invest_company]->(b:company) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和城市纽约有关系的大学,返回这些点的名字,等级,id",
        "output": "match(a:city where a.name='纽约')-[e]-(b:university) return b.name, b.level, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被作家孙若涵认识的作家,和孙若涵撰写的书",
        "output": "match(a:author)<-[e:knows]-(b:author where name = '孙若涵')-[e2:write]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('杜强',33,179),('李梅',4,174),('赵若涵',23,175),('马若涵',47,161)作为请求表数据,属性分别为name,age,height, 源点的age等于输入表age,查找和person有关联的film节点,并根据其value,id,category分组,返回value,id,category,以及id对41取余的和",
        "output": "with p as (select * from (VALUES('杜强',33,179),('李梅',4,174),('赵若涵',23,175),('马若涵',47,161)) as t(name,age,height))MATCH (a:person WHERE a.age = p.age) -[e:person_watch_film ]-(b:film) RETURN b.value, b.id, b.category, SUM(b.id % 41) GROUP BY b.value, b.id, b.category ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与Prescription_246和Prescription_340都有关联的192个prescription节点。",
        "output": "match(a where a.name='Prescription_246')-[e]->(b:prescription)<-[e2]-(c where c.name='Prescription_340') return b limit 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从person李轩出发，通过likes类型的边，走了2到4步后到达的人。",
        "output": "match(a:person where a.name='李轩')-[e:likes]->{2,4}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出前199个标签等于转账的边",
        "output": "match(a)-[e:transfer]->(b) return e limit 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出id为43的person有关的person的家人, 再找出和person有关系的家人",
        "output": "match(a:person where id = 43)-[e]-(b:person)-[e2:family]->(c), (b:person)-[e3:family]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表200,827,755,348, 以属性id作为相等条件,找出全部与论坛CSDN有关系的用户的薪资",
        "output": "with p as (select * from (VALUES(200),(827),(755),(348)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = 'CSDN')) -[e ]-(b:user) RETURN b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找post Post_285的全部friend,的f0加910的值",
        "output": "match(a:post where a.name= 'Post_285')-[e:friend]->(b) return e.f0 + 910",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出喜欢作家杜梅撰写的书,的读者",
        "output": "match(a:author where name = '杜梅')-[e:write]->(b:book)<-[e2:likes]-(c:reader) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询prescription,筛选出createTime在2031年04月17日之后的，按id从大到小排序，共179个。",
        "output": "match(a:prescription where a.createTime <> '2031-04-17') return a order by a.id desc limit 179",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询41个电影泰坦尼克号和变形金刚,共同的相关者",
        "output": "match(a:film where a.name='泰坦尼克号')-[e:relation]->(b)<-[e2:relation]-(c:film where c.name='变形金刚') return b limit 41",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生诊断的病人,返回其源点的年龄除32的值,以及目标点的年龄乘37的值",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return a.age / 32, b.age * 37",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与买家吴月有查看关系的1跳以内的环",
        "output": "match(a:buyer where name = '吴月')-[e:look]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出197个publisher何建聪和吴建聪,共同的relation",
        "output": "match(a:publisher where a.name='何建聪')-[e:relation]->(b)<-[e2:relation]-(c:publisher where c.name='吴建聪') return b limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和user有关联的repository节点,并根据其name,createTime分组,返回name,createTime,以及stars减860的值",
        "output": "match(a:user)-[e:likes]-(b:repository) return b.name, b.createTime, b.stars - 860 group by b.name, b.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与department数学学院有department_has_teacher关系的1度以内的环",
        "output": "match(a:department where name = '数学学院')-[e:department_has_teacher]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为孙思琪的person,以及与其有关的person,并返回孙思琪的gender和这些person的salary",
        "output": "match(a:person where name = '孙思琪')-[e]-(b:person) return a.gender, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和名为谷歌的company有friend关系,或有friend的friend关系的software",
        "output": "match(a:company where n.name=谷歌)-[e:friend]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有源点标签为卖家,目标点标签为商品,标签为seller_has_goods的边",
        "output": "match(a:seller)-[e:seller_has_goods]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与person李红有invest关系的1度的环",
        "output": "match(a:person where name = '李红')-[e:invest]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,size,name, 数据为(82,971,'人人影城'),(1,57,'UME'),(46,791,'UME'),(13,731,'好视影院'), 源点的name等于输入表name,查找person的三角的环,边类型为person_creates_comment, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(82,971,'人人影城'),(1,57,'UME'),(46,791,'UME'),(13,731,'好视影院')) as t(id,size,name))MATCH (a:person WHERE a.name = p.name) -[e:person_creates_comment ]->(b) -[e2:person_creates_comment ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门皮肤科 拥有的医生,返回医生 创造的处方的id除71的值",
        "output": "match(a:department where name = '皮肤科')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.id / 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从书百年孤独出发,经过label为引用的边,走2跳或3跳到达的书点",
        "output": "match(a:book where a.name='百年孤独')-[e:refers]->{2,3}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出113个名为徐伟的点喜欢的label为书的节点,且其字数除98除21的最大值不是99,名字不是计算机网络",
        "output": "match(a where a.name='徐伟')-[e:likes]->(b:book where MAX(b.wordCount / 98 / 21) <> 99 and b.name <> '计算机网络') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回身高大于等于177或薪资的最小值大于等于5512的person支付的person的名称,以及这些person 支付的person的名称",
        "output": "match(a:person where a.height >= 177 or MIN(a.salary) >= 5512)-[e:pay]->(b:person)-[e2:pay]->(c:person) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和电影神探狄仁杰有3跳或4跳关系的电影院",
        "output": "match(a:film where a.name='神探狄仁杰')-[e]->{3,4}(b:cinema) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出买家徐建国和马建国都浏览过的商品",
        "output": "match(a:buyer where a.name='徐建国')-[e:look]->(b)<-[e2:look]-(c:buyer where c.name='马建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,height,age, 数据为('famale',196,47),('male',152,95),('famale',150,4),('male',155,23)的子查询作为输入表, 以属性gender作为相等条件,查询id为77的点的id,年龄",
        "output": "with p as (select * from (VALUES('famale',196,47),('male',152,95),('famale',150,4),('male',155,23)) as t(gender,height,age))MATCH (a WHERE a.gender = p.gender AND (a.id = '77')) RETURN a.id, a.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询满足条件名字不是Order_293的节点",
        "output": "match(a where a.name <> 'Order_293') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表171,834,317,803, 以属性id作为相等条件,请帮我找出源点标签为公司,边标签为company_belong_city,且f1为true或f0为空或权重为空的边",
        "output": "with p as (select * from (VALUES(171),(834),(317),(803)) as t(id)) MATCH (a:company WHERE a.id = p.id) -[e:company_belong_city WHERE e.f1 = TRUE OR e.f0 IS NULL OR e.weight IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生黄科属于的部门,和黄科属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '黄科')-[e2:belong]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,height,gender, 数据为(95,154,'famale'),(0,176,'male'),(29,171,'famale'), 以属性id作为相等条件,返回以pay关系关联了person王强的person",
        "output": "with p as (select * from (VALUES(95,154,'famale'),(0,176,'male'),(29,171,'famale')) as t(id,height,gender))MATCH (a:person WHERE a.id = p.id AND (a.name = '王强')) <-[e:person_pay_person ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出支付person陈强的person,和这些person支付的person",
        "output": "match(a:person where name = '陈强')<-[e:pay]-(b:person)-[e2:pay]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问有没有医生节点同时属于传染部和外科，并且标签为医生的？",
        "output": "match(a where a.name = '传染部')-[e:has]->(b:doctor)<-[e2:has]-(c where c.name = '外科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出与类型为person的实体拥有关系的账号，以及这些账号的还款和存款关系。",
        "output": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person的伙伴,或其伙伴的伙伴",
        "output": "match(a:person)-[e:partner]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回规格不是small且id为空且价值不等于994的节点",
        "output": "match(a where a.scale <> 'small' and (a.id is null) and a.value <> 994) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为马思琪的person,以及与其有关的person,并返回马思琪的身高和这些person的名字",
        "output": "match(a:person where name = '马思琪')-[e]-(b:person) return a.height, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询部门名称为耳鼻喉科的点的权重和名称。",
        "output": "match(a:department where a.name = '耳鼻喉科') return a.weight, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取person创建的评论名称和这些评论所属的电影名称，条件是：评论的id大于等于21或者名字不叫陈若涵。",
        "output": "match(a:person where a.id >= 21 or a.name <> '陈若涵')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点满足条件性别不等于male,名字不是Jack且性别不是male,目标点满足条件id在59到89之间,且类型为创造的边",
        "output": "match(a where a.gender <> 'male' and a.name <> 'Jack' and a.gender <> 'male')-[e:creates]->(b where (b.id BETWEEN 59 AND 89)) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为120的点的id",
        "output": "match(a where a.id = 120) return a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为user的全部点,并根据salary升序排列",
        "output": "match(a:user) return a order by a.salary asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表571, 源点的id等于输入表id,返回源点满足条件名字等于何建国或身高不为空或薪资小于等于2663,目标点满足条件人数为空,且类型为person_belong_company的边",
        "output": "with p as (select * from (VALUES(571)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '何建国' OR a.height IS NOT NULL OR a.salary <= 2663)) -[e:person_belong_company ]->(b WHERE b.peopleNumber IS NULL) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点类型是person,边类型是认识的边,返回这些边的源点id对169取余的值,和srcId的最大值对199取余的值",
        "output": "match(a:person)-[e:knows]->(b) return e.srcId % 169, MAX(e.srcId) % 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点类型为城市,目标点类型为大学,类型为城市或国家或公司的边",
        "output": "match(a:city)-[e:city | country | company]->(b:university) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与person节点相关的person节点，按其id、薪资和年龄进行分组，并返回id、薪资和年龄。",
        "output": "match(a:person)-[e:colleague]-(b:person) return b.id, b.salary, b.age group by b.id, b.salary, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取名为何雪的人的信息",
        "output": "match(a:person where a.name = '何雪') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和论坛中国军事论坛有关系的论坛,返回这些点的价值,名字",
        "output": "match(a:forum where a.name='中国军事论坛')-[e]-(b:forum) return b.value, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与teacher有关系的teacher节点,且teacher节点的name不等于陈红,并返回这些teacher的age乘98的求和值,以及teacher的height乘height的个数",
        "output": "match(a:teacher)-[e]->(b:teacher where b.name <> '陈红') return SUM(b.age * 98), COUNT(b.height * b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为杜若涵的人，并返回他们的ID、工资和姓名。",
        "output": "match(a:person where a.name = '杜若涵') return a.id, a.salary, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找周建国的商品，看看别的买家都看了哪些。",
        "output": "match(a:seller where a.name='周建国')-[e:has]->(b:goods)<-[e2:look]-(c:buyer) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person黄月支付的person,和黄月支付的person",
        "output": "match(a:person)<-[e:pay]-(b:person where name = '黄月')-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有和名为Flink的软件有朋友关系,或有朋友的朋友关系的软件",
        "output": "match(a:software where n.name=Flink)-[e:friend]->{1,2}(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与公司标签相关的106个贷款申请，以及与这些贷款相关的存款账户。",
        "output": "match(a:company)-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return c limit 106",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的薪资除薪资的个数",
        "output": "match(a:person) return COUNT(a.salary / a.salary)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(24,9637.95,483)作为请求表数据,属性分别为id,amount,weight, 以属性amount作为相等条件,查找所有源点label为person,边label为person_invest_company的边,返回这些边的f0加904的数量,和f0除709的平均值",
        "output": "with p as (select * from (VALUES(24,9637.95,483)) as t(id,amount,weight))MATCH (a:person WHERE a.amount = p.amount) -[e:person_invest_company ]->(b) RETURN COUNT(e.f0 + 904), AVG(e.f0 / 709) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(83,'male',1900)作为请求表数据,属性分别为id,gender,salary, 以属性salary作为相等条件,找出所有和名为韩雪的用户有朋友关系,或有朋友的朋友关系的帖子",
        "output": "with p as (select * from (VALUES(83,'male',1900)) as t(id,gender,salary))MATCH (a:user WHERE a.salary = p.salary AND (n.name = 韩雪)) -[e:friend ]->{1,2}(b:post) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出所有关联的人，以及与他们认识的所有其他人。",
        "output": "match(a:person where a.id = '51')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前40个满足条件name不等于重庆或value在41到194之间,且id小于12的city",
        "output": "match(a:city where (a.name <> '重庆' or (a.value BETWEEN 41 AND 194)) and a.id < 12) return a limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问从郑轩开始，沿着家庭类型的边走1到3度，可以到达哪里？",
        "output": "match(a:person where a.name='郑轩')-[e:family]->{1,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为张科和李宏的,类型为doctor的点公共的partner节点的名单",
        "output": "match(a:doctor where a.name='张科')-[e:partner]->(b)<-[e2:partner]-(c:doctor where c.name='李宏') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('美团','small',72)作为请求表数据,属性分别为name,scale,id, 源点的name等于输入表name,返回197个公司谷歌和滴滴,共同的相关者",
        "output": "with p as (select * from (VALUES('美团','small',72)) as t(name,scale,id))MATCH (a:company WHERE a.name = p.name AND (a.name = '谷歌')) -[e:relation ]->(b) <-[e2:relation ]-(c:company WHERE c.name = '滴滴') RETURN b LIMIT 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询user徐国强的全部类型是friend的边,并根据timeStamp从大到小排列,返回34个",
        "output": "match(a:user where a.name = '徐国强')-[e:friend]->(b) return b order by e.timeStamp desc limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与城市类型的点具有归属关系的国家，以及与这些国家具有包含关系的城市，以及与这些城市具有包含关系的大学。",
        "output": "match(a:city)-[e:belong]->(b:country)-[e2:contain]->(c:city)-[e3:contain]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点类型是person,边类型是喜欢,且目标点id不为空的边",
        "output": "match(a:person)-[e:likes where (e.targetId is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回性别不等于famale或身高为161的用户发布的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:user where a.gender <> 'famale' or a.height = 161)-[e:publish]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对63取余乘id的最大值",
        "output": "MAX(a.id % 63 * a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找前124个标签等于认识的边",
        "output": "match(a)-[e:knows]->(b) return e limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出性别为male，名字不为李科且id小于59的person，按照性别进行降序排序。",
        "output": "match(a:person where a.id < 59 and a.gender = 'male' and a.name <> '李科') return a order by a.gender desc limit 156",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,area,peopleNumber, 数据为(26,56905,66730),(31,36470,92504),(6,78449,99134), 源点的area等于输入表area,查找被company Bilibili belong的city",
        "output": "with p as (select * from (VALUES(26,56905,66730),(31,36470,92504),(6,78449,99134)) as t(id,area,peopleNumber))MATCH (a:city WHERE a.area = p.area) <-[e:company_belong_city ]-(b:company WHERE b.name = 'Bilibili') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person购买数量大于138的软件,记为relationCount,再查询这些软件购买的person",
        "output": "match(a:software) let a.relationCount = COUNT((a:software)<-[e:buy]-(b:person) => b.id) match(a where a.relationCount > 138)-[e2:buy]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和company谷歌之间有creates关系的software",
        "output": "match(a:company where a.name='谷歌')-[e:creates]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询李若涵认识的人，返回他们购买的语言和明星软件。",
        "output": "match(a:person where name = '李若涵')-[e:knows]->(b:person)-[e2:buy]->(c:software) return c.lang, c.stars",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部徐建国的点购买的软件,然后帮我查询徐建国被雇佣的公司,一起返回",
        "output": "match(a where a.name = '徐建国')-[e:person_buy_software]->(b:software),(a where a.name = '徐建国')<-[e2:company_employee_person]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person有关联的person节点,并根据其id分组,返回id,以及salary的求和值对9238取余减6994的值",
        "output": "match(a:person)-[e:pay]-(b:person) return b.id, SUM(b.salary) % 9238 - 6994 group by b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有课程的学分除学分的平均值",
        "output": "match(a:course) return AVG(a.credit / a.credit)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出马若涵同事的同事的家人。",
        "output": "match(a:person where a.name='马若涵')-[e:colleague]->(b)-[e2:colleague]->(c)-[e3:family]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person吴月likes的comment,和吴月likes的comment",
        "output": "match(a:comment)<-[e:likes]-(b:person where name = '吴月')-[e2:likes]->(c:comment) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回喜欢Tom的人以及与Tom有支付关系的人。",
        "output": "match(a:person where a.name = 'Tom')-[e:likes]->(b:person),(a:person where a.name = 'Tom')<-[e2:pay]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和person有关联的软件节点,并根据其语言,名字,id分组,返回语言,名字,id,以及价值对418取余的值",
        "output": "match(a:person)-[e:buy]-(b:software) return b.lang, b.name, b.id, b.value % 418 group by b.lang, b.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出公司的三角的环,边类型是雇佣, 并返回这些点的id",
        "output": "match(a:company)-[e:employee]->(b)-[e2:employee]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与买家相关的订单节点，并按其ID和价值进行分组，返回ID和价值。",
        "output": "match(a:buyer)-[e:cancel]-(b:orders) return b.id, b.value group by b.id, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "身高对身高取余的个数",
        "output": "COUNT(a.height % a.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表863,742, 源点的id等于输入表id,给出与user周建国有user_creates_issue关系的3度以内的环",
        "output": "with p as (select * from (VALUES(863),(742)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (name = '周建国')) -[e:user_creates_issue ]->{0,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找和部门有关联的学生节点,并根据其性别,名字分组,返回性别,名字,以及身高加183的值",
        "output": "match(a:department)-[e:department_has_student]-(b:student) return b.gender, b.name, b.height + 183 group by b.gender, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以46, 24, 92作为输入调用personalRank函数,返回id, value",
        "output": "Call PERSONALRANK(46, 24, 92) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回100个薪资不等于6583,id等于25的读者,根据身高升序排列",
        "output": "match(a:reader where a.salary <> 6583 and a.id = 25) return a order by a.height asc limit 100",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前112个类型是ask的边",
        "output": "match(a)-[e:ask]->(b) return e limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person周强knows的person,以及knows这些person的person",
        "output": "match(a:person where name = '周强')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person creates数量大于141的comment,记为relationCount,再查询这些comment creates的film",
        "output": "match(a:comment) let a.relationCount = MIN((a:comment)<-[e:creates]-(b:person) => b.id) match(a where a.relationCount > 141)-[e2:creates]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回同时与170个公司有员工关系（employee)和与这些公司有关联的公司（belong)的person。",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:belong]->(c:company) return c limit 170",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表946,476,423,503,497, 以属性id作为相等条件,请帮我查找label为商品,名为苹果的点,返回这些点的类别",
        "output": "with p as (select * from (VALUES(946),(476),(423),(503),(497)) as t(id)) MATCH (a:goods WHERE a.id = p.id AND (a.name = '苹果')) RETURN a.category ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为孙强和陈红的,label为买家的点公共的朋友节点的名单",
        "output": "match(a:buyer where a.name='孙强')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='陈红') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与company相关的university节点，按value和id分组，并返回它们。",
        "output": "match(a:company)-[e:cooperate]-(b:university) return b.value, b.id group by b.value, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点薪资大于3819,边标签等于朋友,且f0不为空,权重是120.01的边,返回这些边的源点id对169取余的值",
        "output": "match(a where a.salary > 3819)-[e:friend where (e.f0 is not null) and e.weight = 120.01]->(b) return e.srcId % 169",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person马梅有pay关系的1度以内的环",
        "output": "match(a:person where name = '马梅')-[e:pay]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找42个名为何梅的点喜欢的类型是person的节点,且节点性别不等于famale",
        "output": "match(a where a.name='何梅')-[e:likes]->(b:person where b.gender <> 'famale') return b limit 42",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询59个名字为推特,名字不等于百度贴吧且创建时间不是2013年02月12日的论坛,根据创建时间从大到小排列",
        "output": "match(a:forum where a.name = '推特' and a.name <> '百度贴吧' and a.createTime <> '2013-02-12') return a order by a.createTime desc limit 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回14个height的个数乘182的求和值小于等于98的author,根据salary降序排列",
        "output": "match(a:author where SUM(COUNT(a.height) * 182) <= 98) return a order by a.salary desc limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出拥有仓库JavaGuid拥有的用户,的仓库",
        "output": "match(a:repository where name = 'JavaGuid')-[e:has]->(b:user)<-[e2:has]-(c:repository) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与TheShy有转账关系的账号，以及这些账号之间的转账关系，并返回这些关系的ID。",
        "output": "match(a where a.name = 'TheShy')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出从forum知乎出发,经过类型是contain的边,走1到4跳到达的post点",
        "output": "match(a:forum where a.name='知乎')-[e:contain]->{1,4}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和类型是公司的点有合作关系的大学,且和这些大学有合作关系的公司,且和这些公司有属于关系的城市",
        "output": "match(a:company)-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company)-[e3:belong]->(d:city) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与'喜剧'标签有从属关系的电影",
        "output": "match(a:tag where a.name='喜剧')<-[e:has]-(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据字数分组,计算id加54减91的最小值",
        "output": "return MIN(a.id + 54 - 91) group by a.wordCount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点类型是合并请求,边类型是属于,以及f1不等于false或f1不等于false,且f0加f0大于134的边",
        "output": "match(a:pullRequest)-[e:belong where (e.f1 <> false or e.f1 <> false) and e.f0 + e.f0 > 134]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回源点类型是卖家,目标点类型是商品,类型是seller_has_goods的边",
        "output": "match(a:seller)-[e:seller_has_goods]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出146个教师周月和张轩,共同的朋友",
        "output": "match(a:teacher where a.name='周月')-[e:friend]->(b)<-[e2:friend]-(c:teacher where c.name='张轩') return b limit 146",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回name不等于786或name不是大学物理的course belong的department的名称,以及这些department has的teacher的名称",
        "output": "match(a:course where a.name <> 786 or a.name <> '大学物理')-[e:belong]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与读者杜国强有关的三体书籍关联。",
        "output": "match(a:reader where a.name='杜国强')-[e:likes]-(b:book)-[e2:refers]-(c:book where c.name='三体') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和label为课程的点有属于关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",
        "output": "match(a:course)-[e:belong]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回那些apply贷款但peopleNumber不为656的company的贷款名称和对应的账户名称。",
        "output": "match(a:company where a.peopleNumber <> 656)-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value对505取余的值",
        "output": "a.value % 505",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和university南京大学有2到5跳关系的department",
        "output": "match(a:university where a.name='南京大学')-[e]->{2,5}(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找79个名字是知网,价值大于等于830且名字是推特的论坛,根据创建时间从小到大排列",
        "output": "match(a:forum where a.name = '知网' and a.value >= 830 and a.name = '推特') return a order by a.createTime asc limit 79",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和名为好视影院的cinema有partner关系,或有partner的partner关系的film",
        "output": "match(a:cinema where n.name=好视影院)-[e:partner]->{1,2}(b:film) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出从处方Prescription_298出发,经过标签等于包含的边,走3到5跳到达的药品点",
        "output": "match(a:prescription where a.name='Prescription_298')-[e:contain]->{3,5}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为157的person有关的person的相关者, 再给出和person有关系的朋友",
        "output": "match(a:person where id = 157)-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与买家相关的卖家节点，按名称分组并返回。",
        "output": "match(a:buyer)-[e:consult]-(b:seller) return b.name group by b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到浙江大学所属的城市，然后返回该城市包含的公司的价值和名称。",
        "output": "match(a:university where name = '浙江大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c.value, c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以930,405作为请求点id, 源点的id等于输入表id,找出与部门有关系的课程节点,且课程节点的价值乘价值的和大于2,并返回这些点的价值减628的求和值,以及课时加45的值",
        "output": "with p as (select * from (VALUES(930),(405)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e ]->(b:course WHERE SUM(b.value * b.value) > 2) RETURN SUM(b.value - 628), b.courseHour + 45 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询knows person周国强的person,和这些person knows的person",
        "output": "match(a:person where name = '周国强')<-[e:knows]-(b:person)-[e2:knows]->(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为45的作家撰写的书, 并将书有关的作家的年龄的平均值赋值给书的价格, 接着查询书的价格小于45的书认识的书",
        "output": "match(a:author where a.id = 45)-[e:write]->(b:book) let b.price = AVG((b:book)-[e2]-(c:author) => c.age) match(b:book where b.price < 45)-[e3:knows]->(d:book) return b.price, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为武汉大学的大学,以及与其有关的国家,并返回武汉大学的等级和这些国家的名字",
        "output": "match(a:university where name = '武汉大学')-[e]-(b:country) return a.level, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以177,461,291,818,40作为请求点id, 源点的id等于输入表id,请帮我查找名为书的商品,以及与其有关的商品,并返回书的名字和这些商品的id",
        "output": "with p as (select * from (VALUES(177),(461),(291),(818),(40)) as t(id)) MATCH (a:goods WHERE a.id = p.id AND (name = '书')) -[e ]-(b:goods) RETURN a.name, b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与名为张雪和黄月的点共同申请的,类型为贷款的节点",
        "output": "match(a where a.name = '张雪')-[e:apply]->(b:loan)<-[e2:apply]-(c where c.name = '黄月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被医生属于数量大于163的部门,记为relationCount,再查询这些部门属于的部门",
        "output": "match(a:department) let a.relationCount = COUNT((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 163)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回用户何思琪的所有相关者,的源点id加源点id的求和值",
        "output": "match(a:user where a.name= '何思琪')-[e:relation]->(b) return SUM(e.srcId + e.srcId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,salary,age, 数据为(9,5773,78),(22,8564,35),(85,1787,7),(83,5080,68)的子查询作为输入表, 源点的id等于输入表id,请帮我找出与课程操作系统有关系的部门, 返回和这些部门有关联的大学的,价值减价值对10取余的和",
        "output": "with p as (select * from (VALUES(9,5773,78),(22,8564,35),(85,1787,7),(83,5080,68)) as t(id,salary,age))MATCH (a:course WHERE a.id = p.id AND (a.name = '操作系统')) -[e ]-(b:department) -[e2 ]-(c:university) RETURN SUM(c.value - c.value % 10) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Order_346的订单,以及与其有关的商品,并返回Order_346的id和这些商品的价格",
        "output": "match(a:orders where name = 'Order_346')-[e]-(b:goods) return a.id, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id除id的最大值",
        "output": "MAX(a.id / a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表210,906, 以属性id作为相等条件,请帮我找出和person李建国有关的person,再请帮我找出和李建国person_family_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(210),(906)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '李建国')) -[e ]-(b:person) , (a:person) -[e2:person_family_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查找以transfer关系关联了account Light的account",
        "output": "match(a:account where a.name='Light')<-[e:account_transfer_account]-(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为黄若涵的点关联的所有person,并对这些person的id进行求和",
        "output": "match(a where a.name='黄若涵')-[e:relates]->(b:person) return SUM(b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出id为91的点的名字",
        "output": "match(a where a.id = 91) return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找38个名为重庆的点包含的类型是大学的节点,且节点id不是4",
        "output": "match(a where a.name='重庆')-[e:contain]->(b:university where b.id <> 4) return b limit 38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出182个和标签为person的点有knows关系的person,并且和这些person有knows关系的person",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person) return c limit 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和person Bob有3到6度关系的person",
        "output": "match(a:person where a.name='Bob')-[e]->{3,6}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被course操作系统belong的department",
        "output": "match(a:department)<-[e:belong]-(b:course where b.name='操作系统') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "能否帮我查一下LX001的账户？",
        "output": "match(a:account where a.name = 'LX001') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与department节点关联的学生节点，按性别、年龄和ID分组并返回。",
        "output": "match(a:department)-[e:has]-(b:student) return b.gender, b.age, b.id group by b.gender, b.age, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person吴雪有关的公司,再查找和吴雪购买的其他软件,返回它们",
        "output": "match(a:person where a.name = '吴雪')-[e]-(b:company), (a:person)-[e2:buy]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前129个类型为属于的边",
        "output": "match(a)-[e:belong]->(b) return e limit 129",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和university武汉大学有关的country,称为X,再请帮我查找和这个X有关联的其他country,以及和X有关联的company",
        "output": "match(a:university where a.name = '武汉大学')-[e]-(b:country), (b:country)-[e2]-(c:country),(b:country)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与赵思思认识的人有关联的人节点。",
        "output": "match(a:person where a.name = '赵思思')-[e:knows]->(b:person)-[e2:relates]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出马宏认识的人中，被其他人喜欢的人数。",
        "output": "match(a:person where a.name='马宏')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找病人杜雪的类型为伙伴的边,并根据权重升序排列,返回112个",
        "output": "match(a:patient where a.name = '杜雪')-[e:partner]->(b) return b order by e.weight asc limit 112",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有label为cinema的点",
        "output": "match(a:cinema) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和论坛天涯论坛之间有包含关系的用户",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询user郑科 likes的repository,返回repository has的pullRequest的changeFileNumber除changeFileNumber的值",
        "output": "match(a:user where name = '郑科')-[e:likes]->(b:repository)-[e2:has]->(c:pullRequest) return c.changeFileNumber / c.changeFileNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有和公司点有雇佣关系的person节点,且边满足条件权重不是104.66,目标person节点满足条件名字不等于张红",
        "output": "match(a:company)-[e:employee where e.weight <> 104.66]->(b:person where b.name <> '张红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表318,789,833,427,904, 以属性id作为相等条件,给出类型是person的点,返回78个",
        "output": "with p as (select * from (VALUES(318),(789),(833),(427),(904)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a LIMIT 78",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出知乎论坛中的帖子，返回这些帖子所包含的标签的值和ID。",
        "output": "match(a:forum where name = '知乎')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c.value, c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出cancel buyer李轩cancel的orders,的buyer",
        "output": "match(a:buyer where name = '李轩')-[e:cancel]->(b:orders)<-[e2:cancel]-(c:buyer) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找所有城市以人数分组的人数, 根据人数升序排序",
        "output": "match(a:city) return a.peopleNumber group by a.peopleNumber order by a.peopleNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部person的相关者,或其相关者的相关者",
        "output": "match(a:person)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点类型是合并请求,边类型是属于的边,返回这些边的权重对109.62取余的最大值,和f0乘781的最小值",
        "output": "match(a:pullRequest)-[e:belong]->(b) return MAX(e.weight % 109.62), MIN(e.f0 * 781)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出《功夫》里主角的朋友的朋友的伙伴",
        "output": "match(a:film where a.name='功夫')-[e:friend]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person马若涵支付的person节点认识的person",
        "output": "match(a:person where a.name = '马若涵')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与处方Prescription_457有关联，并且与用户杜思琪有关联的处方节点。并返回这些节点的创建时间和权重。",
        "output": "match(a:prescription where a.name='Prescription_457')-[e]->(b:prescription)<-[e2]-(c:user where c.name='杜思琪') return b.createTime, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为徐梅的节点creates的buyer或seller",
        "output": "match(a where a.name='徐梅')-[e:creates]->(b:buyer | seller) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与仓库Mybatis存在拥有关系,且与仓库FSM存在喜欢关系的用户节点，返回这些用户的性别,身高,及仓库Mybatis的权重,及仓库FSM的名字",
        "output": "match(a:repository where a.name='Mybatis')-[e:has]->(b:user)<-[e2:likes]-(c:repository where c.name='FSM') return a.weight,b.gender, b.height,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减19的最大值",
        "output": "MAX(a.id - 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询滴滴和Bilibili这两个公司名在公共朋友节点中的名称。",
        "output": "match(a:company where a.name='滴滴')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='Bilibili') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和country法国有关系的country,返回这些点的peopleNumber,scale",
        "output": "match(a:country where a.name='法国')-[e]-(b:country) return b.peopleNumber, b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以425,550,699作为请求点id, 源点的id等于输入表id,给出label为person的点,返回58个",
        "output": "with p as (select * from (VALUES(425),(550),(699)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a LIMIT 58",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person韩国强拥有的账号节点还款的贷款",
        "output": "match(a:person where a.name = '韩国强')-[e:own]->(b:account)-[e2:repay]->(c:loan) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间分组,计算字数加49的最大值",
        "output": "return MAX(a.wordCount + 49) group by a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询名叫郑国强的买家。",
        "output": "match(a:buyer where a.name = '郑国强') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回seller何伟的所有relation,的srcId对90取余的值",
        "output": "match(a:seller where a.name= '何伟')-[e:relation]->(b) return e.srcId % 90",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找何强曾经就职的公司，以及他拥有股权的公司。",
        "output": "match(a where a.name = '何强')-[e:belong]->(b:company),(a where a.name = '何强')<-[e2:employee]-(c:company) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为字节的country,以及与其有关的company,并返回字节的id和这些company的name",
        "output": "match(a:country where name = '字节')-[e]-(b:company) return a.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与forum知网和知乎都存在contain关系的点",
        "output": "match(a:forum where a.name='知网')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='知乎') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有带有'买家'标签且'商品'标签的目标节点，以及带有'查看'标签的边。",
        "output": "match(a:buyer)-[e:look]->(b:goods) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回与user黄科和陈思思都存在user_likes_repository关系的点",
        "output": "match(a:user where a.name='黄科')-[e:user_likes_repository]->(b)<-[e2:user_likes_repository]-(c:user where c.name='陈思思') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为大学英语的teacher或university或department,以及与其有关的student,并返回大学英语的courseHour和这些student的gender",
        "output": "match(a:teacher | university | department where name = '大学英语')-[e]-(b:student) return a.courseHour, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(18,'西区',827),(50,'A座',472),(36,'B座',466),(72,'南区',569)作为请求表数据,属性分别为id,address,weight, 以属性id作为相等条件,查询类型为部门,名为呼吸科的点,返回这些点的名字,id",
        "output": "with p as (select * from (VALUES(18,'西区',827),(50,'A座',472),(36,'B座',466),(72,'南区',569)) as t(id,address,weight))MATCH (a:department WHERE a.id = p.id AND (a.name = '呼吸科')) RETURN a.name, a.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('famale',154,3175),('male',195,9179),('famale',193,8873),('famale',176,6294)作为请求表数据,属性分别为gender,height,salary, 以属性height作为相等条件,给出全部prescription以createTime分组的name, 根据name从大到小排序",
        "output": "with p as (select * from (VALUES('famale',154,3175),('male',195,9179),('famale',193,8873),('famale',176,6294)) as t(gender,height,salary))MATCH (a:prescription WHERE a.height = p.height) RETURN a.name GROUP BY a.createTime ORDER BY a.name DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找user likes的post,返回其源点的salary的求和值减salary对4479取余的最大值,以及目标点的value减296的值",
        "output": "match(a:user)-[e:likes]->(b:post) return MAX(SUM(a.salary) - a.salary % 4479), b.value - 296",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出comment Comment_347 belong的film,被其他cinema releases的数量",
        "output": "match(a:comment where a.name='Comment_347')-[e:belong]->(b:film)<-[e2:releases]-(c:cinema) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据权重,id分组,计算id对34取余的求和值",
        "output": "return SUM(a.id % 34) group by a.weight, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出user黄若涵publish的post,以及contain这些post的forum",
        "output": "match(a:user where name = '黄若涵')-[e:publish]->(b:post)<-[e2:contain]-(c:forum) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的id乘5减689的最小值",
        "output": "match(a:company) return MIN(a.id * 5 - 689)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部和department点有has关系的teacher节点,且边满足条件f0是669,目标teacher节点height大于180",
        "output": "match(a:department)-[e:has where e.f0 = 669]->(b:teacher where b.height > 180) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照身高和性别分组查询薪资，并以薪资从大到小排序。",
        "output": "match(a:person) return a.salary group by a.height, a.gender order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与作家赵雪有关,且与书罪与罚有关系的作家节点",
        "output": "match(a:author where a.name='赵雪')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='罪与罚') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和贷款loan_53有关的person,称为X,再请帮我找出和这个X有关联的其他贷款,以及和X有关联的贷款",
        "output": "match(a:loan where a.name = 'loan_53')-[e]-(b:person), (b:person)-[e2]-(c:loan),(b:person)-[e3]-(d:loan) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点类型为person,边类型为creates的边,返回这些边的targetId的平均值除102的值,和f0对f0取余的和",
        "output": "match(a:person)-[e:creates]->(b) return AVG(e.targetId) / 102, SUM(e.f0 % e.f0)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与用户'王思琪'有关联，或者具有关联关系的帖子。",
        "output": "match(a:user where n.name=王思琪)-[e:relation]->{1,2}(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person郑国强likes的comment,以及likes这些comment的person, 令comment的height等于person的age乘49,令comment的wordCount等于comment的id的平均值对33取余加36, 返回person(a)的age,comment(b)的wordCount,person(c)的height",
        "output": "match(a:person where name = '郑国强')-[e:likes]->(b:comment)<-[e2:likes]-(c:person) let b.height = a.age * 49,let b.wordCount = AVG(b.id) % 33 + 36 return a.age,b.wordCount,c.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为30的点的年龄,名字,身高",
        "output": "match(a where a.id = 30) return a.age, a.name, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与author孙宏存在knows关系,且与author吴国强存在knows关系的author节点，返回这些author的name,gender,id,及author孙宏的salary,及author吴国强的id",
        "output": "match(a:author where a.name='孙宏')-[e:knows]->(b:author)<-[e2:knows]-(c:author where c.name='吴国强') return a.salary,b.name, b.gender, b.id,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与公司有关系的person节点,且person节点的薪资不为空,并返回这些person的id加id的值,以及person的年龄减13的值",
        "output": "match(a:company)-[e]->(b:person where (b.salary is not null)) return b.id + b.id, b.age - 13",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表154,986,446,367, 源点的id等于输入表id,查找所有名为腾讯的点雇佣的person",
        "output": "with p as (select * from (VALUES(154),(986),(446),(367)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '腾讯')) -[e:company_employee_person ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "weight的求和值除83的值",
        "output": "SUM(a.weight) / 83",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用pageRank函数,以19作为输入,返回运算结果",
        "output": "Call PAGERANK(19) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以喜欢关系关联了帖子Post_181的用户",
        "output": "match(a:post where a.name='Post_181')<-[e:likes]-(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与'标签动作'有关联，并与'王宏'有关联的'person'节点，然后返回他们的性别、年龄和姓名。",
        "output": "match(a:tag where a.name='动作')-[e]->(b:person)<-[e2]-(c:person where c.name='王宏') return b.gender, b.age, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出喜欢person张月创造的评论,的person",
        "output": "match(a:person where name = '张月')-[e:creates]->(b:comment)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于accept,并且满足条件targetId在89到128之间的边",
        "output": "match(a)-[e:accept where (e.targetId BETWEEN 89 AND 128)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被医生属于数量大于115的部门,记为relationCount,再查询这些部门属于的部门",
        "output": "match(a:department) let a.relationCount = AVG((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 115)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 按照年龄、薪资和ID对读者进行分组，然后按名称升序排序。",
        "output": "match(a:reader) return a.name group by a.age, a.salary, a.id order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和作家赵宏之间有撰写关系的书",
        "output": "match(a:author where a.name='赵宏')-[e:write]->(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与标签喜剧有关系的评论, 返回和这些评论有关联的标签的,价值加956的最小值",
        "output": "match(a:tag where a.name= '喜剧')-[e]-(b:comment)-[e2]-(c:tag) return MIN(c.value + 956)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出标签等于belong,且f1不等于false或f1为true或weight为空的边",
        "output": "match(a)-[e:belong where e.f1 <> false or e.f1 = true or (e.weight is null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为杜国强的,类别等于传记,类别不等于科普的伙伴,返回这些伙伴的创建时间,和边的源点id,目标点id",
        "output": "match(a where a.name='杜国强')-[e:partner]->(b where b.category = '传记' and b.category <> '科普') return b.createTime,e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询人数大于684且创建时间不是2014年10月11日的论坛包含的帖子的名称,以及这些帖子 拥有的标签的名称",
        "output": "match(a:forum where a.peopleNumber > 684 and a.createTime <> '2014-10-11')-[e:contain]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有id为37的user关联的user,和以has关系关联了这些user的其他repository",
        "output": "match(a:user where a.id = 37)-[e]-(b:user)<-[e2:has]-(c:repository) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,gender,height, 数据为(29,'famale',182),(72,'male',159), 源点的height等于输入表height,查找类型是student的点,返回149个",
        "output": "with p as (select * from (VALUES(29,'famale',182),(72,'male',159)) as t(age,gender,height))MATCH (a:student WHERE a.height = p.height) RETURN a LIMIT 149",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与编辑Sam和黄思思相关的91位共同联系人。",
        "output": "match(a:publisher where a.name='Sam')-[e:relation]->(b)<-[e2:relation]-(c:publisher where c.name='黄思思') return b limit 91",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与贷款defaultName相关的，且与账号TheShy有关联的账号节点。",
        "output": "match(a:loan where a.name='defaultName')-[e:deposit]-(b:account)-[e2:transfer]-(c:account where c.name='TheShy') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person杜建国之间有喜欢关系的person",
        "output": "match(a:person where a.name='杜建国')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height的和除178的值",
        "output": "SUM(a.height) / 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表324,653,599,309, 源点的id等于输入表id,查询部门法学院的所有标签为相关者的边,并根据权重升序排列,返回187个",
        "output": "with p as (select * from (VALUES(324),(653),(599),(309)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '法学院')) -[e:relation ]->(b) RETURN b ORDER BY e.weight LIMIT 187",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出film has的tag,返回其源点的id减78的数量,以及目标点的id除66的个数",
        "output": "match(a:film)-[e:has]->(b:tag) return COUNT(a.id - 78), COUNT(b.id / 66)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和医生杜国强有创造关系的处方,再查询以属于关系关联了杜国强的部门",
        "output": "match(a:doctor where a.name = '杜国强')-[e:creates]->(b:prescription),(a:doctor where a.name = '杜国强')<-[e2:belong]-(c:department)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出与Calcite相关的软件，并找出Calcite使用的其他软件，返回它们。",
        "output": "match(a:software where a.name = 'Calcite')-[e]-(b:software), (a:software)-[e2:uses]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询大学拥有的部门, 令部门的id的值等于属于部门的课程的id的平均值, 再查找部门拥有的教师",
        "output": "match(a:university)-[e:has]->(b:department) let b.id = AVG((b:department)<-[e2:belong]-(c:course) => c.id) match(b:department)-[e3:has]->(d:teacher) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找102个和标签为读者的点有喜欢关系的书,且和这些书有引用关系的书",
        "output": "match(a:reader)-[e:likes]->(b:book)-[e2:refers]->(c:book) return c limit 102",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以879,500,243作为请求点id, 源点的id等于输入表id,请帮我查找以取消关系关联了订单Order_177的买家",
        "output": "with p as (select * from (VALUES(879),(500),(243)) as t(id)) MATCH (a:orders WHERE a.id = p.id AND (a.name = 'Order_177')) <-[e:buyer_cancel_orders ]-(b:buyer) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被person李建聪提交的软件",
        "output": "match(a:software)<-[e:commits]-(b:person where b.name='李建聪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为XiaoHu的节点还款的person",
        "output": "match(a where a.name='XiaoHu')-[e:repay]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出源点满足条件value不为空且peopleNumber不为空,或peopleNumber小于523,目标点满足条件age不是63或id在66到99之间,且salary对salary取余大于等于38,且标签为company_employee_person的边",
        "output": "match(a where ((a.value is not null) and (a.peopleNumber is not null)) or a.peopleNumber < 523)-[e:company_employee_person]->(b where (b.age <> 63 or (b.id BETWEEN 66 AND 99)) and b.salary % b.salary >= 38) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算height的平均值除height的最大值",
        "output": "return MAX(AVG(a.height) / a.height) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person黄宏有关系的comment或tag或film,返回这些点的id,name",
        "output": "match(a:person where a.name='黄宏')-[e]-(b:comment | tag | film) return b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表128,737, 以属性id作为相等条件,查询33个id不是98或名字等于喜剧,且价值不为空的标签,根据id从小到大排列",
        "output": "with p as (select * from (VALUES(128),(737)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND ((a.id <> 98 OR a.name = '喜剧') AND a.value IS NOT NULL)) RETURN a ORDER BY a.id LIMIT 33",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部与person黄梅有关系的person的height",
        "output": "match(a:person where a.name='黄梅')-[e]-(b:person) return b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回74个和类型为seller的点有ask关系的buyer,以及和这些buyer有look关系的goods",
        "output": "match(a:seller)-[e:ask]->(b:buyer)-[e2:look]->(c:goods) return c limit 74",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生诊断的病人,返回其源点的age的求和值对年龄取余的值,以及目标点的薪资加1934的值",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return SUM(a.age) % a.age, b.salary + 1934",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person有关系的person节点,且person节点的gender不是male,并返回这些person的salary除7979的值,以及person的age减67加89的数量",
        "output": "match(a:person)-[e]->(b:person where b.gender <> 'male') return b.salary / 7979, COUNT(b.age - 67 + 89)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与好视影院有上映关系的电影，并返回电影标签中拥有的名字。",
        "output": "match(a where a.name = '好视影院')-[e:releases]->(b:film)-[e2:has]->(c:tag) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和名为杜思思的用户有朋友关系,或有朋友的朋友关系的事项",
        "output": "match(a:user where n.name=杜思思)-[e:friend]->{1,2}(b:issue) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出孙建聪喜欢和Post_386相关的标签和标签。",
        "output": "match(a:user where a.name = '孙建聪')-[e:likes]->(b:post),(c:post where c.name = 'Post_386')-[e2:has]->(d:tag) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(560,'Bilibili',73),(990,'华为',28),(854,'美团',81)作为请求表数据,属性分别为value,name,id, 源点的name等于输入表name,查找以拥有关系关联了账号XiaoHu的person",
        "output": "with p as (select * from (VALUES(560,'Bilibili',73),(990,'华为',28),(854,'美团',81)) as t(value,name,id))MATCH (a:account WHERE a.name = p.name AND (a.name = 'XiaoHu')) <-[e:person_own_account ]-(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以105,699作为请求点id, 源点的id等于输入表id,返回全部与国家有关系的公司节点,且公司节点的价值小于20,并返回这些点的人数除590的值,以及人数对750取余的数量",
        "output": "with p as (select * from (VALUES(105),(699)) as t(id)) MATCH (a:country WHERE a.id = p.id) -[e ]->(b:company WHERE b.value < 20) RETURN b.peopleNumber / 590, COUNT(b.peopleNumber % 750) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和person有关联的person节点,并根据其名字,年龄分组,返回名字,年龄,以及id除97的最大值",
        "output": "match(a:person)-[e:person_friend_person]-(b:person) return b.name, b.age, MAX(b.id / 97) group by b.name, b.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询部门法学院中拥有教师节点且教授课程操作系统的教师，返回这些教师的年龄、部门法学院名称和课程操作系统名称。",
        "output": "match(a:department where a.name='法学院')-[e:has]->(b:teacher)<-[e2:teach]-(c:course where c.name='操作系统') return a.size,b.age,c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出university的3跳的环",
        "output": "match(a:university)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出作家的三角的环,边标签等于撰写, 并返回这些点的id",
        "output": "match(a:author)-[e:write]->(b)-[e2:write]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被教师教数量大于150的课程,记为relationCount,再查询这些课程教的课程",
        "output": "match(a:course) let a.relationCount = MAX((a:course)<-[e:teach]-(b:teacher) => b.id) match(a where a.relationCount > 150)-[e2:teach]->(c:course) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找到何思思和陈月的共同父母。",
        "output": "match(a:person where a.name='何思思')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='陈月') return b limit 113",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询所有起点是城市，终点是国家，类型为边的关系。",
        "output": "match(a:city)-[e:belong]->(b:country) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询大学拥有的部门,返回其源点的id减10的和,以及目标点的大小减63的值",
        "output": "match(a:university)-[e:has]->(b:department) return SUM(a.id - 10), b.size - 63",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(161,4720,'Alan'),(180,3010,'黄若涵'),(177,1700,'赵宏')作为请求表数据,属性分别为height,salary,name, 以属性salary作为相等条件,查找源点标签等于patient,边标签等于patient_accept_prescription的边,返回这些边的f0减848的值,和srcId乘145的和",
        "output": "with p as (select * from (VALUES(161,4720,'Alan'),(180,3010,'黄若涵'),(177,1700,'赵宏')) as t(height,salary,name))MATCH (a:patient WHERE a.salary = p.salary) -[e:patient_accept_prescription ]->(b) RETURN e.f0 - 848, SUM(e.srcId * 145) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的平均值乘id加height的值",
        "output": "AVG(a.id) * a.id + a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出Post_244和Post_317共同的relation节点，这些节点的类型都是post。",
        "output": "match(a:post where a.name='Post_244')-[e:relation]->(b)<-[e2:relation]-(c:post where c.name='Post_317') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我找一下从person杜科出发，通过朋友标签的边，走两到五度可以到达的人",
        "output": "match(a:person where a.name='杜科')-[e:friend]->{2,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请按性别升序排列，帮我找出所有按照身高、姓名和薪资进行分组的编辑。",
        "output": "match(a:publisher) return a.gender group by a.height, a.name, a.salary order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person吴国强 认识的person,返回person 喜欢的person的薪资对8952取余的值",
        "output": "match(a:person where name = '吴国强')-[e:knows]->(b:person)-[e2:likes]->(c:person) return c.salary % 8952",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回与 forum_id 为 75 的用户有好友关系的 partner,再返回与该用户有关系的 partner。",
        "output": "match(a:forum where id = '75')-[e]-(b:user)-[e2:friend]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为person的点,返回147个",
        "output": "match(a:person) return a limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有医生源点之间、标签为'创造'的边，并返回这些边中源点ID除以178的最小值，以及边权重减去102.38的值。",
        "output": "match(a:doctor)-[e:creates]->(b) return MIN(e.srcId / 178), e.weight - 102.38",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与医生王雪有关,且与处方Prescription_270有关系的病人节点",
        "output": "match(a:doctor where a.name='王雪')-[e:diagnose]-(b:patient)-[e2:accept]-(c:prescription where c.name='Prescription_270') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询person周国强pay的person, 令person(b)的gender等于person(a)的id减90,令person(a)的salary等于person(b)的name的平均值, 返回person(a)的age, person(b)的id",
        "output": "match(a:person where a.name='周国强')-[e:pay]->(b:person) let b.gender = a.id - 90,let a.salary = AVG(b.name) return a.age,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出以认识关系关联了person孙国强的person",
        "output": "match(a:person where a.name='孙国强')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person何建国有关,且与公司微软有关系的person节点",
        "output": "match(a:person where a.name='何建国')-[e:knows]-(b:person)-[e2:belong]-(c:company where c.name='微软') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与城市伦敦有属于关系的3度以内的环",
        "output": "match(a:city where name = '伦敦')-[e:belong]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id的最大值除id的值",
        "output": "MAX(a.id) / a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询王伟和吴红查看关系的点。",
        "output": "match(a:buyer where a.name='王伟')-[e:look]->(b)<-[e2:look]-(c:buyer where c.name='吴红') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person有关联的person节点,并根据其性别,名字分组,返回性别,名字,以及id对8取余的值",
        "output": "match(a:person)-[e:parent]-(b:person) return b.gender, b.name, b.id % 8 group by b.gender, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与person有关联的年龄小于52岁的person节点，计算他们的age加上94后的总和，并找出他们height字段对187取余的结果中的最小值。",
        "output": "match(a:person)-[e]->(b:person where b.age < 52) return SUM(b.age + 94), MIN(COUNT(b.height) % 187)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与王思琪和赵月都有关系的30个人。",
        "output": "match(a where a.name='王思琪')-[e]->(b:person)<-[e2]-(c where c.name='赵月') return b limit 30",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出源点label为person,边label为喜欢的边,返回这些边的源点id加42对545取余对108.90取余的值,和目标点id乘104的值",
        "output": "match(a:person)-[e:likes]->(b) return e.srcId + 42 % 545 % 108.90, e.targetId * 104",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出评论Comment_177的类型是相关者的边,并根据源点id降序排列,返回55个",
        "output": "match(a:comment where a.name = 'Comment_177')-[e:relation]->(b) return b order by e.srcId desc limit 55",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与国家俄罗斯有包含关系的3跳的环",
        "output": "match(a:country where name = '俄罗斯')-[e:contain]->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表410,431,499,739, 以属性id作为相等条件,计算所有prescription的id除id除502的值",
        "output": "with p as (select * from (VALUES(410),(431),(499),(739)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) RETURN a.id / a.id / 502 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与person王宏有关系的person的名字",
        "output": "match(a:person where a.name='王宏')-[e]-(b:person) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出stars为空或stars大于等于710,且stars在78到139之间的节点",
        "output": "match(a where ((a.stars is null) or a.stars >= 710) and (a.stars BETWEEN 78 AND 139)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和用户Tom有关的标签,再查找和Tom发布的其他帖子,返回它们",
        "output": "match(a:user where a.name = 'Tom')-[e]-(b:tag), (a:user)-[e2:publish]->(c:post) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找与university有关系的university节点,且university节点的name等于武汉大学,并返回这些点的level加level的求和值,以及id乘81的值",
        "output": "match(a:university)-[e]->(b:university where b.name = '武汉大学') return SUM(b.level + b.level), b.id * 81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被author马轩knows的author",
        "output": "match(a:author)<-[e:knows]-(b:author where b.name='马轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以222,377,241,868,82作为请求点id, 以属性id作为相等条件,查找读者李梅喜欢的书,被其他编辑发布的数量",
        "output": "with p as (select * from (VALUES(222),(377),(241),(868),(82)) as t(id)) MATCH (a:reader WHERE a.id = p.id AND (a.name = '李梅')) -[e:reader_likes_book ]->(b:book) <-[e2:publisher_publish_book ]-(c:publisher) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person张思思之间有likes关系的person",
        "output": "match(a:person where a.name='张思思')-[e:likes]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和person韩雪有认识关系的person,再给出以认识关系关联了韩雪的person",
        "output": "match(a:person where a.name = '韩雪')-[e:knows]->(b:person),(a:person where a.name = '韩雪')<-[e2:knows]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(false,2000-03-29,2014-11-27),(true,2020-06-12,2020-03-16),(false,2021-02-06,2014-10-10),(true,2024-01-19,2005-03-20)作为请求表数据,属性分别为isBlock,createTime,lastLoginTime, 源点的isBlock等于输入表isBlock,查询与account TheShy有account_repay_loan关系的1度以内的环",
        "output": "with p as (select * from (VALUES(false,2000-03-29,2014-11-27),(true,2020-06-12,2020-03-16),(false,2021-02-06,2014-10-10),(true,2024-01-19,2005-03-20)) as t(isBlock,createTime,lastLoginTime))MATCH (a:account WHERE a.isBlock = p.isBlock AND (name = 'TheShy')) -[e:account_repay_loan ]->{0,0}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person韩建国创造的评论,和韩建国观看的电影",
        "output": "match(a:comment)<-[e:creates]-(b:person where name = '韩建国')-[e2:watch]->(c:film) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据薪资,id,身高分组,计算salary的和除9456的值",
        "output": "return SUM(a.salary) / 9456 group by a.salary, a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和person张红有3到6跳关系的person",
        "output": "match(a:person where a.name='张红')-[e]->{3,6}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有名为清华大学的点的,名字等于微软的伙伴,返回这些伙伴的id,和边的f1,目标点id,f0",
        "output": "match(a where a.name='清华大学')-[e:partner]->(b where b.name = '微软') return b.id,e.f1, e.targetId, e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询label为person的点,返回165个",
        "output": "match(a:person) return a limit 165",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询公司谷歌的label为伙伴的边,并根据f0从大到小排列,返回167个",
        "output": "match(a:company where a.name = '谷歌')-[e:partner]->(b) return b order by e.f0 desc limit 167",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找reader王科likes的book节点relates的book",
        "output": "match(a:reader where a.name = '王科')-[e:likes]->(b:book)-[e2:relates]->(c:book) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询所有源点标签为book,边标签为refers的边，并返回这些边的f0除以f0的平均值以及目标节点id乘以目标节点id的最大值。",
        "output": "match(a:book)-[e:refers]->(b) return AVG(e.f0 / e.f0), MAX(e.targetId * e.targetId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有软件的id对9取余的求和值",
        "output": "match(a:software) return SUM(a.id % 9)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出invest person周国强invest的company,的person",
        "output": "match(a:person where name = '周国强')-[e:invest]->(b:company)<-[e2:invest]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 'University of Tsinghua, in Beijing, contains a company.'",
        "output": "match(a:university where a.name = '清华大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于处方的点",
        "output": "match(a:prescription) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id乘id的值",
        "output": "a.id * a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有卖家的薪资减薪资的值",
        "output": "match(a:seller) return a.salary - a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以30,25,239作为请求点id, 以属性id作为相等条件,查询label为贷款的全部点,并根据权重降序排列",
        "output": "with p as (select * from (VALUES(30),(25),(239)) as t(id)) MATCH (a:loan WHERE a.id = p.id) RETURN a ORDER BY a.weight DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与公司ID为89的合作伙伴，以及与软件相关的合作伙伴。",
        "output": "match(a:company where id = '89')-[e]-(b:software)-[e2:partner]->(c), (b:software)-[e3:partner]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为郑雪的买家点，并返回他们的年龄和性别。",
        "output": "match(a:buyer where a.name = '郑雪') return a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算id对54取余的最大值",
        "output": "return MAX(a.id % 54) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为李梅的点的,字数小于64的伙伴,返回这些伙伴的创建时间,和边的f0",
        "output": "match(a where a.name='李梅')-[e:partner]->(b where b.wordCount < 64) return b.createTime,e.f0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出129个名为天涯论坛的点contain的类型是post的节点,且节点wordCount不为空",
        "output": "match(a where a.name='天涯论坛')-[e:contain]->(b:post where (b.wordCount is not null)) return b limit 129",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是属于,并且权重为空或源点id在56到184之间的边",
        "output": "match(a)-[e:belong where (e.weight is null) or (e.srcId BETWEEN 56 AND 184)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被医生黄建国属于的部门,和黄建国属于的部门",
        "output": "match(a:department)<-[e:belong]-(b:doctor where name = '黄建国')-[e2:belong]->(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被公司属于数量大于120的城市,记为relationCount,再查询这些城市属于的国家",
        "output": "match(a:city) let a.relationCount = COUNT((a:city)<-[e:belong]-(b:company) => b.id) match(a where a.relationCount > 120)-[e2:belong]->(c:country) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以32作为输入调用pageRank函数,返回id, value",
        "output": "Call PAGERANK(32) yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为少年闰土的节点knows的publisher",
        "output": "match(a where a.name='少年闰土')-[e:knows]->(b:publisher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表668,125, 以属性id作为相等条件,返回帖子Post_101的所有标签为伙伴的边,并根据f1从小到大排列,返回9个",
        "output": "with p as (select * from (VALUES(668),(125)) as t(id)) MATCH (a:post WHERE a.id = p.id AND (a.name = 'Post_101')) -[e:partner ]->(b) RETURN b ORDER BY e.f1 LIMIT 9",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表89,742,201,172,209, 源点的id等于输入表id,给出和cinema UME有cinema_releases_film关系的film,以及和person马思思有person_creates_comment关系的comment,将它们都返回",
        "output": "with p as (select * from (VALUES(89),(742),(201),(172),(209)) as t(id)) MATCH (a:cinema WHERE a.id = p.id AND (a.name = 'UME')) -[e:cinema_releases_film ]->(b:film) , (c:person WHERE c.name = '马思思') -[e2:person_creates_comment ]->(d:comment) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,createTime,id, 数据为(12,1995-08-09,12), 源点的id等于输入表id,返回所有和名为马雪的author有friend关系,或有friend的friend关系的author",
        "output": "with p as (select * from (VALUES(12,1995-08-09,12)) as t(id,createTime,id))MATCH (a:author WHERE a.id = p.id AND (n.name = 马雪)) -[e:friend ]->{1,2}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表231, 源点的id等于输入表id,请帮我找出29个年龄不为空,身高大于等于184的person,根据性别降序排列",
        "output": "with p as (select * from (VALUES(231)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.age IS NOT NULL AND a.height >= 184)) RETURN a ORDER BY a.gender DESC LIMIT 29",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找以喜欢关系关联了书孤城的读者",
        "output": "match(a:book where a.name='孤城')<-[e:likes]-(b:reader) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和软件SprintBoot有关的person,再请帮我找出和SprintBoot使用的其他软件,返回它们",
        "output": "match(a:software where a.name = 'SprintBoot')-[e]-(b:person), (a:software)-[e2:uses]->(c:software) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回马红发布的帖子的标签。",
        "output": "match(a:user where a.name = '马红')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回马梅创建的所有处方，以及她所在的部门。",
        "output": "match(a where a.name = '马梅')-[e:creates]->(b:prescription),(a where a.name = '马梅')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出赵月喜欢的人，这些人被其他人认识的数量。",
        "output": "match(a:person where a.name='赵月')-[e:likes]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person何科的标签等于friend的边,并根据weight降序排列,返回110个",
        "output": "match(a:person where a.name = '何科')-[e:friend]->(b) return b order by e.weight desc limit 110",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " Spark和Geaflow有什么共同点？",
        "output": "match(a:software where a.name='Spark')-[e:relation]->(b)<-[e2:relation]-(c:software where c.name='Geaflow') return b limit 80",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出标签等于person的所有点,并根据name从大到小排列",
        "output": "match(a:person) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));找出141个等级大于等于3,id大于等于67,或价值不等于662的大学,根据名字从小到大排列",
        "output": "match(a:university where (a.level >= 3 and a.id >= 67) or a.value <> 662) return a order by a.name asc limit 141",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和repository Kafka有has关系的pullRequest,再请帮我查找以has关系关联了Kafka的pullRequest",
        "output": "match(a:repository where a.name = 'Kafka')-[e:has]->(b:pullRequest),(a:repository where a.name = 'Kafka')<-[e2:has]-(c:pullRequest)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出191个与CSDN和中国军事论坛都存在关系的forum节点",
        "output": "match(a where a.name='CSDN')-[e]->(b:forum)<-[e2]-(c where c.name='中国军事论坛') return b limit 191",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表327,448,343, 源点的id等于输入表id,找出148个和label为loan的点有loan_deposit_account关系的account,以及和这些account有account_repay_loan关系的loan",
        "output": "with p as (select * from (VALUES(327),(448),(343)) as t(id)) MATCH (a:loan WHERE a.id = p.id) -[e:loan_deposit_account ]->(b:account) -[e2:account_repay_loan ]->(c:loan) RETURN c LIMIT 148",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person王轩knows的person,和王轩pay的person",
        "output": "match(a:person)<-[e:knows]-(b:person where name = '王轩')-[e2:pay]->(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我按照大学ID、价值、名称进行分组，并以价值从大到小排序？",
        "output": "match(a:university) return a.value group by a.id, a.value, a.name order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部类型是company或person或loan的点",
        "output": "match(a:company | person | loan) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从大学南京大学出发,经过label为属于的边,走3到5跳到达的城市点",
        "output": "match(a:university where a.name='南京大学')-[e:belong]->{3,5}(b:city) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与person韩建国和Sam都存在creates关系的点",
        "output": "match(a:person where a.name='韩建国')-[e:creates]->(b)<-[e2:creates]-(c:person where c.name='Sam') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,id,createTime, 数据为('Comment_143',13,2006-03-28)的子查询作为输入表, 源点的createTime等于输入表createTime,请帮我查找和comment点有belong关系的film节点,且边满足条件weight不是174.27,目标film节点满足条件category不是历史",
        "output": "with p as (select * from (VALUES('Comment_143',13,2006-03-28)) as t(name,id,createTime))MATCH (a:comment WHERE a.createTime = p.createTime) -[e:comment_belong_film WHERE e.weight <> 174.27 ]->(b:film WHERE b.category <> '历史') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,gender, 数据为('马建国',188,'famale'), 源点的height等于输入表height,返回与名为Order_350和Order_161的点共同包含的,label为商品的节点",
        "output": "with p as (select * from (VALUES('马建国',188,'famale')) as t(name,height,gender))MATCH (a WHERE a.height = p.height AND (a.name = 'Order_350')) -[e:orders_contain_goods ]->(b:goods) <-[e2:orders_contain_goods ]-(c WHERE c.name = 'Order_161') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,amount,weight, 数据为(25,8994.22,552),(96,3507.58,346), 源点的weight等于输入表weight,返回和account BIN有account_repay_loan关系的loan,再返回以account_repay_loan关系关联了 BIN的loan",
        "output": "with p as (select * from (VALUES(25,8994.22,552),(96,3507.58,346)) as t(id,amount,weight))MATCH (a:account WHERE a.weight = p.weight AND (a.name = 'BIN')) -[e:account_repay_loan ]->(b:loan) , (a:account WHERE a.name = 'BIN') <-[e2:account_repay_loan ]-(c:loan) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为49的person购买的软件, 并将软件有关的公司的名字的最小值赋值给软件的id, 接着查询软件的id小于49的软件使用的软件",
        "output": "match(a:person where a.id = 49)-[e:buy]->(b:software) let b.id = MIN((b:software)-[e2]-(c:company) => c.name) match(b:software where b.id < 49)-[e3:uses]->(d:software) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到所有源点标签为author，目标点标签也为author，且标签为knows的边。",
        "output": "match(a:author)-[e:knows]->(b:author) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与'person'类型的节点有申请关系的贷款，以及与这些贷款有存款关系的账户，以及与这些账户有还款关系的贷款。",
        "output": "match(a:person)-[e:apply]->(b:loan)-[e2:deposit]->(c:account)-[e3:repay]->(d:loan) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出类型为使用,并且满足条件f0的最大值减923加141.42对源点id取余不是35且f1是true,f0不为空的边",
        "output": "match(a)-[e:uses where MAX(e.f0) - 923 + 141.42 % e.srcId <> 35 and e.f1 = true and (e.f0 is not null)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与论坛天涯论坛存在包含关系,且与帖子Post_390存在喜欢关系的用户节点，返回这些用户的身高,薪资,年龄,及论坛天涯论坛的名字,及帖子Post_390的价值",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:user)<-[e2:likes]-(c:post where c.name='Post_390') return a.name,b.height, b.salary, b.age,c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出标签为person的点,并根据gender升序排列",
        "output": "match(a:person) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有标签为'teacher'且标签为'teach'的边，并返回这些边的目标节点ID乘目标节点ID的值和f0乘668的值。",
        "output": "match(a:teacher)-[e:teach]->(b) return e.targetId * e.targetId, e.f0 * 668",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点类型为医生,目标点类型为处方,类型为医生或处方或病人的边",
        "output": "match(a:doctor)-[e:doctor | prescription | patient]->(b:prescription) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与仓库有关系的用户节点,且用户节点的薪资在2778到5857之间,并返回这些用户的年龄乘32的值,以及用户的身高乘158的值",
        "output": "match(a:repository)-[e]->(b:user where (b.salary BETWEEN 2778 AND 5857)) return b.age * 32, b.height * 158",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为何雪和张强的,label为用户的点公共的相关者节点的名单",
        "output": "match(a:user where a.name='何雪')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与杜月有联系的人",
        "output": "match(a:person where a.name='杜月')<-[e:knows]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出申请贷款的人中，身高为空或名字不是张国强的，以及这些贷款的存款账户名称。",
        "output": "match(a:person where (a.height is null) or a.name <> '张国强')-[e:apply]->(b:loan)-[e2:deposit]->(c:account) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(4078,31,77),(7333,99,9)作为请求表数据,属性分别为salary,age,id, 以属性age作为相等条件,帮我查询和标签为person的点有person_belong_company关系的公司,以及和这些公司有company_employee_person关系的person,以及和这些person有person_belong_company关系的公司",
        "output": "with p as (select * from (VALUES(4078,31,77),(7333,99,9)) as t(salary,age,id))MATCH (a:person WHERE a.age = p.age) -[e:person_belong_company ]->(b:company) -[e2:company_employee_person ]->(c:person) -[e3:person_belong_company ]->(d:company) RETURN d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与土木工程系有关的教师，以及与教师周宏有关的课程。",
        "output": "match(a:department where a.name = '土木学院')-[e:has]->(b:teacher),(c:teacher where c.name = '周宏')-[e2:teach]->(d:course) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出被学生王思思选择的课程,和王思思选择的课程",
        "output": "match(a:course)<-[e:selects]-(b:student where name = '王思思')-[e2:selects]->(c:course) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询拥有关系标签为大学的学生和部门，共185个。",
        "output": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student) return c limit 185",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以'DN', 'Wf', 'WO'作为输入,返回运算结果",
        "output": "Call TRIANGLECOUNT('DN', 'Wf', 'WO') yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回190个名为Prescription_417的点包含的标签等于药品的节点,且节点价格不为空",
        "output": "match(a where a.name='Prescription_417')-[e:contain]->(b:medicine where (b.price is not null)) return b limit 190",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与名为Jack的人有恋人关系或恋人恋人关系的人。",
        "output": "match(a:person where n.name=Jack)-[e:lover]->{1,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回名叫马梅的病人。",
        "output": "match(a:patient where a.name = '马梅') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询所有源点标签为电影，边标签为拥有的边的数据，并返回这些边中源点ID除以源点ID除以976加860的数量，以及目标点ID除以f0除以615加的值。",
        "output": "match(a:film)-[e:has]->(b) return COUNT(e.srcId / e.srcId / 976 + 860), e.f0 / 615 + e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有与user有关系的forum节点,且forum节点的peopleNumber小于414,并返回这些forum的peopleNumber加87的平均值,以及forum的id乘0对357取余的最小值",
        "output": "match(a:user)-[e]->(b:forum where b.peopleNumber < 414) return AVG(b.peopleNumber + 87), MIN(b.id * 0 % 357)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找被university复旦大学cooperate的company",
        "output": "match(a:company)<-[e:university_cooperate_company]-(b:university where b.name='复旦大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与何轩和郑科都有关系的Department节点。",
        "output": "match(a:doctor where a.name='何轩')-[e:belong]-(b:department)-[e2:has]-(c:doctor where c.name='郑科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回杜梅的点属于的部门,然后返回杜梅被拥有的部门,一起返回",
        "output": "match(a where a.name = '杜梅')-[e:belong]->(b:department),(a where a.name = '杜梅')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找买家查看的商品,返回其源点的身高对175取余的数量,以及目标点的价格加2003.01的值",
        "output": "match(a:buyer)-[e:look]->(b:goods) return COUNT(a.height % 175), b.price + 2003.01",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询XXD账号关联的人的伙伴关联的人",
        "output": "match(a:account where a.name='XXD')-[e:relation]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和reader马国强有reader_likes_book关系的book,再帮我查询以reader_likes_book关系关联了马国强的book",
        "output": "match(a:reader where a.name = '马国强')-[e:reader_likes_book]->(b:book),(a:reader where a.name = '马国强')<-[e2:reader_likes_book]-(c:book)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person有关联的person节点,并根据其薪资,性别分组,返回薪资,性别,以及id加5除id减45的值",
        "output": "match(a:person)-[e:pay]-(b:person) return b.salary, b.gender, (b.id + 5) / b.id - 45 group by b.salary, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与编辑有关系的作家节点,且作家节点的id不为空,并返回这些作家的薪资对薪资取余的数量,以及作家的height的和除身高的数量",
        "output": "match(a:publisher)-[e]->(b:author where (b.id is not null)) return COUNT(b.salary % b.salary), COUNT(SUM(b.height) / b.height)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点满足条件薪资不为空,年龄大于等于48,id不等于8,目标点满足条件id大于等于80或年龄小于等于94,且id小于3758,且类型是家人的边",
        "output": "match(a where (a.salary is not null) and a.age >= 48 and a.id <> 8)-[e:family]->(b where (b.id >= 80 or b.age <= 94) and b.id < 3758) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被person支付数量大于101的person,记为relationCount,再查询这些person支付的person",
        "output": "match(a:person) let a.relationCount = MIN((a:person)<-[e:pay]-(b:person) => b.id) match(a where a.relationCount > 101)-[e2:pay]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找用户喜欢的帖子,返回其源点的height的和对159取余的值,以及目标点的字数对19取余的最大值",
        "output": "match(a:user)-[e:likes]->(b:post) return SUM(a.height) % 159, MAX(b.wordCount % 19)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与film有关联的名为周建聪的person节点，然后返回这些节点中height除以最大height后的结果，以及salary加上8483的总和。",
        "output": "match(a:film)-[e]->(b:person where b.name = '周建聪') return MAX(b.height / b.height), SUM(b.salary + 8483)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算height乘162的值",
        "output": "return a.height * 162 group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与Light和Faker账号有关联的节点",
        "output": "match(a:account where a.name='Light')-[e:transfer]-(b:account)-[e2:transfer]-(c:account where c.name='Faker') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点上次登录时间不等于1995年10月09日或id是425或创建时间不是1998年08月05日,目标点价值大于387,且标签为转账的边",
        "output": "match(a where a.lastLoginTime <> '1995-10-09' or a.id = 425 or a.createTime <> '1998-08-05')-[e:transfer]->(b where b.value > 387) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出138个名为艺术学院的点拥有的标签为学生的节点,且其id为53或性别为male",
        "output": "match(a where a.name='艺术学院')-[e:department_has_student]->(b:student where b.id = 53 or b.gender = 'male') return b limit 138",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有类型为评论或电影院的点",
        "output": "match(a:comment | cinema) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和pullRequest PR-153有1度或2度关系的user",
        "output": "match(a:pullRequest where a.name='PR-153')-[e]->{1,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与university电子科技大学有关系的student, 返回和这些student有关联的teacher的,age乘12的值",
        "output": "match(a:university where a.name= '电子科技大学')-[e]-(b:student)-[e2]-(c:teacher) return c.age * 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出电影院上映的电影, 令电影的名字的值等于观看电影的person的年龄的和, 再查找电影拥有的标签",
        "output": "match(a:cinema)-[e:releases]->(b:film) let b.name = SUM((b:film)<-[e2:watch]-(c:person) => c.age) match(b:film)-[e3:has]->(d:tag) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询论坛百度贴吧包含的用户节点发布的帖子",
        "output": "match(a:forum where a.name = '百度贴吧')-[e:contain]->(b:user)-[e2:publish]->(c:post) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为Comment_193的评论,以及与其有关的评论,并返回Comment_193的创建时间和这些评论的id",
        "output": "match(a:comment where name = 'Comment_193')-[e]-(b:comment) return a.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的平均值加142的最小值",
        "output": "MIN(AVG(a.value) + 142)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与卖家郑建聪存在回答关系,且与订单Order_215存在取消关系的买家节点，返回这些买家的身高,薪资,及卖家郑建聪的名字,及订单Order_215的id",
        "output": "match(a:seller where a.name='郑建聪')-[e:ask]->(b:buyer)<-[e2:cancel]-(c:orders where c.name='Order_215') return a.name,b.height, b.salary,c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "价值加631的和",
        "output": "SUM(a.value + 631)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询前135个标签等于has的边",
        "output": "match(a)-[e:has]->(b) return e limit 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和label为person的点有同事关系的person,并且和这些person有朋友关系的person,并且和这些person有同事关系的person",
        "output": "match(a:person)-[e:colleague]->(b:person)-[e2:friend]->(c:person)-[e3:colleague]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与黄建聪是同事的人，以及与郑科是朋友的人。",
        "output": "match(a:person where a.name = '黄建聪')-[e:colleague]->(b:person),(c:person where c.name = '郑科')-[e2:friend]->(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和处方Prescription_170有关的药品,再找出和Prescription_170包含的其他药品,返回它们",
        "output": "match(a:prescription where a.name = 'Prescription_170')-[e]-(b:medicine), (a:prescription)-[e2:contain]->(c:medicine) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被orders Order_407 contain的goods",
        "output": "match(a:goods)<-[e:contain]-(b:orders where b.name='Order_407') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表928,967, 以属性id作为相等条件,请帮我找出满足条件价值大于等于131,id大于50的节点",
        "output": "with p as (select * from (VALUES(928),(967)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.value >= 131 AND a.id > 50)) RETURN a ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为gender,name,salary, 数据为('famale','王伟',3739),('male','赵轩',1554), 源点的gender等于输入表gender,返回和电影院人人影城有cinema_releases_film关系的电影,以及和person韩建聪有person_creates_comment关系的评论,将它们都返回",
        "output": "with p as (select * from (VALUES('famale','王伟',3739),('male','赵轩',1554)) as t(gender,name,salary))MATCH (a:cinema WHERE a.gender = p.gender AND (a.name = '人人影城')) -[e:cinema_releases_film ]->(b:film) , (c:person WHERE c.name = '韩建聪') -[e2:person_creates_comment ]->(d:comment) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 黄强的课程有多少名学生选择了它？",
        "output": "match(a:teacher where a.name='黄强')-[e:teach]->(b:course)<-[e2:selects]-(c:student) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为张红的点关联的所有person,并对这些person的年龄进行求和",
        "output": "match(a where a.name='张红')-[e:relates]->(b:person) return SUM(b.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,name,scale, 数据为(805,'滴滴','large'),(142,'Bilibili','small'),(273,'谷歌','small'), 源点的value等于输入表value,返回和公司有关联的大学节点,并根据其id分组,返回id,以及价值除425的值",
        "output": "with p as (select * from (VALUES(805,'滴滴','large'),(142,'Bilibili','small'),(273,'谷歌','small')) as t(value,name,scale))MATCH (a:company WHERE a.value = p.value) -[e:company_cooperate_university ]-(b:university) RETURN b.id, b.value / 425 GROUP BY b.id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,salary,gender, 数据为('陈伟',1801,'male'), 源点的name等于输入表name,查询135个department传染部和外科,共同的friend",
        "output": "with p as (select * from (VALUES('陈伟',1801,'male')) as t(name,salary,gender))MATCH (a:department WHERE a.name = p.name AND (a.name = '传染部')) -[e:friend ]->(b) <-[e2:friend ]-(c:department WHERE c.name = '外科') RETURN b LIMIT 135",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找person喜欢的person,返回其源点的身高对191取余的和,以及目标点的id对id取余的平均值",
        "output": "match(a:person)-[e:likes]->(b:person) return SUM(a.height % 191), AVG(b.id % b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表505,434,346,907, 以属性id作为相等条件,找出被company腾讯apply的loan",
        "output": "with p as (select * from (VALUES(505),(434),(346),(907)) as t(id)) MATCH (a:loan WHERE a.id = p.id) <-[e:company_apply_loan ]-(b:company WHERE b.name = '腾讯') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型为买家的所有点,并根据身高从小到大排列",
        "output": "match(a:buyer) return a order by a.height asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与公司蚂蚁集团和滴滴都存在申请关系的点",
        "output": "match(a:company where a.name='蚂蚁集团')-[e:apply]->(b)<-[e2:apply]-(c:company where c.name='滴滴') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与账户节点account关联的账户节点，并按其名称和最后登录时间分组，返回名称和最后登录时间。",
        "output": "match(a:account)-[e:transfer]-(b:account) return b.name, b.lastLoginTime group by b.name, b.lastLoginTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和公司滴滴之间有创造关系的软件",
        "output": "match(a:company where a.name='滴滴')-[e:creates]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找到标签为'film'的所有点，并按名称升序排序。",
        "output": "match(a:film) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询Bob和马伟这两个人的相关者节点，它们在label为'person'的点上。",
        "output": "match(a:person where a.name='Bob')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='马伟') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加id的个数",
        "output": "COUNT(a.id + a.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为郑红的点发布的帖子",
        "output": "match(a where a.name='郑红')-[e:publish]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与腾讯公司有关联，且与吴月女士有关联的贷款节点，并返回它们的ID、金额和权重。",
        "output": "match(a:company where a.name='腾讯')-[e]->(b:loan)<-[e2]-(c:person where c.name='吴月') return b.id, b.amount, b.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找所有源点标签等于doctor,目标点标签等于patient,标签等于doctor或department或prescription的边",
        "output": "match(a:doctor)-[e:doctor | department | prescription]->(b:patient) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有与名为赵建国的学生有合作或合作关系的课程。",
        "output": "match(a:student where n.name=赵建国)-[e:partner]->{1,2}(b:course) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出医生郑建聪的全部类型为朋友的边,并根据权重从小到大排列,返回32个",
        "output": "match(a:doctor where a.name = '郑建聪')-[e:friend]->(b) return b order by e.weight asc limit 32",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询Post_263帖子的相关人以及他们的伙伴。",
        "output": "match(a:post where a.name='Post_263')-[e:relation]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找197个与孙宏和郑思思都存在关系的seller节点",
        "output": "match(a where a.name='孙宏')-[e]->(b:seller)<-[e2]-(c where c.name='郑思思') return b limit 197",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为赵宏的点的,性别是male,身高在188到190之间的相关者,返回这些相关者的性别,和边的f0,f1,权重",
        "output": "match(a where a.name='赵宏')-[e:relation]->(b where b.gender = 'male' and (b.height BETWEEN 188 AND 190)) return b.gender,e.f0, e.f1, e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为周月的点认识的person",
        "output": "match(a where a.name='周月')-[e:knows]->(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点类型是person,目标点类型是person,类型是person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出标签为朋友,以及满足条件权重小于等于101.45的边",
        "output": "match(a)-[e:friend where e.weight <= 101.45]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和buyer有关联的orders节点,并根据其id,price分组,返回id,price,以及value除946的值",
        "output": "match(a:buyer)-[e:buyer_creates_orders]-(b:orders) return b.id, b.price, b.value / 946 group by b.id, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出user何伟的类型是friend的边,并根据targetId降序排列,返回163个",
        "output": "match(a:user where a.name = '何伟')-[e:friend]->(b) return b order by e.targetId desc limit 163",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部与用户马国强有关系的仓库的id",
        "output": "match(a:user where a.name='马国强')-[e]-(b:repository) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以('英国',60969,270),('美国',14518,950)作为请求表数据,属性分别为name,area,value, 以属性name作为相等条件,请帮我找出与名为腾讯和字节的点共同属于的,类型为城市的节点",
        "output": "with p as (select * from (VALUES('英国',60969,270),('美国',14518,950)) as t(name,area,value))MATCH (a WHERE a.name = p.name AND (a.name = '腾讯')) -[e:company_belong_city ]->(b:city) <-[e2:company_belong_city ]-(c WHERE c.name = '字节') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "height除175对3679取余的值",
        "output": "a.height / 175 % 3679",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为38的点的身高,年龄",
        "output": "match(a where a.id = 38) return a.height, a.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与订单有关联的卖家节点，其中卖家节点的ID大于53。然后返回这些节点的身高总和加上175，以及它们的ID差的平均值。",
        "output": "match(a:orders)-[e]->(b:seller where b.id > 53) return SUM(b.height + 175), AVG(b.id - b.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表580,893,913, 源点的id等于输入表id,请帮我查找全部和名为放射科的部门有相关者关系,或有相关者的相关者关系的医生",
        "output": "with p as (select * from (VALUES(580),(893),(913)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (n.name = 放射科)) -[e:relation ]->{1,2}(b:doctor) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询software的3度的环",
        "output": "match(a:software)->{2,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找课程的三角的环,边类型是属于, 并返回这些点的id",
        "output": "match(a:course)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找标签为大学的所有点,并根据等级从小到大排列",
        "output": "match(a:university) return a order by a.level asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出与标签为'买家'的147个点有咨询关系的卖家，并找出这些卖家所拥有的商品。",
        "output": "match(a:buyer)-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c limit 147",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与城市标签相关的公司，这些公司包含城市，而这些城市又属于大学。",
        "output": "match(a:city)-[e:contain]->(b:company)-[e2:belong]->(c:city)-[e3:contain]->(d:university) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回7个名为赵梅的点喜欢的标签为书的节点,且节点价格在28到68之间",
        "output": "match(a where a.name='赵梅')-[e:likes]->(b:book where (b.price BETWEEN 28 AND 68)) return b limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为33的film关联的comment,和以likes关系关联了这些comment的其他person",
        "output": "match(a:film where a.id = 33)-[e]-(b:comment)<-[e2:likes]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询类型是user_publish_post,且满足条件f0在823到827之间的边",
        "output": "match(a)-[e:user_publish_post where (e.f0 BETWEEN 823 AND 827)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找韩建聪的朋友的伙伴。",
        "output": "match(a:person where a.name='韩建聪')-[e:relation]->(b)-[e2:partner]->(c)-[e3:relation]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与国家英国存在包含关系,且与国家法国存在属于关系的城市节点，返回这些城市的人数,名字,面积,及国家英国的人数,及国家法国的人数",
        "output": "match(a:country where a.name='英国')-[e:contain]->(b:city)<-[e2:belong]-(c:country where c.name='法国') return a.peopleNumber,b.peopleNumber, b.name, b.area,c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询帖子Post_232的全部label为相关者的边,并根据目标点id从小到大排列,返回188个",
        "output": "match(a:post where a.name = 'Post_232')-[e:relation]->(b) return b order by e.targetId asc limit 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为Geaflow的software,以及与其有关的software,并返回Geaflow的value和这些software的lang",
        "output": "match(a:software where name = 'Geaflow')-[e]-(b:software) return a.value, b.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回12个person周雪和何轩,共同的伙伴",
        "output": "match(a:person where a.name='周雪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='何轩') return b limit 12",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有id为179的商品关联的商品,和以包含关系关联了这些商品的其他订单",
        "output": "match(a:goods where a.id = 179)-[e]-(b:goods)<-[e2:contain]-(c:orders) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出源点满足条件id小于等于19,目标点满足条件name为呐喊,createTime不等于2004年03月17日,且类型为refers的边",
        "output": "match(a where a.id <= 19)-[e:refers]->(b where b.name = '呐喊' and b.createTime <> '2004-03-17') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'vM', 'dx'作为输入调用personalRank函数,返回运算结果",
        "output": "Call PERSONALRANK('vM', 'dx') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与person张若涵有关系的person, 返回和这些person有关联的person的,id的平均值除75的值",
        "output": "match(a:person where a.name= '张若涵')-[e]-(b:person)-[e2]-(c:person) return AVG(c.id) / 75",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找和名为徐伟的编辑有相关关系，或有相关者的相关关系的书。",
        "output": "match(a:publisher where n.name=徐伟)-[e:relation]->{1,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询以咨询关系关联了卖家马红的买家",
        "output": "match(a:seller where a.name='马红')<-[e:consult]-(b:buyer) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有学生点，按照姓名降序排序。",
        "output": "match(a:student) return a order by a.name desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出张若涵喜欢的人，以及这些人相互认识的交集，并返回他们的年龄。",
        "output": "match(a where a.name = '张若涵')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前70个id不为空或名字不是阿司匹林或名字为生理盐水的药品",
        "output": "match(a:medicine where (a.id is not null) or a.name <> '阿司匹林' or a.name = '生理盐水') return a limit 70",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与电影《复仇者联盟》相关的标签，然后再返回与《复仇者联盟》有关联的标签。",
        "output": "match(a:film where a.name = '复仇者联盟')-[e:has]->(b:tag),(a:film where a.name = '复仇者联盟')<-[e2:has]-(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有名为字节的节点属于的大学或国家或公司",
        "output": "match(a where a.name='字节')-[e:belong]->(b:university | country | company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部源点标签为person,边标签为commits的边,返回这些边的weight除197.47加129乘181.43对123.21取余的值,和f0乘766除931的求和值",
        "output": "match(a:person)-[e:commits]->(b) return (e.weight / 197.47 + 129) * 181.43 % 123.21, SUM(e.f0 * 766 / 931)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找152个名为韩伟的点喜欢的标签等于仓库的节点,且其名字为Kafka",
        "output": "match(a where a.name='韩伟')-[e:likes]->(b:repository where b.name = 'Kafka') return b limit 152",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询源点标签为person,目标点标签为person,标签为person的边",
        "output": "match(a:person)-[e:person]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回源点满足条件名字的和小于等于1239.99或名字不等于Order_137,且价格为空,目标点满足条件id小于等于79,且类型是包含的边",
        "output": "match(a where (SUM(a.name) <= 1239.99 or a.name <> 'Order_137') and (a.price is null))-[e:contain]->(b where b.id <= 79) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部和loan点有deposit关系的account节点,且边满足条件srcId不为空,目标account节点满足条件id小于2",
        "output": "match(a:loan)-[e:deposit where (e.srcId is not null)]->(b:account where b.id < 2) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与软件Zookeeper有关系的person, 返回和这些person有关联的person的,年龄除年龄的最大值",
        "output": "match(a:software where a.name= 'Zookeeper')-[e]-(b:person)-[e2]-(c:person) return MAX(c.age / c.age)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询和film神探狄仁杰有关的film,再查询和神探狄仁杰film_has_tag的其他tag,返回它们",
        "output": "match(a:film where a.name = '神探狄仁杰')-[e]-(b:film), (a:film)-[e2:film_has_tag]->(c:tag) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为106的点的id,名字",
        "output": "match(a where a.id = 106) return a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为王建聪的点接受的处方",
        "output": "match(a where a.name='王建聪')-[e:accept]->(b:prescription) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我查找一个名为韩月和孙建国的人，他们共同接受了一个处方类型的节点？",
        "output": "match(a where a.name = '韩月')-[e:accept]->(b:prescription)<-[e2:accept]-(c where c.name = '孙建国') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "调用triangleCount函数,以58, 3作为输入,返回number",
        "output": "Call TRIANGLECOUNT(58, 3) yield (number) return number",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出黄伟编辑的书。",
        "output": "match(a:book)<-[e:publish]-(b:publisher where b.name='黄伟') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询医生陈若涵创造的处方,被其他病人接受的数量",
        "output": "match(a:doctor where a.name='陈若涵')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减87的值",
        "output": "a.id - 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 帮我查询Light账户合作伙伴的合作伙伴的朋友。",
        "output": "match(a:account where a.name='Light')-[e:partner]->(b)-[e2:partner]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与作家黄国强存在认识关系,且与书三体存在撰写关系的作家节点，返回这些作家的年龄,身高,名字,及作家黄国强的薪资,及书三体的类别",
        "output": "match(a:author where a.name='黄国强')-[e:knows]->(b:author)<-[e2:write]-(c:book where c.name='三体') return a.salary,b.age, b.height, b.name,c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和名为Zeus的账号有伙伴关系,或有伙伴的伙伴关系的账号",
        "output": "match(a:account where n.name=Zeus)-[e:partner]->{1,2}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有名为北京大学的,id不是67或名字不是东京的相关者,返回这些相关者的人数,和边的权重,目标点id",
        "output": "match(a where a.name='北京大学')-[e:relation]->(b where b.id <> 67 or b.name <> '东京') return b.peopleNumber,e.weight, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,height,gender, 数据为(65,151,'male'),(41,180,'male'),(45,173,'male'),(42,185,'male'), 以属性id作为相等条件,请帮我查找87个与蚂蚁集团和谷歌都存在关系的account节点",
        "output": "with p as (select * from (VALUES(65,151,'male'),(41,180,'male'),(45,173,'male'),(42,185,'male')) as t(id,height,gender))MATCH (a WHERE a.id = p.id AND (a.name = '蚂蚁集团')) -[e ]->(b:account) <-[e2 ]-(c WHERE c.name = '谷歌') RETURN b LIMIT 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有高等数学的点belong的department,然后查找高等数学被teach的teacher,一起返回",
        "output": "match(a where a.name = '高等数学')-[e:belong]->(b:department),(a where a.name = '高等数学')<-[e2:teach]-(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询类型是编辑,名为赵科的点,返回这些点的年龄,id",
        "output": "match(a:publisher where a.name = '赵科') return a.age, a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有用户的年龄乘34的值",
        "output": "match(a:user) return a.age * 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为杜伟的点撰写的所有书,并对这些书的价格进行求和",
        "output": "match(a where a.name='杜伟')-[e:write]->(b:book) return SUM(b.price)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询类型是person的点,返回73个",
        "output": "match(a:person) return a limit 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为'处方'的点，并按名称进行升序排序。",
        "output": "match(a:prescription) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有label为person的点，按照性别升序排序。",
        "output": "match(a:person) return a order by a.gender asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与名为急诊部和传染部的点共同has的,类型是doctor的节点",
        "output": "match(a where a.name = '急诊部')-[e:has]->(b:doctor)<-[e2:has]-(c where c.name = '传染部') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找128个名字为杯子的商品,根据名字降序排列",
        "output": "match(a:goods where a.name = '杯子') return a order by a.name desc limit 128",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询从账号LX001出发,经过标签为还款的边,走3到5跳到达的贷款点",
        "output": "match(a:account where a.name='LX001')-[e:repay]->{3,5}(b:loan) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以889,179,894作为请求点id, 以属性id作为相等条件,请帮我查找person马伟支付的person,被其他person认识的数量",
        "output": "with p as (select * from (VALUES(889),(179),(894)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '马伟')) -[e:person_pay_person ]->(b:person) <-[e2:person_knows_person ]-(c:person) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与Alice有关联的人，以及这些人与其他人的关联数量。",
        "output": "match(a:person where a.name='Alice')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部person以id,年龄,薪资分组的身高, 根据身高降序排序",
        "output": "match(a:person) return a.height group by a.id, a.age, a.salary order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点身高大于等于194或性别为male,边类型为喜欢,且权重不为空,目标点id为空,或目标点id的数量小于5的边,返回这些边的f0减966减16的和",
        "output": "match(a where a.height >= 194 or a.gender = 'male')-[e:likes where ((e.weight is not null) and (e.targetId is null)) or COUNT(e.targetId) < 5]->(b) return SUM(e.f0 - 966 - 16)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与电影复仇者联盟有拥有关系的1度的环",
        "output": "match(a:film where name = '复仇者联盟')-[e:has]->{0,0}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person马建国认识的person节点认识的person",
        "output": "match(a:person where a.name = '马建国')-[e:knows]->(b:person)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找199个名为张月的点创造的label为合并请求的节点,且节点id小于等于64或创建时间不等于2001年10月31日",
        "output": "match(a where a.name='张月')-[e:creates]->(b:pullRequest where b.id <= 64 or b.createTime <> '2001-10-31') return b limit 199",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有country的id加3的求和值",
        "output": "match(a:country) return SUM(a.id + 3)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有源点为大学、边类型为合作的边。计算这些边的f0除以544的余数，以及它们的权重减去原始权重的值。",
        "output": "match(a:university)-[e:cooperate]->(b) return e.f0 % 544, e.weight - e.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和account Zeus有3到5度关系的person",
        "output": "match(a:account where a.name='Zeus')-[e]->{3,5}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找用户杜伟发布的帖子节点拥有的标签",
        "output": "match(a:user where a.name = '杜伟')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与微软和滴滴都有关联的贷款节点，返回它们的ID和金额。",
        "output": "match(a:company where a.name='微软')-[e]->(b:loan)<-[e2]-(c:company where c.name='滴滴') return b.id, b.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以327,454,11作为请求点id, 以属性id作为相等条件,请帮我找出所有与用户李若涵有关系的处方的创建时间",
        "output": "with p as (select * from (VALUES(327),(454),(11)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '李若涵')) -[e ]-(b:prescription) RETURN b.createTime ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以316,767,767作为请求点id, 以属性id作为相等条件,请帮我查找person购买的软件,返回其源点的身高加160的求和值,以及目标点的id减id的最小值",
        "output": "with p as (select * from (VALUES(316),(767),(767)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_buy_software ]->(b:software) RETURN SUM(a.height + 160), MIN(b.id - b.id) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询陈建聪写的书，以及知道他作为作者的姓名，返回两者。",
        "output": "match(a where a.name = '陈建聪')-[e:write]->(b:book),(a where a.name = '陈建聪')<-[e2:knows]-(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以438,909,818作为请求点id, 源点的id等于输入表id,返回名为黄建聪的publisher,以及与其有关的publisher,并返回黄建聪的name和这些publisher的salary",
        "output": "with p as (select * from (VALUES(438),(909),(818)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (name = '黄建聪')) -[e ]-(b:publisher) RETURN a.name, b.salary ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部源点标签等于软件,目标点标签等于软件,标签等于公司或软件的边",
        "output": "match(a:software)-[e:company | software]->(b:software) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与贷款loan_9存在存款关系,且与贷款loan_48存在还款关系的账号节点，返回这些账号的价值,id,及贷款loan_9的权重,及贷款loan_48的权重",
        "output": "match(a:loan where a.name='loan_9')-[e:deposit]->(b:account)<-[e2:repay]-(c:loan where c.name='loan_48') return a.weight,b.value, b.id,c.weight",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为110的university有关的university的partner, 再查找和university有关系的friend",
        "output": "match(a:university where id = 110)-[e]-(b:university)-[e2:partner]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出id为76的部门有关的医生的伙伴, 再给出和医生有关系的相关者",
        "output": "match(a:department where id = 76)-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出39部与电影院标签相关的上映电影，以及这些电影所关联的所有标签",
        "output": "match(a:cinema)-[e:releases]->(b:film)-[e2:has]->(c:tag) return c limit 39",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出与seller韩思思存在ask关系,且与orders Order_198存在cancel关系的buyer节点，返回这些buyer的age,id,name,及seller韩思思的age,及orders Order_198的price",
        "output": "match(a:seller where a.name='韩思思')-[e:ask]->(b:buyer)<-[e2:cancel]-(c:orders where c.name='Order_198') return a.age,b.age, b.id, b.name,c.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找label为orders的点,返回48个",
        "output": "match(a:orders) return a limit 48",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找性别等于famale的节点",
        "output": "match(a where a.gender = 'famale') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出创造用户马建聪创造的合并请求,的用户",
        "output": "match(a:user where name = '马建聪')-[e:creates]->(b:pullRequest)<-[e2:creates]-(c:user) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出23个名为张轩的点creates的类型为orders的节点,且其id不为空或price为空",
        "output": "match(a where a.name='张轩')-[e:creates]->(b:orders where (b.id is not null) or (b.price is null)) return b limit 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出城市包含的大学, 令大学的等级的值等于合作大学的公司的人数的数量, 再查找大学合作的公司",
        "output": "match(a:city)-[e:contain]->(b:university) let b.level = COUNT((b:university)<-[e2:cooperate]-(c:company) => c.peopleNumber) match(b:university)-[e3:cooperate]->(d:company) return b.level, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找5个名为王伟的点发布的类型为书的节点,且其名字是呐喊",
        "output": "match(a where a.name='王伟')-[e:publish]->(b:book where b.name = '呐喊') return b limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出徐强诊断过的所有病人，以及他在哪个部门工作。",
        "output": "match(a where a.name = '徐强')-[e:diagnose]->(b:patient),(a where a.name = '徐强')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "取消买家陈科的订单，返回包含该订单商品类别的信息。",
        "output": "match(a:buyer where name = '陈科')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person喜欢的评论, 令评论的id的值等于喜欢评论的person的id的最大值, 再查找评论属于的电影",
        "output": "match(a:person)-[e:likes]->(b:comment) let b.id = MAX((b:comment)<-[e2:likes]-(c:person) => c.id) match(b:comment)-[e3:belong]->(d:film) return b.id, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出那些既在大众影院上映，也在横店影院上映的电影。",
        "output": "match(a where a.name = '大众影院')-[e:releases]->(b:film)<-[e2:releases]-(c where c.name = '横店影院') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有与这些书有编辑关联的书籍，以及这些书籍与其他编辑之间的发布关系",
        "output": "match(a:publisher where a.id = '36')-[e]-(b:book)<-[e2:publish]-(c:publisher) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询赵宏取消的订单",
        "output": "match(a:orders)<-[e:cancel]-(b:buyer where b.name='赵宏') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与电影院横店影院有关系的电影的价值",
        "output": "match(a:cinema where a.name='横店影院')-[e]-(b:film) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询与学生吴红存在选择关系,且与部门生物学院存在属于关系的课程节点，返回这些课程的学分,课时,及学生吴红的性别,及部门生物学院的大小",
        "output": "match(a:student where a.name='吴红')-[e:selects]->(b:course)<-[e2:belong]-(c:department where c.name='生物学院') return a.gender,b.credit, b.courseHour,c.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部名为郑思琪的,年龄不为空或年龄是42的同事,返回这些同事的名字,和边的源点id",
        "output": "match(a where a.name='郑思琪')-[e:colleague]->(b where (b.age is not null) or b.age = 42) return b.name,e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部赵雪的点创造的处方,然后查询赵雪被拥有的部门,一起返回",
        "output": "match(a where a.name = '赵雪')-[e:creates]->(b:prescription),(a where a.name = '赵雪')<-[e2:has]-(c:department) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表650,421, 源点的id等于输入表id,查找被电影功夫拥有的标签",
        "output": "with p as (select * from (VALUES(650),(421)) as t(id)) MATCH (a:tag WHERE a.id = p.id) <-[e:film_has_tag ]-(b:film WHERE b.name = '功夫') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点标签为person,边标签为认识,且f0不是909或目标点id不等于195,且目标点id为156的边",
        "output": "match(a:person)-[e:knows where (e.f0 <> 909 or e.targetId <> 195) and e.targetId = 156]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,age,gender分组,计算salary减8847的最大值",
        "output": "return MAX(a.salary - 8847) group by a.id, a.age, a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为person,边label为恋人,且f0不为空,f1不等于true,或源点id大于167的边",
        "output": "match(a:person)-[e:lover where ((e.f0 is not null) and e.f1 <> true) or e.srcId > 167]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出类型是software的点,并根据value降序排列",
        "output": "match(a:software) return a order by a.value desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表297, 以属性id作为相等条件,查找与名为徐雪和吴伟的点共同认识的,label为作家的节点",
        "output": "with p as (select * from (VALUES(297)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐雪')) -[e:author_knows_author ]->(b:author) <-[e2:author_knows_author ]-(c WHERE c.name = '吴伟') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部用户以薪资,id,年龄分组的id, 根据id从大到小排序",
        "output": "match(a:user) return a.id group by a.salary, a.id, a.age order by a.id desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回李红所属的公司和谷歌创建的软件。",
        "output": "match(a:person where a.name = '李红')-[e:belong]->(b:company),(c:company where c.name = '谷歌')-[e2:creates]->(d:software) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person黄建国有家人关系的3度以内的环",
        "output": "match(a:person where name = '黄建国')-[e:family]->{0,2}(b)->(a) return a.id, b.id as b_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找大小除664加267大于18的电影院上映的电影的名称,以及这些电影 拥有的标签的名称",
        "output": "match(a:cinema where a.size / 664 + 267 > 18)-[e:releases]->(b:film)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出名为腾讯的company,以及与其有关的company,并返回腾讯的peopleNumber和这些company的peopleNumber",
        "output": "match(a:company where name = '腾讯')-[e]-(b:company) return a.peopleNumber, b.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出共同拥有名称为Post_320和Post_336的点，且标签为label的节点。",
        "output": "match(a where a.name = 'Post_320')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_336') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与medicine有关系的prescription节点,且prescription节点的createTime为2027年02月15日,并返回这些prescription的weight减932的值,以及prescription的weight加800的值",
        "output": "match(a:medicine)-[e]->(b:prescription where b.createTime = '2027-02-15') return b.weight - 932, b.weight + 800",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查找与Amily和何若涵有联系的36个作家。",
        "output": "match(a where a.name='Amily')-[e]->(b:author)<-[e2]-(c where c.name='何若涵') return b limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出has student周强的department,和这些department has的student",
        "output": "match(a:student where name = '周强')<-[e:has]-(b:department)-[e2:has]->(c:student) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有的人，并按照年龄降序排序。",
        "output": "match(a:person) return a order by a.age desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查一下王若涵支付了哪些人",
        "output": "match(a:person)<-[e:pay]-(b:person where b.name='王若涵') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person张雪存在投资关系,且与贷款loan_80存在申请关系的公司节点，返回这些公司的人数,id,名字,及person张雪的身高,及贷款loan_80的金额",
        "output": "match(a:person where a.name='张雪')-[e:invest]->(b:company)<-[e2:apply]-(c:loan where c.name='loan_80') return a.height,b.peopleNumber, b.id, b.name,c.amount",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与用户徐若涵有关,且与标签悬疑有关系的帖子节点",
        "output": "match(a:user where a.name='徐若涵')-[e:publish]-(b:post)-[e2:has]-(c:tag where c.name='悬疑') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出28个名为马建聪的点认识的标签为作家的节点,且其id不为空且名字不是吴国强",
        "output": "match(a where a.name='马建聪')-[e:knows]->(b:author where (b.id is not null) and b.name <> '吴国强') return b limit 28",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与医生马宏有关联的患者，或者与患者的关联有关联的患者。",
        "output": "match(a:doctor where n.name=马宏)-[e:relation]->{1,2}(b:patient) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出张科拥有且走过2到4度的账号点",
        "output": "match(a:person where a.name='张科')-[e:own]->{2,4}(b:account) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于goods的全部点,并根据sellerNumber升序排列",
        "output": "match(a:goods) return a order by a.sellerNumber asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出天涯论坛和知乎上关于同一个主题的前159篇相关文章",
        "output": "match(a:forum where a.name='天涯论坛')-[e:relation]->(b)<-[e2:relation]-(c:forum where c.name='知乎') return b limit 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询名为孙科的person,以及与其有关的person,并返回孙科的name和这些person的id",
        "output": "match(a:person where name = '孙科')-[e]-(b:person) return a.name, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找杜强这个人观看过的电影，并返回这些电影所包含的标签的名称和值。",
        "output": "match(a:person where name = '杜强')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.name, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询类型为贷款的全部点,并根据权重降序排列",
        "output": "match(a:loan) return a order by a.weight desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与郑思琪存在likes关系的comment,comment与film存在belong关系的点,返回这些点的name",
        "output": "match(a where a.name = '郑思琪')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有源点标签为教师,边标签为教的边,返回这些边的权重除115.79的最大值,和f0减830的数量",
        "output": "match(a:teacher)-[e:teach]->(b) return MAX(e.weight / 115.79), COUNT(e.f0 - 830)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出从person何若涵出发,经过类型为person_likes_comment的边,走1跳到达的评论点",
        "output": "match(a:person where a.name='何若涵')-[e:person_likes_comment]->{1,1}(b:comment) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被forum知网contain的user",
        "output": "match(a:user)<-[e:contain]-(b:forum where b.name='知网') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出和论坛百度贴吧之间有包含关系的帖子",
        "output": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:post) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询155个名为李思琪的点认识的label为person的节点,且节点名字为吴红",
        "output": "match(a where a.name='李思琪')-[e:knows]->(b:person where b.name = '吴红') return b limit 155",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找订单号Order_492。",
        "output": "match(a:orders where a.name = 'Order_492') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person吴月有关系的company, 返回和这些company有关联的company的,peopleNumber加686的值",
        "output": "match(a:person where a.name= '吴月')-[e]-(b:company)-[e2]-(c:company) return c.peopleNumber + 686",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回韩若涵有consult关系的seller,再返回这些seller与goods有has关系的点中，每个点的sellerNumber。",
        "output": "match(a where a.name = '韩若涵')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c.sellerNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出doctor周若涵creates的prescription,以及accept这些prescription的patient, 令prescription的height等于patient的height的求和值加177,令doctor的id等于doctor的height除162除age, 返回doctor的id,prescription的createTime,patient的gender",
        "output": "match(a:doctor where name = '周若涵')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) let b.height = SUM(c.height) + 177,let a.id = a.height / 162 / a.age return a.id,b.createTime,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询19个卖家赵雪和赵月,共同的相关者",
        "output": "match(a:seller where a.name='赵雪')-[e:relation]->(b)<-[e2:relation]-(c:seller where c.name='赵月') return b limit 19",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回名为周若涵的,名字为杯子的伙伴,返回这些伙伴的名字,和边的f1,目标点id",
        "output": "match(a where a.name='周若涵')-[e:partner]->(b where b.name = '杯子') return b.name,e.f1, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找一本书到发布的编辑边。",
        "output": "match(a:publisher)-[e:publish]->(b:book) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被person李轩belong的company",
        "output": "match(a:company)<-[e:belong]-(b:person where b.name='李轩') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找评论Comment_468 属于的电影,返回电影 拥有的标签的价值加211的值",
        "output": "match(a:comment where name = 'Comment_468')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.value + 211",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,age,salary, 数据为(187,7,5605),(180,67,3943),(197,20,9469),(199,44,9141), 以属性height作为相等条件,请帮我查找所有张伟的点属于的公司,然后请帮我查找张伟被认识的person,一起返回",
        "output": "with p as (select * from (VALUES(187,7,5605),(180,67,3943),(197,20,9469),(199,44,9141)) as t(height,age,salary))MATCH (a WHERE a.height = p.height AND (a.name = '张伟')) -[e:person_belong_company ]->(b:company) , (a WHERE a.name = '张伟') <-[e2:person_knows_person ]-(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出论坛包含的用户,返回其源点的value的数量对858取余的数量,以及目标点的身高对身高取余的值",
        "output": "match(a:forum)-[e:contain]->(b:user) return COUNT(COUNT(a.value) % 858), b.height % b.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出company蚂蚁集团creates的software,以及commits这些software的person",
        "output": "match(a:company where name = '蚂蚁集团')-[e:creates]->(b:software)<-[e2:commits]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与Post_487有关联的tag，以及由用户周宏发布的所有post。",
        "output": "match(a:post where a.name = 'Post_487')-[e:has]->(b:tag),(c:user where c.name = '周宏')-[e2:publish]->(d:post) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和department土木学院有关的teacher,再帮我查询和土木学院department_has_teacher的其他teacher,返回它们",
        "output": "match(a:department where a.name = '土木学院')-[e]-(b:teacher), (a:department)-[e2:department_has_teacher]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出名为孙思思的点的,name不是Order_145的relation,返回这些relation的price,和边的weight,targetId,timeStamp",
        "output": "match(a where a.name='孙思思')-[e:relation]->(b where b.name <> 'Order_145') return b.price,e.weight, e.targetId, e.timeStamp",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出account LX001 repay的loan,返回loan deposit的account的id对59取余的值",
        "output": "match(a:account where name = 'LX001')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.id % 59",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被teacher李强teach的course",
        "output": "match(a:course)<-[e:teach]-(b:teacher where b.name='李强') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber分组,计算peopleNumber减peopleNumber的值",
        "output": "return a.peopleNumber - a.peopleNumber group by a.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出大学关联的部门，以及与这些部门有联系的其他大学。",
        "output": "match(a:university where a.id = '195')-[e]-(b:department)<-[e2:has]-(c:university) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部id为68的person关联的person,和以支付关系关联了这些person的其他person",
        "output": "match(a:person where a.id = 68)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找名为周雪和陈若涵的,label为person的点公共的相关者节点的名单",
        "output": "match(a:person where a.name='周雪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='陈若涵') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找和person李伟有家人关系的person,再查找以朋友关系关联了李伟的person",
        "output": "match(a:person where a.name = '李伟')-[e:family]->(b:person),(a:person where a.name = '李伟')<-[e2:friend]-(c:person)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出前181个标签为拥有的边",
        "output": "match(a)-[e:has]->(b) return e limit 181",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有和买家周雪之间有查看关系的商品",
        "output": "match(a:buyer where a.name='周雪')-[e:look]->(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有label为'teacher'且name为'孙建国'的点，并返回它们的id和height。",
        "output": "match(a:teacher where a.name = '孙建国') return a.id, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询课程大学物理 属于的部门,返回部门 拥有的学生的height的最大值对164取余的值",
        "output": "match(a:course where name = '大学物理')-[e:belong]->(b:department)-[e2:has]->(c:student) return MAX(c.height) % 164",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表902,141,775,780, 以属性id作为相等条件,找出被电影院好视影院上映的电影",
        "output": "with p as (select * from (VALUES(902),(141),(775),(780)) as t(id)) MATCH (a:film WHERE a.id = p.id) <-[e:cinema_releases_film ]-(b:cinema WHERE b.name = '好视影院') RETURN a, b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为value,name,id, 数据为(16,'Order_312',37),(637,'Order_336',15),(460,'Order_358',32), 源点的name等于输入表name,计算所有买家的年龄除25的数量",
        "output": "with p as (select * from (VALUES(16,'Order_312',37),(637,'Order_336',15),(460,'Order_358',32)) as t(value,name,id))MATCH (a:buyer WHERE a.name = p.name) RETURN COUNT(a.age / 25) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和学生有关联的课程节点,并根据其名字,学分分组,返回名字,学分,以及价值加371的值",
        "output": "match(a:student)-[e:selects]-(b:course) return b.name, b.credit, b.value + 371 group by b.name, b.credit",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表726,129,140,305,148, 源点的id等于输入表id,查找全部名为孙梅的,id减52大于95,字数为空的朋友,返回这些朋友的创建时间,和边的f1,f0,权重",
        "output": "with p as (select * from (VALUES(726),(129),(140),(305),(148)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '孙梅')) -[e:friend ]->(b WHERE b.id - 52 > 95 AND b.wordCount IS NULL) RETURN b.createTime, e.f1, e.f0, e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出两个与'person'类型有关联，且这两个'person'之间存在喜欢关系的对象，并找出与这些对象有关联的'person'。",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:likes]->(c:person) return c limit 2",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与马建聪和郑轩都有关系的所有person节点",
        "output": "match(a:person where a.name='马建聪')-[e:pay]-(b:person)-[e2:likes]-(c:person where c.name='郑轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表440,238, 源点的id等于输入表id,查询类型为学生的所有点,并根据年龄升序排列",
        "output": "with p as (select * from (VALUES(440),(238)) as t(id)) MATCH (a:student WHERE a.id = p.id) RETURN a ORDER BY a.age ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和label为department的点有has关系的doctor,并且和这些doctor有creates关系的prescription,并且和这些prescription有contain关系的medicine",
        "output": "match(a:department)-[e:has]->(b:doctor)-[e2:creates]->(c:prescription)-[e3:contain]->(d:medicine) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为陈建国的person,以及与其有关的person,并返回陈建国的id和这些person的gender",
        "output": "match(a:person where name = '陈建国')-[e]-(b:person) return a.id, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部和person徐月有2跳关系的person",
        "output": "match(a:person where a.name='徐月')-[e]->{2,2}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有标签为'user'的点，然后按照薪水从高到低排序。",
        "output": "match(a:user) return a order by a.salary desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找满足条件height在150到162之间的节点",
        "output": "match(a where (a.height BETWEEN 150 AND 162)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出存款账户中，其他账户向其转账的数量。",
        "output": "match(a:loan where a.name='defaultName')-[e:deposit]->(b:account)<-[e2:transfer]-(c:account) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据name分组,计算height除197的最大值",
        "output": "return MAX(a.height / 197) group by a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出部门土木学院拥有的教师,以及拥有这些教师的部门, 令部门的性别等于教师的id加82,令部门的id等于部门的id,令部门的id等于部门的id的最小值乘75, 返回部门(a)的大小,教师(b)的名字,部门(c)的大小",
        "output": "match(a:department where name = '土木学院')-[e:has]->(b:teacher)<-[e2:has]-(c:department) let a.gender = b.id + 82,let c.id = c.id,let c.id = MIN(c.id) * 75 return a.size,b.name,c.size",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,gender,age, 数据为('黄梅','famale',88), 以属性gender作为相等条件,帮我查询全部和处方Prescription_330有1度或2度关系的用户",
        "output": "with p as (select * from (VALUES('黄梅','famale',88)) as t(name,gender,age))MATCH (a:prescription WHERE a.gender = p.gender AND (a.name = 'Prescription_330')) -[e ]->{1,2}(b:user) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有源点和目标点都标记为'person'，并且它们之间的边被标记为'喜欢'的边。",
        "output": "match(a:person)-[e:likes]->(b:person) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询药品名称为枇杷糖浆，标签为medicine的点，返回它们的price和category。",
        "output": "match(a:medicine where a.name = '枇杷糖浆') return a.price, a.category",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部源点label为医生,目标点label为部门,label为处方的边",
        "output": "match(a:doctor)-[e:prescription]->(b:department) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被student selects数量大于113的course,记为relationCount,再查询这些course selects的student",
        "output": "match(a:course) let a.relationCount = AVG((a:course)<-[e:selects]-(b:student) => b.id) match(a where a.relationCount > 113)-[e2:selects]->(c:student) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找被账号转账数量大于198的账号,记为relationCount,再查询这些账号转账的公司",
        "output": "match(a:account) let a.relationCount = AVG((a:account)<-[e:transfer]-(b:account) => b.id) match(a where a.relationCount > 198)-[e2:transfer]->(c:company) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有公司的id减82的值",
        "output": "match(a:company) return a.id - 82",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和学生王建聪有选择关系的课程,再帮我查询以选择关系关联了王建聪的课程",
        "output": "match(a:student where a.name = '王建聪')-[e:selects]->(b:course),(a:student where a.name = '王建聪')<-[e2:selects]-(c:course)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部名为何国强的,价格大于3424.89的相关者,返回这些相关者的名字,和边的f0,目标点id,f1",
        "output": "match(a where a.name='何国强')-[e:relation]->(b where b.price > 3424.89) return b.name,e.f0, e.targetId, e.f1",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为Post_433的点拥有的全部标签,并对这些标签的价值进行求和",
        "output": "match(a where a.name='Post_433')-[e:has]->(b:tag) return SUM(b.value)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找129个与马宏和赵国强都存在关系的课程节点",
        "output": "match(a where a.name='马宏')-[e]->(b:course)<-[e2]-(c where c.name='赵国强') return b limit 129",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找以has关系关联了doctor徐红的department",
        "output": "match(a:doctor where a.name='徐红')<-[e:has]-(b:department) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出名为何伟和李强的,标签为person的点公共的friend节点的名单",
        "output": "match(a:person where a.name='何伟')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='李强') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据人数,面积,价值分组,计算人数乘13489除39327减69956的求和值",
        "output": "return SUM(a.peopleNumber * 13489 / 39327 - 69956) group by a.peopleNumber, a.area, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有源点peopleNumber小于等于657或name不等于Bilibili,且name不是阿里,目标点gender为famale,且标签为employee的边",
        "output": "match(a where (a.peopleNumber <= 657 or a.name <> 'Bilibili') and a.name <> '阿里')-[e:employee]->(b where b.gender = 'famale') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找源点stars不是667或lang不是go,且value大于等于244,边标签等于uses,且weight为空,weight小于126.68且targetId为空的边,返回这些边的weight除135.81的值",
        "output": "match(a where (a.stars <> 667 or a.lang <> 'go') and a.value >= 244)-[e:uses where (e.weight is null) and e.weight < 126.68 and (e.targetId is null)]->(b) return e.weight / 135.81",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender,salary分组,计算height乘183的值",
        "output": "return a.height * 183 group by a.gender, a.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(59,'周思思','male'),(38,'周科','male'),(91,'赵建国','male'),(86,'马国强','male')作为请求表数据,属性分别为id,name,gender, 以属性gender作为相等条件,请帮我找出名为张思思的person,以及与其有关的cinema,并返回张思思的salary和这些cinema的address",
        "output": "with p as (select * from (VALUES(59,'周思思','male'),(38,'周科','male'),(91,'赵建国','male'),(86,'马国强','male')) as t(id,name,gender))MATCH (a:person WHERE a.gender = p.gender AND (name = '张思思')) -[e ]-(b:cinema) RETURN a.salary, b.address ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与买家有关系的商品节点，价值小于374的，然后计算这些节点的价值加上112的和，以及所有卖家数量乘销量之和的平均值。",
        "output": "match(a:buyer)-[e]->(b:goods where b.value < 374) return b.value + 112, AVG(SUM(b.sellerNumber) * b.sellerNumber)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找全部名为李轩的,id为空且id为空的朋友,返回这些朋友的id,和边的目标点id,时间戳,源点id",
        "output": "match(a where a.name='李轩')-[e:friend]->(b where (b.id is null) and (b.id is null)) return b.id,e.targetId, e.timeStamp, e.srcId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为height,age,id, 数据为(190,40,51),(182,41,9),(191,12,27)的子查询作为输入表, 源点的age等于输入表age,返回从author张宏出发,经过label为author_knows_author的边,走2到5跳到达的author点",
        "output": "with p as (select * from (VALUES(190,40,51),(182,41,9),(191,12,27)) as t(height,age,id))MATCH (a:author WHERE a.age = p.age AND (a.name = '张宏')) -[e:author_knows_author ]->{2,5}(b:author) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找大学合作的公司, 令公司的人数的值等于合作公司的大学的名字的数量, 再查找公司属于的城市",
        "output": "match(a:university)-[e:cooperate]->(b:company) let b.peopleNumber = COUNT((b:company)<-[e2:cooperate]-(c:university) => c.name) match(b:company)-[e3:belong]->(d:city) return b.peopleNumber, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出黄建国和王伟之间存在共同喜欢的点。",
        "output": "match(a:person where a.name='黄建国')-[e:likes]->(b)<-[e2:likes]-(c:person where c.name='王伟') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出孙月的朋友的朋友的朋友",
        "output": "match(a:user where a.name='孙月')-[e:partner]->(b)-[e2:friend]->(c)-[e3:friend]->(d) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与账号BIN有转账关系且与杜月有拥有关系的账号，并返回它们。",
        "output": "match(a:account where a.name = 'BIN')-[e:transfer]->(b:account),(c:person where c.name = '杜月')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,height,age, 数据为('Amily',158,20),('马雪',165,23),('赵强',193,77), 以属性height作为相等条件,返回名为周思思和陈宏的,标签等于用户的点公共的伙伴节点的名单",
        "output": "with p as (select * from (VALUES('Amily',158,20),('马雪',165,23),('赵强',193,77)) as t(name,height,age))MATCH (a:user WHERE a.height = p.height AND (a.name = '周思思')) -[e:partner ]->(b) <-[e2:partner ]-(c:user WHERE c.name = '陈宏') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person徐梅之间有person_belong_company关系的公司",
        "output": "match(a:person where a.name='徐梅')-[e:person_belong_company]->(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找doctor creates的prescription, 令prescription的name的值等于createsprescription的doctor的gender的和, 再查找prescription contain的medicine",
        "output": "match(a:doctor)-[e:creates]->(b:prescription) let b.name = SUM((b:prescription)<-[e2:creates]-(c:doctor) => c.gender) match(b:prescription)-[e3:contain]->(d:medicine) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询撰写书呐喊的作家,和这些作家撰写的书",
        "output": "match(a:book where name = '呐喊')<-[e:write]-(b:author)-[e2:write]->(c:book) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被大学电子科技大学合作的公司",
        "output": "match(a:company)<-[e:cooperate]-(b:university where b.name='电子科技大学') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为三体的书,以及与其有关的编辑,并返回三体的id和这些编辑的薪资",
        "output": "match(a:book where name = '三体')-[e]-(b:publisher) return a.id, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出和buyer郑月有look关系的goods,再请帮我找出以consult关系关联了郑月的seller",
        "output": "match(a:buyer where a.name = '郑月')-[e:look]->(b:goods),(a:buyer where a.name = '郑月')<-[e2:consult]-(c:seller)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部周科的点回答的买家,然后请帮我找出周科被咨询的买家,一起返回",
        "output": "match(a where a.name = '周科')-[e:ask]->(b:buyer),(a where a.name = '周科')<-[e2:consult]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出label为标签的点,返回62个",
        "output": "match(a:tag) return a limit 62",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我按照身高从低到高排列，找出40个身高低于150的读者。",
        "output": "match(a:reader where a.height <> 150) return a order by a.id asc limit 40",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表613,833, 以属性id作为相等条件,请帮我找出所有和person点有喜欢关系的person节点,且边满足条件目标点id大于等于31,目标person节点年龄小于等于7",
        "output": "with p as (select * from (VALUES(613),(833)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_likes_person WHERE e.targetId >= 31 ]->(b:person WHERE b.age <= 7) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有与Tugraph存在has关系的issue,issue与repository存在belong关系的点,返回这些点的id",
        "output": "match(a where a.name = 'Tugraph')-[e:has]->(b:issue)-[e2:belong]->(c:repository) return c.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于认识,且满足条件目标点id在61到115之间的边",
        "output": "match(a)-[e:knows where (e.targetId BETWEEN 61 AND 115)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表504,467,332,299, 以属性id作为相等条件,请帮我查找源点标签为person,边标签为person_likes_person的边,返回这些边的srcId加60的最小值,和weight减weight的值",
        "output": "with p as (select * from (VALUES(504),(467),(332),(299)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_likes_person ]->(b) RETURN MIN(e.srcId + 60), e.weight - e.weight ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部和书少年闰土有关系的编辑或书或作家,返回这些点的名字,id,薪资",
        "output": "match(a:book where a.name='少年闰土')-[e]-(b:publisher | book | author) return b.name, b.id, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询全部buyer以gender,id分组的height, 根据height从大到小排序",
        "output": "match(a:buyer) return a.height group by a.gender, a.id order by a.height desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与美团存在employee关系的person,person与software存在commits关系的点,返回这些点的openSource",
        "output": "match(a where a.name = '美团')-[e:employee]->(b:person)-[e2:commits]->(c:software) return c.openSource",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出教师韩思思教的课程, 令教师的身高等于教师的id加64,令课程的课时等于课程的名字, 返回教师的年龄, 课程的名字",
        "output": "match(a:teacher where a.name='韩思思')-[e:teach]->(b:course) let a.height = a.id + 64,let b.courseHour = b.name return a.age,b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出所有和城市点有属于关系的国家节点,且边满足条件目标点id大于等于181,目标国家节点满足条件名字等于日本",
        "output": "match(a:city)-[e:belong where e.targetId >= 181]->(b:country where b.name = '日本') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出136个名为皮肤科的点拥有的标签等于医生的节点,且节点id大于81或id不等于85",
        "output": "match(a where a.name='皮肤科')-[e:has]->(b:doctor where b.id > 81 or b.id <> 85) return b limit 136",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表176, 源点的id等于输入表id,查找和教师有关联的课程节点,并根据其id,名字,价值分组,返回id,名字,价值,以及价值除12的最小值",
        "output": "with p as (select * from (VALUES(176)) as t(id)) MATCH (a:teacher WHERE a.id = p.id) -[e:teacher_teach_course ]-(b:course) RETURN b.id, b.name, b.value, MIN(b.value / 12) GROUP BY b.id, b.name, b.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以17作为请求点id, 以属性id作为相等条件,帮我查询名为徐科和徐轩的,标签为用户的点公共的朋友节点的名单",
        "output": "with p as (select * from (VALUES(17)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '徐科')) -[e:friend ]->(b) <-[e2:friend ]-(c:user WHERE c.name = '徐轩') RETURN b.name ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(529,2,80),(270,4,21),(535,1,17),(616,1,6)作为请求表数据,属性分别为value,level,id, 以属性level作为相等条件,返回全部course以courseHour,credit分组的value, 根据value从小到大排序",
        "output": "with p as (select * from (VALUES(529,2,80),(270,4,21),(535,1,17),(616,1,6)) as t(value,level,id))MATCH (a:course WHERE a.level = p.level) RETURN a.value GROUP BY a.courseHour, a.credit ORDER BY a.value ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为物理学院的课程或大学或学生,以及与其有关的部门,并返回物理学院的名字和这些部门的价值",
        "output": "match(a:course | university | student where name = '物理学院')-[e]-(b:department) return a.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询卖家何轩 回答的买家,返回买家 取消的订单的id减52除434的平均值",
        "output": "match(a:seller where name = '何轩')-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders) return AVG((c.id - 52) / 434)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,gender,name分组,计算height加height的值",
        "output": "return a.height + a.height group by a.id, a.gender, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以100,81,39作为请求点id, 以属性id作为相等条件,查找公司以名字,id,人数分组的规格, 根据规格从小到大排序",
        "output": "with p as (select * from (VALUES(100),(81),(39)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a.scale GROUP BY a.name, a.id, a.peopleNumber ORDER BY a.scale ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以383,833,53,776,488作为请求点id, 以属性id作为相等条件,请帮我查找与company阿里和华为都存在company_apply_loan关系的点",
        "output": "with p as (select * from (VALUES(383),(833),(53),(776),(488)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) -[e:company_apply_loan ]->(b) <-[e2:company_apply_loan ]-(c:company WHERE c.name = '华为') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表160,347,806,534, 以属性id作为相等条件,帮我查询前182个标签等于company_cooperate_university的边",
        "output": "with p as (select * from (VALUES(160),(347),(806),(534)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:company_cooperate_university ]->(b) RETURN e LIMIT 182",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与重庆大学和腾讯公司都有关系的大学，并返回它们的名字。",
        "output": "match(a:university where a.name='重庆大学')-[e]->(b:university)<-[e2]-(c:company where c.name='腾讯') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以337,230,376,593作为请求点id, 以属性id作为相等条件,查询名为中国诗词论坛的点contain的全部person,并对这些点的age进行求和",
        "output": "with p as (select * from (VALUES(337),(230),(376),(593)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '中国诗词论坛')) -[e:forum_contain_person ]->(b:person) RETURN SUM(b.age) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为name,value,id, 数据为('重庆大学',885,93),('清华大学',218,27),('复旦大学',156,7)的子查询作为输入表, 以属性id作为相等条件,帮我查询全部名为北京大学的点cooperate的company",
        "output": "with p as (select * from (VALUES('重庆大学',885,93),('清华大学',218,27),('复旦大学',156,7)) as t(name,value,id))MATCH (a WHERE a.id = p.id AND (a.name = '北京大学')) -[e:university_cooperate_company ]->(b:company) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回前93个标签等于belong的边",
        "output": "match(a)-[e:belong]->(b) return e limit 93",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请找出与贷款defaultName有关联的账户，以及与周强有关联的账户，并将两者都返回。",
        "output": "match(a:loan where a.name = 'defaultName')-[e:deposit]->(b:account),(c:person where c.name = '周强')-[e2:own]->(d:account) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出56个买家李若涵和陈国强,共同的伙伴",
        "output": "match(a:buyer where a.name='李若涵')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='陈国强') return b limit 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部与course程序设计有关系的department的name",
        "output": "match(a:course where a.name='程序设计')-[e]-(b:department) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id对22取余对id取余的值",
        "output": "a.id % 22 % a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出invest person赵宏invest的company,的person",
        "output": "match(a:person where name = '赵宏')-[e:invest]->(b:company)<-[e2:invest]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有与公司Bilibili有关系的国家的名字",
        "output": "match(a:company where a.name='Bilibili')-[e]-(b:country) return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与university重庆大学存在cooperate关系,且与city杭州存在belong关系的company节点，返回这些company的value,name,及university重庆大学的level,及city杭州的peopleNumber",
        "output": "match(a:university where a.name='重庆大学')-[e:cooperate]->(b:company)<-[e2:belong]-(c:city where c.name='杭州') return a.level,b.value, b.name,c.peopleNumber",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,age,salary, 数据为('徐建聪',35,4125), 源点的age等于输入表age,查找和person何月有关的person,再查找和何月person_parent_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES('徐建聪',35,4125)) as t(name,age,salary))MATCH (a:person WHERE a.age = p.age AND (a.name = '何月')) -[e ]-(b:person) , (a:person) -[e2:person_parent_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找与 person 节点关联的 person 节点，并按其 id、name 分组，返回 id、name。",
        "output": "match(a:person)-[e:colleague]-(b:person) return b.id, b.name group by b.id, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为gender,age,height, 数据为('famale',32,177),('male',1,174),('famale',51,166)的子查询作为输入表, 以属性gender作为相等条件,请帮我查找user以gender分组的age, 根据age从大到小排序",
        "output": "with p as (select * from (VALUES('famale',32,177),('male',1,174),('famale',51,166)) as t(gender,age,height))MATCH (a:user WHERE a.gender = p.gender) RETURN a.age GROUP BY a.gender ORDER BY a.age DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以'XU'作为输入调用SSSP函数,返回id, distance",
        "output": "Call SSSP('XU') yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找course操作系统belong的department,以及has这些department的university",
        "output": "match(a:course where name = '操作系统')-[e:belong]->(b:department)<-[e2:has]-(c:university) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从forum天涯论坛出发,经过类型是contain的边,走2度到达的user点",
        "output": "match(a:forum where a.name='天涯论坛')-[e:contain]->{2,2}(b:user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,name,age, 数据为(159,'陈月',94),(172,'韩建国',91),(156,'王若涵',95), 以属性name作为相等条件,查找用户徐轩发布的帖子,被其他用户喜欢的数量",
        "output": "with p as (select * from (VALUES(159,'陈月',94),(172,'韩建国',91),(156,'王若涵',95)) as t(height,name,age))MATCH (a:user WHERE a.name = p.name AND (a.name = '徐轩')) -[e:user_publish_post ]->(b:post) <-[e2:user_likes_post ]-(c:user) RETURN COUNT(c) ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找issue belong的repository,返回其源点的weight乘753的值,以及目标点的stars加865的平均值",
        "output": "match(a:issue)-[e:belong]->(b:repository) return a.weight * 753, AVG(b.stars + 865)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回5个作家王思琪和马科,共同的朋友",
        "output": "match(a:author where a.name='王思琪')-[e:friend]->(b)<-[e2:friend]-(c:author where c.name='马科') return b limit 5",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出满足条件创建时间不等于2014年11月03日且创建时间是1996年06月05日,或字数为997的节点",
        "output": "match(a where (a.createTime <> '2014-11-03' and a.createTime = '1996-06-05') or a.wordCount = 997) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出52个与标签'用户'有喜欢关系的帖子，并找出与这些帖子有拥有关系的标签。",
        "output": "match(a:user)-[e:likes]->(b:post)-[e2:has]->(c:tag) return c limit 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询杜强和韩雪共同的朋友，共有159个。",
        "output": "match(a:person where a.name='杜强')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='韩雪') return b limit 159",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查找华中科技大学和杜强拥有的部门节点，并返回这些部门的大小、价值和华中科技大学的价值，以及杜强的性别。",
        "output": "match(a:university where a.name='华中科技大学')-[e:has]->(b:department)<-[e2:has]-(c:teacher where c.name='杜强') return a.value,b.size, b.value,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出与ID为66的人有关的人，再找出与这些人有关的人的父母。",
        "output": "match(a:person where id = '66')-[e]-(b:person)-[e2:colleague]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表910,384, 源点的id等于输入表id,请帮我查找person的三角的环,边类型为person_friend_person, 并返回这些点的id",
        "output": "with p as (select * from (VALUES(910),(384)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_friend_person ]->(b) -[e2:person_friend_person ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找到与'person'相关的公司节点，按名称、规格和ID进行分组，并返回它们的名字、规格和ID。",
        "output": "match(a:person)-[e:belong]-(b:company) return b.name, b.scale, b.id group by b.name, b.scale, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和company阿里有2跳或3跳关系的university",
        "output": "match(a:company where a.name='阿里')-[e]->{2,3}(b:university) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和书计算机网络有关的作家,再找出和计算机网络引用的其他书,返回它们",
        "output": "match(a:book where a.name = '计算机网络')-[e]-(b:author), (a:book)-[e2:refers]->(c:book) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 查询与郑宏和黄建聪有关联的150个人。",
        "output": "match(a where a.name='郑宏')-[e]->(b:person)<-[e2]-(c where c.name='黄建聪') return b limit 150",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询35个和label为company的点有employee关系的person,并且和这些person有buy关系的software",
        "output": "match(a:company)-[e:employee]->(b:person)-[e2:buy]->(c:software) return c limit 35",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找找少年足球电影标签。",
        "output": "match(a:tag)<-[e:has]-(b:film where b.name='少年足球') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和department有关联的doctor节点,并根据其name,gender分组,返回name,gender,以及salary对3299取余的值",
        "output": "match(a:department)-[e:has]-(b:doctor) return b.name, b.gender, b.salary % 3299 group by b.name, b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出合并请求PR-68 属于的仓库,返回仓库 拥有的用户的薪资除7461的值",
        "output": "match(a:pullRequest where name = 'PR-68')-[e:belong]->(b:repository)-[e2:has]->(c:user) return c.salary / 7461",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表25, 源点的id等于输入表id,返回以has关系关联了tag动作的post",
        "output": "with p as (select * from (VALUES(25)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND (a.name = '动作')) <-[e:post_has_tag ]-(b:post) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以660,39,28作为请求点id, 以属性id作为相等条件,给出全部和person张雪有2到4度关系的person",
        "output": "with p as (select * from (VALUES(660),(39),(28)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '张雪')) -[e ]->{2,4}(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找满足条件变更文件数在135到946之间或变更文件数大于等于10或变更文件数大于等于395的节点",
        "output": "match(a where (a.changeFileNumber BETWEEN 135 AND 946) or a.changeFileNumber >= 10 or a.changeFileNumber >= 395) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找company微软的全部relation,的targetId的求和值减56的值",
        "output": "match(a:company where a.name= '微软')-[e:relation]->(b) return SUM(e.targetId) - 56",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询被部门土木学院拥有的学生,和土木学院拥有的教师",
        "output": "match(a:student)<-[e:has]-(b:department where name = '土木学院')-[e2:has]->(c:teacher) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回person王思琪commits的software,被其他software uses的数量",
        "output": "match(a:person where a.name='王思琪')-[e:commits]->(b:software)<-[e2:uses]-(c:software) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,scale,value, 数据为(33,'small',460)的子查询作为输入表, 以属性scale作为相等条件,请帮我找出university cooperate的company,返回其源点的value的平均值对value取余的值,以及目标点的id除33的值",
        "output": "with p as (select * from (VALUES(33,'small',460)) as t(id,scale,value))MATCH (a:university WHERE a.scale = p.scale) -[e:university_cooperate_company ]->(b:company) RETURN AVG(a.value) % a.value, b.id / 33 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为Order_419的seller或goods,以及与其有关的buyer,并返回Order_419的value和这些buyer的salary",
        "output": "match(a:seller | goods where name = 'Order_419')-[e]-(b:buyer) return a.value, b.salary",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被作家赵月撰写的书,和赵月认识的作家",
        "output": "match(a:book)<-[e:write]-(b:author where name = '赵月')-[e2:knows]->(c:author) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询所有杜伟的点relates的person,然后帮我查询杜伟被knows的person,一起返回",
        "output": "match(a where a.name = '杜伟')-[e:relates]->(b:person),(a where a.name = '杜伟')<-[e2:knows]-(c:person) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出小于16的与person有关系的用户节点，并返回这些节点薪资除以5699的值，以及salary的求和值对6347取余的值。",
        "output": "match(a:person)-[e]->(b:user where b.id < 16) return b.salary / 5699, SUM(b.salary) % 6347",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有与person有关联的account节点，这些节点的lastLoginTime是1997年09月09日。然后返回这些节点的id和id的总和，以及value乘以52再减去0的结果。",
        "output": "match(a:person)-[e]->(b:account where b.lastLoginTime = '1997-09-09') return b.id + b.id, b.value * 52 - 0",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找name不等于ISSUE-449或weight不等于122的issue belong的repository的名称,以及这些repository has的issue的名称",
        "output": "match(a:issue where a.name <> 'ISSUE-449' or a.weight <> 122)-[e:belong]->(b:repository)-[e2:has]->(c:issue) return b.name as b_name, c.name as c_name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从南京大学出发，通过合作边，步长在1到4之间到达的公司节点",
        "output": "match(a:university where a.name='南京大学')-[e:cooperate]->{1,4}(b:company) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找名叫何强的人。",
        "output": "match(a:person where a.name = '何强') return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有公司的peopleNumber的个数乘535的值",
        "output": "match(a:company) return COUNT(a.peopleNumber) * 535",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询前22个创建时间不等于1996年10月20日或创建时间为2008年08月17日或语言是Japanese的帖子",
        "output": "match(a:post where a.createTime <> '1996-10-20' or a.createTime = '2008-08-17' or a.lang = 'Japanese') return a limit 22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询amount大于7116.57,id等于1904.45的节点",
        "output": "match(a where a.amount > 7116.57 and a.id = 1904.45) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出从作家张建聪出发,经过标签为撰写的边,走2度到达的书点",
        "output": "match(a:author where a.name='张建聪')-[e:write]->{2,2}(b:book) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出和person孙梅有person_creates_comment关系的comment,以及和person孙建聪有person_likes_comment关系的comment,将它们都返回",
        "output": "match(a:person where a.name = '孙梅')-[e:person_creates_comment]->(b:comment),(c:person where c.name = '孙建聪')-[e2:person_likes_comment]->(d:comment)return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出67个名为高等数学的点属于的类型为部门的节点,且其名字不等于文学院",
        "output": "match(a where a.name='高等数学')-[e:belong]->(b:department where b.name <> '文学院') return b limit 67",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出124个和类型是person的点有认识关系的person,并且和这些person有属于关系的公司",
        "output": "match(a:person)-[e:knows]->(b:person)-[e2:belong]->(c:company) return c limit 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询从person在何月出发，通过类型为pay的边，走了2度或3度到达的其他person点",
        "output": "match(a:person where a.name='何月')-[e:pay]->{2,3}(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据weight,name,createTime分组,计算id乘89的值",
        "output": "return a.id * 89 group by a.weight, a.name, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签等于拥有,以及满足条件weight的最大值加182.35乘目标点id大于等于166.97且源点id在27到191之间的边",
        "output": "match(a)-[e:has where (MAX(e.weight) + 182.35) * e.targetId >= 166.97 and (e.srcId BETWEEN 27 AND 191)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));给出与作家黄建聪和周月都存在author_knows_author关系的点",
        "output": "match(a:author where a.name='黄建聪')-[e:author_knows_author]->(b)<-[e2:author_knows_author]-(c:author where c.name='周月') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回id为186的person有关的评论的朋友, 再返回和评论有关系的相关者",
        "output": "match(a:person where id = 186)-[e]-(b:comment)-[e2:friend]->(c), (b:comment)-[e3:relation]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部大学的相关者,或其相关者的相关者",
        "output": "match(a:university)-[e:relation]->{1,2}(b) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点label为医生,边label为诊断的边,返回这些边的源点id减源点id的值,和目标点id减8的值",
        "output": "match(a:doctor)-[e:diagnose]->(b) return e.srcId - e.srcId, e.targetId - 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请找出defaultName1的所有存款账户和被还款账户，然后一起告诉我。",
        "output": "match(a where a.name = 'defaultName1')-[e:deposit]->(b:account),(a where a.name = 'defaultName1')<-[e2:repay]-(c:account) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询名为日本的大学,以及与其有关的大学,并返回日本的人数和这些大学的id",
        "output": "match(a:university where name = '日本')-[e]-(b:university) return a.peopleNumber, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为ISSUE-419的节点属于的仓库或用户",
        "output": "match(a where a.name='ISSUE-419')-[e:belong]->(b:repository | user) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,创建时间分组,计算id的最大值加97的值",
        "output": "return MAX(a.id) + 97 group by a.id, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出拥有部门物理学院拥有的教师,的部门",
        "output": "match(a:department where name = '物理学院')-[e:has]->(b:teacher)<-[e2:has]-(c:department) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出所有id为128的company关联的software,和以creates关系关联了这些software的其他company",
        "output": "match(a:company where a.id = 128)-[e]-(b:software)<-[e2:creates]-(c:company) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出以relates关系关联了person周强的person",
        "output": "match(a:person where a.name='周强')<-[e:relates]-(b:person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出person张宏likes的person, 令person的age等于person的name,令person的gender等于person的id的和对58取余,令person(a)的gender等于person(b)的gender, 返回person(a)的id, person(b)的gender",
        "output": "match(a:person where a.name='张宏')-[e:likes]->(b:person) let b.age = b.name,let a.gender = SUM(a.id) % 58,let a.gender = b.gender return a.id,b.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "计算所有person的age减23的值",
        "output": "match(a:person) return a.age - 23",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询id为84的公司申请的贷款, 并将贷款有关的账号的价值的最小值赋值给贷款的权重, 接着查询贷款的权重小于84的贷款存款的账号",
        "output": "match(a:company where a.id = 84)-[e:apply]->(b:loan) let b.weight = MIN((b:loan)-[e2]-(c:account) => c.value) match(b:loan where b.weight < 84)-[e3:deposit]->(d:account) return b.weight, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与用户Alice有关系的帖子的价值",
        "output": "match(a:user where a.name='Alice')-[e]-(b:post) return b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取所有与department有关联的doctor，以及这些doctor通过has关系关联的其他department。",
        "output": "match(a:department where a.id = '156')-[e]-(b:doctor)<-[e2:has]-(c:department) return b,c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与book呐喊有关系的publisher, 返回和这些publisher有关联的book的,wordCount除714的平均值",
        "output": "match(a:book where a.name= '呐喊')-[e]-(b:publisher)-[e2]-(c:book) return AVG(c.wordCount / 714)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与person王红和马宏都存在认识关系的点",
        "output": "match(a:person where a.name='王红')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='马宏') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询与person马月存在认识关系,且与person周建聪存在认识关系的person节点，返回这些person的性别,薪资,id,及person马月的性别,及person周建聪的性别",
        "output": "match(a:person where a.name='马月')-[e:knows]->(b:person)<-[e2:knows]-(c:person where c.name='周建聪') return a.gender,b.gender, b.salary, b.id,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出公司阿里 申请的贷款,返回贷款 存款的账号的价值减668乘77的最小值 ",
        "output": "match(a:company where name = '阿里')-[e:company_apply_loan]->(b:loan)-[e2:loan_deposit_account]->(c:account) return MIN((c.value - 668) * 77)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回满足条件id为空的节点",
        "output": "match(a where (a.id is null)) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找从issue ISSUE-497出发,经过label为belong的边,走3度到达的repository点",
        "output": "match(a:issue where a.name='ISSUE-497')-[e:belong]->{3,3}(b:repository) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回所有和公司点有属于关系的城市节点,且边满足条件f0大于等于986,目标城市节点满足条件面积小于83150",
        "output": "match(a:company)-[e:belong where e.f0 >= 986]->(b:city where b.area < 83150) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找名为南京大学的大学,以及与其有关的部门,并返回南京大学的等级和这些部门的价值",
        "output": "match(a:university where name = '南京大学')-[e]-(b:department) return a.level, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id加8的值",
        "output": "a.id + 8",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找所有学生源点标签为student,边标签为selects的边，返回这些边targetId对101取余的和，以及weight除以115.22的值。",
        "output": "match(a:student)-[e:selects]->(b) return SUM(e.targetId % 101), e.weight / 115.22",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询Order_108的所有包含的商品，以及创建这个订单的买家，并将它们一起返回。",
        "output": "match(a where a.name = 'Order_108')-[e:contain]->(b:goods),(a where a.name = 'Order_108')<-[e2:creates]-(c:buyer) return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回合并请求的三角的环,边类型为属于, 并返回这些点的id",
        "output": "match(a:pullRequest)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有和部门体育学院之间有拥有关系的教师",
        "output": "match(a:department where a.name='体育学院')-[e:has]->(b:teacher) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有类型是教师的点",
        "output": "match(a:teacher) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找帖子Post_373拥有的标签, 令标签的名字等于标签的价值减91,令帖子的名字等于标签的id对77取余, 返回帖子的字数, 标签的价值",
        "output": "match(a:post where a.name='Post_373')-[e:has]->(b:tag) let b.name = b.value - 91,let a.name = b.id % 77 return a.wordCount,b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和名为Prescription_334的prescription有relation关系,或有relation的relation关系的medicine",
        "output": "match(a:prescription where n.name=Prescription_334)-[e:relation]->{1,2}(b:medicine) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询被论坛包含数量大于124的用户,记为relationCount,再查询这些用户包含的标签",
        "output": "match(a:user) let a.relationCount = COUNT((a:user)<-[e:contain]-(b:forum) => b.id) match(a where a.relationCount > 124)-[e2:contain]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询label为department_has_student,并且weight在169.14到188.52之间的边",
        "output": "match(a)-[e:department_has_student where (e.weight BETWEEN 169.14 AND 188.52)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减97的值",
        "output": "a.id - 97",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出Comment_189和Comment_335这两个评论所共有的partner信息。",
        "output": "match(a:comment where a.name='Comment_189')-[e:partner]->(b)<-[e2:partner]-(c:comment where c.name='Comment_335') return b limit 96",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id,名字分组,计算价值对615取余的最小值",
        "output": "return MIN(a.value % 615) group by a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "id减13的数量",
        "output": "COUNT(a.id - 13)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出person李红 likes的person,返回person knows的person的height加196的值",
        "output": "match(a:person where name = '李红')-[e:likes]->(b:person)-[e2:knows]->(c:person) return c.height + 196",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为category,id,value, 数据为('历史',97,341), 以属性value作为相等条件,返回以拥有关系关联了标签科幻的电影",
        "output": "with p as (select * from (VALUES('历史',97,341)) as t(category,id,value))MATCH (a:tag WHERE a.value = p.value AND (a.name = '科幻')) <-[e:film_has_tag ]-(b:film) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表277, 源点的id等于输入表id,查找和处方Prescription_327有关的处方,称为X,再查找和这个X有关联的其他处方,以及和X有关联的药品",
        "output": "with p as (select * from (VALUES(277)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_327')) -[e ]-(b:prescription) , (b:prescription) -[e2 ]-(c:prescription) , (b:prescription) -[e3 ]-(d:medicine) RETURN a, b, c, d ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为height,name,id, 数据为(154,'张雪',4),(191,'王月',68),(175,'张若涵',11),(155,'孙月',21), 源点的name等于输入表name,给出类型为forum_contain_person,以及满足条件目标点id减135的平均值大于40且f1等于true的边",
        "output": "with p as (select * from (VALUES(154,'张雪',4),(191,'王月',68),(175,'张若涵',11),(155,'孙月',21)) as t(height,name,id))MATCH (a WHERE a.name = p.name) -[e:forum_contain_person WHERE AVG(e.targetId - 135) > 40 AND e.f1 = TRUE ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请问能否帮我找出同时拥有'呼吸科'和'耳鼻喉科'标签，且职业为'医生'的节点？",
        "output": "match(a where a.name = '呼吸科')-[e:has]->(b:doctor)<-[e2:has]-(c where c.name = '耳鼻喉科') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出person孙梅的同事,的目标点id加目标点id的求和值",
        "output": "match(a:person where a.name= '孙梅')-[e:colleague]->(b) return SUM(e.targetId + e.targetId)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出所有医生到患者，类型为诊断的边。",
        "output": "match(a:doctor)-[e:diagnose]->(b:patient) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出34个与马科和黄宏都存在关系的医学节点。",
        "output": "match(a where a.name='马科')-[e]->(b:medicine)<-[e2]-(c where c.name='黄宏') return b limit 34",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出城市标签的点，按人数从多到少排序。",
        "output": "match(a:city) return a order by a.peopleNumber desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询所有名为韩建国的人的性别和身高",
        "output": "match(a:person where a.name = '韩建国') return a.gender, a.height",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出买家杜月查看的商品,被其他卖家拥有的数量",
        "output": "match(a:buyer where a.name='杜月')-[e:buyer_look_goods]->(b:goods)<-[e2:seller_has_goods]-(c:seller) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和student徐月有selects关系的course,再找出以selects关系关联了徐月的course",
        "output": "match(a:student where a.name = '徐月')-[e:selects]->(b:course),(a:student where a.name = '徐月')<-[e2:selects]-(c:course)return a, b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回与medicine枇杷糖浆有关系的doctor的id",
        "output": "match(a:medicine where a.name='枇杷糖浆')-[e]-(b:doctor) return b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出label为撰写,以及满足条件权重在143.78到169.11之间的边",
        "output": "match(a)-[e:write where (e.weight BETWEEN 143.78 AND 169.11)]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 徐雪和赵若涵都接受了什么治疗？",
        "output": "match(a:patient where a.name='徐雪')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='赵若涵') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询71个与Redis和Zookeeper都存在关系的软件或公司节点",
        "output": "match(a where a.name='Redis')-[e]->(b:software | company)<-[e2]-(c where c.name='Zookeeper') return b limit 71",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据lang,wordCount,createTime分组,计算wordCount乘908的和",
        "output": "return SUM(a.wordCount * 908) group by a.lang, a.wordCount, a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出医生赵思琪属于的部门,以及属于这些部门的医生",
        "output": "match(a:doctor where name = '赵思琪')-[e:belong]->(b:department)<-[e2:belong]-(c:doctor) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我找出黄思琪和黄宏的共同联系人。",
        "output": "match(a:user where a.name='黄思琪')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='黄宏') return b limit 178",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找id为127的点的name,value",
        "output": "match(a where a.id = 127) return a.name, a.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以158作为请求点id, 以属性id作为相等条件,返回121个名为四川大学的点拥有的标签为部门的节点,且其大小小于59或名字不等于文学院",
        "output": "with p as (select * from (VALUES(158)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '四川大学')) -[e:university_has_department ]->(b:department WHERE b.size < 59 OR b.name <> '文学院') RETURN b LIMIT 121",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为id,gender,height, 数据为(67,'famale',176),(14,'male',157)的子查询作为输入表, 以属性height作为相等条件,请帮我找出名为张若涵的点relates的person",
        "output": "with p as (select * from (VALUES(67,'famale',176),(14,'male',157)) as t(id,gender,height))MATCH (a WHERE a.height = p.height AND (a.name = '张若涵')) -[e:relates ]->(b:person) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据height,id,name分组,计算height除166对152取余减salary的值",
        "output": "return a.height / 166 % 152 - a.salary group by a.height, a.id, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和公司美团有关的person,称为X,再帮我查询和这个X有关联的其他软件,以及和X有关联的公司",
        "output": "match(a:company where a.name = '美团')-[e]-(b:person), (b:person)-[e2]-(c:software),(b:person)-[e3]-(d:company) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出全部和person吴月之间有购买关系的软件",
        "output": "match(a:person where a.name='吴月')-[e:buy]->(b:software) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据创建时间分组,计算id对91取余的平均值",
        "output": "return AVG(a.id % 91) group by a.createTime",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(11246,7444,'杭州'),(90755,8967,'武汉')作为请求表数据,属性分别为area,peopleNumber,name, 源点的peopleNumber等于输入表peopleNumber,查找label为city_contain_university,且满足条件f0的最小值乘731是130.80,weight为空的边",
        "output": "with p as (select * from (VALUES(11246,7444,'杭州'),(90755,8967,'武汉')) as t(area,peopleNumber,name))MATCH (a WHERE a.peopleNumber = p.peopleNumber) -[e:city_contain_university WHERE MIN(e.f0) * 731 = 130.80 AND e.weight IS NULL ]->(b) RETURN e ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为value,lastLoginTime,isBlock, 数据为(814,2030-07-08,false)的子查询作为输入表, 以属性lastLoginTime作为相等条件,查找与person张红有person_invest_company关系的3度的环",
        "output": "with p as (select * from (VALUES(814,2030-07-08,false)) as t(value,lastLoginTime,isBlock))MATCH (a:person WHERE a.lastLoginTime = p.lastLoginTime AND (name = '张红')) -[e:person_invest_company ]->{2,2}(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回36个公司Bilibili和美团,共同的朋友",
        "output": "match(a:company where a.name='Bilibili')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='美团') return b limit 36",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找前7个满足条件年龄为空或名字为何建国的用户",
        "output": "match(a:user where (a.age is null) or a.name = '何建国') return a limit 7",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找与名为马梅和吴轩的点共同knows的,类型为person的节点",
        "output": "match(a where a.name = '马梅')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '吴轩') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取id为161的人的恋人，以及与该人相关的家人信息。",
        "output": "match(a:person where id = '161')-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:family]->(d) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和书点有关联关系的书节点,且边满足条件源点id小于9,目标书节点字数不等于65",
        "output": "match(a:book)-[e:relates where e.srcId < 9]->(b:book where b.wordCount <> 65) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 找出名为中国军事论坛和中国诗词论坛的公共朋友节点。",
        "output": "match(a:forum where a.name='中国军事论坛')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='中国诗词论坛') return b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出所有名为微软的节点创造的软件或person",
        "output": "match(a where a.name='微软')-[e:creates]->(b:software | person) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和person有关联的评论节点,并根据其创建时间,id分组,返回创建时间,id,以及id对id取余除443加368的值",
        "output": "match(a:person)-[e:likes]-(b:comment) return b.createTime, b.id, b.id % b.id / 443 + 368 group by b.createTime, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询likes person Jimmy knows的person,的person",
        "output": "match(a:person where name = 'Jimmy')-[e:knows]->(b:person)<-[e2:likes]-(c:person) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为35的course belong的department, 并将department有关的student的age的最小值赋值给department的name, 接着查询department的name小于35的department has的student",
        "output": "match(a:course where a.id = 35)-[e:belong]->(b:department) let b.name = MIN((b:department)-[e2]-(c:student) => c.age) match(b:department where b.name < 35)-[e3:has]->(d:student) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询film我不是药神的标签为relation的边,并根据srcId从大到小排列,返回188个",
        "output": "match(a:film where a.name = '我不是药神')-[e:relation]->(b) return b order by e.srcId desc limit 188",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找部门眼科拥有的医生节点属于的部门",
        "output": "match(a:department where a.name = '眼科')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出全部源点满足条件名字小于11且创建时间为2031年03月13日,目标点满足条件类别不是发烧药,且类型是包含的边",
        "output": "match(a where a.name < 11 and a.createTime = '2031-03-13')-[e:contain]->(b where b.category <> '发烧药') return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部病人以薪资,性别分组的性别, 根据性别从大到小排序",
        "output": "match(a:patient) return a.gender group by a.salary, a.gender order by a.gender desc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出repository Kafka has的user节点creates的issue",
        "output": "match(a:repository where a.name = 'Kafka')-[e:has]->(b:user)-[e2:creates]->(c:issue) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询person陈月观看的电影,被其他评论属于的数量",
        "output": "match(a:person where a.name='陈月')-[e:watch]->(b:film)<-[e2:belong]-(c:comment) return COUNT(c)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与北京大学合作的公司的城市ID、区域和价值，这些公司属于哪个城市。",
        "output": "match(a:university where name = '北京大学')-[e:cooperate]->(b:company)-[e2:belong]->(c:city) return c.id, c.area, c.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为name,gender,age, 数据为('马思思','male',64),('张科','male',62), 源点的name等于输入表name,返回与医生张强有关,且与药品阿莫新林有关系的处方节点",
        "output": "with p as (select * from (VALUES('马思思','male',64),('张科','male',62)) as t(name,gender,age))MATCH (a:doctor WHERE a.name = p.name AND (a.name = '张强')) -[e:doctor_creates_prescription ]-(b:prescription) -[e2:prescription_contain_medicine ]-(c:medicine WHERE c.name = '阿莫新林') RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据address,name分组,计算weight的求和值乘660的值",
        "output": "return SUM(a.weight) * 660 group by a.address, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表472,340, 以属性id作为相等条件,请帮我找出52个买家徐轩和陈梅,共同的朋友",
        "output": "with p as (select * from (VALUES(472),(340)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '徐轩')) -[e:friend ]->(b) <-[e2:friend ]-(c:buyer WHERE c.name = '陈梅') RETURN b LIMIT 52",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与post相关的tag节点，按照它们的id、name和value进行分组，并返回这些信息。",
        "output": "match(a:post)-[e:has]-(b:tag) return b.id, b.name, b.value group by b.id, b.name, b.value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出和person有关联的电影节点,并根据其类别,名字分组,返回类别,名字,以及id乘id的求和值",
        "output": "match(a:person)-[e:watch]-(b:film) return b.category, b.name, SUM(b.id * b.id) group by b.category, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以(89,'Japanese','Post_160'),(16,'Japanese','Post_181')作为请求表数据,属性分别为id,lang,name, 源点的name等于输入表name,帮我查询前124个类型是post_has_tag的边",
        "output": "with p as (select * from (VALUES(89,'Japanese','Post_160'),(16,'Japanese','Post_181')) as t(id,lang,name))MATCH (a WHERE a.name = p.name) -[e:post_has_tag ]->(b) RETURN e LIMIT 124",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出全部源点标签为部门,目标点标签为学生,标签为教师或部门或课程的边",
        "output": "match(a:department)-[e:teacher | department | course]->(b:student) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询全部名为我不是药神的节点拥有的评论或标签",
        "output": "match(a where a.name='我不是药神')-[e:has]->(b:comment | tag) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询源点名字不是王思琪或年龄大于等于49或年龄在19到69之间,边类型为接受,且f1不是false且f0对724取余的求和值大于等于133.52的边,返回这些边的源点id除73的值",
        "output": "match(a where a.name <> '王思琪' or a.age >= 49 or (a.age BETWEEN 19 AND 69))-[e:accept where e.f1 <> false and SUM(e.f0 % 724) >= 133.52]->(b) return e.srcId / 73",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出author孙思思出发，通过knows类型的边，走了1到4步到达的其他author节点",
        "output": "match(a:author where a.name='孙思思')-[e:knows]->{1,4}(b:author) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询包含用户黄国强的论坛,和这些论坛包含的帖子",
        "output": "match(a:user where name = '黄国强')<-[e:contain]-(b:forum)-[e2:contain]->(c:post) return b, c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询和城市相关的公司节点，并按规格分组返回。",
        "output": "match(a:city)-[e:contain]-(b:company) return b.scale group by b.scale",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部和买家杜伟之间有取消关系的订单",
        "output": "match(a:buyer where a.name='杜伟')-[e:cancel]->(b:orders) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找和作家有关联的书节点,并根据其id,创建时间,价格分组,返回id,创建时间,价格,以及id减33的个数",
        "output": "match(a:author)-[e:write]-(b:book) return b.id, b.createTime, b.price, COUNT(b.id - 33) group by b.id, b.createTime, b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出买家郑思思创造的订单, 令买家的名字等于买家的薪资加薪资的最小值,令买家的id等于订单的名字的数量, 返回买家的名字, 订单的id",
        "output": "match(a:buyer where a.name='郑思思')-[e:creates]->(b:orders) let a.name = MIN(a.salary + a.salary),let a.id = COUNT(b.name) return a.name,b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出与作家陈红存在认识关系,且与作家杜红存在认识关系的作家节点，返回这些作家的id,身高,薪资,及作家陈红的id,及作家杜红的性别",
        "output": "match(a:author where a.name='陈红')-[e:knows]->(b:author)<-[e2:knows]-(c:author where c.name='杜红') return a.id,b.id, b.height, b.salary,c.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询id为124的person认识的person, 并将person有关的公司的价值的和赋值给person的名字, 接着查询person的名字小于124的person认识的person",
        "output": "match(a:person where a.id = 124)-[e:knows]->(b:person) let b.name = SUM((b:person)-[e2]-(c:company) => c.value) match(b:person where b.name < 124)-[e3:knows]->(d:person) return b.name, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找所有名为何强的,name是郑伟且salary为3206的colleague,返回这些colleague的salary,和边的srcId,targetId",
        "output": "match(a where a.name='何强')-[e:colleague]->(b where b.name = '郑伟' and b.salary = 3206) return b.salary,e.srcId, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取与company相关的country节点，其中country节点的id为空。然后计算这些节点的value对830取余的个数和value的平均值除以464的最小值。",
        "output": "match(a:company)-[e]->(b:country where (b.id is null)) return COUNT(b.value % 830), MIN(AVG(b.value) / 464)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为id,name,height, 数据为(32,'孙宏',195),(80,'陈红',198), 以属性height作为相等条件,请帮我找出和person杜科有关的person,再请帮我找出和杜科person_lover_person的其他person,返回它们",
        "output": "with p as (select * from (VALUES(32,'孙宏',195),(80,'陈红',198)) as t(id,name,height))MATCH (a:person WHERE a.height = p.height AND (a.name = '杜科')) -[e ]-(b:person) , (a:person) -[e2:person_lover_person ]->(c:person) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与事项ISSUE-496有关系的事项, 返回和这些事项有关联的合并请求的,id减id的数量",
        "output": "match(a:issue where a.name= 'ISSUE-496')-[e]-(b:issue)-[e2]-(c:pullRequest) return COUNT(c.id - c.id)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出被用户张雪喜欢的仓库",
        "output": "match(a:repository)<-[e:likes]-(b:user where b.name='张雪') return a, b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询全部与清华大学存在拥有关系的部门,部门与教师存在拥有关系的点,返回这些点的年龄",
        "output": "match(a where a.name = '清华大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return c.age",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出韩强创建的评论节点所属的电影",
        "output": "match(a:person where a.name = '韩强')-[e:creates]->(b:comment)-[e2:belong]->(c:film) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有medicine的id的最小值加id减31的最大值",
        "output": "match(a:medicine) return MAX(MIN(a.id) + a.id - 31)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出186个身高不等于185且薪资在1625到3183之间的person,根据薪资降序排列",
        "output": "match(a:person where a.height <> 185 and (a.salary BETWEEN 1625 AND 3183)) return a order by a.salary desc limit 186",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询和标签等于person的点有喜欢关系的person,并且和这些person有支付关系的person,并且和这些person有支付关系的person",
        "output": "match(a:person)-[e:likes]->(b:person)-[e2:pay]->(c:person)-[e3:pay]->(d:person) return d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用列为level,name,value, 数据为(3,'华中科技大学',497),(1,'电子科技大学',575),(1,'武汉大学',105)的子查询作为输入表, 以属性name作为相等条件,查找所有伦敦的点belong的country,然后查找伦敦被belong的university,一起返回",
        "output": "with p as (select * from (VALUES(3,'华中科技大学',497),(1,'电子科技大学',575),(1,'武汉大学',105)) as t(level,name,value))MATCH (a WHERE a.name = p.name AND (a.name = '伦敦')) -[e:city_belong_country ]->(b:country) , (a WHERE a.name = '伦敦') <-[e2:university_belong_city ]-(c:university) RETURN a, b, c ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "找出名为徐思思的,wordCount不为空且name是Comment_242的friend,返回这些friend的id,和边的f0,targetId",
        "output": "match(a where a.name='徐思思')-[e:friend]->(b where (b.wordCount is not null) and b.name = 'Comment_242') return b.id,e.f0, e.targetId",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回和person王科有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person",
        "output": "match(a:person where a.name = '王科')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "获取孙若涵发布的帖子中包含的标签",
        "output": "match(a:user where a.name = '孙若涵')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 请帮我查询与处方点相关的药品节点，并按价格分组返回价格。",
        "output": "match(a:prescription)-[e:contain]-(b:medicine) return b.price group by b.price",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以0作为输入调用SSSP函数,返回运算结果",
        "output": "Call SSSP(0) yield (id, distance) return id, distance",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查找与company腾讯有关,且与account LX001有关系的loan节点",
        "output": "match(a:company where a.name='腾讯')-[e:apply]-(b:loan)-[e2:deposit]-(c:account where c.name='LX001') return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找类型为转账,以及满足条件源点id不是162的边",
        "output": "match(a)-[e:transfer where e.srcId <> 162]->(b) return e",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 返回所有起点为 student,终点为 selects 的边，并计算它们的 f0 减去 614 的和，以及 weight 对 157.67 取余后的最小值。",
        "output": "match(a:student)-[e:selects]->(b) return SUM(e.f0 - 614), MIN(MIN(e.weight) % 157.67)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于pullRequest,名为PR-464的点,返回这些点的name",
        "output": "match(a:pullRequest where a.name = 'PR-464') return a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以213,198,411,751作为请求点id, 源点的id等于输入表id,给出和名为白夜行的book有refers关系,或有refers的refers关系的book",
        "output": "with p as (select * from (VALUES(213),(198),(411),(751)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (n.name = 白夜行)) -[e:book_refers_book ]->{1,2}(b:book) RETURN b ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出标签为公司,名为微软的点,返回这些点的规格,价值,名字",
        "output": "match(a:company where a.name = '微软') return a.scale, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "查询和department有关联的teacher节点,并根据其height,salary,name分组,返回height,salary,name,以及salary减4123的值",
        "output": "match(a:department)-[e:has]-(b:teacher) return b.height, b.salary, b.name, b.salary - 4123 group by b.height, b.salary, b.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以421,593,143,979作为请求点id, 以属性id作为相等条件,给出person的1度以内的环",
        "output": "with p as (select * from (VALUES(421),(593),(143),(979)) as t(id)) MATCH (a:person WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回标签为城市的点,返回107个",
        "output": "match(a:city) return a limit 107",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "value的最小值减298乘10的数量",
        "output": "COUNT((MIN(a.value) - 298) * 10)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表193,173,210, 源点的id等于输入表id,帮我查询192个value不为空或value在143到339之间,且id小于等于51的tag,根据value从大到小排列",
        "output": "with p as (select * from (VALUES(193),(173),(210)) as t(id)) MATCH (a:tag WHERE a.id = p.id AND ((a.value IS NOT NULL OR a.value BETWEEN ASYMMETRIC 143 AND 339) AND a.id <= 51)) RETURN a ORDER BY a.value DESC LIMIT 192",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回被person relates数量大于115的person,记为relationCount,再查询这些person knows的person",
        "output": "match(a:person) let a.relationCount = SUM((a:person)<-[e:relates]-(b:person) => b.id) match(a where a.relationCount > 115)-[e2:knows]->(c:person) return c",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入表的列为age,gender,name, 数据为(29,'male','吴红'), 以属性gender作为相等条件,查询与software有关系的software节点,且software节点的name不等于Hadoop,并返回这些点的id对25取余的平均值,以及value对180取余加64减822减765的值",
        "output": "with p as (select * from (VALUES(29,'male','吴红')) as t(age,gender,name))MATCH (a:software WHERE a.gender = p.gender) -[e ]->(b:software WHERE b.name <> 'Hadoop') RETURN AVG(b.id % 25), b.value % 180 + 64 - 822 - 765 ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询14个名为Alice的点关联的label为person的节点,且节点年龄在48到95之间",
        "output": "match(a where a.name='Alice')-[e:relates]->(b:person where (b.age BETWEEN 48 AND 95)) return b limit 14",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "输入请求点id的列表932,255,12, 以属性id作为相等条件,请帮我查找全部处方以创建时间分组的创建时间, 根据创建时间降序排序",
        "output": "with p as (select * from (VALUES(932),(255),(12)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) RETURN a.createTime GROUP BY a.createTime ORDER BY a.createTime DESC ",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找全部和买家马思思有2到5跳关系的商品",
        "output": "match(a:buyer where a.name='马思思')-[e]->{2,5}(b:goods) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我找出与卖家杜国强有关系的卖家, 返回和这些卖家有关联的卖家的,id乘76的个数",
        "output": "match(a:seller where a.name= '杜国强')-[e]-(b:seller)-[e2]-(c:seller) return COUNT(c.id * 76)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "返回全部label为tag的点",
        "output": "match(a:tag) return a",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": " 给出87个处方，按照ID从小到大排序，其中87个处方的权重大于等于34或ID大于等于97。",
        "output": "match(a:prescription where a.weight > 34 or a.id >= 97) return a order by a.id asc limit 87",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据peopleNumber,value,name分组,计算area除96729的值",
        "output": "return a.area / 96729 group by a.peopleNumber, a.value, a.name",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "帮我查询标签等于prescription的点,并根据name升序排列",
        "output": "match(a:prescription) return a order by a.name asc",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据gender分组,计算id除93的平均值",
        "output": "return AVG(a.id / 93) group by a.gender",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "请帮我查找id为155的点的星数,语言",
        "output": "match(a where a.id = 155) return a.stars, a.lang",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "以24, 'bH'作为输入调用pageRank函数,返回运算结果",
        "output": "Call PAGERANK(24, 'bH') yield (id, value) return id, value",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据id分组,计算salary减salary的最小值",
        "output": "return MIN(a.salary - a.salary) group by a.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "金额乘7978.38的最大值",
        "output": "MAX(a.amount * 7978.38)",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "给出名为马思琪的person,以及与其有关的tag,并返回马思琪的height和这些tag的id",
        "output": "match(a:person where name = '马思琪')-[e]-(b:tag) return a.height, b.id",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和person点有pay关系的person节点,且边满足条件f0小于等于914,目标person节点满足条件id等于43",
        "output": "match(a:person)-[e:person_pay_person where e.f0 <= 914]->(b:person where b.id = 43) return b",
        "history": []
    },
    {
        "db_id": "",
        "instruction": "",
        "input": "根据规格,人数分组,计算id除58的最小值",
        "output": "return MIN(a.id / 58) group by a.scale, a.peopleNumber",
        "history": []
    }
]